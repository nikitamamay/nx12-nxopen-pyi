# module 'NXOpen.Features.ShipDesign'
#
# Automatically generated 2025-06-09T14:38:46.276222
#

import typing

import NXOpen
import NXOpen.Annotations
import NXOpen.Assemblies
import NXOpen.Drawings
import NXOpen.Features
import NXOpen.GeometricAnalysis
import NXOpen.GeometricUtilities
import NXOpen.Issue
import NXOpen.PDM
import NXOpen.Preferences
import NXOpen.Tooling
import NXOpen.Weld



class UpdateShipLibraryBuilderShipLibOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UpdateShipLibraryBuilderShipLibOptionType():
    """
    Ship Library Types 
    Note the weld along edge option is no longer used in NX7.5, and will be removed in NX8. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Profile", " - "
       "Belt", " - "
       "Cutout", " - "
       "Endcut", " - "
       "Support", " - "
       "SupportCap", " - "
       "WeldOnEdge", " - "
       "Bracket", " - "
       "WeldAlongEdge", "obsolete in NX7.5"
    """
    Profile = 0  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    Belt = 1  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    Cutout = 2  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    Endcut = 3  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    Support = 4  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    SupportCap = 5  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    WeldOnEdge = 6  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    Bracket = 7  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    WeldAlongEdge = 8  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UpdateShipLibraryBuilderShipLibAssemblyOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UpdateShipLibraryBuilderShipLibAssemblyOption():
    """
    Assembly update library options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WorkPart", "update the library in the current work part only"
       "WorkPartandComponents", "update the library in the current work part and all of its components"
       "WorkPartandComponentswithLibraries", "update any parts with existing libraries starting in the current work part and all of its components"
    """
    WorkPart = 0  # UpdateShipLibraryBuilderShipLibAssemblyOptionMemberType
    WorkPartandComponents = 1  # UpdateShipLibraryBuilderShipLibAssemblyOptionMemberType
    WorkPartandComponentswithLibraries = 2  # UpdateShipLibraryBuilderShipLibAssemblyOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UpdateShipLibraryBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.UpdateShipLibrary` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateUpdateShipLibraryBuilder`
    
    Default values.
    
    ================  =========
    Property          Value
    ================  =========
    AssemblyOptions   WorkPart 
    ----------------  ---------
    ShipLibType       Profile 
    ================  =========
    
    .. versionadded:: NX5.3.0
    """
    
    class ShipLibOptionType():
        """
        Ship Library Types 
        Note the weld along edge option is no longer used in NX7.5, and will be removed in NX8. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Profile", " - "
           "Belt", " - "
           "Cutout", " - "
           "Endcut", " - "
           "Support", " - "
           "SupportCap", " - "
           "WeldOnEdge", " - "
           "Bracket", " - "
           "WeldAlongEdge", "obsolete in NX7.5"
        """
        Profile = 0  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        Belt = 1  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        Cutout = 2  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        Endcut = 3  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        Support = 4  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        SupportCap = 5  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        WeldOnEdge = 6  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        Bracket = 7  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        WeldAlongEdge = 8  # UpdateShipLibraryBuilderShipLibOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShipLibAssemblyOption():
        """
        Assembly update library options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WorkPart", "update the library in the current work part only"
           "WorkPartandComponents", "update the library in the current work part and all of its components"
           "WorkPartandComponentswithLibraries", "update any parts with existing libraries starting in the current work part and all of its components"
        """
        WorkPart = 0  # UpdateShipLibraryBuilderShipLibAssemblyOptionMemberType
        WorkPartandComponents = 1  # UpdateShipLibraryBuilderShipLibAssemblyOptionMemberType
        WorkPartandComponentswithLibraries = 2  # UpdateShipLibraryBuilderShipLibAssemblyOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AssemblyOptions: UpdateShipLibraryBuilderShipLibAssemblyOption = ...
    """
    Returns or sets  the assembly scope options.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.UpdateShipLibraryBuilderShipLibAssemblyOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssemblyOptions`` 
    
    :param assemblyOptions: 
    :type assemblyOptions: :py:class:`NXOpen.Features.ShipDesign.UpdateShipLibraryBuilderShipLibAssemblyOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    FileBrowser: str = ...
    """
    Returns or sets  the file browser 
    
    <hr>
    
    Getter Method
    
    Signature ``FileBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.3.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FileBrowser`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX5.3.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ShipLibType: UpdateShipLibraryBuilderShipLibOptionType = ...
    """
    Returns or sets  the ship lib type 
    
    <hr>
    
    Getter Method
    
    Signature ``ShipLibType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.UpdateShipLibraryBuilderShipLibOptionType` 
    
    .. versionadded:: NX5.3.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShipLibType`` 
    
    :param shipLibType: 
    :type shipLibType: :py:class:`NXOpen.Features.ShipDesign.UpdateShipLibraryBuilderShipLibOptionType` 
    
    .. versionadded:: NX5.3.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: UpdateShipLibraryBuilder = ...  # unknown typename


class ShipCoordinates(NXOpen.Features.BodyFeature):
    """
    Represents a ship coordinates feature   
    
    Ship Coordinates is not supported in KF.
    
    .. versionadded:: NX8.0.0
    """
    Null: ShipCoordinates = ...  # unknown typename


class PenetrationList(NXOpen.Issue.IssueList):
    """
    Represents the Penetration List object.  
    
    Not support KF.
    
    .. versionadded:: NX8.0.0
    """
    Null: PenetrationList = ...  # unknown typename


class KnuckledProfiles(NXOpen.Features.BodyFeature):
    """
    Represents a knuckled profiles manufacturing preparation feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.KnuckledProfilesBuilder`
    
    .. versionadded:: NX5.0.3
    """
    Null: KnuckledProfiles = ...  # unknown typename


class PlateStockBuilderThickenOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateStockBuilderThickenOptions():
    """
    Settings to indicate how to apply the thickness to the mold face or offset mold face . 
    The front side of the offset mold face is defined by the client class using  :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleSided", "Thickness is applied to only the front side of the offset mold face."
       "TwoSided", "The opposite thickness is applied to the back side of the offset mold face, thickness minus the opposite thickness is applied to the front side of the offset mold face."
       "Symmetric", "Half of the thickness is applied to back and front sides of the offset mold face."
    """
    SingleSided = 0  # PlateStockBuilderThickenOptionsMemberType
    TwoSided = 1  # PlateStockBuilderThickenOptionsMemberType
    Symmetric = 2  # PlateStockBuilderThickenOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateStockBuilderThicknessSourceOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateStockBuilderThicknessSourceOptions():
    """
    Settings to indicate where the material thickness source resides. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "File", "The thickness is defined by a table of standard thicknesses for different material and material grades in CSV file."
       "List", "The thickness is defined by a list of standard thicknesses for different material and material grades."
    """
    File = 0  # PlateStockBuilderThicknessSourceOptionsMemberType
    List = 1  # PlateStockBuilderThicknessSourceOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateStockBuilder(NXOpen.Builder):
    """
    This builder allows you to define the stock information for plate system features in ship design.  
    
    It represents :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    Default values.
    
    ============================  =========================================
    Property                      Value
    ============================  =========================================
    KnuckleRatio                  3.0 
    ----------------------------  -----------------------------------------
    KnuckleSmoothAngle            3.0 
    ----------------------------  -----------------------------------------
    MaterialOption                0 
    ----------------------------  -----------------------------------------
    OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    ----------------------------  -----------------------------------------
    RestrictThicknessToMaterial   true 
    ----------------------------  -----------------------------------------
    ThickenOption                 SingleSided 
    ----------------------------  -----------------------------------------
    Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    ----------------------------  -----------------------------------------
    ThicknessSourceOption         List 
    ============================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class ThickenOptions():
        """
        Settings to indicate how to apply the thickness to the mold face or offset mold face . 
        The front side of the offset mold face is defined by the client class using  :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SingleSided", "Thickness is applied to only the front side of the offset mold face."
           "TwoSided", "The opposite thickness is applied to the back side of the offset mold face, thickness minus the opposite thickness is applied to the front side of the offset mold face."
           "Symmetric", "Half of the thickness is applied to back and front sides of the offset mold face."
        """
        SingleSided = 0  # PlateStockBuilderThickenOptionsMemberType
        TwoSided = 1  # PlateStockBuilderThickenOptionsMemberType
        Symmetric = 2  # PlateStockBuilderThickenOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ThicknessSourceOptions():
        """
        Settings to indicate where the material thickness source resides. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "File", "The thickness is defined by a table of standard thicknesses for different material and material grades in CSV file."
           "List", "The thickness is defined by a list of standard thicknesses for different material and material grades."
        """
        File = 0  # PlateStockBuilderThicknessSourceOptionsMemberType
        List = 1  # PlateStockBuilderThicknessSourceOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    KnuckleRatio: float = ...
    """
    Returns or sets  the knuckle ratio, which is used to calcuate the knuckle bend radius by multiplying the plate thickness by the ratio.  
    
    <hr>
    
    Getter Method
    
    Signature ``KnuckleRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KnuckleRatio`` 
    
    :param knuckleRatio: 
    :type knuckleRatio: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    KnuckleSmoothAngle: float = ...
    """
    Returns or sets  the knuckle smooth angle, which is used to determine whether a edge is knuckle edge or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``KnuckleSmoothAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KnuckleSmoothAngle`` 
    
    :param knuckleSmoothAngle: 
    :type knuckleSmoothAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    MassDensity: NXOpen.Expression = ...
    """
    Returns  the material mass density.  
    
    <hr>
    
    Getter Method
    
    Signature ``MassDensity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaterialGradeName: str = ...
    """
    Returns or sets  the material grade name.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialGradeName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialGradeName`` 
    
    :param materiaGradelName: 
    :type materiaGradelName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    MaterialGradeOption: int = ...
    """
    Returns or sets  the material grade option.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialGradeOption`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialGradeOption`` 
    
    :param materialGradeOption: 
    :type materialGradeOption: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    MaterialName: str = ...
    """
    Returns or sets  the material name.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialName`` 
    
    :param materialName: 
    :type materialName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    MaterialOption: int = ...
    """
    Returns or sets  the material option.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialOption`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialOption`` 
    
    :param materialOption: 
    :type materialOption: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    OppositeThickness: NXOpen.Expression = ...
    """
    Returns  the opposite thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``OppositeThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RestrictThicknessToMaterial: bool = ...
    """
    Returns or sets  the flag that indicates if thickness specification should be restricted to that defined in the material data base.  
    
    true indicates it should be restricted, false indicates it is not restricted.
    
    <hr>
    
    Getter Method
    
    Signature ``RestrictThicknessToMaterial`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestrictThicknessToMaterial`` 
    
    :param restrictThicknessToMaterial: 
    :type restrictThicknessToMaterial: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ThickenOption: PlateStockBuilderThickenOptions = ...
    """
    Returns or sets  the thicken option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThickenOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilderThickenOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThickenOption`` 
    
    :param thickenOption: 
    :type thickenOption: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilderThickenOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThicknessOption: int = ...
    """
    Returns or sets  the thickness option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessOption`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessOption`` 
    
    :param thicknessOption: 
    :type thicknessOption: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ThicknessSourceOption: PlateStockBuilderThicknessSourceOptions = ...
    """
    Returns or sets  the thickness source option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessSourceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilderThicknessSourceOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessSourceOption`` 
    
    :param thicknessSourceOption: 
    :type thicknessSourceOption: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilderThicknessSourceOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ThicknessStr: str = ...
    """
    Returns or sets  the thickness in string format.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessStr`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessStr`` 
    
    :param thicknessStr: 
    :type thicknessStr: str 
    
    .. versionadded:: NX10.0.1
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    WeightRating: str = ...
    """
    Returns or sets  the weight rating, which is defined together with material data and has one to one relationship to the thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``WeightRating`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeightRating`` 
    
    :param weightRating: 
    :type weightRating: str 
    
    .. versionadded:: NX8.5.3
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    Null: PlateStockBuilder = ...  # unknown typename


class RollingLineBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RollingLineBuilderTypes():
    """
    The option for the type of manufacturing operation to be performed on the sheet
    to form it.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Manual", "Creates a single line on the surface where the maximum force is to be applied."
       "Pressure", "Create multiple lines on the surface where the tangential for each line is constant on intersecting plane sections."
       "Geodesic", "Create a single geodesic line on the surface."
       "SteppedPressure", "Create a saw tooth set of curves on the surface where the tangential for each line is constant on intersecting plane sections."
    """
    Manual = 0  # RollingLineBuilderTypesMemberType
    Pressure = 1  # RollingLineBuilderTypesMemberType
    Geodesic = 2  # RollingLineBuilderTypesMemberType
    SteppedPressure = 3  # RollingLineBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RollingLineBuilderStartEvaluationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RollingLineBuilderStartEvaluationTypes():
    """
    The option for how the starting point for the evaluation of the sheet is to be created if
    it is not given.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetMidpoint", "Use the midpoint of the sheet as the seed point for evaluation."
       "PointOnFace", "Use a point on the selected face to start the evaluation."
       "NewPoint", "Use the newly created, or specified, point as the seed point to start the evaluation."
    """
    SheetMidpoint = 0  # RollingLineBuilderStartEvaluationTypesMemberType
    PointOnFace = 1  # RollingLineBuilderStartEvaluationTypesMemberType
    NewPoint = 2  # RollingLineBuilderStartEvaluationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RollingLineBuilderConstructionMethodTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RollingLineBuilderConstructionMethodTypes():
    """
    The option to specify the method for creation of the pressure line.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MarchingAngle", "Use an initial value method and march along the varying normals at each subsequent location."
       "MarchingCurvature", "Use an initial value method and march along the varying normals at each subsequent location adjusting the final direction by the sheet curvature."
       "ParallelPlane", "Use a parallel plane approach to develop the pressure line."
       "MinimumCurvature", "Use an initial value method and march along the minimum curvature at each subsequent location."
       "MaximumCurvature", "Use an initial value method and march along the maximum curvature at each subsequent location."
       "Highlight", "Use an initial value method and march along the highlight (zero degree isocline) at each subsequent location."
       "Asymptote", "Use an initial value method and march along and create the asymptotic lines. Valid for a surface location that generates a hyperbole or parabola."
    """
    MarchingAngle = 0  # RollingLineBuilderConstructionMethodTypesMemberType
    MarchingCurvature = 1  # RollingLineBuilderConstructionMethodTypesMemberType
    ParallelPlane = 2  # RollingLineBuilderConstructionMethodTypesMemberType
    MinimumCurvature = 3  # RollingLineBuilderConstructionMethodTypesMemberType
    MaximumCurvature = 4  # RollingLineBuilderConstructionMethodTypesMemberType
    Highlight = 5  # RollingLineBuilderConstructionMethodTypesMemberType
    Asymptote = 6  # RollingLineBuilderConstructionMethodTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RollingLineBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.RollingLine` builder.  
    
    It is used to create and edit a rolling line feature.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateRollingLineBuilder`
    
    Default values.
    
    ==================================  ===============================================
    Property                            Value
    ==================================  ===============================================
    Angle.Value                         15.0 
    ----------------------------------  -----------------------------------------------
    AngleDivisions.Value                3 
    ----------------------------------  -----------------------------------------------
    ConstructionMethodOption            MarchingAngle 
    ----------------------------------  -----------------------------------------------
    DupinIndicatrix.Angle               0 
    ----------------------------------  -----------------------------------------------
    DupinIndicatrix.FlatnessTolerance   3500 (millimeters part), 137.8 (inches part) 
    ----------------------------------  -----------------------------------------------
    DupinIndicatrix.Scale               1.0 
    ----------------------------------  -----------------------------------------------
    EvaluationPointOption               SheetMidpoint 
    ----------------------------------  -----------------------------------------------
    HideConstructionProcess             1 
    ----------------------------------  -----------------------------------------------
    Offset.Value                        500.0 (millimeters part), 20.0 (inches part) 
    ----------------------------------  -----------------------------------------------
    PlanarRadiusLimit.Value             3500.0 (millimeters part), 137.8 (inches part) 
    ==================================  ===============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        The option for the type of manufacturing operation to be performed on the sheet
        to form it.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Manual", "Creates a single line on the surface where the maximum force is to be applied."
           "Pressure", "Create multiple lines on the surface where the tangential for each line is constant on intersecting plane sections."
           "Geodesic", "Create a single geodesic line on the surface."
           "SteppedPressure", "Create a saw tooth set of curves on the surface where the tangential for each line is constant on intersecting plane sections."
        """
        Manual = 0  # RollingLineBuilderTypesMemberType
        Pressure = 1  # RollingLineBuilderTypesMemberType
        Geodesic = 2  # RollingLineBuilderTypesMemberType
        SteppedPressure = 3  # RollingLineBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StartEvaluationTypes():
        """
        The option for how the starting point for the evaluation of the sheet is to be created if
        it is not given.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetMidpoint", "Use the midpoint of the sheet as the seed point for evaluation."
           "PointOnFace", "Use a point on the selected face to start the evaluation."
           "NewPoint", "Use the newly created, or specified, point as the seed point to start the evaluation."
        """
        SheetMidpoint = 0  # RollingLineBuilderStartEvaluationTypesMemberType
        PointOnFace = 1  # RollingLineBuilderStartEvaluationTypesMemberType
        NewPoint = 2  # RollingLineBuilderStartEvaluationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ConstructionMethodTypes():
        """
        The option to specify the method for creation of the pressure line.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MarchingAngle", "Use an initial value method and march along the varying normals at each subsequent location."
           "MarchingCurvature", "Use an initial value method and march along the varying normals at each subsequent location adjusting the final direction by the sheet curvature."
           "ParallelPlane", "Use a parallel plane approach to develop the pressure line."
           "MinimumCurvature", "Use an initial value method and march along the minimum curvature at each subsequent location."
           "MaximumCurvature", "Use an initial value method and march along the maximum curvature at each subsequent location."
           "Highlight", "Use an initial value method and march along the highlight (zero degree isocline) at each subsequent location."
           "Asymptote", "Use an initial value method and march along and create the asymptotic lines. Valid for a surface location that generates a hyperbole or parabola."
        """
        MarchingAngle = 0  # RollingLineBuilderConstructionMethodTypesMemberType
        MarchingCurvature = 1  # RollingLineBuilderConstructionMethodTypesMemberType
        ParallelPlane = 2  # RollingLineBuilderConstructionMethodTypesMemberType
        MinimumCurvature = 3  # RollingLineBuilderConstructionMethodTypesMemberType
        MaximumCurvature = 4  # RollingLineBuilderConstructionMethodTypesMemberType
        Highlight = 5  # RollingLineBuilderConstructionMethodTypesMemberType
        Asymptote = 6  # RollingLineBuilderConstructionMethodTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle for either the max amount of rotation at a point for manual type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    AngleDivisions: NXOpen.Expression = ...
    """
    Returns  the number of divisions for dividing the angle when using a manual type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleDivisions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the modeling angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ConstructionMethodOption: RollingLineBuilderConstructionMethodTypes = ...
    """
    Returns or sets  the value specifying which construction method to use for creating the rolling line.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstructionMethodOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderConstructionMethodTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstructionMethodOption`` 
    
    :param constructionMethodOption: 
    :type constructionMethodOption: :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderConstructionMethodTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the modeling distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    DupinIndicatrix: NXOpen.GeometricAnalysis.DupinBuilder = ...
    """
    Returns  the dupin indicatrix for surface analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``DupinIndicatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricAnalysis.DupinBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EvaluationPoint: NXOpen.Point = ...
    """
    Returns or sets  the selected point for evaluation when :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderStartEvaluationTypes` is
    :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderStartEvaluationTypes.NewPoint <NXOpen.Features.ShipDesign.RollingLineBuilderStartEvaluationTypes>`.  
    
    Not used for :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderTypes.SteppedPressure <NXOpen.Features.ShipDesign.RollingLineBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``EvaluationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EvaluationPoint`` 
    
    :param evaluationPoint: 
    :type evaluationPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    EvaluationPointOption: RollingLineBuilderStartEvaluationTypes = ...
    """
    Returns or sets  the option on how to seed the starting point for the evaluation.  
    
    <hr>
    
    Getter Method
    
    Signature ``EvaluationPointOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderStartEvaluationTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EvaluationPointOption`` 
    
    :param evaluationPointOption: 
    :type evaluationPointOption: :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderStartEvaluationTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    HideConstructionProcess: bool = ...
    """
    Returns or sets  the value specifying if the construction process should be hidden.  
    
    True indicates that the process should be hidden. Only valid for a manual type rolling line. 
    
    <hr>
    
    Getter Method
    
    Signature ``HideConstructionProcess`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HideConstructionProcess`` 
    
    :param hideConstructionProcess: 
    :type hideConstructionProcess: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset to be applied when marching along the surface to the next point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlanarRadiusLimit: NXOpen.Expression = ...
    """
    Returns  the maximum radius on the surface to be considered non-planar.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlanarRadiusLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlaneOrientation: NXOpen.Plane = ...
    """
    Returns or sets  the plane orientation to be used for :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderTypes.SteppedPressure <NXOpen.Features.ShipDesign.RollingLineBuilderTypes>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneOrientation`` 
    
    :param planeOrientation: 
    :type planeOrientation: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    PointOnFace: NXOpen.Point3d = ...
    """
    Returns or sets  the point specified by the surface selection.  
    
    This point is set during the UI interaction. 
    
    <hr>
    
    Getter Method
    
    Signature ``PointOnFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    
    <hr>
    
    Setter Method
    
    Signature ``PointOnFace`` 
    
    :param pointOnFace: 
    :type pointOnFace: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    SpecifyDirection: NXOpen.Direction = ...
    """
    Returns or sets  the initial flow direction.  
    
    Not used for :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderTypes.SteppedPressure <NXOpen.Features.ShipDesign.RollingLineBuilderTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyDirection`` 
    
    :param specifyDirection: 
    :type specifyDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Surface: NXOpen.ScCollector = ...
    """
    Returns  the collection of faces that represent the surface to be analyzed.  
    
    <hr>
    
    Getter Method
    
    Signature ``Surface`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: RollingLineBuilderTypes = ...
    """
    Returns or sets  the value identifying what type of manufacturing process is to be applied to the surface for bending.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: RollingLineBuilder = ...  # unknown typename


class SmartRule(NXOpen.Features.Feature):
    """
    Represents a smart rule feature.  
    
    The Smart Rule feature is used to drive smart rule in template part. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SmartRuleBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: SmartRule = ...  # unknown typename


class SteelInsulationBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.SteelInsulation` feature.  
    
    The steel insulation feature creates a single solid body representing the insultion on the steel surfaces.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSteelInsulationBuilder`
    
    Default values.
    
    ================  =========================================
    Property          Value
    ================  =========================================
    Thickness.Value   25 (millimeters part), 1.0 (inches part) 
    ================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    
    def CreateSteelInsulationBoundary(self) -> SteelInsulationBoundaryBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` builder.  
        
        Signature ``CreateSteelInsulationBoundary()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    BoundaryList: SteelInsulationBoundaryBuilderList = ...
    """
    Returns  the list of :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` defining the insulation boundaries that need to be adjusted.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the modeling distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EnableBoundaryAdjustment: bool = ...
    """
    Returns or sets  the indication if the boundary adjustement is enabled.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableBoundaryAdjustment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableBoundaryAdjustment`` 
    
    :param enableBoundaryAdjustment: 
    :type enableBoundaryAdjustment: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    InsulateProfile: bool = ...
    """
    Returns or sets  the indication if the profile attached to the plate should be insulated.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsulateProfile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsulateProfile`` 
    
    :param insulateProfile: 
    :type insulateProfile: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    InsulationHeight: NXOpen.Expression = ...
    """
    Returns  the expression containing the insulation height value for the profiles.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsulationHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaterialType: int = ...
    """
    Returns or sets  the insulation material type.  
    
    The material information is defined in nxship_manufacturing_config.dat file. 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialType`` 
    
    :param materialType: 
    :type materialType: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SteelFaces: NXOpen.ScCollector = ...
    """
    Returns  the collection of faces to be insulated.  
    
    During creation, each set of faces that can be sewn into a single sheet will form a new steel insulation feature. During edit, all the faces must be sewable to a single sheet body. 
    
    <hr>
    
    Getter Method
    
    Signature ``SteelFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThickenDirection: bool = ...
    """
    Returns or sets  the indication if the thicken direction of the insulation should be the same as the sewn face normal.  
    
    True indicates that the insulation will be thickened in the same direction as the sewn face normal. 
    
    <hr>
    
    Getter Method
    
    Signature ``ThickenDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThickenDirection`` 
    
    :param thickenDirection: 
    :type thickenDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the expression containing the insulation material thickness value.  
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SteelInsulationBuilder = ...  # unknown typename


class StiffenerLimitBuilderLimitTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerLimitBuilderLimitType():
    """
    Path limiting method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Value", "Trim or extend by a fixed distance value."
       "SquareCut", "Stiffener will extend into limiting geometry."
       "NeatTrim", "It will automatically create an End Cut that trim the stiffener to the selected geometry."
    """
    Value = 0  # StiffenerLimitBuilderLimitTypeMemberType
    SquareCut = 1  # StiffenerLimitBuilderLimitTypeMemberType
    NeatTrim = 2  # StiffenerLimitBuilderLimitTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerLimitBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class defines the path limit method used by a Stiffener or Edge Reinforcement feature.  
    
    .. versionadded:: NX8.0.0
    """
    
    class LimitType():
        """
        Path limiting method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Value", "Trim or extend by a fixed distance value."
           "SquareCut", "Stiffener will extend into limiting geometry."
           "NeatTrim", "It will automatically create an End Cut that trim the stiffener to the selected geometry."
        """
        Value = 0  # StiffenerLimitBuilderLimitTypeMemberType
        SquareCut = 1  # StiffenerLimitBuilderLimitTypeMemberType
        NeatTrim = 2  # StiffenerLimitBuilderLimitTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    LimitGeometry: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the limiting geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LimitMethod: StiffenerLimitBuilderLimitType = ...
    """
    Returns or sets  the limit method 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerLimitBuilderLimitType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitMethod`` 
    
    :param limitMethod: 
    :type limitMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerLimitBuilderLimitType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    LimitValue: NXOpen.Expression = ...
    """
    Returns  the fixed limiting value 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SquareCutClearance: NXOpen.Expression = ...
    """
    Returns  the limit clearance value 
    
    <hr>
    
    Getter Method
    
    Signature ``SquareCutClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: StiffenerLimitBuilder = ...  # unknown typename


class PlaneListBuilder(NXOpen.Builder):
    """
    This class is used to place a plane into a list.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.FeatureParmsBuilder.CreatePlaneForList`
    
    .. versionadded:: NX8.0.0
    """
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the plane defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane1: 
    :type plane1: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Valid: bool = ...
    """
    Returns or sets  the indication if the defined plane is valid or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Valid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Valid`` 
    
    :param valid: 
    :type valid: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: PlaneListBuilder = ...  # unknown typename


class WeightAndCGBuilderSelectionMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WeightAndCGBuilderSelectionMethods():
    """
    Settings to indicate how the objects are selected. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Volume", "Selection by volume."
       "Frame", "Selection by Frame."
    """
    Volume = 0  # WeightAndCGBuilderSelectionMethodsMemberType
    Frame = 1  # WeightAndCGBuilderSelectionMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WeightAndCGBuilder(NXOpen.Builder):
    """
    Represents the class Features.  
    
    ShipDesign.WeightAndCGBuilder which is used to 
    calculate the weight and cg information.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateWeightAndCgBuilder`
    
    Default values.
    
    ================  =======
    Property          Value
    ================  =======
    SelectionMethod   Volume 
    ================  =======
    
    .. versionadded:: NX10.0.0
    """
    
    class SelectionMethods():
        """
        Settings to indicate how the objects are selected. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Volume", "Selection by volume."
           "Frame", "Selection by Frame."
        """
        Volume = 0  # WeightAndCGBuilderSelectionMethodsMemberType
        Frame = 1  # WeightAndCGBuilderSelectionMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetFrameParts(self, nPartCount: int) -> NXOpen.Part:
        """
        Sets the selected frame parts.  
        
        Signature ``SetFrameParts(nPartCount)`` 
        
        :param nPartCount: 
        :type nPartCount: int 
        :returns:  ship basic design structure component. 
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    SelectionMethod: WeightAndCGBuilderSelectionMethods = ...
    """
    Returns or sets  the selection method.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.WeightAndCGBuilderSelectionMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionMethod`` 
    
    :param enumSelectionType: 
    :type enumSelectionType: :py:class:`NXOpen.Features.ShipDesign.WeightAndCGBuilderSelectionMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    VolumeBody: NXOpen.SelectBody = ...
    """
    Returns  the selected volume body.  
    
    <hr>
    
    Getter Method
    
    Signature ``VolumeBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: WeightAndCGBuilder = ...  # unknown typename


class BulkHeadListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[BulkHeadListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: BulkHeadListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: BulkHeadListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> BulkHeadListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BulkHeadListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BulkHeadListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[BulkHeadListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[BulkHeadListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: BulkHeadListItemBuilder, object2: BulkHeadListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: BulkHeadListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: BulkHeadListItemBuilderList = ...  # unknown typename


class ReferenceLineBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ReferenceLine` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateReferenceLineBuilder`
    
    .. versionadded:: NX5.0.0
    """
    FramePlane: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the grid fame plane to intersect with the face to produce the reference line.  
    
    <hr>
    
    Getter Method
    
    Signature ``FramePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the expression defining the offset to be applied to each grid plane before intersection.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ReferenceFace: NXOpen.ScCollector = ...
    """
    Returns  the face to intersect with, defining the reference line.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ReferenceLineBuilder = ...  # unknown typename


class CustomBracket(NXOpen.Features.BodyFeature):
    """
    Represents a custom bracket feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.CustomBracketBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: CustomBracket = ...  # unknown typename


class BuiltUpManModeBuilderBuiltUpManModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BuiltUpManModeBuilderBuiltUpManModeType():
    """
    This enum defines the allowable values for the BuiltUp Profile Manufacturing Mode which
    may be either "Cut To Shape" or "Bend After Join". See the NX Ship documentation for
    an explanation of these in terms of the manufacturing process.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CutToShape", " - "
       "BendAfterJoin", " - "
       "NotSet", " - "
    """
    CutToShape = 0  # BuiltUpManModeBuilderBuiltUpManModeTypeMemberType
    BendAfterJoin = 1  # BuiltUpManModeBuilderBuiltUpManModeTypeMemberType
    NotSet = 2  # BuiltUpManModeBuilderBuiltUpManModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BuiltUpManModeBuilder(NXOpen.Builder):
    """
    This class allows you to set the NX Ship BuiltUp Profile Manufacturing Mode for
    one or more components.  
    
    This mode may be either "Bend After Join" or "Cut To Shape".
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateBuiltUpManModeBuilder`
    
    Default values.
    
    ===============  ===========
    Property         Value
    ===============  ===========
    BuiltupManMode   CutToShape 
    ===============  ===========
    
    .. versionadded:: NX9.0.0
    """
    
    class BuiltUpManModeType():
        """
        This enum defines the allowable values for the BuiltUp Profile Manufacturing Mode which
        may be either "Cut To Shape" or "Bend After Join". See the NX Ship documentation for
        an explanation of these in terms of the manufacturing process.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CutToShape", " - "
           "BendAfterJoin", " - "
           "NotSet", " - "
        """
        CutToShape = 0  # BuiltUpManModeBuilderBuiltUpManModeTypeMemberType
        BendAfterJoin = 1  # BuiltUpManModeBuilderBuiltUpManModeTypeMemberType
        NotSet = 2  # BuiltUpManModeBuilderBuiltUpManModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BuiltupComps: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the components for which the Manufacturing Mode will be set 
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltupComps`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BuiltupManMode: BuiltUpManModeBuilderBuiltUpManModeType = ...
    """
    Returns or sets  the builtup Manufactirng Mode 
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltupManMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BuiltUpManModeBuilderBuiltUpManModeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BuiltupManMode`` 
    
    :param builtupManMode: 
    :type builtupManMode: :py:class:`NXOpen.Features.ShipDesign.BuiltUpManModeBuilderBuiltUpManModeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: BuiltUpManModeBuilder = ...  # unknown typename


class SectionEditorBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SectionEditorBuilder` builder.  
    
    This builder is used to edit Ship Section View and returns None. 
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSectionEditorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    @typing.overload
    def FindFocusPlates(self, origin: NXOpen.Point3d, normal: NXOpen.Vector3d, frontProximity: float, backProximity: float) -> 'list[NXOpen.NXObject]':
        """
        Returns a list of focus plates at the given position  
        
        Signature ``FindFocusPlates(origin, normal, frontProximity, backProximity)`` 
        
        :param origin:  the view position  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param normal:  the view direction  
        :type normal: :py:class:`NXOpen.Vector3d` 
        :param frontProximity:  the proximity in front of the view 
        :type frontProximity: float 
        :param backProximity:  the proximity at the back of the view 
        :type backProximity: float 
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    @typing.overload
    def FindFocusPlates(self, sectionPlane: NXOpen.Plane) -> 'list[NXOpen.NXObject]':
        """
        Returns a list of focus plates searched and found by the given datum plane. This function is used only when the view
        is defined by Specify Plane. And the list just contains the geometry of the plane  
        
        Signature ``FindFocusPlates(sectionPlane)`` 
        
        :param sectionPlane:  the datum plane used to create the view 
        :type sectionPlane: :py:class:`NXOpen.Plane` 
        :returns:  the face( for plate ) or solid body( for stiffener )   
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    BackProximity: NXOpen.Expression = ...
    """
    Returns  the ship section back proximity 
    
    <hr>
    
    Getter Method
    
    Signature ``BackProximity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Denominator: int = ...
    """
    Returns or sets  the denominator of the view scale
    
    <hr>
    
    Getter Method
    
    Signature ``Denominator`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Denominator`` 
    
    :param denominator: 
    :type denominator: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    FrontProximity: NXOpen.Expression = ...
    """
    Returns  the ship section front proximity 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontProximity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Numerator: int = ...
    """
    Returns or sets  the numerator of the view scale
    
    <hr>
    
    Getter Method
    
    Signature ``Numerator`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Numerator`` 
    
    :param numerator: 
    :type numerator: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionRule: SectionViewBuilderSectionRuleOptions = ...
    """
    Returns or sets  the ship section rule method 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionRule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSectionRuleOptions` 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:class:`Features.ShipDesign.SectionViewBuilder`.SectionRule() instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionRule`` 
    
    :param enumSectionMethod: 
    :type enumSectionMethod: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSectionRuleOptions` 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:class:`Features.ShipDesign.SectionViewBuilder`.SectionRule() instead.
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionView: SectionViewBuilder = ...
    """
    Returns  the ship section view 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ShipStructure: ShipStructureBuilder = ...
    """
    Returns  the ship structures 
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipStructureBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SymmetricalStructure: SectionViewBuilderSymmetricalStructureOptions = ...
    """
    Returns or sets  the symmetrical structure  
    
    <hr>
    
    Getter Method
    
    Signature ``SymmetricalStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSymmetricalStructureOptions` 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:class:`Features.ShipDesign.SectionViewBuilder`.SymmetricalStructure() instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymmetricalStructure`` 
    
    :param symmetricalStructure: 
    :type symmetricalStructure: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSymmetricalStructureOptions` 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:class:`Features.ShipDesign.SectionViewBuilder`.SymmetricalStructure() instead.
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ViewList: NXOpen.Drawings.SelectDraftingViewList = ...
    """
    Returns  the ship section views list
    
    <hr>
    
    Getter Method
    
    Signature ``ViewList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: SectionEditorBuilder = ...  # unknown typename


class TransFrameListItemBuilder(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder`
    
    .. versionadded:: NX5.0.0
    """
    EndFrame: int = ...
    """
    Returns or sets  the end frame index.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndFrame`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndFrame`` 
    
    :param endFrame: 
    :type endFrame: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    FrameSpacing: NXOpen.Expression = ...
    """
    Returns  the expression containing the frame spacing value.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrameSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: TransFrameListItemBuilder = ...  # unknown typename


class ConceptFromSpreadsheet(NXOpen.Features.BodyFeature):
    """
    Represents a concept from spreadsheet feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ConceptFromSpreadsheetBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: ConceptFromSpreadsheet = ...  # unknown typename


class SubSystemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SubSystemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SubSystemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SubSystemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SubSystemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SubSystemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SubSystemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SubSystemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SubSystemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SubSystemBuilder, object2: SubSystemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SubSystemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SubSystemBuilderList = ...  # unknown typename


class BracketBuilderAlignmentTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BracketBuilderAlignmentTypes():
    """
    The alignment types.  
    
    This option specifies how the bracket is aligned. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DatumPlaneAlignment", "The bracket molding face is aligned to a datum plane"
       "AutoAlignment", "The bracket molding faces is aligned to stiffener molding face"
       "Lapped", "The bracket is lapped with stiffener"
    """
    DatumPlaneAlignment = 0  # BracketBuilderAlignmentTypesMemberType
    AutoAlignment = 1  # BracketBuilderAlignmentTypesMemberType
    Lapped = 2  # BracketBuilderAlignmentTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BracketBuilderLimitTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BracketBuilderLimitTypes():
    """
    The limit types.  
    
    This option specifies how many limit objects there are. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoLimit", "The bracket does not have any limit object"
       "OneLimit", "The bracket has one limit object"
       "TwoLimit", "The bracket has two limit objects"
       "ThreeLimit", "The bracket has three limit objects"
    """
    NoLimit = 0  # BracketBuilderLimitTypesMemberType
    OneLimit = 1  # BracketBuilderLimitTypesMemberType
    TwoLimit = 2  # BracketBuilderLimitTypesMemberType
    ThreeLimit = 3  # BracketBuilderLimitTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BracketBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.Bracket` builder.
    
    This builder is used to create and edit bracket feature. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateBracketBuilder`
    
    Default values.
    
    =====================  ======================================
    Property               Value
    =====================  ======================================
    AlignmentAngle.Value   0 
    ---------------------  --------------------------------------
    AlignmentType          DatumPlaneAlignment 
    ---------------------  --------------------------------------
    BracketOffset.Value    0 (millimeters part), 0 (inches part) 
    ---------------------  --------------------------------------
    LimitType              NoLimit 
    =====================  ======================================
    
    .. versionadded:: NX11.0.0
    """
    
    class AlignmentTypes():
        """
        The alignment types.  
        
        This option specifies how the bracket is aligned. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DatumPlaneAlignment", "The bracket molding face is aligned to a datum plane"
           "AutoAlignment", "The bracket molding faces is aligned to stiffener molding face"
           "Lapped", "The bracket is lapped with stiffener"
        """
        DatumPlaneAlignment = 0  # BracketBuilderAlignmentTypesMemberType
        AutoAlignment = 1  # BracketBuilderAlignmentTypesMemberType
        Lapped = 2  # BracketBuilderAlignmentTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LimitTypes():
        """
        The limit types.  
        
        This option specifies how many limit objects there are. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoLimit", "The bracket does not have any limit object"
           "OneLimit", "The bracket has one limit object"
           "TwoLimit", "The bracket has two limit objects"
           "ThreeLimit", "The bracket has three limit objects"
        """
        NoLimit = 0  # BracketBuilderLimitTypesMemberType
        OneLimit = 1  # BracketBuilderLimitTypesMemberType
        TwoLimit = 2  # BracketBuilderLimitTypesMemberType
        ThreeLimit = 3  # BracketBuilderLimitTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AlignmentAngle: NXOpen.Expression = ...
    """
    Returns  the alignment angle along attachment entity.  
    
    The bracket edge on reinforcement face side is rotated by this angle along the bracket edge on the attachment side.
    
    The unit is in degree.
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentAngle`` 
    
    :returns:  Alignment angle  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AlignmentPlane: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the alignment plane.  
    
    The bracket molding face is aligned to the alignment plane if no offset is set in
    :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.BracketOffset`
    
    It is only used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AlignmentType``
    is set to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.DatumPlaneAlignment <Features.ShipDesign.BracketBuilderAlignmentTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentPlane`` 
    
    :returns:  Alignment plane  
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AlignmentType: BracketBuilderAlignmentTypes = ...
    """
    Returns or sets  the bracket alignment type.  
    
    If you set the alignment type to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.DatumPlaneAlignment <Features.ShipDesign.BracketBuilderAlignmentTypes>`, 
    then please also set values for below properties:
    
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.ReinforcementFace`
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AttachmentFace`
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AlignmentPlane`
    
    If you set the alignment type to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.AutoAlignment <Features.ShipDesign.BracketBuilderAlignmentTypes>`, 
    then please also set values for below properties:
    
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.ReinforcementFace`
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AttachmentStiffener`
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentType`` 
    
    :returns:  Alignment type  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BracketBuilderAlignmentTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentType`` 
    
    :param alignmentType:  Alignment type  
    :type alignmentType: :py:class:`NXOpen.Features.ShipDesign.BracketBuilderAlignmentTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance (degrees)  
    
    The angular tolerance is used for:
    
      * bracket placement orign and orientation evaluation
      * bracket geometry construction
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AttachmentDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  the install direction on attachment face.  
    
    The attachment direction defines which side the bracket is attached to the attachment face.
    You can either place the bracket on the attachment face normal side or the opposite side.
    The install directions are ship orientations based on the attachment face normal.
    For example: If the attachment face normal is in 'For' direction, then you should
    set the install direction to either 'For' or 'Aft'. 
    
    It is only used in Ship Structure Basic Design Application.
    
    It is only used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AlignmentType``
    is set to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.DatumPlaneAlignment <Features.ShipDesign.BracketBuilderAlignmentTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttachmentDirection`` 
    
    :param attachmentDirection: 
    :type attachmentDirection: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AttachmentFace: NXOpen.ScCollector = ...
    """
    Returns  the attachment face.  
    
    The attachment face defines the faces which the bracket is attached to. 
    You can attach the bracket to more than one faces.
    
    The attachment face is only used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AlignmentType``
    is set to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.DatumPlaneAlignment <Features.ShipDesign.BracketBuilderAlignmentTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AttachmentStiffener: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the attachment stiffener.  
    
    The bracket is attached to the stiffener body top face and aligned to the stiffener molding face if no offset is set in
    :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.BracketOffset`
    
    It is only used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AlignmentType``
    is set to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.AutoAlignment <Features.ShipDesign.BracketBuilderAlignmentTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentStiffener`` 
    
    :returns:  Attachment stiffener  
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    BracketOffset: NXOpen.Expression = ...
    """
    Returns  the offset to the alignment plane or attachment stiffener molding face.  
    
    If offset is zero, the bracket molding face is aligned to the alignment plane or attachment stiffener molding face.
    
    <hr>
    
    Getter Method
    
    Signature ``BracketOffset`` 
    
    :returns:  Bracket offset  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance (part units)  
    
    The distance tolerance is used for:
    
      * bracket placement orign and orientation evaluation
      * bracket geometry construction
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    EndAttachment: NXOpen.ScCollector = ...
    """
    Returns  the end attachment.  
    
    This defines the limit object on the end side. 
    
    It is used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.LimitType``
    is set to :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes.TwoLimit <NXOpen.Features.ShipDesign.BracketBuilderLimitTypes>`
    or :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes.ThreeLimit <NXOpen.Features.ShipDesign.BracketBuilderLimitTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``EndAttachment`` 
    
    :returns:  End attachment  
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    LimitType: BracketBuilderLimitTypes = ...
    """
    Returns or sets  the limit type.  
    
    If you set the limit type to :py:class:`Features.ShipDesign.BracketBuilderLimitTypes.NoLimit <Features.ShipDesign.BracketBuilderLimitTypes>`, 
    you don't need to set any limit object.
    
    If you set the limit type to :py:class:`Features.ShipDesign.BracketBuilderLimitTypes.OneLimit <Features.ShipDesign.BracketBuilderLimitTypes>`, 
    then please also set value for :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.StartAttachment`.
    
    If you set the alignment type to :py:class:`Features.ShipDesign.BracketBuilderLimitTypes.TwoLimit <Features.ShipDesign.BracketBuilderLimitTypes>`, 
    then please also set values for below properties:
    
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.StartAttachment`
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.EndAttachment`
    
    If you set the alignment type to :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes.ThreeLimit <NXOpen.Features.ShipDesign.BracketBuilderLimitTypes>`, 
    then please also set values for below properties:
    
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.StartAttachment`
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.EndAttachment`
      * :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.StartAttachmentLimit`
    
    <hr>
    
    Getter Method
    
    Signature ``LimitType`` 
    
    :returns:  Limit type  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitType`` 
    
    :param limitType:  Limit type  
    :type limitType: :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ManufacturingStock: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock.  
    
    The manufacturing stock defines data that is to be applied to the bracket.
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingStock`` 
    
    :returns:  Manufacturing stock  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PickPointOnAttachment: NXOpen.Point3d = ...
    """
    Returns or sets  the pick point on attachment face.  
    
    When the attachment face is curved (such as a cylindrical face), the bracket can
    be placed at multiple locations, then the pick point is used.
    The position which is closest to the pick point is used.
    
    It is optional. If there are multiple candidate locations and this is not set, a random location is chosen.
    
    It is only used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AlignmentType``
    is set to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.DatumPlaneAlignment <Features.ShipDesign.BracketBuilderAlignmentTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``PickPointOnAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PickPointOnAttachment`` 
    
    :param pickPoint: 
    :type pickPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    PickPointOnReinforcement: NXOpen.Point3d = ...
    """
    Returns or sets  the pick point on reinforcement face.  
    
    When the reinforcement face is curved (such as a cylindrical face), the bracket can
    be placed at multiple locations, then the pick point is used.
    The location which is closest to the pick point is used.
    
    It is optional. If there are multiple candidate locations and this is not set, a random location is chosen.
    
    <hr>
    
    Getter Method
    
    Signature ``PickPointOnReinforcement`` 
    
    :returns:  Pick Point type  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PickPointOnReinforcement`` 
    
    :param pickPoint:  Pick Point type  
    :type pickPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ReinforcementDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  the install direction on reinforcement face.  
    
    The reinforcement direction defines which side the bracket is placed on the reinforcement face.
    You can either place the bracket on the reinforcement face normal side or the opposite side.
    The install directions are ship orientations based on the reinforcement face normal.
    For example: If the reinforcement face normal is in 'For' direction, then you should
    set the install direction to either 'For' or 'Aft'. 
    
    It is only used in Ship Structure Basic Design Application.
    
    <hr>
    
    Getter Method
    
    Signature ``ReinforcementDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReinforcementDirection`` 
    
    :param reinforcementDirection: 
    :type reinforcementDirection: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ReinforcementFace: NXOpen.ScCollector = ...
    """
    Returns  the reinforcement face.  
    
    The reinforcement face defines the objects which need to be reinforced. 
    More than one faces can be reinforced by the bracket.
    
    <hr>
    
    Getter Method
    
    Signature ``ReinforcementFace`` 
    
    :returns:  Reinforcement face  
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ReinforcementStiffener: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the reinforcement stiffener.  
    
    The reinforcement stiffener defines the objects which need to be reinforced. 
    
    It is only used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.AlignmentType``
    is set to :py:class:`Features.ShipDesign.BracketBuilderAlignmentTypes.Lapped <Features.ShipDesign.BracketBuilderAlignmentTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``ReinforcementStiffener`` 
    
    :returns:  Reinforcement stiffener  
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SectionData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the section data.  
    
    The section data defines the shape of the bracket and expressions to control the size of the bracket. 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionData`` 
    
    :returns:  Section data  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the ship name.  
    
    The ship name is used to assign name to the bracket.
    
    It is only used in Ship Structure Basic Design Application.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship names  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StartAttachment: NXOpen.ScCollector = ...
    """
    Returns  the start attachment.  
    
    This defines the limit object on the start side. 
    
    It is used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.LimitType``
    is set to :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes.OneLimit <NXOpen.Features.ShipDesign.BracketBuilderLimitTypes>`
    or :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes.TwoLimit <NXOpen.Features.ShipDesign.BracketBuilderLimitTypes>`
    or :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes.ThreeLimit <NXOpen.Features.ShipDesign.BracketBuilderLimitTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``StartAttachment`` 
    
    :returns:  Start attachment  
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StartAttachmentLimit: NXOpen.ScCollector = ...
    """
    Returns  the start attachment limit.  
    
    This defines the limit object on the start attachment entity. 
    
    It is used when :py:meth:`NXOpen.Features.ShipDesign.BracketBuilder.LimitType``
    is set to :py:class:`NXOpen.Features.ShipDesign.BracketBuilderLimitTypes.ThreeLimit <NXOpen.Features.ShipDesign.BracketBuilderLimitTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``StartAttachmentLimit`` 
    
    :returns:  Start attachment limit  
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ThicknessDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  the thickness direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessDirection`` 
    
    :returns:  Thickness direction  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessDirection`` 
    
    :param thicknessDirection:  Thickness direction  
    :type thicknessDirection: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    WeldCharacteristics: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the weld characteristics.  
    
    The weld characteristics defines data that is to be applied to the bracket weld edges.
    
    <hr>
    
    Getter Method
    
    Signature ``WeldCharacteristics`` 
    
    :returns:  Weld characteristics  
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: BracketBuilder = ...  # unknown typename


class RoomPanelBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoomPanelBuilderTypes():
    """
    Represents the type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", " - "
       "Adopt", " - "
    """
    Create = 0  # RoomPanelBuilderTypesMemberType
    Adopt = 1  # RoomPanelBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoomPanelBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Features.ShipDesign.RoomPanelBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateRoomPanelBuilder`
    
    Default values.
    
    ================  =========================================
    Property          Value
    ================  =========================================
    Thickness.Value   7 (millimeters part), 0.25 (inches part) 
    ================  =========================================
    
    .. versionadded:: NX12.0.0
    """
    
    class Types():
        """
        Represents the type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", " - "
           "Adopt", " - "
        """
        Create = 0  # RoomPanelBuilderTypesMemberType
        Adopt = 1  # RoomPanelBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdoptBodySelect: NXOpen.ScCollector = ...
    """
    Returns  the adopt body select 
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptBodySelect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    PanelSketchSection: NXOpen.Section = ...
    """
    Returns  the panel sketch section 
    
    <hr>
    
    Getter Method
    
    Signature ``PanelSketchSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    RoomBodySelect: NXOpen.ScCollector = ...
    """
    Returns  the room body select 
    
    <hr>
    
    Getter Method
    
    Signature ``RoomBodySelect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    Type: RoomPanelBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.RoomPanelBuilderTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.RoomPanelBuilderTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    Null: RoomPanelBuilder = ...  # unknown typename


class PlaneListBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[PlaneListBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: PlaneListBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: PlaneListBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> PlaneListBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PlaneListBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PlaneListBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[PlaneListBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[PlaneListBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: PlaneListBuilder, object2: PlaneListBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: PlaneListBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: PlaneListBuilderList = ...  # unknown typename


class FeatureParmsBuilderOrientationAngleRuleTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureParmsBuilderOrientationAngleRuleTypes():
    """
    Settings to indicate how angles are to be measured. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RightHand", "Angles are measured based on a right hand rule."
       "ShipOrientation", "Angles are measured based on location and orientation in the ship."
    """
    RightHand = 0  # FeatureParmsBuilderOrientationAngleRuleTypesMemberType
    ShipOrientation = 1  # FeatureParmsBuilderOrientationAngleRuleTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureParmsBuilder(NXOpen.Features.FeatureBuilder):
    """
    This class is used to create or edit the information shared among all Ship Design features.  
    
    Currently only Basic Design features are utilizing this class.
    
    Cannot create directly.
    
    .. versionadded:: NX8.0.0
    """
    
    class OrientationAngleRuleTypes():
        """
        Settings to indicate how angles are to be measured. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RightHand", "Angles are measured based on a right hand rule."
           "ShipOrientation", "Angles are measured based on location and orientation in the ship."
        """
        RightHand = 0  # FeatureParmsBuilderOrientationAngleRuleTypesMemberType
        ShipOrientation = 1  # FeatureParmsBuilderOrientationAngleRuleTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreatePlaneForList(self) -> PlaneListBuilder:
        """
        Create a :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` to add a defined
        plane to a list.  
        
        Signature ``CreatePlaneForList()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the tolerance, in degrees, used to determine when angles are zero.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the tolerance used to determine when distances are considered zero.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    OrientationAngleRule: FeatureParmsBuilderOrientationAngleRuleTypes = ...
    """
    Returns or sets  the angle rule to use when measuring angles.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngleRule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.FeatureParmsBuilderOrientationAngleRuleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationAngleRule`` 
    
    :param angleRule: 
    :type angleRule: :py:class:`NXOpen.Features.ShipDesign.FeatureParmsBuilderOrientationAngleRuleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: FeatureParmsBuilder = ...  # unknown typename


class ProfileSystemBuilder(FeatureParmsBuilder):
    """
    This class is used to create or edit the information shared between all the Basic Design profile system
    features in the Ship Design application.  
    
    Currently this includes the following features:
    :py:class:`NXOpen.Features.ShipDesign.StiffenerSystem`,
    :py:class:`NXOpen.Features.ShipDesign.PillarSystem`, and
    :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcement`.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateProfileSystemBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def SetBoundaryOnePoints(self, points: 'list[NXOpen.Point3d]') -> None:
        """
        Sets the selected intersection points for the first boundary.  
        
        Signature ``SetBoundaryOnePoints(points)`` 
        
        :param points: The selected intersection points for boundary one. 
        :type points: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetBoundaryTwoPoints(self, points: 'list[NXOpen.Point3d]') -> None:
        """
        Set the selected intersection points for the second boundary.  
        
        Signature ``SetBoundaryTwoPoints(points)`` 
        
        :param points: The selected intersection points for boundary two. 
        :type points: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CreatePathCurves(self) -> 'list[NXOpen.NXObject]':
        """
        Creates path curves for all the paths of the profile system.  
        
        Signature ``CreatePathCurves()`` 
        
        :returns:  The curves defining all the paths of the profiles that are being created.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeletePathCurves(self) -> None:
        """
        Deletes the path curves created from a call to :py:meth:`CreatePathCurves`. 
        
        Signature ``DeletePathCurves()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLastPathCurves(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the path curves used by :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilder`.  
        
        Signature ``GetLastPathCurves()`` 
        
        :returns:  The curves to be used for profile orientation.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteLastPathCurves(self) -> None:
        """
        Deletes the path curves returned from a call to :py:meth:`GetLastPathCurves`. 
        
        Signature ``DeleteLastPathCurves()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRegionPoints(self, points: 'list[NXOpen.Point3d]') -> None:
        """
        Sets the points that identify which regions of the curves will be used.  
        
        Signature ``SetRegionPoints(points)`` 
        
        :param points:  The points that identify which regions of the curves are to be used.  
        :type points: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    Boundary1: NXOpen.SelectNXObjectList = ...
    """
    Returns  the collector containing the plate system, profile system, or datum plane that will be 
    used to trim the first end of the generated profile system.  
    
    Only one sheet body or one plane can be input. 
    
    <hr>
    
    Getter Method
    
    Signature ``Boundary1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Boundary1Plane: NXOpen.Plane = ...
    """
    Returns or sets  the defined plane that will be used to trim the first end of the generated profile system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Boundary1Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Boundary1Plane`` 
    
    :param boundary1Plane: 
    :type boundary1Plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Boundary2: NXOpen.SelectNXObjectList = ...
    """
    Returns  the collector containing the plate system, profile system, or datum plane that will be used to 
    trim the second end of the generated profile system.  
    
    Only one sheet body or one plane can be input. 
    
    <hr>
    
    Getter Method
    
    Signature ``Boundary2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Boundary2Plane: NXOpen.Plane = ...
    """
    Returns or sets  the defined plane that will be used to trim the second end of the generated profile system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Boundary2Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Boundary2Plane`` 
    
    :param boundary2Plane: 
    :type boundary2Plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    BoundaryReverse: bool = ...
    """
    Returns or sets  the indication if the side of a single boundary should be changed to the other side or not.  
    
    By default the side that is on the same side as the sheet body or plane normal is chosen. 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryReverse`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryReverse`` 
    
    :param boundaryReverse: 
    :type boundaryReverse: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    FirstIntersectionPoints: NXOpen.SelectPointList = ...
    """
    Returns  the selected intersection points between the curves and the first boundary.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstIntersectionPoints`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReversePathDirection: bool = ...
    """
    Returns or sets  the flag that indicates if the default curve direction should be reversed or not.  
    
    By default curve's direction is consistent with ship coordinate. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReversePathDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReversePathDirection`` 
    
    :param pathReverse: 
    :type pathReverse: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    SecondIntersectionPoints: NXOpen.SelectPointList = ...
    """
    Returns  the selected intersection points between the curves and the second boundary.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondIntersectionPoints`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SplitKnuckleLocations: NXOpen.SelectPointList = ...
    """
    Returns  the collector containing the knuckle points that are to be used to create seams.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitKnuckleLocations`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    UseNewDefaultSectionAlgorithm: bool = ...
    """
    Returns or sets  the flag that indicates if the new default section algorithm is used.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseNewDefaultSectionAlgorithm`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseNewDefaultSectionAlgorithm`` 
    
    :param useIt: 
    :type useIt: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: ProfileSystemBuilder = ...  # unknown typename


class SeamBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeamBuilderTypes():
    """
    Used to indicate the type of seam that is being created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Scantling", "Scantling seam, will allow for changing stock across the seam."
       "Erection", "Erection seam, used to define manufacturing block boundaries. Will allow for changing stock across the seam."
       "Straking", "Straking seam, used to split up structure into manufacturable size pieces. Cannot change stock across this seam."
       "Intersection", "Intersection seam, used to split structure at other structure locations. Will allow for changing stock across the seam."
       "Eggbox", "EggBox seam, used to create eggbox feature - added in nx12.0"
    """
    Scantling = 0  # SeamBuilderTypesMemberType
    Erection = 1  # SeamBuilderTypesMemberType
    Straking = 2  # SeamBuilderTypesMemberType
    Intersection = 3  # SeamBuilderTypesMemberType
    Eggbox = 4  # SeamBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeamBuilderDefinitionMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeamBuilderDefinitionMethods():
    """
    Used to indicate the method being used to define the seam locations. Not valid for
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CurvesPlanesShip", "Can use curves, planes or other ship structure to define the seam location. The intersection or projection of the selected data with the ship structure defines the seam location."
       "EquallySpaced", "Create a specified number of seams equidistant between two selected curves."
       "Rectangular", "Create a rectangular pattern of seams based on an origin, direction, and size of rectangles."
    """
    CurvesPlanesShip = 0  # SeamBuilderDefinitionMethodsMemberType
    EquallySpaced = 1  # SeamBuilderDefinitionMethodsMemberType
    Rectangular = 2  # SeamBuilderDefinitionMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeamBuilderStaggerShiftAlongMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeamBuilderStaggerShiftAlongMethods():
    """
    Used to indicate the method being used to define which direction the seam stagger will shift along. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Length", "the stagger will shift along the length direction."
       "Width", "the stagger will shift along the width direction."
    """
    Length = 0  # SeamBuilderStaggerShiftAlongMethodsMemberType
    Width = 1  # SeamBuilderStaggerShiftAlongMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeamBuilder(ProfileSystemBuilder):
    """
    A :py:class:`NXOpen.Features.ShipDesign.SeamBuilder` used to create or edit a 
    ship design :py:class:`NXOpen.Features.ShipDesign.Seam` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSeamBuilder`
    
    Default values.
    
    ====================================  ============================================
    Property                              Value
    ====================================  ============================================
    BuiltUpOffset.FlangeAngle.Value       0 
    ------------------------------------  --------------------------------------------
    BuiltUpOffset.FlangeOffset.Value      0 (millimeters part), 0 (inches part) 
    ------------------------------------  --------------------------------------------
    BuiltUpOffset.WebAngle.Value          0 
    ------------------------------------  --------------------------------------------
    BuiltUpOffset.WebOffset.Value         0 (millimeters part), 0 (inches part) 
    ------------------------------------  --------------------------------------------
    DefinitionEquallySpacedNumber.Value   1 
    ------------------------------------  --------------------------------------------
    DefinitionMethod                      CurvesPlanesShip 
    ------------------------------------  --------------------------------------------
    DefinitionRectangularLength.Value     20000 (millimeters part), 800 (inches part) 
    ------------------------------------  --------------------------------------------
    DefinitionRectangularWidth.Value      10000 (millimeters part), 400 (inches part) 
    ------------------------------------  --------------------------------------------
    ErectionSplitSystem                   0 
    ------------------------------------  --------------------------------------------
    IntersectionSplitSystem               1 
    ------------------------------------  --------------------------------------------
    ScantlingSplitSystem                  1 
    ------------------------------------  --------------------------------------------
    StaggerShiftAlongMethod               Length 
    ------------------------------------  --------------------------------------------
    StrakingSplitSystem                   0 
    ====================================  ============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Used to indicate the type of seam that is being created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Scantling", "Scantling seam, will allow for changing stock across the seam."
           "Erection", "Erection seam, used to define manufacturing block boundaries. Will allow for changing stock across the seam."
           "Straking", "Straking seam, used to split up structure into manufacturable size pieces. Cannot change stock across this seam."
           "Intersection", "Intersection seam, used to split structure at other structure locations. Will allow for changing stock across the seam."
           "Eggbox", "EggBox seam, used to create eggbox feature - added in nx12.0"
        """
        Scantling = 0  # SeamBuilderTypesMemberType
        Erection = 1  # SeamBuilderTypesMemberType
        Straking = 2  # SeamBuilderTypesMemberType
        Intersection = 3  # SeamBuilderTypesMemberType
        Eggbox = 4  # SeamBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DefinitionMethods():
        """
        Used to indicate the method being used to define the seam locations. Not valid for
        :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CurvesPlanesShip", "Can use curves, planes or other ship structure to define the seam location. The intersection or projection of the selected data with the ship structure defines the seam location."
           "EquallySpaced", "Create a specified number of seams equidistant between two selected curves."
           "Rectangular", "Create a rectangular pattern of seams based on an origin, direction, and size of rectangles."
        """
        CurvesPlanesShip = 0  # SeamBuilderDefinitionMethodsMemberType
        EquallySpaced = 1  # SeamBuilderDefinitionMethodsMemberType
        Rectangular = 2  # SeamBuilderDefinitionMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StaggerShiftAlongMethods():
        """
        Used to indicate the method being used to define which direction the seam stagger will shift along. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Length", "the stagger will shift along the length direction."
           "Width", "the stagger will shift along the width direction."
        """
        Length = 0  # SeamBuilderStaggerShiftAlongMethodsMemberType
        Width = 1  # SeamBuilderStaggerShiftAlongMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetAttachedProfiles(self, plateOrProfile: NXOpen.NXObject) -> 'list[NXOpen.Curve]':
        """
        Outputs the attached profiles of the input plate system (body) or attached edge reinforcements of 
        the input profile system (curve or body).  
        
        The output will be occurrences in the same part as the input plate or 
        profile, if the input is an occurrence, otherwise will be a prototype object. 
        
        Signature ``GetAttachedProfiles(plateOrProfile)`` 
        
        :param plateOrProfile: 
        :type plateOrProfile: :py:class:`NXOpen.NXObject` 
        :returns:  The profiles on plate systems and edge reinforcements on stiffeners  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    BuiltUpOffset: BuiltUpOffsetBuilder = ...
    """
    Returns  the built-up offset data.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BuiltUpOffsetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DefinitionCurves: NXOpen.Section = ...
    """
    Returns  the curves selected or sketched that will be projected onto the ship structure to create the seam.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.CurvesPlanesShip <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionEquallySpacedCurve1: NXOpen.Section = ...
    """
    Returns  the first curve that will be used as a boundary for the equally spaced seams.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.EquallySpaced <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionEquallySpacedCurve1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionEquallySpacedCurve2: NXOpen.Section = ...
    """
    Returns  the second curve that will be used as a boundary for the equally spaced seams.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.EquallySpaced <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionEquallySpacedCurve2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionEquallySpacedNumber: NXOpen.Expression = ...
    """
    Returns  the number of seams to create between the two boundary curves selected.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.EquallySpaced <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionEquallySpacedNumber`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionEquallySpacedPlaneList: PlaneListBuilderList = ...
    """
    Returns  the list of planes defined that will be used to specify key points to create the seam.  
    
    Only valid when 
    DefinitionMethod is :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.EquallySpaced <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionEquallySpacedPlaneList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionMethod: SeamBuilderDefinitionMethods = ...
    """
    Returns or sets  the method used to define the seam locations.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefinitionMethod`` 
    
    :param definitionMethod: 
    :type definitionMethod: :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    DefinitionObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the sheet bodies or curves representing ship structure, that will be intersected with or projected onto the 
    ship structure to create the seam.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionPlaneList: PlaneListBuilderList = ...
    """
    Returns  the list of planes defined that will be intersected with the ship structure to create the seam.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.CurvesPlanesShip <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionPlaneList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionProjectionDirection: NXOpen.GeometricUtilities.ProjectionOptions = ...
    """
    Returns  the direction to project curves to the ship structure to define seams.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionProjectionDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ProjectionOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionRectangularCorner: NXOpen.Point = ...
    """
    Returns or sets  the starting corner of the rectangular grid that defines the seams.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.Rectangular <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionRectangularCorner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefinitionRectangularCorner`` 
    
    :param definitionRectangularCorner: 
    :type definitionRectangularCorner: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    DefinitionRectangularLength: NXOpen.Expression = ...
    """
    Returns  the size of each rectangle of the grid in the length direction.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.Rectangular <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionRectangularLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DefinitionRectangularLengthDirection: NXOpen.Direction = ...
    """
    Returns or sets  the length direction of the rectangular grid that defines the seams.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.Rectangular <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionRectangularLengthDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefinitionRectangularLengthDirection`` 
    
    :param definitionRectangularLengthDirection: 
    :type definitionRectangularLengthDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    DefinitionRectangularPlane: NXOpen.Plane = ...
    """
    Returns or sets  the plane of the rectangular grid that defines the seams.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.Rectangular <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionRectangularPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefinitionRectangularPlane`` 
    
    :param definitionRectangularPlane: 
    :type definitionRectangularPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    DefinitionRectangularWidth: NXOpen.Expression = ...
    """
    Returns  the size of each rectangle of the grid perpendicular to the length direction.  
    
    Only valid when 
    Type is not :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes.Intersection <NXOpen.Features.ShipDesign.SeamBuilderTypes>` and DefinitionMethod is
    :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.Rectangular <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionRectangularWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndCutSplit: StiffenerSystemBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the splits of profile systems that have been split by an intersection seam.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutSplit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutSplit`` 
    
    :param endCutSplit: 
    :type endCutSplit: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX10.0.1
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ErectionSplitSystem: bool = ...
    """
    Returns or sets  the indication if the erection seams should split the system by default.  
    
    True indicates that the erection seams will split the system by default. 
    
    <hr>
    
    Getter Method
    
    Signature ``ErectionSplitSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ErectionSplitSystem`` 
    
    :param splitSystem: 
    :type splitSystem: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    IntersectionSplitSystem: bool = ...
    """
    Returns or sets  the indication if the intersection seams should split the system by default.  
    
    True indicates that the intersection seams will split the system by default. 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionSplitSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntersectionSplitSystem`` 
    
    :param splitSystem: 
    :type splitSystem: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    PointProfileTolerance: float = ...
    """
    Returns or sets  the distance used to determine if the input point is close enough to the profile curve to be used in the seam definition.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointProfileTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointProfileTolerance`` 
    
    :param pointProfileTolerance: 
    :type pointProfileTolerance: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ReparentFrecsReferencingSeamedObject: bool = ...
    """
    Returns or sets  the flag to indicate if re-parent of inter-part profile cutout features which reference curves modified by Seam.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReparentFrecsReferencingSeamedObject`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReparentFrecsReferencingSeamedObject`` 
    
    :param reparent: 
    :type reparent: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ScantlingSplitSystem: bool = ...
    """
    Returns or sets  the indication if the scantling seams should split the system by default.  
    
    True indicates that the scantling seams will split the system by default. 
    
    <hr>
    
    Getter Method
    
    Signature ``ScantlingSplitSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScantlingSplitSystem`` 
    
    :param splitSystem: 
    :type splitSystem: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the Seams created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    ShipStructure: NXOpen.SelectNXObjectList = ...
    """
    Returns  the ship structure upon which seams will be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaggerDistanceList: NXOpen.NXObjectList = ...
    """
    Returns  the list of stagger distances defined the shift distance to create the seam.  
    
    Only valid when 
    DefinitionMethod is :py:class:`NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods.Rectangular <NXOpen.Features.ShipDesign.SeamBuilderDefinitionMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``StaggerDistanceList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaggerShiftAlongMethod: SeamBuilderStaggerShiftAlongMethods = ...
    """
    Returns or sets  the method used to define the seam stagger shift along method.  
    
    <hr>
    
    Getter Method
    
    Signature ``StaggerShiftAlongMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SeamBuilderStaggerShiftAlongMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaggerShiftAlongMethod`` 
    
    :param staggerShiftAlongMethod: 
    :type staggerShiftAlongMethod: :py:class:`NXOpen.Features.ShipDesign.SeamBuilderStaggerShiftAlongMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    StrakingSplitSystem: bool = ...
    """
    Returns or sets  the indication if the straking seams should split the system by default.  
    
    True indicates that the straking seams will split the system by default. 
    
    <hr>
    
    Getter Method
    
    Signature ``StrakingSplitSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StrakingSplitSystem`` 
    
    :param splitSystem: 
    :type splitSystem: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Type: SeamBuilderTypes = ...
    """
    Returns or sets  the type of seam being created.  
    
    Scantling, Erection, Straking or Intersection.
    Scantling seams indicate divisions in ship structure where differing stock definitions are needed.
    Erection seams indicate divisions in ship structure at manufacturing block boundaries. 
    Straking seams indicate divisions in ship structure to make it a manufacturable size.
    Intersection seams indicate divisions in ship structure where other structure intersects the given structure.
    Although Scantling seam is the name given to seams that allow for changing stock definitions, all seam types 
    except straking seams allow for a change in the stock definition.
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.SeamBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    WeldingCharacteristics: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the welding characteristics that will be attached to each seam created.  
    
    <hr>
    
    Getter Method
    
    Signature ``WeldingCharacteristics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SeamBuilder = ...  # unknown typename


class BuiltUpBlockBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.BuiltUpBlockBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def CreateSeamBlockBuilder(self) -> SeamBlockBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder`  
        
        Signature ``CreateSeamBlockBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BuiltUpSeams: SeamBlockBuilderList = ...
    """
    Returns  the built up seams 
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpSeams`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilderList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BuiltUpStock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the stock used to build the builtUp from.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BuiltUpBlockBuilder = ...  # unknown typename


class ShipFlatPattern(NXOpen.Features.BodyFeature):
    """
    Represents a ship flat pattern feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShipFlatPatternBuilder`
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX8.0.0
       Use :py:class:`NXOpen.Features.ShipDesign.PlatePreparationBuilder`.CreatePlatePreparationBuilder() instead.
    """
    Null: ShipFlatPattern = ...  # unknown typename


class EditBoundaryBuilder(ProfileSystemBuilder):
    """
    Used to create a :py:class:`NXOpen.Features.ShipDesign.EditBoundaryBuilder` which
    is used to change the boundaries and split knuckle locations of profile systems.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateEditBoundaryBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def GetSelectedKnuckles(self, profile: NXOpen.Curve) -> 'list[NXOpen.Point]':
        """
        Outputs the knuckle points that have been selected in seams.  
        
        Signature ``GetSelectedKnuckles(profile)`` 
        
        :param profile: 
        :type profile: :py:class:`NXOpen.Curve` 
        :returns:  Knuckle points that have been selected in seams.  
        :rtype: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    ProfileSystem: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the ship structures to change the boundary information 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: EditBoundaryBuilder = ...  # unknown typename


class EdgeCutBuilderVersionIDMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EdgeCutBuilderVersionID():
    """
    version identifiers for the different revisions of the edge cut feature.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Nx85", "This feature builder is used to edit an existing NX85 - NX9 edge cut feature. Use: SelectTargetFace and GuideCurve"
       "Nx901", "This feature builder is used to create or edit an NX901 or beyond feature. Use: PlacementGeometry, PathGeometry, ReferencePoint, ReferenceDirection, and if needed PathReverseDirection"
    """
    Nx85 = 0  # EdgeCutBuilderVersionIDMemberType
    Nx901 = 1  # EdgeCutBuilderVersionIDMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EdgeCutBuilderArraySpacingMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EdgeCutBuilderArraySpacing():
    """
    available methods used to define the spacing between the cuts
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EvenDistribution", "Cuts will automatically be spaced evenly along the length of the guide"
       "CustomDefined", "The user can specify a custom amount of space between the cuts"
    """
    EvenDistribution = 0  # EdgeCutBuilderArraySpacingMemberType
    CustomDefined = 1  # EdgeCutBuilderArraySpacingMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EdgeCutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.EdgeCut` builder.  
    
    The Edge Cut creates a series of cuts with an offset from an edge or curve.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateEdgeCutBuilder`
    
    Default values.
    
    ==========================  =======================================
    Property                    Value
    ==========================  =======================================
    CutCount                    0 
    --------------------------  ---------------------------------------
    CutOrientationAngle.Value   0 
    --------------------------  ---------------------------------------
    GuideOffset.Value           50 (millimeters part), 2 (inches part) 
    --------------------------  ---------------------------------------
    SpaceBetweenCuts.Value      50 (millimeters part), 2 (inches part) 
    --------------------------  ---------------------------------------
    Spacing                     EvenDistribution 
    --------------------------  ---------------------------------------
    SymmetricOffsets            0 
    ==========================  =======================================
    
    .. versionadded:: NX8.5.0
    """
    
    class VersionID():
        """
        version identifiers for the different revisions of the edge cut feature.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Nx85", "This feature builder is used to edit an existing NX85 - NX9 edge cut feature. Use: SelectTargetFace and GuideCurve"
           "Nx901", "This feature builder is used to create or edit an NX901 or beyond feature. Use: PlacementGeometry, PathGeometry, ReferencePoint, ReferenceDirection, and if needed PathReverseDirection"
        """
        Nx85 = 0  # EdgeCutBuilderVersionIDMemberType
        Nx901 = 1  # EdgeCutBuilderVersionIDMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ArraySpacing():
        """
        available methods used to define the spacing between the cuts
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EvenDistribution", "Cuts will automatically be spaced evenly along the length of the guide"
           "CustomDefined", "The user can specify a custom amount of space between the cuts"
        """
        EvenDistribution = 0  # EdgeCutBuilderArraySpacingMemberType
        CustomDefined = 1  # EdgeCutBuilderArraySpacingMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CutCount: int = ...
    """
    Returns or sets  the number of cuts 
    
    <hr>
    
    Getter Method
    
    Signature ``CutCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutCount`` 
    
    :param cutCount: 
    :type cutCount: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    CutOrientationAngle: NXOpen.Expression = ...
    """
    Returns  the cut orientation angle.  
    
    Typically the x axis of the cut's cross section sketch is parallel to the guide curve, the orientation angle rotates the sketch away from the guide curve 
    
    <hr>
    
    Getter Method
    
    Signature ``CutOrientationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    EndPositionOnGuide: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the offset from the end of the guide curve (or end trim object) where cut placement will end.  
    
    Note if the spacing is set to CustomDefined, 
    you won't notice the end trim getting used, unless you try to place too many cuts between along the guide (including any trim objects and 
    offsets added by the Start and End positions on the guide). 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPositionOnGuide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    GuideCurve: NXOpen.Section = ...
    """
    Returns  the guide curve used to place the cuts (may be made up of edges or curves).  
    
    NOTE this is only used on features that were created prior to NX901.  
    If editing a feature created in NX9.0.1 or beyond, use the path geometry property instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    GuideOffset: NXOpen.Expression = ...
    """
    Returns  the guide offset (how far away to place the cuts from the guide curve) 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    HorizontalReference: NXOpen.Direction = ...
    """
    Returns or sets  the horizontal reference.  
    
    The horizontal reference is optional.
    It is used to orient the cuts. 
    If null, the guide tangent is used for the orientation reference at each cut.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalReference`` 
    
    :param horizontalReference: 
    :type horizontalReference: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ManufacturingInformation: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock builder that holds the manufacturing data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingInformation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    PathGeometry: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the path geometry.  
    
    NOTE this is only used on features that were created in NX901 or later.  
    If editing a feature created before NX9.0.1, use the guide curve property instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``PathGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    PathReverseDirection: bool = ...
    """
    Returns or sets  the path reverse direction flag.  
    
    NOTE this is only used on features that were created in NX901 or later.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PathReverseDirection`` 
    
    :param pathReverseDirection: 
    :type pathReverseDirection: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    PlacementGeometry: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the placement geometry.  
    
    NOTE this is only used on features that were created in NX901 or later.  
    If editing a feature created before NX9.0.1, use the select target face property instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    ReferenceDirection: NXOpen.Vector3d = ...
    """
    Returns or sets  the reference direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDirection`` 
    
    :param referenceDirection: 
    :type referenceDirection: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReferencePoint: NXOpen.Point3d = ...
    """
    Returns or sets  the reference point (part units) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePoint`` 
    
    :param referencePoint: 
    :type referencePoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SelectEndLimit: NXOpen.SelectNXObject = ...
    """
    Returns  the select end limit.  
    
    The end limit is used to trim the end of the guide curve.  Note if the spacing is set to CustomDefined, 
    you won't notice the end trim getting used, unless you try to place too many cuts between the start and end trim (including any offsets 
    added by the Start and End positions on the guide).
    NOTE features created before NX9.0.1 could use solid edges, lines, circles, splines, spcurves, datum planes, and planar faces as a limit object.
    Any feature created in NX9.0.1 or beyond can use any of those limit objects as well as non-planar faces. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectStartLimit: NXOpen.SelectNXObject = ...
    """
    Returns  the select start limit.  
    
    The start limit is used to trim the start of the guide curve.
    NOTE features created before NX9.0.1 could use solid edges, lines, circles, splines, spcurves, datum planes, and planar faces as a limit object.
    Any feature created in NX9.0.1 or beyond can use any of those limit objects as well as non-planar faces. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectStartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectTargetFace: NXOpen.SelectFaceList = ...
    """
    Returns  the select target face.  
    
    NOTE this is only used on features that were created prior to NX901.  
    If editing a feature created in NX9.0.1 or beyond, use the placement geometry property instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SketchBlock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the sketch block.  
    
    Users can specify the hole shape using a single sketch. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``SketchBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SpaceBetweenCuts: NXOpen.Expression = ...
    """
    Returns  the distance between each cut.  
    
    Note this is ignored if spacing is set to equal spacing. 
    
    <hr>
    
    Getter Method
    
    Signature ``SpaceBetweenCuts`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Spacing: EdgeCutBuilderArraySpacing = ...
    """
    Returns or sets  the spacing (even distribution or custom defined) 
    
    <hr>
    
    Getter Method
    
    Signature ``Spacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EdgeCutBuilderArraySpacing` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Spacing`` 
    
    :param spacing: 
    :type spacing: :py:class:`NXOpen.Features.ShipDesign.EdgeCutBuilderArraySpacing` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SpacingReference: NXOpen.Direction = ...
    """
    Returns or sets  the spacing reference direction.  
    
    The spacing reference direction is optional.  
    It is used to measure the space between cuts in a linear distance.
    If null, the spacing is measured via arc length along the guide. 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacingReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpacingReference`` 
    
    :param spacingReference: 
    :type spacingReference: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    StartPositionOnGuide: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the offset from the start of the guide curve (or start trim object) where cut placement will begin 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPositionOnGuide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SymmetricOffsets: bool = ...
    """
    Returns or sets  the symmetric offsets toggle.  
    
    Note this is ignored if spacing is set to custom defined.  When symmetric offsets are used, the length of the 
    guide is divided by the number of cuts to define the space between cuts, and half of the distance between each cut is applied as a start and end 
    offset along the guide. 
    
    <hr>
    
    Getter Method
    
    Signature ``SymmetricOffsets`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymmetricOffsets`` 
    
    :param symmetricOffsets: 
    :type symmetricOffsets: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Version: EdgeCutBuilderVersionID = ...
    """
    Returns  the version of the feature (used to determine which properties and methods are applicable) during edit.  
    
    The version of new features during create will be NX901 
    
    <hr>
    
    Getter Method
    
    Signature ``Version`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EdgeCutBuilderVersionID` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    Null: EdgeCutBuilder = ...  # unknown typename


class ExpansionDrawing(NXOpen.Features.CurveFeature):
    """
    Represents a expansion drawing feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ExpansionDrawingBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: ExpansionDrawing = ...  # unknown typename


class ShellTemplateBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShellTemplateBuilderTypes():
    """
    The option for controlling how the coordinate system for template creation is specified.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Manual", "Manually specify the coordinate system."
       "InferCoordinateSystem", "Derive the coordinate system."
    """
    Manual = 0  # ShellTemplateBuilderTypesMemberType
    InferCoordinateSystem = 1  # ShellTemplateBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShellTemplateBuilderPlaneLocationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShellTemplateBuilderPlaneLocationTypes():
    """
    The option for how the plane locations will be specified as input. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Existing", "Use existing planes to define the individual template locations."
       "Offset", "Derive the plane locations from the orientation coordinate system or X and Y specified base planes"
    """
    Existing = 0  # ShellTemplateBuilderPlaneLocationTypesMemberType
    Offset = 1  # ShellTemplateBuilderPlaneLocationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShellTemplateBuilderMarkingTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShellTemplateBuilderMarkingTypes():
    """
    The option for controlling which marking lines are drawn on the plate 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Do not draw template marking lines on plate."
       "XDirectionOnly", "Draw X direction template marking lines on plate."
       "YDirectionOnly", "Draw Y direction template marking lines on plate."
       "XandYDirections", "Draw X and Y direction template marking lines on plate."
    """
    NotSet = 0  # ShellTemplateBuilderMarkingTypesMemberType
    XDirectionOnly = 1  # ShellTemplateBuilderMarkingTypesMemberType
    YDirectionOnly = 2  # ShellTemplateBuilderMarkingTypesMemberType
    XandYDirections = 3  # ShellTemplateBuilderMarkingTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShellTemplateBuilderCornerCutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShellTemplateBuilderCornerCutTypes():
    """
    The option for creating corner cuts on the templates. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Do not add corner cuts."
       "Start", "Add corner cuts on the start side of each template."
       "End", "Add corner cuts on the end side of each template."
    """
    NotSet = 0  # ShellTemplateBuilderCornerCutTypesMemberType
    Start = 1  # ShellTemplateBuilderCornerCutTypesMemberType
    End = 2  # ShellTemplateBuilderCornerCutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShellTemplateBuilderSightLineCutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShellTemplateBuilderSightLineCutTypes():
    """
    The option for creating sight line cuts on the templates. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Do not add sight line cuts."
       "TowardStart", "Add sight line cuts from sight line toward the start side of each template."
       "TowardEnd", "Add sight line cuts from the sight line toward the end side of each template."
    """
    NotSet = 0  # ShellTemplateBuilderSightLineCutTypesMemberType
    TowardStart = 1  # ShellTemplateBuilderSightLineCutTypesMemberType
    TowardEnd = 2  # ShellTemplateBuilderSightLineCutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShellTemplateBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to edit or create a :py:class:`NXOpen.Features.ShipDesign.ShellTemplate` feature.  
    
    The shell templates are defined on a surface by specifying a primary orientation coordinate system.
    The orientation coordinate system is then used to build, or filter, planes used to locate each individual template. There are 2 primary methods for defining the input.
    Manual allows for specific, selected, data to limit various aspects of the build (for example, build with only 1 plane). Inferred allows for the tools to generate data, thus building
    with a minimal of predefined input data.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShellTemplateBuilder`
    
    Default values.
    
    ===========================  =============================================
    Property                     Value
    ===========================  =============================================
    CornerCutType                None 
    ---------------------------  ---------------------------------------------
    CreateSeparateParts          0 
    ---------------------------  ---------------------------------------------
    EndXTemplateOffset.Value     0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    EndYTemplateOffset.Value     0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    MarkingLinesDirectionType    XandYDirections 
    ---------------------------  ---------------------------------------------
    PlaneMethod                  Existing 
    ---------------------------  ---------------------------------------------
    SightLineCutType             None 
    ---------------------------  ---------------------------------------------
    StartXTemplateOffset.Value   0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    StartYTemplateOffset.Value   0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    Thickness.Value              0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    XOffset.Value                300.0 (millimeters part), 12.0 (inches part) 
    ---------------------------  ---------------------------------------------
    YOffset.Value                300.0 (millimeters part), 12.0 (inches part) 
    ===========================  =============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        The option for controlling how the coordinate system for template creation is specified.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Manual", "Manually specify the coordinate system."
           "InferCoordinateSystem", "Derive the coordinate system."
        """
        Manual = 0  # ShellTemplateBuilderTypesMemberType
        InferCoordinateSystem = 1  # ShellTemplateBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PlaneLocationTypes():
        """
        The option for how the plane locations will be specified as input. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Existing", "Use existing planes to define the individual template locations."
           "Offset", "Derive the plane locations from the orientation coordinate system or X and Y specified base planes"
        """
        Existing = 0  # ShellTemplateBuilderPlaneLocationTypesMemberType
        Offset = 1  # ShellTemplateBuilderPlaneLocationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MarkingTypes():
        """
        The option for controlling which marking lines are drawn on the plate 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Do not draw template marking lines on plate."
           "XDirectionOnly", "Draw X direction template marking lines on plate."
           "YDirectionOnly", "Draw Y direction template marking lines on plate."
           "XandYDirections", "Draw X and Y direction template marking lines on plate."
        """
        NotSet = 0  # ShellTemplateBuilderMarkingTypesMemberType
        XDirectionOnly = 1  # ShellTemplateBuilderMarkingTypesMemberType
        YDirectionOnly = 2  # ShellTemplateBuilderMarkingTypesMemberType
        XandYDirections = 3  # ShellTemplateBuilderMarkingTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CornerCutTypes():
        """
        The option for creating corner cuts on the templates. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Do not add corner cuts."
           "Start", "Add corner cuts on the start side of each template."
           "End", "Add corner cuts on the end side of each template."
        """
        NotSet = 0  # ShellTemplateBuilderCornerCutTypesMemberType
        Start = 1  # ShellTemplateBuilderCornerCutTypesMemberType
        End = 2  # ShellTemplateBuilderCornerCutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SightLineCutTypes():
        """
        The option for creating sight line cuts on the templates. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Do not add sight line cuts."
           "TowardStart", "Add sight line cuts from sight line toward the start side of each template."
           "TowardEnd", "Add sight line cuts from the sight line toward the end side of each template."
        """
        NotSet = 0  # ShellTemplateBuilderSightLineCutTypesMemberType
        TowardStart = 1  # ShellTemplateBuilderSightLineCutTypesMemberType
        TowardEnd = 2  # ShellTemplateBuilderSightLineCutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the modeling angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    CoordinateSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coordinate system defining the origin as well as the X and Y axis for the templates.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystem`` 
    
    :param coordinateSystem: 
    :type coordinateSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    CornerCutType: ShellTemplateBuilderCornerCutTypes = ...
    """
    Returns or sets  the value that specifies if and where to create corner cuts 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerCutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderCornerCutTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CornerCutType`` 
    
    :param cornerCutType: 
    :type cornerCutType: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderCornerCutTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    CreateSeparateParts: bool = ...
    """
    Returns or sets  the value that determines if separate pars are created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSeparateParts`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSeparateParts`` 
    
    :param createSeparateParts: 
    :type createSeparateParts: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the modeling distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    EndXTemplateOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of the end offset of the template for set 1 (X).  
    
    <hr>
    
    Getter Method
    
    Signature ``EndXTemplateOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndYTemplateOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of the end offset of the template for set 2 (Y).  
    
    <hr>
    
    Getter Method
    
    Signature ``EndYTemplateOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MarkingLinesDirectionType: ShellTemplateBuilderMarkingTypes = ...
    """
    Returns or sets  the value that specifies which marking lines are drawn on the plate 
    
    <hr>
    
    Getter Method
    
    Signature ``MarkingLinesDirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderMarkingTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarkingLinesDirectionType`` 
    
    :param markingLinesDirectionType: 
    :type markingLinesDirectionType: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderMarkingTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    PlaneAutomatic: NXOpen.SelectIBasePlaneList = ...
    """
    Returns  the planes specifying both the X and Y orientations of the templates.  
    
    They will automatically be separated, or grouped, for X and Y as needed.
    This is only valid when :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderPlaneLocationTypes` is  :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderPlaneLocationTypes.Existing <NXOpen.Features.ShipDesign.ShellTemplateBuilderPlaneLocationTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneAutomatic`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectIBasePlaneList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlaneMethod: ShellTemplateBuilderPlaneLocationTypes = ...
    """
    Returns or sets  the value identifying how the planes (used for sections) will be specified (See :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderPlaneLocationTypes` for the plane methods).  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderPlaneLocationTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneMethod`` 
    
    :param planeMethod: 
    :type planeMethod: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderPlaneLocationTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    SightLineCutType: ShellTemplateBuilderSightLineCutTypes = ...
    """
    Returns or sets  the value that specifies if and where to create sight line cuts 
    
    <hr>
    
    Getter Method
    
    Signature ``SightLineCutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderSightLineCutTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SightLineCutType`` 
    
    :param sightLineCutType: 
    :type sightLineCutType: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderSightLineCutTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    SpecifyXPlane: NXOpen.Plane = ...
    """
    Returns or sets  the plane specifying the X direction for the coordinate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyXPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyXPlane`` 
    
    :param specifyXPlane: 
    :type specifyXPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    SpecifyYPlane: NXOpen.Plane = ...
    """
    Returns or sets  the plane specifying the Y direction for the coordinate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyYPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyYPlane`` 
    
    :param specifyYPlane: 
    :type specifyYPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    StartXTemplateOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of the start offset of the template for set 1 (X).  
    
    <hr>
    
    Getter Method
    
    Signature ``StartXTemplateOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartYTemplateOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of the start offset of the template for set 2 (Y).  
    
    <hr>
    
    Getter Method
    
    Signature ``StartYTemplateOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Surface: NXOpen.ScCollector = ...
    """
    Returns  the surface that the templates will be built to.  
    
    <hr>
    
    Getter Method
    
    Signature ``Surface`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TemplateSetName: str = ...
    """
    Returns or sets  the template set name assigned to the part attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``TemplateSetName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TemplateSetName`` 
    
    :param templateSetName: 
    :type templateSetName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of the thickness of the template.  
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: ShellTemplateBuilderTypes = ...
    """
    Returns or sets  the value defining how the coordinate system will be defined.  
    
    See :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderTypes`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    XOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of the offset to apply in the X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``XOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    XPlaneUserDefined: bool = ...
    """
    Returns or sets  the value specifying that the plane for the X direction was user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``XPlaneUserDefined`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XPlaneUserDefined`` 
    
    :param xPlaneUserDefined: 
    :type xPlaneUserDefined: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    YOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of the offset to apply in the Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``YOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    YPlaneUserDefined: bool = ...
    """
    Returns or sets  the value specifying that the plane for the Y direction was user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``YPlaneUserDefined`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YPlaneUserDefined`` 
    
    :param yPlaneUserDefined: 
    :type yPlaneUserDefined: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: ShellTemplateBuilder = ...  # unknown typename


class Pillar(NXOpen.Features.BodyFeature):
    """
    Represents a Pillar feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PillarBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: Pillar = ...  # unknown typename


class ShipEndCutBuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipEndCutBuilderCreationMethod():
    """
    available methods used to place a cutout object
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceEdge", "1 face and 1 edge are used to place this endcut"
       "SpecifyCSYS", "a csys is used to place this endcut"
    """
    FaceEdge = 0  # ShipEndCutBuilderCreationMethodMemberType
    SpecifyCSYS = 1  # ShipEndCutBuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipEndCutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipEndCut` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipEndCutBuilder`
    
    Default values.
    
    ====================================  ========
    Property                              Value
    ====================================  ========
    EndCutBlock.Angle.Value               0 
    ------------------------------------  --------
    EndCutBlock.Offset.Value              0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp1.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp10.Value   0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp11.Value   0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp12.Value   0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp2.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp3.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp4.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp5.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp6.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp7.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp8.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Exp9.Value    0 
    ------------------------------------  --------
    EndCutBlock.SketchBlock.Sketches      EndCut1 
    ------------------------------------  --------
    EndCutBlock.TaperType                 Trim 
    ====================================  ========
    
    .. versionadded:: NX7.5.0
    """
    
    class CreationMethod():
        """
        available methods used to place a cutout object
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceEdge", "1 face and 1 edge are used to place this endcut"
           "SpecifyCSYS", "a csys is used to place this endcut"
        """
        FaceEdge = 0  # ShipEndCutBuilderCreationMethodMemberType
        SpecifyCSYS = 1  # ShipEndCutBuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CoordSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coord system 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordSystem`` 
    
    :param coordSystem: 
    :type coordSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    EndCutBlock: NXOpen.EndCutBlockBuilder = ...
    """
    Returns  the end cut block (containing the library sketch block and other end cut specific settings) that defines the end cut outline 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.EndCutBlockBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PlacementType: ShipEndCutBuilderCreationMethod = ...
    """
    Returns or sets  the placement type 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipEndCutBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param placementType: 
    :type placementType: :py:class:`NXOpen.Features.ShipDesign.ShipEndCutBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SelectCSYSFace: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select csysface 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCSYSFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectEdge: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select edge 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectTargetFace: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select target face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ShipEndCutBuilder = ...  # unknown typename


class QualifySketchBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.QualifySketchBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateQualifySketchBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def OpenRegistrationSpreadSheetToEdit(self) -> None:
        """
        Opens registration spreadsheet to edit.  
        
        Signature ``OpenRegistrationSpreadSheetToEdit()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ReloadRegisterSpreadSheet(self) -> None:
        """
        Reloads registration spreadsheet.  
        
        Signature ``ReloadRegisterSpreadSheet()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def OpenPartFile(self) -> None:
        """
        Opens the template part file.  
        
        Signature ``OpenPartFile()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ValidateCurves(self) -> None:
        """
        Validates Curves.  
        
        Signature ``ValidateCurves()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ValidateSketchCurves(self) -> None:
        """
        Validates the sketch curves.  
        
        Signature ``ValidateSketchCurves()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ValidatePartAttributes(self) -> None:
        """
        Validates the part attributes.  
        
        Signature ``ValidatePartAttributes()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def OpenParameterSpreadSheetToEdit(self) -> None:
        """
        Opens parameter spreadsheet to edit.  
        
        Signature ``OpenParameterSpreadSheetToEdit()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ReloadParameterSpreadSheet(self) -> None:
        """
        Reloads parameter spreadsheet.  
        
        Signature ``ReloadParameterSpreadSheet()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ValidateParameterSpreadSheet(self) -> None:
        """
        Validates parameter spreadsheet.  
        
        Signature ``ValidateParameterSpreadSheet()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ReloadTable(self) -> None:
        """
        Reloads expression table.  
        
        Signature ``ReloadTable()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateSketch(self) -> None:
        """
        Updates sketch.  
        
        Signature ``UpdateSketch()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def PreviewLeftImage(self) -> None:
        """
        Previews left image.  
        
        Signature ``PreviewLeftImage()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def PreviewRightImage(self) -> None:
        """
        Previews right image.  
        
        Signature ``PreviewRightImage()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CreateNewAnchorPoint(self) -> AnchorPoint:
        """
        Creates the anchor point.  
        
        Signature ``CreateNewAnchorPoint()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def AssignAttribute(self, entity: NXOpen.TaggedObject, category: str, title: str, value: str, attrType: int, objName: str) -> None:
        """
        Assigns attributes to the anchor point.  
        
        Signature ``AssignAttribute(entity, category, title, value, attrType, objName)`` 
        
        :param entity: 
        :type entity: :py:class:`NXOpen.TaggedObject` 
        :param category: 
        :type category: str 
        :param title: 
        :type title: str 
        :param value: 
        :type value: str 
        :param attrType: 
        :type attrType: int 
        :param objName: 
        :type objName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def RemoveAttribute(self, entity: NXOpen.TaggedObject, category: str, title: str, attrType: int) -> None:
        """
        Removes attributes from the entity.  
        
        Signature ``RemoveAttribute(entity, category, title, attrType)`` 
        
        :param entity: 
        :type entity: :py:class:`NXOpen.TaggedObject` 
        :param category: 
        :type category: str 
        :param title: 
        :type title: str 
        :param attrType: 
        :type attrType: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    ActiveRowIndex: int = ...
    """
    Returns or sets  the active row index.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveRowIndex`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveRowIndex`` 
    
    :param activeRowIndex: 
    :type activeRowIndex: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    BaseLine: NXOpen.SelectCurve = ...
    """
    Returns  the selected base line.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ContextAttribute: int = ...
    """
    Returns or sets  the context attribute.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContextAttribute`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContextAttribute`` 
    
    :param contextAttribute: 
    :type contextAttribute: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    Feature: int = ...
    """
    Returns or sets  the steel feture type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Feature`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Feature`` 
    
    :param feature: 
    :type feature: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ModelFile: str = ...
    """
    Returns or sets  the model file name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ModelFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelFile`` 
    
    :param modelFile: 
    :type modelFile: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ModelList: AnchorPointList = ...
    """
    Returns  the model list.  
    
    <hr>
    
    Getter Method
    
    Signature ``ModelList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.AnchorPointList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ModelPath: str = ...
    """
    Returns or sets  the model file path.  
    
    <hr>
    
    Getter Method
    
    Signature ``ModelPath`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelPath`` 
    
    :param modelPath: 
    :type modelPath: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    MoldLine: NXOpen.SelectCurve = ...
    """
    Returns  the selected mold line.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoldLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OpposingMoldLine: NXOpen.SelectCurve = ...
    """
    Returns  the selected opposing mold line.  
    
    <hr>
    
    Getter Method
    
    Signature ``OpposingMoldLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SectionType: int = ...
    """
    Returns or sets  the section type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param sectionType: 
    :type sectionType: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ShearLine: NXOpen.SelectCurve = ...
    """
    Returns  the selected shear line.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShearLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ShipNo: int = ...
    """
    Returns or sets  the ship no.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNo`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShipNo`` 
    
    :param shipNo: 
    :type shipNo: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SpreadSheetFile: str = ...
    """
    Returns or sets  the parameter spreadsheet file.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpreadSheetFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpreadSheetFile`` 
    
    :param spreadSheetFile: 
    :type spreadSheetFile: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SpreadSheetPath: str = ...
    """
    Returns or sets  the parameter spreadsheet path.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpreadSheetPath`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpreadSheetPath`` 
    
    :param spreadSheetPath: 
    :type spreadSheetPath: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    TaperLine: NXOpen.SelectCurve = ...
    """
    Returns  the selected taper line.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TopLine: NXOpen.SelectCurve = ...
    """
    Returns  the selected top line.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: QualifySketchBuilder = ...  # unknown typename


class RoomContainerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Features.ShipDesign.RoomContainerBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateRoomContainerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def AddRoomAndPurpose(self, room: str, purpose: str) -> None:
        """
        The room and purpose 
        
        Signature ``AddRoomAndPurpose(room, purpose)`` 
        
        :param room: 
        :type room: str 
        :param purpose: 
        :type purpose: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    DeckBody: NXOpen.ScCollector = ...
    """
    Returns  the deck body 
    
    <hr>
    
    Getter Method
    
    Signature ``DeckBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DeckPlanSketch: NXOpen.Section = ...
    """
    Returns  the deck plane sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``DeckPlanSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    RoomNamePrefix: str = ...
    """
    Returns or sets  the room name prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``RoomNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoomNamePrefix`` 
    
    :param roomNamePrefix: 
    :type roomNamePrefix: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: RoomContainerBuilder = ...  # unknown typename


class PenetrationSite(NXOpen.Issue.IssueSite):
    """
    Represents the Penetration Site object.  
    
    Not support KF.
    
    .. versionadded:: NX8.0.0
    """
    
    def RefreshSelectedList(self, listName: str, searchParts: 'list[NXOpen.NXObject]') -> PenetrationList:
        """
        This method will get the selected list and load the requests in the list, then output the list.  
        
        Signature ``RefreshSelectedList(listName, searchParts)`` 
        
        :param listName: 
        :type listName: str 
        :param searchParts: 
        :type searchParts: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    Null: PenetrationSite = ...  # unknown typename


class ProfileBuilderTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileBuilderTypeOption():
    """
    Creation type either a belt or a profile 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Profile", " - "
       "Belt", " - "
    """
    Profile = 0  # ProfileBuilderTypeOptionMemberType
    Belt = 1  # ProfileBuilderTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileBuilderSectionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileBuilderSectionOption():
    """
    Creation of profile from the library or a plate 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plate", " - "
       "Profile", " - "
    """
    Plate = 0  # ProfileBuilderSectionOptionMemberType
    Profile = 1  # ProfileBuilderSectionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileBuilderOrientationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileBuilderOrientationOption():
    """
    Creation method used to define the placement of the profile this
    is disabled for belt creation 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceNormal", " - "
       "DatumCsys", " - "
       "Vector", " - "
    """
    FaceNormal = 0  # ProfileBuilderOrientationOptionMemberType
    DatumCsys = 1  # ProfileBuilderOrientationOptionMemberType
    Vector = 2  # ProfileBuilderOrientationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileBuilderAlignmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileBuilderAlignment():
    """
    Creation method used to define the placement of the belt this
    is disabled for profiles
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Center", " - "
       "GuideEdge", " - "
       "OppositeGuide", " - "
    """
    Center = 0  # ProfileBuilderAlignmentMemberType
    GuideEdge = 1  # ProfileBuilderAlignmentMemberType
    OppositeGuide = 2  # ProfileBuilderAlignmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileBuilderEndCutOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileBuilderEndCutOption():
    """
    Creation method used to define the end cut type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Symmetric", " - "
       "TwoSided", " - "
    """
    NotSet = 0  # ProfileBuilderEndCutOptionMemberType
    Symmetric = 1  # ProfileBuilderEndCutOptionMemberType
    TwoSided = 2  # ProfileBuilderEndCutOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.Profile` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateProfileBuilder`
    
    Default values.
    
    =======================================  ===============================================
    Property                                 Value
    =======================================  ===============================================
    AngleOfRotation.Value                    0 
    ---------------------------------------  -----------------------------------------------
    AngularTolerance                         0.5 
    ---------------------------------------  -----------------------------------------------
    BeltAlignment                            Center 
    ---------------------------------------  -----------------------------------------------
    DistanceTolerance                        0.0254 (millimeters part), 0.001 (inches part) 
    ---------------------------------------  -----------------------------------------------
    EndCutType                               None 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.Angle.Value               0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.Offset.Value              0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp1.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp10.Value   0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp11.Value   0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp12.Value   0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp2.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp3.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp4.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp5.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp6.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp7.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp8.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Exp9.Value    0 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.SketchBlock.Sketches      EndCut1 
    ---------------------------------------  -----------------------------------------------
    EndEndCutBlock.TaperType                 Trim 
    ---------------------------------------  -----------------------------------------------
    FaceOffsetExpression.Value               0 
    ---------------------------------------  -----------------------------------------------
    GuideOffsetExpression.Value              0 
    ---------------------------------------  -----------------------------------------------
    KeepFace                                 0 
    ---------------------------------------  -----------------------------------------------
    KeepGuide                                0 
    ---------------------------------------  -----------------------------------------------
    OrientType                               FaceNormal 
    ---------------------------------------  -----------------------------------------------
    PlateHeight.Value                        0 
    ---------------------------------------  -----------------------------------------------
    PlateWIdth.Value                         0 
    ---------------------------------------  -----------------------------------------------
    SectionType                              Profile 
    =======================================  ===============================================
    
    .. versionadded:: NX7.5.0
    """
    
    class TypeOption():
        """
        Creation type either a belt or a profile 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Profile", " - "
           "Belt", " - "
        """
        Profile = 0  # ProfileBuilderTypeOptionMemberType
        Belt = 1  # ProfileBuilderTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionOption():
        """
        Creation of profile from the library or a plate 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plate", " - "
           "Profile", " - "
        """
        Plate = 0  # ProfileBuilderSectionOptionMemberType
        Profile = 1  # ProfileBuilderSectionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationOption():
        """
        Creation method used to define the placement of the profile this
        is disabled for belt creation 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceNormal", " - "
           "DatumCsys", " - "
           "Vector", " - "
        """
        FaceNormal = 0  # ProfileBuilderOrientationOptionMemberType
        DatumCsys = 1  # ProfileBuilderOrientationOptionMemberType
        Vector = 2  # ProfileBuilderOrientationOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Alignment():
        """
        Creation method used to define the placement of the belt this
        is disabled for profiles
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Center", " - "
           "GuideEdge", " - "
           "OppositeGuide", " - "
        """
        Center = 0  # ProfileBuilderAlignmentMemberType
        GuideEdge = 1  # ProfileBuilderAlignmentMemberType
        OppositeGuide = 2  # ProfileBuilderAlignmentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndCutOption():
        """
        Creation method used to define the end cut type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Symmetric", " - "
           "TwoSided", " - "
        """
        NotSet = 0  # ProfileBuilderEndCutOptionMemberType
        Symmetric = 1  # ProfileBuilderEndCutOptionMemberType
        TwoSided = 2  # ProfileBuilderEndCutOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetAvailableAttributeNames(self) -> 'list[str]':
        """
        Returns the list of available name attributes  
        
        Signature ``GetAvailableAttributeNames()`` 
        
        :returns:  Array of available attribute names.
        These names are specified in the customer
        defaults file.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableAttributeMaterials(self) -> 'list[str]':
        """
        Returns the list of available material attributes  
        
        Signature ``GetAvailableAttributeMaterials()`` 
        
        :returns:  Array of available attribute materials.
        These materials are specified in the customer
        defaults file.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableBeltTypes(self) -> 'list[str]':
        """
        Returns the list of available material attributes  
        
        Signature ``GetAvailableBeltTypes()`` 
        
        :returns:  Array of available belt types derived
        from the belt library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableBeltSizes(self) -> 'list[str]':
        """
        Returns the list of available material attributes  
        
        Signature ``GetAvailableBeltSizes()`` 
        
        :returns:  Array of available belt types derived
        from the belt library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableProfileTypes(self) -> 'list[str]':
        """
        Returns the list of available material attributes  
        
        Signature ``GetAvailableProfileTypes()`` 
        
        :returns:  Array of available profile types derived
        from the profile library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableProfileSizes(self) -> 'list[str]':
        """
        Returns the list of available material attributes  
        
        Signature ``GetAvailableProfileSizes()`` 
        
        :returns:  Array of available profile types derived
        from the profile library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AngleOfRotation: NXOpen.Expression = ...
    """
    Returns  the angle of rotation 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleOfRotation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance (degrees).  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    AttributeMaterial: int = ...
    """
    Returns or sets  the material attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeMaterial`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeMaterial`` 
    
    :param material: 
    :type material: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    AttributeName: int = ...
    """
    Returns or sets  the name attribute value 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeName`` 
    
    :param name: 
    :type name: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    BeltAlignment: ProfileBuilderAlignment = ...
    """
    Returns or sets  the belt alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderAlignment` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BeltAlignment`` 
    
    :param beltAlignment: 
    :type beltAlignment: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderAlignment` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    BeltSize: int = ...
    """
    Returns or sets  the belt size options 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltSize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BeltSize`` 
    
    :param size: 
    :type size: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    BeltType: int = ...
    """
    Returns or sets  the belt type options 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BeltType`` 
    
    :param type: 
    :type type: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    CurveLengthData: NXOpen.GeometricUtilities.CurveLengthData = ...
    """
    Returns  the curve length data  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveLengthData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveLengthData` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance (part units).  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    EndCutType: ProfileBuilderEndCutOption = ...
    """
    Returns or sets  the end cut type 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderEndCutOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutType`` 
    
    :param endCutType: 
    :type endCutType: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderEndCutOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    EndEndCutBlock: NXOpen.EndCutBlockBuilder = ...
    """
    Returns  the end end cut block  
    
    <hr>
    
    Getter Method
    
    Signature ``EndEndCutBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.EndCutBlockBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FaceOffsetExpression: NXOpen.Expression = ...
    """
    Returns  the face offset expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceOffsetExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FaceOffsetVector: bool = ...
    """
    Returns or sets  the face offset vector 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceOffsetVector`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceOffsetVector`` 
    
    :param faceOffsetVector: 
    :type faceOffsetVector: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    GuideOffsetExpression: NXOpen.Expression = ...
    """
    Returns  the guide offset expression 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideOffsetExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GuideOffsetVector: bool = ...
    """
    Returns or sets  the guide offset vector 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideOffsetVector`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GuideOffsetVector`` 
    
    :param guideOffsetVector: 
    :type guideOffsetVector: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    GuideSection: NXOpen.Section = ...
    """
    Returns  the select edge 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    KeepFace: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the selected faces 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepFace`` 
    
    :param keepFace: 
    :type keepFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepGuide: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the selected edges or curves 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepGuide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepGuide`` 
    
    :param keepGuide: 
    :type keepGuide: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    OrientType: ProfileBuilderOrientationOption = ...
    """
    Returns or sets  the orient type 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderOrientationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientType`` 
    
    :param orientType: 
    :type orientType: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderOrientationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    OrientationVector: NXOpen.Direction = ...
    """
    Returns or sets  the orientation vector 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationVector`` 
    
    :param orientationVector: 
    :type orientationVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    PlateHeight: NXOpen.Expression = ...
    """
    Returns  the plate height 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PlateWIdth: NXOpen.Expression = ...
    """
    Returns  the plate width 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateWIdth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProfileSize: int = ...
    """
    Returns or sets  the profile size options 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileSize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProfileSize`` 
    
    :param size: 
    :type size: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ProfileType: int = ...
    """
    Returns or sets  the profile type options 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProfileType`` 
    
    :param type: 
    :type type: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SectionType: ProfileBuilderSectionOption = ...
    """
    Returns or sets  the section type 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderSectionOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param sectionType: 
    :type sectionType: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderSectionOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SelectCsys: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the select csys 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the placement faces or datum plane 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartEndCutBlock: NXOpen.EndCutBlockBuilder = ...
    """
    Returns  the start end cut block  
    
    <hr>
    
    Getter Method
    
    Signature ``StartEndCutBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.EndCutBlockBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: ProfileBuilderTypeOption = ...
    """
    Returns or sets  the type belt or profile 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderTypeOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ProfileBuilderTypeOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: ProfileBuilder = ...  # unknown typename


class EdgeReinforcementBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EdgeReinforcementBuilderTypes():
    """
    Used to specify how the edge reinforcement system is defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OnEdge", " - "
       "OnFace", " - "
    """
    OnEdge = 0  # EdgeReinforcementBuilderTypesMemberType
    OnFace = 1  # EdgeReinforcementBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EdgeReinforcementBuilderOrientationMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EdgeReinforcementBuilderOrientationMethods():
    """
    Used to specify the type of reference to use for specifying the orientation of the edge reinforcement system. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceNormal", " - "
       "Vector", " - "
    """
    FaceNormal = 0  # EdgeReinforcementBuilderOrientationMethodsMemberType
    Vector = 1  # EdgeReinforcementBuilderOrientationMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EdgeReinforcementBuilderEndCutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EdgeReinforcementBuilderEndCutTypes():
    """
    Used to specify the type of end cut to be used at the extreme ends of the edge reinforcement system. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Connected", " - "
       "FlangeFree", " - "
       "Sniped", " - "
       "SnipedSquare", " - "
    """
    Connected = 0  # EdgeReinforcementBuilderEndCutTypesMemberType
    FlangeFree = 1  # EdgeReinforcementBuilderEndCutTypesMemberType
    Sniped = 2  # EdgeReinforcementBuilderEndCutTypesMemberType
    SnipedSquare = 3  # EdgeReinforcementBuilderEndCutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EdgeReinforcementBuilder(ProfileSystemBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcement` builder which is used to create or edit a edge reinforcement system feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateEdgeReinforcementBuilder`
    
    Default values.
    
    =====================================================  =========================================
    Property                                               Value
    =====================================================  =========================================
    EndCutEnd                                              Connected 
    -----------------------------------------------------  -----------------------------------------
    EndCutStart                                            Connected 
    -----------------------------------------------------  -----------------------------------------
    OrientationAngle.Value                                 0 
    -----------------------------------------------------  -----------------------------------------
    OrientationDefinitionBuilder.MeasureAngles             NormaltoCurve 
    -----------------------------------------------------  -----------------------------------------
    OrientationDefinitionBuilder.ShowSurfaceAngles         0 
    -----------------------------------------------------  -----------------------------------------
    OrientationDefinitionBuilder.ShowTwistRate             0 
    -----------------------------------------------------  -----------------------------------------
    OrientationDefinitionBuilder.ShowWebAngles             0 
    -----------------------------------------------------  -----------------------------------------
    OrientationMethod                                      FaceNormal 
    -----------------------------------------------------  -----------------------------------------
    StockData.AnchorPoint                                  0 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateHeight.Value                            50 (millimeters part), 2 (inches part) 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.KnuckleRatio                  3.0 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.KnuckleSmoothAngle            3.0 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.MaterialOption                0 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.RestrictThicknessToMaterial   true 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.ThickenOption                 SingleSided 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    -----------------------------------------------------  -----------------------------------------
    StockData.PlateStockData.ThicknessSourceOption         List 
    -----------------------------------------------------  -----------------------------------------
    StockData.SectionType                                  Profile 
    =====================================================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Used to specify how the edge reinforcement system is defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OnEdge", " - "
           "OnFace", " - "
        """
        OnEdge = 0  # EdgeReinforcementBuilderTypesMemberType
        OnFace = 1  # EdgeReinforcementBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationMethods():
        """
        Used to specify the type of reference to use for specifying the orientation of the edge reinforcement system. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceNormal", " - "
           "Vector", " - "
        """
        FaceNormal = 0  # EdgeReinforcementBuilderOrientationMethodsMemberType
        Vector = 1  # EdgeReinforcementBuilderOrientationMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndCutTypes():
        """
        Used to specify the type of end cut to be used at the extreme ends of the edge reinforcement system. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Connected", " - "
           "FlangeFree", " - "
           "Sniped", " - "
           "SnipedSquare", " - "
        """
        Connected = 0  # EdgeReinforcementBuilderEndCutTypesMemberType
        FlangeFree = 1  # EdgeReinforcementBuilderEndCutTypesMemberType
        Sniped = 2  # EdgeReinforcementBuilderEndCutTypesMemberType
        SnipedSquare = 3  # EdgeReinforcementBuilderEndCutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BuildSolid: bool = ...
    """
    Returns or sets  the indication of whether to build a solid for the edge reinforcement or just the curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildSolid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BuildSolid`` 
    
    :param buildSolid: 
    :type buildSolid: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    CreateSeamsAtKnuckles: bool = ...
    """
    Returns or sets  the flag that indicates if seams are to be created or updated at knuckle locations.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSeamsAtKnuckles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSeamsAtKnuckles`` 
    
    :param createSeams: 
    :type createSeams: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Edges: NXOpen.Section = ...
    """
    Returns  the edges to reinforce.  
    
    <hr>
    
    Getter Method
    
    Signature ``Edges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndCutEnd: EdgeReinforcementBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the end of the edge reinforcement system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderEndCutTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutEnd`` 
    
    :param endCutEnd: 
    :type endCutEnd: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderEndCutTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    EndCutStart: EdgeReinforcementBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the start of the edge reinforcement system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderEndCutTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutStart`` 
    
    :param endCutStart: 
    :type endCutStart: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderEndCutTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    KnuckleLocationTolerance: float = ...
    """
    Returns or sets  the tolerance used to determine when knuckle locations are considered to be the same.  
    
    <hr>
    
    Getter Method
    
    Signature ``KnuckleLocationTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KnuckleLocationTolerance`` 
    
    :param knuckleLocationTolerance: 
    :type knuckleLocationTolerance: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset used for the offset distance from anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationAngle: NXOpen.Expression = ...
    """
    Returns  the angle to use for the edge reinforcement orientation.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationDefinitionBuilder: OrientationDefinitionBuilder = ...
    """
    Returns  the builder used to define the orientation for the edge reinforcement system.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationDefinitionBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OrientationMethod: EdgeReinforcementBuilderOrientationMethods = ...
    """
    Returns or sets  the method used to orient the edge reinforcement.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderOrientationMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationMethod`` 
    
    :param orientationMethod: 
    :type orientationMethod: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderOrientationMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    OrientationVector: NXOpen.Direction = ...
    """
    Returns or sets  the orientation vector when the orientation method is 
    :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderOrientationMethods.Vector <NXOpen.Features.ShipDesign.EdgeReinforcementBuilderOrientationMethods>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationVector`` 
    
    :param orientationVector: 
    :type orientationVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Reverse: bool = ...
    """
    Returns or sets  the indication if the default direction of the flange is reverse or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Reverse`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reverse`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ReverseAttachmentDirection: bool = ...
    """
    Returns or sets  the flag that indicates if the attachment direction is reversed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseAttachmentDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseAttachmentDirection`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the Edge Reinforcement Systems created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    StockData: StiffenerStockBuilder = ...
    """
    Returns  the stock data used to define the stock information of the edge reinforcement.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: EdgeReinforcementBuilderTypes = ...
    """
    Returns or sets  the type of placement being used in the edge reinforcement definition.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Weld: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the builder used to specify the welding characteristics for the edge reinforcement.  
    
    <hr>
    
    Getter Method
    
    Signature ``Weld`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: EdgeReinforcementBuilder = ...  # unknown typename


class ShipnamesBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipnamesBuilderType():
    """
    The type of Ship Object for which automatically generated names will be created 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Hull", " - "
       "Deck", " - "
       "LongitudinalBulkhead", " - "
       "TransverseBulkhead", " - "
       "StiffenerSystem", " - "
       "EdgeReinforcementSystem", " - "
       "PillarSystem", " - "
       "Seam", " - "
       "GenericPlateSystem", " - "
       "StandardPart", " - "
       "CollarPlate", " - "
       "Bracket", " - "
       "Plate", " - "
       "Profile", " - "
       "Pillar", " - "
       "StandardPartCollarPlate", " - "
       "StandardPartBracket", " - "
       "Grid", " - "
       "Room", " - "
    """
    NotSet = 0  # ShipnamesBuilderTypeMemberType
    Hull = 1  # ShipnamesBuilderTypeMemberType
    Deck = 2  # ShipnamesBuilderTypeMemberType
    LongitudinalBulkhead = 3  # ShipnamesBuilderTypeMemberType
    TransverseBulkhead = 4  # ShipnamesBuilderTypeMemberType
    StiffenerSystem = 5  # ShipnamesBuilderTypeMemberType
    EdgeReinforcementSystem = 6  # ShipnamesBuilderTypeMemberType
    PillarSystem = 7  # ShipnamesBuilderTypeMemberType
    Seam = 8  # ShipnamesBuilderTypeMemberType
    GenericPlateSystem = 9  # ShipnamesBuilderTypeMemberType
    StandardPart = 10  # ShipnamesBuilderTypeMemberType
    CollarPlate = 11  # ShipnamesBuilderTypeMemberType
    Bracket = 12  # ShipnamesBuilderTypeMemberType
    Plate = 13  # ShipnamesBuilderTypeMemberType
    Profile = 14  # ShipnamesBuilderTypeMemberType
    Pillar = 15  # ShipnamesBuilderTypeMemberType
    StandardPartCollarPlate = 16  # ShipnamesBuilderTypeMemberType
    StandardPartBracket = 17  # ShipnamesBuilderTypeMemberType
    Grid = 18  # ShipnamesBuilderTypeMemberType
    Room = 19  # ShipnamesBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateBuilderTypes():
    """
    Settings to indicate how the plate is generated. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Creates plate body."
       "Adopt", "Adopts plate body."
    """
    Create = 0  # PlateBuilderTypesMemberType
    Adopt = 1  # PlateBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBuilderRegionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateBuilderRegionOptions():
    """
    Settings to indicate what areas to create the plate when using body faces as boundaries. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", " - "
       "InsideBody", " - "
       "OutsideBody", " - "
    """
    All = 0  # PlateBuilderRegionOptionsMemberType
    InsideBody = 1  # PlateBuilderRegionOptionsMemberType
    OutsideBody = 2  # PlateBuilderRegionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBuilderTightnessOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateBuilderTightnessOptions():
    """
    Settings to indicate what tightness to create the plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NonTight", " - "
       "WaterTight", " - "
       "OilTight", " - "
       "AirTight", " - "
    """
    NonTight = 0  # PlateBuilderTightnessOptionsMemberType
    WaterTight = 1  # PlateBuilderTightnessOptionsMemberType
    OilTight = 2  # PlateBuilderTightnessOptionsMemberType
    AirTight = 3  # PlateBuilderTightnessOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBuilderBodyTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateBuilderBodyTypes():
    """
    Settings to indicate the plate output body type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetBody", "Outputs a plate as a sheet body."
       "SolidBody", "Outputs a plate as a solid body."
    """
    SheetBody = 0  # PlateBuilderBodyTypesMemberType
    SolidBody = 1  # PlateBuilderBodyTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.Plate` builder.  
    
    This builder is used to
    create and edit ship plate feature. The plate feature can be created from construction curves, 
    boundary faces or planes. And also a solid body cab be adopted as a plate.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreatePlateBuilder`
    
    Default values.
    
    =======================================  ===============================================
    Property                                 Value
    =======================================  ===============================================
    DistanceTolerance                        0.0254 (millimeters part), 0.001 (inches part) 
    ---------------------------------------  -----------------------------------------------
    MoldFaceOffset.Value                     0 (millimeters part), 0 (inches part) 
    ---------------------------------------  -----------------------------------------------
    PlateStock.KnuckleRatio                  3.0 
    ---------------------------------------  -----------------------------------------------
    PlateStock.KnuckleSmoothAngle            3.0 
    ---------------------------------------  -----------------------------------------------
    PlateStock.MaterialOption                0 
    ---------------------------------------  -----------------------------------------------
    PlateStock.OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    ---------------------------------------  -----------------------------------------------
    PlateStock.RestrictThicknessToMaterial   true 
    ---------------------------------------  -----------------------------------------------
    PlateStock.ThickenOption                 SingleSided 
    ---------------------------------------  -----------------------------------------------
    PlateStock.Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    ---------------------------------------  -----------------------------------------------
    PlateStock.ThicknessSourceOption         List 
    ---------------------------------------  -----------------------------------------------
    RegionOption                             OutsideBody 
    ---------------------------------------  -----------------------------------------------
    Tightness                                NonTight 
    =======================================  ===============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Settings to indicate how the plate is generated. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "Creates plate body."
           "Adopt", "Adopts plate body."
        """
        Create = 0  # PlateBuilderTypesMemberType
        Adopt = 1  # PlateBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RegionOptions():
        """
        Settings to indicate what areas to create the plate when using body faces as boundaries. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", " - "
           "InsideBody", " - "
           "OutsideBody", " - "
        """
        All = 0  # PlateBuilderRegionOptionsMemberType
        InsideBody = 1  # PlateBuilderRegionOptionsMemberType
        OutsideBody = 2  # PlateBuilderRegionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TightnessOptions():
        """
        Settings to indicate what tightness to create the plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NonTight", " - "
           "WaterTight", " - "
           "OilTight", " - "
           "AirTight", " - "
        """
        NonTight = 0  # PlateBuilderTightnessOptionsMemberType
        WaterTight = 1  # PlateBuilderTightnessOptionsMemberType
        OilTight = 2  # PlateBuilderTightnessOptionsMemberType
        AirTight = 3  # PlateBuilderTightnessOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BodyTypes():
        """
        Settings to indicate the plate output body type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetBody", "Outputs a plate as a sheet body."
           "SolidBody", "Outputs a plate as a solid body."
        """
        SheetBody = 0  # PlateBuilderBodyTypesMemberType
        SolidBody = 1  # PlateBuilderBodyTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetShowMigratedBody(self) -> bool:
        """
        Gets the show migrated body flag.  
        
        Reserved for administrator use only. 
        
        Signature ``GetShowMigratedBody()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.5.3
        
        License requirements: None.
        """
        ...
    
    
    def SetShowMigratedBody(self, showMigratedBody: bool) -> None:
        """
        Sets the show migrated body flag.  
        
        Reserved for administrator use only.
        
        Signature ``SetShowMigratedBody(showMigratedBody)`` 
        
        :param showMigratedBody: 
        :type showMigratedBody: bool 
        
        .. versionadded:: NX8.5.3
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def CreateRegions(self) -> 'list[NXOpen.Body]':
        """
        Creates regions to output the selected plates.  
        
        Signature ``CreateRegions()`` 
        
        :returns:  Region Bodies  
        :rtype: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def DeleteRegions(self) -> None:
        """
        Deletes regions 
        
        Signature ``DeleteRegions()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def SetKnuckleEdges(self, knuckleEdges: 'list[NXOpen.Edge]') -> None:
        """
        Sets the knuckle edges, which include edges for both bend and split types.  
        
        Signature ``SetKnuckleEdges(knuckleEdges)`` 
        
        :param knuckleEdges:  G0 edges  
        :type knuckleEdges: list of :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def AddRegionPoint(self, regionPoint: NXOpen.Point3d) -> None:
        """
        Adds a region point.  
        
        If there are multiple region points, do a loop to add one by one. 
        
        Signature ``AddRegionPoint(regionPoint)`` 
        
        :param regionPoint: 
        :type regionPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def RemoveRegionPoint(self, regionPoint: NXOpen.Point3d) -> None:
        """
        Removes a region point.  
        
        Plate will find the region body by the input region point and remove the cached region point.
        
        Signature ``RemoveRegionPoint(regionPoint)`` 
        
        :param regionPoint: 
        :type regionPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def GetMultipleRegionPoints(self) -> 'list[NXOpen.Point3d]':
        """
        Gets multiple region points.  
        
        Signature ``GetMultipleRegionPoints()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MapRegionToRegionPoint(self, plateRegionString: str, regionPoint: NXOpen.Point3d) -> None:
        """
        Maps the user selected plate region to a region point.  
        
        Signature ``MapRegionToRegionPoint(plateRegionString, regionPoint)`` 
        
        :param plateRegionString: 
        :type plateRegionString: str 
        :param regionPoint: 
        :type regionPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def RemoveAllRegionPoints(self) -> None:
        """
        Removes all region points.  
        
        Signature ``RemoveAllRegionPoints()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePlateBoundaryOptionBuilder(self) -> PlateBoundaryOptionBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder`  
        
        Signature ``CreatePlateBoundaryOptionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def SetPlateBoundaryTrimType(self, nItem: int, type: PlateBoundaryOptionBuilderTrimTypes) -> None:
        """
        Sets plate boundary trim type 
        
        Signature ``SetPlateBoundaryTrimType(nItem, type)`` 
        
        :param nItem: 
        :type nItem: int 
        :param type: 
        :type type: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderTrimTypes` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def GetPlateBoundaryTrimType(self, nItem: int) -> PlateBoundaryOptionBuilderTrimTypes:
        """
        Gets plate boundary trim type  
        
        Signature ``GetPlateBoundaryTrimType(nItem)`` 
        
        :param nItem: 
        :type nItem: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderTrimTypes` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def AddMergeRegionPoint(self, regionPoint: NXOpen.Point3d) -> None:
        """
        Adds a merge region point.  
        
        If there are multiple region points, do a loop to add one by one. 
        
        Signature ``AddMergeRegionPoint(regionPoint)`` 
        
        :param regionPoint: 
        :type regionPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def RemoveMergeRegionPoint(self, regionPoint: NXOpen.Point3d) -> None:
        """
        Removes a merge region point.  
        
        Signature ``RemoveMergeRegionPoint(regionPoint)`` 
        
        :param regionPoint: 
        :type regionPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AdoptionBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the adoption bodies, which are used to create multiple plates.  
    
    Each plate has a single body. 
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    AdoptionBodiesMoldFace: NXOpen.ScCollector = ...
    """
    Returns  the mold face of adoption bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionBodiesMoldFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BodyBoundary: NXOpen.SelectBodyList = ...
    """
    Returns  the body boundary, which can be mixed with curve, face and plane to define the plate boundary.  
    
    <hr>
    
    Getter Method
    
    Signature ``BodyBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CurveBoundary: NXOpen.Section = ...
    """
    Returns  the curve boundary, which can be a single region or multiple regions.  
    
    In case of multiple regions, it creates multiple plates. 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    FacePlaneBoundary: NXOpen.ExpressionCollectorSetList = ...
    """
    Returns  the face, plane boundary, which defines a list of trimming objects with offset values.  
    
    <hr>
    
    Getter Method
    
    Signature ``FacePlaneBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ExpressionCollectorSetList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FlipDirection: bool = ...
    """
    Returns or sets  the flip direction, which can change the plate thickness direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlipDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlipDirection`` 
    
    :param flipDirection: 
    :type flipDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    MergeRegions: NXOpen.SelectBodyList = ...
    """
    Returns  the multiple regions to merge together as plate body.  
    
    <hr>
    
    Getter Method
    
    Signature ``MergeRegions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    MoldFace: NXOpen.ScCollector = ...
    """
    Returns  the mold face, which is used to create the plate body and define the plate placement.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFaceOffset: NXOpen.Expression = ...
    """
    Returns  the mold face offset, which defines an offset distance to the mold face.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaceOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlateBoundaryOptionList: PlateBoundaryOptionBuilderList = ...
    """
    Returns  the build boundary option builder list 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateBoundaryOptionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PlateStock: PlateStockBuilder = ...
    """
    Returns  the plate stock builder, which defines the plate material, grade, thickness, mass density, thicken option and opposite thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateStock`` 
    
    :returns:  Plate Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ProjectDirection: NXOpen.GeometricUtilities.ProjectionOptions = ...
    """
    Returns  the project direction, which is used to project the boundary curves to the plate mold face.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectDirection`` 
    
    :returns:  Projection Options data  
    :rtype: :py:class:`NXOpen.GeometricUtilities.ProjectionOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RegionOption: PlateBuilderRegionOptions = ...
    """
    Returns or sets  the region option, which defines the plate areas in case of body faces as plate boundary.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBuilderRegionOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionOption`` 
    
    :param regionOption: 
    :type regionOption: :py:class:`NXOpen.Features.ShipDesign.PlateBuilderRegionOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    RegionPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the region point, which is used to identify the plate region.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionPoint`` 
    
    :param regionPoint: 
    :type regionPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Regions: NXOpen.SelectNXObjectList = ...
    """
    Returns  the regions to create plates
    
    <hr>
    
    Getter Method
    
    Signature ``Regions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the ship name builder.  
    
    The ship name builder is used to construct the part name of the structure.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SplitKnuckleEdges: NXOpen.SelectEdgeList = ...
    """
    Returns  the split knuckle edges, which are used to split a plate into separate knuckle parts.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitKnuckleEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Tightness: PlateBuilderTightnessOptions = ...
    """
    Returns or sets  the tightness, which defines the plate is tight (air tight, oil tight, water tight) or non tight.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tightness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBuilderTightnessOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tightness`` 
    
    :param tightness: 
    :type tightness: :py:class:`NXOpen.Features.ShipDesign.PlateBuilderTightnessOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Type: PlateBuilderTypes = ...
    """
    Returns or sets  the plate type, which is creation or adoption.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.PlateBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: PlateBuilder = ...  # unknown typename


class DrawingSheetBuilderLayoutOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderLayoutOptions():
    """
    Settings to indicate the view layout type by row and column in hroizontal or vertical order.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", " - "
       "Vertical", " - "
    """
    Horizontal = 0  # DrawingSheetBuilderLayoutOptionsMemberType
    Vertical = 1  # DrawingSheetBuilderLayoutOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder`.  
    
    This class is used to define a drawing sheet in :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder`, in this case user can define 
    the drawing sheet manually as he want.
    Originally, we use a :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilder` class and a list of :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
    and the command will calculate the arrangement (like how many drawing parts/draw sheets need to create and which view in which sheet ) 
    automatically. User can't define which view in which sheet.
    
    In this project we make user has ability to define the arrangement in a tree like
    Drawing Part1
    |- Drawing Sheet1
    |-View1
    |-View2
    |- Drawing Sheet2
    |- View3
    |- View4
    Drawing Part2
    | - Drawing Sheet1
    |- View5
    |- View6
    
    So we add :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` and :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` between them and make them has structure as below:
    :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilder`
    :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder`
    :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder`
    :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.DrawingPartBuilder.CreateDrawingSheetBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class LayoutOptions():
        """
        Settings to indicate the view layout type by row and column in hroizontal or vertical order.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Horizontal", " - "
           "Vertical", " - "
        """
        Horizontal = 0  # DrawingSheetBuilderLayoutOptionsMemberType
        Vertical = 1  # DrawingSheetBuilderLayoutOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ColumnCount: int = ...
    """
    Returns or sets  the number of column into which the views should be arranged on the drawing sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``ColumnCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColumnCount`` 
    
    :param columnCount: 
    :type columnCount: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DrawingTemplate: DrawingTemplateBuilder = ...
    """
    Returns  the drawing template builder, which represents a :py:class:`NXOpen.Features.ShipDesign.DrawingTemplateBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingTemplate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingTemplateBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Layout: DrawingSheetBuilderLayoutOptions = ...
    """
    Returns or sets  the view layout option.  
    
    <hr>
    
    Getter Method
    
    Signature ``Layout`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilderLayoutOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Layout`` 
    
    :param layout: 
    :type layout: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilderLayoutOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    RowCount: int = ...
    """
    Returns or sets  the number of rows into which the views should be arranged on the drawing sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``RowCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RowCount`` 
    
    :param rowCount: 
    :type rowCount: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SheetName: str = ...
    """
    Returns or sets  the drawing sheet name into which the views should be arranged.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetName`` 
    
    :param sheetName: 
    :type sheetName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SheetScale: str = ...
    """
    Returns or sets  the sheet scale 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetScale`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetScale`` 
    
    :param sheetScale: 
    :type sheetScale: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ViewList: SectionViewBuilderList = ...
    """
    Returns  the section view list 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderList` 
    
    .. versionadded:: NX12.0.1
    
    License requirements: None.
    """
    Null: DrawingSheetBuilder = ...  # unknown typename


class ThicknessDirectionBuilderThicknessDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ThicknessDirectionBuilderThicknessDirectionType():
    """
    Settings used to indicate the direction of thickness from the mold face or grid plane. 
    The actual direction depends on the type of plate system or grid defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FwdPortInUp", "Direction is Forward, Port, Inside or Up."
       "AftStbdOutDn", "Direction is Aft, Starboard, Outside or Down."
       "Ctr", "Thickness is centered about the mold face."
       "PortToInCtr", "Direction is Port, To Reference, Inside or Centered."
       "StbdFrOutCtr", "Direction is Starboard, From Reference, Outside or Centered."
    """
    FwdPortInUp = 0  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
    AftStbdOutDn = 1  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
    Ctr = 2  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
    PortToInCtr = 3  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
    StbdFrOutCtr = 4  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ThicknessDirectionBuilder(NXOpen.Builder):
    """
    This class allows you to define the thickness direction for plate system features in Ship Basic Design and
    and for grid planes in Ship Concept Design.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    Default values.
    
    ==============================  ============
    Property                        Value
    ==============================  ============
    ThicknessDirection              FwdPortInUp 
    ------------------------------  ------------
    ThicknessDirectionOnReference   FwdPortInUp 
    ==============================  ============
    
    .. versionadded:: NX8.0.0
    """
    
    class ThicknessDirectionType():
        """
        Settings used to indicate the direction of thickness from the mold face or grid plane. 
        The actual direction depends on the type of plate system or grid defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FwdPortInUp", "Direction is Forward, Port, Inside or Up."
           "AftStbdOutDn", "Direction is Aft, Starboard, Outside or Down."
           "Ctr", "Thickness is centered about the mold face."
           "PortToInCtr", "Direction is Port, To Reference, Inside or Centered."
           "StbdFrOutCtr", "Direction is Starboard, From Reference, Outside or Centered."
        """
        FwdPortInUp = 0  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
        AftStbdOutDn = 1  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
        Ctr = 2  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
        PortToInCtr = 3  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
        StbdFrOutCtr = 4  # ThicknessDirectionBuilderThicknessDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ThicknessDirection: ThicknessDirectionBuilderThicknessDirectionType = ...
    """
    Returns or sets  the direction in which to apply the thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ThicknessDirectionBuilderThicknessDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessDirection`` 
    
    :param thicknessDirection: 
    :type thicknessDirection: :py:class:`NXOpen.Features.ShipDesign.ThicknessDirectionBuilderThicknessDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ThicknessDirectionOnReference: ThicknessDirectionBuilderThicknessDirectionType = ...
    """
    Returns or sets  the direction in which to apply the thickness when the mold face or grid plane is located on a midship reference.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessDirectionOnReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ThicknessDirectionBuilderThicknessDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessDirectionOnReference`` 
    
    :param thicknessDirectionOnReference: 
    :type thicknessDirectionOnReference: :py:class:`NXOpen.Features.ShipDesign.ThicknessDirectionBuilderThicknessDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: ThicknessDirectionBuilder = ...  # unknown typename


class OrientationRegionItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[OrientationRegionItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: OrientationRegionItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: OrientationRegionItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> OrientationRegionItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: OrientationRegionItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: OrientationRegionItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[OrientationRegionItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[OrientationRegionItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: OrientationRegionItemBuilder, object2: OrientationRegionItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: OrientationRegionItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: OrientationRegionItemBuilderList = ...  # unknown typename


class TransFrameBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.TransFrame` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateTransFrameBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    def CreateTransFrameListItem(self) -> TransFrameListItemBuilder:
        """
        Create a list containing all required info to generate transverse frame.  
        
        Signature ``CreateTransFrameListItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AttribName: str = ...
    """
    Returns or sets  the attribute for name type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttribName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttribName`` 
    
    :param attribName: 
    :type attribName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AttribRef: str = ...
    """
    Returns or sets  the attribute for reference type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttribRef`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttribRef`` 
    
    :param attribRef: 
    :type attribRef: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    FeatureNameSuffix: str = ...
    """
    Returns or sets  the suffix name.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureNameSuffix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.3.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FeatureNameSuffix`` 
    
    :param featureNameSuffix: 
    :type featureNameSuffix: str 
    
    .. versionadded:: NX5.3.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    NegateFrame: int = ...
    """
    Returns or sets  the reverse index since where frames turn to opposite.  
    
    <hr>
    
    Getter Method
    
    Signature ``NegateFrame`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NegateFrame`` 
    
    :param negateFrame: 
    :type negateFrame: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    TransFrameNegList: TransFrameListItemBuilderList = ...
    """
    Returns  the negative list.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransFrameNegList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilderList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    TransFramePosList: TransFrameListItemBuilderList = ...
    """
    Returns  the positive list.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransFramePosList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilderList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TransFrameBuilder = ...  # unknown typename


class InsertFramesBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertFramesBuilderTypes():
    """
    Represents the Insert Frame Builder type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Transverse", " - "
       "LongitudnalZ", " - "
       "LongitudnalY", " - "
    """
    Transverse = 0  # InsertFramesBuilderTypesMemberType
    LongitudnalZ = 1  # InsertFramesBuilderTypesMemberType
    LongitudnalY = 2  # InsertFramesBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertFramesBuilder(TransFrameBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.InsertFramesBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateInsertFramesBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class Types():
        """
        Represents the Insert Frame Builder type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Transverse", " - "
           "LongitudnalZ", " - "
           "LongitudnalY", " - "
        """
        Transverse = 0  # InsertFramesBuilderTypesMemberType
        LongitudnalZ = 1  # InsertFramesBuilderTypesMemberType
        LongitudnalY = 2  # InsertFramesBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    StartFrameName: str = ...
    """
    Returns or sets  the Transverse Frame name 
    
    <hr>
    
    Getter Method
    
    Signature ``StartFrameName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartFrameName`` 
    
    :param frameName: 
    :type frameName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Type: InsertFramesBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.InsertFramesBuilderTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.InsertFramesBuilderTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: InsertFramesBuilder = ...  # unknown typename


class ShipnamesBuilderVersionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipnamesBuilderVersion():
    """
    The version of Ship Object naming rule 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Legacy", " - "
       "PositionInformation", " - "
    """
    Legacy = 0  # ShipnamesBuilderVersionMemberType
    PositionInformation = 1  # ShipnamesBuilderVersionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipSection(NXOpen.Features.BodyFeature):
    """
    Represents a ship section feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShipSectionBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: ShipSection = ...  # unknown typename


class ItFrameListItemBuilder(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder`
    
    .. versionadded:: NX8.0.0
    """
    EndFrameName: str = ...
    """
    Returns or sets  the end reference transverse frame name.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndFrameName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndFrameName`` 
    
    :param frameName: 
    :type frameName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    NumberOfFrames: int = ...
    """
    Returns or sets  the number of inter transverse frames.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfFrames`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfFrames`` 
    
    :param nItFrames: 
    :type nItFrames: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    StartFrameName: str = ...
    """
    Returns or sets  the start reference transverse frame name.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartFrameName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartFrameName`` 
    
    :param frameName: 
    :type frameName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: ItFrameListItemBuilder = ...  # unknown typename


class Cutout2BuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Cutout2BuilderCreationMethod():
    """
    available methods used to place a cutout object
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Face2Lines", "1 face and 2 lines, edges, or datums are used to place this cutout"
       "SpecifyCSYS", "a csys is used to place this cutout"
       "Faces2Surfaces", "1 face and 2 surfaces are used to place this cutout"
       "FacesBetweenSurfacesSurface", "1 face and 3 surfaces are used to place this cutout"
       "FacesCentered", "1 face is used to place this cutout"
       "CustomShape", "Custom curves are extruded to define the cut shape."
    """
    Face2Lines = 0  # Cutout2BuilderCreationMethodMemberType
    SpecifyCSYS = 1  # Cutout2BuilderCreationMethodMemberType
    Faces2Surfaces = 2  # Cutout2BuilderCreationMethodMemberType
    FacesBetweenSurfacesSurface = 3  # Cutout2BuilderCreationMethodMemberType
    FacesCentered = 4  # Cutout2BuilderCreationMethodMemberType
    CustomShape = 5  # Cutout2BuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Cutout2Builder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.Cutout2` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCutout2Builder`
    
    Default values.
    
    =======================  ======================================
    Property                 Value
    =======================  ======================================
    AngularDimension.Value   0 
    -----------------------  --------------------------------------
    PlacementType            Face2Lines 
    -----------------------  --------------------------------------
    ReferenceOffset1.Value   0 (millimeters part), 0 (inches part) 
    -----------------------  --------------------------------------
    ReferenceOffset2.Value   0 (millimeters part), 0 (inches part) 
    -----------------------  --------------------------------------
    ReferenceOffset3.Value   0 (millimeters part), 0 (inches part) 
    =======================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class CreationMethod():
        """
        available methods used to place a cutout object
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Face2Lines", "1 face and 2 lines, edges, or datums are used to place this cutout"
           "SpecifyCSYS", "a csys is used to place this cutout"
           "Faces2Surfaces", "1 face and 2 surfaces are used to place this cutout"
           "FacesBetweenSurfacesSurface", "1 face and 3 surfaces are used to place this cutout"
           "FacesCentered", "1 face is used to place this cutout"
           "CustomShape", "Custom curves are extruded to define the cut shape."
        """
        Face2Lines = 0  # Cutout2BuilderCreationMethodMemberType
        SpecifyCSYS = 1  # Cutout2BuilderCreationMethodMemberType
        Faces2Surfaces = 2  # Cutout2BuilderCreationMethodMemberType
        FacesBetweenSurfacesSurface = 3  # Cutout2BuilderCreationMethodMemberType
        FacesCentered = 4  # Cutout2BuilderCreationMethodMemberType
        CustomShape = 5  # Cutout2BuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngularDimension: NXOpen.Expression = ...
    """
    Returns  the angular dimension (used only for Face2Lines, Faces2Surfaces, FacesBetweenSurfacesSurface, FacesCentered) 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CoordSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coord system (only used for: SpecifyCSYS) 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordSystem`` 
    
    :param coordSystem: 
    :type coordSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    CustomShape: NXOpen.Section = ...
    """
    Returns  the section of curves defining the custom shape cut 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    HorizontalReference: NXOpen.Direction = ...
    """
    Returns or sets  the horizontal reference (optional, used only for Faces2Surfaces, FacesBetweenSurfacesSurface, and FacesCentered) 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalReference`` 
    
    :param horizontalReference: 
    :type horizontalReference: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    LinearOffset1: NXOpen.Expression = ...
    """
    Returns  the linear offset1 (replaced by ReferenceOffset1 in NX8.  
    
    5) 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearOffset1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LinearOffset2: NXOpen.Expression = ...
    """
    Returns  the linear offset2 (replaced by ReferenceOffset2 in NX8.  
    
    5) 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearOffset2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ManufacturingInformation: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock builder that holds the manufacturing data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingInformation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    PlacementType: Cutout2BuilderCreationMethod = ...
    """
    Returns or sets  the placement type 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.Cutout2BuilderCreationMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param placementType: 
    :type placementType: :py:class:`NXOpen.Features.ShipDesign.Cutout2BuilderCreationMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ProjectionDirection: NXOpen.GeometricUtilities.ProjectionOptions = ...
    """
    Returns  the direction used to project the custom shape curves 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectionDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ProjectionOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ReferenceOffset1: NXOpen.Expression = ...
    """
    Returns  the reference offset1 (used only for Face2Lines, and Faces2Surfaces ) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOffset1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReferenceOffset2: NXOpen.Expression = ...
    """
    Returns  the reference offset2 (used only for Face2Lines, and Faces2Surfaces) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOffset2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReferenceOffset3: NXOpen.Expression = ...
    """
    Returns  the reference offset3 (used only for FacesBetweenSurfacesSurface) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOffset3`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReverseDirection1: bool = ...
    """
    Returns or sets  the reverse direction1 (used only for Face2Lines, and Faces2Surfaces ) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection1`` 
    
    :param reverseDirection1: 
    :type reverseDirection1: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseDirection2: bool = ...
    """
    Returns or sets  the reverse direction2 (used only for Face2Lines, and Faces2Surfaces) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection2`` 
    
    :param reverseDirection2: 
    :type reverseDirection2: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseDirection3: bool = ...
    """
    Returns or sets  the reverse direction3 (used only for FacesBetweenSurfacesSurface) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection3`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection3`` 
    
    :param reverseDirection3: 
    :type reverseDirection3: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SelectCSYSFace: NXOpen.SelectNXObject = ...
    """
    Returns  the select csysface (only used for: SpecifyCSYS) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCSYSFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectLine1: NXOpen.SelectNXObject = ...
    """
    Returns  the select line1 (replaced by SelectReference1 in NX8.  
    
    5) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLine1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectLine2: NXOpen.SelectNXObject = ...
    """
    Returns  the select line2 (replaced by SelectReference2 in NX8.  
    
    5) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLine2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectReference1: NXOpen.SelectNXObject = ...
    """
    Returns  the reference1 (used only for Face2Lines, Faces2Surfaces, and FacesBetweenSurfacesSurface) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectReference1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectReference2: NXOpen.SelectNXObject = ...
    """
    Returns  the reference2 (used only for Face2Lines, Faces2Surfaces, and FacesBetweenSurfacesSurface) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectReference2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectReference3: NXOpen.SelectNXObject = ...
    """
    Returns  the reference3  (used only for FacesBetweenSurfacesSurface)  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectReference3`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectTargetFace: NXOpen.SelectNXObject = ...
    """
    Returns  the select target face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectTargetFaces: NXOpen.SelectNXObjectList = ...
    """
    Returns  the target faces (used only for: Faces2Surfaces, FacesBetweenSurfacesSurface, and FacesCentered) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SketchBlock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the sketch block.  
    
    Users can specify the Cutout using a single sketch. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``SketchBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: Cutout2Builder = ...  # unknown typename


class StandardPartFrameworkBuilderCreationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardPartFrameworkBuilderCreationType():
    """
    Indicates the creation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Creation", "In creation"
       "Adoption", "In adoption"
    """
    Creation = 0  # StandardPartFrameworkBuilderCreationTypeMemberType
    Adoption = 1  # StandardPartFrameworkBuilderCreationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardPartFrameworkBuilderSmartRuleStageMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardPartFrameworkBuilderSmartRuleStage():
    """
    Indicates the stage of the smart rule. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PreUpdate", "In pre-update stage"
       "PostUpdate", "In post-update stage"
    """
    PreUpdate = 0  # StandardPartFrameworkBuilderSmartRuleStageMemberType
    PostUpdate = 1  # StandardPartFrameworkBuilderSmartRuleStageMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardPartFrameworkBuilder(NXOpen.Builder):
    """
    Represents the standard part framework builder to add or edit ship standard part.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateStandardPartFrameworkBuilder`
    
    Default values.
    
    =============================  =========================================
    Property                       Value
    =============================  =========================================
    Thickness.Value (deprecated)   5 (millimeters part), 0.02 (inches part) 
    =============================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class CreationType():
        """
        Indicates the creation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Creation", "In creation"
           "Adoption", "In adoption"
        """
        Creation = 0  # StandardPartFrameworkBuilderCreationTypeMemberType
        Adoption = 1  # StandardPartFrameworkBuilderCreationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SmartRuleStage():
        """
        Indicates the stage of the smart rule. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PreUpdate", "In pre-update stage"
           "PostUpdate", "In post-update stage"
        """
        PreUpdate = 0  # StandardPartFrameworkBuilderSmartRuleStageMemberType
        PostUpdate = 1  # StandardPartFrameworkBuilderSmartRuleStageMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetView(self) -> None:
        """
        Sets the current view normal to the main plane, which is the base plane to construct the primary
        sketch in the template part.  
        
        If there is no sketch found, nothing will be done.
        
        Signature ``SetView()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def GetStandardPartName(self, bFullName: bool) -> str:
        """
        Returns the default name of the added standard part name 
        
        Signature ``GetStandardPartName(bFullName)`` 
        
        :param bFullName: 
        :type bFullName: bool 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetModelFile(self) -> str:
        """
        Retrieves the model file name from the registration spread sheet.  
        
        Signature ``GetModelFile()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDataFile(self, updateConfiguration: bool) -> None:
        """
        Retrieves the data file name from the registration spread sheet.  
        
        Signature ``GetDataFile(updateConfiguration)`` 
        
        :param updateConfiguration:  Whether to update the selection configuration  
        :type updateConfiguration: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ModifySpreadsheetData(self, strParamName: 'list[str]', strParamValue: 'list[str]') -> None:
        """
        Modifies specific parameter values without change parameter statuses.  
        
        This could be used to apply
        smart rule result.
        
        Signature ``ModifySpreadsheetData(strParamName, strParamValue)`` 
        
        :param strParamName: 
        :type strParamName: list of str 
        :param strParamValue: 
        :type strParamValue: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateSpreadsheetData(self, strParamName: 'list[str]', strParamValue: 'list[str]', pnParamStatus: 'list[int]') -> None:
        """
        Updates the parameter values which are defined in the parameter spreadsheet.  
        
        It also updates the standard
        parts.  
        
        Signature ``UpdateSpreadsheetData(strParamName, strParamValue, pnParamStatus)`` 
        
        :param strParamName: 
        :type strParamName: list of str 
        :param strParamValue: 
        :type strParamValue: list of str 
        :param pnParamStatus: 
        :type pnParamStatus: list of int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateModel(self) -> None:
        """
        Updates all standard parts
        
        Signature ``UpdateModel()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def AddStandardPart(self) -> None:
        """
        Adds a standard part into the assembly context, restores the broken wave links and renames the standard
        part when all external references are defined.  
        
        Signature ``AddStandardPart()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def RunSmartRule(self, pItemBuilder: StandardPartItemBuilder, stage: StandardPartFrameworkBuilderSmartRuleStage) -> tuple:
        """
        Runs the smart rule engine to get the inference result.  
        
        Signature ``RunSmartRule(pItemBuilder, stage)`` 
        
        :param pItemBuilder: 
        :type pItemBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        :param stage: 
        :type stage: :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilderSmartRuleStage` 
        :returns: a tuple 
        :rtype: A tuple consisting of (ppStrParamName, ppStrParamValue, ppStrParamDescription). ppStrParamName is a list of str. ppStrParamValue is a list of str. ppStrParamDescription is a list of str. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CheckSpreadsheetInput(self, pItemBuilder: StandardPartItemBuilder) -> tuple:
        """
        Looks for the parameter values that are owned by reference geometeries(Attributes) and/or
        template parts(attributes or expressions) and used as inputs to look for the parameter values
        in spreadsheet.  
        
        Signature ``CheckSpreadsheetInput(pItemBuilder)`` 
        
        :param pItemBuilder: 
        :type pItemBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        :returns: a tuple 
        :rtype: A tuple consisting of (ppStrParamName, ppStrParamValue). ppStrParamName is a list of str. ppStrParamValue is a list of str. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def EndRunSmartRule(self, pItemBuilder: StandardPartItemBuilder) -> None:
        """
        End run the smart rules.  
        
        Signature ``EndRunSmartRule(pItemBuilder)`` 
        
        :param pItemBuilder: 
        :type pItemBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ApplySmartRuleResult(self, pStrParamName: 'list[str]', pStrParamValue: 'list[str]') -> None:
        """
        Applies the smart rule results to the spreadsheet data block.  
        
        Signature ``ApplySmartRuleResult(pStrParamName, pStrParamValue)`` 
        
        :param pStrParamName: 
        :type pStrParamName: list of str 
        :param pStrParamValue: 
        :type pStrParamValue: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def RemoveInstance(self, itemBuilder: StandardPartItemBuilder) -> None:
        """
        Removes the standard part instance.  
        
        Signature ``RemoveInstance(itemBuilder)`` 
        
        :param itemBuilder: 
        :type itemBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def FlipThicknessDirection(self, bUpdateModel: bool) -> None:
        """
        Flips the standard part thickness direction.  
        
        If bUpdateModel is true, the model will be updated.
        If it is false, the thickness direction will be flipped but the model will not be updated.
        
        Signature ``FlipThicknessDirection(bUpdateModel)`` 
        
        :param bUpdateModel: 
        :type bUpdateModel: bool 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.0.3
           Use :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilder`.ModifySpreadSheetData() instead.
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateThickness(self, bUpdateModel: bool) -> None:
        """
        Updates the user input thickness to the standard parts.  
        
        If bUpdateModel is true, the model will be updated. 
        If it is false, the thickness value will be changed but the model will not be updated. 
        
        Signature ``UpdateThickness(bUpdateModel)`` 
        
        :param bUpdateModel: 
        :type bUpdateModel: bool 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.0.3
           Use :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilder`.ModifySpreadSheetData() instead.
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CreateStandardPartItem(self, refBuilder: StandardPartItemBuilder) -> StandardPartItemBuilder:
        """
        Creates a new StandardPartItemBuilder and intialize the builder with data from the reference builder.  
        
        Signature ``CreateStandardPartItem(refBuilder)`` 
        
        :param refBuilder: 
        :type refBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def PostUpdate(self) -> None:
        """
        Does the final check to finish the process of updating standar parts.  
        
        Signature ``PostUpdate()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetRuleInputCache(self) -> None:
        """
        Resets rule trigger source cache so the rule trigger evaluation can start from original point.  
        
        Signature ``ResetRuleInputCache()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CheckInterference(self) -> None:
        """
        Checks the clearance between the standard parts and the other components in current assembly.  
        
        There are two types of interference to be checked. 1) Interference between standard part and
        other componenets, and 2) interference between standard part and cutouts.
        
        Signature ``CheckInterference()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ResetPartIndex(self) -> None:
        """
        Resets the standard part index so that the next standard part would be added with the index in its name starting from 1.  
        
        Signature ``ResetPartIndex()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetCurrentStandardPartItem(self, pCurItemBuilder: StandardPartItemBuilder) -> None:
        """
        Sets the current standard part item that is edited.  
        
        This is useful if standard part framework works in non-group
        mode.
        
        Signature ``SetCurrentStandardPartItem(pCurItemBuilder)`` 
        
        :param pCurItemBuilder: 
        :type pCurItemBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateThicknessDirection(self, bUpdateModel: bool) -> None:
        """
        Updates the standard part thickness direction.  
        
        If bUpdateModel is true, the model will be updated.
        If it is false, the thickness direction will be flipped but the model will not be updated.
        
        Signature ``UpdateThicknessDirection(bUpdateModel)`` 
        
        :param bUpdateModel: 
        :type bUpdateModel: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateSpreadsheetDataNoUpdate(self, strParamName: 'list[str]', strParamValue: 'list[str]', pnParamStatus: 'list[int]') -> None:
        """
        Updates the parameter values which are defined in the parameter spreadsheet but not update the standard
        parts.  
        
        Signature ``UpdateSpreadsheetDataNoUpdate(strParamName, strParamValue, pnParamStatus)`` 
        
        :param strParamName: 
        :type strParamName: list of str 
        :param strParamValue: 
        :type strParamValue: list of str 
        :param pnParamStatus: 
        :type pnParamStatus: list of int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CopyFromWeldCharacteristics(self, stdPartItemBuilder: StandardPartItemBuilder) -> None:
        """
        Copies the weld characteristics from the specific standard part item builder.  
        
        Signature ``CopyFromWeldCharacteristics(stdPartItemBuilder)`` 
        
        :param stdPartItemBuilder: 
        :type stdPartItemBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CopyToWeldCharacteristics(self, stdPartItemBuilder: StandardPartItemBuilder) -> None:
        """
        Copies the weld characteristics to the specific standard part item builder.  
        
        Signature ``CopyToWeldCharacteristics(stdPartItemBuilder)`` 
        
        :param stdPartItemBuilder: 
        :type stdPartItemBuilder: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetStandardPartVersion(self, standardPartVersion: float) -> None:
        """
        Set the standard part version.  
        
        Signature ``SetStandardPartVersion(standardPartVersion)`` 
        
        :param standardPartVersion: 
        :type standardPartVersion: float 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateShipNames(self, shipNamesType: ShipnamesBuilderType) -> None:
        """
        Update Ship Names builder when change part category.  
        
        Signature ``UpdateShipNames(shipNamesType)`` 
        
        :param shipNamesType: 
        :type shipNamesType: :py:class:`NXOpen.Features.ShipDesign.ShipnamesBuilderType` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    ConfigAttribute: str = ...
    """
    Returns or sets  
    the configure attribute,  which is read from the design environment by the settings in 
    the configuration XML file.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigAttribute`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConfigAttribute`` 
    
    :param strConfigAttr: 
    :type strConfigAttr: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    FirstCompartment: str = ...
    """
    Returns or sets  the first compartment option.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstCompartment`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstCompartment`` 
    
    :param firstOption: 
    :type firstOption: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ManufacturingStock: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock builder that holds the manufacturing data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PartCategory: str = ...
    """
    Returns or sets  the part category, which is defined in registration file.  
    
    The typical standard part types include stiffener end bracket,
    collar plate, tripping bracket, flat bar etc. 
    
    <hr>
    
    Getter Method
    
    Signature ``PartCategory`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartCategory`` 
    
    :param partType: 
    :type partType: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    PartCreationType: StandardPartFrameworkBuilderCreationType = ...
    """
    Returns or sets  the creation type.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartCreationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilderCreationType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartCreationType`` 
    
    :param creationType: 
    :type creationType: :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilderCreationType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    PartSubType: str = ...
    """
    Returns or sets  the part sub type, which is the sub category of sub type.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartSubType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartSubType`` 
    
    :param partLeafType: 
    :type partLeafType: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    PartType: str = ...
    """
    Returns or sets  the part type, which is the sub category of part type.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartType`` 
    
    :param partSubType: 
    :type partSubType: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the option whether to reverse direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX8.0.3
       Removed with no replacement
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirectionOption: 
    :type reverseDirectionOption: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX8.0.3
       Use :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilder`.ModifySpreadSheetData() instead.
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SecondCompartment: str = ...
    """
    Returns or sets  the second compartment option.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondCompartment`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondCompartment`` 
    
    :param secondOption: 
    :type secondOption: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the Standard Parts created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    StandardPartGroupOption: bool = ...
    """
    Returns or sets  the option whether to group multiple standard parts together to share the same parameters during the update when editing.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPartGroupOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardPartGroupOption`` 
    
    :param stdPartGroupOption: 
    :type stdPartGroupOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    StandardPartItem: StandardPartItemBuilder = ...
    """
    Returns  the standard part item, which is the builder of the selection item.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPartItem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StandardPartList: StandardPartItemBuilderList = ...
    """
    Returns  the standard part list, which supports to add more than one standard part at one time.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPartList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the standard part thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX8.0.3
       Removed with no replacement
    
    License requirements: None.
    """
    ThicknessDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  the option whether to change thickness direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessDirection`` 
    
    :param thicknessDirectionOption: 
    :type thicknessDirectionOption: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    WeldCharacteristics: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the weld characteristics.  
    
    <hr>
    
    Getter Method
    
    Signature ``WeldCharacteristics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: StandardPartFrameworkBuilder = ...  # unknown typename


class OrientationPointMethodsBuilderPointMethodTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationPointMethodsBuilderPointMethodTypes():
    """
    Settings to indicate how the boundary is defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ByPoint", "The boundary is defined by a location on the landing curve closest to a specified point."
       "ByDistance", "The boundary is defined by a distance from a reference object."
       "FromStart", "The boundary is defined by a distance from the start of the landing curve."
       "FromEnd", "The boundary is defined by a distance from the end of the landing curve."
    """
    ByPoint = 0  # OrientationPointMethodsBuilderPointMethodTypesMemberType
    ByDistance = 1  # OrientationPointMethodsBuilderPointMethodTypesMemberType
    FromStart = 2  # OrientationPointMethodsBuilderPointMethodTypesMemberType
    FromEnd = 3  # OrientationPointMethodsBuilderPointMethodTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationPointMethodsBuilderMeasureAlongTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationPointMethodsBuilderMeasureAlongTypes():
    """
    Settings to indicate how the distance is measured. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", "The distance is measured along the landing curve."
       "Axis", "The distance is measured along the orthogonal direction closest to the landing curve tangent direction."
    """
    Curve = 0  # OrientationPointMethodsBuilderMeasureAlongTypesMemberType
    Axis = 1  # OrientationPointMethodsBuilderMeasureAlongTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationPointMethodsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class is used to define the boundary of the regions when definining the orientation of a profile.  
    
    .. versionadded:: NX9.0.0
    """
    
    class PointMethodTypes():
        """
        Settings to indicate how the boundary is defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ByPoint", "The boundary is defined by a location on the landing curve closest to a specified point."
           "ByDistance", "The boundary is defined by a distance from a reference object."
           "FromStart", "The boundary is defined by a distance from the start of the landing curve."
           "FromEnd", "The boundary is defined by a distance from the end of the landing curve."
        """
        ByPoint = 0  # OrientationPointMethodsBuilderPointMethodTypesMemberType
        ByDistance = 1  # OrientationPointMethodsBuilderPointMethodTypesMemberType
        FromStart = 2  # OrientationPointMethodsBuilderPointMethodTypesMemberType
        FromEnd = 3  # OrientationPointMethodsBuilderPointMethodTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeasureAlongTypes():
        """
        Settings to indicate how the distance is measured. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", "The distance is measured along the landing curve."
           "Axis", "The distance is measured along the orthogonal direction closest to the landing curve tangent direction."
        """
        Curve = 0  # OrientationPointMethodsBuilderMeasureAlongTypesMemberType
        Axis = 1  # OrientationPointMethodsBuilderMeasureAlongTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Distance: NXOpen.Expression = ...
    """
    Returns  the distance used to determine the boundary of the region.  
    
    Only used when PointMethod is
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.ByDistance <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`,
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.FromStart <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`, or
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.FromEnd <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MeasureAlong: OrientationPointMethodsBuilderMeasureAlongTypes = ...
    """
    Returns or sets  the indication of how to measure the distance used to determine the boundary of the region.  
    
    Only used when PointMethod is
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.ByDistance <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`,
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.FromStart <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`, or
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.FromEnd <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureAlong`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationPointMethodsBuilderMeasureAlongTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureAlong`` 
    
    :param measureAlong: 
    :type measureAlong: :py:class:`NXOpen.Features.ShipDesign.OrientationPointMethodsBuilderMeasureAlongTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    PointMethod: OrientationPointMethodsBuilderPointMethodTypes = ...
    """
    Returns or sets  the method used to define the boundary.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointMethod`` 
    
    :param pointMethod: 
    :type pointMethod: :py:class:`NXOpen.Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Reference: NXOpen.SelectNXObject = ...
    """
    Returns  the object used to measure the distance from to determine the boundary of the region.  
    
    Only used when PointMethod is 
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.ByDistance <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Reference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SpecifyPoint: NXOpen.Point = ...
    """
    Returns or sets  the point used to determine the boundary of the region.  
    
    Only used when PointMethod is 
    :py:class:`Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes.ByPoint <Features.ShipDesign.OrientationPointMethodsBuilderPointMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyPoint`` 
    
    :param specifyPoint: 
    :type specifyPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: OrientationPointMethodsBuilder = ...  # unknown typename


class MarkingLineDesign(NXOpen.Features.Feature):
    """
    Represents a marking line feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.MarkingLineDesignBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: MarkingLineDesign = ...  # unknown typename


class CollarPlateBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.CollarPlate` builder.  
    
    This builder is used to create and edit collar plate feature. The collar plate feature can be created from
    a profile cutout feature.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCollarPlateBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def UpdateCollarPlateSizeInformation(self) -> None:
        """
        Updates collar plate size from the context information.  
        
        The collar plate size depends on the profile cutout size. 
        
        Signature ``UpdateCollarPlateSizeInformation()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance (degrees)  
    
    The angular tolerance is used for:
    
      * collar plate placement orign and orientation evaluation
      * collar plate geometry construction
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance (part units)  
    
    The distance tolerance is used for:
    
      * collar plate placement orign and orientation evaluation
      * collar plate geometry construction
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    InstallDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  the install direction.  
    
    The install direction defines which side (molding face side or opposite molding face side) the collar plate is attached to the plate. 
    
    <hr>
    
    Getter Method
    
    Signature ``InstallDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstallDirection`` 
    
    :param installDirection: 
    :type installDirection: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ManufacturingStock: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock.  
    
    The manufacturing stock defines data that is to be applied to the collar plate.
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ProfileCutout: NXOpen.ScCollector = ...
    """
    Returns  the profile cutout.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileCutout`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SectionData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the section data.  
    
    The section data defines the shape of the collar plate and expressions to control the size of the collar plate. 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the ship name.  
    
    The ship name is used to assign name to the collar plate.
    
    It is only used in Ship Structure Basic Design Application.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    WeldCharacteristics: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the weld characteristics.  
    
    The weld characteristics defines data that is to be applied to the collar plate weld edges.
    
    <hr>
    
    Getter Method
    
    Signature ``WeldCharacteristics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: CollarPlateBuilder = ...  # unknown typename


class ShipFeatureConverterPartScopeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipFeatureConverterPartScope():
    """
    Settings for the conversion scope 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WorkPart", "convert features in the work part only"
       "WorkPartandComponents", "convert features in wort part and sub-component parts"
    """
    WorkPart = 0  # ShipFeatureConverterPartScopeMemberType
    WorkPartandComponents = 1  # ShipFeatureConverterPartScopeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipFeatureConverter(NXOpen.Builder):
    """
    This class is used to convert/upgrade legacy Ship Design features.  
    
    It currently supports the
    conversion of KF Steel Features into non-KF Steel features.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipFeatureConverter`
    
    Default values.
    
    ========  =========
    Property  Value
    ========  =========
    Scope     WorkPart 
    ========  =========
    
    .. versionadded:: NX7.5.0
    """
    
    class PartScope():
        """
        Settings for the conversion scope 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WorkPart", "convert features in the work part only"
           "WorkPartandComponents", "convert features in wort part and sub-component parts"
        """
        WorkPart = 0  # ShipFeatureConverterPartScopeMemberType
        WorkPartandComponents = 1  # ShipFeatureConverterPartScopeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    NumCandidateFeatures: int = ...
    """
    Returns  the number of candidate features.  
    
    This is only set after committing the converter.   
    
    <hr>
    
    Getter Method
    
    Signature ``NumCandidateFeatures`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    NumConvertedFeatures: int = ...
    """
    Returns  the number of converted features.  
    
    This is only set after committing the converter.   
    
    <hr>
    
    Getter Method
    
    Signature ``NumConvertedFeatures`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Scope: ShipFeatureConverterPartScope = ...
    """
    Returns or sets  the conversion scope 
    
    <hr>
    
    Getter Method
    
    Signature ``Scope`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipFeatureConverterPartScope` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scope`` 
    
    :param scope: 
    :type scope: :py:class:`NXOpen.Features.ShipDesign.ShipFeatureConverterPartScope` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: ShipFeatureConverter = ...  # unknown typename


class SynchronizeDesignViewBuilder(NXOpen.Builder):
    """
    This class is used to synchronize body features from design view to manufacturing view.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSynchronizeDesignViewBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def SynchronizeDesignView(self) -> int:
        """
        Loops through all selected parts and synchronizes body features from design view to manufacturing view.  
        
        Signature ``SynchronizeDesignView()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    DesignElementToSynchronizeDesignView: NXOpen.SelectNXObjectList = ...
    """
    Returns  the design element selection object to be processed in the change of mode processing.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignElementToSynchronizeDesignView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: SynchronizeDesignViewBuilder = ...  # unknown typename


class OrientationRegionItemBuilderOrientationMethodTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationRegionItemBuilderOrientationMethodTypes():
    """
    Settings to indicate how the web orientation is defined for this region. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NormalToSurface", "The web of the profile is aligned normal to the placement surface. Optionally an angle from this normal can be specified."
       "Orthogonal", "The web of the profile is aligned along the closest orthogonal direction to the placement surface normal. Optionally an angle from this direction can be specified."
       "LinearTwist", "The web of the profile moves from a starting orientation to an ending orientation in a linear fashion."
       "CubicTwist", "The web of the profile moves from a starting orientation to an ending orientation in a cubic fashion."
       "AlongVector", "The web of the profile is aligned along the specified vector. Optionally an angle from this direction can be specified."
       "PlanarAtAngle", "The web of the profile is planar with respect to the defined direction. Optionally an angle from this direction can be specified."
    """
    NormalToSurface = 0  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
    Orthogonal = 1  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
    LinearTwist = 2  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
    CubicTwist = 3  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
    AlongVector = 4  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
    PlanarAtAngle = 5  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationRegionItemBuilder(NXOpen.Builder):
    """
    This class defines each region of the orientation.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilder.CreateNewRegion`
    
    .. versionadded:: NX9.0.0
    """
    
    class OrientationMethodTypes():
        """
        Settings to indicate how the web orientation is defined for this region. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NormalToSurface", "The web of the profile is aligned normal to the placement surface. Optionally an angle from this normal can be specified."
           "Orthogonal", "The web of the profile is aligned along the closest orthogonal direction to the placement surface normal. Optionally an angle from this direction can be specified."
           "LinearTwist", "The web of the profile moves from a starting orientation to an ending orientation in a linear fashion."
           "CubicTwist", "The web of the profile moves from a starting orientation to an ending orientation in a cubic fashion."
           "AlongVector", "The web of the profile is aligned along the specified vector. Optionally an angle from this direction can be specified."
           "PlanarAtAngle", "The web of the profile is planar with respect to the defined direction. Optionally an angle from this direction can be specified."
        """
        NormalToSurface = 0  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
        Orthogonal = 1  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
        LinearTwist = 2  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
        CubicTwist = 3  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
        AlongVector = 4  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
        PlanarAtAngle = 5  # OrientationRegionItemBuilderOrientationMethodTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleMethods: OrientationAngleMethodsBuilder = ...
    """
    Returns  the angle definition for the region's orientation.  
    
    Only used when OrientationMethod is
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.NormalToSurface <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`,
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.Orthogonal <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`,
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.AlongVector <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`, or
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.PlanarAtAngle <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleMethods`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationAngleMethodsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EndAngleMethods: OrientationAngleMethodsBuilder = ...
    """
    Returns  the angle definition for the end of this region's orientation.  
    
    Only used when OrientationMethod is
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.LinearTwist <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`, of
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.CubicTwist <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndAngleMethods`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationAngleMethodsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EndPointMethods: OrientationPointMethodsBuilder = ...
    """
    Returns  the boundary definition at the end of this region.  
    
    Note this is NULL for the last region. The object output is the same as the start of the following region. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPointMethods`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationPointMethodsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OrientationMethod: OrientationRegionItemBuilderOrientationMethodTypes = ...
    """
    Returns or sets  the orientation method used to define the direction of the web for this region.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationMethod`` 
    
    :param orientationMethod: 
    :type orientationMethod: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    StartAngleMethods: OrientationAngleMethodsBuilder = ...
    """
    Returns  the angle definition for the start of this region's orientation.  
    
    Only used when OrientationMethod is
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.LinearTwist <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`, of
    :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.CubicTwist <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartAngleMethods`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationAngleMethodsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StartPointMethods: OrientationPointMethodsBuilder = ...
    """
    Returns  the boundary definition at the start of this region.  
    
    Note this is NULL for the first region. The object output is the same as the end of the previous region. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPointMethods`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationPointMethodsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: OrientationRegionItemBuilder = ...  # unknown typename


class ShellTemplate(NXOpen.Features.BodyFeature):
    """
    Represents a shell template feature.  
    
    The template is made up of a grid of
    sheets, or thin solids, that would physically sit on the floor and the ship 
    shell (typically the hull) would be placed on top of the templates to measure
    and verify the shape of the shell. The physical fixture eventually created in
    the manufacturing environment may be framed inside (or together) with a box. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShellTemplateBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: ShellTemplate = ...  # unknown typename


class PlateDivide(NXOpen.Features.BodyFeature):
    """
    Represents a plate divide feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PlateDivideBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: PlateDivide = ...  # unknown typename


class CopyObjectsBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CopyObjectsBuilderType():
    """
    Type of Source Objects. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Part", " - "
       "Feature", " - "
    """
    Part = 0  # CopyObjectsBuilderTypeMemberType
    Feature = 1  # CopyObjectsBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CopyObjectsBuilderVersionIDMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CopyObjectsBuilderVersionID():
    """
    add version identifiers for the different revisions of the copy objects builder.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Nx11", " - "
       "Nx12", " - "
    """
    Nx11 = 0  # CopyObjectsBuilderVersionIDMemberType
    Nx12 = 1  # CopyObjectsBuilderVersionIDMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CopyObjectsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.CopyObjectsBuilder`  
    It is used in Ship Building Application.  
    
    The operation 
    copies one or more components and pastes them to new parts while re-parenting 
    and maintaining WAVE links
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCopyObjectsBuilder`
    
    Default values.
    
    =================  ======
    Property           Value
    =================  ======
    AngularTolerance   5 
    -----------------  ------
    CopySection        false 
    -----------------  ------
    ObjectType         Part 
    =================  ======
    
    .. versionadded:: NX10.0.0
    """
    
    class Type():
        """
        Type of Source Objects. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Part", " - "
           "Feature", " - "
        """
        Part = 0  # CopyObjectsBuilderTypeMemberType
        Feature = 1  # CopyObjectsBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VersionID():
        """
        add version identifiers for the different revisions of the copy objects builder.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Nx11", " - "
           "Nx12", " - "
        """
        Nx11 = 0  # CopyObjectsBuilderVersionIDMemberType
        Nx12 = 1  # CopyObjectsBuilderVersionIDMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AlgorithmVersion: CopyObjectsBuilderVersionID = ...
    """
    Returns or sets  the value of algorithm version is used to define the version information.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlgorithmVersion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CopyObjectsBuilderVersionID` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlgorithmVersion`` 
    
    :param algorithmVersion: 
    :type algorithmVersion: :py:class:`NXOpen.Features.ShipDesign.CopyObjectsBuilderVersionID` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    AngularTolerance: float = ...
    """
    Returns or sets  the value of angular tolerance is used to define the angular difference from the qualified candidate face / plane normal to source face / plane normal.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    CopyFrom: NXOpen.SelectNXObject = ...
    """
    Returns  the plane where the source objects to be copied from.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyFrom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CopySection: bool = ...
    """
    Returns or sets  the flag is used to define if linear tolerance on UI would be used when matching geometry.  
    
    If false, the linear tolerance will be set with max double value as default. 
    
    <hr>
    
    Getter Method
    
    Signature ``CopySection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CopySection`` 
    
    :param copySection: 
    :type copySection: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    CopyTo: NXOpen.SelectNXObjectList = ...
    """
    Returns  the target objects where the source objects to be copied to.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyTo`` 
    
    :returns:  Component or Plane  
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    InputObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the source input objects to copy.  
    
    <hr>
    
    Getter Method
    
    Signature ``InputObjects`` 
    
    :returns:  Component or Feature  
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LinearTolerance: float = ...
    """
    Returns or sets  the value of linear tolerance is used to define the tolerance between candidate object and transformed source object.  
    
    For example, the distance from the qualified candidate curve to the transformed sample points of source curve shoud be within linear tolerance.
    And for body, it checks the distance from the qualified body's faces and the transformed sample points of source body's corresponding faces. 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ObjectType: CopyObjectsBuilderType = ...
    """
    Returns or sets  the type of objects to copy.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CopyObjectsBuilderType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectType`` 
    
    :param objectType: 
    :type objectType: :py:class:`NXOpen.Features.ShipDesign.CopyObjectsBuilderType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipNames: ShipNamesListBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the copied objects created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names List Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesListBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ShowXmlReport: bool = ...
    """
    Returns or sets  the flag to indicate whether or not to show the xml report on copy basic design part results 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowXmlReport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowXmlReport`` 
    
    :param showXmlReport: 
    :type showXmlReport: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: CopyObjectsBuilder = ...  # unknown typename


class DecksBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.Decks` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateDecksBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    def CreateDeckListItemBuilder(self) -> DeckListItemBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder`.  
        
        Signature ``CreateDeckListItemBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AutoDeckName: str = ...
    """
    Returns or sets  the deck name.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutoDeckName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoDeckName`` 
    
    :param deckName: 
    :type deckName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AutoNameToggle: bool = ...
    """
    Returns or sets  the auto name toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoNameToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoNameToggle`` 
    
    :param autoNameToggle: 
    :type autoNameToggle: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    DeckList: DeckListItemBuilderList = ...
    """
    Returns  the list of :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` defining the decks parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilderList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DecksBuilder = ...  # unknown typename


class StiffenerStockBuilderStockSectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerStockBuilderStockSectionType():
    """
    Type of Stiffener/Edge Reinforcement stock:  Profile or Plate 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Profile", "Profile Stock"
       "Plate", "Plate Stock"
       "BuiltUp", "Built Up Stock"
    """
    Profile = 0  # StiffenerStockBuilderStockSectionTypeMemberType
    Plate = 1  # StiffenerStockBuilderStockSectionTypeMemberType
    BuiltUp = 2  # StiffenerStockBuilderStockSectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerStockBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class defines the Profile or Plate stock for a Stiffener or Edge Reinforcement feature.  
    
    .. versionadded:: NX8.0.0
    """
    
    class StockSectionType():
        """
        Type of Stiffener/Edge Reinforcement stock:  Profile or Plate 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Profile", "Profile Stock"
           "Plate", "Plate Stock"
           "BuiltUp", "Built Up Stock"
        """
        Profile = 0  # StiffenerStockBuilderStockSectionTypeMemberType
        Plate = 1  # StiffenerStockBuilderStockSectionTypeMemberType
        BuiltUp = 2  # StiffenerStockBuilderStockSectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def PopulateAnchorPointList(self) -> None:
        """
        Update anchor points 
        
        Signature ``PopulateAnchorPointList()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableAnchorPointNames(self) -> 'list[str]':
        """
        The list of available anchor points  
        
        Signature ``GetAvailableAnchorPointNames()`` 
        
        :returns:  Array of available anchor point names.
        These names are read from the current reuse sketch   
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnchorPoint: int = ...
    """
    Returns or sets  the anchor point for profiles only.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPoint`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPoint`` 
    
    :param anchorPoint: 
    :type anchorPoint: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    BuiltUpStockData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the built-up stock data 
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpStockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PlateHeight: NXOpen.Expression = ...
    """
    Returns  the plate height 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlateStockData: PlateStockBuilder = ...
    """
    Returns  the plate stock data 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateStockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ProfileStockData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the profile stock data 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileStockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SectionType: StiffenerStockBuilderStockSectionType = ...
    """
    Returns or sets  the section type (profile or plate) 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerStockBuilderStockSectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param sectionType: 
    :type sectionType: :py:class:`NXOpen.Features.ShipDesign.StiffenerStockBuilderStockSectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: StiffenerStockBuilder = ...  # unknown typename


class BulkHeadsBuilderBulkheadTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BulkHeadsBuilderBulkheadType():
    """
    Represents the bulkhead type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Transverse", " - "
       "Longitudinal", " - "
    """
    Transverse = 0  # BulkHeadsBuilderBulkheadTypeMemberType
    Longitudinal = 1  # BulkHeadsBuilderBulkheadTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BulkHeadsBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.BulkHeads` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateBulkHeadsBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class BulkheadType():
        """
        Represents the bulkhead type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Transverse", " - "
           "Longitudinal", " - "
        """
        Transverse = 0  # BulkHeadsBuilderBulkheadTypeMemberType
        Longitudinal = 1  # BulkHeadsBuilderBulkheadTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateBulkheadListItem(self, bulkheadsType: BulkHeadsBuilderBulkheadType) -> BulkHeadListItemBuilder:
        """
        Create a list to generate a single bulkHead.  
        
        Signature ``CreateBulkheadListItem(bulkheadsType)`` 
        
        :param bulkheadsType: 
        :type bulkheadsType: :py:class:`NXOpen.Features.ShipDesign.BulkHeadsBuilderBulkheadType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AutoBulkHeadName: str = ...
    """
    Returns or sets  the bulkHead name.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutoBulkHeadName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoBulkHeadName`` 
    
    :param bulkHeadName: 
    :type bulkHeadName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AutoNameToggle: bool = ...
    """
    Returns or sets  the auto name toggle.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutoNameToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoNameToggle`` 
    
    :param autoNameToggle: 
    :type autoNameToggle: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    BulkHeadList: BulkHeadListItemBuilderList = ...
    """
    Returns  the bulkHead list.  
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilderList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Type: BulkHeadsBuilderBulkheadType = ...
    """
    Returns or sets  the bulkhead type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BulkHeadsBuilderBulkheadType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.BulkHeadsBuilderBulkheadType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: BulkHeadsBuilder = ...  # unknown typename


class EndCutBuilderSelectionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndCutBuilderSelectionTypes():
    """
    This enum defines the Placement Face and Placement Edge Selection Type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FacesWithAttributes", "If this Selection Type is set, just faces need to be specifed and placement edges will be inferred automatically.   
    
    All faces specified as placement faces must have valid attributes that identify it as a valid face for Endcuts.
    
    "
       "FaceAndEdge", "If this Selection Type is set, then a single pair of a Face (Placement Face) and an edge(Placement Edge) needs to be specified."
    """
    FacesWithAttributes = 0  # EndCutBuilderSelectionTypesMemberType
    FaceAndEdge = 1  # EndCutBuilderSelectionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndCutBuilderLimitTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndCutBuilderLimitTypes():
    """
    This enum defines the different ways users can trim the ends of a profile or a plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Value", "If this Limit Type is set, the values of Tilt Angle and Shear Angle expressions will be used."
       "Plane", "If this Limit Type is set, a Plane needs to be specified and the Tilt and Shear angles will be inferred from the intersection of Datum Plane with the body on which EndCut will be applied."
       "NeatTrim", "If this Limit Type is set, a datum plane feature, a face or a profile/plate body needs to be selected and the endcut will be trimmed to the selected geometry."
    """
    Value = 0  # EndCutBuilderLimitTypesMemberType
    Plane = 1  # EndCutBuilderLimitTypesMemberType
    NeatTrim = 2  # EndCutBuilderLimitTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndCutBuilderDraftTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndCutBuilderDraftTypes():
    """
    This enum defines the types of draft to be applied. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Trim", "If this Draft Type is set, the EndCut face will split and the left side face will be tapered."
       "Extend", "If this Draft Type is set, the EndCut face will split and the right side face will be tapered."
    """
    Trim = 0  # EndCutBuilderDraftTypesMemberType
    Extend = 1  # EndCutBuilderDraftTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndCutBuilderConnectionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndCutBuilderConnectionTypes():
    """
    This enum defines the different ways a limiting geometry can connect to the endcut face. This value can be used in rules to control the
    available section types for the flange, web or toe cuts. These values are applicable only when the Limit Type is NeatTrim. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Connected", "If this Connection Type is set, the offset parameter will be ignored."
       "FlangeFree", "If this Connection Type is set, the offset parameter will be ignored."
       "Sniped", "If this Connection Type is set, the offset parameter can be used."
    """
    Connected = 0  # EndCutBuilderConnectionTypesMemberType
    FlangeFree = 1  # EndCutBuilderConnectionTypesMemberType
    Sniped = 2  # EndCutBuilderConnectionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndCutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.EndCut` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateEndCutBuilder`
    
    Default values.
    
    ==================  ======================================
    Property            Value
    ==================  ======================================
    ConnectionType      Connected 
    ------------------  --------------------------------------
    DraftAngle.Value    0 
    ------------------  --------------------------------------
    DraftOffset.Value   0 (millimeters part), 0 (inches part) 
    ------------------  --------------------------------------
    DraftType           Trim 
    ------------------  --------------------------------------
    LimitType           Value 
    ------------------  --------------------------------------
    Offset.Value        0 (millimeters part), 0 (inches part) 
    ------------------  --------------------------------------
    SelectionType       FacesWithAttributes 
    ------------------  --------------------------------------
    ShearAngle.Value    0 
    ------------------  --------------------------------------
    TiltAngle.Value     0 
    ==================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class SelectionTypes():
        """
        This enum defines the Placement Face and Placement Edge Selection Type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FacesWithAttributes", "If this Selection Type is set, just faces need to be specifed and placement edges will be inferred automatically.   
        
        All faces specified as placement faces must have valid attributes that identify it as a valid face for Endcuts.
        
        "
           "FaceAndEdge", "If this Selection Type is set, then a single pair of a Face (Placement Face) and an edge(Placement Edge) needs to be specified."
        """
        FacesWithAttributes = 0  # EndCutBuilderSelectionTypesMemberType
        FaceAndEdge = 1  # EndCutBuilderSelectionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LimitTypes():
        """
        This enum defines the different ways users can trim the ends of a profile or a plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Value", "If this Limit Type is set, the values of Tilt Angle and Shear Angle expressions will be used."
           "Plane", "If this Limit Type is set, a Plane needs to be specified and the Tilt and Shear angles will be inferred from the intersection of Datum Plane with the body on which EndCut will be applied."
           "NeatTrim", "If this Limit Type is set, a datum plane feature, a face or a profile/plate body needs to be selected and the endcut will be trimmed to the selected geometry."
        """
        Value = 0  # EndCutBuilderLimitTypesMemberType
        Plane = 1  # EndCutBuilderLimitTypesMemberType
        NeatTrim = 2  # EndCutBuilderLimitTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DraftTypes():
        """
        This enum defines the types of draft to be applied. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Trim", "If this Draft Type is set, the EndCut face will split and the left side face will be tapered."
           "Extend", "If this Draft Type is set, the EndCut face will split and the right side face will be tapered."
        """
        Trim = 0  # EndCutBuilderDraftTypesMemberType
        Extend = 1  # EndCutBuilderDraftTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ConnectionTypes():
        """
        This enum defines the different ways a limiting geometry can connect to the endcut face. This value can be used in rules to control the
        available section types for the flange, web or toe cuts. These values are applicable only when the Limit Type is NeatTrim. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Connected", "If this Connection Type is set, the offset parameter will be ignored."
           "FlangeFree", "If this Connection Type is set, the offset parameter will be ignored."
           "Sniped", "If this Connection Type is set, the offset parameter can be used."
        """
        Connected = 0  # EndCutBuilderConnectionTypesMemberType
        FlangeFree = 1  # EndCutBuilderConnectionTypesMemberType
        Sniped = 2  # EndCutBuilderConnectionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InheritParametersFromEndcutFace(self, endcutFace: NXOpen.Face) -> None:
        """
        Copy the parameters from the endcut face to this endcut.  
        
        The input face must belong to an endcut feature
        and should have all the attributes. All the builder parameters will be replaced with copies of parameters
        from the input face. If any change is made after this call, the copied parameter value will be overwritten.
        
        Signature ``InheritParametersFromEndcutFace(endcutFace)`` 
        
        :param endcutFace: 
        :type endcutFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    ConnectionType: EndCutBuilderConnectionTypes = ...
    """
    Returns or sets  the connection type.  
    
    If the Limit Type is :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes.NeatTrim <NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes>`, users can define the connection type between the endcut face and the limiting geometry.
    Users can control the available flange, web or toe section types using the connection type in the rules.
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderConnectionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConnectionType`` 
    
    :param connectionType: 
    :type connectionType: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderConnectionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    DraftAngle: NXOpen.Expression = ...
    """
    Returns  the draft angle 
    
    <hr>
    
    Getter Method
    
    Signature ``DraftAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DraftOffset: NXOpen.Expression = ...
    """
    Returns  the draft offset.  
    
    This is the distance from the end of the Placement Edge where the
    Stiffener end face will be split.
    
    <hr>
    
    Getter Method
    
    Signature ``DraftOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DraftType: EndCutBuilderDraftTypes = ...
    """
    Returns or sets  the draft type.  
    
    A partial taper can be applied to the end face of a Stiffener. The end face will be split and the
    Draft Type defines which split face is tapered. 
    
    <hr>
    
    Getter Method
    
    Signature ``DraftType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderDraftTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DraftType`` 
    
    :param draftType: 
    :type draftType: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderDraftTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    FlangeBoundary: NXOpen.SelectBody = ...
    """
    Returns  the flange boundary.  
    
    This input is required when the Limit Type is :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes.NeatTrim <NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes>`.
    Only a single body may be specified and it must have at least one face with MK_TYPE=MOLDINGLINE and one face with MK_TYPE=OPPOSINGMOLDINGLINE attributes.
    This input is applicable only when an endcut is applied to a Builtup stiffener. It will be ignored for all other cases. This input will
    let users define a plate or a stiffener without flange as a limit geometry and specify an edge reinforcement as a flange boundary. Users 
    can also specify a plate as a flange boundary.
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    FlangeSketchData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the flange sketch data.  
    
    Users can specify the EndCut using upto three sketches. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeSketchData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    LimitGeometry: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the limit geometry.  
    
    This input is required when the Limit Type is :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes.NeatTrim <NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes>`.
    Valid types are Plane, Face or a Body. If a Body is specified, it must have at least one face with MK_TYPE=MOLDINGLINE and one face with MK_TYPE=OPPOSINGMOLDINGLINE attributes.
    
    <hr>
    
    Getter Method
    
    Signature ``LimitGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LimitType: EndCutBuilderLimitTypes = ...
    """
    Returns or sets  the limit type.  
    
    The Tilt and Shear angles can be supplied as expressions or can be inferred from a Plane. Users can also limit the ends using a face or a body.
    
    <hr>
    
    Getter Method
    
    Signature ``LimitType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitType`` 
    
    :param limitType: 
    :type limitType: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset.  
    
    The Offset is always applied after the Tilt and Shear Angles. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlacementEdge: NXOpen.SelectEdge = ...
    """
    Returns  the select placement edges.  
    
    This input is only required when the Selection Type is :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes.FaceAndEdge <NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes>`. This edge must belong to the face
    specified as Placement Face.
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlacementFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the select placement faces.  
    
    If the Selection Type is :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes.FacesWithAttributes <NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes>` this list can contain multiple faces
    and each face must be a valid endcut face, i.e. faces with SAW_SIZE and SAW_SIZE2 attributes whose value 
    is same as the Perpendicular EndCut Name defined in the customer defaults. 
    If the Selection Type is :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes.FaceAndEdge <NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes>`, this list must contain a single face.
    Each face will result in a separate EndCut feature. If an existing EndCut feature is queried, it will
    contain a single face in this list. 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the plane.  
    
    If the Limit Type is :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes.Plane <NXOpen.Features.ShipDesign.EndCutBuilderLimitTypes>`, the Tilt and Shear angle will be inferred automatically from this plane. 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SelectionType: EndCutBuilderSelectionTypes = ...
    """
    Returns or sets  the selection type.  
    
    Users can provide a set of faces where the edge can be inferred automatically or specify a single pair of a Face and an edge(Placement Edge).
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param selectionType: 
    :type selectionType: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilderSelectionTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ShearAngle: NXOpen.Expression = ...
    """
    Returns  the shear angle.  
    
    The Shear Angle is always applied after the Tilt Angle. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShearAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TiltAngle: NXOpen.Expression = ...
    """
    Returns  the tilt angle 
    
    <hr>
    
    Getter Method
    
    Signature ``TiltAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ToeSketchData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the toe sketch data.  
    
    Users can specify the EndCut using upto three sketches. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``ToeSketchData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WebSketchData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the web sketch data.  
    
    Users can specify the EndCut using upto three sketches. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``WebSketchData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: EndCutBuilder = ...  # unknown typename


class VentHolesMarking(NXOpen.Features.BodyFeature):
    """
    Represents a vent holes marking feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.VentHolesMarkingBuilder`
    
    .. versionadded:: NX5.0.3
    """
    Null: VentHolesMarking = ...  # unknown typename


class MirrorShipStructureBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorShipStructureBuilderTypes():
    """
    Settings to indicate the selection type of ship feature. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StructureSystem", "The structure system type."
       "Feature", "The feature type which is valid only in ship basic design application."
    """
    StructureSystem = 0  # MirrorShipStructureBuilderTypesMemberType
    Feature = 1  # MirrorShipStructureBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorShipStructureBuilderAppTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorShipStructureBuilderAppTypes():
    """
    Settings to indicate the current application type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ShipDetailDesign", "The ship detail design."
       "ShipBasicDesign", "The ship basic design."
    """
    ShipDetailDesign = 0  # MirrorShipStructureBuilderAppTypesMemberType
    ShipBasicDesign = 1  # MirrorShipStructureBuilderAppTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorShipStructureBuilderMirrorApproachMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorShipStructureBuilderMirrorApproach():
    """
    Represents the approach of mirroring ship standard parts. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateLinkedMirrorBody", "The approach by creating linked mirror body."
       "CopySourceFeaturesAndReparent", "The approach by copy source features and reparenting."
    """
    CreateLinkedMirrorBody = 0  # MirrorShipStructureBuilderMirrorApproachMemberType
    CopySourceFeaturesAndReparent = 1  # MirrorShipStructureBuilderMirrorApproachMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorShipStructureBuilder(NXOpen.Builder):
    """
    Copy the selected parts (components) about the Mirror Plane with full model history and feature data.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateMirrorShipStructureBuilder`
    
    Default values.
    
    ======================  =====
    Property                Value
    ======================  =====
    ReportMirrorResultXML   1 
    ======================  =====
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        Settings to indicate the selection type of ship feature. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StructureSystem", "The structure system type."
           "Feature", "The feature type which is valid only in ship basic design application."
        """
        StructureSystem = 0  # MirrorShipStructureBuilderTypesMemberType
        Feature = 1  # MirrorShipStructureBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AppTypes():
        """
        Settings to indicate the current application type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ShipDetailDesign", "The ship detail design."
           "ShipBasicDesign", "The ship basic design."
        """
        ShipDetailDesign = 0  # MirrorShipStructureBuilderAppTypesMemberType
        ShipBasicDesign = 1  # MirrorShipStructureBuilderAppTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MirrorApproach():
        """
        Represents the approach of mirroring ship standard parts. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateLinkedMirrorBody", "The approach by creating linked mirror body."
           "CopySourceFeaturesAndReparent", "The approach by copy source features and reparenting."
        """
        CreateLinkedMirrorBody = 0  # MirrorShipStructureBuilderMirrorApproachMemberType
        CopySourceFeaturesAndReparent = 1  # MirrorShipStructureBuilderMirrorApproachMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SortComponentByInterPartDependency(self) -> tuple:
        """
        Sort components by inter-part dependency and return dependency circles.  
        
        Signature ``SortComponentByInterPartDependency()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (errorCode, nonBreakableCircles, brokenCircles). errorCode is a int. nonBreakableCircles is a list of str. brokenCircles is a list of str. 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance used for geometry comparison and defined in the customer defaults.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ApplicationType: MirrorShipStructureBuilderAppTypes = ...
    """
    Returns or sets  the application type, which is ship basic design or ship detail design.  
    
    <hr>
    
    Getter Method
    
    Signature ``ApplicationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.MirrorShipStructureBuilderAppTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplicationType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.MirrorShipStructureBuilderAppTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    LinearToleranceFactor: float = ...
    """
    Returns or sets  the linear tolerance factor used for the geometry comparison and defined in the customer default.  
    
    <hr>
    
    Getter Method
    
    Signature ``LinearToleranceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearToleranceFactor`` 
    
    :param linearToleranceFactor: 
    :type linearToleranceFactor: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    MirrorApproachOption: MirrorShipStructureBuilderMirrorApproach = ...
    """
    Returns or sets  an option to determines the approach to copy and mirror ship standard parts.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorApproachOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.MirrorShipStructureBuilderMirrorApproach` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorApproachOption`` 
    
    :param mirrorApproachOption: 
    :type mirrorApproachOption: :py:class:`NXOpen.Features.ShipDesign.MirrorShipStructureBuilderMirrorApproach` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    MirrorPlane: NXOpen.Plane = ...
    """
    Returns or sets  the mirror plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorPlane`` 
    
    :param mirrorPlane: 
    :type mirrorPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OriginalFeatures: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the list of features to Mirror Copy.  
    
    <hr>
    
    Getter Method
    
    Signature ``OriginalFeatures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OriginalParts: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the list of parts (or components) to Mirror Copy.  
    
    <hr>
    
    Getter Method
    
    Signature ``OriginalParts`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReportMirrorResultXML: bool = ...
    """
    Returns or sets  an XML report with mirror process information will be shown if set to true.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReportMirrorResultXML`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReportMirrorResultXML`` 
    
    :param reportMirrorResultXML: 
    :type reportMirrorResultXML: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SelectionType: MirrorShipStructureBuilderTypes = ...
    """
    Returns or sets  the selection type, which is structure system or feature.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.MirrorShipStructureBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.MirrorShipStructureBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    TargetPart: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the target parts or components where the selected features will be mirror copied into.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: MirrorShipStructureBuilder = ...  # unknown typename


class ItFrames(NXOpen.Features.BodyFeature):
    """
    Represents a Inter Transverse Frame feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ItFramesBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: ItFrames = ...  # unknown typename


class StiffenerSystemBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerSystemBuilderTypes():
    """
    Used to specify how the path of the stiffener system is defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curves", " - "
       "Planes", " - "
       "OffsetPlanes", " - "
       "Points", " - "
       "BySupport", " - "
    """
    Curves = 0  # StiffenerSystemBuilderTypesMemberType
    Planes = 1  # StiffenerSystemBuilderTypesMemberType
    OffsetPlanes = 2  # StiffenerSystemBuilderTypesMemberType
    Points = 3  # StiffenerSystemBuilderTypesMemberType
    BySupport = 4  # StiffenerSystemBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerSystemBuilderOffsetSpacingModesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerSystemBuilderOffsetSpacingModes():
    """
    Used to specify if a single or double offset and spacing definition is to be used. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Single", " - "
       "Double", " - "
    """
    Single = 0  # StiffenerSystemBuilderOffsetSpacingModesMemberType
    Double = 1  # StiffenerSystemBuilderOffsetSpacingModesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerSystemBuilderMeasureAlongModesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerSystemBuilderMeasureAlongModes():
    """
    Used to specify how the spacing and offset is to be measured. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AlongSurfaceLength", " - "
       "NormaltoPlane", " - "
       "AlongSurfaceChord", " - "
    """
    AlongSurfaceLength = 0  # StiffenerSystemBuilderMeasureAlongModesMemberType
    NormaltoPlane = 1  # StiffenerSystemBuilderMeasureAlongModesMemberType
    AlongSurfaceChord = 2  # StiffenerSystemBuilderMeasureAlongModesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerSystemBuilderPointMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerSystemBuilderPointMethods():
    """
    Used to specify whether points or planes are being used for the points definition. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Planes", " - "
       "Points", " - "
    """
    Planes = 0  # StiffenerSystemBuilderPointMethodsMemberType
    Points = 1  # StiffenerSystemBuilderPointMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerSystemBuilderEndCutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerSystemBuilderEndCutTypes():
    """
    Used to specify the type of end cut to be used at the extreme ends of the stiffener system. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Connected", " - "
       "FlangeFree", " - "
       "Sniped", " - "
       "SnipedSquare", " - "
    """
    Connected = 0  # StiffenerSystemBuilderEndCutTypesMemberType
    FlangeFree = 1  # StiffenerSystemBuilderEndCutTypesMemberType
    Sniped = 2  # StiffenerSystemBuilderEndCutTypesMemberType
    SnipedSquare = 3  # StiffenerSystemBuilderEndCutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerSystemBuilderOrientationMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerSystemBuilderOrientationMethods():
    """
    Used to specify the type of reference to use for specifying the orientation of the stiffener system. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceNormal", " - "
       "Vector", " - "
    """
    FaceNormal = 0  # StiffenerSystemBuilderOrientationMethodsMemberType
    Vector = 1  # StiffenerSystemBuilderOrientationMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerSystemBuilderMountingMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerSystemBuilderMountingMethods():
    """
    the mounting method offset type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoOffset", "No mounting offset"
       "AlongWeb", "Offset stiffener along web direction"
       "FaceNormal", "Offset stiffener along placement face normal"
    """
    NoOffset = 0  # StiffenerSystemBuilderMountingMethodsMemberType
    AlongWeb = 1  # StiffenerSystemBuilderMountingMethodsMemberType
    FaceNormal = 2  # StiffenerSystemBuilderMountingMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerSystemBuilder(ProfileSystemBuilder):
    """
    This class is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.StiffenerSystem` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateStiffenerSystemBuilder`
    
    Default values.
    
    =====================================================  ==========================================
    Property                                               Value
    =====================================================  ==========================================
    EndCutEnd                                              Connected 
    -----------------------------------------------------  ------------------------------------------
    EndCutStart                                            Connected 
    -----------------------------------------------------  ------------------------------------------
    MeasureAlongMode                                       AlongSurfaceLength 
    -----------------------------------------------------  ------------------------------------------
    MountingMethod                                         NoOffset 
    -----------------------------------------------------  ------------------------------------------
    OffsetDistance.Value                                   0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    OffsetDistanceEnd.Value                                0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    OffsetDistanceStart.Value                              0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    OffsetNumber                                           0 
    -----------------------------------------------------  ------------------------------------------
    OffsetSpacing.Value                                    0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    OffsetSpacingEnd.Value                                 0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    OffsetSpacingMode                                      Single 
    -----------------------------------------------------  ------------------------------------------
    OffsetSpacingStart.Value                               0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    OrientationAngle.Value                                 0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.MeasureAngles             NormaltoCurve 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.ShowSurfaceAngles         0 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.ShowTwistRate             0 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.ShowWebAngles             0 
    -----------------------------------------------------  ------------------------------------------
    OrientationMethod                                      FaceNormal 
    -----------------------------------------------------  ------------------------------------------
    StiffenerBySupportPathData.LengthParams.Value          300 (millimeters part), 100 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StiffenerBySupportPathData.OrientationBySupport        0 
    -----------------------------------------------------  ------------------------------------------
    StockData.AnchorPoint                                  0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateHeight.Value                            50 (millimeters part), 2 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.KnuckleRatio                  3.0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.KnuckleSmoothAngle            3.0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.MaterialOption                0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.RestrictThicknessToMaterial   true 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.ThickenOption                 SingleSided 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.ThicknessSourceOption         List 
    -----------------------------------------------------  ------------------------------------------
    StockData.SectionType                                  Profile 
    -----------------------------------------------------  ------------------------------------------
    Type                                                   Curves 
    =====================================================  ==========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Used to specify how the path of the stiffener system is defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curves", " - "
           "Planes", " - "
           "OffsetPlanes", " - "
           "Points", " - "
           "BySupport", " - "
        """
        Curves = 0  # StiffenerSystemBuilderTypesMemberType
        Planes = 1  # StiffenerSystemBuilderTypesMemberType
        OffsetPlanes = 2  # StiffenerSystemBuilderTypesMemberType
        Points = 3  # StiffenerSystemBuilderTypesMemberType
        BySupport = 4  # StiffenerSystemBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OffsetSpacingModes():
        """
        Used to specify if a single or double offset and spacing definition is to be used. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Single", " - "
           "Double", " - "
        """
        Single = 0  # StiffenerSystemBuilderOffsetSpacingModesMemberType
        Double = 1  # StiffenerSystemBuilderOffsetSpacingModesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeasureAlongModes():
        """
        Used to specify how the spacing and offset is to be measured. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AlongSurfaceLength", " - "
           "NormaltoPlane", " - "
           "AlongSurfaceChord", " - "
        """
        AlongSurfaceLength = 0  # StiffenerSystemBuilderMeasureAlongModesMemberType
        NormaltoPlane = 1  # StiffenerSystemBuilderMeasureAlongModesMemberType
        AlongSurfaceChord = 2  # StiffenerSystemBuilderMeasureAlongModesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PointMethods():
        """
        Used to specify whether points or planes are being used for the points definition. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Planes", " - "
           "Points", " - "
        """
        Planes = 0  # StiffenerSystemBuilderPointMethodsMemberType
        Points = 1  # StiffenerSystemBuilderPointMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndCutTypes():
        """
        Used to specify the type of end cut to be used at the extreme ends of the stiffener system. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Connected", " - "
           "FlangeFree", " - "
           "Sniped", " - "
           "SnipedSquare", " - "
        """
        Connected = 0  # StiffenerSystemBuilderEndCutTypesMemberType
        FlangeFree = 1  # StiffenerSystemBuilderEndCutTypesMemberType
        Sniped = 2  # StiffenerSystemBuilderEndCutTypesMemberType
        SnipedSquare = 3  # StiffenerSystemBuilderEndCutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationMethods():
        """
        Used to specify the type of reference to use for specifying the orientation of the stiffener system. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceNormal", " - "
           "Vector", " - "
        """
        FaceNormal = 0  # StiffenerSystemBuilderOrientationMethodsMemberType
        Vector = 1  # StiffenerSystemBuilderOrientationMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MountingMethods():
        """
        the mounting method offset type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoOffset", "No mounting offset"
           "AlongWeb", "Offset stiffener along web direction"
           "FaceNormal", "Offset stiffener along placement face normal"
        """
        NoOffset = 0  # StiffenerSystemBuilderMountingMethodsMemberType
        AlongWeb = 1  # StiffenerSystemBuilderMountingMethodsMemberType
        FaceNormal = 2  # StiffenerSystemBuilderMountingMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreatePlanePairBuilder(self) -> PlanePairBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PlanePairBuilder` to add another pair of planes to the list.  
        
        Signature ``CreatePlanePairBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PlanePairBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    ApplyFlangeSetback: bool = ...
    """
    Returns or sets  the flange set back option for stiffener by support, which indicates if the flange set back should be applied or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyFlangeSetback`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyFlangeSetback`` 
    
    :param applyFlangeSetback: 
    :type applyFlangeSetback: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ApplyWebSetback: bool = ...
    """
    Returns or sets  the web set back option for stiffener by support, which indicates if the web set back should be applied or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyWebSetback`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyWebSetback`` 
    
    :param applyWebSetback: 
    :type applyWebSetback: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    BuildSolid: bool = ...
    """
    Returns or sets  the indication of whether to build a solid for the stiffener system or just the curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildSolid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BuildSolid`` 
    
    :param buildSolid: 
    :type buildSolid: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ConnectAngle: float = ...
    """
    Returns or sets  the connect angle of stiffener by support in degrees, negative value is not allowed 
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConnectAngle`` 
    
    :param connectAngle: 
    :type connectAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    CreateSeamsAtKnuckles: bool = ...
    """
    Returns or sets  the flag that indicates if seams are to be created or updated at knuckle locations.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSeamsAtKnuckles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSeamsAtKnuckles`` 
    
    :param createSeams: 
    :type createSeams: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Curves: NXOpen.Section = ...
    """
    Returns  the curves selected that define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.Curves <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Curves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndCutEnd: StiffenerSystemBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the end of the complete stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutEnd`` 
    
    :param endCutEnd: 
    :type endCutEnd: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    EndCutStart: StiffenerSystemBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the start of the complete stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutStart`` 
    
    :param endCutStart: 
    :type endCutStart: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    KnuckleLocationTolerance: float = ...
    """
    Returns or sets  the tolerance used to determine when knuckle locations are considered to be the same.  
    
    <hr>
    
    Getter Method
    
    Signature ``KnuckleLocationTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KnuckleLocationTolerance`` 
    
    :param knuckleLocationTolerance: 
    :type knuckleLocationTolerance: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MeasureAlongMode: StiffenerSystemBuilderMeasureAlongModes = ...
    """
    Returns or sets  the method used to measure distances between planes.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureAlongMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMeasureAlongModes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureAlongMode`` 
    
    :param measureAlongMode: 
    :type measureAlongMode: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMeasureAlongModes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MountingMethod: StiffenerSystemBuilderMountingMethods = ...
    """
    Returns or sets  the mounting method 
    
    <hr>
    
    Getter Method
    
    Signature ``MountingMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMountingMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MountingMethod`` 
    
    :param mountingMethod: 
    :type mountingMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMountingMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    OffsetDistance: NXOpen.Expression = ...
    """
    Returns  the distance from the OffsetPlane to generate the first plane.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>` 
    and OffsetSpacing is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes.Single <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OffsetDistanceEnd: NXOpen.Expression = ...
    """
    Returns  the distance from the OffsetPlane to generate the location at the end of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>` 
    and OffsetSpacing is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes.Double <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistanceEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OffsetDistanceStart: NXOpen.Expression = ...
    """
    Returns  the distance from the OffsetPlane to generate the location at the start of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>` 
    and OffsetSpacing is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes.Double <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistanceStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OffsetNumber: int = ...
    """
    Returns or sets  the number of offset planes to generate that define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetNumber`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetNumber`` 
    
    :param number: 
    :type number: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    OffsetPlane: NXOpen.Plane = ...
    """
    Returns or sets  the first plane of the set of offset planes that define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetPlane`` 
    
    :param offsetPlane: 
    :type offsetPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    OffsetSpacing: NXOpen.Expression = ...
    """
    Returns  the distance between generated planes.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>` 
    and OffsetSpacing is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes.Single <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OffsetSpacingEnd: NXOpen.Expression = ...
    """
    Returns  the distance between generated locations at the end of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>` 
    and OffsetSpacing is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes.Double <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetSpacingEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OffsetSpacingMode: StiffenerSystemBuilderOffsetSpacingModes = ...
    """
    Returns or sets  the indication whether spacing of the offset planes is defined at each end of the stiffener system, 
    or if a constant spacing is desired.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetSpacingMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetSpacingMode`` 
    
    :param offsetSpacingMode: 
    :type offsetSpacingMode: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    OffsetSpacingStart: NXOpen.Expression = ...
    """
    Returns  the distance between generated locations at the start of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.OffsetPlanes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>` 
    and OffsetSpacing is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes.Double <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOffsetSpacingModes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetSpacingStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationAngle: NXOpen.Expression = ...
    """
    Returns  the angle at which the stiffener system is placed relative to the reference.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationDefinitionBuilder: OrientationDefinitionBuilder = ...
    """
    Returns  the builder used to define the orientation for the stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationDefinitionBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OrientationMethod: StiffenerSystemBuilderOrientationMethods = ...
    """
    Returns or sets  the method used to define the reference for the orientation angle of stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationMethod`` 
    
    :param orientationMethod: 
    :type orientationMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    OrientationVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector specified for the orientation angle reference.  
    
    Only used when when Method is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods.Vector <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods>`.. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationVector`` 
    
    :param orientationVector: 
    :type orientationVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    PlaneList: PlaneListBuilderList = ...
    """
    Returns  the list of defined planes that define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.Planes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlanePairList: NXOpen.NXObjectList = ...
    """
    Returns  the list of pairs of planes that generate points on the ship structure to define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.Points <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>` 
    and PointMethod is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderPointMethods.Planes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderPointMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``PlanePairList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Planes: NXOpen.SelectNXObjectList = ...
    """
    Returns  the planes selected that define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.Planes <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Planes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PointList: NXOpen.NXObjectList = ...
    """
    Returns  the list of selected or defined points that define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.Points <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`
    and PointMethod is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderPointMethods.Points <NXOpen.Features.ShipDesign.StiffenerSystemBuilderPointMethods>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``PointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PointMethod: StiffenerSystemBuilderPointMethods = ...
    """
    Returns or sets  the method used to define the generated points on the ship structure to define the path of the stiffener system.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes.Points <NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``PointMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderPointMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointMethod`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderPointMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ProjectionDirection: NXOpen.GeometricUtilities.ProjectionOptions = ...
    """
    Returns  the direction used to project the stiffener path object
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectionDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ProjectionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Reverse: bool = ...
    """
    Returns or sets  the indication whether the direction of the stiffener flange should be reversed.  
    
    The default
    direction is based on the ship structure that the stiffener is being built upon. 
    
    <hr>
    
    Getter Method
    
    Signature ``Reverse`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reverse`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the Stiffener Systems created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    ShipStructure: NXOpen.SelectNXObjectList = ...
    """
    Returns  the ship structure upon which to create the stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffenerBySupportPathData: StiffenerBySupportPathBuilder = ...
    """
    Returns  the path data used to define the support information of the stiffener.  
    
    <hr>
    
    Getter Method
    
    Signature ``StiffenerBySupportPathData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StockData: StiffenerStockBuilder = ...
    """
    Returns  the stock data used to define the stock information of the stiffener.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SwitchSide: bool = ...
    """
    Returns or sets  the indication whether the side of the ship structure should be switched.  
    
    The default
    direction is based on the ship structure that the stiffener is being built upon. 
    
    <hr>
    
    Getter Method
    
    Signature ``SwitchSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SwitchSide`` 
    
    :param switchSide: 
    :type switchSide: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Type: StiffenerSystemBuilderTypes = ...
    """
    Returns or sets  the method used to define the path of the stiffener system.  
    
    Four types are supported: curves, planes, offset planes, and points. 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Weld: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the builder used to specify the welding characteristics for the stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Weld`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: StiffenerSystemBuilder = ...  # unknown typename


class CornerCutBuilderCutOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerCutBuilderCutOption():
    """
    Represents the corner cut option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Corner", "Create corner cut on selected corner point."
       "Plate", "Create corner cut for all corner points of the mold face of plate body"
    """
    Corner = 0  # CornerCutBuilderCutOptionMemberType
    Plate = 1  # CornerCutBuilderCutOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerCutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Builder used to create or edit a :py:class:`NXOpen.Features.ShipDesign.CornerCut` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCornerCutBuilder`
    
    Default values.
    
    ==================  ===============================================
    Property            Value
    ==================  ===============================================
    DistanceTolerance   0.0254 (millimeters part), 0.001 (inches part) 
    ==================  ===============================================
    
    .. versionadded:: NX8.5.0
    """
    
    class CutOption():
        """
        Represents the corner cut option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Corner", "Create corner cut on selected corner point."
           "Plate", "Create corner cut for all corner points of the mold face of plate body"
        """
        Corner = 0  # CornerCutBuilderCutOptionMemberType
        Plate = 1  # CornerCutBuilderCutOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CornerList: CornerCutListItemBuilderList = ...
    """
    Returns  the list of corner points.  
    
    <hr>
    
    Getter Method
    
    Signature ``CornerList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CornerPoint: NXOpen.Point = ...
    """
    Returns or sets  the corner point.  
    
    <hr>
    
    Getter Method
    
    Signature ``CornerPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CornerPoint`` 
    
    :param cornerPoint: 
    :type cornerPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ManufacturingInformation: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock builder that holds the manufacturing data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingInformation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    PlacementFace: NXOpen.SelectTaggedObject = ...
    """
    Returns  the placement face from plate system to add corner cuts.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    PlacementType: CornerCutBuilderCutOption = ...
    """
    Returns or sets  the type of corner cut to create.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CornerCutBuilderCutOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param cutOption: 
    :type cutOption: :py:class:`NXOpen.Features.ShipDesign.CornerCutBuilderCutOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    PlateBodyCollector: NXOpen.ScCollector = ...
    """
    Returns  the collector containing the plate bodies that are to have corner cuts added.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateBodyCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Spreadsheet: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the spreadsheet builder.  
    
    Users can specify the Weldout using a single sketch. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``Spreadsheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: CornerCutBuilder = ...  # unknown typename


class MarkingLine(NXOpen.Features.Feature):
    """
    Represents a marking line feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.MarkingLineBuilder`
    
    .. versionadded:: NX8.0.1
    """
    Null: MarkingLine = ...  # unknown typename


class ReverseSplitBuilder(NXOpen.Features.FeatureBuilder):
    """
    This class is used to provide the capability to reverse the split interaction between
    ship structures.  
    
    When committed those structures that are split by the splitting structure
    will now split the splitting structure.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateReverseSplitBuilder`
    
    .. versionadded:: NX8.0.0
    """
    IntersectionSeam: NXOpen.SelectNXObjectList = ...
    """
    Returns  the seam created by an intersection seam feature, and whose behavior is to be reversed.  
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionSeam`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ReverseSplitBuilder = ...  # unknown typename


class SectionViewBuilderPlaneTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionViewBuilderPlaneTypes():
    """
    Settings to indicate the plane type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", " - "
       "Y", " - "
       "Z", " - "
       "UserSpecified", " - "
    """
    X = 0  # SectionViewBuilderPlaneTypesMemberType
    Y = 1  # SectionViewBuilderPlaneTypesMemberType
    Z = 2  # SectionViewBuilderPlaneTypesMemberType
    UserSpecified = 3  # SectionViewBuilderPlaneTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewBuilderDirectionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionViewBuilderDirectionOptions():
    """
    Settings to indicate the view direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fw", " - "
       "Af", " - "
       "In", " - "
       "Ot", " - "
       "P", " - "
       "S", " - "
       "Up", " - "
       "Dn", " - "
    """
    Fw = 0  # SectionViewBuilderDirectionOptionsMemberType
    Af = 1  # SectionViewBuilderDirectionOptionsMemberType
    In = 2  # SectionViewBuilderDirectionOptionsMemberType
    Ot = 3  # SectionViewBuilderDirectionOptionsMemberType
    P = 4  # SectionViewBuilderDirectionOptionsMemberType
    S = 5  # SectionViewBuilderDirectionOptionsMemberType
    Up = 6  # SectionViewBuilderDirectionOptionsMemberType
    Dn = 7  # SectionViewBuilderDirectionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewBuilderSymmetricalStructureOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionViewBuilderSymmetricalStructureOptions():
    """
    Settings to indicate to show symmetrical structure 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Full", "Show full section view of the bulkhead"
       "Port", "Only show port side of the bulkhead section view."
       "Starboard", "Only show starboard side of the bulkhead section view."
    """
    Full = 0  # SectionViewBuilderSymmetricalStructureOptionsMemberType
    Port = 1  # SectionViewBuilderSymmetricalStructureOptionsMemberType
    Starboard = 2  # SectionViewBuilderSymmetricalStructureOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewBuilderSectionRuleOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionViewBuilderSectionRuleOptions():
    """
    Settings to indicate the section rule 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ByRule", " - "
       "SimpleSection", " - "
    """
    ByRule = 0  # SectionViewBuilderSectionRuleOptionsMemberType
    SimpleSection = 1  # SectionViewBuilderSectionRuleOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewBuilder(NXOpen.Builder):
    """
    It represents :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder`.  
    
    The builder is used to create a Ship Section View and returns None. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.SectionDrawingBuilder.CreateSectionViewBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class PlaneTypes():
        """
        Settings to indicate the plane type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", " - "
           "Y", " - "
           "Z", " - "
           "UserSpecified", " - "
        """
        X = 0  # SectionViewBuilderPlaneTypesMemberType
        Y = 1  # SectionViewBuilderPlaneTypesMemberType
        Z = 2  # SectionViewBuilderPlaneTypesMemberType
        UserSpecified = 3  # SectionViewBuilderPlaneTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DirectionOptions():
        """
        Settings to indicate the view direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fw", " - "
           "Af", " - "
           "In", " - "
           "Ot", " - "
           "P", " - "
           "S", " - "
           "Up", " - "
           "Dn", " - "
        """
        Fw = 0  # SectionViewBuilderDirectionOptionsMemberType
        Af = 1  # SectionViewBuilderDirectionOptionsMemberType
        In = 2  # SectionViewBuilderDirectionOptionsMemberType
        Ot = 3  # SectionViewBuilderDirectionOptionsMemberType
        P = 4  # SectionViewBuilderDirectionOptionsMemberType
        S = 5  # SectionViewBuilderDirectionOptionsMemberType
        Up = 6  # SectionViewBuilderDirectionOptionsMemberType
        Dn = 7  # SectionViewBuilderDirectionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SymmetricalStructureOptions():
        """
        Settings to indicate to show symmetrical structure 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Full", "Show full section view of the bulkhead"
           "Port", "Only show port side of the bulkhead section view."
           "Starboard", "Only show starboard side of the bulkhead section view."
        """
        Full = 0  # SectionViewBuilderSymmetricalStructureOptionsMemberType
        Port = 1  # SectionViewBuilderSymmetricalStructureOptionsMemberType
        Starboard = 2  # SectionViewBuilderSymmetricalStructureOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionRuleOptions():
        """
        Settings to indicate the section rule 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ByRule", " - "
           "SimpleSection", " - "
        """
        ByRule = 0  # SectionViewBuilderSectionRuleOptionsMemberType
        SimpleSection = 1  # SectionViewBuilderSectionRuleOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetViewDirection(self) -> SectionViewBuilderDirectionOptions:
        """
        Gets the view direction  
        
        Signature ``GetViewDirection()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderDirectionOptions` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    AdditionalStructures: NXOpen.SelectNXObjectList = ...
    """
    Returns  the additional structures to be sectioned.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdditionalStructures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:class:`Features.ShipDesign.ShipStructureBuilder`.AdditionalStructures() instead.
    
    License requirements: None.
    """
    BackProximity: float = ...
    """
    Returns or sets  the back proximity value  
    
    <hr>
    
    Getter Method
    
    Signature ``BackProximity`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackProximity`` 
    
    :param backProximity: 
    :type backProximity: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DrawingName: str = ...
    """
    Returns or sets  the drawing name 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingName`` 
    
    :param drawingName: 
    :type drawingName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DrawingSheet: DrawingSheetBuilder = ...
    """
    Returns or sets  the sheet on which to create this view.  
    
    The drawing sheet can be a new created drawing sheet or
    an existing drawing sheet. 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingSheet`` 
    
    :param drawingSheet: 
    :type drawingSheet: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DrawingTemplate: DrawingTemplateBuilder = ...
    """
    Returns  the drawing template builder, which represents a :py:class:`NXOpen.Features.ShipDesign.DrawingTemplateBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingTemplate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingTemplateBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    FlipViewDirection: bool = ...
    """
    Returns or sets  the option to specify whether to flip the view direction or not 
    
    <hr>
    
    Getter Method
    
    Signature ``FlipViewDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlipViewDirection`` 
    
    :param flipViewDirection: 
    :type flipViewDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    FrontProximity: float = ...
    """
    Returns or sets  the front proximity value  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontProximity`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontProximity`` 
    
    :param frontProximity: 
    :type frontProximity: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    HiddenObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the hidden object 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:class:`Features.ShipDesign.ShipStructureBuilder`.HiddenObjects() instead.
    
    License requirements: None.
    """
    Offset: float = ...
    """
    Returns or sets  the offset value  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offset: 
    :type offset: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    PlaneType: SectionViewBuilderPlaneTypes = ...
    """
    Returns or sets  the frame type 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderPlaneTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneType`` 
    
    :param frameType: 
    :type frameType: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderPlaneTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionPlane: NXOpen.Plane = ...
    """
    Returns or sets  the section plane 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionPlane`` 
    
    :param sectionPlane: 
    :type sectionPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionPlaneName: str = ...
    """
    Returns or sets  the section plane name 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionPlaneName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionPlaneName`` 
    
    :param sectionPlaneName: 
    :type sectionPlaneName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionRule: SectionViewBuilderSectionRuleOptions = ...
    """
    Returns or sets  the section rule  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionRule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSectionRuleOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionRule`` 
    
    :param sectionRule: 
    :type sectionRule: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSectionRuleOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SelectFrame: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the select frame 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFrame`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SheetScale: float = ...
    """
    Returns or sets  the scale of the sheet.  
    
    The value should be great than zero. 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetScale`` 
    
    :param sheetScale: 
    :type sheetScale: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ShipStructure: ShipStructureBuilder = ...
    """
    Returns  the ship structure builder, which represents a :py:class:`NXOpen.Features.ShipDesign.ShipStructureBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipStructureBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SymmetricalStructure: SectionViewBuilderSymmetricalStructureOptions = ...
    """
    Returns or sets  the symmetrical structure  
    
    <hr>
    
    Getter Method
    
    Signature ``SymmetricalStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSymmetricalStructureOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymmetricalStructure`` 
    
    :param symmetricalStructure: 
    :type symmetricalStructure: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderSymmetricalStructureOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    XPosition: float = ...
    """
    Returns or sets  the ship section view X position 
    
    <hr>
    
    Getter Method
    
    Signature ``XPosition`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XPosition`` 
    
    :param xPosition: 
    :type xPosition: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    YPosition: float = ...
    """
    Returns or sets  the ship section view Y position 
    
    <hr>
    
    Getter Method
    
    Signature ``YPosition`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YPosition`` 
    
    :param yPosition: 
    :type yPosition: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: SectionViewBuilder = ...  # unknown typename


class OrientationAngleMethodsBuilderMethodTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationAngleMethodsBuilderMethodTypes():
    """
    Settings used to determine how the angle is defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angle", "Angle is defined by specifying a constant angle from a reference object."
       "Vector", "Angle is defined by specifying a vector to align with."
       "Aligned", "Angle is the same as the previous or following region."
    """
    Angle = 0  # OrientationAngleMethodsBuilderMethodTypesMemberType
    Vector = 1  # OrientationAngleMethodsBuilderMethodTypesMemberType
    Aligned = 2  # OrientationAngleMethodsBuilderMethodTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationAngleMethodsBuilderAlignAtTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationAngleMethodsBuilderAlignAtTypes():
    """
    Is the angle to be aligned with the region adjacent to start of this region or adjacent to the end of this region. 
    Note the Start setting cannot be used for the first region, and the End setting cannot be used for the last region. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", " - "
       "End", " - "
    """
    Start = 0  # OrientationAngleMethodsBuilderAlignAtTypesMemberType
    End = 1  # OrientationAngleMethodsBuilderAlignAtTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationAngleMethodsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class defines the method of angle definition used in the definition of the region's orientation.  
    
    .. versionadded:: NX9.0.0
    """
    
    class MethodTypes():
        """
        Settings used to determine how the angle is defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angle", "Angle is defined by specifying a constant angle from a reference object."
           "Vector", "Angle is defined by specifying a vector to align with."
           "Aligned", "Angle is the same as the previous or following region."
        """
        Angle = 0  # OrientationAngleMethodsBuilderMethodTypesMemberType
        Vector = 1  # OrientationAngleMethodsBuilderMethodTypesMemberType
        Aligned = 2  # OrientationAngleMethodsBuilderMethodTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AlignAtTypes():
        """
        Is the angle to be aligned with the region adjacent to start of this region or adjacent to the end of this region. 
        Note the Start setting cannot be used for the first region, and the End setting cannot be used for the last region. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Start", " - "
           "End", " - "
        """
        Start = 0  # OrientationAngleMethodsBuilderAlignAtTypesMemberType
        End = 1  # OrientationAngleMethodsBuilderAlignAtTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlignAt: OrientationAngleMethodsBuilderAlignAtTypes = ...
    """
    Returns or sets  the indication if the region should be aligned with the adjacent region at the start of this region, or with the adjacent
    region at the end of this region.  
    
    Only used when :py:meth:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder.OrientationMethodTypes`
    is :py:class:`Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes.PlanarAtAngle <Features.ShipDesign.OrientationRegionItemBuilderOrientationMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignAt`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationAngleMethodsBuilderAlignAtTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignAt`` 
    
    :param alignAt: 
    :type alignAt: :py:class:`NXOpen.Features.ShipDesign.OrientationAngleMethodsBuilderAlignAtTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AlignVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector used to calculate the angle by aligning to this vector.  
    
    Only used when AngleMethod is 
    :py:class:`Features.ShipDesign.OrientationAngleMethodsBuilderMethodTypes.Vector <Features.ShipDesign.OrientationAngleMethodsBuilderMethodTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``AlignVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignVector`` 
    
    :param alignVector: 
    :type alignVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AngleMethod: OrientationAngleMethodsBuilderMethodTypes = ...
    """
    Returns or sets  the method used to calculate the angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationAngleMethodsBuilderMethodTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleMethod`` 
    
    :param angleMethod: 
    :type angleMethod: :py:class:`NXOpen.Features.ShipDesign.OrientationAngleMethodsBuilderMethodTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AngleReference: NXOpen.Plane = ...
    """
    Returns or sets  the object used to measure the angle from.  
    
    Only used when AngleMethod is 
    :py:class:`Features.ShipDesign.OrientationAngleMethodsBuilderMethodTypes.Angle <Features.ShipDesign.OrientationAngleMethodsBuilderMethodTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleReference`` 
    
    :param angleReference: 
    :type angleReference: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    MountingAngle: NXOpen.Expression = ...
    """
    Returns  the constant angle value to rotate from the given vector or reference object.  
    
    <hr>
    
    Getter Method
    
    Signature ``MountingAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: OrientationAngleMethodsBuilder = ...  # unknown typename


class VerifyPenetrationBuilderSelectionDialogTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VerifyPenetrationBuilderSelectionDialogType():
    """
    Represents the selection dialog type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StructureForRequest", " - "
       "RouteForRequest", " - "
       "StructureForVerify", " - "
       "RouteForVerify", " - "
       "CutoutForRequest", " - "
    """
    StructureForRequest = 0  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
    RouteForRequest = 1  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
    StructureForVerify = 2  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
    RouteForVerify = 4  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
    CutoutForRequest = 8  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VerifyPenetrationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.VerifyPenetrationBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.PenetrationRequestCollection.CreateVerifyPenetrationBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class SelectionDialogType():
        """
        Represents the selection dialog type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StructureForRequest", " - "
           "RouteForRequest", " - "
           "StructureForVerify", " - "
           "RouteForVerify", " - "
           "CutoutForRequest", " - "
        """
        StructureForRequest = 0  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
        RouteForRequest = 1  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
        StructureForVerify = 2  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
        RouteForVerify = 4  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
        CutoutForRequest = 8  # VerifyPenetrationBuilderSelectionDialogTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    RoutingObjectCollector: NXOpen.SelectNXObjectList = ...
    """
    Returns  the route object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``RoutingObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectionType: VerifyPenetrationBuilderSelectionDialogType = ...
    """
    Returns or sets  the dialog selection type 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.VerifyPenetrationBuilderSelectionDialogType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param selectionType: 
    :type selectionType: :py:class:`NXOpen.Features.ShipDesign.VerifyPenetrationBuilderSelectionDialogType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    StructurePartCollector: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected parts 
    
    <hr>
    
    Getter Method
    
    Signature ``StructurePartCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: VerifyPenetrationBuilder = ...  # unknown typename


class DeckListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DeckListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DeckListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DeckListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DeckListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DeckListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DeckListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DeckListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DeckListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DeckListItemBuilder, object2: DeckListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DeckListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DeckListItemBuilderList = ...  # unknown typename


class ShipFlatPatternBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipFlatPattern` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipFlatPatternBuilder`
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX8.0.0
       Use :py:class:`NXOpen.Features.ShipDesign.PlatePreparationBuilder` instead.
    """
    
    def RemovePart(self, partName: str) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``RemovePart(partName)`` 
        
        :param partName: 
        :type partName: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_ship_concept ("Ship Concept")
        """
        ...
    
    
    def AddPart(self, partName: str) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``AddPart(partName)`` 
        
        :param partName: 
        :type partName: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_ship_concept ("Ship Concept")
        """
        ...
    
    Length: NXOpen.Expression = ...
    """
    Returns  the length 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ShipFlatPatternBuilder = ...  # unknown typename


class SplitStandardPart(NXOpen.Features.Feature):
    """
    Represents a split standard part feature.  
    
    It is used to split standard part in basic design and detail design. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SplitStandardPartBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: SplitStandardPart = ...  # unknown typename


class StandardPartSCAssist(NXOpen.Features.Feature):
    """
    Represents   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: StandardPartSCAssist = ...  # unknown typename


class TransverseBulkhead(NXOpen.Features.BodyFeature):
    """
    Represents a Transverse Bulkhead feature.  
    
    The Transverse Bulkhead is used to represent
    mostly vertical surface shapes that align with the port to starboard direction of the ship. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.TransverseBulkheadBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: TransverseBulkhead = ...  # unknown typename


class PlateSystem(NXOpen.Features.BodyFeature):
    """
    Represents a Plate System feature.  
    
    This feature is available to generate regression tests
    for the ship basic design application. It should never exist in a customer model. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: PlateSystem = ...  # unknown typename


class SplitStandardPartBuilderToolTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplitStandardPartBuilderToolTypes():
    """
    Represents the split tool types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FacePlane", "Face or plane object."
       "Curve", "Curve"
    """
    FacePlane = 0  # SplitStandardPartBuilderToolTypesMemberType
    Curve = 1  # SplitStandardPartBuilderToolTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplitStandardPartBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SplitStandardPartBuilder`.  
    
    This class is for splitting ship standard part
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSplitStandardPartBuilder`
    
    Default values.
    
    ================================  ===============================================
    Property                          Value
    ================================  ===============================================
    AngularTolerance                  0.5 
    --------------------------------  -----------------------------------------------
    BaseCornerCut.DistanceTolerance   0.0254 (millimeters part), 0.001 (inches part) 
    --------------------------------  -----------------------------------------------
    DistanceTolerance                 0.0254 
    --------------------------------  -----------------------------------------------
    LocationOffset.Value              0 (millimeters part), 0 (inches part) 
    --------------------------------  -----------------------------------------------
    OrientationAngle.Value            0 
    --------------------------------  -----------------------------------------------
    ReinforceOffset.Value             0 (millimeters part), 0 (inches part) 
    --------------------------------  -----------------------------------------------
    SplitReinforcement                1 
    ================================  ===============================================
    
    .. versionadded:: NX9.0.0
    """
    
    class ToolTypes():
        """
        Represents the split tool types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FacePlane", "Face or plane object."
           "Curve", "Curve"
        """
        FacePlane = 0  # SplitStandardPartBuilderToolTypesMemberType
        Curve = 1  # SplitStandardPartBuilderToolTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ConvertObjectsToAdd(self, selectedObjectTags: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Converts the selected objects to acceptable one and add to the selection list.  
        
        Signature ``ConvertObjectsToAdd(selectedObjectTags)`` 
        
        :param selectedObjectTags: 
        :type selectedObjectTags: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ConvertObjectsToRemove(self, selectedObjectTags: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Converts the selected objects to acceptable one and remove it from the selection list.  
        
        Signature ``ConvertObjectsToRemove(selectedObjectTags)`` 
        
        :param selectedObjectTags: 
        :type selectedObjectTags: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def Reset(self) -> None:
        """
        Resets the calculation results of standard part split when tool object changes.  
        
        Signature ``Reset()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    AngularTolerance: float = ...
    """
    Returns or sets  the tolerance, in degrees, used to determine when angles are zero.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    BaseCornerCut: CornerCutBuilder = ...
    """
    Returns  the corner cut at the base point on the standard part.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseCornerCut`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CornerCutBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the tolerance used to determine when distances are considered zero.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    LocationOffset: NXOpen.Expression = ...
    """
    Returns  the offset value to the split location on the standard part base.  
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OrientationAngle: NXOpen.Expression = ...
    """
    Returns  the orientation angle relative to the split curve or plane to split the standard part.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReinforceOffset: NXOpen.Expression = ...
    """
    Returns  the offset value to the split location on the standard part reinforcement.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReinforceOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReinforcementCornerCut: CornerCutBuilder = ...
    """
    Returns  the corner cut at the reinforcement point.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReinforcementCornerCut`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CornerCutBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReverseSplitDirection: bool = ...
    """
    Returns or sets  the flag to indicate whether to reverse the split direction or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSplitDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSplitDirection`` 
    
    :param reverseSplitDirection: 
    :type reverseSplitDirection: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SplitReinforcement: bool = ...
    """
    Returns or sets  the flag to indicate whether to split the reinforcement part on the standard part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitReinforcement`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SplitReinforcement`` 
    
    :param splitReinforcement: 
    :type splitReinforcement: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ToolCurve: NXOpen.Section = ...
    """
    Returns  the tool curve which used to split the standard part.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ToolFacePlane: NXOpen.SelectNXObject = ...
    """
    Returns  the tool face or plane used to split the standard part.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolFacePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ToolType: int = ...
    """
    Returns or sets  the split tool type to split the standard part.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolType`` 
    
    :param toolType: 
    :type toolType: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    WeldCharacteristics: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the weld characteristics assigned to the split edges.  
    
    <hr>
    
    Getter Method
    
    Signature ``WeldCharacteristics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SplitStandardPartBuilder = ...  # unknown typename


class ShipCoordinatesBuilderSelectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipCoordinatesBuilderSelection():
    """
    Represents the options to select point or component. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Point", "Allows point selection."
       "Component", "Allows routing component selection."
    """
    Point = 0  # ShipCoordinatesBuilderSelectionMemberType
    Component = 1  # ShipCoordinatesBuilderSelectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipCoordinatesBuilderXDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipCoordinatesBuilderXDirectionType():
    """
    Represents X-frame direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Forward", " - "
       "Aft", " - "
    """
    Forward = 0  # ShipCoordinatesBuilderXDirectionTypeMemberType
    Aft = 1  # ShipCoordinatesBuilderXDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipCoordinatesBuilderYDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipCoordinatesBuilderYDirectionType():
    """
    Represents Y-frame direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Port", " - "
       "Starboard", " - "
    """
    Port = 0  # ShipCoordinatesBuilderYDirectionTypeMemberType
    Starboard = 1  # ShipCoordinatesBuilderYDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipCoordinatesBuilderZDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipCoordinatesBuilderZDirectionType():
    """
    Represents Z-frame direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Above", " - "
       "Below", " - "
    """
    Above = 0  # ShipCoordinatesBuilderZDirectionTypeMemberType
    Below = 1  # ShipCoordinatesBuilderZDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipCoordinatesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipCoordinates` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipCoordinatesBuilder`
    
    Default values.
    
    ===========  ========
    Property     Value
    ===========  ========
    AbsXValue    0 
    -----------  --------
    AbsYValue    0 
    -----------  --------
    AbsZValue    0 
    -----------  --------
    DeltaX       0 
    -----------  --------
    DeltaY       0 
    -----------  --------
    DeltaZ       0 
    -----------  --------
    XDirection   Forward 
    -----------  --------
    XDistance    0 
    -----------  --------
    YDirection   Port 
    -----------  --------
    YDistance    0 
    -----------  --------
    ZDirection   Above 
    -----------  --------
    ZDistance    0 
    ===========  ========
    
    .. versionadded:: NX8.0.0
    """
    
    class Selection():
        """
        Represents the options to select point or component. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Point", "Allows point selection."
           "Component", "Allows routing component selection."
        """
        Point = 0  # ShipCoordinatesBuilderSelectionMemberType
        Component = 1  # ShipCoordinatesBuilderSelectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class XDirectionType():
        """
        Represents X-frame direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Forward", " - "
           "Aft", " - "
        """
        Forward = 0  # ShipCoordinatesBuilderXDirectionTypeMemberType
        Aft = 1  # ShipCoordinatesBuilderXDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class YDirectionType():
        """
        Represents Y-frame direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Port", " - "
           "Starboard", " - "
        """
        Port = 0  # ShipCoordinatesBuilderYDirectionTypeMemberType
        Starboard = 1  # ShipCoordinatesBuilderYDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ZDirectionType():
        """
        Represents Z-frame direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Above", " - "
           "Below", " - "
        """
        Above = 0  # ShipCoordinatesBuilderZDirectionTypeMemberType
        Below = 1  # ShipCoordinatesBuilderZDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CycleRoutingPorts(self) -> None:
        """
        Cycles through the ports on the selected routing component.  
        
        Signature ``CycleRoutingPorts()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
        """
        ...
    
    
    def CreatePointByCoordinates(self) -> None:
        """
        Creates a standard point.  
        
        Signature ``CreatePointByCoordinates()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPosition(self, position: NXOpen.Point3d) -> None:
        """
        Sets the point information into the ShipCoordinate builder and a standard point will be created according to the position.  
        
        Signature ``SetPosition(position)`` 
        
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPorts(self) -> 'list[NXOpen.TaggedObject]':
        """
        Gets ports in component.  
        
        Signature ``GetPorts()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
        """
        ...
    
    
    def EvaluateSinglePortInformation(self, portIndex: int) -> None:
        """
        Evaluates the Nth ports information and sets them into ShipCoordinatesBuilder builder, the index starts from 1 and should be equal or less than number of ports.  
        
        Signature ``EvaluateSinglePortInformation(portIndex)`` 
        
        :param portIndex: 
        :type portIndex: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
        """
        ...
    
    
    def EvaluatePointInformation(self, position: NXOpen.Point3d) -> None:
        """
        Evaluates the point per position and and sets them into ShipCoordinatesBuilder builder.  
        
        Signature ``EvaluatePointInformation(position)`` 
        
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
        """
        ...
    
    AbsXValue: float = ...
    """
    Returns or sets  the X value in absolute coordinate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``AbsXValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AbsXValue`` 
    
    :param doubleABSX: 
    :type doubleABSX: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    AbsYValue: float = ...
    """
    Returns or sets  the Y value in absolute coordinate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``AbsYValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AbsYValue`` 
    
    :param doubleABSY: 
    :type doubleABSY: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    AbsZValue: float = ...
    """
    Returns or sets  the Z value in absolute coordinate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``AbsZValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AbsZValue`` 
    
    :param doubleABSZ: 
    :type doubleABSZ: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    DeltaX: float = ...
    """
    Returns or sets  the delta value whic is distance between current point and previous point along X-direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaX`` 
    
    :param deltaX: 
    :type deltaX: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    DeltaY: float = ...
    """
    Returns or sets  the delta value whic is distance between current point and previous point along Y-direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaY`` 
    
    :param deltaY: 
    :type deltaY: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    DeltaZ: float = ...
    """
    Returns or sets  the delta value which is distance between current point and previous point long Z-direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaZ`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaZ`` 
    
    :param deltaZ: 
    :type deltaZ: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the point to define ship coordinates.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param selectPoint: 
    :type selectPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    RoutingComponent: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the routing component.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoutingComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    SelectionType: ShipCoordinatesBuilderSelection = ...
    """
    Returns or sets  the selection type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    XDirection: ShipCoordinatesBuilderXDirectionType = ...
    """
    Returns or sets  the X-frame direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderXDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``XDirection`` 
    
    :param xDirection: 
    :type xDirection: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderXDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    XDistance: float = ...
    """
    Returns or sets  the distance along X-direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``XDistance`` 
    
    :param doubleXDistance: 
    :type doubleXDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    XFrameOption: str = ...
    """
    Returns or sets  the X-frame option.  
    
    <hr>
    
    Getter Method
    
    Signature ``XFrameOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``XFrameOption`` 
    
    :param xFrame: 
    :type xFrame: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    YDirection: ShipCoordinatesBuilderYDirectionType = ...
    """
    Returns or sets  the Y-frame direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``YDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderYDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``YDirection`` 
    
    :param yDirection: 
    :type yDirection: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderYDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    YDistance: float = ...
    """
    Returns or sets  the distance along Y-direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``YDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``YDistance`` 
    
    :param doubleYDistance: 
    :type doubleYDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    YFrameOption: str = ...
    """
    Returns or sets  the Y-frame option.  
    
    <hr>
    
    Getter Method
    
    Signature ``YFrameOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``YFrameOption`` 
    
    :param yFrame: 
    :type yFrame: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    ZDirection: ShipCoordinatesBuilderZDirectionType = ...
    """
    Returns or sets  the Z-frame direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderZDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ZDirection`` 
    
    :param zDirection: 
    :type zDirection: :py:class:`NXOpen.Features.ShipDesign.ShipCoordinatesBuilderZDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    ZDistance: float = ...
    """
    Returns or sets  the distance along Z-direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ZDistance`` 
    
    :param doubleZDistance: 
    :type doubleZDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    ZFrameOption: str = ...
    """
    Returns or sets  the Z-frame option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZFrameOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ZFrameOption`` 
    
    :param zFrame: 
    :type zFrame: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") OR routing_base ("Routing Basic")
    """
    Null: ShipCoordinatesBuilder = ...  # unknown typename


class FrameBarOut(NXOpen.Features.BodyFeature):
    """
    Represents a FrameBarOut   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.FrameBarOutBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: FrameBarOut = ...  # unknown typename


class Profile(NXOpen.Features.BodyFeature):
    """
    Represents a profile feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ProfileBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: Profile = ...  # unknown typename


class Deck(NXOpen.Features.BodyFeature):
    """
    Represents a Deck feature in Basic Design.  
    
    The Deck feature is used to represent 
    mostly horizontal surface shapes in the ship. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.DeckBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: Deck = ...  # unknown typename


class EditWeldingBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to create a :py:class:`NXOpen.Features.ShipDesign.EditWeldingBuilder` which
    is used to change the welding characteristics on the seams in the plate systems.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateEditWeldingBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Seams: NXOpen.SelectNXObjectList = ...
    """
    Returns  the objects to change the welding characteristics 
    
    <hr>
    
    Getter Method
    
    Signature ``Seams`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WeldCharacteristics: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the weld characteristics 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldCharacteristics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: EditWeldingBuilder = ...  # unknown typename


class WeldCutBuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WeldCutBuilderCreationMethod():
    """
    Creation method used to define the placement of the weld cut 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Corner", " - "
       "AlongGuide", " - "
       "SpecifyCSYS", " - "
    """
    Corner = 0  # WeldCutBuilderCreationMethodMemberType
    AlongGuide = 1  # WeldCutBuilderCreationMethodMemberType
    SpecifyCSYS = 2  # WeldCutBuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WeldCutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.WeldCut` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateWeldCutBuilder`
    
    Default values.
    
    ========================  ========
    Property                  Value
    ========================  ========
    SketchBlock.Exp1.Value    0 
    ------------------------  --------
    SketchBlock.Exp10.Value   0 
    ------------------------  --------
    SketchBlock.Exp11.Value   0 
    ------------------------  --------
    SketchBlock.Exp12.Value   0 
    ------------------------  --------
    SketchBlock.Exp2.Value    0 
    ------------------------  --------
    SketchBlock.Exp3.Value    0 
    ------------------------  --------
    SketchBlock.Exp4.Value    0 
    ------------------------  --------
    SketchBlock.Exp5.Value    0 
    ------------------------  --------
    SketchBlock.Exp6.Value    0 
    ------------------------  --------
    SketchBlock.Exp7.Value    0 
    ------------------------  --------
    SketchBlock.Exp8.Value    0 
    ------------------------  --------
    SketchBlock.Exp9.Value    0 
    ------------------------  --------
    SketchBlock.Sketches      EndCut1 
    ========================  ========
    
    .. versionadded:: NX7.5.0
    """
    
    class CreationMethod():
        """
        Creation method used to define the placement of the weld cut 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Corner", " - "
           "AlongGuide", " - "
           "SpecifyCSYS", " - "
        """
        Corner = 0  # WeldCutBuilderCreationMethodMemberType
        AlongGuide = 1  # WeldCutBuilderCreationMethodMemberType
        SpecifyCSYS = 2  # WeldCutBuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CoordSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the placement CSYS of the weld cut 
    The coordinate system is only used for the SpecifyCSYS placement method.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoordSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordSystem`` 
    
    :param coordSystem: 
    :type coordSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepCoordSystem: bool = ...
    """
    Returns or sets  the keep coordinate system.  
    
    A toggle used to remember the specified csys on apply.
    The keep selected coordinate system is only used for the SpecifyCSYS placement method.   
    
    <hr>
    
    Getter Method
    
    Signature ``KeepCoordSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepCoordSystem`` 
    
    :param keepCoordSystem: 
    :type keepCoordSystem: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectCSYSFace: bool = ...
    """
    Returns or sets  the keep select target face.  
    
    A toggle used to remember the selected target face on apply.
    This keep select target face is only used for the SpecifyCSYS placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectCSYSFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectCSYSFace`` 
    
    :param keepSelectCSYSFace: 
    :type keepSelectCSYSFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectGuideCurve: bool = ...
    """
    Returns or sets  the keep select guide curve.  
    
    A toggle used to remember the selected guide curve on apply.
    The keep select guide curve is only used for the AlongGuide placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectGuideCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectGuideCurve`` 
    
    :param keepSelectGuideCurve: 
    :type keepSelectGuideCurve: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectTargetFace: bool = ...
    """
    Returns or sets  the keep select target face.  
    
    A toggle used to remember the selected target face on apply.
    This keep select target face is only used for the AlongGuide placement method.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectTargetFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectTargetFace`` 
    
    :param keepSelectTargetFace: 
    :type keepSelectTargetFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    PlacementType: WeldCutBuilderCreationMethod = ...
    """
    Returns or sets  the method used to define the placement of the weld cut 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.WeldCutBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param placementType: 
    :type placementType: :py:class:`NXOpen.Features.ShipDesign.WeldCutBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SelectCSYSFace: NXOpen.SelectFace = ...
    """
    Returns  the selection object for the target face.  
    
    This target face is only used for the SpecifyCSYS placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCSYSFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectGuideCurve: NXOpen.SelectTaggedObject = ...
    """
    Returns  the selection object for the guide curve.  
    
    The select guide curve is only used for the AlongGuide placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectGuideCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectTargetFace: NXOpen.SelectFace = ...
    """
    Returns  the selection object for the target face.  
    
    This target face is only used for the AlongGuide placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SketchBlock: NXOpen.SketchExpressionModifierBuilder = ...
    """
    Returns  the sketch block 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SketchExpressionModifierBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WeldLocation: NXOpen.Point = ...
    """
    Returns or sets  the weld location.  
    
    The weld location is only used for the Corner placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldLocation`` 
    
    :param weldLocation: 
    :type weldLocation: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: WeldCutBuilder = ...  # unknown typename


class DvToMvMapping(NXOpen.Features.BodyFeature):
    """
    Represents a plate feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.DvToMvMappingBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: DvToMvMapping = ...  # unknown typename


class SetModeBuilderDesMfgModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SetModeBuilderDesMfgMode():
    """
    Manufacturing Mode type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DesignMode", " - "
       "ManufacturingMode", " - "
    """
    DesignMode = 0  # SetModeBuilderDesMfgModeMemberType
    ManufacturingMode = 1  # SetModeBuilderDesMfgModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SetModeBuilder(NXOpen.Builder):
    """
    This class is used to set the mode to design or manufacturing.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSetModeBuilder`
    
    Default values.
    
    ========================  ===========
    Property                  Value
    ========================  ===========
    ManufacturingDesignMode   DesignMode 
    ========================  ===========
    
    .. versionadded:: NX8.0.0
    """
    
    class DesMfgMode():
        """
        Manufacturing Mode type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DesignMode", " - "
           "ManufacturingMode", " - "
        """
        DesignMode = 0  # SetModeBuilderDesMfgModeMemberType
        ManufacturingMode = 1  # SetModeBuilderDesMfgModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetMode(self) -> int:
        """
        Loops through all the parts and sets mode to design or manufacturing 
        
        Signature ``SetMode()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    DesignElementToSetMode: NXOpen.SelectNXObjectList = ...
    """
    Returns  the design element selection object to be processed in the change of mode processing.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignElementToSetMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ManufacturingDesignMode: SetModeBuilderDesMfgMode = ...
    """
    Returns or sets  the manufacturing and design mode.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingDesignMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SetModeBuilderDesMfgMode` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ManufacturingDesignMode`` 
    
    :param manufacturingDesignMode: 
    :type manufacturingDesignMode: :py:class:`NXOpen.Features.ShipDesign.SetModeBuilderDesMfgMode` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: SetModeBuilder = ...  # unknown typename


class InteractiveAnnotationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.InteractiveAnnotationBuilder` builder .  
    
    This builder returns None. 
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateInteractiveAnnotationBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def AddAnnotationOfStructureIdAndScantling(self, createIDAnnotation: bool, createScantlingAnnotation: bool, draftingBody: NXOpen.Drawings.DraftingBody) -> None:
        """
        Add annotations of sturcture ID And scantling.  
        
        Signature ``AddAnnotationOfStructureIdAndScantling(createIDAnnotation, createScantlingAnnotation, draftingBody)`` 
        
        :param createIDAnnotation:  Create ID annotation or not  
        :type createIDAnnotation: bool 
        :param createScantlingAnnotation:  Create Scantling annotation or not  
        :type createScantlingAnnotation: bool 
        :param draftingBody: 
        :type draftingBody: :py:class:`NXOpen.Drawings.DraftingBody` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddAnnotationOfEndCuts(self, createEndCutsSymbol: bool, draftingBody: NXOpen.Drawings.DraftingBody) -> None:
        """
        Add annotation of end cuts.  
        
        Signature ``AddAnnotationOfEndCuts(createEndCutsSymbol, draftingBody)`` 
        
        :param createEndCutsSymbol:  Create End Cuts symbols or not 
        :type createEndCutsSymbol: bool 
        :param draftingBody: 
        :type draftingBody: :py:class:`NXOpen.Drawings.DraftingBody` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddAnnotationOfOpeningFillingLine(self, createOpeningFillingLine: bool, draftingbody: NXOpen.Drawings.DraftingBody) -> None:
        """
        Add annotation of opening filling line 
        
        Signature ``AddAnnotationOfOpeningFillingLine(createOpeningFillingLine, draftingbody)`` 
        
        :param createOpeningFillingLine: 
        :type createOpeningFillingLine: bool 
        :param draftingbody: 
        :type draftingbody: :py:class:`NXOpen.Drawings.DraftingBody` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddAnnotationOfBracket(self, createBracketSymbol: bool, draftingbody: NXOpen.Drawings.DraftingBody) -> None:
        """
        Add annotation of bracket 
        
        Signature ``AddAnnotationOfBracket(createBracketSymbol, draftingbody)`` 
        
        :param createBracketSymbol: 
        :type createBracketSymbol: bool 
        :param draftingbody: 
        :type draftingbody: :py:class:`NXOpen.Drawings.DraftingBody` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddAnnotationOfSeamForDetailDesign(self, createSeamSymbol: bool, tgView: NXOpen.Drawings.DraftingView, objects: 'list[NXOpen.Drawings.DraftingBody]', selectedObjecty: NXOpen.Drawings.DraftingBody) -> None:
        """
        Add annotation of seam symbol for detail design 
        
        Signature ``AddAnnotationOfSeamForDetailDesign(createSeamSymbol, tgView, objects, selectedObjecty)`` 
        
        :param createSeamSymbol: 
        :type createSeamSymbol: bool 
        :param tgView: 
        :type tgView: :py:class:`NXOpen.Drawings.DraftingView` 
        :param objects: 
        :type objects: list of :py:class:`NXOpen.Drawings.DraftingBody` 
        :param selectedObjecty: 
        :type selectedObjecty: :py:class:`NXOpen.Drawings.DraftingBody` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def HandleSeamForNonSectionedPlateForBasicDesign(self, createSeamSymbol: bool, draftingVDCurve: NXOpen.Drawings.DraftingCurve, tgCurve: NXOpen.NXObject) -> None:
        """
        Add annotation of seam symbol for non-sectioned plate for basic design 
        
        Signature ``HandleSeamForNonSectionedPlateForBasicDesign(createSeamSymbol, draftingVDCurve, tgCurve)`` 
        
        :param createSeamSymbol: 
        :type createSeamSymbol: bool 
        :param draftingVDCurve:  Ship drafting curve 
        :type draftingVDCurve: :py:class:`NXOpen.Drawings.DraftingCurve` 
        :param tgCurve: 
        :type tgCurve: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def HandleSeamForSectionedPlateForBasicDesign(self, createSeamSymbol: bool, tgDraftingBody: NXOpen.Drawings.DraftingBody, objects: 'list[NXOpen.Drawings.DraftingCurve]', selectedObject: NXOpen.Drawings.DraftingCurve) -> None:
        """
        Add annotation of seam symbol for sectioned plate for basic design 
        
        Signature ``HandleSeamForSectionedPlateForBasicDesign(createSeamSymbol, tgDraftingBody, objects, selectedObject)`` 
        
        :param createSeamSymbol: 
        :type createSeamSymbol: bool 
        :param tgDraftingBody: 
        :type tgDraftingBody: :py:class:`NXOpen.Drawings.DraftingBody` 
        :param objects: 
        :type objects: list of :py:class:`NXOpen.Drawings.DraftingCurve` 
        :param selectedObject: 
        :type selectedObject: :py:class:`NXOpen.Drawings.DraftingCurve` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddAnnotationOfExpansionStiffenerSturctureIdAndScantling(self, tgView: NXOpen.Drawings.DraftingView, shipStructure: NXOpen.NXObject, createIDAnnotation: bool, createScantlingAnnotation: bool) -> None:
        """
        Add annotation of structure ID and scantling on Ship Expansion View
        
        Signature ``AddAnnotationOfExpansionStiffenerSturctureIdAndScantling(tgView, shipStructure, createIDAnnotation, createScantlingAnnotation)`` 
        
        :param tgView:  The Ship Expansion View 
        :type tgView: :py:class:`NXOpen.Drawings.DraftingView` 
        :param shipStructure:  The Ship Structure on that the annotation will create.  
        :type shipStructure: :py:class:`NXOpen.NXObject` 
        :param createIDAnnotation:  Create ID annotation or not 
        :type createIDAnnotation: bool 
        :param createScantlingAnnotation:  Create Scantling Annotation or not 
        :type createScantlingAnnotation: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddAnnotationOfExpansionStiffenerEndCuts(self, tgView: NXOpen.Drawings.DraftingView, shipStructure: NXOpen.NXObject, createEndCutsSymbol: bool) -> None:
        """
        Add annotation of expansion stiffener endcuts
        
        Signature ``AddAnnotationOfExpansionStiffenerEndCuts(tgView, shipStructure, createEndCutsSymbol)`` 
        
        :param tgView:  The Ship Expansion View 
        :type tgView: :py:class:`NXOpen.Drawings.DraftingView` 
        :param shipStructure:  The Ship Structure on that the annotation will create.  
        :type shipStructure: :py:class:`NXOpen.NXObject` 
        :param createEndCutsSymbol:  Create End Cuts Symbol or not 
        :type createEndCutsSymbol: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddAnnotationOfExpansionPlate(self, tgView: NXOpen.Drawings.DraftingView, shipStructure: NXOpen.NXObject, createScantlingAnnotation: bool) -> None:
        """
        Add annotation of expansion plate
        
        Signature ``AddAnnotationOfExpansionPlate(tgView, shipStructure, createScantlingAnnotation)`` 
        
        :param tgView:  The Ship Expansion View 
        :type tgView: :py:class:`NXOpen.Drawings.DraftingView` 
        :param shipStructure:  The Ship Structure on that the annotation will create.  
        :type shipStructure: :py:class:`NXOpen.NXObject` 
        :param createScantlingAnnotation:  Create Scantling Annotation or not 
        :type createScantlingAnnotation: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def HandleAnnotationForBasicDesign(self, createIDAnnotation: bool, createScantlingAnnotation: bool, createEndCutsAnnotation: bool, draftingVDCurve: NXOpen.Drawings.DraftingCurve, shipEntity: NXOpen.NXObject, view: NXOpen.Drawings.DraftingView) -> NXOpen.NXObject:
        """
        Creates ship annotations for basic design structures.  
        
        Signature ``HandleAnnotationForBasicDesign(createIDAnnotation, createScantlingAnnotation, createEndCutsAnnotation, draftingVDCurve, shipEntity, view)`` 
        
        :param createIDAnnotation:  Create Structure ID Annotation or not 
        :type createIDAnnotation: bool 
        :param createScantlingAnnotation:  Create Scantling Annotation or not 
        :type createScantlingAnnotation: bool 
        :param createEndCutsAnnotation:  Create EndCuts Annotation or not 
        :type createEndCutsAnnotation: bool 
        :param draftingVDCurve:  Ship drafting curve 
        :type draftingVDCurve: :py:class:`NXOpen.Drawings.DraftingCurve` 
        :param shipEntity:  The ship entity, entity type can be :py:class:`NXOpen.Body` or :py:class:`NXOpen.Face` 
        :type shipEntity: :py:class:`NXOpen.NXObject` 
        :param view:  Ship drafting section view 
        :type view: :py:class:`NXOpen.Drawings.DraftingView` 
        :returns:  The ship entity annotation, entity type can be :py:class:`NXOpen.Body` or :py:class:`NXOpen.Face` 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddFillingLineByChain(self, curves: 'list[NXOpen.Drawings.DraftingCurve]', createChainAnnotation: bool) -> None:
        """
        Adds opening filling lines by curve chain method.  
        
        Signature ``AddFillingLineByChain(curves, createChainAnnotation)`` 
        
        :param curves:  Ship drafting curves 
        :type curves: list of :py:class:`NXOpen.Drawings.DraftingCurve` 
        :param createChainAnnotation:  Create Chain Annotation or not 
        :type createChainAnnotation: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddFillingLineByPoints(self, spiderPoint: NXOpen.Point, strikingPoint: NXOpen.Point) -> NXOpen.Line:
        """
        Adds opening filling lines by points method.  
        
        Signature ``AddFillingLineByPoints(spiderPoint, strikingPoint)`` 
        
        :param spiderPoint:  spider point 
        :type spiderPoint: :py:class:`NXOpen.Point` 
        :param strikingPoint:  striking point 
        :type strikingPoint: :py:class:`NXOpen.Point` 
        :returns:  Create line by points 
        :rtype: :py:class:`NXOpen.Line` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def ModifyFillingLineByPoints(self, spiderPoint: NXOpen.Point, strikingPoint: NXOpen.Point, line: NXOpen.Line) -> None:
        """
        Modifies the position of opening filling line, which is created by points method.  
        
        Signature ``ModifyFillingLineByPoints(spiderPoint, strikingPoint, line)`` 
        
        :param spiderPoint:  spider point 
        :type spiderPoint: :py:class:`NXOpen.Point` 
        :param strikingPoint:  striking point 
        :type strikingPoint: :py:class:`NXOpen.Point` 
        :param line:  line which created by point  
        :type line: :py:class:`NXOpen.Line` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def DeleteExistingAnnotations(self) -> None:
        """
        Deletes the existing annotations excluding the opening filling lines.  
        
        Signature ``DeleteExistingAnnotations()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def DeleteOpeningFillingLine(self, line: NXOpen.Line) -> None:
        """
        Deletes the specific opening filling line.  
        
        Signature ``DeleteOpeningFillingLine(line)`` 
        
        :param line: 
        :type line: :py:class:`NXOpen.Line` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def SetTableIndex(self, inx: int) -> None:
        """
        Sets the table index 
        
        Signature ``SetTableIndex(inx)`` 
        
        :param inx: 
        :type inx: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def SetPosition(self, pos: 'list[float]') -> None:
        """
        Sets the table position 
        
        Signature ``SetPosition(pos)`` 
        
        :param pos:  position  
        :type pos: list of float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def CreateTable(self) -> NXOpen.Annotations.TableSection:
        """
        Creates the Table.  
        
        Signature ``CreateTable()`` 
        
        :returns:  table section 
        :rtype: :py:class:`NXOpen.Annotations.TableSection` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def GetTableIndex(self) -> int:
        """
        Gets the table index  
        
        Signature ``GetTableIndex()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def DeleteLines(self, curves: 'list[NXOpen.Drawings.DraftingCurve]') -> None:
        """
        Deletes opening filling lines 
        
        Signature ``DeleteLines(curves)`` 
        
        :param curves: 
        :type curves: list of :py:class:`NXOpen.Drawings.DraftingCurve` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def AddFillingLinesByModelBody(self, draftingbody: NXOpen.Drawings.DraftingBody, curves: 'list[NXOpen.Drawings.DraftingCurve]') -> bool:
        """
        Adds opening filling lines by model body.  
        
        Signature ``AddFillingLinesByModelBody(draftingbody, curves)`` 
        
        :param draftingbody: 
        :type draftingbody: :py:class:`NXOpen.Drawings.DraftingBody` 
        :param curves:  Ship drafting curves 
        :type curves: list of :py:class:`NXOpen.Drawings.DraftingCurve` 
        :returns:  Create Annotation or not 
        :rtype: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting") OR nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    Null: InteractiveAnnotationBuilder = ...  # unknown typename


class WeldCut2BuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WeldCut2BuilderCreationMethod():
    """
    Creation method used to define the placement of the weld cut 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Corner", " - "
       "AlongGuide", " - "
       "SpecifyCSYS", " - "
    """
    Corner = 0  # WeldCut2BuilderCreationMethodMemberType
    AlongGuide = 1  # WeldCut2BuilderCreationMethodMemberType
    SpecifyCSYS = 2  # WeldCut2BuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WeldCut2Builder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.WeldCut2` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateWeldCut2Builder`
    
    Default values.
    
    ==================  ===============================================
    Property            Value
    ==================  ===============================================
    DistanceTolerance   0.0254 (millimeters part), 0.001 (inches part) 
    ==================  ===============================================
    
    .. versionadded:: NX8.0.1
    """
    
    class CreationMethod():
        """
        Creation method used to define the placement of the weld cut 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Corner", " - "
           "AlongGuide", " - "
           "SpecifyCSYS", " - "
        """
        Corner = 0  # WeldCut2BuilderCreationMethodMemberType
        AlongGuide = 1  # WeldCut2BuilderCreationMethodMemberType
        SpecifyCSYS = 2  # WeldCut2BuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CSYSTargetFace: NXOpen.SelectFace = ...
    """
    Returns  the csys target face.  
    
    This csys target face is only used for the SpecifyCSYS placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``CSYSTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    CoordinateSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the placement CSYS of the weld cut 
    The coordinate system is only used for the SpecifyCSYS placement method.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystem`` 
    
    :param coordinateSystem: 
    :type coordinateSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    CornerPoint: NXOpen.Point = ...
    """
    Returns or sets  the corner point as weld location.  
    
    The weld location is only used for the Corner placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CornerPoint`` 
    
    :param weldLocation: 
    :type weldLocation: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    CornerTargetFace: NXOpen.SelectFace = ...
    """
    Returns  the corner target face.  
    
    This corner target face is only used for the Corner placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    CurveTargetFace: NXOpen.SelectFace = ...
    """
    Returns  the curve target face.  
    
    This curve target face is only used for the AlongGuide placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    GuideCurve: NXOpen.SelectTaggedObject = ...
    """
    Returns  the guide curve to position the weld cut.  
    
    The select guide curve is only used for the AlongGuide placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    PlacementType: WeldCut2BuilderCreationMethod = ...
    """
    Returns or sets  the method used to define the placement of the weld cut 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.WeldCut2BuilderCreationMethod` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param placementType: 
    :type placementType: :py:class:`NXOpen.Features.ShipDesign.WeldCut2BuilderCreationMethod` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Spreadsheet: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the spreadsheet builder.  
    
    Users can specify the Weldout using a single sketch. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``Spreadsheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    Null: WeldCut2Builder = ...  # unknown typename


class ManufacturingDataBuilder(NXOpen.Builder):
    """
    This class is used to generate Manufacturing data.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateManufacturingDataBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def CreateMfgData(self) -> int:
        """
        Loops through all the parts and creates manufacturing data on those parts containing Plate or Stiffener Steel Features
        
        Signature ``CreateMfgData()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    DesignElementToGenMfgData: NXOpen.SelectNXObjectList = ...
    """
    Returns  the design element to genenerate manufacturing data 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignElementToGenMfgData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: ManufacturingDataBuilder = ...  # unknown typename


class ReferenceLine(NXOpen.Features.CurveFeature):
    """
    Represents a reference line feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ReferenceLineBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: ReferenceLine = ...  # unknown typename


class InsertSheetBody(NXOpen.Features.BodyFeature):
    """
    Represents a insert sheet body feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.InsertSheetBodyBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: InsertSheetBody = ...  # unknown typename


class ShipPreparationInfoTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipPreparationInfoTypes():
    """
    Used to specify the type of object represented in the data. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "Type of data not known yet."
       "LinkedBody", "The data represents a linked body feature."
       "LinkedBodyBracket", "The data represents a linked body feature for the new Bracket body."
       "LinkedEdges", "The data represents a composite curve feature extracting edges."
       "LinkedCurves", "The data represents a linked composite curve feature."
       "LinkedFaces", "The data represents a linked face feature."
       "PlateDivide", "The data represents a plate divide feature."
       "StiffenerDivide", "The data represents a stiffener divide feature."
       "StiffenerBySupportDivide", "The data represents a stiffener divide feature, for a stiffener by support."
       "EdgeReinforcementDivide", "The data represents a edge reinforcement divide feature. This feature handles splitting edges when needed."
       "EdgeReinforcementEdges", "The data represents a edge reinforcement divide feature. This feature handles labelling the edges of the linked body."
       "StandardPartBracketDivide", "The data represents a standard part bracket divide feature."
       "Pillar", "The data represents a pillar feature."
       "BracketDivide", "The data represents a bracket divide feature."
       "UserDefined", "The data represents a user defined divide feature."
    """
    Unknown = 0  # ShipPreparationInfoTypesMemberType
    LinkedBody = 1  # ShipPreparationInfoTypesMemberType
    LinkedBodyBracket = 2  # ShipPreparationInfoTypesMemberType
    LinkedEdges = 3  # ShipPreparationInfoTypesMemberType
    LinkedCurves = 4  # ShipPreparationInfoTypesMemberType
    LinkedFaces = 5  # ShipPreparationInfoTypesMemberType
    PlateDivide = 6  # ShipPreparationInfoTypesMemberType
    StiffenerDivide = 7  # ShipPreparationInfoTypesMemberType
    StiffenerBySupportDivide = 8  # ShipPreparationInfoTypesMemberType
    EdgeReinforcementDivide = 9  # ShipPreparationInfoTypesMemberType
    EdgeReinforcementEdges = 10  # ShipPreparationInfoTypesMemberType
    StandardPartBracketDivide = 11  # ShipPreparationInfoTypesMemberType
    Pillar = 12  # ShipPreparationInfoTypesMemberType
    BracketDivide = 13  # ShipPreparationInfoTypesMemberType
    UserDefined = 14  # ShipPreparationInfoTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipPreparationInfo(NXOpen.TransientObject):
    """
    Used to interrogate and change the processing within the :py:class:`NXOpen.Features.ShipDesign.ShipPreparationBuilder`.  
    
    The following is a description of the class for each :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes` setting.
    If a description is not given for a class property or method, then that property or method is not applicable, except for
    :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.ToBeDeleted` is always applicable. This is the way the
    data is set up after calling :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationBuilder.FindBasicDesignData`.
    
    **Used to create the linked body feature for plate systems.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBody <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the linked body feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.SourcePart` returns the 
    :py:class:`Assemblies.Component` of the source object.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetSourceData` will output the bodies that are linked by this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetLinkedData` will output the linked bodies once they are created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the Plate System feature that
    created the source body.
    
    **Used to create the linked body features for Brackets.</b>
    
      * When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBodyBracket <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the linked body feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.SourcePart` returns the 
    :py:class:`Assemblies.Component` of the source object.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to be imprinted with this body.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by this body. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Parent` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is the parent of this slave feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetSourceData` will output the bodies 
    that are linked by this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetLinkedData` will output the linked 
    bodies once they are created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns
    the Bracket feature that created the source body.
    
    **Used to create composite curve features for edges of intersection seams.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the
    composite curve feature if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to include these edges for imprint.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by these edges. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Parent` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is the parent of this slave feature. The is also the 
    linked body containing the edges.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetSourceData` will output the edges that 
    are gathered by this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetLinkedData` will output the composite 
    curves once they are created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns
    the main feature or Sub Systems feature of the plate system.
    
    **Used to create linked composite curve features for intersection seams, curves of standard part brackets, and pillar curves.
    When the linked target body is created for intersection seams, the edges on this linked body for the intersection seam curves
    will be found. If they are found the edges will be transferred to the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that contains the edges that are part of a composite curve
    feature.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedCurves <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the
    linked composite curve feature if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.SourcePart` returns the 
    :py:class:`Assemblies.Component` of the source object.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to include these curves for imprint. 
    Will be None for pillar curves.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by these curves. This data is only available when all the linked data is created.
    Will be None for pillar curves.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Parent` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is the parent of this slave feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetSourceData` will output the curves that 
    are linked by this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetLinkedData` will output the linked 
    curves once they are created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns
    the main feature or Sub Systems feature of the plate system, the standard part feature, or the pillar feature.
    
    **Used to create linked face features for stiffener and edge reinforcement base faces.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedFaces <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the
    linked face feature if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.SourcePart` returns the 
    :py:class:`Assemblies.Component` of the source object.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` of the linked body that is to being imprinted by these base faces.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by these base faces. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Parent` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is the parent of this slave feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetSourceData` will output the bodies whose faces
    are linked by this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetLinkedData` will output the linked 
    faces once they are created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns
    the main feature or Sub Systems feature of the stiffener system, or edge reinforcement system.
    
    **Used to create plate divide features for imprinting the bounded sheets and intersection seams onto a plate system linked body.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the plate divide feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to be imprinted with this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by this body. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the bodies and curves that will be used for imprint.
    This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.ExtendImprints`` allows you to indicate if you want
    imprints to be extended to the closest edge.
    
    **Used to create divide features for imprinting the stiffener systems, and on face edge reinforcements onto a plate system linked body.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerBySupportDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the profile divide feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to be imprinted with this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by this body. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the bodies that will be used for imprint.
    This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the 
    main feature or Sub Systems feature of the stiffener system or edge reinforcement system.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.ExtendImprints`` allows you to indicate if you want
    imprints to be extended to the closest edge.
    
    **Used to create edge reinforcement marking features for splitting the edges on a linked plate system body when needed.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.EdgeReinforcementDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the edge reinforcement marking feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to have its edges split with this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is to have its edges split by this body. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the bodies that will be used for splitting the edges.
    This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the 
    main feature or Sub Systems feature of the edge reinforcement system.
    
    **Used to create edge reinforcement marking features for labelling the edges of the plate system linked body where edge reinforcements exist.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.EdgeReinforcementEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the edge reinforcement marking feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to be imprinted with this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by this body. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Parent` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is the parent of this slave feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the edges that will be labelled.
    This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the 
    edge reinforcement system feature.
    
    **Used to create divide features for imprinting the curves of a standard part bracket.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StandardPartBracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the bracket divide feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to be imprinted with this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by this body. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the curves that will be used for imprint.
    This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the 
    standard part bracket feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.ExtendImprints`` allows you to indicate if you want
    imprints to be extended to the closest edge.
    
    **Used to create divide features for imprinting the body of a new bracket.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.BracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the bracket divide feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to be imprinted with this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by this body. This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the body that will be used for imprint.
    This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the 
    bracket feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.ExtendImprints`` allows you to indicate if you want
    imprints to be extended to the closest edge.
    
    **Used to create pillar points features which outputs the end points for beam creation.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.Pillar <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the pillar feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the curves that were linked in for the pillar.
    This data is only available when all the linked data is created.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the 
    main feature or Sub Systems of the pillar feature.
    
    **Used to create plate divide features for user supplied bodies and curves onto a plate system linked body.</b>
    When :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Types` returns 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.UserDefined <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Feature` returns the plate divide feature 
    if it has been created, None otherwise.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.Target` returns the 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` that is to be imprinted with this feature.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.TargetBody` returns the body 
    of the linked body that is being imprinted by this body.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.GetImprintData` will output the bodies and curves that will be used for imprint.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.BasicDesignFeature` returns the 
    feature supplied by the user, can be None.
      * :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.ExtendImprints`` allows you to indicate if you want
    imprints to be extended to the closest edge.
    
    .. versionadded:: NX11.0.0
    """
    
    class Types():
        """
        Used to specify the type of object represented in the data. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "Type of data not known yet."
           "LinkedBody", "The data represents a linked body feature."
           "LinkedBodyBracket", "The data represents a linked body feature for the new Bracket body."
           "LinkedEdges", "The data represents a composite curve feature extracting edges."
           "LinkedCurves", "The data represents a linked composite curve feature."
           "LinkedFaces", "The data represents a linked face feature."
           "PlateDivide", "The data represents a plate divide feature."
           "StiffenerDivide", "The data represents a stiffener divide feature."
           "StiffenerBySupportDivide", "The data represents a stiffener divide feature, for a stiffener by support."
           "EdgeReinforcementDivide", "The data represents a edge reinforcement divide feature. This feature handles splitting edges when needed."
           "EdgeReinforcementEdges", "The data represents a edge reinforcement divide feature. This feature handles labelling the edges of the linked body."
           "StandardPartBracketDivide", "The data represents a standard part bracket divide feature."
           "Pillar", "The data represents a pillar feature."
           "BracketDivide", "The data represents a bracket divide feature."
           "UserDefined", "The data represents a user defined divide feature."
        """
        Unknown = 0  # ShipPreparationInfoTypesMemberType
        LinkedBody = 1  # ShipPreparationInfoTypesMemberType
        LinkedBodyBracket = 2  # ShipPreparationInfoTypesMemberType
        LinkedEdges = 3  # ShipPreparationInfoTypesMemberType
        LinkedCurves = 4  # ShipPreparationInfoTypesMemberType
        LinkedFaces = 5  # ShipPreparationInfoTypesMemberType
        PlateDivide = 6  # ShipPreparationInfoTypesMemberType
        StiffenerDivide = 7  # ShipPreparationInfoTypesMemberType
        StiffenerBySupportDivide = 8  # ShipPreparationInfoTypesMemberType
        EdgeReinforcementDivide = 9  # ShipPreparationInfoTypesMemberType
        EdgeReinforcementEdges = 10  # ShipPreparationInfoTypesMemberType
        StandardPartBracketDivide = 11  # ShipPreparationInfoTypesMemberType
        Pillar = 12  # ShipPreparationInfoTypesMemberType
        BracketDivide = 13  # ShipPreparationInfoTypesMemberType
        UserDefined = 14  # ShipPreparationInfoTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Free resources associated with the instance.  
        
        After this method
        is called, it is illegal to use the object.  In .NET, this method
        is automatically called when the object is deleted by the garbage
        collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSourceData(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the source data of the object.  
        
        Only valid when Type is 
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBody <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBodyBracket <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedCurves <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedFaces <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
        
        Signature ``GetSourceData()`` 
        
        :returns:  The objects to belinked into the preparation part.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSourceData(self, sourceData: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the source data of the object.  
        
        Only valid when Type is 
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBody <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBodyBracket <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedCurves <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedFaces <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
        
        Signature ``SetSourceData(sourceData)`` 
        
        :param sourceData:  The objects to be linked into the preparation part.  
        :type sourceData: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def GetLinkedData(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the linked data of the object.  
        
        Only valid when Type is 
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBody <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBodyBracket <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedCurves <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedFaces <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
        This will only be set after the basic design data has been linked. 
        
        Signature ``GetLinkedData()`` 
        
        :returns:  The objects linked into the preparation part.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetImprintData(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the data to be imprinted onto the target plate system.  
        
        Only valid when Type is 
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerBySupportDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.EdgeReinforcementDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.EdgeReinforcementEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StandardPartBracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.BracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.Pillar <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.UserDefined <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
        Will be curves or bodies. This will typically only be set after the basic design data has been linked. 
        
        Signature ``GetImprintData()`` 
        
        :returns: The objects that will be imprinted onto the plate system.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetImprintData(self, imprintData: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the data to be imprinted onto the target plate system.  
        
        Only valid when Type is 
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerBySupportDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.EdgeReinforcementDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.EdgeReinforcementEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StandardPartBracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.BracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.Pillar <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
        :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.UserDefined <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
        Only curves or bodies are allowed. Curves will be projected normal to the target body for imprint. 
        
        Signature ``SetImprintData(imprintData)`` 
        
        :param imprintData:  The objects that will be imprinted onto the plate system.  
        :type imprintData: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    BasicDesignFeature: NXOpen.Features.Feature = ...
    """
    Returns or sets  the basic design feature related to this information.  
    
    <hr>
    
    Getter Method
    
    Signature ``BasicDesignFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BasicDesignFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    BlendRadius: float = ...
    """
    Returns or sets  the blend radius.  
    
    If :py:meth:`Features.ShipDesign.ShipPreparationInfo.RemoveBlends`` is true then blends that
    that are less than or equal to this radius will be removed from plate systems. Only used when Type is 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``BlendRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlendRadius`` 
    
    :param blendRadius: 
    :type blendRadius: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ExtendImprints: bool = ...
    """
    Returns or sets  the option to extend the imprints.  
    
    If true, imprints will be extended to the first edge.
    Only used when Type is 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerBySupportDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StandardPartBracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.BracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.UserDefined <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendImprints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendImprints`` 
    
    :param extendImprints: 
    :type extendImprints: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Feature: NXOpen.Features.Feature = ...
    """
    Returns or sets  the feature generating this information.  
    
    Will be None before the feature is actually created. 
    
    <hr>
    
    Getter Method
    
    Signature ``Feature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Feature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    HoleDiameter: float = ...
    """
    Returns or sets  the hole diameter.  
    
    If :py:meth:`Features.ShipDesign.ShipPreparationInfo.RemoveOpenings`` is true then openings that
    fit inside a circle with this diameter will be removed from plate systems. Only used when Type is 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDiameter`` 
    
    :param holeDiameter: 
    :type holeDiameter: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MaximumExtensionDistance: float = ...
    """
    Returns or sets  the maximum distance edges will be extended to completion.  
    
    Only used when 
    :py:meth:`NXOpen.Features.ShipDesign.ShipPreparationInfo.ExtendImprints`` is true and
    Type is 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StiffenerBySupportDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.StandardPartBracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.BracketDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.UserDefined <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumExtensionDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumExtensionDistance`` 
    
    :param maximumExtensionDistance: 
    :type maximumExtensionDistance: float 
    
    .. versionadded:: NX11.0.2
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Parent: ShipPreparationInfo = ...
    """
    Returns or sets  the parent of the Ship Preparation feature.  
    
    The Ship Preparation feature will be made a slave of this 
    feature. Only used when Type is
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBodyBracket <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedCurves <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedFaces <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.EdgeReinforcementEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``Parent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parent`` 
    
    :param parent: 
    :type parent: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    RemoveBlends: bool = ...
    """
    Returns or sets  the option to remove blends.  
    
    If true, blends with a radius less than or equal to
    :py:meth:`Features.ShipDesign.ShipPreparationInfo.BlendRadius`` will be removed from plate systems. 
    Only used when Type is 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveBlends`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveBlends`` 
    
    :param removeBlends: 
    :type removeBlends: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    RemoveOpenings: bool = ...
    """
    Returns or sets  the option to remove openings.  
    
    If true, openings that fit inside a circle with diameter 
    :py:meth:`Features.ShipDesign.ShipPreparationInfo.HoleDiameter`` will be removed from plate systems.
    Only used when Type is 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.PlateDivide <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveOpenings`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveOpenings`` 
    
    :param removeOpenings: 
    :type removeOpenings: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    SourcePart: NXOpen.Assemblies.Component = ...
    """
    Returns  the source part file of the linked data.  
    
    Only valid when Type is 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBody <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBodyBracket <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`,
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedCurves <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`, or
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedFaces <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SourcePart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.Component` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Target: ShipPreparationInfo = ...
    """
    Returns or sets  the target FeatureInfo for the divide operation.  
    
    Valid for all Types except 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBody <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Target`` 
    
    :param target: 
    :type target: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    TargetBody: NXOpen.Body = ...
    """
    Returns or sets  the target body for the divide operation.  
    
    Can be None. Valid for all Types except 
    :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedBody <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>`. 
    This will typically only be set after the basic design data has been linked.
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetBody`` 
    
    :param targetBody: 
    :type targetBody: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ToBeDeleted: bool = ...
    """
    Returns or sets  the indication if this preparation data should be deleted or not.  
    
    If you want to remove this data
    from ship preparation consideration, set this option to true. Do not remove the data from processing 
    since clean up of unwanted data will not occur. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToBeDeleted`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToBeDeleted`` 
    
    :param toBeDeleted: 
    :type toBeDeleted: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Type: ShipPreparationInfoTypes = ...
    """
    Returns or sets  the type of Ship Preparation feature.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """


class Hull(NXOpen.Features.BodyFeature):
    """
    Represents a Hull feature.  
    
    The Hull feature is used to classify the surface shape that represents
    the hull of the ship. The ability to trim this surface shape is provided. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.HullBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: Hull = ...  # unknown typename


class ShipNamesListBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class provides a list of :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder`objects.  
    
    A ShipNamesBuilder provides the data necessary to generate names for new
    Ship objects, such as Decks, Bulkheads, etc. So the ShipNamesListBuilder
    is a means for defining and modifying ShipNamesBuilders for multiple types
    of Ship objects. For example, in copying or mirroring Ship content, it
    is necessary to have a ShipNamesBuilder for each type of Ship object
    being copied / mirrored.
    
    This is an abtract class. It cannot be instantiated.
    
    .. versionadded:: NX9.0.2
    """
    
    def SetObjectTypes(self, objects: 'list[NXOpen.NXObject]') -> 'list[ShipNamesBuilder]':
        """
        Sets the current list of  :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` objects
        to the types determined by the types of the supplied objects.  
        
        For example, if within objects,
        there is a Deck and 2 Tranverse Bulkheads, then the list of
        :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` builders will have Deck and
        Tranverse Bulkhead builders added (if they are not there already).
        
        Returned will be the number and pointers to any new builders added.
        
        Signature ``SetObjectTypes(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ResetNameList(self) -> None:
        """
        Sets the current list of  :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` objects to be empty.  
        
        Returned will be error code.
        
        Signature ``ResetNameList()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ShipNamesList: ShipNamesBuilderList = ...
    """
    Returns  the list of ShipNamesBuilder objects 
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNamesList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilderList` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    Null: ShipNamesListBuilder = ...  # unknown typename


class PlateSystemBuilderStiffenerDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateSystemBuilderStiffenerDirectionType():
    """
    Settings used to indicate the default primary and secondary stiffener direction. The primary
    direction is used to determine which side of the plate system the stiffener is placed upon. The
    secondary direction is used to determine which direction the flange is pointing. The actual direction
    depends on the plate system and the general stiffener direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FwdPortToInUp", "Direction is Forward, Port, To Reference, Inside or Up."
       "AftStbdFrOutDn", "Direction is Aft, Starboard, From Reference, Outside or Down."
       "FwdPortToInCtr", "Direction is Forward, Port, To Reference, Inside or Centered."
       "AftStbdFrOutCtr", "Direction is Aft, Starboard, From Reference, Outside or Centered."
    """
    FwdPortToInUp = 0  # PlateSystemBuilderStiffenerDirectionTypeMemberType
    AftStbdFrOutDn = 1  # PlateSystemBuilderStiffenerDirectionTypeMemberType
    FwdPortToInCtr = 2  # PlateSystemBuilderStiffenerDirectionTypeMemberType
    AftStbdFrOutCtr = 3  # PlateSystemBuilderStiffenerDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateSystemBuilder(FeatureParmsBuilder):
    """
    This class is used to create or edit the information shared between all the Basic Design plate system
    features in the Ship Design application.  
    
    Currently this includes the following features:
    :py:class:`NXOpen.Features.ShipDesign.Deck`,
    :py:class:`NXOpen.Features.ShipDesign.Hull`,
    :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystem`,
    :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkhead`, and
    :py:class:`NXOpen.Features.ShipDesign.TransverseBulkhead`.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreatePlateSystemBuilder`
    
    Default values.
    
    =================================================  =========================================
    Property                                           Value
    =================================================  =========================================
    Offset.Value                                       0 (millimeters part), 0 (inches part) 
    -------------------------------------------------  -----------------------------------------
    Primary                                            FwdPortToInUp 
    -------------------------------------------------  -----------------------------------------
    PrimaryOnReference                                 FwdPortToInUp 
    -------------------------------------------------  -----------------------------------------
    Secondary1                                         FwdPortToInUp 
    -------------------------------------------------  -----------------------------------------
    Secondary1OnReference                              FwdPortToInUp 
    -------------------------------------------------  -----------------------------------------
    Secondary2                                         FwdPortToInUp 
    -------------------------------------------------  -----------------------------------------
    Secondary2OnReference                              FwdPortToInUp 
    -------------------------------------------------  -----------------------------------------
    Stock.KnuckleRatio                                 3.0 
    -------------------------------------------------  -----------------------------------------
    Stock.KnuckleSmoothAngle                           3.0 
    -------------------------------------------------  -----------------------------------------
    Stock.MaterialOption                               0 
    -------------------------------------------------  -----------------------------------------
    Stock.OppositeThickness.Value                      0 (millimeters part), 0 (inches part) 
    -------------------------------------------------  -----------------------------------------
    Stock.RestrictThicknessToMaterial                  true 
    -------------------------------------------------  -----------------------------------------
    Stock.ThickenOption                                SingleSided 
    -------------------------------------------------  -----------------------------------------
    Stock.Thickness.Value                              10 (millimeters part), 0.5 (inches part) 
    -------------------------------------------------  -----------------------------------------
    Stock.ThicknessSourceOption                        List 
    -------------------------------------------------  -----------------------------------------
    ThicknessDirection.ThicknessDirection              FwdPortInUp 
    -------------------------------------------------  -----------------------------------------
    ThicknessDirection.ThicknessDirectionOnReference   FwdPortInUp 
    =================================================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class StiffenerDirectionType():
        """
        Settings used to indicate the default primary and secondary stiffener direction. The primary
        direction is used to determine which side of the plate system the stiffener is placed upon. The
        secondary direction is used to determine which direction the flange is pointing. The actual direction
        depends on the plate system and the general stiffener direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FwdPortToInUp", "Direction is Forward, Port, To Reference, Inside or Up."
           "AftStbdFrOutDn", "Direction is Aft, Starboard, From Reference, Outside or Down."
           "FwdPortToInCtr", "Direction is Forward, Port, To Reference, Inside or Centered."
           "AftStbdFrOutCtr", "Direction is Aft, Starboard, From Reference, Outside or Centered."
        """
        FwdPortToInUp = 0  # PlateSystemBuilderStiffenerDirectionTypeMemberType
        AftStbdFrOutDn = 1  # PlateSystemBuilderStiffenerDirectionTypeMemberType
        FwdPortToInCtr = 2  # PlateSystemBuilderStiffenerDirectionTypeMemberType
        AftStbdFrOutCtr = 3  # PlateSystemBuilderStiffenerDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetRegionPoints(self, regionPoints: 'list[NXOpen.Point3d]') -> None:
        """
        Set the points derived from the regions of the sheet, that has the inscribed boundaries, to keep for the final 
        plate system shape.  
        
        Signature ``SetRegionPoints(regionPoints)`` 
        
        :param regionPoints:  Points representing the kept regions.  
        :type regionPoints: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CreateRegionBody(self) -> NXOpen.Body:
        """
        Create the region body that has the inscribed boundaries.  
        
        The region body is used to select the regions that are kept for the final
        plate system shape.
        Any region body created should be deleted by using the method :py:meth:`NXOpen.Features.ShipDesign.PlateSystemBuilder.DeleteRegionBody`.
        If a region body is created when there is already a current region body, that current region body will be deleted.
        When the builder is committed, the region point coordinates from method
        :py:meth:`NXOpen.Features.ShipDesign.PlateSystemBuilder.SetRegionPoints` will be used to identify the regions desired.  
        
        Signature ``CreateRegionBody()`` 
        
        :returns:  Body associated with the select region point.  
        :rtype: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def DeleteRegionBody(self) -> None:
        """
        Delete the current region body.  
        
        Signature ``DeleteRegionBody()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetKnuckleEdges(self, knuckleEdges: 'list[NXOpen.TaggedObject]') -> None:
        """
        Sets the knuckle edges, which includes edges for both bend and split types.  
        
        Signature ``SetKnuckleEdges(knuckleEdges)`` 
        
        :param knuckleEdges:  G0 edges or camber curves with special attribute 
        :type knuckleEdges: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetSplitEdgeUpdateFlag(self, isSplitEdgeUpdate: bool) -> None:
        """
        Sets the flag to indicate that split knuckle edges are out of date and need to update.  
        
        Signature ``SetSplitEdgeUpdateFlag(isSplitEdgeUpdate)`` 
        
        :param isSplitEdgeUpdate: 
        :type isSplitEdgeUpdate: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CleanUpTemporaryCurves(self) -> None:
        """
        Cleans up the temp curves.  
        
        Signature ``CleanUpTemporaryCurves()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetRegionIndex(self, indexArray: 'list[int]') -> None:
        """
        Sets the region index.  
        
        Signature ``SetRegionIndex(indexArray)`` 
        
        :param indexArray: 
        :type indexArray: list of int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def DeletePreviewBody(self, bDelete: bool) -> None:
        """
        Deletes the preview body.  
        
        Signature ``DeletePreviewBody(bDelete)`` 
        
        :param bDelete: 
        :type bDelete: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetPreviewOption(self, bPreview: bool) -> None:
        """
        Sets the preview option.  
        
        Signature ``SetPreviewOption(bPreview)`` 
        
        :param bPreview: 
        :type bPreview: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    BoundaryPlane: NXOpen.Plane = ...
    """
    Returns or sets  the plane defined to indicate the boundary of the plate system.  
    
    The
    defined plane is intersected with the specified mold face to define regions. The regions desired to form the
    plate system can then be selected. 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryPlane`` 
    
    :param boundaryPlane: 
    :type boundaryPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    BoundarySection: NXOpen.Section = ...
    """
    Returns  the section containing curves that define the boundary of the plate system.  
    
    The curves will 
    be projected onto the mold face to define regions. The regions desired to form the
    plate system can then be selected. 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundarySection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BoundarySheets: NXOpen.SelectNXObjectList = ...
    """
    Returns  the sheet bodies or datum planes selected, or a face collector used to define the boundary of the plate system.  
    
    The
    selected objects are intersected with the specified mold face to define regions. The regions desired to form the
    plate system can then be selected. 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundarySheets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset to apply to the selected mold face to produce the desired mold face.  
    
    The offset is applied 
    in the thickness direction specified. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Primary: PlateSystemBuilderStiffenerDirectionType = ...
    """
    Returns or sets  the primary stiffener direction.  
    
    This indicates which side of the plate system the 
    stiffener should be placed upon. 
    
    <hr>
    
    Getter Method
    
    Signature ``Primary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Primary`` 
    
    :param primary: 
    :type primary: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    PrimaryOnReference: PlateSystemBuilderStiffenerDirectionType = ...
    """
    Returns or sets  the primary stiffener direction when the plate system is located on a midship reference.  
    
    This indicates which side of the plate system the 
    stiffener should be placed upon. 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryOnReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryOnReference`` 
    
    :param primaryOnReference: 
    :type primaryOnReference: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ProjectionDirection: NXOpen.GeometricUtilities.ProjectionOptions = ...
    """
    Returns  the direction used to project
    the boundary section curves onto the mold face.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectionDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ProjectionOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Regions: NXOpen.RegionPointList = ...
    """
    Returns  the regions selected from the sheet, that has the inscribed boundaries, to keep for the final 
    plate system shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``Regions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.RegionPointList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Secondary1: PlateSystemBuilderStiffenerDirectionType = ...
    """
    Returns or sets  the direction of the stiffener flange.  
    
    The usage and settings depends on the type of 
    plate system the stiffener is being placed upon, and the general direction of the 
    stiffener itself. When the stiffener has the possibility of two general directions, 
    then the value of Secondary2 may also be utilized. 
    
    <hr>
    
    Getter Method
    
    Signature ``Secondary1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Secondary1`` 
    
    :param secondary1: 
    :type secondary1: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Secondary1OnReference: PlateSystemBuilderStiffenerDirectionType = ...
    """
    Returns or sets  the direction of the stiffener flange when the stiffener is located on a midship reference.  
    
    The usage and settings depends on the type of 
    plate system the stiffener is being placed upon, and the general direction of the 
    stiffener itself. When the stiffener has the possibility of two general directions, 
    then the value of Secondary2 may also be utilized. 
    
    <hr>
    
    Getter Method
    
    Signature ``Secondary1OnReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Secondary1OnReference`` 
    
    :param secondary1OnReference: 
    :type secondary1OnReference: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Secondary2: PlateSystemBuilderStiffenerDirectionType = ...
    """
    Returns or sets  the direction of the stiffener flange.  
    
    The usage and settings depends on the type of 
    plate system the stiffener is being placed upon, and the general direction of the 
    stiffener itself. When the stiffener has the possibility of two general directions, 
    then the value of Secondary1 may also be utilized. 
    
    <hr>
    
    Getter Method
    
    Signature ``Secondary2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Secondary2`` 
    
    :param secondary2: 
    :type secondary2: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Secondary2OnReference: PlateSystemBuilderStiffenerDirectionType = ...
    """
    Returns or sets  the direction of the stiffener flange when the stiffener is located on a midship reference.  
    
    The usage and settings depends on the type of 
    plate system the stiffener is being placed upon, and the general direction of the 
    stiffener itself. When the stiffener has the possibility of two general directions, 
    then the value of Secondary1 may also be utilized. 
    
    <hr>
    
    Getter Method
    
    Signature ``Secondary2OnReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Secondary2OnReference`` 
    
    :param secondary2OnReference: 
    :type secondary2OnReference: :py:class:`NXOpen.Features.ShipDesign.PlateSystemBuilderStiffenerDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the Plate Systems created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    SplitKnuckleEdges: NXOpen.SelectNXObjectList = ...
    """
    Returns  the split knuckle edges, which are used to create seam feature to split a plate system into plate subsystem.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitKnuckleEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Stock: PlateStockBuilder = ...
    """
    Returns  the plate stock builder, used to define the plate material, grade, 
    thickness, mass density, and thicken option.  
    
    <hr>
    
    Getter Method
    
    Signature ``Stock`` 
    
    :returns:  Plate Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThicknessDirection: ThicknessDirectionBuilder = ...
    """
    Returns  the thickness direction builder, used to specify the thickness direction from the mold face.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessDirection`` 
    
    :returns:  Thickness Direction Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ThicknessDirectionBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Tightness: int = ...
    """
    Returns or sets  the tightness desired for the plate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tightness`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tightness`` 
    
    :param tightness: 
    :type tightness: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Weld: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the welding characteristics builder, used to assign welding characteristics to the outermost edges of a plate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Weld`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PlateSystemBuilder = ...  # unknown typename


class TransverseBulkheadBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransverseBulkheadBuilderTypes():
    """
    Indicates the method that is being used to define the mold face of the transverse bulkhead. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetBody", "Mold face is being defined by a selected sheet body."
       "Planes", "Mold face is being defined by selected or defined planes."
    """
    SheetBody = 0  # TransverseBulkheadBuilderTypesMemberType
    Planes = 1  # TransverseBulkheadBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransverseBulkheadBuilder(PlateSystemBuilder):
    """
    This class is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.TransverseBulkhead` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateTransverseBulkheadBuilder`
    
    Default values.
    
    ======================  ======================================
    Property                Value
    ======================  ======================================
    Offset.Value            0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    Primary                 FwdPortToInUp 
    ----------------------  --------------------------------------
    PrimaryOnReference      FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1OnReference   FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2OnReference   FwdPortToInUp 
    ======================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Indicates the method that is being used to define the mold face of the transverse bulkhead. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetBody", "Mold face is being defined by a selected sheet body."
           "Planes", "Mold face is being defined by selected or defined planes."
        """
        SheetBody = 0  # TransverseBulkheadBuilderTypesMemberType
        Planes = 1  # TransverseBulkheadBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    MoldFacePlaneList: PlaneListBuilderList = ...
    """
    Returns  the list of planes defined to define the mold face.  
    
    Each plane defined will create a transverse bulkhead.
    Only used when type is :py:class:`Features.ShipDesign.TransverseBulkheadBuilderTypes.Planes <Features.ShipDesign.TransverseBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlaneList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFacePlanes: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the planes selected to define the mold face.  
    
    Each plane selected will create a transverse bulkhead. When editing 
    a transverse bulkhead, only a single plane can be selected.
    Only used when type is :py:class:`Features.ShipDesign.TransverseBulkheadBuilderTypes.Planes <Features.ShipDesign.TransverseBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlanes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFaceSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet body selected to define the mold face.  
    
    Only used when type is :py:class:`Features.ShipDesign.TransverseBulkheadBuilderTypes.SheetBody <Features.ShipDesign.TransverseBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaceSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: TransverseBulkheadBuilderTypes = ...
    """
    Returns or sets  the method used to define the mold face of the transverse bulkhead.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.TransverseBulkheadBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.TransverseBulkheadBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: TransverseBulkheadBuilder = ...  # unknown typename


class FeaturesBatchOperationBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeaturesBatchOperationBuilderTypes():
    """
    The option for which kind of operation will be performed.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Delete", " - "
       "Hide", " - "
       "Show", " - "
    """
    Delete = 0  # FeaturesBatchOperationBuilderTypesMemberType
    Hide = 1  # FeaturesBatchOperationBuilderTypesMemberType
    Show = 2  # FeaturesBatchOperationBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeaturesBatchOperationBuilder(NXOpen.Builder):
    """
    Use this to cycle through the assembly components and perform the operation globally on the specified feature type.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateFeaturesBatchOperationBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class Types():
        """
        The option for which kind of operation will be performed.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Delete", " - "
           "Hide", " - "
           "Show", " - "
        """
        Delete = 0  # FeaturesBatchOperationBuilderTypesMemberType
        Hide = 1  # FeaturesBatchOperationBuilderTypesMemberType
        Show = 2  # FeaturesBatchOperationBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ClearFeatureTypes(self) -> None:
        """
        Clear feature types 
        
        Signature ``ClearFeatureTypes()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def AddFeatureType(self, featureType: str) -> None:
        """
        Add feature type 
        
        Signature ``AddFeatureType(featureType)`` 
        
        :param featureType: 
        :type featureType: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    Type: FeaturesBatchOperationBuilderTypes = ...
    """
    Returns or sets  the operation type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.FeaturesBatchOperationBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.FeaturesBatchOperationBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: FeaturesBatchOperationBuilder = ...  # unknown typename


class SectionDrawingBuilderSectionsPerDrawingOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionDrawingBuilderSectionsPerDrawingOptions():
    """
    Settings to indicate the section per drawing.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Single", " - "
       "Multiple", " - "
    """
    Single = 0  # SectionDrawingBuilderSectionsPerDrawingOptionsMemberType
    Multiple = 1  # SectionDrawingBuilderSectionsPerDrawingOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionDrawingBuilderViewsPerSheetOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionDrawingBuilderViewsPerSheetOptions():
    """
    Settings to indicate the views per sheet.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", " - "
       "Two", " - "
       "Three", " - "
       "Four", " - "
       "Five", " - "
       "Six", " - "
    """
    One = 0  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
    Two = 1  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
    Three = 2  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
    Four = 3  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
    Five = 4  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
    Six = 5  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionDrawingBuilderViewTypeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionDrawingBuilderViewTypeOptions():
    """
    Settings to indicate the view type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BasicDesign", "the view is created on basic design"
       "DetailDesign", "the view is created on detail design"
    """
    BasicDesign = 0  # SectionDrawingBuilderViewTypeOptionsMemberType
    DetailDesign = 1  # SectionDrawingBuilderViewTypeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionDrawingBuilder(NXOpen.Builder):
    """
    This builder allows you to define the section drawing information.  
    
    It represents :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilder`.
    This builder creates one or more Ship Section View and just returns None. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSectionDrawingBuilder`
    
    Default values.
    
    ===================  =============
    Property             Value
    ===================  =============
    SectionsPerDrawing   Multiple 
    -------------------  -------------
    ViewType             DetailDesign 
    -------------------  -------------
    ViewsPerSheet        One 
    ===================  =============
    
    .. versionadded:: NX10.0.0
    """
    
    class SectionsPerDrawingOptions():
        """
        Settings to indicate the section per drawing.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Single", " - "
           "Multiple", " - "
        """
        Single = 0  # SectionDrawingBuilderSectionsPerDrawingOptionsMemberType
        Multiple = 1  # SectionDrawingBuilderSectionsPerDrawingOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewsPerSheetOptions():
        """
        Settings to indicate the views per sheet.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "One", " - "
           "Two", " - "
           "Three", " - "
           "Four", " - "
           "Five", " - "
           "Six", " - "
        """
        One = 0  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
        Two = 1  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
        Three = 2  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
        Four = 3  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
        Five = 4  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
        Six = 5  # SectionDrawingBuilderViewsPerSheetOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewTypeOptions():
        """
        Settings to indicate the view type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BasicDesign", "the view is created on basic design"
           "DetailDesign", "the view is created on detail design"
        """
        BasicDesign = 0  # SectionDrawingBuilderViewTypeOptionsMemberType
        DetailDesign = 1  # SectionDrawingBuilderViewTypeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateSectionViewBuilder(self) -> SectionViewBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder`  
        
        Signature ``CreateSectionViewBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    @typing.overload
    def FindFocusPlates(self, frame: NXOpen.NXObject, offset: float, frontProximity: float, backProximity: float) -> 'list[NXOpen.NXObject]':
        """
        Returns a list of focus plates at the given position, this function just used when the
        frontProximity and backProximity has the same value. Otherwise it just use the big value for
        both frontProximity and backProximity
        
        Signature ``FindFocusPlates(frame, offset, frontProximity, backProximity)`` 
        
        :param frame:  the frame or plane  
        :type frame: :py:class:`NXOpen.NXObject` 
        :param offset:  the offset of view position to the plane 
        :type offset: float 
        :param frontProximity:  the proximity in front of the view 
        :type frontProximity: float 
        :param backProximity:  the proximity at the back of the view 
        :type backProximity: float 
        :returns:  the found focus plates 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    @typing.overload
    def FindFocusPlates(self, frame: NXOpen.NXObject, direction: SectionViewBuilderDirectionOptions, offset: float, frontProximity: float, backProximity: float) -> 'list[NXOpen.NXObject]':
        """
        Returns a list of focus plates at the given position, this function is used when user want use
        different frontProximity and backProximity.  
        
        Signature ``FindFocusPlates(frame, direction, offset, frontProximity, backProximity)`` 
        
        :param frame:  the frame  
        :type frame: :py:class:`NXOpen.NXObject` 
        :param direction:  the direction of the view 
        :type direction: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderDirectionOptions` 
        :param offset:  the offset of view position to the plane 
        :type offset: float 
        :param frontProximity:  the proximity in front of the view 
        :type frontProximity: float 
        :param backProximity:  the proximity at the back of the view 
        :type backProximity: float 
        :returns:  the found focus plates 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def CreateDrawingPartBuilder(self, drawingPart: NXOpen.Part) -> DrawingPartBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder`  
        
        Signature ``CreateDrawingPartBuilder(drawingPart)`` 
        
        :param drawingPart: 
        :type drawingPart: :py:class:`NXOpen.Part` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    DrawingPartList: DrawingPartBuilderList = ...
    """
    Returns  the list of drawing parts in current NX session 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingPartList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilderList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SectionsPerDrawing: SectionDrawingBuilderSectionsPerDrawingOptions = ...
    """
    Returns or sets  the sct per drawing 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionsPerDrawing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilderSectionsPerDrawingOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionsPerDrawing`` 
    
    :param sctPerDrawing: 
    :type sctPerDrawing: :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilderSectionsPerDrawingOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ViewList: SectionViewBuilderList = ...
    """
    Returns  the section view list 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilderList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ViewType: SectionDrawingBuilderViewTypeOptions = ...
    """
    Returns or sets  the view type 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilderViewTypeOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewType`` 
    
    :param viewType: 
    :type viewType: :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilderViewTypeOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ViewsPerSheet: SectionDrawingBuilderViewsPerSheetOptions = ...
    """
    Returns or sets  the views per sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewsPerSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilderViewsPerSheetOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewsPerSheet`` 
    
    :param sctPerDrawing: 
    :type sctPerDrawing: :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilderViewsPerSheetOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: SectionDrawingBuilder = ...  # unknown typename


class SubSystemBuilder(FeatureParmsBuilder):
    """
    This class is used to 
    edit the Sub System Definition of a :py:class:`NXOpen.Features.ShipDesign.SubSystems` feature.  
    
    No creator since only created along with Features.ShipDesign.SubSystemsBuilder
    
    Default values.
    
    ===========================================  =========================================
    Property                                     Value
    ===========================================  =========================================
    PlateStockData.KnuckleRatio                  3.0 
    -------------------------------------------  -----------------------------------------
    PlateStockData.KnuckleSmoothAngle            3.0 
    -------------------------------------------  -----------------------------------------
    PlateStockData.MaterialOption                0 
    -------------------------------------------  -----------------------------------------
    PlateStockData.OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    -------------------------------------------  -----------------------------------------
    PlateStockData.RestrictThicknessToMaterial   true 
    -------------------------------------------  -----------------------------------------
    PlateStockData.ThickenOption                 SingleSided 
    -------------------------------------------  -----------------------------------------
    PlateStockData.Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    -------------------------------------------  -----------------------------------------
    PlateStockData.ThicknessSourceOption         List 
    -------------------------------------------  -----------------------------------------
    ProfileStockData.AnchorPoint                 0 
    -------------------------------------------  -----------------------------------------
    ProfileStockData.PlateHeight.Value           50 (millimeters part), 2 (inches part) 
    -------------------------------------------  -----------------------------------------
    ProfileStockData.SectionType                 Profile 
    ===========================================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    EndCutEnd: StiffenerSystemBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the end of the stiffener sub system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutEnd`` 
    
    :param endCutEnd: 
    :type endCutEnd: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    EndCutStart: StiffenerSystemBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the start of the stiffener sub system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutStart`` 
    
    :param endCutStart: 
    :type endCutStart: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MountingMethod: StiffenerSystemBuilderMountingMethods = ...
    """
    Returns or sets  the mounting method 
    
    <hr>
    
    Getter Method
    
    Signature ``MountingMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMountingMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MountingMethod`` 
    
    :param mountingMethod: 
    :type mountingMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMountingMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Name: str = ...
    """
    Returns or sets 
    the name of the Subsystem and the name of the part created for the SubSystem by Transition
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset to apply to the plate sub system  mold face to produce the desired mold face.  
    
    The offset is applied 
    in the thickness direction specified. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationAngle: NXOpen.Expression = ...
    """
    Returns  the angle at which the stiffener system is placed relative to the reference.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationLinePillar: NXOpen.SelectCurve = ...
    """
    Returns  the line specified for the pillar system angle reference.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationLinePillar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    OrientationMethod: StiffenerSystemBuilderOrientationMethods = ...
    """
    Returns or sets  the method used to define the reference for the orientation angle of stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationMethod`` 
    
    :param orientationMethod: 
    :type orientationMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    OrientationVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector specified for the orientation angle reference.  
    
    Only used when when Method is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods.Vector <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods>`.. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationVector`` 
    
    :param orientationVector: 
    :type orientationVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    PillarStockData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the pillar sub system stock data.  
    
    <hr>
    
    Getter Method
    
    Signature ``PillarStockData`` 
    
    :returns:  Pillar Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlateStockData: PlateStockBuilder = ...
    """
    Returns  the plate sub system stock data.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateStockData`` 
    
    :returns:  Plate Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ProfileStockData: StiffenerStockBuilder = ...
    """
    Returns  the profile sub system stock data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileStockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Reverse: bool = ...
    """
    Returns or sets  the indication whether the direction of the flange should be reversed on this stiffener sub system.  
    
    The default
    direction is based on the ship structure that the stiffener is being built upon. 
    
    <hr>
    
    Getter Method
    
    Signature ``Reverse`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reverse`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    SubSystem: NXOpen.SelectNXObjectList = ...
    """
    Returns  the faces or curves that make up the sub system.  
    
    <hr>
    
    Getter Method
    
    Signature ``SubSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Tightness: int = ...
    """
    Returns or sets  the tightness to apply to plate and subplate systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tightness`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tightness`` 
    
    :param tightness: 
    :type tightness: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: SubSystemBuilder = ...  # unknown typename


class DrawingTemplateBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a drawing template selection block   
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    TemplateName: str = ...
    """
    Returns or sets  the template 
    
    <hr>
    
    Getter Method
    
    Signature ``TemplateName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TemplateName`` 
    
    :param templateName: 
    :type templateName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: DrawingTemplateBuilder = ...  # unknown typename


class ShipStructureBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipStructureBuilder`.  
    
    This class is to collect the ship structure components, body or curve objects. 
    
    .. versionadded:: NX11.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AdditionalObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the additional objects list, just used in basic design.  
    
    It can be :py:class:`NXOpen.Assemblies.Component` for non ship structures; :py:class:`NXOpen.Curve` or :py:class:`NXOpen.Body` for ship structures
    
    <hr>
    
    Getter Method
    
    Signature ``AdditionalObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AdditionalStructures: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the additional structures list, just used in detail design.  
    
    It can be :py:class:`NXOpen.Assemblies.Component`.
    
    <hr>
    
    Getter Method
    
    Signature ``AdditionalStructures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    FocusPlates: NXOpen.SelectNXObjectList = ...
    """
    Returns  the focus plates list, just used in basic design.  
    
    It can be :py:class:`NXOpen.Face` or :py:class:`NXOpen.Body` of Plate body.
    
    <hr>
    
    Getter Method
    
    Signature ``FocusPlates`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    HiddenObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the hidden object list.  
    
    It can be :py:class:`NXOpen.Assemblies.Component` in detail design; 
    :py:class:`NXOpen.Curve` or :py:class:`NXOpen.Body` in basic design.
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: ShipStructureBuilder = ...  # unknown typename


class SteelInsulation(NXOpen.Features.BodyFeature):
    """
    Represents a steel insulation feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: SteelInsulation = ...  # unknown typename


class SubSystemsBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubSystemsBuilderTypes():
    """
    Used to indicate the type of sub system definition that is being edited. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plate", "Plate system, any system using plate stock."
       "Profile", "Profile system, any system using stiffener stock."
       "Pillar", "Pillar system, any system using spreadsheet defined stock."
    """
    Plate = 0  # SubSystemsBuilderTypesMemberType
    Profile = 1  # SubSystemsBuilderTypesMemberType
    Pillar = 2  # SubSystemsBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubSystemsBuilder(FeatureParmsBuilder):
    """
    This class is used to 
    edit a :py:class:`NXOpen.Features.ShipDesign.SubSystems` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSubSystemsBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Used to indicate the type of sub system definition that is being edited. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plate", "Plate system, any system using plate stock."
           "Profile", "Profile system, any system using stiffener stock."
           "Pillar", "Pillar system, any system using spreadsheet defined stock."
        """
        Plate = 0  # SubSystemsBuilderTypesMemberType
        Profile = 1  # SubSystemsBuilderTypesMemberType
        Pillar = 2  # SubSystemsBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Seams: NXOpen.SelectNXObjectList = ...
    """
    Returns  the seams that you want to actually split the plate system or profile system.  
    
    Straking seams will be ignored
    if added to this selection. 
    
    <hr>
    
    Getter Method
    
    Signature ``Seams`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SubPillarDefinitionList: SubSystemBuilderList = ...
    """
    Returns  the list of Sub Pillar System Definitions.  
    
    <hr>
    
    Getter Method
    
    Signature ``SubPillarDefinitionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SubPlateDefinitionList: SubSystemBuilderList = ...
    """
    Returns  the list of Sub Plate System Definitions.  
    
    <hr>
    
    Getter Method
    
    Signature ``SubPlateDefinitionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SubProfileDefinitionList: SubSystemBuilderList = ...
    """
    Returns  the list of Sub Profile System Definitions.  
    
    <hr>
    
    Getter Method
    
    Signature ``SubProfileDefinitionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SubSystemBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SubSystemsBuilder = ...  # unknown typename


class InsertSheetBodyBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.InsertSheetBody` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateInsertSheetBodyBuilder`
    
    .. versionadded:: NX5.0.0
    """
    FramePlane: NXOpen.SelectDatumPlane = ...
    """
    Returns  the frame plane 
    
    <hr>
    
    Getter Method
    
    Signature ``FramePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlane` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FrameSheet: NXOpen.SelectBody = ...
    """
    Returns  the frame sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``FrameSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: InsertSheetBodyBuilder = ...  # unknown typename


class PenetrationUtilsReferencetypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationUtilsReferencetype():
    """
    Represents the reference type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Penetrated", " - "
       "Penetrating", " - "
       "Reference", " - "
       "Subset", " - "
       "Implemented", " - "
    """
    Penetrated = 0  # PenetrationUtilsReferencetypeMemberType
    Penetrating = 1  # PenetrationUtilsReferencetypeMemberType
    Reference = 2  # PenetrationUtilsReferencetypeMemberType
    Subset = 3  # PenetrationUtilsReferencetypeMemberType
    Implemented = 4  # PenetrationUtilsReferencetypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationUtilsRequestStateMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationUtilsRequestState():
    """
    Representes the request state 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "New", " - "
       "Modified", " - "
       "NoChange", " - "
       "Deleted", " - "
       "PenetrationAttachOutOfDate", " - "
    """
    New = 0  # PenetrationUtilsRequestStateMemberType
    Modified = 1  # PenetrationUtilsRequestStateMemberType
    NoChange = 2  # PenetrationUtilsRequestStateMemberType
    Deleted = 3  # PenetrationUtilsRequestStateMemberType
    PenetrationAttachOutOfDate = 4  # PenetrationUtilsRequestStateMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationUtils():
    """
    Contains various penetration utility methods   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Features.ShipDesign.PenetrationManager`
    
    .. versionadded:: NX8.0.0
    """
    
    class Referencetype():
        """
        Represents the reference type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Penetrated", " - "
           "Penetrating", " - "
           "Reference", " - "
           "Subset", " - "
           "Implemented", " - "
        """
        Penetrated = 0  # PenetrationUtilsReferencetypeMemberType
        Penetrating = 1  # PenetrationUtilsReferencetypeMemberType
        Reference = 2  # PenetrationUtilsReferencetypeMemberType
        Subset = 3  # PenetrationUtilsReferencetypeMemberType
        Implemented = 4  # PenetrationUtilsReferencetypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RequestState():
        """
        Representes the request state 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "New", " - "
           "Modified", " - "
           "NoChange", " - "
           "Deleted", " - "
           "PenetrationAttachOutOfDate", " - "
        """
        New = 0  # PenetrationUtilsRequestStateMemberType
        Modified = 1  # PenetrationUtilsRequestStateMemberType
        NoChange = 2  # PenetrationUtilsRequestStateMemberType
        Deleted = 3  # PenetrationUtilsRequestStateMemberType
        PenetrationAttachOutOfDate = 4  # PenetrationUtilsRequestStateMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreatePenetrationSite(self, part: NXOpen.Part) -> PenetrationSite:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationSite`  
        
        Signature ``CreatePenetrationSite(part)`` 
        
        :param part: 
        :type part: :py:class:`NXOpen.Part` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationSite` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def CreatePenetrationList(self, site: PenetrationSite) -> PenetrationList:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationList`  
        
        Signature ``CreatePenetrationList(site)`` 
        
        :param site: 
        :type site: :py:class:`NXOpen.Features.ShipDesign.PenetrationSite` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def CreatePenetrationFolder(self, parent: PenetrationFolder) -> PenetrationFolder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder`  
        
        Signature ``CreatePenetrationFolder(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def CreatePenetrationAttachment(self, site: PenetrationSite) -> PenetrationAttachment:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationAttachment`  
        
        Signature ``CreatePenetrationAttachment(site)`` 
        
        :param site: 
        :type site: :py:class:`NXOpen.Features.ShipDesign.PenetrationSite` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationAttachment` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskCurrentSite(self) -> PenetrationSite:
        """
        Ask current :py:class:`NXOpen.Features.ShipDesign.PenetrationSite`  
        
        Signature ``AskCurrentSite()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationSite` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetCurrentSite(self, site: PenetrationSite) -> None:
        """
        Set current :py:class:`NXOpen.Features.ShipDesign.PenetrationSite` 
        
        Signature ``SetCurrentSite(site)`` 
        
        :param site: 
        :type site: :py:class:`NXOpen.Features.ShipDesign.PenetrationSite` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskWorkingList(self) -> PenetrationList:
        """
        Ask current :py:class:`NXOpen.Features.ShipDesign.PenetrationList`  
        
        Signature ``AskWorkingList()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetWorkingList(self, site: PenetrationSite, list: PenetrationList) -> None:
        """
        Set current :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        Signature ``SetWorkingList(site, list)`` 
        
        :param site: 
        :type site: :py:class:`NXOpen.Features.ShipDesign.PenetrationSite` 
        :param list: 
        :type list: :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskRequestLists(self) -> 'list[PenetrationList]':
        """
        Ask current :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        Signature ``AskRequestLists()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def ReloadRequests(self, list: PenetrationList) -> None:
        """
        Set current :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        Signature ``ReloadRequests(list)`` 
        
        :param list: 
        :type list: :py:class:`NXOpen.Features.ShipDesign.PenetrationList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskReferenceFolder(self, request: PenetrationRequest, refType: PenetrationUtilsReferencetype) -> PenetrationFolder:
        """
        Get the reference folder :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder`  
        
        Signature ``AskReferenceFolder(request, refType)`` 
        
        :param request: 
        :type request: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :param refType: 
        :type refType: :py:class:`NXOpen.Features.ShipDesign.PenetrationUtilsReferencetype` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskAttachments(self, folder: PenetrationFolder, relation: str) -> 'list[PenetrationAttachment]':
        """
        Get the attachments in folder 
        
        Signature ``AskAttachments(folder, relation)`` 
        
        :param folder: 
        :type folder: :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder` 
        :param relation: 
        :type relation: str 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationAttachment` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def InsertAttachment(self, folder: PenetrationFolder, part: NXOpen.Part, name: str, relation: str) -> None:
        """
        Insert an attachment into folder 
        
        Signature ``InsertAttachment(folder, part, name, relation)`` 
        
        :param folder: 
        :type folder: :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder` 
        :param part: 
        :type part: :py:class:`NXOpen.Part` 
        :param name: 
        :type name: str 
        :param relation: 
        :type relation: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def RemoveAttachment(self, folder: PenetrationFolder, attachments: PenetrationAttachment) -> None:
        """
        Remove an attachment from folder 
        
        Signature ``RemoveAttachment(folder, attachments)`` 
        
        :param folder: 
        :type folder: :py:class:`NXOpen.Features.ShipDesign.PenetrationFolder` 
        :param attachments: 
        :type attachments: :py:class:`NXOpen.Features.ShipDesign.PenetrationAttachment` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AssociateRequests(self, requests: 'list[PenetrationRequest]') -> None:
        """
        Ask the associate requests 
        
        Signature ``AssociateRequests(requests)`` 
        
        :param requests: 
        :type requests: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskAssociateRequests(self, request: PenetrationRequest) -> 'list[PenetrationRequest]':
        """
        Ask the associate requests 
        
        Signature ``AskAssociateRequests(request)`` 
        
        :param request: 
        :type request: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def VerifyPenetrations(self, routingPart: 'list[NXOpen.Part]') -> tuple:
        """
        Verify penetrations 
        
        Signature ``VerifyPenetrations(routingPart)`` 
        
        :param routingPart: 
        :type routingPart: list of :py:class:`NXOpen.Part` 
        :returns: a tuple 
        :rtype: A tuple consisting of (states, requests, reason). states is a list of :py:class:`NXOpen.Features.ShipDesign.PenetrationUtilsRequestState`. requests is a list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest`. reason is a list of int. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskRequestsOfPenetratedPart(self, part: NXOpen.Part) -> 'list[PenetrationRequest]':
        """
        Ask requests of penetrated parts 
        
        Signature ``AskRequestsOfPenetratedPart(part)`` 
        
        :param part: 
        :type part: :py:class:`NXOpen.Part` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AskRequestsOfPenetratingPart(self, part: NXOpen.Part) -> 'list[PenetrationRequest]':
        """
        Ask requests of penetratint parts 
        
        Signature ``AskRequestsOfPenetratingPart(part)`` 
        
        :param part: 
        :type part: :py:class:`NXOpen.Part` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetRootPart(self, part: NXOpen.Part) -> None:
        """
        Make part root part and work part 
        
        Signature ``SetRootPart(part)`` 
        
        :param part: 
        :type part: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def GetAttachmentPartsFromRequest(self, request: PenetrationRequest, relation: str, loadParts: bool) -> 'list[NXOpen.Part]':
        """
        Get attachment part from request 
        
        Signature ``GetAttachmentPartsFromRequest(request, relation, loadParts)`` 
        
        :param request: 
        :type request: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :param relation: 
        :type relation: str 
        :param loadParts: 
        :type loadParts: bool 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SaveRequests(self, eSaveRequestType: int, requests: 'list[PenetrationRequest]') -> None:
        """
        Save the requests 
        
        Signature ``SaveRequests(eSaveRequestType, requests)`` 
        
        :param eSaveRequestType: 
        :type eSaveRequestType: int 
        :param requests: 
        :type requests: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SendToWorkflowRequests(self, requests: 'list[PenetrationRequest]') -> None:
        """
        Send to Workflow the requests 
        
        Signature ``SendToWorkflowRequests(requests)`` 
        
        :param requests: 
        :type requests: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def ReviewRequests(self, requests: 'list[PenetrationRequest]', pchReviewDecision: str, pchReviewComments: str, pchDueDate: str) -> None:
        """
        Review the requests 
        
        Signature ``ReviewRequests(requests, pchReviewDecision, pchReviewComments, pchDueDate)`` 
        
        :param requests: 
        :type requests: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :param pchReviewDecision: 
        :type pchReviewDecision: str 
        :param pchReviewComments: 
        :type pchReviewComments: str 
        :param pchDueDate: 
        :type pchDueDate: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def RequestCreateCutout(self, request: PenetrationRequest) -> None:
        """
        Create cut out for the request 
        
        Signature ``RequestCreateCutout(request)`` 
        
        :param request: 
        :type request: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetContextValues(self, rootPart: NXOpen.Part, workPart: NXOpen.Part, workView: NXOpen.View, workOcc: NXOpen.NXObject) -> None:
        """
        Set the CONTEXT values
        
        Signature ``SetContextValues(rootPart, workPart, workView, workOcc)`` 
        
        :param rootPart: 
        :type rootPart: :py:class:`NXOpen.Part` 
        :param workPart: 
        :type workPart: :py:class:`NXOpen.Part` 
        :param workView: 
        :type workView: :py:class:`NXOpen.View` 
        :param workOcc: 
        :type workOcc: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    


class PenetrationRequestRequestTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationRequestRequestType():
    """
    Represents the request type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Single", " - "
       "Multiple", " - "
    """
    Single = 0  # PenetrationRequestRequestTypeMemberType
    Multiple = 1  # PenetrationRequestRequestTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationRequestPenetrationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationRequestPenetrationType():
    """
    Represents the penetration type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PenetratingObject", " - "
       "PenetratingPoint", " - "
    """
    PenetratingObject = 0  # PenetrationRequestPenetrationTypeMemberType
    PenetratingPoint = 1  # PenetrationRequestPenetrationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationRequestCoutoutTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationRequestCoutoutType():
    """
    Represents the Coutout type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", " - "
       "Rectangular", " - "
       "FlatOval", " - "
       "UserDefined", " - "
       "ExistingSketch", " - "
       "NewSketch", " - "
       "NotSet", " - "
    """
    Circular = 0  # PenetrationRequestCoutoutTypeMemberType
    Rectangular = 1  # PenetrationRequestCoutoutTypeMemberType
    FlatOval = 2  # PenetrationRequestCoutoutTypeMemberType
    UserDefined = 3  # PenetrationRequestCoutoutTypeMemberType
    ExistingSketch = 4  # PenetrationRequestCoutoutTypeMemberType
    NewSketch = 5  # PenetrationRequestCoutoutTypeMemberType
    NotSet = 6  # PenetrationRequestCoutoutTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationRequestDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationRequestDirectionType():
    """
    Represents the Direction type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PerpendiculartoStructure", " - "
       "ParalleltoRoute", " - "
       "UserDefined", " - "
    """
    PerpendiculartoStructure = 0  # PenetrationRequestDirectionTypeMemberType
    ParalleltoRoute = 1  # PenetrationRequestDirectionTypeMemberType
    UserDefined = 2  # PenetrationRequestDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationRequestCompensationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationRequestCompensationType():
    """
    Represents the Compensation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotRequired", " - "
       "Standard", " - "
       "NonStandard", " - "
       "Sleeve", " - "
       "DoubleSleeve", " - "
       "Flange", " - "
    """
    NotRequired = 0  # PenetrationRequestCompensationTypeMemberType
    Standard = 1  # PenetrationRequestCompensationTypeMemberType
    NonStandard = 2  # PenetrationRequestCompensationTypeMemberType
    Sleeve = 3  # PenetrationRequestCompensationTypeMemberType
    DoubleSleeve = 4  # PenetrationRequestCompensationTypeMemberType
    Flange = 5  # PenetrationRequestCompensationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationRequest(NXOpen.Issue.IssueContent):
    """
    Represents the Penetration Request object.  
    
    Not support KF.
    
    .. versionadded:: NX8.0.0
    """
    
    class RequestType():
        """
        Represents the request type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Single", " - "
           "Multiple", " - "
        """
        Single = 0  # PenetrationRequestRequestTypeMemberType
        Multiple = 1  # PenetrationRequestRequestTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PenetrationType():
        """
        Represents the penetration type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PenetratingObject", " - "
           "PenetratingPoint", " - "
        """
        PenetratingObject = 0  # PenetrationRequestPenetrationTypeMemberType
        PenetratingPoint = 1  # PenetrationRequestPenetrationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CoutoutType():
        """
        Represents the Coutout type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", " - "
           "Rectangular", " - "
           "FlatOval", " - "
           "UserDefined", " - "
           "ExistingSketch", " - "
           "NewSketch", " - "
           "NotSet", " - "
        """
        Circular = 0  # PenetrationRequestCoutoutTypeMemberType
        Rectangular = 1  # PenetrationRequestCoutoutTypeMemberType
        FlatOval = 2  # PenetrationRequestCoutoutTypeMemberType
        UserDefined = 3  # PenetrationRequestCoutoutTypeMemberType
        ExistingSketch = 4  # PenetrationRequestCoutoutTypeMemberType
        NewSketch = 5  # PenetrationRequestCoutoutTypeMemberType
        NotSet = 6  # PenetrationRequestCoutoutTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DirectionType():
        """
        Represents the Direction type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PerpendiculartoStructure", " - "
           "ParalleltoRoute", " - "
           "UserDefined", " - "
        """
        PerpendiculartoStructure = 0  # PenetrationRequestDirectionTypeMemberType
        ParalleltoRoute = 1  # PenetrationRequestDirectionTypeMemberType
        UserDefined = 2  # PenetrationRequestDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CompensationType():
        """
        Represents the Compensation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotRequired", " - "
           "Standard", " - "
           "NonStandard", " - "
           "Sleeve", " - "
           "DoubleSleeve", " - "
           "Flange", " - "
        """
        NotRequired = 0  # PenetrationRequestCompensationTypeMemberType
        Standard = 1  # PenetrationRequestCompensationTypeMemberType
        NonStandard = 2  # PenetrationRequestCompensationTypeMemberType
        Sleeve = 3  # PenetrationRequestCompensationTypeMemberType
        DoubleSleeve = 4  # PenetrationRequestCompensationTypeMemberType
        Flange = 5  # PenetrationRequestCompensationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Null: PenetrationRequest = ...  # unknown typename


class PlateBoundaryOptionBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[PlateBoundaryOptionBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: PlateBoundaryOptionBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: PlateBoundaryOptionBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> PlateBoundaryOptionBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PlateBoundaryOptionBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PlateBoundaryOptionBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[PlateBoundaryOptionBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[PlateBoundaryOptionBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: PlateBoundaryOptionBuilder, object2: PlateBoundaryOptionBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: PlateBoundaryOptionBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: PlateBoundaryOptionBuilderList = ...  # unknown typename


class SelectStructuresBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This builder allows you to select structures in :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilder`.  
    
    It represents :py:class:`NXOpen.Features.ShipDesign.SelectStructuresBuilder`.
    
    .. versionadded:: NX12.0.0
    """
    
    def GetFinalStructuresByRule(self) -> 'list[NXOpen.Assemblies.Component]':
        """
        Searches ship structures added to the view by the rule  
        
        Signature ``GetFinalStructuresByRule()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def AddStructuresByRule(self, structures: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Adds ship structures to the view 
        
        Signature ``AddStructuresByRule(structures)`` 
        
        :param structures: 
        :type structures: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def RemoveStructuresByRule(self, structures: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Removes ship structures from the view 
        
        Signature ``RemoveStructuresByRule(structures)`` 
        
        :param structures: 
        :type structures: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def ResetStructuresByRule(self) -> None:
        """
        Resets the structures to be added to the view by rule 
        
        Signature ``ResetStructuresByRule()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AdditionalStructures: NXOpen.SelectNXObjectList = ...
    """
    Returns  the additional structures selected by the user 
    
    <hr>
    
    Getter Method
    
    Signature ``AdditionalStructures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: SelectStructuresBuilder = ...  # unknown typename


class KnuckledProfilesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.KnuckledProfiles` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateKnuckledProfilesBuilder`
    
    .. versionadded:: NX5.0.3
    """
    TabNoteGroup: NXOpen.Features.TabNoteCfgBuilder = ...
    """
    Returns  the tab note group 
    
    <hr>
    
    Getter Method
    
    Signature ``TabNoteGroup`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.TabNoteCfgBuilder` 
    
    .. versionadded:: NX5.0.3
    
    License requirements: None.
    """
    Null: KnuckledProfilesBuilder = ...  # unknown typename


class ProfileTransitionBuilderFeatureModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileTransitionBuilderFeatureModeType():
    """
    Represents the feature mode option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Target", "Create transition on the target body."
       "SeparateWebAndFace", "Create in separate parts for web and face plate."
       "SeparateFace", "Create web trim on target body and face plate in a separate part."
    """
    Target = 0  # ProfileTransitionBuilderFeatureModeTypeMemberType
    SeparateWebAndFace = 1  # ProfileTransitionBuilderFeatureModeTypeMemberType
    SeparateFace = 2  # ProfileTransitionBuilderFeatureModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileTransitionBuilderMisalignedModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileTransitionBuilderMisalignedModeType():
    """
    Represents the misaligned profile mode. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotAllowed", "Ignore misaligned profiles."
       "ToBoundary", "Transition target directly to boundary end."
       "Bisect", "Extend/trim boundary end to bisector plane between target and boundary. Transition target to new boundary end."
    """
    NotAllowed = 0  # ProfileTransitionBuilderMisalignedModeTypeMemberType
    ToBoundary = 1  # ProfileTransitionBuilderMisalignedModeTypeMemberType
    Bisect = 2  # ProfileTransitionBuilderMisalignedModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileTransitionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Builder used to create or edit a :py:class:`NXOpen.Features.ShipDesign.ProfileTransition` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateProfileTransitionBuilder`
    
    Default values.
    
    ==================  ===============================================
    Property            Value
    ==================  ===============================================
    AngularTolerance    0.5 
    ------------------  -----------------------------------------------
    DistanceTolerance   0.0254 (millimeters part), 0.001 (inches part) 
    ------------------  -----------------------------------------------
    FeatureMode         Target 
    ------------------  -----------------------------------------------
    MisalignedMode      ToBoundary 
    ==================  ===============================================
    
    .. versionadded:: NX9.0.0
    """
    
    class FeatureModeType():
        """
        Represents the feature mode option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Target", "Create transition on the target body."
           "SeparateWebAndFace", "Create in separate parts for web and face plate."
           "SeparateFace", "Create web trim on target body and face plate in a separate part."
        """
        Target = 0  # ProfileTransitionBuilderFeatureModeTypeMemberType
        SeparateWebAndFace = 1  # ProfileTransitionBuilderFeatureModeTypeMemberType
        SeparateFace = 2  # ProfileTransitionBuilderFeatureModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MisalignedModeType():
        """
        Represents the misaligned profile mode. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotAllowed", "Ignore misaligned profiles."
           "ToBoundary", "Transition target directly to boundary end."
           "Bisect", "Extend/trim boundary end to bisector plane between target and boundary. Transition target to new boundary end."
        """
        NotAllowed = 0  # ProfileTransitionBuilderMisalignedModeTypeMemberType
        ToBoundary = 1  # ProfileTransitionBuilderMisalignedModeTypeMemberType
        Bisect = 2  # ProfileTransitionBuilderMisalignedModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance (degrees) 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Boundaries: NXOpen.ScCollector = ...
    """
    Returns  the collector containing the boundary bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``Boundaries`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance (part units) 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    FeatureMode: ProfileTransitionBuilderFeatureModeType = ...
    """
    Returns or sets  the feature mode used to create new Profile Transition features.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileTransitionBuilderFeatureModeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FeatureMode`` 
    
    :param featureMode: 
    :type featureMode: :py:class:`NXOpen.Features.ShipDesign.ProfileTransitionBuilderFeatureModeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    MisalignedMode: ProfileTransitionBuilderMisalignedModeType = ...
    """
    Returns or sets  the misaligned mode used to create new Profile Transition features.  
    
    <hr>
    
    Getter Method
    
    Signature ``MisalignedMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileTransitionBuilderMisalignedModeType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MisalignedMode`` 
    
    :param misalignedMode: 
    :type misalignedMode: :py:class:`NXOpen.Features.ShipDesign.ProfileTransitionBuilderMisalignedModeType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Spreadsheet: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the spreadsheet builder.  
    
    Users can specify the Profile Transition length in the spreadsheet. The spreadsheet
    is controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``Spreadsheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Targets: NXOpen.ScCollector = ...
    """
    Returns  the collector containing the target bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``Targets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ProfileTransitionBuilder = ...  # unknown typename


class DeckListItemBuilderDatumDirMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DeckListItemBuilderDatumDir():
    """
    Represents the thickening direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plus", " - "
       "Minus", " - "
       "Neutral", " - "
    """
    Plus = 0  # DeckListItemBuilderDatumDirMemberType
    Minus = 1  # DeckListItemBuilderDatumDirMemberType
    Neutral = 2  # DeckListItemBuilderDatumDirMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DeckListItemBuilder(NXOpen.NXObject):
    """
    Represents a DeckListItemBuilder.  
    
    The builder is used when creating/editing a :py:class:`NXOpen.Features.ShipDesign.Decks` feature. 
    
    .. versionadded:: NX5.0.0
    """
    
    class DatumDir():
        """
        Represents the thickening direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plus", " - "
           "Minus", " - "
           "Neutral", " - "
        """
        Plus = 0  # DeckListItemBuilderDatumDirMemberType
        Minus = 1  # DeckListItemBuilderDatumDirMemberType
        Neutral = 2  # DeckListItemBuilderDatumDirMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DeckCoord: NXOpen.Expression = ...
    """
    Returns  the expression containing the zCoord of Deck.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckCoord`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DeckName: str = ...
    """
    Returns or sets  the deck name.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeckName`` 
    
    :param deckName: 
    :type deckName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    NormalDir: DeckListItemBuilderDatumDir = ...
    """
    Returns or sets  the normal dir.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDir`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilderDatumDir` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDir`` 
    
    :param normalDir: 
    :type normalDir: :py:class:`NXOpen.Features.ShipDesign.DeckListItemBuilderDatumDir` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: DeckListItemBuilder = ...  # unknown typename


class RoomAttributeListBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    The builder to define room attributes   
    
    .. versionadded:: NX12.0.0
    """
    
    def InitFromObject(self, objectTag: NXOpen.TaggedObject) -> None:
        """
        Initializes the builder from an object.  
        
        Signature ``InitFromObject(objectTag)`` 
        
        :param objectTag:  Body or Component  
        :type objectTag: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def UpdateAttributes(self, attrNames: 'list[str]', attrValues: 'list[str]') -> None:
        """
        Updates all attributes with new name and values.  
        
        Signature ``UpdateAttributes(attrNames, attrValues)`` 
        
        :param attrNames: 
        :type attrNames: list of str 
        :param attrValues: 
        :type attrValues: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def SetAttribute(self, index: int, attrName: str, attrValue: str) -> None:
        """
        Sets the specific attribute name and value given the index in the list.  
        
        Signature ``SetAttribute(index, attrName, attrValue)`` 
        
        :param index: 
        :type index: int 
        :param attrName: 
        :type attrName: str 
        :param attrValue: 
        :type attrValue: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def SetRoomPurpose(self, roomPurpose: str) -> None:
        """
        Sets the room purpose. 
        
        If room purpose changes, this will try to reconstruct the attribute list because
        different attributes are pre-defined for different room purposes. 
        
        Signature ``SetRoomPurpose(roomPurpose)`` 
        
        :param roomPurpose: 
        :type roomPurpose: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: RoomAttributeListBuilder = ...  # unknown typename


class ManufacturingOutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ManufacturingOut` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateManufacturingOutBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Component: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the component to validate
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    ConfigFile: str = ...
    """
    Returns or sets  the XML confiuration file 
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConfigFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    MarkOnlySection: NXOpen.Section = ...
    """
    Returns  the mark only section 
    
    <hr>
    
    Getter Method
    
    Signature ``MarkOnlySection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    OutputFile: str = ...
    """
    Returns or sets  the output spreadsheet file 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: ManufacturingOutBuilder = ...  # unknown typename


class YFrameBuilder(TransFrameBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.YFrameBuilder` 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateYFrameBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: YFrameBuilder = ...  # unknown typename


class FilterBuilder(NXOpen.Builder):
    """
    A builder that allows the user to define common properties of ship objects and then
    add objects of similar properties to the select object list.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateFilterBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def GetAvailableProperties(self) -> 'list[str]':
        """
        Gets the names of the properties that can be chosen for filtering the selection.  
        
        Signature ``GetAvailableProperties()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPropertyStatus(self, property: str) -> bool:
        """
        Gets the current status true == on or selected, false == off or not selected of the input property.  
        
        Signature ``GetPropertyStatus(property)`` 
        
        :param property: 
        :type property: str 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPropertyStatus(self, property: str, onOrOff: bool) -> None:
        """
        GSts the current status true == on or selected, false == off or not selected of the input property.  
        
        Signature ``SetPropertyStatus(property, onOrOff)`` 
        
        :param property: 
        :type property: str 
        :param onOrOff: 
        :type onOrOff: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FreeAvailableProperties(self) -> 'list[str]':
        """
        Frees the memory allocated by :py:meth:`Features.ShipDesign.FilterBuilder.GetAvailableProperties` 
        
        Signature ``FreeAvailableProperties()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def IsObjectValid(self, object: NXOpen.NXObject) -> bool:
        """
        Tests if the object is valid given the current status of the properties.  
        
        Outputs true if the
        object passes the tests, false if it does not.  
        
        Signature ``IsObjectValid(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    CompareObject: NXOpen.TaggedObject = ...
    """
    Returns or sets  the object that is used to compare the property values with.  
    
    <hr>
    
    Getter Method
    
    Signature ``CompareObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompareObject`` 
    
    :param compareObject: 
    :type compareObject: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: FilterBuilder = ...  # unknown typename


class PlateChamferBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateChamferBuilderTypes():
    """
    The option for the type of associativity for chamfer.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OnEdge", "Create a chamfer on the edge"
       "ToPlate", "Create a chamfer on the common edges between plates"
    """
    OnEdge = 0  # PlateChamferBuilderTypesMemberType
    ToPlate = 1  # PlateChamferBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateChamferBuilderAngleMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateChamferBuilderAngleMethod():
    """
    The option to specify the method for defining angle or ratio.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angle", "Use the angle for the chamfer parameters"
       "Ratio", "Use the ratio for the chamfer parameters"
    """
    Angle = 0  # PlateChamferBuilderAngleMethodMemberType
    Ratio = 1  # PlateChamferBuilderAngleMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateChamferBuilderOffsetMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateChamferBuilderOffsetMethod():
    """
    The option to specify the method for chamfer offset method.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Depth", "Use depth parameter to define ramp"
       "RestDepth", "Use rest depth to define ramp"
       "ThinnerPlate", "Use the thickness of the thinner plate to define ramp depth"
    """
    Depth = 0  # PlateChamferBuilderOffsetMethodMemberType
    RestDepth = 1  # PlateChamferBuilderOffsetMethodMemberType
    ThinnerPlate = 2  # PlateChamferBuilderOffsetMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateChamferBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.PlateChamfer` builder.  
    
    It is used to create and edit a plate chamfer feature.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreatePlateChamferBuilder`
    
    Default values.
    
    =======================  =========================================
    Property                 Value
    =======================  =========================================
    AngleOption              Angle 
    -----------------------  -----------------------------------------
    AngularDimension.Value   30 
    -----------------------  -----------------------------------------
    ChamferBothSides         0 
    -----------------------  -----------------------------------------
    ChordalTolerance         0.0254 
    -----------------------  -----------------------------------------
    ClearanceTolerance       0.0254 
    -----------------------  -----------------------------------------
    Depth.Value              10 (millimeters part), 0.4 (inches part) 
    -----------------------  -----------------------------------------
    OffsetOption             Depth 
    -----------------------  -----------------------------------------
    Ratio.Value              0.3 
    -----------------------  -----------------------------------------
    RestDepth.Value          0 (millimeters part), 0 (inches part) 
    -----------------------  -----------------------------------------
    UseLimits                0 
    =======================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        The option for the type of associativity for chamfer.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OnEdge", "Create a chamfer on the edge"
           "ToPlate", "Create a chamfer on the common edges between plates"
        """
        OnEdge = 0  # PlateChamferBuilderTypesMemberType
        ToPlate = 1  # PlateChamferBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AngleMethod():
        """
        The option to specify the method for defining angle or ratio.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angle", "Use the angle for the chamfer parameters"
           "Ratio", "Use the ratio for the chamfer parameters"
        """
        Angle = 0  # PlateChamferBuilderAngleMethodMemberType
        Ratio = 1  # PlateChamferBuilderAngleMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OffsetMethod():
        """
        The option to specify the method for chamfer offset method.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Depth", "Use depth parameter to define ramp"
           "RestDepth", "Use rest depth to define ramp"
           "ThinnerPlate", "Use the thickness of the thinner plate to define ramp depth"
        """
        Depth = 0  # PlateChamferBuilderOffsetMethodMemberType
        RestDepth = 1  # PlateChamferBuilderOffsetMethodMemberType
        ThinnerPlate = 2  # PlateChamferBuilderOffsetMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleOption: PlateChamferBuilderAngleMethod = ...
    """
    Returns or sets  the angle option 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateChamferBuilderAngleMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleOption`` 
    
    :param angleOption: 
    :type angleOption: :py:class:`NXOpen.Features.ShipDesign.PlateChamferBuilderAngleMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    AngularDimension: NXOpen.Expression = ...
    """
    Returns  the angular dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ChamferBothSides: bool = ...
    """
    Returns or sets  the chamfer both sides 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferBothSides`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferBothSides`` 
    
    :param chamferBothSides: 
    :type chamferBothSides: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ChordalTolerance: float = ...
    """
    Returns or sets  the chordal tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``ChordalTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChordalTolerance`` 
    
    :param chordalTolerance: 
    :type chordalTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ClearanceTolerance: float = ...
    """
    Returns or sets  the clearance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClearanceTolerance`` 
    
    :param clearanceTolerance: 
    :type clearanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Depth: NXOpen.Expression = ...
    """
    Returns  the depth 
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndPlane: NXOpen.Plane = ...
    """
    Returns or sets  the end plane 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPlane`` 
    
    :param endPlane: 
    :type endPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OffsetOption: PlateChamferBuilderOffsetMethod = ...
    """
    Returns or sets  the offset option 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateChamferBuilderOffsetMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetOption`` 
    
    :param offsetOption: 
    :type offsetOption: :py:class:`NXOpen.Features.ShipDesign.PlateChamferBuilderOffsetMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Ratio: NXOpen.Expression = ...
    """
    Returns  the ratio 
    
    <hr>
    
    Getter Method
    
    Signature ``Ratio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RestDepth: NXOpen.Expression = ...
    """
    Returns  the rest depth 
    
    <hr>
    
    Getter Method
    
    Signature ``RestDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the reverse direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SelectEdge: NXOpen.ScCollector = ...
    """
    Returns  the select edge 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectTarget: NXOpen.ScCollector = ...
    """
    Returns  the select target 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTarget`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectThinnerPlate: NXOpen.ScCollector = ...
    """
    Returns  the select thinner plate 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectThinnerPlate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectTool: NXOpen.ScCollector = ...
    """
    Returns  the select tool 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartPlane: NXOpen.Plane = ...
    """
    Returns or sets  the start plane 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPlane`` 
    
    :param startPlane: 
    :type startPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Type: PlateChamferBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateChamferBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.PlateChamferBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    UseLimits: bool = ...
    """
    Returns or sets  the use limits 
    
    <hr>
    
    Getter Method
    
    Signature ``UseLimits`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseLimits`` 
    
    :param useLimits: 
    :type useLimits: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: PlateChamferBuilder = ...  # unknown typename


class UnfoldedMinRecBuilder(NXOpen.Builder):
    """
    Represents the class Features.  
    
    ShipDesign.UnfoldedMinRecBuilder which is used to 
    calculate the unfolded minimum rectangle of ship basic design plates or standard parts.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateUnfoldedMinRecBuilder`
    
    .. versionadded:: NX10.0.0
    """
    SelectionObjects: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the ship basic design plate faces and standard part curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionObjects`` 
    
    :returns:  ship basic design plate faces and standard part curves. 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: UnfoldedMinRecBuilder = ...  # unknown typename


class DeckListBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This builder allows you to define the general arrangement view information.  
    
    It represents :py:class:`NXOpen.Features.ShipDesign.DeckListBuilder`.
    
    .. versionadded:: NX12.0.0
    """
    
    def Add(self, deck: NXOpen.Assemblies.Component) -> None:
        """
        Adds a deck to creation list
        
        Signature ``Add(deck)`` 
        
        :param deck:  deck container to create the GA view  
        :type deck: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def Remove(self, deck: NXOpen.Assemblies.Component) -> None:
        """
        Removes a deck from creation list
        
        Signature ``Remove(deck)`` 
        
        :param deck:  deck container to create the GA view  
        :type deck: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: DeckListBuilder = ...  # unknown typename


class HullBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HullBuilderTypes():
    """
    Indicates the method that is being used to define the mold face of the hull. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetBody", "Mold face is being defined by a selected sheet body."
       "Faces", "Mold face is being defined by selected faces."
    """
    SheetBody = 0  # HullBuilderTypesMemberType
    Faces = 1  # HullBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HullBuilder(PlateSystemBuilder):
    """
    This class is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.Hull` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateHullBuilder`
    
    Default values.
    
    ======================  ======================================
    Property                Value
    ======================  ======================================
    Offset.Value            0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    Primary                 FwdPortToInUp 
    ----------------------  --------------------------------------
    PrimaryOnReference      FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1OnReference   FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2OnReference   FwdPortToInUp 
    ======================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Indicates the method that is being used to define the mold face of the hull. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetBody", "Mold face is being defined by a selected sheet body."
           "Faces", "Mold face is being defined by selected faces."
        """
        SheetBody = 0  # HullBuilderTypesMemberType
        Faces = 1  # HullBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Centerline: NXOpen.Plane = ...
    """
    Returns or sets  the plane representing the center line of the hull.  
    
    This is optional, if not supplied
    the center line will considered to be the ship main dimensions Y = 0 plane. 
    
    <hr>
    
    Getter Method
    
    Signature ``Centerline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Centerline`` 
    
    :param offsetPlane: 
    :type offsetPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MoldFaceSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet body selected that defines the overall shape of the hull.  
    
    This is only used if the 
    :py:class:`NXOpen.Features.ShipDesign.HullBuilderTypes.SheetBody <NXOpen.Features.ShipDesign.HullBuilderTypes>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaceSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces selected that defines the overall shape of the hull.  
    
    This is only used if the 
    :py:class:`NXOpen.Features.ShipDesign.HullBuilderTypes.Faces <NXOpen.Features.ShipDesign.HullBuilderTypes>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: HullBuilderTypes = ...
    """
    Returns or sets  the method used to define the mold face of the hull.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.HullBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.HullBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: HullBuilder = ...  # unknown typename


class ShipTrimBody(NXOpen.Features.BodyFeature):
    """
    Represents a ship trim body feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShipTrimBodyBuilder`
    
    .. versionadded:: NX9.0.1
    """
    
    def GetPillarStartPoints(self) -> 'list[NXOpen.Point]':
        """
        Outputs the start points for the pillars in the cae model.  
        
        Will only return output when
        it is a Pillar Points feature  
        
        Signature ``GetPillarStartPoints()`` 
        
        :returns:  pillar ending points  
        :rtype: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPillarEndPoints(self) -> 'list[NXOpen.Point]':
        """
        Outputs the end points for the pillars in the cae model.  
        
        Will only return output when
        it is a Pillar Points feature  
        
        Signature ``GetPillarEndPoints()`` 
        
        :returns:  pillar ending points  
        :rtype: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    Null: ShipTrimBody = ...  # unknown typename


class ManufacturingStockBuilderStockDataSourceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManufacturingStockBuilderStockDataSourceType():
    """
    the data source from which the intial manufacturing data will be read. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Set to None if we edit this feature"
       "CustomerDefault", "Initial data will be read from the customer default"
    """
    NotSet = 0  # ManufacturingStockBuilderStockDataSourceTypeMemberType
    CustomerDefault = 1  # ManufacturingStockBuilderStockDataSourceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManufacturingStockBuilderCheckBoxStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManufacturingStockBuilderCheckBoxStatus():
    """
    the check box status. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unchecked", "Unchecked"
       "Checked", "Checked"
       "Required", "Checked and Cannot be modified"
    """
    Unchecked = 0  # ManufacturingStockBuilderCheckBoxStatusMemberType
    Checked = 1  # ManufacturingStockBuilderCheckBoxStatusMemberType
    Required = 2  # ManufacturingStockBuilderCheckBoxStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManufacturingStockBuilderObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManufacturingStockBuilderObjectType():
    """
    the object to which the manufacturing attributes will be written. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Edge", "Edge"
       "Face", "Face"
       "Body", "Body"
       "Feature", "Feature"
       "Part", "Part"
       "Num", "Total Object Num"
    """
    NotSet = 0  # ManufacturingStockBuilderObjectTypeMemberType
    Edge = 1  # ManufacturingStockBuilderObjectTypeMemberType
    Face = 2  # ManufacturingStockBuilderObjectTypeMemberType
    Body = 3  # ManufacturingStockBuilderObjectTypeMemberType
    Feature = 4  # ManufacturingStockBuilderObjectTypeMemberType
    Part = 5  # ManufacturingStockBuilderObjectTypeMemberType
    Num = 6  # ManufacturingStockBuilderObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManufacturingStockBuilderLockedStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManufacturingStockBuilderLockedStatus():
    """
    the NX attribute locked status. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unlocked", "The NX attribute is set with unlocked status."
       "Locked", "The NX attribute is set with locked status."
    """
    Unlocked = 0  # ManufacturingStockBuilderLockedStatusMemberType
    Locked = 1  # ManufacturingStockBuilderLockedStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManufacturingStockBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` builder.  
    
    It is used to manage the data contained in the ship manufacturing stock.
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX8.5.0
    """
    
    class StockDataSourceType():
        """
        the data source from which the intial manufacturing data will be read. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Set to None if we edit this feature"
           "CustomerDefault", "Initial data will be read from the customer default"
        """
        NotSet = 0  # ManufacturingStockBuilderStockDataSourceTypeMemberType
        CustomerDefault = 1  # ManufacturingStockBuilderStockDataSourceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CheckBoxStatus():
        """
        the check box status. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unchecked", "Unchecked"
           "Checked", "Checked"
           "Required", "Checked and Cannot be modified"
        """
        Unchecked = 0  # ManufacturingStockBuilderCheckBoxStatusMemberType
        Checked = 1  # ManufacturingStockBuilderCheckBoxStatusMemberType
        Required = 2  # ManufacturingStockBuilderCheckBoxStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ObjectType():
        """
        the object to which the manufacturing attributes will be written. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Edge", "Edge"
           "Face", "Face"
           "Body", "Body"
           "Feature", "Feature"
           "Part", "Part"
           "Num", "Total Object Num"
        """
        NotSet = 0  # ManufacturingStockBuilderObjectTypeMemberType
        Edge = 1  # ManufacturingStockBuilderObjectTypeMemberType
        Face = 2  # ManufacturingStockBuilderObjectTypeMemberType
        Body = 3  # ManufacturingStockBuilderObjectTypeMemberType
        Feature = 4  # ManufacturingStockBuilderObjectTypeMemberType
        Part = 5  # ManufacturingStockBuilderObjectTypeMemberType
        Num = 6  # ManufacturingStockBuilderObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LockedStatus():
        """
        the NX attribute locked status. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unlocked", "The NX attribute is set with unlocked status."
           "Locked", "The NX attribute is set with locked status."
        """
        Unlocked = 0  # ManufacturingStockBuilderLockedStatusMemberType
        Locked = 1  # ManufacturingStockBuilderLockedStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def EditDataItem(self, name: str, eCheckBoxStatus: ManufacturingStockBuilderCheckBoxStatus, valueNew: str) -> None:
        """
        Edits data item.  
        
        Signature ``EditDataItem(name, eCheckBoxStatus, valueNew)`` 
        
        :param name:  Item name  
        :type name: str 
        :param eCheckBoxStatus:  New check box status.  
        :type eCheckBoxStatus: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilderCheckBoxStatus` 
        :param valueNew:  New Value  
        :type valueNew: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def InitializeDataFromDataSource(self, eDataSourceType: ManufacturingStockBuilderStockDataSourceType, dataSource: str) -> None:
        """
        Resets the builder data from the data source.  
        
        Signature ``InitializeDataFromDataSource(eDataSourceType, dataSource)`` 
        
        :param eDataSourceType:  Data source type.  
        :type eDataSourceType: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilderStockDataSourceType` 
        :param dataSource:  Data source.  
        :type dataSource: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    DataSource: str = ...
    """
    Returns or sets  the data source from which the intial data is read.  
    
    <hr>
    
    Getter Method
    
    Signature ``DataSource`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataSource`` 
    
    :param dataSource: 
    :type dataSource: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    DataSourceType: ManufacturingStockBuilderStockDataSourceType = ...
    """
    Returns or sets  the data source from which the initial data is read.  
    
    <hr>
    
    Getter Method
    
    Signature ``DataSourceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilderStockDataSourceType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataSourceType`` 
    
    :param dataSourceType: 
    :type dataSourceType: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilderStockDataSourceType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    Null: ManufacturingStockBuilder = ...  # unknown typename


class ShipCutoutBuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipCutoutBuilderCreationMethod():
    """
    available methods used to place a cutout object
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Face2Lines", "1 face and 2 lines, edges, or datums are used to place this cutout"
       "SpecifyCSYS", "a csys is used to place this cutout"
    """
    Face2Lines = 0  # ShipCutoutBuilderCreationMethodMemberType
    SpecifyCSYS = 1  # ShipCutoutBuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipCutoutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipCutout` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipCutoutBuilder`
    
    Default values.
    
    ========================  ========
    Property                  Value
    ========================  ========
    SketchBlock.Exp1.Value    0 
    ------------------------  --------
    SketchBlock.Exp10.Value   0 
    ------------------------  --------
    SketchBlock.Exp11.Value   0 
    ------------------------  --------
    SketchBlock.Exp12.Value   0 
    ------------------------  --------
    SketchBlock.Exp2.Value    0 
    ------------------------  --------
    SketchBlock.Exp3.Value    0 
    ------------------------  --------
    SketchBlock.Exp4.Value    0 
    ------------------------  --------
    SketchBlock.Exp5.Value    0 
    ------------------------  --------
    SketchBlock.Exp6.Value    0 
    ------------------------  --------
    SketchBlock.Exp7.Value    0 
    ------------------------  --------
    SketchBlock.Exp8.Value    0 
    ------------------------  --------
    SketchBlock.Exp9.Value    0 
    ------------------------  --------
    SketchBlock.Sketches      EndCut1 
    ========================  ========
    
    .. versionadded:: NX7.5.0
    """
    
    class CreationMethod():
        """
        available methods used to place a cutout object
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Face2Lines", "1 face and 2 lines, edges, or datums are used to place this cutout"
           "SpecifyCSYS", "a csys is used to place this cutout"
        """
        Face2Lines = 0  # ShipCutoutBuilderCreationMethodMemberType
        SpecifyCSYS = 1  # ShipCutoutBuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngularDim: NXOpen.Expression = ...
    """
    Returns  the angular dimension used to rotate the cutout's profile
    The angular dimension is only used for the Face2Lines placement method.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CoordSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the placement CSYS of the cutout.  
    
    The coordinate system is only used for the SpecifyCSYS placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordSystem`` 
    
    :param coordSystem: 
    :type coordSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepCoordSystem: bool = ...
    """
    Returns or sets  the keep coordinate system
    A toggle used to remember the selected object on apply.  
    
    The keep coordinate system is only used for the SpecifyCSYS placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepCoordSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepCoordSystem`` 
    
    :param keepCoordSystem: 
    :type keepCoordSystem: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReverseDirection1: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the previous reverse direction toggle.  
    
    This is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseDirection1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseDirection1`` 
    
    :param keepReverseDirection1: 
    :type keepReverseDirection1: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReverseDirection2: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the previous reverse direction toggle.  
    
    This is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseDirection2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseDirection2`` 
    
    :param keepReverseDirection2: 
    :type keepReverseDirection2: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectCSYSFace: bool = ...
    """
    Returns or sets  the keep select csys face
    A toggle used to remember the selected object on apply.  
    
    The keep select csys face is only used for the SpecifyCSYS placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectCSYSFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectCSYSFace`` 
    
    :param keepSelectCSYSFace: 
    :type keepSelectCSYSFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectLine1: bool = ...
    """
    Returns or sets  the keep select line1
    A toggle used to remember the selected object on apply.  
    
    The keep select line1 is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectLine1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectLine1`` 
    
    :param keepSelectLine1: 
    :type keepSelectLine1: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectLine2: bool = ...
    """
    Returns or sets  the keep select line2
    A toggle used to remember the selected object on apply.  
    
    The keep select line2 is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectLine2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectLine2`` 
    
    :param keepSelectLine2: 
    :type keepSelectLine2: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectTargetFace: bool = ...
    """
    Returns or sets  the keep select target face
    A toggle used to remember the selected object on apply.  
    
    The keep select target face is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectTargetFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectTargetFace`` 
    
    :param keepSelectTargetFace: 
    :type keepSelectTargetFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    LinearOffset1: NXOpen.Expression = ...
    """
    Returns  the linear offset distance from line1.  
    
    The linear offset 1 is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearOffset1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LinearOffset2: NXOpen.Expression = ...
    """
    Returns  the linear offset distance from line2.  
    
    The linear offset 2 is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearOffset2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PlacementType: ShipCutoutBuilderCreationMethod = ...
    """
    Returns or sets  the placement type.  
    
    The creation method used to place the cutout object. 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipCutoutBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param placementType: 
    :type placementType: :py:class:`NXOpen.Features.ShipDesign.ShipCutoutBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReverseDirection1: bool = ...
    """
    Returns or sets  the reverse direction 1.  
    
    Allows you to reverse the direction used in the linear offset 1.
    The reverse direction 1 is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection1`` 
    
    :param reverseDirection1: 
    :type reverseDirection1: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReverseDirection2: bool = ...
    """
    Returns or sets  the reverse direction 2.  
    
    Allows you to reverse the direction used in the linear offset 2.
    The reverse direction 2 is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection2`` 
    
    :param reverseDirection2: 
    :type reverseDirection2: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SelectCSYSFace: NXOpen.SelectFace = ...
    """
    Returns  the selection object for the target face.  
    
    This target CSYS face is only used for the SpecifyCSYS placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCSYSFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectLine1: NXOpen.SelectNXObject = ...
    """
    Returns  the select Line1.  
    
    This line 1 is only used for the Face2Lines placement method.
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLine1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectLine2: NXOpen.SelectNXObject = ...
    """
    Returns  the select Line2 
    This line 2 is only used for the Face2Lines placement method.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLine2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectTargetFace: NXOpen.SelectNXObject = ...
    """
    Returns  the select Target Face.  
    
    This target face is only used for the Face2Lines placement method. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SketchBlock: NXOpen.SketchExpressionModifierBuilder = ...
    """
    Returns  the library sketch block that defines the Cutout outline 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SketchExpressionModifierBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ShipCutoutBuilder = ...  # unknown typename


class SteelInsulationBoundaryBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Steel Insulation Boundary builder.  
    
    The steel insulation boundary is used to collect boundary information that includes how much to offset the insulation from the selected boundary. 
    The builder is used when creating/editing a :py:class:`NXOpen.Features.ShipDesign.SteelInsulation` feature. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.SteelInsulationBuilder.CreateSteelInsulationBoundary`
    
    .. versionadded:: NX8.0.0
    """
    
    def CreateOffsetExpressions(self) -> None:
        """
        Create offset expressions for each boundary.  
        
        Signature ``CreateOffsetExpressions()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def GetOffsetExpressions(self) -> 'list[NXOpen.Expression]':
        """
        Get offset expressions for each boundary.  
        
        Signature ``GetOffsetExpressions()`` 
        
        :returns:  boundary Offset Expressions. 
        :rtype: list of :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Boundaries: NXOpen.SelectNXObjectList = ...
    """
    Returns  the face or edges that will be used to bound the insulation body.  
    
    <hr>
    
    Getter Method
    
    Signature ``Boundaries`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SteelInsulationBoundaryBuilder = ...  # unknown typename


class ConceptFromSpreadsheetBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConceptFromSpreadsheetBuilderType():
    """
    Settings to indicate what type grid part generated. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "GeneralArrangement", " - "
       "BasicDesign", " - "
       "DetailDesign", " - "
       "Manufacturing", " - "
    """
    GeneralArrangement = 0  # ConceptFromSpreadsheetBuilderTypeMemberType
    BasicDesign = 1  # ConceptFromSpreadsheetBuilderTypeMemberType
    DetailDesign = 2  # ConceptFromSpreadsheetBuilderTypeMemberType
    Manufacturing = 3  # ConceptFromSpreadsheetBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConceptFromSpreadsheetBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ConceptFromSpreadsheet` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateConceptFromSpreadsheetBuilder`
    
    Default values.
    
    ================================  =====
    Property                          Value
    ================================  =====
    CreateConcept                     0 
    --------------------------------  -----
    ReadDataSet.CreateDataSetToggle   0 
    --------------------------------  -----
    ReadDataSet.NativeToggle          0 
    ================================  =====
    
    .. versionadded:: NX8.5.0
    """
    
    class Type():
        """
        Settings to indicate what type grid part generated. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "GeneralArrangement", " - "
           "BasicDesign", " - "
           "DetailDesign", " - "
           "Manufacturing", " - "
        """
        GeneralArrangement = 0  # ConceptFromSpreadsheetBuilderTypeMemberType
        BasicDesign = 1  # ConceptFromSpreadsheetBuilderTypeMemberType
        DetailDesign = 2  # ConceptFromSpreadsheetBuilderTypeMemberType
        Manufacturing = 3  # ConceptFromSpreadsheetBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ConceptPart: str = ...
    """
    Returns or sets  the concept part file name 
    
    <hr>
    
    Getter Method
    
    Signature ``ConceptPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConceptPart`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    CreateConcept: bool = ...
    """
    Returns or sets  the toggle to control creating concept part
    
    <hr>
    
    Getter Method
    
    Signature ``CreateConcept`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateConcept`` 
    
    :param createConcept: 
    :type createConcept: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    GridPart: str = ...
    """
    Returns or sets  the grid part name 
    
    <hr>
    
    Getter Method
    
    Signature ``GridPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridPart`` 
    
    :param gridPart: 
    :type gridPart: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    GridType: ConceptFromSpreadsheetBuilderType = ...
    """
    Returns or sets  the grid part type 
    
    <hr>
    
    Getter Method
    
    Signature ``GridType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ConceptFromSpreadsheetBuilderType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ConceptFromSpreadsheetBuilderType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ReadDataSet: ReadDataSetBuilder = ...
    """
    Returns  the Data Set Builder for reading data sets from Team Center  
    
    <hr>
    
    Getter Method
    
    Signature ``ReadDataSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ReadDataSetBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ShipBody: NXOpen.SelectBody = ...
    """
    Returns  the ship body.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: ConceptFromSpreadsheetBuilder = ...  # unknown typename


class AnchorPoint(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.QualifySketchBuilder.CreateNewAnchorPoint`
    
    .. versionadded:: NX8.0.0
    """
    Name: str = ...
    """
    Returns or sets  the anchor name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    Point: NXOpen.SelectPoint = ...
    """
    Returns  the anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPoint` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: AnchorPoint = ...  # unknown typename


class SteelVentHolesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SteelVentHoles` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSteelVentHolesBuilder`
    
    Default values.
    
    ========================  ======================================
    Property                  Value
    ========================  ======================================
    AngularDim.Value          0 
    ------------------------  --------------------------------------
    GuideOffset.Value         0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    NumVents                  2 
    ------------------------  --------------------------------------
    SketchBlock.Exp1.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp10.Value   0 
    ------------------------  --------------------------------------
    SketchBlock.Exp11.Value   0 
    ------------------------  --------------------------------------
    SketchBlock.Exp12.Value   0 
    ------------------------  --------------------------------------
    SketchBlock.Exp2.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp3.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp4.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp5.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp6.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp7.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp8.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Exp9.Value    0 
    ------------------------  --------------------------------------
    SketchBlock.Sketches      EndCut1 
    ------------------------  --------------------------------------
    ToggleEqualSpacing        1 
    ------------------------  --------------------------------------
    ToggleSymmetricOffset     1 
    ------------------------  --------------------------------------
    VentSpacing.Value         0 (millimeters part), 0 (inches part) 
    ========================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    AngularDim: NXOpen.Expression = ...
    """
    Returns  the angular dimension used to rotate the profile of the vent holes 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GuideOffset: NXOpen.Expression = ...
    """
    Returns  the guide offset - the dimension used to offset the array of holes from the section guide.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    KeepReverseGuideOffset: bool = ...
    """
    Returns or sets  the keep reverse guide offset
    A toggle used to remember the reverse guide value on apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseGuideOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseGuideOffset`` 
    
    :param keepReverseGuideOffset: 
    :type keepReverseGuideOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSectionGuide: bool = ...
    """
    Returns or sets  the keep section guide
    A toggle used to remember the selected object(s) on apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSectionGuide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSectionGuide`` 
    
    :param keepSectionGuide: 
    :type keepSectionGuide: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectEndTrim: bool = ...
    """
    Returns or sets  the keep select end trim
    A toggle used to remember the selected object on apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectEndTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectEndTrim`` 
    
    :param keepSelectEndTrim: 
    :type keepSelectEndTrim: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectStartTrim: bool = ...
    """
    Returns or sets  the keep select start trim
    A toggle used to remember the selected object on apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectStartTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectStartTrim`` 
    
    :param keepSelectStartTrim: 
    :type keepSelectStartTrim: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectTargetFace: bool = ...
    """
    Returns or sets  the keep select target face
    A toggle used to remember the selected object(s) on apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectTargetFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectTargetFace`` 
    
    :param keepSelectTargetFace: 
    :type keepSelectTargetFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    NumVents: int = ...
    """
    Returns or sets  the number of vent holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumVents`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumVents`` 
    
    :param numVents: 
    :type numVents: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    OnPathEndOffset: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the offset from the start of the section to begin placing the holes.  
    
    (used with the equal spacing option) 
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathEndOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OnPathStartOffset: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the offset from the start of the section to begin placing the holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathStartOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReverseGuideOffset: bool = ...
    """
    Returns or sets  the reverse direction of the guide offset.  
    
    Allows you to reverse the direction used in the guide offset. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseGuideOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseGuideOffset`` 
    
    :param reverseGuideOffset: 
    :type reverseGuideOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SectionGuide: NXOpen.Section = ...
    """
    Returns  the section guide - vent holes are placed along this guide 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionGuide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectEndTrim: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select end trim - used to trim the end of the section guide.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEndTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectStartTrim: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select start trim - used to trim the start of the section guide.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectStartTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectTargetFace: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the select target face.  
    
    Specifies the face(s) to cut holes in. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SketchBlock: NXOpen.SketchExpressionModifierBuilder = ...
    """
    Returns  the library sketch block that defines the cut outline 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SketchExpressionModifierBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToggleEqualSpacing: bool = ...
    """
    Returns or sets  the toggle equal spacing.  
    
    Indicates that an equal amount of space is placed between each hole along the guide. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleEqualSpacing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleEqualSpacing`` 
    
    :param toggleEqualSpacing: 
    :type toggleEqualSpacing: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ToggleSymmetricOffset: bool = ...
    """
    Returns or sets  the toggle for calculating automatic symmetric offsets.  
    
    (only used with the equal spacing option)
    If you toggle on both equal spacing and symmetric offsets, and the 
    length of the secion is L, the distance between each hole is L/n, 
    and both of the offsets equal L/(2n) 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleSymmetricOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleSymmetricOffset`` 
    
    :param toggleSymmetricOffset: 
    :type toggleSymmetricOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    VentSpacing: NXOpen.Expression = ...
    """
    Returns  the spacing applied between each vent hole.  
    
    (not used with the equal spacing option) 
    
    <hr>
    
    Getter Method
    
    Signature ``VentSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SteelVentHolesBuilder = ...  # unknown typename


class CopyPasteNewBuilderVersionIDMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CopyPasteNewBuilderVersionID():
    """
    add version identifiers for the different revisions of the copy paste new feature.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Nx11", " - "
       "Nx12", " - "
    """
    Nx11 = 0  # CopyPasteNewBuilderVersionIDMemberType
    Nx12 = 1  # CopyPasteNewBuilderVersionIDMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CopyPasteNewBuilderCopyApproachMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CopyPasteNewBuilderCopyApproach():
    """
    Represents the approach of copying ship standard parts. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TransferringLinkedBody", "The approach by transferring linked body."
       "CopySourceFeaturesAndReparent", "The approach by copy source features and reparenting."
    """
    TransferringLinkedBody = 0  # CopyPasteNewBuilderCopyApproachMemberType
    CopySourceFeaturesAndReparent = 1  # CopyPasteNewBuilderCopyApproachMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CopyPasteNewBuilder(NXOpen.Features.FeatureBuilder, NXOpen.IAttributeSourceObjectBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.CopyPasteNewBuilder`  
    It is used in Ship Building Application.  
    
    The operation 
    copies one or more components and pastes them as new parts while re-parenting 
    and maintaining WAVE links
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCopyPasteNewBuilder`
    
    Default values.
    
    =================  ======
    Property           Value
    =================  ======
    AngularTolerance   5 
    -----------------  ------
    CopySection        false 
    =================  ======
    
    .. versionadded:: NX8.0.0
    """
    
    class VersionID():
        """
        add version identifiers for the different revisions of the copy paste new feature.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Nx11", " - "
           "Nx12", " - "
        """
        Nx11 = 0  # CopyPasteNewBuilderVersionIDMemberType
        Nx12 = 1  # CopyPasteNewBuilderVersionIDMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CopyApproach():
        """
        Represents the approach of copying ship standard parts. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TransferringLinkedBody", "The approach by transferring linked body."
           "CopySourceFeaturesAndReparent", "The approach by copy source features and reparenting."
        """
        TransferringLinkedBody = 0  # CopyPasteNewBuilderCopyApproachMemberType
        CopySourceFeaturesAndReparent = 1  # CopyPasteNewBuilderCopyApproachMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateLogicalObjects(self) -> 'list[NXOpen.PDM.LogicalObject]':
        """
        Creates the pre-creation logical objects 
        
        Signature ``CreateLogicalObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.PDM.LogicalObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def GetOperationFailures(self) -> NXOpen.ErrorList:
        """
        Gets the operation failure error list object  
        
        Signature ``GetOperationFailures()`` 
        
        :returns:  List of errors encountered during the copy parts 
        :rtype: :py:class:`NXOpen.ErrorList` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def AutoAssignAttributes(self, objects: 'list[NXOpen.NXObject]') -> NXOpen.ErrorList:
        """
        Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.  
        
        Signature ``AutoAssignAttributes(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.ErrorList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AutoAssignAttributesWithNamingPattern(self, objects: 'list[NXOpen.NXObject]', properties: 'list[NXOpen.NXObject]') -> NXOpen.ErrorList:
        """
        Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.  
        
        properties needs to be created using :py:meth:`CreateAttributeTitleToNamingPatternMap`
        
        Signature ``AutoAssignAttributesWithNamingPattern(objects, properties)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :param properties: 
        :type properties: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.ErrorList` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateAttributeTitleToNamingPatternMap(self, attributeTitles: 'list[str]', titlePatterns: 'list[str]') -> NXOpen.NXObject:
        """
        Creates a map object of attribute titles to their corresponding naming pattern  
        
        Signature ``CreateAttributeTitleToNamingPatternMap(attributeTitles, titlePatterns)`` 
        
        :param attributeTitles: 
        :type attributeTitles: list of str 
        :param titlePatterns: 
        :type titlePatterns: list of str 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    AlgorithmVersion: CopyPasteNewBuilderVersionID = ...
    """
    Returns or sets  the value of algorithm version is used to define the version information.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlgorithmVersion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CopyPasteNewBuilderVersionID` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlgorithmVersion`` 
    
    :param algorithmVersion: 
    :type algorithmVersion: :py:class:`NXOpen.Features.ShipDesign.CopyPasteNewBuilderVersionID` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    AngularTolerance: float = ...
    """
    Returns or sets  the value of angular tolerance is used to define the angular difference from qualified candidate face / plane normal to source face / plane normal.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ComponentsToCopy: NXOpen.SelectNXObjectList = ...
    """
    Returns  the components to copy 
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentsToCopy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    CopyApproachOption: CopyPasteNewBuilderCopyApproach = ...
    """
    Returns or sets  an option to determine the approach to copy the ship standard parts between planes.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyApproachOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CopyPasteNewBuilderCopyApproach` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CopyApproachOption`` 
    
    :param copyApproachOption: 
    :type copyApproachOption: :py:class:`NXOpen.Features.ShipDesign.CopyPasteNewBuilderCopyApproach` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    CopySection: bool = ...
    """
    Returns or sets  the flag is used to define if linear tolerance on UI would be used when matching geometry.  
    
    If false, the linear tolerance will be set with max double value as default. 
    
    <hr>
    
    Getter Method
    
    Signature ``CopySection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CopySection`` 
    
    :param copySection: 
    :type copySection: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    LinearTolerance: float = ...
    """
    Returns or sets  the value of linear tolerance is used to define the tolerance between candidate object and transformed source object.  
    
    For example, the distance from the qualified candidate curve to the transformed sample points of source curve shoud be within linear tolerance.
    And for body, it checks the distance from the qualified body's faces and the transformed sample points of source body's corresponding faces. 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SelectionFrom: NXOpen.SelectNXObject = ...
    """
    Returns  the From geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionFrom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SelectionTo: NXOpen.SelectNXObjectList = ...
    """
    Returns  the To geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionTo`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ShipNames: ShipNamesListBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the copied objects created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names List Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesListBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ShowXmlReport: bool = ...
    """
    Returns or sets  the flag to indicate whether or not to show the xml report on copy paste results 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowXmlReport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowXmlReport`` 
    
    :param showXmlReport: 
    :type showXmlReport: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: CopyPasteNewBuilder = ...  # unknown typename


class PlateDivideBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`Features.ShipDesign.PlateDivide` builder which is used to edit
    a plate divide feature.  
    
    This feature cannot be created directly.
    
    This feature cannot be created directly.
    
    .. versionadded:: NX11.0.0
    """
    BlendRadius: float = ...
    """
    Returns or sets  the blend radius.  
    
    If :py:meth:`Features.ShipDesign.PlateDivideBuilder.RemoveBlends`` is true then blends that
    that are less than or equal to this radius will be removed from plate systems. 
    
    <hr>
    
    Getter Method
    
    Signature ``BlendRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlendRadius`` 
    
    :param blendRadius: 
    :type blendRadius: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    Used in edge pairing to determine if edges are close. 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ExtendImprints: bool = ...
    """
    Returns or sets  the option to extend imprints.  
    
    If true, imprints will be extended to another edge on the target plate. 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendImprints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendImprints`` 
    
    :param extendImprints: 
    :type extendImprints: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    HoleDiameter: float = ...
    """
    Returns or sets  the hole diameter.  
    
    If :py:meth:`Features.ShipDesign.PlateDivideBuilder.RemoveOpenings`` is true then openings that
    fit inside a circle with this diameter will be removed from plate systems. 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDiameter`` 
    
    :param holeDiameter: 
    :type holeDiameter: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    RemoveBlends: bool = ...
    """
    Returns or sets  the option to remove blends.  
    
    If true, blends with a radius less than or equal to
    :py:meth:`Features.ShipDesign.PlateDivideBuilder.BlendRadius`` will be removed from plate systems. 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveBlends`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveBlends`` 
    
    :param removeBlends: 
    :type removeBlends: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    RemoveOpenings: bool = ...
    """
    Returns or sets  the option to remove openings.  
    
    If true, openings that fit inside a circle with diameter 
    :py:meth:`Features.ShipDesign.PlateDivideBuilder.HoleDiameter`` will be removed from plate systems.
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveOpenings`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveOpenings`` 
    
    :param removeOpenings: 
    :type removeOpenings: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ToolSelect: NXOpen.SelectNXObjectList = ...
    """
    Returns  the tools selected for imprint.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolSelect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: None.
    """
    Null: PlateDivideBuilder = ...  # unknown typename


class StandardPartItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[StandardPartItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: StandardPartItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: StandardPartItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> StandardPartItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: StandardPartItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: StandardPartItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[StandardPartItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[StandardPartItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: StandardPartItemBuilder, object2: StandardPartItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: StandardPartItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: StandardPartItemBuilderList = ...  # unknown typename


class FeaturesToTagBuilder(NXOpen.Builder):
    """
    This class is used to add an attribute to profile features that have been modified by
    the user to display a 'Metal to Metal' design 'feature'.  
    
    This attribute will be used later when
    the user switches from Ship Design mode to Ship Manufacturing mode... the Metal to Metal
    modifications will be suppressed.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateFeaturesToMarkBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def ManageFeatureTag(self, addMark: bool, featureToMark: NXOpen.Features.Feature) -> None:
        """
        Manages (set or unset) the ship manufacturing object on selected features
        
        Signature ``ManageFeatureTag(addMark, featureToMark)`` 
        
        :param addMark: 
        :type addMark: bool 
        :param featureToMark: 
        :type featureToMark: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    FeatureToTag: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the feature to tag.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureToTag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: FeaturesToTagBuilder = ...  # unknown typename


class CornerCutListItemBuilder(NXOpen.Builder):
    """
    Used to supply the list of corner cut locations and seam curves to the :py:class:`NXOpen.Features.ShipDesign.CornerCutBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCornerCutListitemBuilder`
    
    .. versionadded:: NX8.5.0
    """
    CornerPoint: NXOpen.Point = ...
    """
    Returns or sets  the corner point as the cut location.  
    
    The corner point is used only when the placement type is using corner. 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CornerPoint`` 
    
    :param weldLocation: 
    :type weldLocation: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    PlacementFace: NXOpen.SelectTaggedObject = ...
    """
    Returns  the placement face from plate system to add corner cuts.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SeamCurve: NXOpen.SelectTaggedObject = ...
    """
    Returns  the seam curve to resize the corner cut.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeamCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: CornerCutListItemBuilder = ...  # unknown typename


class PlanePairBuilder(NXOpen.NXObject):
    """
    This class is used to define a pair of planes in a list.  
    
    .. versionadded:: NX8.0.0
    """
    Plane1: NXOpen.Plane = ...
    """
    Returns or sets  the first plane in the plane pair list element.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane1`` 
    
    :param plane1: 
    :type plane1: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Plane2: NXOpen.Plane = ...
    """
    Returns or sets  the second plane in the plane pair list element.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane2`` 
    
    :param plane2: 
    :type plane2: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: PlanePairBuilder = ...  # unknown typename


class VentilationHoles2BuilderArraySpacingMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VentilationHoles2BuilderArraySpacing():
    """
    available methods used to define the spacing between the holes
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EvenDistribution", "Holes will automatically be spaced evenly along the length of the guide"
       "CustomDefined", "The user can specify a custom amount of space between the holes"
    """
    EvenDistribution = 0  # VentilationHoles2BuilderArraySpacingMemberType
    CustomDefined = 1  # VentilationHoles2BuilderArraySpacingMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VentilationHoles2Builder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.VentilationHoles2` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateVentilationHoles2Builder`
    
    Default values.
    
    =======================  ======================================
    Property                 Value
    =======================  ======================================
    AngularDimOffset.Value   0 
    -----------------------  --------------------------------------
    EnumSpacing              EvenDistribution 
    -----------------------  --------------------------------------
    GuideOffset.Value        0 (millimeters part), 0 (inches part) 
    -----------------------  --------------------------------------
    IntNumVents              0 
    -----------------------  --------------------------------------
    ToggleSymmetricOffsets   0 
    -----------------------  --------------------------------------
    VentSpacing.Value        0 (millimeters part), 0 (inches part) 
    =======================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class ArraySpacing():
        """
        available methods used to define the spacing between the holes
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EvenDistribution", "Holes will automatically be spaced evenly along the length of the guide"
           "CustomDefined", "The user can specify a custom amount of space between the holes"
        """
        EvenDistribution = 0  # VentilationHoles2BuilderArraySpacingMemberType
        CustomDefined = 1  # VentilationHoles2BuilderArraySpacingMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngularDimOffset: NXOpen.Expression = ...
    """
    Returns  the angular dim offset 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDimOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EnumSpacing: VentilationHoles2BuilderArraySpacing = ...
    """
    Returns or sets  the enum spacing 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.VentilationHoles2BuilderArraySpacing` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumSpacing`` 
    
    :param enumSpacing: 
    :type enumSpacing: :py:class:`NXOpen.Features.ShipDesign.VentilationHoles2BuilderArraySpacing` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    GuideOffset: NXOpen.Expression = ...
    """
    Returns  the guide offset 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IntNumVents: int = ...
    """
    Returns or sets  the int num vents 
    
    <hr>
    
    Getter Method
    
    Signature ``IntNumVents`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntNumVents`` 
    
    :param intNumVents: 
    :type intNumVents: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OnPathEndOffset: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the on path end offset 
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathEndOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OnPathStartOffset: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the on path start offset 
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathStartOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SectionGuide: NXOpen.Section = ...
    """
    Returns  the section guide 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionGuide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectEndTrim: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select end trim 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEndTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectStartTrim: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select start trim 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectStartTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectTargetFace: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the select target face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTargetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SketchBlock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the sketch block.  
    
    Users can specify the hole shape using a single sketch. The sketch type and its parameters
    are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``SketchBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ToggleSymmetricOffsets: bool = ...
    """
    Returns or sets  the toggle symmetric offsets 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleSymmetricOffsets`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleSymmetricOffsets`` 
    
    :param toggleSymmetricOffsets: 
    :type toggleSymmetricOffsets: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    VentSpacing: NXOpen.Expression = ...
    """
    Returns  the vent spacing 
    
    <hr>
    
    Getter Method
    
    Signature ``VentSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: VentilationHoles2Builder = ...  # unknown typename


class ShipEndCut(NXOpen.Features.BodyFeature):
    """
    Represents a ship end cut feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShipEndCutBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: ShipEndCut = ...  # unknown typename


class SteelCollarPlateBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SteelCollarPlate` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSteelCollarPlateBuilder`
    
    Default values.
    
    ======================  =====
    Property                Value
    ======================  =====
    IsInternal              0 
    ----------------------  -----
    KeepSelectFace          0 
    ----------------------  -----
    KeepSelectProfileBody   0 
    ======================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    def GetAvailablePlateSizes(self) -> 'list[str]':
        """
        The list of available plate sizes.  
        
        Note this list will change every time the selected
        profile body changes.  
        
        Signature ``GetAvailablePlateSizes()`` 
        
        :returns:  Array of available plate sizes.
        These names are specified by a special
        sketch naming convention for sketches
        loaded in the profile library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    IsInternal: bool = ...
    """
    Returns or sets  the is internal toggle.  
    
    Is this plate inside the profile cutout, or slapped onto the outside of the placement face? 
    
    <hr>
    
    Getter Method
    
    Signature ``IsInternal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsInternal`` 
    
    :param isInternal: 
    :type isInternal: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectFace: bool = ...
    """
    Returns or sets  the keep select face.  
    
    Determines whether or not we should reuse the same selected face on apply. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectFace`` 
    
    :param keepSelectFace: 
    :type keepSelectFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectProfileBody: bool = ...
    """
    Returns or sets  the keep select profile body.  
    
    Determines whether or not we should reuse the same selected profile body on apply. 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectProfileBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectProfileBody`` 
    
    :param keepSelectProfileBody: 
    :type keepSelectProfileBody: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    PlateSize: int = ...
    """
    Returns or sets  the plate size.  
    
    Note: when the selected profile body changes, the available sizes will also change.
    Therefore, after changing the selected profile, you must call GetAvailablePlateSizes before you can set this PlateSize value. 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateSize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateSize`` 
    
    :param plateSize: 
    :type plateSize: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SelectFace: NXOpen.SelectFace = ...
    """
    Returns  the select face.  
    
    The face is used along with the profile body to determine the placement of the collar plate feature.
    Typically this face will already have a profile cutout feature and the collar plate is used to "fill the gap" caused by the profile cutout. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectProfileBody: NXOpen.SelectBody = ...
    """
    Returns  the select profile body.  
    
    The profile body determines what sizes of collar plate features are available,
    and where to place the collar plate feature. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectProfileBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SteelCollarPlateBuilder = ...  # unknown typename


class PenetrationCutoutBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.PenetrationRequestCollection.CreatePenetrationCutoutBuilder`
    
    Default values.
    
    ===================  =========================
    Property             Value
    ===================  =========================
    CornerRadius.Value   0 
    -------------------  -------------------------
    CoutoutType          Circular 
    -------------------  -------------------------
    Diameter.Value       0 
    -------------------  -------------------------
    DirectionType        PerpendiculartoStructure 
    -------------------  -------------------------
    Height.Value         0 
    -------------------  -------------------------
    Offset.Value         0 
    -------------------  -------------------------
    Radius.Value         0 
    -------------------  -------------------------
    Width.Value          0 
    ===================  =========================
    
    .. versionadded:: NX8.0.0
    """
    
    def AddNonIntersectedStructure(self, structure: NXOpen.Body) -> None:
        """
        Adds nonintersected structures 
        
        Signature ``AddNonIntersectedStructure(structure)`` 
        
        :param structure: 
        :type structure: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def RemoveNonIntersectedStructures(self) -> None:
        """
        Removes all nonintersected structures 
        
        Signature ``RemoveNonIntersectedStructures()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetDialogType(self, dialogType: PenetrationRequestBuilderRequestDialogType) -> None:
        """
        Set the dialog type 
        
        Signature ``SetDialogType(dialogType)`` 
        
        :param dialogType: 
        :type dialogType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestBuilderRequestDialogType` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    CornerRadius: NXOpen.Expression = ...
    """
    Returns  the corner radius expression 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CoutoutType: PenetrationRequestCoutoutType = ...
    """
    Returns or sets  the coutout type 
    
    <hr>
    
    Getter Method
    
    Signature ``CoutoutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCoutoutType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoutoutType`` 
    
    :param enumCoutoutType: 
    :type enumCoutoutType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCoutoutType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the diameter expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DirectionType: PenetrationRequestDirectionType = ...
    """
    Returns or sets  the direction type 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param enumDirection: 
    :type enumDirection: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HoleSubType: str = ...
    """
    Returns or sets  the hole sub-type 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleSubType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleSubType`` 
    
    :param stringHoleType: 
    :type stringHoleType: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    HoleType: str = ...
    """
    Returns or sets  the hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleType`` 
    
    :param stringHoleType: 
    :type stringHoleType: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    HorizontalDirection: NXOpen.Direction = ...
    """
    Returns or sets  the horizontal direction 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalDirection`` 
    
    :param vectorHorizontalDirection: 
    :type vectorHorizontalDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    ModifiedSketch: NXOpen.Sketch = ...
    """
    Returns or sets  the modified sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``ModifiedSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModifiedSketch`` 
    
    :param modifiedSketch: 
    :type modifiedSketch: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Orientation: NXOpen.Direction = ...
    """
    Returns or sets  the orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param vectorOrientation: 
    :type vectorOrientation: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Sketch: NXOpen.Section = ...
    """
    Returns  the sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``Sketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PenetrationCutoutBuilder = ...  # unknown typename


class ShipIntersections(NXOpen.Features.BodyFeature):
    """
    Represents a ship intersection feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: ShipIntersections = ...  # unknown typename


class SplitProfilePlateBuilderProfileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplitProfilePlateBuilderProfileType():
    """
    Represents the target body type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProfileOrPlate", "Select profile or plate as target for split."
       "BuiltUp", "Select built-up as target for split."
    """
    ProfileOrPlate = 0  # SplitProfilePlateBuilderProfileTypeMemberType
    BuiltUp = 1  # SplitProfilePlateBuilderProfileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplitProfilePlateBuilderToolOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplitProfilePlateBuilderToolOptionType():
    """
    Represents trim tool type to trim profile or plate solid body. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plane", "Select existing datum or face."
       "NewPlane", "Create a new datum."
       "Extrude", "Select curve and direction as extrude."
       "Body", "Select plate or profile body."
    """
    Plane = 0  # SplitProfilePlateBuilderToolOptionTypeMemberType
    NewPlane = 1  # SplitProfilePlateBuilderToolOptionTypeMemberType
    Extrude = 2  # SplitProfilePlateBuilderToolOptionTypeMemberType
    Body = 3  # SplitProfilePlateBuilderToolOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplitProfilePlateBuilderSplitDirectionOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplitProfilePlateBuilderSplitDirectionOptionType():
    """
    Represents split direction to trim profile or plate solid body . 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PerpendicularToMoldingFace", "create plane/face perpendicular to molding face as the split tool"
       "AlongPlaneOrFace", "Split profile/plate along selected plane or face"
    """
    PerpendicularToMoldingFace = 0  # SplitProfilePlateBuilderSplitDirectionOptionTypeMemberType
    AlongPlaneOrFace = 1  # SplitProfilePlateBuilderSplitDirectionOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplitProfilePlateBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilder`.  
    
    This class is for splitting ship profile/plate solidbodies
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSplitProfilePlateBuilder`
    
    Default values.
    
    =================================  ======================================
    Property                           Value
    =================================  ======================================
    BuiltUpOffset.FlangeAngle.Value    0 
    ---------------------------------  --------------------------------------
    BuiltUpOffset.FlangeOffset.Value   0 (millimeters part), 0 (inches part) 
    ---------------------------------  --------------------------------------
    BuiltUpOffset.WebAngle.Value       0 
    ---------------------------------  --------------------------------------
    BuiltUpOffset.WebOffset.Value      0 (millimeters part), 0 (inches part) 
    ---------------------------------  --------------------------------------
    ToolOption                         Plane 
    =================================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class ProfileType():
        """
        Represents the target body type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProfileOrPlate", "Select profile or plate as target for split."
           "BuiltUp", "Select built-up as target for split."
        """
        ProfileOrPlate = 0  # SplitProfilePlateBuilderProfileTypeMemberType
        BuiltUp = 1  # SplitProfilePlateBuilderProfileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToolOptionType():
        """
        Represents trim tool type to trim profile or plate solid body. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plane", "Select existing datum or face."
           "NewPlane", "Create a new datum."
           "Extrude", "Select curve and direction as extrude."
           "Body", "Select plate or profile body."
        """
        Plane = 0  # SplitProfilePlateBuilderToolOptionTypeMemberType
        NewPlane = 1  # SplitProfilePlateBuilderToolOptionTypeMemberType
        Extrude = 2  # SplitProfilePlateBuilderToolOptionTypeMemberType
        Body = 3  # SplitProfilePlateBuilderToolOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplitDirectionOptionType():
        """
        Represents split direction to trim profile or plate solid body . 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PerpendicularToMoldingFace", "create plane/face perpendicular to molding face as the split tool"
           "AlongPlaneOrFace", "Split profile/plate along selected plane or face"
        """
        PerpendicularToMoldingFace = 0  # SplitProfilePlateBuilderSplitDirectionOptionTypeMemberType
        AlongPlaneOrFace = 1  # SplitProfilePlateBuilderSplitDirectionOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ApplyEndCut: bool = ...
    """
    Returns or sets  the option to indicate whether to apply the end cut to the profiles
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyEndCut`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyEndCut`` 
    
    :param applyEndCut: 
    :type applyEndCut: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    BuiltUpOffset: BuiltUpOffsetBuilder = ...
    """
    Returns  the built-up offset data 
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BuiltUpOffsetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance to determine if a profile is attached to a plate 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param dDistnaceTolerance: 
    :type dDistnaceTolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    DoTrimWithoutCopy: bool = ...
    """
    Returns or sets  the option to determine if target bodies will be copied.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoTrimWithoutCopy`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DoTrimWithoutCopy`` 
    
    :param doTrimWithoutCopy: 
    :type doTrimWithoutCopy: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the reverse direction option of tool datum or face for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SplitDirectionOption: SplitProfilePlateBuilderSplitDirectionOptionType = ...
    """
    Returns or sets  the option to split profile/plate along tool face or perpendicular to profile/plate molding face.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitDirectionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderSplitDirectionOptionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SplitDirectionOption`` 
    
    :param splitDirectionOption: 
    :type splitDirectionOption: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderSplitDirectionOptionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    TargetBuiltUps: NXOpen.SelectNXObjectList = ...
    """
    Returns  the target built-up solid bodies for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBuiltUps`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    TargetProfileOrPlates: NXOpen.SelectNXObjectList = ...
    """
    Returns  the target profile or plate solid bodies for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetProfileOrPlates`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    TargetType: SplitProfilePlateBuilderProfileType = ...
    """
    Returns or sets  the profile type of split target.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderProfileType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TargetType`` 
    
    :param profileType: 
    :type profileType: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderProfileType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the selected tool body for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolCurves: NXOpen.SelectNXObjectList = ...
    """
    Returns  the tool curve(s) to create extrude face for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolCurvesSection: NXOpen.Section = ...
    """
    Returns  the tool curve(s) to create extrude face for split.  
    
    Only used when Type is :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType.Extrude <NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolCurvesSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolFaces: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected tool datum or face(s) for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolNewPlane: NXOpen.Plane = ...
    """
    Returns or sets  the created new tool datum for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolNewPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ToolNewPlane`` 
    
    :param toolNewPlane: 
    :type toolNewPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolOption: SplitProfilePlateBuilderToolOptionType = ...
    """
    Returns or sets  the tool type for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ToolOption`` 
    
    :param toolOption: 
    :type toolOption: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolVector: NXOpen.Direction = ...
    """
    Returns or sets  the tool vector to create extrude face for split.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ToolVector`` 
    
    :param toolVector: 
    :type toolVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    TrimDirection: NXOpen.Vector3d = ...
    """
    Returns or sets  the trim direction, which works together with Reverse Direction option, to determine which part of target body will be trimmed.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimDirection`` 
    
    :param trimDirection: 
    :type trimDirection: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: SplitProfilePlateBuilder = ...  # unknown typename


class SteelSupport(NXOpen.Features.BodyFeature):
    """
    Represents a steel support feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SteelSupportBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: SteelSupport = ...  # unknown typename


class StiffenerBySupportPathBuilderScenarioMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBySupportPathBuilderScenario():
    """
    Scenarios of Stiffener by Support 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BasicDesign", "Basic Design Scenario"
       "DetailDesign", "Detail Design Scenario"
    """
    BasicDesign = 0  # StiffenerBySupportPathBuilderScenarioMemberType
    DetailDesign = 1  # StiffenerBySupportPathBuilderScenarioMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBySupportPathBuilderMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBySupportPathBuilderMethod():
    """
    Type of Stiffener by Support Method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AlignedBoundary", "Aligned Boundary"
       "AlignedLength", "Aligned Length"
       "BoundToBound", "Bound to Bound"
       "ParallelToLine", "Parallel to Line"
       "Horizontal", "Horizontal"
       "Vertical", "Vertical"
       "NormalToCurve", "Normal to Curve"
       "ThroughPoint", "Through Point"
    """
    AlignedBoundary = 0  # StiffenerBySupportPathBuilderMethodMemberType
    AlignedLength = 1  # StiffenerBySupportPathBuilderMethodMemberType
    BoundToBound = 2  # StiffenerBySupportPathBuilderMethodMemberType
    ParallelToLine = 3  # StiffenerBySupportPathBuilderMethodMemberType
    Horizontal = 4  # StiffenerBySupportPathBuilderMethodMemberType
    Vertical = 5  # StiffenerBySupportPathBuilderMethodMemberType
    NormalToCurve = 6  # StiffenerBySupportPathBuilderMethodMemberType
    ThroughPoint = 7  # StiffenerBySupportPathBuilderMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBySupportPathBuilderAlignedToMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBySupportPathBuilderAlignedTo():
    """
    Which face the stiffener is aligned to 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Web", " - "
       "Flange", " - "
    """
    Web = 0  # StiffenerBySupportPathBuilderAlignedToMemberType
    Flange = 1  # StiffenerBySupportPathBuilderAlignedToMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBySupportPathBuilderSetBackMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBySupportPathBuilderSetBackMethod():
    """
    Type of set back method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BoundingStiffenerHeight", "Bounding Stiffener Height"
       "SBSWebThickeness", "SBS Web Thickness"
    """
    BoundingStiffenerHeight = 0  # StiffenerBySupportPathBuilderSetBackMethodMemberType
    SBSWebThickeness = 1  # StiffenerBySupportPathBuilderSetBackMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBySupportPathBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class defines the builder to collect stiffener by support path data for Stiffener feature.  
    
    .. versionadded:: NX9.0.0
    """
    
    class Scenario():
        """
        Scenarios of Stiffener by Support 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BasicDesign", "Basic Design Scenario"
           "DetailDesign", "Detail Design Scenario"
        """
        BasicDesign = 0  # StiffenerBySupportPathBuilderScenarioMemberType
        DetailDesign = 1  # StiffenerBySupportPathBuilderScenarioMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Method():
        """
        Type of Stiffener by Support Method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AlignedBoundary", "Aligned Boundary"
           "AlignedLength", "Aligned Length"
           "BoundToBound", "Bound to Bound"
           "ParallelToLine", "Parallel to Line"
           "Horizontal", "Horizontal"
           "Vertical", "Vertical"
           "NormalToCurve", "Normal to Curve"
           "ThroughPoint", "Through Point"
        """
        AlignedBoundary = 0  # StiffenerBySupportPathBuilderMethodMemberType
        AlignedLength = 1  # StiffenerBySupportPathBuilderMethodMemberType
        BoundToBound = 2  # StiffenerBySupportPathBuilderMethodMemberType
        ParallelToLine = 3  # StiffenerBySupportPathBuilderMethodMemberType
        Horizontal = 4  # StiffenerBySupportPathBuilderMethodMemberType
        Vertical = 5  # StiffenerBySupportPathBuilderMethodMemberType
        NormalToCurve = 6  # StiffenerBySupportPathBuilderMethodMemberType
        ThroughPoint = 7  # StiffenerBySupportPathBuilderMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AlignedTo():
        """
        Which face the stiffener is aligned to 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Web", " - "
           "Flange", " - "
        """
        Web = 0  # StiffenerBySupportPathBuilderAlignedToMemberType
        Flange = 1  # StiffenerBySupportPathBuilderAlignedToMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SetBackMethod():
        """
        Type of set back method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BoundingStiffenerHeight", "Bounding Stiffener Height"
           "SBSWebThickeness", "SBS Web Thickness"
        """
        BoundingStiffenerHeight = 0  # StiffenerBySupportPathBuilderSetBackMethodMemberType
        SBSWebThickeness = 1  # StiffenerBySupportPathBuilderSetBackMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ClearBoundaryToAttachedBoundaryMap(self) -> None:
        """
        Clear the map of boundary to attached boundary.  
        
        Signature ``ClearBoundaryToAttachedBoundaryMap()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle of horizontal or vertical method, in degrees 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EndBoundary: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the end boundary objects.  
    
    It allows to select curve, sheet body and solid body.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilder`.GetMultipleSelectionEndBoundary instead.
    
    License requirements: None.
    """
    LengthAlignMethod: StiffenerBySupportPathBuilderAlignedTo = ...
    """
    Returns or sets  the aligned length method 
    
    <hr>
    
    Getter Method
    
    Signature ``LengthAlignMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderAlignedTo` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LengthAlignMethod`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderAlignedTo` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    LengthParams: NXOpen.Expression = ...
    """
    Returns  the length parameter, which defines the stiffener by support length when the :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod`
    is :py:class:` NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod.AlignedLength  < NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``LengthParams`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MultipleSelectionEndBoundary: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the multiple end boundary objects.  
    
    It allows to select curve, sheet body and solid body. 
    
    <hr>
    
    Getter Method
    
    Signature ``MultipleSelectionEndBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    OrientationBySupport: bool = ...
    """
    Returns or sets  the flag to indicate whether the orientation of the stiffener is aligned to the start boundary.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationBySupport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationBySupport`` 
    
    :param orientationBySupport: 
    :type orientationBySupport: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    RefParallelLine: NXOpen.SelectNXObject = ...
    """
    Returns  the referenced parallel line for stiffener by support path
    
    <hr>
    
    Getter Method
    
    Signature ``RefParallelLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SetbackMethod: StiffenerBySupportPathBuilderSetBackMethod = ...
    """
    Returns or sets  the setback method.  
    
    <hr>
    
    Getter Method
    
    Signature ``SetbackMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderSetBackMethod` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SetbackMethod`` 
    
    :param setbackMethod: 
    :type setbackMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderSetBackMethod` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    StartBoundary: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the start boundary, it allows to select curve, sheet body and solid body  
    
    <hr>
    
    Getter Method
    
    Signature ``StartBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StiffenerBySupportMethod: StiffenerBySupportPathBuilderMethod = ...
    """
    Returns or sets  the stiffener by support path method 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffenerBySupportMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StiffenerBySupportMethod`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SwitchSide: bool = ...
    """
    Returns or sets  the switch side flag, which can change the stiffener by support orienation when the :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod`
    is :py:class:` NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod.AlignedLength  < NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilderMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``SwitchSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SwitchSide`` 
    
    :param switchSide: 
    :type switchSide: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    ThroughPointLocation: NXOpen.Point = ...
    """
    Returns or sets  the through point location.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThroughPointLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThroughPointLocation`` 
    
    :param throughPointLocation: 
    :type throughPointLocation: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    Null: StiffenerBySupportPathBuilder = ...  # unknown typename


class MainDimensions(NXOpen.Features.BodyFeature):
    """
    Represents a main dimensions feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.MainDimensionsBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: MainDimensions = ...  # unknown typename


class SeamBlockBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SeamBlockBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SeamBlockBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SeamBlockBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SeamBlockBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SeamBlockBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SeamBlockBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SeamBlockBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SeamBlockBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SeamBlockBuilder, object2: SeamBlockBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SeamBlockBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SeamBlockBuilderList = ...  # unknown typename


class EdgeCut(NXOpen.Features.BodyFeature):
    """
    Represents a edge cut feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.EdgeCutBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: EdgeCut = ...  # unknown typename


class EdgeReinforcement(NXOpen.Features.CurveFeature):
    """
    Represents a edge reinforcement feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.EdgeReinforcementBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: EdgeReinforcement = ...  # unknown typename


class AddDataSetBuilder(NXOpen.Builder):
    """
    This class is used to add a dataset to an item in Teamcenter
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateAddDataSetBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Component: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the component to add the data set to
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DataSetFile: str = ...
    """
    Returns or sets  the data set file 
    
    <hr>
    
    Getter Method
    
    Signature ``DataSetFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataSetFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: AddDataSetBuilder = ...  # unknown typename


class RoomBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoomBuilderTypes():
    """
    The room types.  
    
    This option specifies how the room is generated. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Creates a room from boundary object and deck"
       "Adopt", "Adopt a room from existing body"
    """
    Create = 0  # RoomBuilderTypesMemberType
    Adopt = 1  # RoomBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoomBuilder(NXOpen.Builder):
    """
    Represents a room builder for general arrangement.
    
    This builder is used to define a room. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateRoomBuilder`
    
    Default values.
    
    ====================  =========================================
    Property              Value
    ====================  =========================================
    WallThickness.Value   7 (millimeters part), 0.25 (inches part) 
    ====================  =========================================
    
    .. versionadded:: NX12.0.0
    """
    
    class Types():
        """
        The room types.  
        
        This option specifies how the room is generated. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "Creates a room from boundary object and deck"
           "Adopt", "Adopt a room from existing body"
        """
        Create = 0  # RoomBuilderTypesMemberType
        Adopt = 1  # RoomBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdoptionBody: NXOpen.SelectBody = ...
    """
    Returns  the body to be adopted as a room.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    AttributeList: RoomAttributeListBuilder = ...
    """
    Returns  the room attribute list.  
    
    The room attributes defines attributes those are applied to the room component and body.
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeList`` 
    
    :returns:  room attribute list  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.RoomAttributeListBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    CreateRoomWithWall: bool = ...
    """
    Returns or sets  the option to indicate whether to create wall for the room or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateRoomWithWall`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateRoomWithWall`` 
    
    :param createRoomWithWall: 
    :type createRoomWithWall: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    Deck: NXOpen.SelectBodyList = ...
    """
    Returns  the deck body.  
    
    The deck body defines the owning deck of this room. 
    
    <hr>
    
    Getter Method
    
    Signature ``Deck`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance which is used in room body creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    Section: NXOpen.Section = ...
    """
    Returns  the section.  
    
    The section defines the room boundary. 
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the ship name.  
    
    The ship name is used to assign name to the room container.
    
    It is only used when the work part is deck container, where a new room part will be created.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship names  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Type: RoomBuilderTypes = ...
    """
    Returns or sets  the room generation type.  
    
    If you set the type to :py:class:`Features.ShipDesign.RoomBuilderTypes.Create <Features.ShipDesign.RoomBuilderTypes>`, 
    then please also set values for below properties:
    
      * :py:meth:`NXOpen.Features.ShipDesign.RoomBuilder.Section``
      * :py:meth:`NXOpen.Features.ShipDesign.RoomBuilder.Deck``
      * :py:meth:`NXOpen.Features.ShipDesign.RoomBuilder.CreateRoomWithWall``
      * :py:meth:`NXOpen.Features.ShipDesign.RoomBuilder.WallThickness``
    
    If you set the type to :py:class:`Features.ShipDesign.RoomBuilderTypes.Adopt <Features.ShipDesign.RoomBuilderTypes>`, 
    then please also set values for below properties:
    
      * :py:meth:`NXOpen.Features.ShipDesign.RoomBuilder.AdoptionBody``
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.RoomBuilderTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.RoomBuilderTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    WallThickness: NXOpen.Expression = ...
    """
    Returns  the wall thickness.  
    
    The thickness is used for creating wall. 
    It is only used when :py:meth:`NXOpen.Features.ShipDesign.RoomBuilder.CreateRoomWithWall`` is set to true.
    
    <hr>
    
    Getter Method
    
    Signature ``WallThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: RoomBuilder = ...  # unknown typename


class PlatePreparationBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to create or edit a :py:class:`NXOpen.Features.ShipDesign.PlatePreparation` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreatePlatePreparationBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    def RemovePart(self, partName: str) -> None:
        """
        Remove the part from the collection of parts to be unformed and scaled.  
        
        Signature ``RemovePart(partName)`` 
        
        :param partName: 
        :type partName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def AddPart(self, partName: str) -> None:
        """
        Add the part to the collection of parts to be unformed and scaled.  
        
        Signature ``AddPart(partName)`` 
        
        :param partName: 
        :type partName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    CalculationMethod: int = ...
    """
    Returns or sets  the calculation method defining methods to calculate shrinkage factors.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationMethod`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationMethod`` 
    
    :param calculationMethod: 
    :type calculationMethod: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    CoordinateSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coordinate system defining the origin as well as the X and Y axis for shrinkage.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystem`` 
    
    :param coordinateSystem: 
    :type coordinateSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the expression containing the scale factor for the length direction (X).  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the expression containing the scale factor for the width direction (Y).  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    XCount: NXOpen.Expression = ...
    """
    Returns  the expression containing the attached part count in x direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``XCount`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    XDirectionType: int = ...
    """
    Returns or sets  the option that determines how the X direction is created.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDirectionType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDirectionType`` 
    
    :param xDirType: 
    :type xDirType: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    XWidth: NXOpen.Expression = ...
    """
    Returns  the expression containing the width in x direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``XWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    YCount: NXOpen.Expression = ...
    """
    Returns  the expression containing the attached part count in y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``YCount`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    YWidth: NXOpen.Expression = ...
    """
    Returns  the expression containing the width in y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``YWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PlatePreparationBuilder = ...  # unknown typename


class PillarSystemBuilderStockSectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarSystemBuilderStockSectionType():
    """
    SpreadSheet Type  Profile or BuiltUp 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Profile", "Profile Stock"
       "BuiltUp", "Built Up Stock"
    """
    Profile = 0  # PillarSystemBuilderStockSectionTypeMemberType
    BuiltUp = 1  # PillarSystemBuilderStockSectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarSystemBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarSystemBuilderTypes():
    """
    Used to specify how the pillar system is defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ShipStructure", " - "
       "Points", " - "
    """
    ShipStructure = 0  # PillarSystemBuilderTypesMemberType
    Points = 1  # PillarSystemBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarSystemBuilder(ProfileSystemBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.PillarSystem` builder which is used to create or edit a pillar system feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreatePillarSystemBuilder`
    
    Default values.
    
    =======================  ========
    Property                 Value
    =======================  ========
    OrientationAngle.Value   0 
    -----------------------  --------
    SectionType              Profile 
    =======================  ========
    
    .. versionadded:: NX8.0.0
    """
    
    class StockSectionType():
        """
        SpreadSheet Type  Profile or BuiltUp 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Profile", "Profile Stock"
           "BuiltUp", "Built Up Stock"
        """
        Profile = 0  # PillarSystemBuilderStockSectionTypeMemberType
        BuiltUp = 1  # PillarSystemBuilderStockSectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Types():
        """
        Used to specify how the pillar system is defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ShipStructure", " - "
           "Points", " - "
        """
        ShipStructure = 0  # PillarSystemBuilderTypesMemberType
        Points = 1  # PillarSystemBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreatePointPairBuilder(self) -> PointPairBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PointPairBuilder`.  
        
        Signature ``CreatePointPairBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PointPairBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def PopulateAnchorPointList(self) -> None:
        """
        Update anchor points 
        
        Signature ``PopulateAnchorPointList()`` 
        
        .. versionadded:: NX9.0.3
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableAnchorPointNames(self) -> 'list[str]':
        """
        The list of available anchor points  
        
        Signature ``GetAvailableAnchorPointNames()`` 
        
        :returns:  Array of available anchor point names.
        These names are read from the current reuse sketch   
        :rtype: list of str 
        
        .. versionadded:: NX9.0.3
        
        License requirements: None.
        """
        ...
    
    AnchorPoint: int = ...
    """
    Returns or sets  the anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPoint`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPoint`` 
    
    :param anchorPoint: 
    :type anchorPoint: int 
    
    .. versionadded:: NX9.0.3
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    BuildSolid: bool = ...
    """
    Returns or sets  the indication of whether to build a solid for the pillar system or just the curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildSolid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BuildSolid`` 
    
    :param buildSolid: 
    :type buildSolid: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    BuiltUpStock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the stock used to build the builtUp from.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction of the pillar.  
    
    Only used when Type is Features.ShipDesign.PillarSystemBuilder.Types.ShipStructure. 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    IntersectingShipStructure: NXOpen.SelectNXObjectList = ...
    """
    Returns  the ship structure to intersect with each other that defines the start of a pillar.  
    
    Only used when Type is Features.ShipDesign.PillarSystemBuilder.Types.ShipStructure. 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectingShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LimitingShipStructure: NXOpen.SelectNXObjectList = ...
    """
    Returns  the ship sructure that defines the end of the pillar.  
    
    Only used when Type is Features.ShipDesign.PillarSystemBuilder.Types.ShipStructure. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitingShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationAngle: NXOpen.Expression = ...
    """
    Returns  the angle at which to orient the stock shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationLine: NXOpen.SelectTaggedObject = ...
    """
    Returns  the orientation line, used only if the creation method is "Specify Line".  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PointPairList: NXOpen.NXObjectList = ...
    """
    Returns  the list of pairs of points that define the ends of the pillars.  
    
    Only used when Type is Features.ShipDesign.PillarSystemBuilder.Types.Points. 
    
    <hr>
    
    Getter Method
    
    Signature ``PointPairList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReverseOrientationDirection: bool = ...
    """
    Returns or sets  the reverse orientation direction  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseOrientationDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseOrientationDirection`` 
    
    :param reverseOrientationDirection: 
    :type reverseOrientationDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ReverseReferenceDirection: bool = ...
    """
    Returns or sets  the reverse reference direction  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseReferenceDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseReferenceDirection`` 
    
    :param reverseReferenceDirection: 
    :type reverseReferenceDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    SectionType: PillarSystemBuilderStockSectionType = ...
    """
    Returns or sets  the section type (profile or plate) 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarSystemBuilderStockSectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param sectionType: 
    :type sectionType: :py:class:`NXOpen.Features.ShipDesign.PillarSystemBuilderStockSectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the Ship Names builder, used to assign names to the Pillar Systems created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns:  Ship Names Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    StockData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the stock data used to define the stock information of the stiffener.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: PillarSystemBuilderTypes = ...
    """
    Returns or sets  the type of input used to define the pillar location.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarSystemBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.PillarSystemBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: PillarSystemBuilder = ...  # unknown typename


class GenericPlateSystemBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GenericPlateSystemBuilderTypes():
    """
    Indicates the method that is being used to define the mold face of the generic plate system. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetBody", "Mold face is being defined by a selected sheet body."
       "Planes", "Mold face is being defined by selected or defined planes."
    """
    SheetBody = 0  # GenericPlateSystemBuilderTypesMemberType
    Planes = 1  # GenericPlateSystemBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GenericPlateSystemBuilder(PlateSystemBuilder):
    """
    This class is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystem` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateGenericPlateSystemBuilder`
    
    Default values.
    
    ======================  ======================================
    Property                Value
    ======================  ======================================
    Offset.Value            0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    Primary                 FwdPortToInUp 
    ----------------------  --------------------------------------
    PrimaryOnReference      FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1OnReference   FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2OnReference   FwdPortToInUp 
    ======================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Indicates the method that is being used to define the mold face of the generic plate system. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetBody", "Mold face is being defined by a selected sheet body."
           "Planes", "Mold face is being defined by selected or defined planes."
        """
        SheetBody = 0  # GenericPlateSystemBuilderTypesMemberType
        Planes = 1  # GenericPlateSystemBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    MoldFacePlaneList: PlaneListBuilderList = ...
    """
    Returns  the list of planes defined to define the mold face.  
    
    Each plane defined will create a generic plate system.
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes.Planes <NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlaneList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFacePlanes: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the planes selected to define the mold face.  
    
    Each plane selected will create a generic plate system. When editing 
    a generic plate system, only a single plane can be selected.
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes.Planes <NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlanes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFaceSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet body selected to define the mold face.  
    
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes.SheetBody <NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaceSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: GenericPlateSystemBuilderTypes = ...
    """
    Returns or sets  the method used to define the mold face of the generic plate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystemBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: GenericPlateSystemBuilder = ...  # unknown typename


class SteelDistributionBuilderSaNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelDistributionBuilderSaName():
    """
    Sa Name 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstValue", " - "
    """
    FirstValue = 0  # SteelDistributionBuilderSaNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelDistributionBuilderSaTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelDistributionBuilderSaType():
    """
    Sa Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstValue", " - "
    """
    FirstValue = 0  # SteelDistributionBuilderSaTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelDistributionBuilderSaSizeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelDistributionBuilderSaSize():
    """
    Sa Size 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstValue", " - "
    """
    FirstValue = 0  # SteelDistributionBuilderSaSizeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelDistributionBuilderSaMaterialMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelDistributionBuilderSaMaterial():
    """
    Sa Material 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstValue", " - "
    """
    FirstValue = 0  # SteelDistributionBuilderSaMaterialMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelDistributionBuilderSaFormMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelDistributionBuilderSaForm():
    """
    Sa Form 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstValue", " - "
    """
    FirstValue = 0  # SteelDistributionBuilderSaFormMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelDistributionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SteelDistribution` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSteelDistributionBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class SaName():
        """
        Sa Name 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstValue", " - "
        """
        FirstValue = 0  # SteelDistributionBuilderSaNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SaType():
        """
        Sa Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstValue", " - "
        """
        FirstValue = 0  # SteelDistributionBuilderSaTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SaSize():
        """
        Sa Size 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstValue", " - "
        """
        FirstValue = 0  # SteelDistributionBuilderSaSizeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SaMaterial():
        """
        Sa Material 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstValue", " - "
        """
        FirstValue = 0  # SteelDistributionBuilderSaMaterialMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SaForm():
        """
        Sa Form 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstValue", " - "
        """
        FirstValue = 0  # SteelDistributionBuilderSaFormMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AssemblyPart: str = ...
    """
    Returns or sets  the assembly part 
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssemblyPart`` 
    
    :param assemblyPart: 
    :type assemblyPart: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Description: str = ...
    """
    Returns or sets  the description 
    
    <hr>
    
    Getter Method
    
    Signature ``Description`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Description`` 
    
    :param description: 
    :type description: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    FeatureName: str = ...
    """
    Returns or sets  the description 
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FeatureName`` 
    
    :param featureName: 
    :type featureName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Form: SteelDistributionBuilderSaForm = ...
    """
    Returns or sets  the form 
    
    <hr>
    
    Getter Method
    
    Signature ``Form`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaForm` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Form`` 
    
    :param form: 
    :type form: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaForm` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ItemType: str = ...
    """
    Returns or sets  the Item Type.  
    
    Only used in managed mode, ignored in native mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemType`` 
    
    :param itemType: 
    :type itemType: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Material: SteelDistributionBuilderSaMaterial = ...
    """
    Returns or sets  the material 
    
    <hr>
    
    Getter Method
    
    Signature ``Material`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaMaterial` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Material`` 
    
    :param material: 
    :type material: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaMaterial` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Name: SteelDistributionBuilderSaName = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaName` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaName` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SaProject: str = ...
    """
    Returns or sets  the sa project 
    
    <hr>
    
    Getter Method
    
    Signature ``SaProject`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaProject`` 
    
    :param saProject: 
    :type saProject: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SectionNumber: str = ...
    """
    Returns or sets  the section number 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionNumber`` 
    
    :param sectionNumber: 
    :type sectionNumber: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Size: SteelDistributionBuilderSaSize = ...
    """
    Returns or sets  the size 
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaSize` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaSize` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SteelBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the steel bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``SteelBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SubComponent: bool = ...
    """
    Returns or sets  the get subcomponent 
    
    <hr>
    
    Getter Method
    
    Signature ``SubComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SubComponent`` 
    
    :param subComponent: 
    :type subComponent: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    TemplateCategoryName: str = ...
    """
    Returns or sets  the Template Category Name.  
    
    Only used in managed mode, ignored in native mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``TemplateCategoryName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TemplateCategoryName`` 
    
    :param templateCategoryName: 
    :type templateCategoryName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    TemplateName: str = ...
    """
    Returns or sets  the Template Name.  
    
    Only used in managed mode, ignored in native mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``TemplateName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TemplateName`` 
    
    :param templateName: 
    :type templateName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Type: SteelDistributionBuilderSaType = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilderSaType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: SteelDistributionBuilder = ...  # unknown typename


class ExamineSteelFeatureBuilder(NXOpen.Builder):
    """
    Represents the examine steel feature builder to examine steel feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateExamineSteelFeatureBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def SetCheck(self, check: ExamineSteelFeatureBuilderCheck, status: bool) -> None:
        """
        Set the flag to indicate whether or not to examine the specific object type.  
        
        Signature ``SetCheck(check, status)`` 
        
        :param check:  Type of Check  
        :type check: :py:class:`NXOpen.Features.ShipDesign.ExamineSteelFeatureBuilderCheck` 
        :param status: 
        :type status: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def GetCheckResult(self, check: ExamineSteelFeatureBuilderCheck) -> ExamineSteelFeatureBuilderResult:
        """
        Get the Examining status.  
        
        Signature ``GetCheckResult(check)`` 
        
        :param check:  Type of Check  
        :type check: :py:class:`NXOpen.Features.ShipDesign.ExamineSteelFeatureBuilderCheck` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.ExamineSteelFeatureBuilderResult` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def HighlightCheckResult(self, check: ExamineSteelFeatureBuilderCheck, highlight: bool) -> None:
        """
        Highlights or unhighlights the geometries in graphic to display the check result.  
        
        Signature ``HighlightCheckResult(check, highlight)`` 
        
        :param check:  Type of Check  
        :type check: :py:class:`NXOpen.Features.ShipDesign.ExamineSteelFeatureBuilderCheck` 
        :param highlight: 
        :type highlight: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def Examine(self) -> None:
        """
        Examines the selected objects.  
        
        Signature ``Examine()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def DisplayInformation(self) -> None:
        """
        Displays the Examining results in the information window.  
        
        Signature ``DisplayInformation()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    SelectObject: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the Examining objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ExamineSteelFeatureBuilder = ...  # unknown typename


class GenericPlateSystem(NXOpen.Features.BodyFeature):
    """
    Represents a Generic Plate System feature.  
    
    The Generic Plate System feature is used to 
    represent surface shapes in the ship that do not conform to deck, bulkhead or hull 
    categories. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.GenericPlateSystemBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: GenericPlateSystem = ...  # unknown typename


class ShipProfileCutout(NXOpen.Features.BodyFeature):
    """
    Represents a profile cutout feature for NX75 using sketch expression modifier block.  
    
    In NX8
    a new builder was implemented with spreadsheet driven technology. 
    This builder remains here for editing legacy feature. 
    Please ref Features_ShipDesign_ProfileCutout.ja for additional information. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShipProfileCutoutBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: ShipProfileCutout = ...  # unknown typename


class Decks(NXOpen.Features.BodyFeature):
    """
    Represents a decks feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.DecksBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: Decks = ...  # unknown typename


class AlongGuideCut(NXOpen.Features.BodyFeature):
    """
    Represents a corner cut feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: AlongGuideCut = ...  # unknown typename


class SectionViewBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SectionViewBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SectionViewBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SectionViewBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SectionViewBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SectionViewBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SectionViewBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SectionViewBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SectionViewBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SectionViewBuilder, object2: SectionViewBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SectionViewBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SectionViewBuilderList = ...  # unknown typename


class LabellingRoomsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Features.ShipDesign.LabellingRoomsBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateLabellingRoomsBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def GetPmiNoteTags(self) -> 'list[NXOpen.Annotations.PmiNote]':
        """
        Get rooms pmi notes
        
        Signature ``GetPmiNoteTags()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.PmiNote` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    RoomsSelection: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the rooms selection 
    
    <hr>
    
    Getter Method
    
    Signature ``RoomsSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: LabellingRoomsBuilder = ...  # unknown typename


class ShipCutout(NXOpen.Features.BodyFeature):
    """
    Represents a ship cutout feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShipCutoutBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: ShipCutout = ...  # unknown typename


class DvToMvMappingBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.DvToMvMapping` builder.  
    
    This builder is used to
    create ship version-up design view to manufacturing view mapping feature.
    The mapping feature is created during a special version-up process, and will be used to drive NX to propagate
    changes from design body to manufacturing body automatically.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateDvToMvMappingBuilder`
    
    .. versionadded:: NX8.5.0
    """
    AdoptedDesignBody: NXOpen.Body = ...
    """
    Returns or sets  the adopted design body.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptedDesignBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AdoptedDesignBody`` 
    
    :param adoptedDesignBody: 
    :type adoptedDesignBody: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    AdoptedMfgBody: NXOpen.Body = ...
    """
    Returns or sets  the adopted manufacturing body.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptedMfgBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AdoptedMfgBody`` 
    
    :param adoptedMfgBody: 
    :type adoptedMfgBody: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    DesignFeatureGroup: NXOpen.Features.Feature = ...
    """
    Returns or sets  the design feature group.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignFeatureGroup`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignFeatureGroup`` 
    
    :param designFeatureGroup: 
    :type designFeatureGroup: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    MfgFeatureGroup: NXOpen.Features.Feature = ...
    """
    Returns or sets  the mfg feature group.  
    
    <hr>
    
    Getter Method
    
    Signature ``MfgFeatureGroup`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``MfgFeatureGroup`` 
    
    :param mfgFeatureGroup: 
    :type mfgFeatureGroup: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OriginalDesignBody: NXOpen.Body = ...
    """
    Returns or sets  the original design body.  
    
    <hr>
    
    Getter Method
    
    Signature ``OriginalDesignBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``OriginalDesignBody`` 
    
    :param originalDesignBody: 
    :type originalDesignBody: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OriginalMfgBody: NXOpen.Body = ...
    """
    Returns or sets  the original manufacturing body.  
    
    <hr>
    
    Getter Method
    
    Signature ``OriginalMfgBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``OriginalMfgBody`` 
    
    :param originalMfgBody: 
    :type originalMfgBody: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: DvToMvMappingBuilder = ...  # unknown typename


class EditStockBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to create a :py:class:`NXOpen.Features.ShipDesign.EditStockBuilder` which
    is used to change the stock information on the basic design features.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateEditStockBuilder`
    
    Default values.
    
    =======================================  =========================================
    Property                                 Value
    =======================================  =========================================
    Offset.Value                             0 (millimeters part), 0 (inches part) 
    ---------------------------------------  -----------------------------------------
    PlateStock.KnuckleRatio                  3.0 
    ---------------------------------------  -----------------------------------------
    PlateStock.KnuckleSmoothAngle            3.0 
    ---------------------------------------  -----------------------------------------
    PlateStock.MaterialOption                0 
    ---------------------------------------  -----------------------------------------
    PlateStock.OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    ---------------------------------------  -----------------------------------------
    PlateStock.RestrictThicknessToMaterial   true 
    ---------------------------------------  -----------------------------------------
    PlateStock.ThickenOption                 SingleSided 
    ---------------------------------------  -----------------------------------------
    PlateStock.Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    ---------------------------------------  -----------------------------------------
    PlateStock.ThicknessSourceOption         List 
    ---------------------------------------  -----------------------------------------
    SectionType                              Profile 
    ---------------------------------------  -----------------------------------------
    StiffenerStock.AnchorPoint               0 
    ---------------------------------------  -----------------------------------------
    StiffenerStock.PlateHeight.Value         50 (millimeters part), 2 (inches part) 
    ---------------------------------------  -----------------------------------------
    StiffenerStock.SectionType               Profile 
    =======================================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    
    def UpdateStockInformation(self, shipStructure: NXOpen.NXObject) -> None:
        """
        Update stock information
        
        Signature ``UpdateStockInformation(shipStructure)`` 
        
        :param shipStructure: 
        :type shipStructure: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetPillarDirection(self, direction: NXOpen.Direction) -> None:
        """
        Sets the pillar direction.  
        
        Signature ``SetPillarDirection(direction)`` 
        
        :param direction: 
        :type direction: :py:class:`NXOpen.Direction` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    BuiltUpPillarStock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the stock data used to define the built up stock information of the pillar.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpPillarStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EndCutEnd: StiffenerSystemBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the end of the stiffener sub system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutEnd`` 
    
    :param endCutEnd: 
    :type endCutEnd: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    EndCutStart: StiffenerSystemBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut to use at the start of the stiffener sub system.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutStart`` 
    
    :param endCutStart: 
    :type endCutStart: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderEndCutTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MountingMethod: StiffenerSystemBuilderMountingMethods = ...
    """
    Returns or sets  the mounting method 
    
    <hr>
    
    Getter Method
    
    Signature ``MountingMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMountingMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MountingMethod`` 
    
    :param mountingMethod: 
    :type mountingMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderMountingMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset to apply to the current plate system mold face to produce the desired mold face.  
    
    The offset is applied in the thickness direction defined in the plate system feature 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationAngle: NXOpen.Expression = ...
    """
    Returns  the angle at which the stiffener system is placed relative to the reference.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX10.0.0
       Orientation angle can only be modified on the full profile system itself.
    
    License requirements: None.
    """
    OrientationAnglePillar: NXOpen.Expression = ...
    """
    Returns  the angle at which the pillar system is placed relative to the reference.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAnglePillar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    OrientationLinePillar: NXOpen.SelectCurve = ...
    """
    Returns  the line specified for the pillar system angle reference.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationLinePillar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    OrientationMethod: StiffenerSystemBuilderOrientationMethods = ...
    """
    Returns or sets  the method used to define the reference for the orientation angle of stiffener system.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX10.0.0
       Orientation method can only be modified on the full profile system itself.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationMethod`` 
    
    :param orientationMethod: 
    :type orientationMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX10.0.0
       Orientation method can only be modified on the full profile system itself.
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    OrientationVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector specified for the orientation angle reference.  
    
    Only used when when Method is :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods.Vector <NXOpen.Features.ShipDesign.StiffenerSystemBuilderOrientationMethods>`.. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX10.0.0
       Orientation vector can only be modified on the full profile system itself.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationVector`` 
    
    :param orientationVector: 
    :type orientationVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX10.0.0
       Orientation vector can only be modified on the full profile system itself.
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    PillarStock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the stock data used to define the stock information of the pillar.  
    
    <hr>
    
    Getter Method
    
    Signature ``PillarStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlateStock: PlateStockBuilder = ...
    """
    Returns  the plate stock builder, used to define the plate material, grade, 
    thickness, mass density, thicken option and opposite thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateStock`` 
    
    :returns:  Plate Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Reverse: bool = ...
    """
    Returns or sets  the indication whether the direction of the flange should be reversed on this stiffener system.  
    
    The default
    direction is based on the ship structure that the stiffener is being built upon. 
    
    <hr>
    
    Getter Method
    
    Signature ``Reverse`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reverse`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    SectionType: PillarSystemBuilderStockSectionType = ...
    """
    Returns or sets  the section type (profile or built up) for pillar system.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarSystemBuilderStockSectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param sectionType: 
    :type sectionType: :py:class:`NXOpen.Features.ShipDesign.PillarSystemBuilderStockSectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipStructure: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the ship structures to change the stock information 
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffenerStock: StiffenerStockBuilder = ...
    """
    Returns  the stock data used to define the stock information of the stiffener.  
    
    <hr>
    
    Getter Method
    
    Signature ``StiffenerStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Tightness: int = ...
    """
    Returns or sets  the tightness to apply to plate and subplate systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tightness`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tightness`` 
    
    :param tightness: 
    :type tightness: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: EditStockBuilder = ...  # unknown typename


class AlongGuideCutBuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlongGuideCutBuilderCreationMethod():
    """
    Creation method used to define the placement of the along guide cut 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WeldClearance", "Weld clearance cut type"
       "WaterStop", "Water stop cut type"
       "EggBoxTop", "Egg box top cut type - added in NX11"
       "EggBoxBottom", "Egg box bottom cut type - added in NX11"
       "EggBox", "Only type to create basic design eggbox - added in NX12.0"
    """
    WeldClearance = 0  # AlongGuideCutBuilderCreationMethodMemberType
    WaterStop = 1  # AlongGuideCutBuilderCreationMethodMemberType
    EggBoxTop = 2  # AlongGuideCutBuilderCreationMethodMemberType
    EggBoxBottom = 3  # AlongGuideCutBuilderCreationMethodMemberType
    EggBox = 4  # AlongGuideCutBuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlongGuideCutBuilderWaterStopOffsetMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlongGuideCutBuilderWaterStopOffsetMethod():
    """
    Offset option used to define the placement of the water stop guide cut 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Symmetric", "The left offset and right offset are symmetric"
       "Asymmetric", "The left offset and right offset are asymmetric"
    """
    Symmetric = 0  # AlongGuideCutBuilderWaterStopOffsetMethodMemberType
    Asymmetric = 1  # AlongGuideCutBuilderWaterStopOffsetMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlongGuideCutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.AlongGuideCut` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateAlongGuideCutBuilder`
    
    Default values.
    
    ==========================  ===============================================
    Property                    Value
    ==========================  ===============================================
    ArrowHeadAngle.Value        60.0 
    --------------------------  -----------------------------------------------
    ArrowHeadHeight.Value       5.0 (millimeters part), 0.2 (inches part) 
    --------------------------  -----------------------------------------------
    ArrowHeight.Value           20.0 (millimeters part), 0.8 (inches part) 
    --------------------------  -----------------------------------------------
    DistanceTolerance           0.0254 (millimeters part), 0.001 (inches part) 
    --------------------------  -----------------------------------------------
    LeftOffsetDistance.Value    150.0 (millimeters part), 6.0 (inches part) 
    --------------------------  -----------------------------------------------
    RightOffsetDistance.Value   150.0 (millimeters part), 6.0 (inches part) 
    ==========================  ===============================================
    
    .. versionadded:: NX8.5.0
    """
    
    class CreationMethod():
        """
        Creation method used to define the placement of the along guide cut 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WeldClearance", "Weld clearance cut type"
           "WaterStop", "Water stop cut type"
           "EggBoxTop", "Egg box top cut type - added in NX11"
           "EggBoxBottom", "Egg box bottom cut type - added in NX11"
           "EggBox", "Only type to create basic design eggbox - added in NX12.0"
        """
        WeldClearance = 0  # AlongGuideCutBuilderCreationMethodMemberType
        WaterStop = 1  # AlongGuideCutBuilderCreationMethodMemberType
        EggBoxTop = 2  # AlongGuideCutBuilderCreationMethodMemberType
        EggBoxBottom = 3  # AlongGuideCutBuilderCreationMethodMemberType
        EggBox = 4  # AlongGuideCutBuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WaterStopOffsetMethod():
        """
        Offset option used to define the placement of the water stop guide cut 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Symmetric", "The left offset and right offset are symmetric"
           "Asymmetric", "The left offset and right offset are asymmetric"
        """
        Symmetric = 0  # AlongGuideCutBuilderWaterStopOffsetMethodMemberType
        Asymmetric = 1  # AlongGuideCutBuilderWaterStopOffsetMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ArrowHeadAngle: NXOpen.Expression = ...
    """
    Returns  the arrow head angle when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.EggBox  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>` in 
    NX ship basic design.  
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowHeadAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ArrowHeadHeight: NXOpen.Expression = ...
    """
    Returns  the arrow head height when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.EggBox  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>` in 
    NX ship basic design.  
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowHeadHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ArrowHeight: NXOpen.Expression = ...
    """
    Returns  the arrow height when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.EggBox  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>` in 
    NX ship basic design.  
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    GuideCurve: NXOpen.SelectNXObject = ...
    """
    Returns  the guide curve when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.WeldClearance  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    GuideCurveList: NXOpen.SelectNXObjectList = ...
    """
    Returns  the guide curve list when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.WeldClearance  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideCurveList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    LeftOffsetDistance: NXOpen.Expression = ...
    """
    Returns  the left offset distance when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod.Asymmetric  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod>`,
    or the offset distance for both side when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod.Symmetric < NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftOffsetDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ManufacturingInformation: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock builder that holds the manufacturing data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingInformation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    PlacementType: AlongGuideCutBuilderCreationMethod = ...
    """
    Returns or sets  the method used to define the placement of the along guide cut 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param placementType: 
    :type placementType: :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    RightOffsetDistance: NXOpen.Expression = ...
    """
    Returns  the right offset distance when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod.Asymmetric  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightOffsetDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ShipStructure: NXOpen.SelectBodyList = ...
    """
    Returns  the target plate or stiffener when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.WeldClearance  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ShipStructureEdge: NXOpen.SelectEdgeList = ...
    """
    Returns  the target edge when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.WaterStop  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructureEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Spreadsheet: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the spreadsheet builder, :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`,
    which defines the along guide cut cross section type and parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``Spreadsheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WaterStopOffsetOption: AlongGuideCutBuilderWaterStopOffsetMethod = ...
    """
    Returns or sets  the offset option when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.WaterStop  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``WaterStopOffsetOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterStopOffsetOption`` 
    
    :param offsetOption: 
    :type offsetOption: :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderWaterStopOffsetMethod` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    WaterStopShape: NXOpen.SelectNXObject = ...
    """
    Returns  the tool object when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.WaterStop  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``WaterStopShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WaterStopShapeList: NXOpen.SelectNXObjectList = ...
    """
    Returns  the tool object list when the :py:class:`NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod`
    is :py:class:` NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod.WaterStop  < NXOpen.Features.ShipDesign.AlongGuideCutBuilderCreationMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``WaterStopShapeList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: AlongGuideCutBuilder = ...  # unknown typename


class ExamineSteelFeatureBuilderResultMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExamineSteelFeatureBuilderResult():
    """
    Represents the status of examining result. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoCheck", "No check"
       "Pass", "All pass"
       "Fail", "No pass"
       "NoResult", "Check but can't find check items"
    """
    NoCheck = 0  # ExamineSteelFeatureBuilderResultMemberType
    Pass = 1  # ExamineSteelFeatureBuilderResultMemberType
    Fail = 2  # ExamineSteelFeatureBuilderResultMemberType
    NoResult = 3  # ExamineSteelFeatureBuilderResultMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LongitudinalBulkhead(NXOpen.Features.BodyFeature):
    """
    Represents a Longitudinal Bulkhead feature.  
    
    The Longitudinal Bulkhead is used to represent
    mostly vertical surface shapes that align with the bow to stern direction of the ship. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: LongitudinalBulkhead = ...  # unknown typename


class WeldCut2(NXOpen.Features.BodyFeature):
    """
    Represents a weld cut2 feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.WeldCut2Builder`
    
    .. versionadded:: NX8.0.1
    """
    Null: WeldCut2 = ...  # unknown typename


class PlateChamfer(NXOpen.Features.BodyFeature):
    """
    Represents a plate chamfer feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PlateChamferBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: PlateChamfer = ...  # unknown typename


class InverseBendingLinesBuilderMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InverseBendingLinesBuilderMethodType():
    """
    The method used to generate the bending curves. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "Automatic."
       "NumberOfCurves", "Number of curves."
       "FillingCoefficient", "Filling Coefficient (unsupported)."
       "EvenFit", "Even Fit."
    """
    Automatic = 0  # InverseBendingLinesBuilderMethodTypeMemberType
    NumberOfCurves = 1  # InverseBendingLinesBuilderMethodTypeMemberType
    FillingCoefficient = 2  # InverseBendingLinesBuilderMethodTypeMemberType
    EvenFit = 3  # InverseBendingLinesBuilderMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InverseBendingLinesBuilderNeutralMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InverseBendingLinesBuilderNeutralMethodType():
    """
    The method used to calculate the neutral line. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BaseLine", "Base line."
       "CenterLine", "Center line."
       "NeutralAxis", "Neutral axis."
    """
    BaseLine = 0  # InverseBendingLinesBuilderNeutralMethodTypeMemberType
    CenterLine = 1  # InverseBendingLinesBuilderNeutralMethodTypeMemberType
    NeutralAxis = 2  # InverseBendingLinesBuilderNeutralMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InverseBendingLinesBuilderReferencePlaneTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InverseBendingLinesBuilderReferencePlaneType():
    """
    The reference plane to draw the diagram on. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "XCYCPlane", "XC-YC plane."
       "YCZCPlane", "YC-ZC plane."
       "ZCXCPlane", "ZC-XC plane."
       "NegativeXCYCPlane", "-XC-YC plane."
       "NegativeYCZCPlane", "-YC-ZC plane."
       "NegativeZCXCPlane", "-ZC-XC plane."
       "DefineCSYS", "User defined plane."
    """
    XCYCPlane = 0  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
    YCZCPlane = 1  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
    ZCXCPlane = 2  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
    NegativeXCYCPlane = 3  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
    NegativeYCZCPlane = 4  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
    NegativeZCXCPlane = 5  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
    DefineCSYS = 6  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InverseBendingLinesBuilderMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InverseBendingLinesBuilderMeasureType():
    """
    The direction to measure from. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LeftToRight", "Left to right."
       "RightToLeft", "Right to left."
    """
    LeftToRight = 0  # InverseBendingLinesBuilderMeasureTypeMemberType
    RightToLeft = 1  # InverseBendingLinesBuilderMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InverseBendingLinesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to create or edit a :py:class:`NXOpen.Features.ShipDesign.InverseBendingLines` feature.  
    
    This builder can create or edit multiple features, depending on the number of profile bodies input.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateInverseBendingLinesBuilder`
    
    Default values.
    
    =========================  ==========================================
    Property                   Value
    =========================  ==========================================
    DrawVentHoles              1 
    -------------------------  ------------------------------------------
    Extension.Value            0 (millimeters part), 0 (inches part) 
    -------------------------  ------------------------------------------
    FillingCoefficient         0.75 
    -------------------------  ------------------------------------------
    GridSpacing.Value          200 (millimeters part), 0 (inches part) 
    -------------------------  ------------------------------------------
    LowerMargin.Value          2.5 (millimeters part), 0 (inches part) 
    -------------------------  ------------------------------------------
    MaxNumberOfCurves          5 
    -------------------------  ------------------------------------------
    Measure                    LeftToRight 
    -------------------------  ------------------------------------------
    Method                     Automatic 
    -------------------------  ------------------------------------------
    NeutralAxisPercent         60 
    -------------------------  ------------------------------------------
    NeutralMethod              BaseLine 
    -------------------------  ------------------------------------------
    NonlinearityCoefficient    0.3 
    -------------------------  ------------------------------------------
    NumberOfCurves             2 
    -------------------------  ------------------------------------------
    NumberOfRows               10 
    -------------------------  ------------------------------------------
    OffsetBetweenDiagrams      500 
    -------------------------  ------------------------------------------
    Overlap.Value              200 (millimeters part), 0 (inches part) 
    -------------------------  ------------------------------------------
    ReferencePlane             XCYCPlane 
    -------------------------  ------------------------------------------
    SideMargin.Value           0 (millimeters part), 0 (inches part) 
    -------------------------  ------------------------------------------
    UpperMargin.Value          5 (millimeters part), 4 (inches part) 
    -------------------------  ------------------------------------------
    VarMarginIncrement.Value   20 (millimeters part), 0.75 (inches part) 
    -------------------------  ------------------------------------------
    VarMarginMax.Value         75 (millimeters part), 3 (inches part) 
    -------------------------  ------------------------------------------
    VarMarginMin.Value         15 (millimeters part), 0.75 (inches part) 
    -------------------------  ------------------------------------------
    VarOverlapMax              2 
    -------------------------  ------------------------------------------
    VarOverlapMin              1 
    =========================  ==========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class MethodType():
        """
        The method used to generate the bending curves. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "Automatic."
           "NumberOfCurves", "Number of curves."
           "FillingCoefficient", "Filling Coefficient (unsupported)."
           "EvenFit", "Even Fit."
        """
        Automatic = 0  # InverseBendingLinesBuilderMethodTypeMemberType
        NumberOfCurves = 1  # InverseBendingLinesBuilderMethodTypeMemberType
        FillingCoefficient = 2  # InverseBendingLinesBuilderMethodTypeMemberType
        EvenFit = 3  # InverseBendingLinesBuilderMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NeutralMethodType():
        """
        The method used to calculate the neutral line. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BaseLine", "Base line."
           "CenterLine", "Center line."
           "NeutralAxis", "Neutral axis."
        """
        BaseLine = 0  # InverseBendingLinesBuilderNeutralMethodTypeMemberType
        CenterLine = 1  # InverseBendingLinesBuilderNeutralMethodTypeMemberType
        NeutralAxis = 2  # InverseBendingLinesBuilderNeutralMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ReferencePlaneType():
        """
        The reference plane to draw the diagram on. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "XCYCPlane", "XC-YC plane."
           "YCZCPlane", "YC-ZC plane."
           "ZCXCPlane", "ZC-XC plane."
           "NegativeXCYCPlane", "-XC-YC plane."
           "NegativeYCZCPlane", "-YC-ZC plane."
           "NegativeZCXCPlane", "-ZC-XC plane."
           "DefineCSYS", "User defined plane."
        """
        XCYCPlane = 0  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
        YCZCPlane = 1  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
        ZCXCPlane = 2  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
        NegativeXCYCPlane = 3  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
        NegativeYCZCPlane = 4  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
        NegativeZCXCPlane = 5  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
        DefineCSYS = 6  # InverseBendingLinesBuilderReferencePlaneTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeasureType():
        """
        The direction to measure from. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LeftToRight", "Left to right."
           "RightToLeft", "Right to left."
        """
        LeftToRight = 0  # InverseBendingLinesBuilderMeasureTypeMemberType
        RightToLeft = 1  # InverseBendingLinesBuilderMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetFailedProfiles(self) -> tuple:
        """
        The profiles that failed and error code for each failed profile.  
        
        Signature ``GetFailedProfiles()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (failedProfiles, failedReasons). failedProfiles is a list of :py:class:`NXOpen.Body`.   The profiles that failed. failedReasons is a list of int.   The error code for each failure. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    DrawVentHoles: bool = ...
    """
    Returns or sets  the switch that determines if vent holes are drawn in the diagram.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawVentHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawVentHoles`` 
    
    :param drawVentHoles: 
    :type drawVentHoles: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Extension: NXOpen.Expression = ...
    """
    Returns  the extension added on each end of the profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FillingCoefficient: float = ...
    """
    Returns or sets  the filling coefficient that represents the amplitude of the bending line relative to the profile height.  
    
    Only when method is :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType.FillingCoefficient <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType>`.
    
    <hr>
    
    Getter Method
    
    Signature ``FillingCoefficient`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FillingCoefficient`` 
    
    :param fillingCoefficient: 
    :type fillingCoefficient: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    GridSpacing: NXOpen.Expression = ...
    """
    Returns  the grid spacing in the diagram.  
    
    <hr>
    
    Getter Method
    
    Signature ``GridSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LowerMargin: NXOpen.Expression = ...
    """
    Returns  the lower margin on the profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerMargin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaxNumberOfCurves: int = ...
    """
    Returns or sets  the maximum number of curves to generate on the profile.  
    
    Only when method is :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType.NumberOfCurves <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType>`
    or :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType.EvenFit <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxNumberOfCurves`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaxNumberOfCurves`` 
    
    :param maxNumberOfCurves: 
    :type maxNumberOfCurves: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Measure: InverseBendingLinesBuilderMeasureType = ...
    """
    Returns or sets  the measurement direction used in the table, left to right, or right to left.  
    
    <hr>
    
    Getter Method
    
    Signature ``Measure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMeasureType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Measure`` 
    
    :param measure: 
    :type measure: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMeasureType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Method: InverseBendingLinesBuilderMethodType = ...
    """
    Returns or sets  the method used to calculate the number and spacing of the curves on the profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    NeutralAxisPercent: float = ...
    """
    Returns or sets  the height of a line through the profile that maintains a constant length when the profile is bent.  
    
    Measured as a percentage of the profile height relative to the base line.
    
    <hr>
    
    Getter Method
    
    Signature ``NeutralAxisPercent`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeutralAxisPercent`` 
    
    :param neutralAxisPercent: 
    :type neutralAxisPercent: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    NeutralMethod: InverseBendingLinesBuilderNeutralMethodType = ...
    """
    Returns or sets  the neutral method determines the curve that is used for measurements and calculations when un-bending the profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``NeutralMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderNeutralMethodType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeutralMethod`` 
    
    :param neutralMethod: 
    :type neutralMethod: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderNeutralMethodType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    NonlinearityCoefficient: float = ...
    """
    Returns or sets  the nonlinearity coefficient used to determine the bending curve spacing.  
    
    Only when method is :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType.NumberOfCurves <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType>`.
    
    <hr>
    
    Getter Method
    
    Signature ``NonlinearityCoefficient`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonlinearityCoefficient`` 
    
    :param nonlinearityCoefficient: 
    :type nonlinearityCoefficient: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    NumberOfCurves: int = ...
    """
    Returns or sets  the number of curves to generate on the profile.  
    
    Only when method is :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType.NumberOfCurves <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderMethodType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfCurves`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfCurves`` 
    
    :param numberOfCurves: 
    :type numberOfCurves: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    NumberOfRows: int = ...
    """
    Returns or sets  the number of rows in the table.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfRows`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfRows`` 
    
    :param numberOfRows: 
    :type numberOfRows: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    OffsetBetweenDiagrams: float = ...
    """
    Returns or sets  the distance between the bottom of one table and the top of the next diagram.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetBetweenDiagrams`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetBetweenDiagrams`` 
    
    :param offsetBetweenDiagrams: 
    :type offsetBetweenDiagrams: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Overlap: NXOpen.Expression = ...
    """
    Returns  the overlap distance of the bending curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``Overlap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ProfileBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the profile bodies to create Inverse Bending Lines on.  
    
    The list can be populated in any one of the following ways:
    
      * If the list of profile bodies is empty, the function will search the current workset for any bent profiles. For each
    profile that does not have an Inverse Bending Lines feature, a new one is created. A profile that
    already has an Inverse Bending Lines feature associated to it, is edited with the new parameters.
      * If the list contains one or more profiles and no feature is given, an Inverse Bending Lines features will
    be created or edited for each profile in the list.
      * If a feature is supplied to be edited, the list must contain a single bent profile that resides in the
    same design element as the feature.
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReferencePlane: InverseBendingLinesBuilderReferencePlaneType = ...
    """
    Returns or sets  the reference plane type determines how you will define the plane of the diagram and table 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePlane`` 
    
    :param referencePlane: 
    :type referencePlane: :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ReferencePlanePoint: NXOpen.Point = ...
    """
    Returns or sets  the reference plane origin when one of the standard planes is chosen.  
    
    Only when reference plane type is one of:
    
      * :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType.XCYCPlane <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType>`.
      * :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType.YCZCPlane <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType>`.
      * :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType.ZCXCPlane <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType>`.
      * :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType.NegativeXCYCPlane <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType>`.
      * :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType.NegativeYCZCPlane <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType>`.
      * :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType.NegativeZCXCPlane <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType>`.
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePlanePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePlanePoint`` 
    
    :param referencePlanePoint: 
    :type referencePlanePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    SideMargin: NXOpen.Expression = ...
    """
    Returns  the side margin on each end of the profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideMargin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    UpperMargin: NXOpen.Expression = ...
    """
    Returns  the upper margin on the profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperMargin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UserCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the user defined CSYS used to locate and orient the tables and diagrams.  
    
    Only when reference plane type is :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType.DefineCSYS <NXOpen.Features.ShipDesign.InverseBendingLinesBuilderReferencePlaneType>`.
    
    <hr>
    
    Getter Method
    
    Signature ``UserCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserCsys`` 
    
    :param userCsys: 
    :type userCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    VarMarginIncrement: NXOpen.Expression = ...
    """
    Returns  the Increment used to vary horizontal margins for profiles.  
    
    <hr>
    
    Getter Method
    
    Signature ``VarMarginIncrement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    VarMarginMax: NXOpen.Expression = ...
    """
    Returns  the maximum horizontal margin used for profiles.  
    
    <hr>
    
    Getter Method
    
    Signature ``VarMarginMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    VarMarginMin: NXOpen.Expression = ...
    """
    Returns  the minimum horizontal margin used for profiles.  
    
    <hr>
    
    Getter Method
    
    Signature ``VarMarginMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    VarOverlapMax: int = ...
    """
    Returns or sets  the variable aligned overlap maximum number of grids.  
    
    <hr>
    
    Getter Method
    
    Signature ``VarOverlapMax`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VarOverlapMax`` 
    
    :param varOverlapMax: 
    :type varOverlapMax: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    VarOverlapMin: int = ...
    """
    Returns or sets  the variable aligned overlap minimum number of grids.  
    
    <hr>
    
    Getter Method
    
    Signature ``VarOverlapMin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VarOverlapMin`` 
    
    :param varOverlapMin: 
    :type varOverlapMin: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: InverseBendingLinesBuilder = ...  # unknown typename


class ExcessMaterialBuilderVersionIDMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExcessMaterialBuilderVersionID():
    """
    version identifiers for the different revisions of the excess material feature.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", "This feature builder is used to edit an existing NX75 - NX901 excess material feature."
       "Nx902", "This feature builder is used to create or edit an NX902 or beyond feature."
    """
    Original = 0  # ExcessMaterialBuilderVersionIDMemberType
    Nx902 = 1  # ExcessMaterialBuilderVersionIDMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExcessMaterialBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExcessMaterialBuilderTypes():
    """
    The feature type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ExcessMaterial", "excess material placement method"
       "FitUp", "fit up placement method (added in NX902)"
    """
    ExcessMaterial = 0  # ExcessMaterialBuilderTypesMemberType
    FitUp = 1  # ExcessMaterialBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExcessMaterialBuilderOffsetMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExcessMaterialBuilderOffset():
    """
    The offset type (only applicable for excess material, fitup will ignore the offset type) 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "constant offset"
       "LinearVarying", " - "
    """
    Constant = 0  # ExcessMaterialBuilderOffsetMemberType
    LinearVarying = 1  # ExcessMaterialBuilderOffsetMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExcessMaterialBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ExcessMaterial` builder.  
    
    The Excess Material feature adds excess manufacturing material to the end of plate.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateExcessMaterialBuilder`
    
    Default values.
    
    ==================================  ========================================
    Property                            Value
    ==================================  ========================================
    EndOffset.Value                     10 (millimeters part), 10 (inches part) 
    ----------------------------------  ----------------------------------------
    ExtendEndFace                       0 
    ----------------------------------  ----------------------------------------
    ExtendStartFace                     0 
    ----------------------------------  ----------------------------------------
    OffsetDistance.Value (deprecated)   10 (millimeters part), 10 (inches part) 
    ----------------------------------  ----------------------------------------
    OffsetType                          Constant 
    ----------------------------------  ----------------------------------------
    StartOffset.Value                   10 (millimeters part), 10 (inches part) 
    ==================================  ========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class VersionID():
        """
        version identifiers for the different revisions of the excess material feature.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", "This feature builder is used to edit an existing NX75 - NX901 excess material feature."
           "Nx902", "This feature builder is used to create or edit an NX902 or beyond feature."
        """
        Original = 0  # ExcessMaterialBuilderVersionIDMemberType
        Nx902 = 1  # ExcessMaterialBuilderVersionIDMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Types():
        """
        The feature type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ExcessMaterial", "excess material placement method"
           "FitUp", "fit up placement method (added in NX902)"
        """
        ExcessMaterial = 0  # ExcessMaterialBuilderTypesMemberType
        FitUp = 1  # ExcessMaterialBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Offset():
        """
        The offset type (only applicable for excess material, fitup will ignore the offset type) 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "constant offset"
           "LinearVarying", " - "
        """
        Constant = 0  # ExcessMaterialBuilderOffsetMemberType
        LinearVarying = 1  # ExcessMaterialBuilderOffsetMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    EndOffset: NXOpen.Expression = ...
    """
    Returns  the end offset (only applicable for excess material with variable offsets, fitup and constant offset excess material will ignore this value) 
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    ExtendEndFace: bool = ...
    """
    Returns or sets  the extend end side face option (not applicable for fitup) 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendEndFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendEndFace`` 
    
    :param extendEndFace: 
    :type extendEndFace: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ExtendStartFace: bool = ...
    """
    Returns or sets  the extend start side face option (not applicable for fitup) 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendStartFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendStartFace`` 
    
    :param extendStartFace: 
    :type extendStartFace: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    OffsetDistance: NXOpen.Expression = ...
    """
    Returns  the offset distance 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX9.0.2
       Use :py:meth:`NXOpen.Features.ShipDesign.ExcessMaterialBuilder.StartOffset` instead.
    
    License requirements: None.
    """
    OffsetType: ExcessMaterialBuilderOffset = ...
    """
    Returns or sets  the offset type (only applicable for excess material, fitup will ignore the offset type) 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ExcessMaterialBuilderOffset` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetType`` 
    
    :param offsetType: 
    :type offsetType: :py:class:`NXOpen.Features.ShipDesign.ExcessMaterialBuilderOffset` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    SelectFace: NXOpen.SelectFace = ...
    """
    Returns  the selection face.  
    
    The selected face will be offset by the specified distance. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`NXOpen.Features.ShipDesign.ExcessMaterialBuilder.SelectFaces` instead.
    
    License requirements: None.
    """
    SelectFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces that need to have excess material.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartOffset: NXOpen.Expression = ...
    """
    Returns  the start offset (replaces the legacy offset distance property, and is used for both excess material and fitup) 
    
    <hr>
    
    Getter Method
    
    Signature ``StartOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    Type: ExcessMaterialBuilderTypes = ...
    """
    Returns or sets  the feature type (ie excess material or fitup) 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ExcessMaterialBuilderTypes` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ExcessMaterialBuilderTypes` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Version: ExcessMaterialBuilderVersionID = ...
    """
    Returns  the version of the feature (used to determine which properties and methods are applicable) during edit.  
    
    The version of new features during create will be NX902 
    
    <hr>
    
    Getter Method
    
    Signature ``Version`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ExcessMaterialBuilderVersionID` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    Null: ExcessMaterialBuilder = ...  # unknown typename


class Stiffener(NXOpen.Features.BodyFeature):
    """
    Represents a stiffener feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: Stiffener = ...  # unknown typename


class LongitudinalBulkheadBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LongitudinalBulkheadBuilderTypes():
    """
    Indicates the method that is being used to define the mold face of the longitudinal bulkhead. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetBody", "Mold face is being defined by a selected sheet body."
       "Planes", "Mold face is being defined by selected or defined planes."
       "Extrusion", "Mold face is being defined by extruding a supplied section shape."
    """
    SheetBody = 0  # LongitudinalBulkheadBuilderTypesMemberType
    Planes = 1  # LongitudinalBulkheadBuilderTypesMemberType
    Extrusion = 2  # LongitudinalBulkheadBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LongitudinalBulkheadBuilder(PlateSystemBuilder):
    """
    This class is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkhead` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateLongitudinalBulkheadBuilder`
    
    Default values.
    
    ======================  ======================================
    Property                Value
    ======================  ======================================
    Offset.Value            0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    Primary                 FwdPortToInUp 
    ----------------------  --------------------------------------
    PrimaryOnReference      FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary1OnReference   FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2              FwdPortToInUp 
    ----------------------  --------------------------------------
    Secondary2OnReference   FwdPortToInUp 
    ======================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Indicates the method that is being used to define the mold face of the longitudinal bulkhead. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetBody", "Mold face is being defined by a selected sheet body."
           "Planes", "Mold face is being defined by selected or defined planes."
           "Extrusion", "Mold face is being defined by extruding a supplied section shape."
        """
        SheetBody = 0  # LongitudinalBulkheadBuilderTypesMemberType
        Planes = 1  # LongitudinalBulkheadBuilderTypesMemberType
        Extrusion = 2  # LongitudinalBulkheadBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ExtrusionLimit: NXOpen.Plane = ...
    """
    Returns or sets  the plane definining the limit of the extrusion.  
    
    Only used if type is :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes.Extrusion <NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrusionLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrusionLimit`` 
    
    :param extrusionLimit: 
    :type extrusionLimit: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MoldFacePlane: NXOpen.Plane = ...
    """
    Returns or sets  the supplied section will be projected to this plane for the start of the extrusion.  
    
    Only used if type is :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes.Extrusion <NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoldFacePlane`` 
    
    :param moldFacePlane: 
    :type moldFacePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MoldFacePlaneList: PlaneListBuilderList = ...
    """
    Returns  the list of planes defined to define the mold face.  
    
    Each plane defined will create a longitudinal bulkhead.
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes.Planes <NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlaneList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFacePlanes: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the planes selected to define the mold face.  
    
    Each plane selected will create a longitudinal bulkhead. When editing 
    a longitudinal bulkhead, only a single plane can be selected.
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes.Planes <NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlanes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFaceSection: NXOpen.Section = ...
    """
    Returns  the section containing the shape to extrude.  
    
    Only used if type is :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes.Extrusion <NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaceSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFaceSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet body selected to define the mold face.  
    
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes.SheetBody <NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaceSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: LongitudinalBulkheadBuilderTypes = ...
    """
    Returns or sets  the method used to define the mold face of the longitudinal bulkhead.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.LongitudinalBulkheadBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: LongitudinalBulkheadBuilder = ...  # unknown typename


class ShipAttributeHolder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipAttributeHolder` builder
    
    This is an abstract class.
    
    .. versionadded:: NX8.0.0
    """
    
    @typing.overload
    def SetAttributesToObjects(self, object: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the attributes to feature objects 
        
        Signature ``SetAttributesToObjects(object)`` 
        
        :param object: 
        :type object: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.0.1
           Use :py:meth:`NXOpen.Features.ShipDesign.ShipAttributeHolder.SetAttributesToProxy` instead.
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    @typing.overload
    def SetAttributesToObjects(self, bCreate: bool, featBuilder: NXOpen.Features.FeatureBuilder) -> None:
        """
        Sets the attributes to objects
        
        Signature ``SetAttributesToObjects(bCreate, featBuilder)`` 
        
        :param bCreate:  create or edit 
        :type bCreate: bool 
        :param featBuilder: 
        :type featBuilder: :py:class:`NXOpen.Features.FeatureBuilder` 
        
        .. versionadded:: NX8.0.1
        
        .. deprecated::  NX8.0.2
           Use :py:meth:`NXOpen.Features.ShipDesign.ShipAttributeHolder.SetAttributesToProxy` instead.
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    @typing.overload
    def CopyAttributesToPart(self, object: 'list[NXOpen.NXObject]') -> None:
        """
        Copies the attributes to part 
        
        Signature ``CopyAttributesToPart(object)`` 
        
        :param object: 
        :type object: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.0.1
           This method is no longer valid. Use the un-deprecated method with the same method name.
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    @typing.overload
    def CopyAttributesToPart(self, bCreate: bool, featBuilder: NXOpen.Features.FeatureBuilder) -> None:
        """
        Copies the attributes from proxy to part 
        
        Signature ``CopyAttributesToPart(bCreate, featBuilder)`` 
        
        :param bCreate:  create or edit 
        :type bCreate: bool 
        :param featBuilder: 
        :type featBuilder: :py:class:`NXOpen.Features.FeatureBuilder` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def CopyAttributesToObjects(self, bCreate: bool, featBuilder: NXOpen.Features.FeatureBuilder) -> None:
        """
        Copies attributes from proxy to feature objects 
        
        Signature ``CopyAttributesToObjects(bCreate, featBuilder)`` 
        
        :param bCreate:  create or edit 
        :type bCreate: bool 
        :param featBuilder: 
        :type featBuilder: :py:class:`NXOpen.Features.FeatureBuilder` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetAttributesToProxy(self, object: NXOpen.NXObject) -> None:
        """
        Sets the attributes to proxy 
        
        Signature ``SetAttributesToProxy(object)`` 
        
        :param object:  NULL or object to be edited  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def GetAttributeProxy(self) -> NXOpen.NXObject:
        """
        Gets attribute proxy  
        
        Signature ``GetAttributeProxy()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetAttributeToProxyFromBuilder(self, featBuilder: NXOpen.Features.FeatureBuilder) -> None:
        """
        Sets attribute proxy 
        
        Signature ``SetAttributeToProxyFromBuilder(featBuilder)`` 
        
        :param featBuilder: 
        :type featBuilder: :py:class:`NXOpen.Features.FeatureBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def GetContextAttributeFromNamesBuilder(self, featBuilder: NXOpen.Features.FeatureBuilder) -> None:
        """
        Gets context attribute from names builder 
        
        Signature ``GetContextAttributeFromNamesBuilder(featBuilder)`` 
        
        :param featBuilder: 
        :type featBuilder: :py:class:`NXOpen.Features.FeatureBuilder` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    Null: ShipAttributeHolder = ...  # unknown typename


class CornerCutListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[CornerCutListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: CornerCutListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: CornerCutListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> CornerCutListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: CornerCutListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: CornerCutListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[CornerCutListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[CornerCutListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: CornerCutListItemBuilder, object2: CornerCutListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: CornerCutListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.CornerCutListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: CornerCutListItemBuilderList = ...  # unknown typename


class ShellExpansionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShellExpansion` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShellExpansionBuilder`
    
    Default values.
    
    =========================  =====
    Property                   Value
    =========================  =====
    AdditionalPlanesPerFrame   0 
    -------------------------  -----
    Associative                1 
    -------------------------  -----
    MapFaceEdges               1 
    -------------------------  -----
    MapTransverseFrames        1 
    -------------------------  -----
    Tolerance                  1.0 
    =========================  =====
    
    .. versionadded:: NX7.5.0
    """
    AdditionalPlanesPerFrame: int = ...
    """
    Returns or sets  the additional planes per frame 
    
    <hr>
    
    Getter Method
    
    Signature ``AdditionalPlanesPerFrame`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdditionalPlanesPerFrame`` 
    
    :param additionalPlanesPerFrame: 
    :type additionalPlanesPerFrame: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AftLimitPlane: NXOpen.SelectDatumPlane = ...
    """
    Returns  the aft limit plane 
    
    <hr>
    
    Getter Method
    
    Signature ``AftLimitPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Associative: bool = ...
    """
    Returns or sets  a flag that determines if output is associative (only used during creation).  
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    BasePlane: NXOpen.SelectDatumPlane = ...
    """
    Returns  the base plane 
    
    <hr>
    
    Getter Method
    
    Signature ``BasePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CurvesToMap: NXOpen.Section = ...
    """
    Returns  the curves to map 
    
    <hr>
    
    Getter Method
    
    Signature ``CurvesToMap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FacesToFlatten: NXOpen.ScCollector = ...
    """
    Returns  the faces to flatten 
    
    <hr>
    
    Getter Method
    
    Signature ``FacesToFlatten`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ForeLimitPlane: NXOpen.SelectDatumPlane = ...
    """
    Returns  the fore limit plane 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeLimitPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MapFaceEdges: bool = ...
    """
    Returns or sets  the map face edges 
    
    <hr>
    
    Getter Method
    
    Signature ``MapFaceEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MapFaceEdges`` 
    
    :param mapFaceEdges: 
    :type mapFaceEdges: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    MapTransverseFrames: bool = ...
    """
    Returns or sets  the map transverse frames 
    
    <hr>
    
    Getter Method
    
    Signature ``MapTransverseFrames`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MapTransverseFrames`` 
    
    :param mapTransverseFrames: 
    :type mapTransverseFrames: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    UpperLimitPlane: NXOpen.SelectDatumPlane = ...
    """
    Returns  the upper limit plane 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimitPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ShellExpansionBuilder = ...  # unknown typename


class PenetrationAssociationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.PenetrationAssociationBuilder` builder    
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.PenetrationRequestCollection.CreatePenetrationAssociationBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def ButtonCutout(self) -> None:
        """
        Used to open the cutout dialog 
        
        Signature ``ButtonCutout()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AddRequest(self, request: PenetrationRequest) -> None:
        """
        Adds request object
        
        Signature ``AddRequest(request)`` 
        
        :param request: 
        :type request: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AddAdjacentStructure(self, adjacentStructure: NXOpen.Body) -> None:
        """
        Adds adjacent structures 
        
        Signature ``AddAdjacentStructure(adjacentStructure)`` 
        
        :param adjacentStructure: 
        :type adjacentStructure: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AddNonIntersectedStructure(self, structure: NXOpen.Body) -> None:
        """
        Adds nonintersected structures 
        
        Signature ``AddNonIntersectedStructure(structure)`` 
        
        :param structure: 
        :type structure: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def RemoveNonIntersectedStructures(self) -> None:
        """
        Removes all nonintersected structures 
        
        Signature ``RemoveNonIntersectedStructures()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AddSelectedCurve(self, curve: NXOpen.Body) -> None:
        """
        Adds selected curves 
        
        Signature ``AddSelectedCurve(curve)`` 
        
        :param curve: 
        :type curve: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def RemoveSelectedCurves(self) -> None:
        """
        Removes all selected curves 
        
        Signature ``RemoveSelectedCurves()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetCompensationPartNumber(self, selectionCompensationNumber: str) -> None:
        """
        The selection compensation 
        
        Signature ``SetCompensationPartNumber(selectionCompensationNumber)`` 
        
        :param selectionCompensationNumber: 
        :type selectionCompensationNumber: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    CornerRadius: NXOpen.Expression = ...
    """
    Returns  the corner radius expression 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CoutoutType: PenetrationRequestCoutoutType = ...
    """
    Returns or sets  the coutout type 
    
    <hr>
    
    Getter Method
    
    Signature ``CoutoutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCoutoutType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoutoutType`` 
    
    :param enumCoutoutType: 
    :type enumCoutoutType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCoutoutType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    CutoutPart: NXOpen.Part = ...
    """
    Returns or sets  the cutout part
    
    <hr>
    
    Getter Method
    
    Signature ``CutoutPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutoutPart`` 
    
    :param cutoutPart: 
    :type cutoutPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the diameter expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DirectionType: PenetrationRequestDirectionType = ...
    """
    Returns or sets  the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestDirectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param enumDirection: 
    :type enumDirection: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestDirectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    IsEditMode: bool = ...
    """
    Returns or sets  the flag to decide if it's requests association or associated requests editing 
    
    <hr>
    
    Getter Method
    
    Signature ``IsEditMode`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsEditMode`` 
    
    :param isEditMode: 
    :type isEditMode: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    IsKeepAssociation: bool = ...
    """
    Returns or sets  the flag to decide whether to keep association 
    
    <hr>
    
    Getter Method
    
    Signature ``IsKeepAssociation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsKeepAssociation`` 
    
    :param isKeepAssociation: 
    :type isKeepAssociation: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    ModifiedSketch: NXOpen.Sketch = ...
    """
    Returns or sets  the modified sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``ModifiedSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModifiedSketch`` 
    
    :param modifiedSketch: 
    :type modifiedSketch: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the penetration point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SketchSection: NXOpen.Section = ...
    """
    Returns or sets  the sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SketchSection`` 
    
    :param sectionSketch: 
    :type sectionSketch: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PenetrationAssociationBuilder = ...  # unknown typename


class InverseBendingLines(NXOpen.Features.CurveFeature):
    """
    Represents a inverse bending lines feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.InverseBendingLinesBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: InverseBendingLines = ...  # unknown typename


class ExcessMaterial(NXOpen.Features.BodyFeature):
    """
    Represents a excess material feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ExcessMaterialBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: ExcessMaterial = ...  # unknown typename


class ItFramesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ItFrames` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateItFramesBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    def CreateInterTransverseFrameListItem(self) -> ItFrameListItemBuilder:
        """
        Create a list containing all required info to generate inter transverse frame.  
        
        Signature ``CreateInterTransverseFrameListItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    InterTransverseFrameList: ItFrameListItemBuilderList = ...
    """
    Returns  the inter transverse frame list.  
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFrameList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ItFramesBuilder = ...  # unknown typename


class ShipIntersectionsBuilderCreationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipIntersectionsBuilderCreationType():
    """
    Define the creation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Manual", " - "
       "Spreadsheet", " - "
    """
    Manual = 0  # ShipIntersectionsBuilderCreationTypeMemberType
    Spreadsheet = 1  # ShipIntersectionsBuilderCreationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipIntersectionsBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipIntersectionsBuilderType():
    """
    Define the output option for each of the frame type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "SheetBodies", " - "
       "Curves", " - "
       "All", " - "
    """
    NotSet = 0  # ShipIntersectionsBuilderTypeMemberType
    SheetBodies = 1  # ShipIntersectionsBuilderTypeMemberType
    Curves = 2  # ShipIntersectionsBuilderTypeMemberType
    All = 3  # ShipIntersectionsBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipIntersectionsBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipIntersections` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipIntersectionsBuilder`
    
    Default values.
    
    ================================  =====
    Property                          Value
    ================================  =====
    BulkheadEnum                      None 
    --------------------------------  -----
    DeckEnum                          None 
    --------------------------------  -----
    InterTransFrameEnum               None 
    --------------------------------  -----
    ReadDataSet.CreateDataSetToggle   0 
    --------------------------------  -----
    ReadDataSet.NativeToggle          0 
    --------------------------------  -----
    TransFrameEnum                    None 
    --------------------------------  -----
    YFrameEnum                        None 
    --------------------------------  -----
    ZFrameEnum                        None 
    ================================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    class CreationType():
        """
        Define the creation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Manual", " - "
           "Spreadsheet", " - "
        """
        Manual = 0  # ShipIntersectionsBuilderCreationTypeMemberType
        Spreadsheet = 1  # ShipIntersectionsBuilderCreationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Type():
        """
        Define the output option for each of the frame type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "SheetBodies", " - "
           "Curves", " - "
           "All", " - "
        """
        NotSet = 0  # ShipIntersectionsBuilderTypeMemberType
        SheetBodies = 1  # ShipIntersectionsBuilderTypeMemberType
        Curves = 2  # ShipIntersectionsBuilderTypeMemberType
        All = 3  # ShipIntersectionsBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BulkheadEnum: ShipIntersectionsBuilderType = ...
    """
    Returns or sets  the output option for the Bulkhead Frames  
    
    <hr>
    
    Getter Method
    
    Signature ``BulkheadEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkheadEnum`` 
    
    :param bulkheadEnum: 
    :type bulkheadEnum: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    DeckEnum: ShipIntersectionsBuilderType = ...
    """
    Returns or sets  the output option for the Longitudinal Z Frames  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeckEnum`` 
    
    :param deckEnum: 
    :type deckEnum: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    InterSectionsType: ShipIntersectionsBuilderCreationType = ...
    """
    Returns or sets  the creation method 
    
    <hr>
    
    Getter Method
    
    Signature ``InterSectionsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderCreationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterSectionsType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderCreationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    InterTransFrameEnum: ShipIntersectionsBuilderType = ...
    """
    Returns or sets  the output option for the Inter Transverse Frames  
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransFrameEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransFrameEnum`` 
    
    :param interTransFrameEnum: 
    :type interTransFrameEnum: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ReadDataSet: ReadDataSetBuilder = ...
    """
    Returns  the Data Set Builder for reading data sets from Team Center  
    
    <hr>
    
    Getter Method
    
    Signature ``ReadDataSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ReadDataSetBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    TransFrameEnum: ShipIntersectionsBuilderType = ...
    """
    Returns or sets  the output option for the Transverse Frames  
    
    <hr>
    
    Getter Method
    
    Signature ``TransFrameEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransFrameEnum`` 
    
    :param transFrameEnum: 
    :type transFrameEnum: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    YFrameEnum: ShipIntersectionsBuilderType = ...
    """
    Returns or sets  the output option for the Longitudinal Y Frames  
    
    <hr>
    
    Getter Method
    
    Signature ``YFrameEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YFrameEnum`` 
    
    :param yFrameEnum: 
    :type yFrameEnum: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ZFrameEnum: ShipIntersectionsBuilderType = ...
    """
    Returns or sets  the output option for the Longitudinal Z Frames  
    
    <hr>
    
    Getter Method
    
    Signature ``ZFrameEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZFrameEnum`` 
    
    :param zFrameEnum: 
    :type zFrameEnum: :py:class:`NXOpen.Features.ShipDesign.ShipIntersectionsBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: ShipIntersectionsBuilder = ...  # unknown typename


class SteelSupportBuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelSupportBuilderCreationMethod():
    """
    Method used to create the support feature 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TwoPlanesandLines", " - "
       "SpecifyLine", " - "
       "SpecifyCsys", " - "
    """
    TwoPlanesandLines = 0  # SteelSupportBuilderCreationMethodMemberType
    SpecifyLine = 1  # SteelSupportBuilderCreationMethodMemberType
    SpecifyCsys = 2  # SteelSupportBuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelSupportBuilderCapOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelSupportBuilderCapOptions():
    """
    Does this feature have end caps, and if so what kind? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "TwoSided", " - "
       "Symmetric", " - "
    """
    NotSet = 0  # SteelSupportBuilderCapOptionsMemberType
    TwoSided = 1  # SteelSupportBuilderCapOptionsMemberType
    Symmetric = 2  # SteelSupportBuilderCapOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelSupportBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SteelSupport` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSteelSupportBuilder`
    
    Default values.
    
    ========================  ======================================
    Property                  Value
    ========================  ======================================
    AngularDim.Value          0 
    ------------------------  --------------------------------------
    EndCapThickness.Value     0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    EndOffset.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    Line1Offset.Value         0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    Line2Offset.Value         0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    PlacementMethod           TwoPlanesandLines 
    ------------------------  --------------------------------------
    StartCapThickness.Value   0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    StartOffset.Value         0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    SupportCapOptions         None 
    ========================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class CreationMethod():
        """
        Method used to create the support feature 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TwoPlanesandLines", " - "
           "SpecifyLine", " - "
           "SpecifyCsys", " - "
        """
        TwoPlanesandLines = 0  # SteelSupportBuilderCreationMethodMemberType
        SpecifyLine = 1  # SteelSupportBuilderCreationMethodMemberType
        SpecifyCsys = 2  # SteelSupportBuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CapOptions():
        """
        Does this feature have end caps, and if so what kind? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "TwoSided", " - "
           "Symmetric", " - "
        """
        NotSet = 0  # SteelSupportBuilderCapOptionsMemberType
        TwoSided = 1  # SteelSupportBuilderCapOptionsMemberType
        Symmetric = 2  # SteelSupportBuilderCapOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetAvailableSupportTypes(self) -> 'list[str]':
        """
        The list of available support types.  
        
        Signature ``GetAvailableSupportTypes()`` 
        
        :returns:  Array of available types.
        These names are specified by a special
        sketch naming convention for sketches
        loaded in the support library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableSupportSizes(self) -> 'list[str]':
        """
        The list of available sizes.  
        
        The available sizes will change everytime the support type changes.  
        
        Signature ``GetAvailableSupportSizes()`` 
        
        :returns:  Array of available sizes.
        These names are specified by a special
        sketch naming convention for sketches
        loaded in the support library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableCapTypes(self) -> 'list[str]':
        """
        The list of available start and end cap types.  
        
        Signature ``GetAvailableCapTypes()`` 
        
        :returns:  Array of available cap types.
        These names are specified by a special
        sketch naming convention for sketches
        loaded in the support cap library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableStartCapSizes(self) -> 'list[str]':
        """
        The list of available start cap sizes.  
        
        The available start cap sizes will change everytime the start cap type changes.  
        
        Signature ``GetAvailableStartCapSizes()`` 
        
        :returns:  Array of available start cap sizes.
        These names are specified by a special
        sketch naming convention for sketches
        loaded in the support cap library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableEndCapSizes(self) -> 'list[str]':
        """
        The list of available end cap sizes.  
        
        The available end cap sizes will change everytime the end cap type changes.  
        
        Signature ``GetAvailableEndCapSizes()`` 
        
        :returns:  Array of available end cap sizes.
        These names are specified by a special
        sketch naming convention for sketches
        loaded in the support cap library.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableAttributeNames(self) -> 'list[str]':
        """
        Returns the list of available name attributes  
        
        Signature ``GetAvailableAttributeNames()`` 
        
        :returns:  Array of available attribute names.
        These names are specified in the customer
        defaults file.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableAttributeMaterials(self) -> 'list[str]':
        """
        Returns the list of available material attributes  
        
        Signature ``GetAvailableAttributeMaterials()`` 
        
        :returns:  Array of available attribute materials.
        These materials are specified in the customer
        defaults file.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AngularDim: NXOpen.Expression = ...
    """
    Returns  the angular dimension used to rotate the support feature.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AttributeMaterial: int = ...
    """
    Returns or sets  the attribute material 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeMaterial`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeMaterial`` 
    
    :param attributeMaterial: 
    :type attributeMaterial: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    AttributeName: int = ...
    """
    Returns or sets  the name attribute value 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeName`` 
    
    :param attributeName: 
    :type attributeName: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    CoordSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coord system (only used with "SpecifyCsys" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordSystem`` 
    
    :param coordSystem: 
    :type coordSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    EndCapSize: int = ...
    """
    Returns or sets  the end cap size.  
    
    Determines the cross section of the support cap. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCapSize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCapSize`` 
    
    :param endCapSize: 
    :type endCapSize: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    EndCapThickness: NXOpen.Expression = ...
    """
    Returns  the end cap thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCapThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndCapType: int = ...
    """
    Returns or sets  the end cap type.  
    
    Determines the cross section of the support cap. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCapType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCapType`` 
    
    :param endCapType: 
    :type endCapType: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    EndOffset: NXOpen.Expression = ...
    """
    Returns  the offset used to determine where the support ends (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndPlane: NXOpen.Plane = ...
    """
    Returns or sets  the end plane (only used with "TwoPlanesandLines" creation method)  
    
    <hr>
    
    Getter Method
    
    Signature ``EndPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPlane`` 
    
    :param endPlane: 
    :type endPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepCoordSystem: bool = ...
    """
    Returns or sets  whether or not we should keep the selected csys on apply (only used with "SpecifyCsys" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepCoordSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepCoordSystem`` 
    
    :param keepCoordSystem: 
    :type keepCoordSystem: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepEndPlane: bool = ...
    """
    Returns or sets  whether or not we should keep the selected end plane on apply (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepEndPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepEndPlane`` 
    
    :param keepEndPlane: 
    :type keepEndPlane: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReverseEndOffset: bool = ...
    """
    Returns or sets  the keep previous reverse setting on apply (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseEndOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseEndOffset`` 
    
    :param keepReverseEndOffset: 
    :type keepReverseEndOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReverseLine1Offset: bool = ...
    """
    Returns or sets  the keep previous reverse setting on apply (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseLine1Offset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseLine1Offset`` 
    
    :param keepReverseLine1Offset: 
    :type keepReverseLine1Offset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReverseLine2Offset: bool = ...
    """
    Returns or sets  the keep previous reverse setting on apply (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseLine2Offset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseLine2Offset`` 
    
    :param keepReverseLine2Offset: 
    :type keepReverseLine2Offset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReverseStartOffset: bool = ...
    """
    Returns or sets  the keep previous reverse setting on apply (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseStartOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseStartOffset`` 
    
    :param keepReverseStartOffset: 
    :type keepReverseStartOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectGuideCurve: bool = ...
    """
    Returns or sets  whether or not we should keep the selected guide curve on apply (only used with "SpecifyLine" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectGuideCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectGuideCurve`` 
    
    :param keepSelectGuideCurve: 
    :type keepSelectGuideCurve: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectLine1: bool = ...
    """
    Returns or sets  whether or not we should keep the selected first line on apply (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectLine1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectLine1`` 
    
    :param keepSelectLine1: 
    :type keepSelectLine1: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectLine2: bool = ...
    """
    Returns or sets  whether or not we should keep the selected second line on apply (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectLine2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectLine2`` 
    
    :param keepSelectLine2: 
    :type keepSelectLine2: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectOrientationLine: bool = ...
    """
    Returns or sets  whether or not we should keep the selected orientation line on apply (only used with "SpecifyLine" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectOrientationLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectOrientationLine`` 
    
    :param keepSelectOrientationLine: 
    :type keepSelectOrientationLine: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepStartPlane: bool = ...
    """
    Returns or sets  whether or not we should keep the selected start plane on apply (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepStartPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepStartPlane`` 
    
    :param keepStartPlane: 
    :type keepStartPlane: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Line1Offset: NXOpen.Expression = ...
    """
    Returns  the first line offset (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``Line1Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Line2Offset: NXOpen.Expression = ...
    """
    Returns  the second line offset (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``Line2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PlacementMethod: SteelSupportBuilderCreationMethod = ...
    """
    Returns or sets  the placement method used to create the feature 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelSupportBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementMethod`` 
    
    :param placementMethod: 
    :type placementMethod: :py:class:`NXOpen.Features.ShipDesign.SteelSupportBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReverseEndOffset: bool = ...
    """
    Returns or sets  the reverse end offset (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseEndOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseEndOffset`` 
    
    :param reverseEndOffset: 
    :type reverseEndOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReverseLine1Offset: bool = ...
    """
    Returns or sets  the reverse first line offset (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseLine1Offset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseLine1Offset`` 
    
    :param reverseLine1Offset: 
    :type reverseLine1Offset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReverseLine2Offset: bool = ...
    """
    Returns or sets  the reverse second line offset (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseLine2Offset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseLine2Offset`` 
    
    :param reverseLine2Offset: 
    :type reverseLine2Offset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReverseStartOffset: bool = ...
    """
    Returns or sets  the reverse start offset (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseStartOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseStartOffset`` 
    
    :param reverseStartOffset: 
    :type reverseStartOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SelectGuideCurve: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select guide curve (only used with "SpecifyLine" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectGuideCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectLine1: NXOpen.SelectTaggedObject = ...
    """
    Returns  the first line (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLine1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectLine2: NXOpen.SelectTaggedObject = ...
    """
    Returns  the second line (only used with "TwoPlanesandLines" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLine2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectOrientationLine: NXOpen.SelectTaggedObject = ...
    """
    Returns  the orientation line (only used with "SpecifyLine" creation method) 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectOrientationLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartCapSize: int = ...
    """
    Returns or sets  the start cap size.  
    
    Determines the cross section of the support cap. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartCapSize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartCapSize`` 
    
    :param startCapSize: 
    :type startCapSize: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    StartCapThickness: NXOpen.Expression = ...
    """
    Returns  the start cap thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``StartCapThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartCapType: int = ...
    """
    Returns or sets  the start cap type.  
    
    Determines the cross section of the support cap. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartCapType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartCapType`` 
    
    :param startCapType: 
    :type startCapType: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    StartOffset: NXOpen.Expression = ...
    """
    Returns  the offset used to determine where the support starts (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
    
    <hr>
    
    Getter Method
    
    Signature ``StartOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartPlane: NXOpen.Plane = ...
    """
    Returns or sets  the start plane (only used with "TwoPlanesandLines" creation method)  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPlane`` 
    
    :param startPlane: 
    :type startPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SupportCapOptions: SteelSupportBuilderCapOptions = ...
    """
    Returns or sets  the support cap options 
    
    <hr>
    
    Getter Method
    
    Signature ``SupportCapOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelSupportBuilderCapOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SupportCapOptions`` 
    
    :param supportCapOptions: 
    :type supportCapOptions: :py:class:`NXOpen.Features.ShipDesign.SteelSupportBuilderCapOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SupportSize: int = ...
    """
    Returns or sets  the support size.  
    
    Determines the cross section of the support. 
    
    <hr>
    
    Getter Method
    
    Signature ``SupportSize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SupportSize`` 
    
    :param supportSize: 
    :type supportSize: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SupportType: int = ...
    """
    Returns or sets  the support type.  
    
    Determines the cross section of the support. 
    
    <hr>
    
    Getter Method
    
    Signature ``SupportType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SupportType`` 
    
    :param supportType: 
    :type supportType: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: SteelSupportBuilder = ...  # unknown typename


class MarkingLineDesignBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a new MarkingLine Feature builder.  
    
    This class is used in the process of creating or editing a marking line feature.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateMarkingLineDesignBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def GetMarkingLineInformation(self, curve: NXOpen.ICurve) -> tuple:
        """
        Get the information from the marking line feature to create a fillet type welding joint.  
        
        Specifically the target and placement faces 
        
        Signature ``GetMarkingLineInformation(curve)`` 
        
        :param curve:  (I) - Marking line curve.  
        :type curve: :py:class:`NXOpen.ICurve` 
        :returns: a tuple 
        :rtype: A tuple consisting of (placementFaces, targetFaces). placementFaces is a list of :py:class:`NXOpen.Face`.   (OF) - a set of cutting side faces that place marking line targetFaces is a list of :py:class:`NXOpen.Face`.   (OF) - a set of molding faces that generated the marking line 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def IsMarkingLineFeature(self, frecTag: NXOpen.Features.Feature) -> bool:
        """
        Is the feature a marking line feature  
        
        Signature ``IsMarkingLineFeature(frecTag)`` 
        
        :param frecTag:  (I) - feature to check  
        :type frecTag: :py:class:`NXOpen.Features.Feature` 
        :returns:  (O) - is a marking line feature  
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance for marking lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance for marking lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    GridPlanes: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collection of planes defining all the intersections on the profiles and plates.  
    
    <hr>
    
    Getter Method
    
    Signature ``GridPlanes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UseExistingCuttingSideFace: bool = ...
    """
    Returns or sets  the option to decide if the current cutting side faces are used(true)
    or if the cutting side faces should be recalculated(false).  
    
    <hr>
    
    Getter Method
    
    Signature ``UseExistingCuttingSideFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseExistingCuttingSideFace`` 
    
    :param useExistingCuttingSideFace: 
    :type useExistingCuttingSideFace: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: MarkingLineDesignBuilder = ...  # unknown typename


class ManufacturingOut(NXOpen.Features.BodyFeature):
    """
    Represents a ManufacturingOut   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ManufacturingOutBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: ManufacturingOut = ...  # unknown typename


class ShipDesignPreferencesBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipDesignPreferencesBuilderTypes():
    """
    This enum represents the ship structure types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hull", "Hull type"
       "Deck", "Deck type"
       "TransverseBulkhead", "Transverse Bulkhead type"
       "LongitudinalBulkhead", "Longitudinal Bulkhead type"
       "GenericPlateSystem", "Generic Plate System type"
       "StiffenerSystem", "Stiffener System type"
       "EdgeReinforcementSystem", "Edge Reinforcement System type"
       "PillarSystem", "Pillar System type"
       "ScantlingSeam", "Scantling Seam type"
       "ErectionSeam", "Erection Seam type"
       "StrakingSeam", "Straking Seam type"
       "IntersectionSeam", "Intersection Seam type"
       "Bracket", "Bracket type"
       "CollarPlate", "Collar Plate type"
    """
    Hull = 0  # ShipDesignPreferencesBuilderTypesMemberType
    Deck = 1  # ShipDesignPreferencesBuilderTypesMemberType
    TransverseBulkhead = 2  # ShipDesignPreferencesBuilderTypesMemberType
    LongitudinalBulkhead = 3  # ShipDesignPreferencesBuilderTypesMemberType
    GenericPlateSystem = 4  # ShipDesignPreferencesBuilderTypesMemberType
    StiffenerSystem = 5  # ShipDesignPreferencesBuilderTypesMemberType
    EdgeReinforcementSystem = 6  # ShipDesignPreferencesBuilderTypesMemberType
    PillarSystem = 7  # ShipDesignPreferencesBuilderTypesMemberType
    ScantlingSeam = 8  # ShipDesignPreferencesBuilderTypesMemberType
    ErectionSeam = 9  # ShipDesignPreferencesBuilderTypesMemberType
    StrakingSeam = 10  # ShipDesignPreferencesBuilderTypesMemberType
    IntersectionSeam = 11  # ShipDesignPreferencesBuilderTypesMemberType
    Bracket = 12  # ShipDesignPreferencesBuilderTypesMemberType
    CollarPlate = 13  # ShipDesignPreferencesBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipDesignPreferencesBuilderColorTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipDesignPreferencesBuilderColorType():
    """
    the color option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Default", "default type"
       "Set", "set color type"
    """
    Default = 0  # ShipDesignPreferencesBuilderColorTypeMemberType
    Set = 1  # ShipDesignPreferencesBuilderColorTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipDesignPreferencesBuilderAngleRuleTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipDesignPreferencesBuilderAngleRuleTypes():
    """
    The methods that can be used to measure angles in ship design. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RightHand", "Angle is measured using the right hand rule system."
       "ShipOrientation", "Angle direction and reference position is determined by the location in the ship."
    """
    RightHand = 0  # ShipDesignPreferencesBuilderAngleRuleTypesMemberType
    ShipOrientation = 1  # ShipDesignPreferencesBuilderAngleRuleTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipDesignPreferencesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder` which
    is used to change default object display settings for ship structures.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipDesignPreferencesBuilder`
    
    Default values.
    
    =========================  ==========
    Property                   Value
    =========================  ==========
    AnalysisSpacing            100 
    -------------------------  ----------
    AngleRule                  RightHand 
    -------------------------  ----------
    ColorOption                Default 
    -------------------------  ----------
    Layer                      0 
    -------------------------  ----------
    SurfaceAngleFailureLimit   20 
    -------------------------  ----------
    SurfaceAngleWarningLimit   10 
    -------------------------  ----------
    TwistRateFailureLimit      3 
    -------------------------  ----------
    TwistRateWarningLimit      1 
    =========================  ==========
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        This enum represents the ship structure types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hull", "Hull type"
           "Deck", "Deck type"
           "TransverseBulkhead", "Transverse Bulkhead type"
           "LongitudinalBulkhead", "Longitudinal Bulkhead type"
           "GenericPlateSystem", "Generic Plate System type"
           "StiffenerSystem", "Stiffener System type"
           "EdgeReinforcementSystem", "Edge Reinforcement System type"
           "PillarSystem", "Pillar System type"
           "ScantlingSeam", "Scantling Seam type"
           "ErectionSeam", "Erection Seam type"
           "StrakingSeam", "Straking Seam type"
           "IntersectionSeam", "Intersection Seam type"
           "Bracket", "Bracket type"
           "CollarPlate", "Collar Plate type"
        """
        Hull = 0  # ShipDesignPreferencesBuilderTypesMemberType
        Deck = 1  # ShipDesignPreferencesBuilderTypesMemberType
        TransverseBulkhead = 2  # ShipDesignPreferencesBuilderTypesMemberType
        LongitudinalBulkhead = 3  # ShipDesignPreferencesBuilderTypesMemberType
        GenericPlateSystem = 4  # ShipDesignPreferencesBuilderTypesMemberType
        StiffenerSystem = 5  # ShipDesignPreferencesBuilderTypesMemberType
        EdgeReinforcementSystem = 6  # ShipDesignPreferencesBuilderTypesMemberType
        PillarSystem = 7  # ShipDesignPreferencesBuilderTypesMemberType
        ScantlingSeam = 8  # ShipDesignPreferencesBuilderTypesMemberType
        ErectionSeam = 9  # ShipDesignPreferencesBuilderTypesMemberType
        StrakingSeam = 10  # ShipDesignPreferencesBuilderTypesMemberType
        IntersectionSeam = 11  # ShipDesignPreferencesBuilderTypesMemberType
        Bracket = 12  # ShipDesignPreferencesBuilderTypesMemberType
        CollarPlate = 13  # ShipDesignPreferencesBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ColorType():
        """
        the color option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Default", "default type"
           "Set", "set color type"
        """
        Default = 0  # ShipDesignPreferencesBuilderColorTypeMemberType
        Set = 1  # ShipDesignPreferencesBuilderColorTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AngleRuleTypes():
        """
        The methods that can be used to measure angles in ship design. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RightHand", "Angle is measured using the right hand rule system."
           "ShipOrientation", "Angle direction and reference position is determined by the location in the ship."
        """
        RightHand = 0  # ShipDesignPreferencesBuilderAngleRuleTypesMemberType
        ShipOrientation = 1  # ShipDesignPreferencesBuilderAngleRuleTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AnalysisSpacing: float = ...
    """
    Returns or sets  the distance between points on the path used to check twist rate or surface angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnalysisSpacing`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnalysisSpacing`` 
    
    :param analysisSpacing: 
    :type analysisSpacing: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AngleRule: ShipDesignPreferencesBuilderAngleRuleTypes = ...
    """
    Returns or sets  the indication of how angles are to be measured.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleRule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderAngleRuleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleRule`` 
    
    :param angleRule: 
    :type angleRule: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderAngleRuleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the default color to use for the current ship structure type, only used if the ColorOption is 
    :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderColorType.Set <NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderColorType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ColorOption: ShipDesignPreferencesBuilderColorType = ...
    """
    Returns or sets  the color option of the current ship structure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ColorOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderColorType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColorOption`` 
    
    :param colorOption: 
    :type colorOption: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderColorType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Font: NXOpen.Preferences.PartObjectLineFontType = ...
    """
    Returns or sets  the default font to use for the current ship structure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartObjectLineFontType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Preferences.PartObjectLineFontType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Layer: int = ...
    """
    Returns or sets  the default layer to use for the current ship structure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Layer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Layer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ShipStructureType: ShipDesignPreferencesBuilderTypes = ...
    """
    Returns or sets  the ship structure type.  
    
    Any subsequent calls to 
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.ColorOption`, 
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.ColorOption`, 
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Color`, 
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Color`,
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Font`, 
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Font`,
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Width`, 
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Width`,
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Layer` or 
    :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.Layer`
    will affect the settings for this ship structure type.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShipStructureType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    SurfaceAngleAcceptableColor: NXOpen.NXColor = ...
    """
    Returns or sets  the surface angle acceptable color.  
    
    All analysis that has a angle from the surface normal to the web lower than
    the surface angle warning limit will be displayed in this color.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceAngleAcceptableColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceAngleAcceptableColor`` 
    
    :param surfaceAngleAcceptableColor: 
    :type surfaceAngleAcceptableColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    SurfaceAngleFailureColor: NXOpen.NXColor = ...
    """
    Returns or sets  the surface angle failure color.  
    
    All analysis that has a angle between the surface normal and the web exceeding the surface angle 
    failure limit will be displayed in this color. 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceAngleFailureColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceAngleFailureColor`` 
    
    :param surfaceAngleFailureColor: 
    :type surfaceAngleFailureColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    SurfaceAngleFailureLimit: float = ...
    """
    Returns or sets  the surface angle failure limit.  
    
    If the angle between the surface normal and the web exceeds this value the analysis will
    be display with the surface angle failure color. 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceAngleFailureLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceAngleFailureLimit`` 
    
    :param surfaceAngleFailureLimit: 
    :type surfaceAngleFailureLimit: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    SurfaceAngleWarningColor: NXOpen.NXColor = ...
    """
    Returns or sets  the surface angle warning color.  
    
    All analysis that has a angle between the surface normal and the web exceeding the surface angle 
    warning limit will be displayed in this color. 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceAngleWarningColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceAngleWarningColor`` 
    
    :param surfaceAngleWarningColor: 
    :type surfaceAngleWarningColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    SurfaceAngleWarningLimit: float = ...
    """
    Returns or sets  the surface angle warning limit.  
    
    If the angle between the surface normal and the web exceeds this value the analysis will
    be display with the surface angle warning color. 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceAngleWarningLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceAngleWarningLimit`` 
    
    :param surfaceAngleWarningLimit: 
    :type surfaceAngleWarningLimit: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    TwistRateAcceptableColor: NXOpen.NXColor = ...
    """
    Returns or sets  the twist rate acceptable color.  
    
    All analysis that has a twist rate lower than the twist rate 
    warning limit will be displayed in this color. 
    
    <hr>
    
    Getter Method
    
    Signature ``TwistRateAcceptableColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwistRateAcceptableColor`` 
    
    :param twistRateAcceptableColor: 
    :type twistRateAcceptableColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    TwistRateFailureColor: NXOpen.NXColor = ...
    """
    Returns or sets  the twist rate failure color.  
    
    All analysis that exceeds the twist rate failure limit will be 
    displayed using this color. 
    
    <hr>
    
    Getter Method
    
    Signature ``TwistRateFailureColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwistRateFailureColor`` 
    
    :param twistRateFailureColor: 
    :type twistRateFailureColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    TwistRateFailureLimit: float = ...
    """
    Returns or sets  the twist rate failure limit.  
    
    If the twist rate exceeds this value the analysis will
    be display with the twist rate failure color. 
    
    <hr>
    
    Getter Method
    
    Signature ``TwistRateFailureLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwistRateFailureLimit`` 
    
    :param twistRateFailureLimit: 
    :type twistRateFailureLimit: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    TwistRateWarningColor: NXOpen.NXColor = ...
    """
    Returns or sets  the twist rate warning color.  
    
    All analysis that exceeds the twist rate warning limit will be 
    displayed using this color. 
    
    <hr>
    
    Getter Method
    
    Signature ``TwistRateWarningColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwistRateWarningColor`` 
    
    :param twistRateWarningColor: 
    :type twistRateWarningColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    TwistRateWarningLimit: float = ...
    """
    Returns or sets  the twist rate warning limit.  
    
    If the twist rate exceeds this value the analysis will
    be display with the twist rate warning color. 
    
    <hr>
    
    Getter Method
    
    Signature ``TwistRateWarningLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwistRateWarningLimit`` 
    
    :param twistRateWarningLimit: 
    :type twistRateWarningLimit: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Type: ShipDesignPreferencesBuilderTypes = ...
    """
    Returns or sets  the ship structure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX9.0.0
       Get the active ship structure using :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.ShipStructureType`.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX9.0.0
       Set the active ship structure using :py:meth:`NXOpen.Features.ShipDesign.ShipDesignPreferencesBuilder.ShipStructureType`.
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Width: NXOpen.Preferences.PartObjectWidthType = ...
    """
    Returns or sets  the default width to use for the current ship structure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartObjectWidthType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Preferences.PartObjectWidthType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: ShipDesignPreferencesBuilder = ...  # unknown typename


class ProfileCutoutBuilderOrientationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileCutoutBuilderOrientation():
    """
    Represents the profile cutout orientation values. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "no set"
       "Normal", "normal"
       "Flipped", "flipped"
    """
    NotSet = 0  # ProfileCutoutBuilderOrientationMemberType
    Normal = 1  # ProfileCutoutBuilderOrientationMemberType
    Flipped = 2  # ProfileCutoutBuilderOrientationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileCutoutBuilderCollarPlateCreationApproachesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileCutoutBuilderCollarPlateCreationApproaches():
    """
    Represents the collar plate creation approaches.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Template", "Template approach - Use Standard Part Framework to create collar plate."
       "SteelFeature", "Steel feature approach - User Collar Plate to create collar plate"
    """
    Template = 0  # ProfileCutoutBuilderCollarPlateCreationApproachesMemberType
    SteelFeature = 1  # ProfileCutoutBuilderCollarPlateCreationApproachesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileCutoutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ProfileCutout` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateProfileCutoutBuilder`
    
    Default values.
    
    ==================  ===============================================
    Property            Value
    ==================  ===============================================
    AngularTolerance    0.5 
    ------------------  -----------------------------------------------
    DistanceTolerance   0.0254 (millimeters part), 0.001 (inches part) 
    ==================  ===============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Orientation():
        """
        Represents the profile cutout orientation values. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "no set"
           "Normal", "normal"
           "Flipped", "flipped"
        """
        NotSet = 0  # ProfileCutoutBuilderOrientationMemberType
        Normal = 1  # ProfileCutoutBuilderOrientationMemberType
        Flipped = 2  # ProfileCutoutBuilderOrientationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CollarPlateCreationApproaches():
        """
        Represents the collar plate creation approaches.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Template", "Template approach - Use Standard Part Framework to create collar plate."
           "SteelFeature", "Steel feature approach - User Collar Plate to create collar plate"
        """
        Template = 0  # ProfileCutoutBuilderCollarPlateCreationApproachesMemberType
        SteelFeature = 1  # ProfileCutoutBuilderCollarPlateCreationApproachesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def FindOrientation(self) -> ProfileCutoutBuilderOrientation:
        """
        This method will find out the profile cutout orientation.  
        
        This information will be used for drawing automation to draw the profile cutout symbol,
        when the profile cutout was created by flip then the symbol should be drawn flip also.
        So this method can be used to indicate whether the profile cuotut was created by flip or not.
        The logic is: The target plate shuold have the start/end flag(by seeing the End cut face attributes)
        and the profile(profile cutout created based on)'s molding line face is more nearing to the 
        start of the plate, then this method will return Normal, or Flipped.                              
        if the targe plate doens't have any flag of start/end, then None will be returned.
        
        Signature ``FindOrientation()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileCutoutBuilderOrientation` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def SetDefaultScallopTypes(self, strProfileCutoutType: str) -> None:
        """
        Set the default scallop types for the profile cutout builder.  
        
        Signature ``SetDefaultScallopTypes(strProfileCutoutType)`` 
        
        :param strProfileCutoutType: 
        :type strProfileCutoutType: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveSlaves(self) -> None:
        """
        Temporarily removes profile cutout slave features when editing profile cutout in ship basic design to prevent the downstream features from updating.  
        
        They will be restrored when committing the profile cutout builder. 
        
        Signature ``RemoveSlaves()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ResetContextEntity(self, tgTargetBody: NXOpen.TaggedObject, tgProfileBody: NXOpen.TaggedObject) -> None:
        """
        Resets the section types acoording to the tightness attribute on the target and the context attribute on the profile 
        
        Signature ``ResetContextEntity(tgTargetBody, tgProfileBody)`` 
        
        :param tgTargetBody: 
        :type tgTargetBody: :py:class:`NXOpen.TaggedObject` 
        :param tgProfileBody: 
        :type tgProfileBody: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def EvaluateProfileCutoutParameters(self, tgTargetBody: NXOpen.TaggedObject, tgProfileBody: NXOpen.TaggedObject) -> None:
        """
        Updates the parameters in profile cutout builder using parameters rules.  
        
        Signature ``EvaluateProfileCutoutParameters(tgTargetBody, tgProfileBody)`` 
        
        :param tgTargetBody: 
        :type tgTargetBody: :py:class:`NXOpen.TaggedObject` 
        :param tgProfileBody: 
        :type tgProfileBody: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def SynchronizeParametersWithProfileBody(self, tgProfileBody: NXOpen.TaggedObject) -> None:
        """
        Updates the parameters in profile cutout builder using profile body.  
        
        Signature ``SynchronizeParametersWithProfileBody(tgProfileBody)`` 
        
        :param tgProfileBody: 
        :type tgProfileBody: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX10.0.3
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance (degrees).  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    CollarPlateCreationApproach: ProfileCutoutBuilderCollarPlateCreationApproaches = ...
    """
    Returns or sets  the approach to be used in creating collar plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``CollarPlateCreationApproach`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileCutoutBuilderCollarPlateCreationApproaches` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CollarPlateCreationApproach`` 
    
    :param collarPlateCreationApproach: 
    :type collarPlateCreationApproach: :py:class:`NXOpen.Features.ShipDesign.ProfileCutoutBuilderCollarPlateCreationApproaches` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    CutoutData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the sketch controlling the shape and parameters of the profile cutout.  
    
    The cutout sketch type and its parameters are controlled by the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.
    
    <hr>
    
    Getter Method
    
    Signature ``CutoutData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance (part units).  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    EnableCollarPlate: bool = ...
    """
    Returns or sets  the flag to enable collar plate creation when creating profile cutout.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableCollarPlate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableCollarPlate`` 
    
    :param enableCollarPlate: 
    :type enableCollarPlate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    EnableCornerCut: bool = ...
    """
    Returns or sets  the flag to enable corner cut creation when creating profile cutout.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableCornerCut`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableCornerCut`` 
    
    :param bEnableCornerCut: 
    :type bEnableCornerCut: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ManufacturingInformation: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock builder that holds the manufacturing data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingInformation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    ManufacturingStock: ManufacturingStockBuilder = ...
    """
    Returns  the manufacturing stock builder that holds the manufacturing data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ManufacturingStockBuilder` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX8.5.1
       Use :py:meth:`NXOpen.Features.ShipDesign.ProfileCutoutBuilder.ManufacturingInformation` instead.
    
    License requirements: None.
    """
    MoldingSideScallop: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`, which holds the information of the molding side scallop.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoldingSideScallop`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OpposingSideScallop: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`, which holds the information of the opposing molding side scallop.  
    
    <hr>
    
    Getter Method
    
    Signature ``OpposingSideScallop`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ParametersInUserControl: bool = ...
    """
    Returns or sets  the flag to indicate if the profile cutout detail parameters have been modified by user.  
    
    If it is true, it means the parameter values are specified by user and the rule driven process will not update the parameter values. 
    
    <hr>
    
    Getter Method
    
    Signature ``ParametersInUserControl`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ParametersInUserControl`` 
    
    :param bIsParametersInUserControl: 
    :type bIsParametersInUserControl: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ProfileBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the profiles that are to have a cutout created for them.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SectionTypesInUserControl: bool = ...
    """
    Returns or sets  the flag to indicate if the section types have been modified by user.  
    
    If it is true, it means the section type is chosen by user and the rule driven process will not update the type. 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionTypesInUserControl`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SectionTypesInUserControl`` 
    
    :param bIsSectionTypesInUserControl: 
    :type bIsSectionTypesInUserControl: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    TargetObjects: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the plates that are to have cutouts placed into them for each profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WeldCharacteristics: NXOpen.Weld.CharacteristicsBuilder = ...
    """
    Returns  the welding characteristics that will be attached to profile cuotut edges which have attribute MK_TYPE=WELD_EDGE.  
    
    <hr>
    
    Getter Method
    
    Signature ``WeldCharacteristics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Weld.CharacteristicsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ProfileCutoutBuilder = ...  # unknown typename


class SeamBlockBuilderSeamTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeamBlockBuilderSeamType():
    """
    this specifies seam type option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FlangeOnly", "Split the built up flange"
       "WebOnly", "Split the built up web"
       "NoFlange", "Remove the flange"
    """
    FlangeOnly = 0  # SeamBlockBuilderSeamTypeMemberType
    WebOnly = 1  # SeamBlockBuilderSeamTypeMemberType
    NoFlange = 2  # SeamBlockBuilderSeamTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeamBlockBuilder(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.BuiltUpBlockBuilder.CreateSeamBlockBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class SeamType():
        """
        this specifies seam type option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FlangeOnly", "Split the built up flange"
           "WebOnly", "Split the built up web"
           "NoFlange", "Remove the flange"
        """
        FlangeOnly = 0  # SeamBlockBuilderSeamTypeMemberType
        WebOnly = 1  # SeamBlockBuilderSeamTypeMemberType
        NoFlange = 2  # SeamBlockBuilderSeamTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FlangeWidth: NXOpen.Expression = ...
    """
    Returns  the built up flange width.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PlateStock: PlateStockBuilder = ...
    """
    Returns  the plate stock builder, which defines the seam material, grade, and thickness
    
    <hr>
    
    Getter Method
    
    Signature ``PlateStock`` 
    
    :returns:  Plate Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SeamOption: SeamBlockBuilderSeamType = ...
    """
    Returns or sets  the seam option 
    
    <hr>
    
    Getter Method
    
    Signature ``SeamOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilderSeamType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeamOption`` 
    
    :param seamOption: 
    :type seamOption: :py:class:`NXOpen.Features.ShipDesign.SeamBlockBuilderSeamType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SeamSelection: NXOpen.SelectTaggedObject = ...
    """
    Returns  the seam selection 
    
    <hr>
    
    Getter Method
    
    Signature ``SeamSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SeamBlockBuilder = ...  # unknown typename


class PenetrationManager():
    """
    Contains the collection objects for creating and iterating over Penetration Request Properties objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX7.5.1
    """
    PenetrationUtils: PenetrationUtils = ...
    """
    Returns the PenetrationUtils instance 
    
    Signature ``PenetrationUtils`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationUtils`
    """
    PenetrationRequestCollection: PenetrationRequestCollection = ...
    """
    Returns the PenetrationRequestCollection instance 
    
    Signature ``PenetrationRequestCollection`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCollection`
    """


class ShipContainerBuilder(NXOpen.Builder):
    """
    This class is used to specify the "container" part for the Ship Structures application, i.  
    
    e., that
    part that should have newly created Ship Stiffeners, Plates, Standard Parts added to it as assembly
    components. It also holds the "container" name which is used in the generation of Teamcenter Item IDs
    for newly created components.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipContainerBuilder`
    
    .. versionadded:: NX8.0.0
    """
    ContainerName: str = ...
    """
    Returns or sets 
    the name used in generating Item IDs for newly created Ship objects
    
    <hr>
    
    Getter Method
    
    Signature ``ContainerName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContainerName`` 
    
    :param containerName: 
    :type containerName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ContainerPart: str = ...
    """
    Returns or sets 
    the part to which are added newly created Ship objects
    
    <hr>
    
    Getter Method
    
    Signature ``ContainerPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContainerPart`` 
    
    :param containerPart: 
    :type containerPart: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: ShipContainerBuilder = ...  # unknown typename


class ShipNameFieldBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    A field, combined with other fields, to generate a name for a Ship Basic Design Object such as a Deck.  
    
    The ShipNameFieldBuilder class contains the information used to generate a name for a
    Basic Design object, such as a Deck, Bulkhead, Stiffener System, etc. 
    
    Fields can be one of four types:
    1) Fixed            A string with an unchangeable value
    2) Any              A user entered string value
    3) Option           A predefined set of strings from which the user can choose one
    4) Index            A system generated, leading zeros, number which pretends to provide
    name uniqueness.
    
    There may be as many Fixed, Any, and Option fields as the user deems appropriate.
    There may be only one Index field.
    
    The fields for a particular Ship object type :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` are defined in
    a "recipes" file which specifies, for a particular object type, the fields and their values.
    See ShipNamesRecipes.xml in UGII_BASE_DIR/nxship/data for details on the recipes.
    
    A sample recipe might be defined having the following fields:
    
    Type            Value
    --------        --------
    Fixed           "TBH-"
    Option          "Port", "Starboard", "None"
    Fixed           "-"
    Index           nnnnnn
    
    This is an abstract class and cannot be instantiated
    
    .. versionadded:: NX9.0.2
    """
    
    def GetOptionValues(self) -> 'list[str]':
        """
        Get the valid option values for an Option type field.  
        
        No values
        are returned (and the count is set to zero) if this is not an
        option field  
        
        Signature ``GetOptionValues()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX9.0.2
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: str = ...
    """
    Returns or sets  the field value.  
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param newValue: 
    :type newValue: str 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: ShipNameFieldBuilder = ...  # unknown typename


class TraceLinesBuilderTraceLineTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TraceLinesBuilderTraceLineType():
    """
    Define the traceline creation method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EqualSpacing", " - "
       "Offset", " - "
    """
    EqualSpacing = 0  # TraceLinesBuilderTraceLineTypeMemberType
    Offset = 1  # TraceLinesBuilderTraceLineTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TraceLinesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.TraceLines` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateTraceLinesBuilder`
    
    Default values.
    
    =================  ======================================
    Property           Value
    =================  ======================================
    Associative        1 
    -----------------  --------------------------------------
    CurveCount         1 
    -----------------  --------------------------------------
    Offset.Value       0 (millimeters part), 0 (inches part) 
    -----------------  --------------------------------------
    OffsetCurveCount   1 
    -----------------  --------------------------------------
    OffsetType         EqualSpacing 
    =================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class TraceLineType():
        """
        Define the traceline creation method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EqualSpacing", " - "
           "Offset", " - "
        """
        EqualSpacing = 0  # TraceLinesBuilderTraceLineTypeMemberType
        Offset = 1  # TraceLinesBuilderTraceLineTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Associative: bool = ...
    """
    Returns or sets  the associative 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    CurveCount: int = ...
    """
    Returns or sets  the curve count 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveCount`` 
    
    :param curveCount: 
    :type curveCount: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    DatumPlanes: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the datum planes 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumPlanes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Direction: bool = ...
    """
    Returns or sets  the direction
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    EndCurve: NXOpen.Section = ...
    """
    Returns  the end curve 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OffsetCurveCount: int = ...
    """
    Returns or sets  the offset curve count 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetCurveCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetCurveCount`` 
    
    :param offsetCurveCount: 
    :type offsetCurveCount: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    OffsetType: TraceLinesBuilderTraceLineType = ...
    """
    Returns or sets  the offset type 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.TraceLinesBuilderTraceLineType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetType`` 
    
    :param offsetType: 
    :type offsetType: :py:class:`NXOpen.Features.ShipDesign.TraceLinesBuilderTraceLineType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    PlacementFace: NXOpen.ScCollector = ...
    """
    Returns  the placement face 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReferenceCurve: NXOpen.Section = ...
    """
    Returns  the reference curve 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartCurve: NXOpen.Section = ...
    """
    Returns  the start curve 
    
    <hr>
    
    Getter Method
    
    Signature ``StartCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: TraceLinesBuilder = ...  # unknown typename


class DrawingPartBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DrawingPartBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DrawingPartBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DrawingPartBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DrawingPartBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DrawingPartBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DrawingPartBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DrawingPartBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DrawingPartBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DrawingPartBuilder, object2: DrawingPartBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DrawingPartBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DrawingPartBuilderList = ...  # unknown typename


class WeldCut(NXOpen.Features.BodyFeature):
    """
    Represents a weld cut feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.WeldCutBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: WeldCut = ...  # unknown typename


class ProfileCutout(NXOpen.Features.BodyFeature):
    """
    Represents a profile cutout feature for NX8.  
    
    Since new NX8 stiffener has been implemented with spreadsheet driven technology, 
    the Profile Cutout feature requires improvement to take advantage of the spreadsheet driven capabilities and be compatible with 
    the Stiffener and other NX8 Ship Structure commands. 
    NX8 Profile Cutout feature will use spreadsheet block to replace the previous version (NX75) sketch expression modifier block
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ProfileCutoutBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: ProfileCutout = ...  # unknown typename


class MoveToContainerBuilder(NXOpen.Builder):
    """
    This class is used to move detail design parts to a new ship container.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateMoveToContainerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    DetailComponents: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the components to move to the ship container
    
    <hr>
    
    Getter Method
    
    Signature ``DetailComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: MoveToContainerBuilder = ...  # unknown typename


class ProfileTransition(NXOpen.Features.BodyFeature):
    """
    Represents a profile transition feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ProfileTransitionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: ProfileTransition = ...  # unknown typename


class PointPairBuilder(NXOpen.NXObject):
    """
    This class is used to define a pair of points in a list.  
    
    .. versionadded:: NX8.0.0
    """
    Point1: NXOpen.Point = ...
    """
    Returns or sets  the first point in the point pair list element.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point1`` 
    
    :param point1: 
    :type point1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Point2: NXOpen.Point = ...
    """
    Returns or sets  the second point in the point pair list element.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point2`` 
    
    :param point2: 
    :type point2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: PointPairBuilder = ...  # unknown typename


class ProjectSetupBuilder(NXOpen.Builder):
    """
    Represents a project setup builder for ship.
    
    This builder is used to setup project in ship. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateProjectSetupBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def AddSharedParts(self, parts: 'list[NXOpen.Part]') -> None:
        """
        Add shared parts 
        
        Signature ``AddSharedParts(parts)`` 
        
        :param parts:  the parts used to add to shared node.  
        :type parts: list of :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    ProjectName: str = ...
    """
    Returns or sets  the project name 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectName`` 
    
    :param projectName: 
    :type projectName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: ProjectSetupBuilder = ...  # unknown typename


class ShipnameFieldBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipnameFieldBuilderType():
    """
    Field Type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fixed", "Field with an unchanging string"
       "Option", "Field whose value can be one of several strings"
       "Index", "Field which will have a number generated"
       "Any", "Field whose value will be a user enterred string"
       "PositionInformation", "Field which is generated from mold face plane indicate part location"
       "ContextAttributeMap", "Field whose value comes from context attribute"
       "SectionInformation", "Field whose value comes from section"
       "NotSet", "Unknown Field Type"
    """
    Fixed = 0  # ShipnameFieldBuilderTypeMemberType
    Option = 1  # ShipnameFieldBuilderTypeMemberType
    Index = 2  # ShipnameFieldBuilderTypeMemberType
    Any = 3  # ShipnameFieldBuilderTypeMemberType
    PositionInformation = 4  # ShipnameFieldBuilderTypeMemberType
    ContextAttributeMap = 5  # ShipnameFieldBuilderTypeMemberType
    SectionInformation = 6  # ShipnameFieldBuilderTypeMemberType
    NotSet = 7  # ShipnameFieldBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ValidateModelBuilder(NXOpen.Builder):
    """
    This is to create a :py:class:`NXOpen.Features.ShipDesign.ValidateModelBuilder` which is used to validate Basic Design Structures.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateValidateModelBuilder`
    
    Default values.
    
    ============================  ========
    Property                      Value
    ============================  ========
    SelectPart.SectionFrameType   Section 
    ============================  ========
    
    .. versionadded:: NX11.0.0
    """
    CheckCircularReference: bool = ...
    """
    Returns or sets  the option determines whether or not to search circular reference for basic model.  
    
    <hr>
    
    Getter Method
    
    Signature ``CheckCircularReference`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CheckCircularReference`` 
    
    :param checkCircularReference: 
    :type checkCircularReference: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    CheckKnuckleStiffener: bool = ...
    """
    Returns or sets  the option that determines whether or not to search unsplit knuckled stiffeners which are not allowed to be bent.  
    
    <hr>
    
    Getter Method
    
    Signature ``CheckKnuckleStiffener`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CheckKnuckleStiffener`` 
    
    :param checkKnucleStiffener: 
    :type checkKnucleStiffener: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    CheckPlateIntersectedPlate: bool = ...
    """
    Returns or sets  the option determines whether or not to search plate intersected plate in case there is no intersection seam with split on.  
    
    <hr>
    
    Getter Method
    
    Signature ``CheckPlateIntersectedPlate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CheckPlateIntersectedPlate`` 
    
    :param checkPlateIntersectedPlate: 
    :type checkPlateIntersectedPlate: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    CheckPlateIntersectedStiffener: bool = ...
    """
    Returns or sets  the option determines whether or not to search stiffener intersected plate in case there is no profile cutout.  
    
    <hr>
    
    Getter Method
    
    Signature ``CheckPlateIntersectedStiffener`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CheckPlateIntersectedStiffener`` 
    
    :param checkPlateIntersectedStiffener: 
    :type checkPlateIntersectedStiffener: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    CheckStiffenerIntersectedStiffener: bool = ...
    """
    Returns or sets  the option determines whether or not to search stiffener intersected stiffener in case there is interference of two stiffener bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``CheckStiffenerIntersectedStiffener`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CheckStiffenerIntersectedStiffener`` 
    
    :param checkStiffenerIntersectedStiffener: 
    :type checkStiffenerIntersectedStiffener: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    SelectPart: SelectPartBuilder = ...
    """
    Returns  the ship basic design part 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SelectPartBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: ValidateModelBuilder = ...  # unknown typename


class CornerCut(NXOpen.Features.BodyFeature):
    """
    Represents a corner cut feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.CornerCutBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: CornerCut = ...  # unknown typename


class DivideBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`Features.ShipDesign.Divide` builder which is used to edit
    all divide features.  
    
    This feature cannot be created directly.
    
    This feature cannot be created directly.
    
    .. versionadded:: NX11.0.0
    """
    ExtendImprints: bool = ...
    """
    Returns or sets  the option to extend imprints.  
    
    If true, imprints will be extended to another edge on the target plate. 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendImprints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendImprints`` 
    
    :param extendImprints: 
    :type extendImprints: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: DivideBuilder = ...  # unknown typename


class UpdateShipLibrary(NXOpen.Features.BodyFeature):
    """
    Represents a update ship library feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.UpdateShipLibraryBuilder`
    
    .. versionadded:: NX5.3.0
    """
    Null: UpdateShipLibrary = ...  # unknown typename


class ProfileSystem(NXOpen.Features.CurveFeature):
    """
    Represents a profile system feature.  
    
    This feature is available to generate regression tests
    for the ship basic design application. It should never exist in a customer model. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ProfileSystemBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: ProfileSystem = ...  # unknown typename


class ShipPreparationBuilder(NXOpen.Features.FeatureBuilder):
    """
    Creates a builder used to prepare basic design data for meshing.  
    
    Multiple features are created
    as a result of committing this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipPreparationBuilder`
    
    Default values.
    
    ===============  =============================================
    Property         Value
    ===============  =============================================
    BlendRadius      100.0 (millimeters part), 4.0 (inches part) 
    ---------------  ---------------------------------------------
    HoleDiameter     300.0 (millimeters part), 12.0 (inches part) 
    ---------------  ---------------------------------------------
    RemoveBlends     true 
    ---------------  ---------------------------------------------
    RemoveOpenings   true 
    ===============  =============================================
    
    .. versionadded:: NX10.0.0
    """
    
    def FindShipComponents(self) -> tuple:
        """
        Outputs the basic design components found in the loaded assembly.  
        
        Signature ``FindShipComponents()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (components, componentsProcessed). components is a list of :py:class:`NXOpen.Assemblies.Component`.   The basic design part occurrences. componentsProcessed is a list of bool.   Indication if the part occurrence has already been processed. 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def FindBasicDesignData(self, components: 'list[NXOpen.Assemblies.Component]') -> 'list[ShipPreparationInfo]':
        """
        Outputs the basic design data found in the given components.  
        
        First the work part is searched for any
        existing ship preparation data. The caller should not delete this data. 
        
        Signature ``FindBasicDesignData(components)`` 
        
        :param components:  The basic design part occurrences to find data in.  
        :type components: list of :py:class:`NXOpen.Assemblies.Component` 
        :returns:  The basic design data to be processed.  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def WaveLinkBasicDesignData(self, data: ShipPreparationInfo) -> None:
        """
        Wave links in the proper basic design data, if not already linked, into the work part.  
        
        The data is updated to reflect the new linked data. 
        
        Signature ``WaveLinkBasicDesignData(data)`` 
        
        :param data:  The basic design data to be wave linked.  
        :type data: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CreateUpdateDivide(self, data: ShipPreparationInfo) -> None:
        """
        Creates or updates the divide feature.  
        
        The basic design data is updated to contain the newly created feature
        if necessary. 
        
        Signature ``CreateUpdateDivide(data)`` 
        
        :param data:  The basic design data to create or update the divide feature.  
        :type data: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ConvertSeamCurves(self) -> 'list[ShipPreparationInfo]':
        """
        Converts intersection seam curves to edges on the linked bodies if found.  
        
        This method should be called after all linked plate system body features are created or updated. 
        If any new :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfoTypes.LinkedEdges <NXOpen.Features.ShipDesign.ShipPreparationInfoTypes>` 
        preparation data is created, it is output. 
        
        Signature ``ConvertSeamCurves()`` 
        
        :returns:  Additional basic design data to be processed.  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateEdgePairing(self) -> None:
        """
        Updates the edge pair information.  
        
        This method should be called after all plate divide features are created or updated. 
        
        Signature ``UpdateEdgePairing()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def FinalizeProcessing(self) -> None:
        """
        Cleans up all old ship preparation features, runs update and updates edge pairing.  
        
        This method should be called after all other processing is completed. 
        
        Signature ``FinalizeProcessing()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CreateBasicDesignData(self) -> ShipPreparationInfo:
        """
        Creates a empty basic design data object.  
        
        The caller should not delete this object.  
        
        Signature ``CreateBasicDesignData()`` 
        
        :returns:  The basic design data that was created.  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipPreparationInfo` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetEdgePair(self, edge1: NXOpen.Edge, edge2: NXOpen.Edge) -> None:
        """
        Sets the pairing data between the two edges input.  
        
        This pairing information is used in the CAE application when
        stitching edges. 
        
        Signature ``SetEdgePair(edge1, edge2)`` 
        
        :param edge1:  One of the edge pairs.  
        :type edge1: :py:class:`NXOpen.Edge` 
        :param edge2:  One of the edge pairs.  
        :type edge2: :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def GetPairedEdge(self, inEdge: NXOpen.Edge) -> NXOpen.Edge:
        """
        Outputs the edge that is paired with the inEdge it it exists.  
        
        This pairing information is used in the CAE application when
        stitching edges.  
        
        Signature ``GetPairedEdge(inEdge)`` 
        
        :param inEdge:  The edge to get it's pair.  
        :type inEdge: :py:class:`NXOpen.Edge` 
        :returns:  The paired edge if there is one None if not paired.  
        :rtype: :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    Used in curve approximation. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX11.0.0
       Removed with no replacement.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX11.0.0
       Removed with no replacement.
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    BlendRadius: float = ...
    """
    Returns or sets  the blend radius.  
    
    If :py:meth:`Features.ShipDesign.ShipPreparationBuilder.RemoveBlends`` is true then blends that
    that are less than or equal to this radius will be removed from plate systems. 
    
    <hr>
    
    Getter Method
    
    Signature ``BlendRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlendRadius`` 
    
    :param blendRadius: 
    :type blendRadius: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    Used in edge pairing to determine if edges are close. 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    HoleDiameter: float = ...
    """
    Returns or sets  the hole diameter.  
    
    If :py:meth:`Features.ShipDesign.ShipPreparationBuilder.RemoveOpenings`` is true then openings that
    fit inside a circle with this diameter will be removed from plate systems. 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDiameter`` 
    
    :param holeDiameter: 
    :type holeDiameter: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    RemoveBlends: bool = ...
    """
    Returns or sets  the option to remove blends.  
    
    If true, blends with a radius less than or equal to
    :py:meth:`Features.ShipDesign.ShipPreparationBuilder.BlendRadius`` will be removed from plate systems. 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveBlends`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveBlends`` 
    
    :param removeBlends: 
    :type removeBlends: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    RemoveOpenings: bool = ...
    """
    Returns or sets  the option to remove openings.  
    
    If true, openings that fit inside a circle with diameter 
    :py:meth:`Features.ShipDesign.ShipPreparationBuilder.HoleDiameter`` will be removed from plate systems.
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveOpenings`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveOpenings`` 
    
    :param removeOpenings: 
    :type removeOpenings: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipComponents: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the components containing basic design data to prepare for meshing.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: ShipPreparationBuilder = ...  # unknown typename


class ManufacturingPreparation(NXOpen.Features.CurveFeature):
    """
    Represents a manufacturing preparation feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ManufacturingPreparationBuilder`
    
    .. versionadded:: NX8.0.2
    """
    Null: ManufacturingPreparation = ...  # unknown typename


class PenetrationRequestCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.FunctionObjectCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Features.ShipDesign.PenetrationManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePenetrationRequestBuilder(self, penetrationrequest: PenetrationRequest) -> PenetrationRequestBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestBuilder`  
        
        Signature ``CreatePenetrationRequestBuilder(penetrationrequest)`` 
        
        :param penetrationrequest: 
        :type penetrationrequest: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def CreatePenetrationCutoutBuilder(self, penetrationrequest: PenetrationRequest) -> PenetrationCutoutBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationCutoutBuilder`  
        
        Signature ``CreatePenetrationCutoutBuilder(penetrationrequest)`` 
        
        :param penetrationrequest: 
        :type penetrationrequest: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationCutoutBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    @typing.overload
    def CreatePenetrationAssociationBuilder(self, isEditMode: bool, penetrationrequest: PenetrationRequest) -> PenetrationAssociationBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationAssociationBuilder`  
        
        Signature ``CreatePenetrationAssociationBuilder(isEditMode, penetrationrequest)`` 
        
        :param isEditMode: 
        :type isEditMode: bool 
        :param penetrationrequest: 
        :type penetrationrequest: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationAssociationBuilder` 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX12.0.0
           Use overloaded function with enum instead.
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    @typing.overload
    def CreatePenetrationAssociationBuilder(self, type: PenetrationRequestBuilderRequestDialogType, penetrationrequest: PenetrationRequest) -> PenetrationAssociationBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationAssociationBuilder`  
        
        Signature ``CreatePenetrationAssociationBuilder(type, penetrationrequest)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestBuilderRequestDialogType` 
        :param penetrationrequest: 
        :type penetrationrequest: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationAssociationBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def CreatePenetrationReviewRequestBuilder(self, requests: 'list[PenetrationRequest]') -> PenetrationReviewRequestBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationReviewRequestBuilder`  
        
        Signature ``CreatePenetrationReviewRequestBuilder(requests)`` 
        
        :param requests: 
        :type requests: list of :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationReviewRequestBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def CreateVerifyPenetrationBuilder(self) -> VerifyPenetrationBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.VerifyPenetrationBuilder`  
        
        Signature ``CreateVerifyPenetrationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.VerifyPenetrationBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def CreatePenetrationRequestForCutoutBuilder(self) -> PenetrationRequestForCutoutBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestForCutoutBuilder`  
        
        Signature ``CreatePenetrationRequestForCutoutBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestForCutoutBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def FindObject(self, name: str) -> NXOpen.NXObject:
        """
        Finds the :py:class:`NXOpen.NXObject` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the NXObject.  
        :type name: str 
        :returns:  :py:class:`NXOpen.NXObject` with this name.  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    


class MarkingLineBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a MarkingLine Feature builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateMarkingLineBuilder`
    
    .. versionadded:: NX5.0.0
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance for marking lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    CuttingSideFaces: NXOpen.ScCollector = ...
    """
    Returns  the cutting side face 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingSideFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    HideOriginal: bool = ...
    """
    Returns or sets  the option to hide original marking lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``HideOriginal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HideOriginal`` 
    
    :param hideOriginal: 
    :type hideOriginal: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Tolerance: float = ...
    """
    Returns or sets  the distance tolerance for marking lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: MarkingLineBuilder = ...  # unknown typename


class MainDimensionsBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.MainDimensions` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateMainDimensionsBuilder`
    
    Default values.
    
    ===========================  =============================================
    Property                     Value
    ===========================  =============================================
    AftPerpendicular.Value       0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    Baseline.Value               0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    ForwardPerpendicular.Value   0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    Midship.Value                0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    Waterline.Value              0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    XMax.Value                   25000 (millimeters part), 1000 (inches part) 
    ---------------------------  ---------------------------------------------
    XMin.Value                   0 (millimeters part), 0 (inches part) 
    ---------------------------  ---------------------------------------------
    YMax.Value                   2500 (millimeters part), 100 (inches part) 
    ---------------------------  ---------------------------------------------
    ZMax.Value                   2500 (millimeters part), 100 (inches part) 
    ---------------------------  ---------------------------------------------
    ZMin.Value                   0 (millimeters part), 0 (inches part) 
    ===========================  =============================================
    
    .. versionadded:: NX5.0.0
    """
    AftPerpendicular: NXOpen.Expression = ...
    """
    Returns  the expression containing the position value of Aft Perpendicular along the X axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicular`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Baseline: NXOpen.Expression = ...
    """
    Returns  the expression containing the position value of baseline along the Z axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``Baseline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForwardPerpendicular: NXOpen.Expression = ...
    """
    Returns  the expression containing the position value of forward Perpendicular along the X axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicular`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    GridID: str = ...
    """
    Returns or sets  the unique "Grid ID" for each ship.  
    
    <hr>
    
    Getter Method
    
    Signature ``GridID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridID`` 
    
    :param gridID: 
    :type gridID: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Midship: NXOpen.Expression = ...
    """
    Returns  the expression containing the position value of midship along the X axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``Midship`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ShipBody: NXOpen.SelectBody = ...
    """
    Returns  the ship body.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Waterline: NXOpen.Expression = ...
    """
    Returns  the expression containing the position value of waterline along the Z axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``Waterline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    XMax: NXOpen.Expression = ...
    """
    Returns  the expression containing the x max value.  
    
    <hr>
    
    Getter Method
    
    Signature ``XMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    XMin: NXOpen.Expression = ...
    """
    Returns  the expression containing the x min value.  
    
    <hr>
    
    Getter Method
    
    Signature ``XMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    YMax: NXOpen.Expression = ...
    """
    Returns  the expression containing the y max value.  
    
    <hr>
    
    Getter Method
    
    Signature ``YMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ZMax: NXOpen.Expression = ...
    """
    Returns  the expression containing the z max value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ZMin: NXOpen.Expression = ...
    """
    Returns  the expression containing the z min value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: MainDimensionsBuilder = ...  # unknown typename


class ManufacturingPreparationBuilderAttributeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManufacturingPreparationBuilderAttributeType():
    """
    Represents manufacturing attribute type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SaName", "name attribute"
       "SaType", "type attribute"
       "SaSize", "size attribute"
       "SaMaterial", "material attribute"
       "SaForm", "form attribute"
       "SaDescription", "name attribute"
    """
    SaName = 0  # ManufacturingPreparationBuilderAttributeTypeMemberType
    SaType = 1  # ManufacturingPreparationBuilderAttributeTypeMemberType
    SaSize = 2  # ManufacturingPreparationBuilderAttributeTypeMemberType
    SaMaterial = 3  # ManufacturingPreparationBuilderAttributeTypeMemberType
    SaForm = 4  # ManufacturingPreparationBuilderAttributeTypeMemberType
    SaDescription = 5  # ManufacturingPreparationBuilderAttributeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManufacturingPreparationBuilder(NXOpen.Features.FeatureBuilder):
    """
    This builder is used to adds attributes to the part and body identifying manufacturing related data.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateManufacturingPreparationBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    class AttributeType():
        """
        Represents manufacturing attribute type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SaName", "name attribute"
           "SaType", "type attribute"
           "SaSize", "size attribute"
           "SaMaterial", "material attribute"
           "SaForm", "form attribute"
           "SaDescription", "name attribute"
        """
        SaName = 0  # ManufacturingPreparationBuilderAttributeTypeMemberType
        SaType = 1  # ManufacturingPreparationBuilderAttributeTypeMemberType
        SaSize = 2  # ManufacturingPreparationBuilderAttributeTypeMemberType
        SaMaterial = 3  # ManufacturingPreparationBuilderAttributeTypeMemberType
        SaForm = 4  # ManufacturingPreparationBuilderAttributeTypeMemberType
        SaDescription = 5  # ManufacturingPreparationBuilderAttributeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InitializeDesignElementAttributes(self, designElement: NXOpen.DisplayableObject) -> None:
        """
        Read the design attributes and use them to initialize the builder values.  
        
        Signature ``InitializeDesignElementAttributes(designElement)`` 
        
        :param designElement:  the design element for manufacturing preparation.  
        :type designElement: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDesignElementAttributeValue(self, designElement: NXOpen.DisplayableObject, attrType: ManufacturingPreparationBuilderAttributeType) -> str:
        """
        Get the attribute value of the given design element.  
        
        Signature ``GetDesignElementAttributeValue(designElement, attrType)`` 
        
        :param designElement:  the design element for manufacturing preparation.  
        :type designElement: :py:class:`NXOpen.DisplayableObject` 
        :param attrType:  the attriubte type.  
        :type attrType: :py:class:`NXOpen.Features.ShipDesign.ManufacturingPreparationBuilderAttributeType` 
        :returns:  the attribute value.  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDesignElementAttributeValue(self, designElement: NXOpen.DisplayableObject, attrType: ManufacturingPreparationBuilderAttributeType, attrValue: str) -> None:
        """
        Set the attribute value of the given design element.  
        
        Signature ``SetDesignElementAttributeValue(designElement, attrType, attrValue)`` 
        
        :param designElement:  the design element for manufacturing preparation.  
        :type designElement: :py:class:`NXOpen.DisplayableObject` 
        :param attrType:  the attriubte type.  
        :type attrType: :py:class:`NXOpen.Features.ShipDesign.ManufacturingPreparationBuilderAttributeType` 
        :param attrValue:  the attribute value.  
        :type attrValue: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_concept ("Ship Concept")
        """
        ...
    
    
    def UpdateSeamsMap(self, selectedComps: 'list[int]') -> None:
        """
        The seams map for the selected components.  
        
        Signature ``UpdateSeamsMap(selectedComps)`` 
        
        :param selectedComps: 
        :type selectedComps: list of int 
        
        .. versionadded:: NX10.0.1
        
        License requirements: nx_ship_concept ("Ship Concept")
        """
        ...
    
    
    def GetComponentSeams(self, selectedComp: int) -> None:
        """
        The seams to load for the component
        
        Signature ``GetComponentSeams(selectedComp)`` 
        
        :param selectedComp: 
        :type selectedComp: int 
        
        .. versionadded:: NX10.0.1
        
        License requirements: nx_ship_concept ("Ship Concept")
        """
        ...
    
    
    def FindIntersectingParts(self) -> 'list[NXOpen.Assemblies.Component]':
        """
        The design parts that intersect the manufacturing collector 
        
        Signature ``FindIntersectingParts()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX10.0.1
        
        License requirements: None.
        """
        ...
    
    AftStiffenerExtension: NXOpen.Expression = ...
    """
    Returns  the aft stiffener extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``AftStiffenerExtension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AssemblyComponent: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the assembly part to add components to 
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    """
    FeatureName: str = ...
    """
    Returns or sets  the feature name 
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FeatureName`` 
    
    :param featureName: 
    :type featureName: str 
    
    .. versionadded:: NX8.0.3
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ForwardStiffenerExtension: NXOpen.Expression = ...
    """
    Returns  the forward stiffener extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardStiffenerExtension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Mirror: bool = ...
    """
    Returns or sets  the mirror option 
    
    <hr>
    
    Getter Method
    
    Signature ``Mirror`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Mirror`` 
    
    :param mirror: 
    :type mirror: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ReassignPositionNumbers: bool = ...
    """
    Returns or sets  the reassign position numbers toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReassignPositionNumbers`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReassignPositionNumbers`` 
    
    :param reassign: 
    :type reassign: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    ReferenceFeatureName: str = ...
    """
    Returns or sets  the feature name 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFeatureName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceFeatureName`` 
    
    :param featureName: 
    :type featureName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SaProject: str = ...
    """
    Returns or sets  the project number assigned to the ship.  
    
    <hr>
    
    Getter Method
    
    Signature ``SaProject`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaProject`` 
    
    :param saProject: 
    :type saProject: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SeamingObjects: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the objects that define straking seams 
    
    <hr>
    
    Getter Method
    
    Signature ``SeamingObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    """
    SectionNumber: str = ...
    """
    Returns or sets  the ship section number.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionNumber`` 
    
    :param sectionNumber: 
    :type sectionNumber: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SteelComponents: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the design elements to prepare for manufacturing.  
    
    <hr>
    
    Getter Method
    
    Signature ``SteelComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Trim: bool = ...
    """
    Returns or sets  the trim option 
    
    <hr>
    
    Getter Method
    
    Signature ``Trim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Trim`` 
    
    :param trim: 
    :type trim: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: ManufacturingPreparationBuilder = ...  # unknown typename


class StiffenerSystem(NXOpen.Features.CurveFeature):
    """
    Represents a stiffener system feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.StiffenerSystemBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: StiffenerSystem = ...  # unknown typename


class PenetrationRequestForCutoutBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Features.ShipDesign.PenetrationRequest` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.PenetrationRequestCollection.CreatePenetrationRequestForCutoutBuilder`
    
    .. versionadded:: NX8.5.0
    """
    SelectionCutout: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection cutout 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionCutout`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PenetrationRequestForCutoutBuilder = ...  # unknown typename


class ItFrameListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ItFrameListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ItFrameListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ItFrameListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ItFrameListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ItFrameListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ItFrameListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ItFrameListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ItFrameListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ItFrameListItemBuilder, object2: ItFrameListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ItFrameListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.ItFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ItFrameListItemBuilderList = ...  # unknown typename


class BulkHeadListItemBuilder(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.BulkHeadListItemBuilder`
    
    .. versionadded:: NX5.0.0
    """
    BulkHeadName: str = ...
    """
    Returns or sets  the bulkhead name.  
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadName`` 
    
    :param bulkHeadName: 
    :type bulkHeadName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    FrameName: str = ...
    """
    Returns or sets  the reference frame name.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrameName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrameName`` 
    
    :param frameName: 
    :type frameName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    FrameOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing bulkhead frame offset value.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrameOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: BulkHeadListItemBuilder = ...  # unknown typename


class ShipSectionBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipSectionBuilderType():
    """
    Define the creation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Manual", " - "
       "Spreadsheet", " - "
       "Decks", " - "
    """
    Manual = 0  # ShipSectionBuilderTypeMemberType
    Spreadsheet = 1  # ShipSectionBuilderTypeMemberType
    Decks = 2  # ShipSectionBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipSectionBuilderXFilterMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipSectionBuilderXFilter():
    """
    Define the output option for each of the frame type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", " - "
       "TransverseFrames", " - "
       "Bulkheads", " - "
    """
    All = 0  # ShipSectionBuilderXFilterMemberType
    TransverseFrames = 1  # ShipSectionBuilderXFilterMemberType
    Bulkheads = 2  # ShipSectionBuilderXFilterMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipSectionBuilderZFilterMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipSectionBuilderZFilter():
    """
    Define the output option for each of the frame type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", " - "
       "DeckFrames", " - "
       "LongitudinalFrames", " - "
    """
    All = 0  # ShipSectionBuilderZFilterMemberType
    DeckFrames = 1  # ShipSectionBuilderZFilterMemberType
    LongitudinalFrames = 2  # ShipSectionBuilderZFilterMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipSectionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipSection` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipSectionBuilder`
    
    Default values.
    
    ================================  ======================================
    Property                          Value
    ================================  ======================================
    ReadDataSet.CreateDataSetToggle   0 
    --------------------------------  --------------------------------------
    ReadDataSet.NativeToggle          0 
    --------------------------------  --------------------------------------
    XDatumFilter                      All 
    --------------------------------  --------------------------------------
    XMaxOffset.Value                  0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    XMinOffset.Value                  0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    YMaxOffset.Value                  0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    YMinOffset.Value                  0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    ZDatumFilter                      All 
    --------------------------------  --------------------------------------
    ZMaxOffset.Value                  0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    ZMinOffset.Value                  0 (millimeters part), 0 (inches part) 
    ================================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Type():
        """
        Define the creation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Manual", " - "
           "Spreadsheet", " - "
           "Decks", " - "
        """
        Manual = 0  # ShipSectionBuilderTypeMemberType
        Spreadsheet = 1  # ShipSectionBuilderTypeMemberType
        Decks = 2  # ShipSectionBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class XFilter():
        """
        Define the output option for each of the frame type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", " - "
           "TransverseFrames", " - "
           "Bulkheads", " - "
        """
        All = 0  # ShipSectionBuilderXFilterMemberType
        TransverseFrames = 1  # ShipSectionBuilderXFilterMemberType
        Bulkheads = 2  # ShipSectionBuilderXFilterMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ZFilter():
        """
        Define the output option for each of the frame type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", " - "
           "DeckFrames", " - "
           "LongitudinalFrames", " - "
        """
        All = 0  # ShipSectionBuilderZFilterMemberType
        DeckFrames = 1  # ShipSectionBuilderZFilterMemberType
        LongitudinalFrames = 2  # ShipSectionBuilderZFilterMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetDeckContainer(self, isDeckContainer: bool) -> None:
        """
        Sets the deck container flag 
        
        Signature ``SetDeckContainer(isDeckContainer)`` 
        
        :param isDeckContainer: 
        :type isDeckContainer: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    AssemblyPart: str = ...
    """
    Returns or sets  the assembly part 
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssemblyPart`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    BottomDeckSectionName: str = ...
    """
    Returns or sets  the bottom deck section name 
    
    <hr>
    
    Getter Method
    
    Signature ``BottomDeckSectionName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomDeckSectionName`` 
    
    :param bottomSectionName: 
    :type bottomSectionName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    ReadDataSet: ReadDataSetBuilder = ...
    """
    Returns  the Data Set Builder for reading data sets from Team Center  
    
    <hr>
    
    Getter Method
    
    Signature ``ReadDataSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ReadDataSetBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReferenceGeometry: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the reference geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SectionName: str = ...
    """
    Returns or sets  the section name 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionName`` 
    
    :param sectionName: 
    :type sectionName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionPart: str = ...
    """
    Returns or sets  the section part 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionPart`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionType: ShipSectionBuilderType = ...
    """
    Returns or sets  the creation method 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipSectionBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShipSectionBuilderType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionXMax: int = ...
    """
    Returns or sets  the section xmax 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionXMax`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionXMax`` 
    
    :param sectionXMax: 
    :type sectionXMax: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionXMin: int = ...
    """
    Returns or sets  the section xmin 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionXMin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionXMin`` 
    
    :param sectionXMin: 
    :type sectionXMin: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionYMax: int = ...
    """
    Returns or sets  the section ymax 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionYMax`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionYMax`` 
    
    :param sectionYMax: 
    :type sectionYMax: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionYMin: int = ...
    """
    Returns or sets  the section ymin 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionYMin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionYMin`` 
    
    :param sectionYMin: 
    :type sectionYMin: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionZMax: int = ...
    """
    Returns or sets  the section zmax 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionZMax`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionZMax`` 
    
    :param sectionZMax: 
    :type sectionZMax: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    SectionZMin: int = ...
    """
    Returns or sets  the section zmin 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionZMin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionZMin`` 
    
    :param sectionZMin: 
    :type sectionZMin: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    ShipBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the ship bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``ShipBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ShipBody: NXOpen.SelectBody = ...
    """
    Returns  the ship body 
    
    <hr>
    
    Getter Method
    
    Signature ``ShipBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XDatumFilter: ShipSectionBuilderXFilter = ...
    """
    Returns or sets  the x datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``XDatumFilter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipSectionBuilderXFilter` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDatumFilter`` 
    
    :param xDatumFilter: 
    :type xDatumFilter: :py:class:`NXOpen.Features.ShipDesign.ShipSectionBuilderXFilter` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    XMaxDatumFilter: int = ...
    """
    Returns or sets  the x max datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``XMaxDatumFilter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XMaxDatumFilter`` 
    
    :param xMaxDatumFilter: 
    :type xMaxDatumFilter: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    XMaxOffset: NXOpen.Expression = ...
    """
    Returns  the x max offset 
    
    <hr>
    
    Getter Method
    
    Signature ``XMaxOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XMinDatumFilter: int = ...
    """
    Returns or sets  the x min datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``XMinDatumFilter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XMinDatumFilter`` 
    
    :param xMinDatumFilter: 
    :type xMinDatumFilter: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    XMinOffset: NXOpen.Expression = ...
    """
    Returns  the x min offset 
    
    <hr>
    
    Getter Method
    
    Signature ``XMinOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YDatumFilter: int = ...
    """
    Returns or sets  the y datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``YDatumFilter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDatumFilter`` 
    
    :param yDatumFilter: 
    :type yDatumFilter: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    YMaxDatumFilter: int = ...
    """
    Returns or sets  the y max datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``YMaxDatumFilter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YMaxDatumFilter`` 
    
    :param yMaxDatumFilter: 
    :type yMaxDatumFilter: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    YMaxOffset: NXOpen.Expression = ...
    """
    Returns  the y max offset 
    
    <hr>
    
    Getter Method
    
    Signature ``YMaxOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YMinDatumFilter: int = ...
    """
    Returns or sets  the y min datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``YMinDatumFilter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YMinDatumFilter`` 
    
    :param yMinDatumFilter: 
    :type yMinDatumFilter: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    YMinOffset: NXOpen.Expression = ...
    """
    Returns  the y min offset 
    
    <hr>
    
    Getter Method
    
    Signature ``YMinOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ZDatumFilter: ShipSectionBuilderZFilter = ...
    """
    Returns or sets  the z datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``ZDatumFilter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipSectionBuilderZFilter` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZDatumFilter`` 
    
    :param zDatumFilter: 
    :type zDatumFilter: :py:class:`NXOpen.Features.ShipDesign.ShipSectionBuilderZFilter` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    ZMaxDatumFilter: int = ...
    """
    Returns or sets  the z max datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``ZMaxDatumFilter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZMaxDatumFilter`` 
    
    :param zMaxDatumFilter: 
    :type zMaxDatumFilter: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    ZMaxOffset: NXOpen.Expression = ...
    """
    Returns  the z max offset 
    
    <hr>
    
    Getter Method
    
    Signature ``ZMaxOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ZMinDatumFilter: int = ...
    """
    Returns or sets  the z min datum filter 
    
    <hr>
    
    Getter Method
    
    Signature ``ZMinDatumFilter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZMinDatumFilter`` 
    
    :param zMinDatumFilter: 
    :type zMinDatumFilter: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_concept ("Ship Concept") OR nx_ship_detail ("Ship Detail Design")
    """
    ZMinOffset: NXOpen.Expression = ...
    """
    Returns  the z min offset 
    
    <hr>
    
    Getter Method
    
    Signature ``ZMinOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ShipSectionBuilder = ...  # unknown typename


class SteelFeatureSpreadsheetBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` builder.  
    
    It is used to manage the data contained in the ship sketch based steel feature block.
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX8.0.0
    """
    
    def SetContextEntity(self, contextEntity: NXOpen.TaggedObject) -> None:
        """
        Set the context entity on which the context attribute is stored.  
        
        For example, if
        you're spreadsheet builder is being used to create an endcut, the body you're about
        to cut should be set as the context entity.  Refer to the individual feature's 
        documentation to see what context entity is expected for the feature you're using.
        
        Signature ``SetContextEntity(contextEntity)`` 
        
        :param contextEntity: 
        :type contextEntity: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetPossibleContextAttributeCount(self, possibleContextAttributeCount: int) -> None:
        """
        Set the possible context attribute count (assuming the context entity has not yet been created).  
        
        If you have any possible context attributes set in this builder, the context entity will
        be ignored, and the context attribute will be selected from the list of possible context attributes.
        
        Signature ``SetPossibleContextAttributeCount(possibleContextAttributeCount)`` 
        
        :param possibleContextAttributeCount:  the number of possible context attributes (use this before setting each possible context attribute via SetPossibleContextAttribute)   
        :type possibleContextAttributeCount: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetPossibleContextAttribute(self, possibleContextAttributeIndex: int, possibleContextAttribute: str) -> None:
        """
        Set a possible context attribute (assuming the context entity has not yet been created).  
        
        If you have any possible context attributes set in this builder, the context entity will
        be ignored, and the context attribute will be selected from the list of possible context attributes.
        
        Signature ``SetPossibleContextAttribute(possibleContextAttributeIndex, possibleContextAttribute)`` 
        
        :param possibleContextAttributeIndex:  the index into the possible context attribute array we wish to set  
        :type possibleContextAttributeIndex: int 
        :param possibleContextAttribute: 
        :type possibleContextAttribute: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    @typing.overload
    def SetSectionType(self) -> None:
        """Returns or sets  the section type"""
        ...
    
    @typing.overload
    def SetSectionType(self, nSectionType: int) -> None:
        """
        Getter Method
        
        Signature ``SectionType`` 
        
        :param nSectionType: 
        :type nSectionType: int 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.SetSectionType()
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    @typing.overload
    def SetSectionType(self, nSectionType: int) -> None:
        """
        Setter Method
        
        Signature ``SectionType`` 
        
        :param nSectionType: 
        :type nSectionType: int 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.SetSectionType()
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    @typing.overload
    def SetSectionType(self, strSectionType: str) -> None:
        """
        This method sets the section type outside the block. It provides a way for the block user
        to set up the section type by a string value. the block will look up the registration
        spreadsheet to translate it into number value.
        
        Signature ``SetSectionType(strSectionType)`` 
        
        :param strSectionType: 
        :type strSectionType: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetSectionSubType1(self, strSectionType: str) -> None:
        """
        Sets the section sub type by string value.  
        
        Signature ``SetSectionSubType1(strSectionType)`` 
        
        :param strSectionType: 
        :type strSectionType: str 
        
        .. versionadded:: NX8.5.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetSectionSubType2(self, strSectionType: str) -> None:
        """
        Sets the section sub type2 by string value.  
        
        Signature ``SetSectionSubType2(strSectionType)`` 
        
        :param strSectionType: 
        :type strSectionType: str 
        
        .. versionadded:: NX8.5.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetsDefaultTypesFromContext(self) -> None:
        """
        Set default section types of the builder when a new context entity is set.  
        
        Signature ``SetsDefaultTypesFromContext()`` 
        
        .. versionadded:: NX8.5.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ImportSketch(self) -> None:
        """
        Thie method reads the model file name from the spread sheet, imports the sketch template
        into current work part, and updates the attribute values and expresseion values from the 
        data spreadsheet.  
        
        Signature ``ImportSketch()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def GetImportedSketches(self) -> 'list[NXOpen.Features.Feature]':
        """
        This method retrieves all the features that are imported into current work part.  
        
        Signature ``GetImportedSketches()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditPrimaryParameter(self, parameterName: str, parameterValue: str) -> None:
        """
        This method changes the value of a parameter and queries from the spread sheet to update
        the related parameter values.  
        
        A call to UI method UpdateDlgLayout is needed afterwards
        if UI is concerned.
        
        Signature ``EditPrimaryParameter(parameterName, parameterValue)`` 
        
        :param parameterName:  the parameter name  
        :type parameterName: str 
        :param parameterValue:  the parameter value  
        :type parameterValue: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def EditParameter(self, parameterName: str, parameterValue: str) -> None:
        """
        This method simply changes the value of a parameter.  
        
        Parameter could be an expression 
        or an attribute. Also a call to UI method UpdateDlgLayout is needed afterwards if UI is 
        concerned.
        
        Signature ``EditParameter(parameterName, parameterValue)`` 
        
        :param parameterName:  the parameter name  
        :type parameterName: str 
        :param parameterValue:  the parameter value  
        :type parameterValue: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def GetParameterValues(self) -> 'list[NXOpen.Tooling.SpreadsheetDataParameter]':
        """
        This method retrieves all the parameter values related to the current imported
        sketch template.  
        
        Signature ``GetParameterValues()`` 
        
        :returns:  Array of structures with the parameter data.  
        :rtype: list of :py:class:`NXOpen.Tooling.SpreadsheetDataParameter` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSpreadsheetData(self) -> NXOpen.Tooling.SpreadsheetData:
        """
        It retrieves the KRUSpreadsheetData object to the builder.  
        
        In most cases, this method is used
        internally.
        
        Signature ``GetSpreadsheetData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSpreadsheetData(self, pKRUData: NXOpen.Tooling.SpreadsheetData) -> None:
        """
        It sets the KRUSpreadsheetData object to the builder.  
        
        In most cases, this method is used
        internally.
        
        Signature ``SetSpreadsheetData(pKRUData)`` 
        
        :param pKRUData: 
        :type pKRUData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetBuilderData(self) -> None:
        """
        This method cleans up the imported features from current work part, also it rereads 
        the data file  and registration.  
        
        If UI is concerned, UpdateDlgLayout should be called in UI.
        
        Signature ``ResetBuilderData()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CacheSpreadsheetData(self) -> None:
        """
        This method caches parameter data from spreadsheet to the builder.  
        
        Signature ``CacheSpreadsheetData()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateSpreadsheetData(self, paramNames: 'list[str]', paramValues: 'list[str]') -> None:
        """
        This method takes parameter name and parameter value pairs as input and updates the related
        geometries by updating the expressions, i.  
        
        e. sketches.   
        
        Signature ``UpdateSpreadsheetData(paramNames, paramValues)`` 
        
        :param paramNames: 
        :type paramNames: list of str 
        :param paramValues: 
        :type paramValues: list of str 
        
        .. versionadded:: NX8.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def RestoreSpreadsheetData(self) -> None:
        """
        This method restores parameter data inside the builder.  
        
        Signature ``RestoreSpreadsheetData()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def GetAvailableSectionTypes(self) -> 'list[str]':
        """
        This method finds the available section types for the current context data.  
        
        It will do lookups in the registration file to see which context attribute
        in the table matches the current possible context attributes or the current
        context entitie's attributes.  Then it repopulates the list of available
        section types that are used with the current context attribute.  All of
        these table lookups can be expensive for performance.
        
        Signature ``GetAvailableSectionTypes()`` 
        
        :returns:  Array of available section types  
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetRuleInputs(self, inputNames: 'list[str]', inputValues: 'list[str]') -> None:
        """
        This method sets the rule inputs.  
        
        The rule inputs will be used to evaluate the section rules and parameter rules defined in xml 
        rule file.
        Ensure the inputs have been clearly described as comment in the xml rule file, so
        the user can use them when they want to modify the rules.
        
        Signature ``SetRuleInputs(inputNames, inputValues)`` 
        
        :param inputNames: 
        :type inputNames: list of str 
        :param inputValues: 
        :type inputValues: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def UpdateParametersUsingRules(self) -> None:
        """
        This method updates the parameters in the steel feature data spreadsheet using parameters rules.  
        
        The rule inputs should be set before you call this method.
        
        Signature ``UpdateParametersUsingRules()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def DeleteImportedSketch(self) -> None:
        """
        This method deletes the imported sketch which is unwanted any longer.  
        
        Signature ``DeleteImportedSketch()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    SectionType: int = ...
    """
    Returns or sets  the section type 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX8.5.0
       Removed with no replacement
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param nSectionType: 
    :type nSectionType: int 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder`.SetSectionType()
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SteelFeatureType: str = ...
    """
    Returns or sets  
    the steel feature type (eg: Profile, Edge Reinforcement, etc)
    
    <hr>
    
    Getter Method
    
    Signature ``SteelFeatureType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SteelFeatureType`` 
    
    :param steelFeatureType: 
    :type steelFeatureType: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    Null: SteelFeatureSpreadsheetBuilder = ...  # unknown typename


class PenetrationReviewRequestBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Features.ShipDesign.PenetrationRequest` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.PenetrationRequestCollection.CreatePenetrationReviewRequestBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def GetMultilineStringComments(self) -> 'list[str]':
        """
        Returns the multiline string comments  
        
        Signature ``GetMultilineStringComments()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMultilineStringComments(self, multilineStringComments: 'list[str]') -> None:
        """
        Sets the multiline string comments 
        
        Signature ``SetMultilineStringComments(multilineStringComments)`` 
        
        :param multilineStringComments: 
        :type multilineStringComments: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    DueDate: str = ...
    """
    Returns or sets  the due date 
    
    <hr>
    
    Getter Method
    
    Signature ``DueDate`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DueDate`` 
    
    :param stringDueDate: 
    :type stringDueDate: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    ReviewDecisions: int = ...
    """
    Returns or sets  the review decisions 
    
    <hr>
    
    Getter Method
    
    Signature ``ReviewDecisions`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReviewDecisions`` 
    
    :param enumReviewDecisions: 
    :type enumReviewDecisions: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Null: PenetrationReviewRequestBuilder = ...  # unknown typename


class ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScale():
    """
    the standard Metric drawing sheet scales 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "S501", "a scale of 50:1"
       "S201", "a scale of 20:1"
       "S101", "a scale of 10:1"
       "S51", "a scale of 5:1"
       "S21", "a scale of 2:1"
       "S11", "a scale of 1:1"
       "S12", "a scale of 1:2"
       "S15", "a scale of 1:5"
       "S110", "a scale of 1:10"
       "S120", "a scale of 1:20"
       "S150", "a scale of 1:50"
       "S1100", "a scale of 1:100"
       "Custom", "a custom scale"
       "Default", "default scale"
    """
    S501 = 0  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S201 = 1  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S101 = 2  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S51 = 3  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S21 = 4  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S11 = 5  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S12 = 6  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S15 = 7  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S110 = 8  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S120 = 9  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S150 = 10  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    S1100 = 11  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    Custom = 12  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    Default = 13  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScale():
    """
    the standard English drawing sheet scales 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "S81", "a scale of 8:1"
       "S41", "a scale of 4:1"
       "S21", "a scale of 2:1"
       "S11", "a scale of 1:1"
       "S12", "a scale of 1:2"
       "S14", "a scale of 1:4"
       "S18", "a scale of 1:8"
       "Custom", "a custom scale"
       "Default", "default scale"
    """
    S81 = 0  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    S41 = 1  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    S21 = 2  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    S11 = 3  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    S12 = 4  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    S14 = 5  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    S18 = 6  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    Custom = 7  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    Default = 8  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExpansionDrawingBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ExpansionDrawingBuilder`.  
    
    This class is used to create expansion drawing
    and just returns None
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateExpansionDrawingBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class JaExpansiondrawingbuilderMetricScale():
        """
        the standard Metric drawing sheet scales 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "S501", "a scale of 50:1"
           "S201", "a scale of 20:1"
           "S101", "a scale of 10:1"
           "S51", "a scale of 5:1"
           "S21", "a scale of 2:1"
           "S11", "a scale of 1:1"
           "S12", "a scale of 1:2"
           "S15", "a scale of 1:5"
           "S110", "a scale of 1:10"
           "S120", "a scale of 1:20"
           "S150", "a scale of 1:50"
           "S1100", "a scale of 1:100"
           "Custom", "a custom scale"
           "Default", "default scale"
        """
        S501 = 0  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S201 = 1  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S101 = 2  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S51 = 3  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S21 = 4  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S11 = 5  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S12 = 6  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S15 = 7  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S110 = 8  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S120 = 9  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S150 = 10  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        S1100 = 11  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        Custom = 12  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        Default = 13  # ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScaleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class JaExpansiondrawingbuilderEnglishScale():
        """
        the standard English drawing sheet scales 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "S81", "a scale of 8:1"
           "S41", "a scale of 4:1"
           "S21", "a scale of 2:1"
           "S11", "a scale of 1:1"
           "S12", "a scale of 1:2"
           "S14", "a scale of 1:4"
           "S18", "a scale of 1:8"
           "Custom", "a custom scale"
           "Default", "default scale"
        """
        S81 = 0  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        S41 = 1  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        S21 = 2  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        S11 = 3  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        S12 = 4  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        S14 = 5  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        S18 = 6  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        Custom = 7  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        Default = 8  # ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScaleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AftPlane: NXOpen.Plane = ...
    """
    Returns or sets  the aft plane 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPlane`` 
    
    :param aftPlane: 
    :type aftPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BasePlane: NXOpen.Plane = ...
    """
    Returns or sets  the base plane 
    
    <hr>
    
    Getter Method
    
    Signature ``BasePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BasePlane`` 
    
    :param basePlane: 
    :type basePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BasicDesignMode: bool = ...
    """
    Returns or sets  the basic design application flag 
    
    <hr>
    
    Getter Method
    
    Signature ``BasicDesignMode`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BasicDesignMode`` 
    
    :param isBasic: 
    :type isBasic: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DrawingTemplate: DrawingTemplateBuilder = ...
    """
    Returns  the drawing template 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingTemplate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingTemplateBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    EnglishScale: ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScale = ...
    """
    Returns or sets  the English drawing scale 
    
    <hr>
    
    Getter Method
    
    Signature ``EnglishScale`` 
    
    :returns:  the English drawing scale  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScale` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnglishScale`` 
    
    :param englishScale:  the English drawing scale  
    :type englishScale: :py:class:`NXOpen.Features.ShipDesign.ExpansionDrawingBuilderJaExpansiondrawingbuilderEnglishScale` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForePlane: NXOpen.Plane = ...
    """
    Returns or sets  the fore plane 
    
    <hr>
    
    Getter Method
    
    Signature ``ForePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForePlane`` 
    
    :param forePlane: 
    :type forePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    IsEdit: bool = ...
    """
    Returns or sets  the flag to indicate to either create or edit a Ship Expansion View.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsEdit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsEdit`` 
    
    :param isEdit: 
    :type isEdit: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    MetricScale: ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScale = ...
    """
    Returns or sets  the Metric drawing scale 
    
    <hr>
    
    Getter Method
    
    Signature ``MetricScale`` 
    
    :returns:  the Metric drawing scale  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScale` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MetricScale`` 
    
    :param metricScale:  the Metric drawing scale  
    :type metricScale: :py:class:`NXOpen.Features.ShipDesign.ExpansionDrawingBuilderJaExpansiondrawingbuilderMetricScale` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    PlatesToExpand: NXOpen.SelectNXObjectList = ...
    """
    Returns  the plates to be expanded 
    
    <hr>
    
    Getter Method
    
    Signature ``PlatesToExpand`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ScaleDenominator: float = ...
    """
    Returns or sets  the denominator of a custom scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleDenominator`` 
    
    :returns:  the denominator of a custom scale  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleDenominator`` 
    
    :param scaleDenominator:  the denominator of a custom scale  
    :type scaleDenominator: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ScaleNumerator: float = ...
    """
    Returns or sets  the numerator of a custom scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleNumerator`` 
    
    :returns:  the numerator of a custom scale  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleNumerator`` 
    
    :param scaleNumerator: 
    :type scaleNumerator: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    UpperPlane: NXOpen.Plane = ...
    """
    Returns or sets  the upper plane 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperPlane`` 
    
    :param upperPlane: 
    :type upperPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: ExpansionDrawingBuilder = ...  # unknown typename


class SteelVentHoles(NXOpen.Features.BodyFeature):
    """
    Represents a ship vent holes feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SteelVentHolesBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: SteelVentHoles = ...  # unknown typename


class DisplaySolidBuilderDisplayOptionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DisplaySolidBuilderDisplayOptionTypes():
    """
    Used to specify how the basic design profile system objects are displayed. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", " - "
       "CurveAndSolid", " - "
    """
    Curve = 0  # DisplaySolidBuilderDisplayOptionTypesMemberType
    CurveAndSolid = 2  # DisplaySolidBuilderDisplayOptionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DisplaySolidBuilder(NXOpen.Builder):
    """
    This class is used to identify ship structure that is to have a temporary
    solid display built for it.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateDisplaySolidBuilder`
    
    Default values.
    
    ==============  ======
    Property        Value
    ==============  ======
    DisplayOption   Curve 
    ==============  ======
    
    .. versionadded:: NX8.0.0
    """
    
    class DisplayOptionTypes():
        """
        Used to specify how the basic design profile system objects are displayed. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", " - "
           "CurveAndSolid", " - "
        """
        Curve = 0  # DisplaySolidBuilderDisplayOptionTypesMemberType
        CurveAndSolid = 2  # DisplaySolidBuilderDisplayOptionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DisplayOption: DisplaySolidBuilderDisplayOptionTypes = ...
    """
    Returns or sets  the setting for how the basic design objects are displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DisplaySolidBuilderDisplayOptionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayOption`` 
    
    :param displayOption: 
    :type displayOption: :py:class:`NXOpen.Features.ShipDesign.DisplaySolidBuilderDisplayOptionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipStructure: NXOpen.SelectNXObjectList = ...
    """
    Returns  the ship structure whose solid display is desired.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: DisplaySolidBuilder = ...  # unknown typename


class StandardPart(NXOpen.Features.CurveFeature):
    """
    Represents a standard part feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.StandardPartFrameworkBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: StandardPart = ...  # unknown typename


class TransFrameListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[TransFrameListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: TransFrameListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: TransFrameListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> TransFrameListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TransFrameListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TransFrameListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[TransFrameListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[TransFrameListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: TransFrameListItemBuilder, object2: TransFrameListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: TransFrameListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.TransFrameListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TransFrameListItemBuilderList = ...  # unknown typename


class DrawingPartBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder`.  
    
    This class is used to define a drawing part in Ship Section Drawing command, in this case user can define 
    the drawing part manually as he want.
    Originally, we use a :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilder` class and a list of :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder` 
    and the command will calculate the arrangement (like how many drawing parts/draw sheets need to create and which view in which sheet ) 
    automatically. User can't define which view in which sheet.
    
    In this project we make user has ability to define the arrangement in a tree like
    Drawing Part1
    |- Drawing Sheet1
    |-View1
    |-View2
    |- Drawing Sheet2
    |- View3
    |- View4
    Drawing Part2
    | - Drawing Sheet1
    |- View5
    |- View6
    
    So we add :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder` and :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` between them and make them has structure as below:
    :py:class:`NXOpen.Features.ShipDesign.SectionDrawingBuilder`
    :py:class:`NXOpen.Features.ShipDesign.DrawingPartBuilder`
    :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder`
    :py:class:`NXOpen.Features.ShipDesign.SectionViewBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.SectionDrawingBuilder.CreateDrawingPartBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def CreateDrawingSheetBuilder(self, drawingSheet: NXOpen.Drawings.DrawingSheet) -> DrawingSheetBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder`  
        
        Signature ``CreateDrawingSheetBuilder(drawingSheet)`` 
        
        :param drawingSheet: 
        :type drawingSheet: :py:class:`NXOpen.Drawings.DrawingSheet` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DrawingName: str = ...
    """
    Returns or sets  the drawing name 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingName`` 
    
    :param drawingName: 
    :type drawingName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DrawingSheetList: DrawingSheetBuilderList = ...
    """
    Returns  the drawing sheet list 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingSheetList`` 
    
    :returns:  all drawing sheets in this part  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilderList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: DrawingPartBuilder = ...  # unknown typename


class FrameBarOutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.FrameBarOut` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateFrameBarOutBuilder`
    
    .. versionadded:: NX5.0.0
    """
    ConfigFile: str = ...
    """
    Returns or sets  the config file name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConfigFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    OutputFile: str = ...
    """
    Returns or sets  the output file name.  
    
    <hr>
    
    Getter Method
    
    Signature ``OutputFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: FrameBarOutBuilder = ...  # unknown typename


class RemoveSplitBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.RemoveSplitBuilder`.  
    
    This class is for removing split features.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateRemoveSplitBuilder`
    
    .. versionadded:: NX8.0.0
    """
    ComponentSelection: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the components, which has the split feature, to be removed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SplitFeatureGroup: NXOpen.Features.Feature = ...
    """
    Returns or sets  the split feature group.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitFeatureGroup`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SplitFeatureGroup`` 
    
    :param tSplitFeatureGroup: 
    :type tSplitFeatureGroup: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: RemoveSplitBuilder = ...  # unknown typename


class SteelDistribution(NXOpen.Features.BodyFeature):
    """
    Represents a steel distribution feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SteelDistributionBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: SteelDistribution = ...  # unknown typename


class SmartRuleBuilder(FeatureParmsBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SmartRule` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateSmartRuleBuilder`
    
    .. versionadded:: NX8.0.0
    """
    RuleFeatures: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the features as smart rule inputs 
    
    <hr>
    
    Getter Method
    
    Signature ``RuleFeatures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: SmartRuleBuilder = ...  # unknown typename


class BulkHeads(NXOpen.Features.BodyFeature):
    """
    Represents a bulk head feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.BulkHeadsBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: BulkHeads = ...  # unknown typename


class EndCut(NXOpen.Features.BodyFeature):
    """
    Represents an end cut feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.EndCutBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: EndCut = ...  # unknown typename


class OrientationDefinition(NXOpen.Features.Feature):
    """
    Represents a Orientation SubObject.  
    
    This object is used to define the web orientation for stiffeners. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: OrientationDefinition = ...  # unknown typename


class PinJigBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.PinJig` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreatePinJigBuilder`
    
    .. versionadded:: NX10.0.0
    """
    AdditionalStructures: NXOpen.ScCollector = ...
    """
    Returns  the additional structures connected to the plates.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdditionalStructures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DrawingSuffixName: str = ...
    """
    Returns or sets  the suffix name of Pinjig drawing 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingSuffixName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingSuffixName`` 
    
    :param drawingSuffixName: 
    :type drawingSuffixName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
    """
    OrientationCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the orientation csys that defines the final orientation of the plates.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationCsys`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
    """
    PinJigData: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the Pinjig data defined in the Pinjig parameter spreadsheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``PinJigData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Plates: NXOpen.ScCollector = ...
    """
    Returns  the plates to position on the Pinijg.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plates`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    XDirectionEdge: NXOpen.SelectEdge = ...
    """
    Returns  the edge from the plates whose tangent should be used to define the x direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDirectionEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: PinJigBuilder = ...  # unknown typename


class ShellExpansion(NXOpen.Features.Feature):
    """
    Represents a shell expansion feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ShellExpansionBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: ShellExpansion = ...  # unknown typename


class ManufacturingAssemblyNavigatorBuilderContainerTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManufacturingAssemblyNavigatorBuilderContainerType():
    """
    Container Type Structure or Weld 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Structure", "Structure Container"
       "Weld", "Weld Container"
    """
    Structure = 0  # ManufacturingAssemblyNavigatorBuilderContainerTypeMemberType
    Weld = 1  # ManufacturingAssemblyNavigatorBuilderContainerTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManufacturingAssemblyNavigatorBuilderOrientationType():
    """
    Container Orientation Types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Aft", "Aft Orientation"
       "Starboard", "Starboard Orientation"
       "Up", "Up Orientation"
       "Forward", "Forward Orientation"
       "Port", "Port Orientation"
       "Down", "Down Orientation"
       "Custom", "Custom Orientation"
    """
    Aft = 0  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
    Starboard = 1  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
    Up = 2  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
    Forward = 3  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
    Port = 4  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
    Down = 5  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
    Custom = 6  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManufacturingAssemblyNavigatorBuilder(NXOpen.Builder):
    """
    This class is used to define Manufacturing Assembly Structure.  
    
    This is accomplished by creating
    manufacturing containers.  These containers are part occurences except in 4GD where there are
    Partitions.  Each container owns a set of manufacturing parts and containers which
    define a manufacturing assembly.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateManufacturingAssemblyNavigatorBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class ContainerType():
        """
        Container Type Structure or Weld 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Structure", "Structure Container"
           "Weld", "Weld Container"
        """
        Structure = 0  # ManufacturingAssemblyNavigatorBuilderContainerTypeMemberType
        Weld = 1  # ManufacturingAssemblyNavigatorBuilderContainerTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationType():
        """
        Container Orientation Types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Aft", "Aft Orientation"
           "Starboard", "Starboard Orientation"
           "Up", "Up Orientation"
           "Forward", "Forward Orientation"
           "Port", "Port Orientation"
           "Down", "Down Orientation"
           "Custom", "Custom Orientation"
        """
        Aft = 0  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
        Starboard = 1  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
        Up = 2  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
        Forward = 3  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
        Port = 4  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
        Down = 5  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
        Custom = 6  # ManufacturingAssemblyNavigatorBuilderOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DistributeWelds(self, containerOccTag: NXOpen.NXObject) -> None:
        """
        Move the weld components to the lowest common parent of the
        2 welded parts 
        
        Signature ``DistributeWelds(containerOccTag)`` 
        
        :param containerOccTag: 
        :type containerOccTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def RemoveComponent(self, containerOccTag: NXOpen.NXObject) -> None:
        """
        Remove a container part from the assembly
        
        Signature ``RemoveComponent(containerOccTag)`` 
        
        :param containerOccTag: 
        :type containerOccTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def CreateChild(self, containerOccTag: NXOpen.NXObject, containerType: ManufacturingAssemblyNavigatorBuilderContainerType) -> NXOpen.NXObject:
        """
        Create a child container  
        
        Signature ``CreateChild(containerOccTag, containerType)`` 
        
        :param containerOccTag: 
        :type containerOccTag: :py:class:`NXOpen.NXObject` 
        :param containerType: 
        :type containerType: :py:class:`NXOpen.Features.ShipDesign.ManufacturingAssemblyNavigatorBuilderContainerType` 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def CreateMasterContainer(self, containerName: str) -> NXOpen.NXObject:
        """
        Create a master manufacturing container  
        
        Signature ``CreateMasterContainer(containerName)`` 
        
        :param containerName: 
        :type containerName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def MoveComponents(self, containerOccTag: NXOpen.NXObject, partOccsToMove: 'list[NXOpen.NXObject]') -> None:
        """
        Move components to the container 
        
        Signature ``MoveComponents(containerOccTag, partOccsToMove)`` 
        
        :param containerOccTag: 
        :type containerOccTag: :py:class:`NXOpen.NXObject` 
        :param partOccsToMove: 
        :type partOccsToMove: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetOrientation(self, containerOccTag: NXOpen.NXObject, orientationType: ManufacturingAssemblyNavigatorBuilderOrientationType) -> None:
        """
        Set the container orientation
        
        Signature ``SetOrientation(containerOccTag, orientationType)`` 
        
        :param containerOccTag: 
        :type containerOccTag: :py:class:`NXOpen.NXObject` 
        :param orientationType: 
        :type orientationType: :py:class:`NXOpen.Features.ShipDesign.ManufacturingAssemblyNavigatorBuilderOrientationType` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetOrientationUpFace(self, containerOccTag: NXOpen.NXObject, upFace: NXOpen.TaggedObject) -> None:
        """
        Set the container orientation up face
        
        Signature ``SetOrientationUpFace(containerOccTag, upFace)`` 
        
        :param containerOccTag: 
        :type containerOccTag: :py:class:`NXOpen.NXObject` 
        :param upFace:  the normal of this face will be used for orientation 
        :type upFace: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def ExportToXML(self, masterContainerPartOccTag: NXOpen.NXObject) -> None:
        """
        Export the assembly structure to an XML file 
        
        Signature ``ExportToXML(masterContainerPartOccTag)`` 
        
        :param masterContainerPartOccTag: 
        :type masterContainerPartOccTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetManufacturingAttribute(self, componentTag: NXOpen.NXObject, attrName: str, attrValue: str) -> None:
        """
        Set a string manufacturing attribute on a component
        
        Signature ``SetManufacturingAttribute(componentTag, attrName, attrValue)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        :param attrName: 
        :type attrName: str 
        :param attrValue: 
        :type attrValue: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetContainerName(self, componentTag: NXOpen.NXObject) -> None:
        """
        Set the name of a container
        
        Signature ``SetContainerName(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetContainerMass(self, componentTag: NXOpen.NXObject) -> None:
        """
        Set a container mass value
        
        Signature ``SetContainerMass(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetContainerCenterOfGravity(self, componentTag: NXOpen.NXObject) -> None:
        """
        Set a container center of gravity value
        
        Signature ``SetContainerCenterOfGravity(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetContainerWeldLength(self, componentTag: NXOpen.NXObject) -> None:
        """
        Set a container weld length value
        
        Signature ``SetContainerWeldLength(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def CreateCustomView(self, componentTag: NXOpen.NXObject) -> None:
        """
        Create a custom view in the target container
        
        Signature ``CreateCustomView(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def SetNavigatorRootComponent(self, componentTag: NXOpen.NXObject) -> None:
        """
        Set the root component of the navigator
        
        Signature ``SetNavigatorRootComponent(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    Null: ManufacturingAssemblyNavigatorBuilder = ...  # unknown typename


class SelectPartBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SelectPartBuilderTypes():
    """
    Type. 
    Section type means the basic design elements in speicified ship section will be selected.
    Frame type means specified basic design elements will be selected. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Section", " - "
       "Frame", " - "
    """
    Section = 0  # SelectPartBuilderTypesMemberType
    Frame = 1  # SelectPartBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SelectPartBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.SelectPartBuilder`.  
    
    This class is to select ship basic design part. 
    
    .. versionadded:: NX11.0.0
    """
    
    class Types():
        """
        Type. 
        Section type means the basic design elements in speicified ship section will be selected.
        Frame type means specified basic design elements will be selected. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Section", " - "
           "Frame", " - "
        """
        Section = 0  # SelectPartBuilderTypesMemberType
        Frame = 1  # SelectPartBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSectionBlockParts(self, sectionParts: 'list[str]') -> None:
        """
        The section block part file name.  
        
        Signature ``SetSectionBlockParts(sectionParts)`` 
        
        :param sectionParts: 
        :type sectionParts: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetFrameParts(self, framePartFilenames: 'list[str]') -> None:
        """
        Set frame part names.  
        
        Signature ``SetFrameParts(framePartFilenames)`` 
        
        :param framePartFilenames: 
        :type framePartFilenames: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    SectionFrameType: SelectPartBuilderTypes = ...
    """
    Returns or sets  the select type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionFrameType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SelectPartBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionFrameType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.SelectPartBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: SelectPartBuilder = ...  # unknown typename


class StiffenerBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderTypes():
    """
    the feature type:  Stiffener or Edge Reinforcement 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Stiffener", "Stiffener type"
       "EdgeReinforcement", "Edge Reinforcement type"
       "AdoptStiffener", "Adoption Stiffener type"
       "AdoptEdgeReinforcement", "Adoption Edge Reinforcement type"
       "StiffenerBySupport", "Stiffener By Support type"
    """
    Stiffener = 0  # StiffenerBuilderTypesMemberType
    EdgeReinforcement = 1  # StiffenerBuilderTypesMemberType
    AdoptStiffener = 2  # StiffenerBuilderTypesMemberType
    AdoptEdgeReinforcement = 3  # StiffenerBuilderTypesMemberType
    StiffenerBySupport = 4  # StiffenerBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilderMountingMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderMountingMethods():
    """
    the mounting method offset type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoOffset", "No mounting offset"
       "AlongWeb", "Offset stiffener along web direction"
       "FaceNormal", "Offset stiffener along placement face normal"
    """
    NoOffset = 0  # StiffenerBuilderMountingMethodsMemberType
    AlongWeb = 1  # StiffenerBuilderMountingMethodsMemberType
    FaceNormal = 2  # StiffenerBuilderMountingMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilderEdgeReinforcementAlignmentMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderEdgeReinforcementAlignmentMethod():
    """
    the edge reinforcement alignment method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Center", "Center the Edge Reinforcement on the selected edge"
       "GuideEdge", "Place the end of the Edge Reinforcement on the selected edge"
       "OppositeGuide", "Place the end of the Edge Reinforcement on the edge opposite the selected edge"
    """
    Center = 0  # StiffenerBuilderEdgeReinforcementAlignmentMethodMemberType
    GuideEdge = 1  # StiffenerBuilderEdgeReinforcementAlignmentMethodMemberType
    OppositeGuide = 2  # StiffenerBuilderEdgeReinforcementAlignmentMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilderEndCutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderEndCutTypes():
    """
    this specifies how the end cuts are applied 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No end cuts are applied"
       "Symmetric", "The same end cut is applied to both ends"
       "TwoSided", "Each end has different end cuts"
    """
    NotSet = 0  # StiffenerBuilderEndCutTypesMemberType
    Symmetric = 1  # StiffenerBuilderEndCutTypesMemberType
    TwoSided = 2  # StiffenerBuilderEndCutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilderOrientationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderOrientationMethod():
    """
    The stiffener orientation method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceNormal", "Align stiffener with face normal"
       "Vector", "Align stiffener with vector"
       "DatumCSYS", "Align stiffener with one or more coordinate systems"
    """
    FaceNormal = 0  # StiffenerBuilderOrientationMethodMemberType
    Vector = 1  # StiffenerBuilderOrientationMethodMemberType
    DatumCSYS = 2  # StiffenerBuilderOrientationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilderKnuckleOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderKnuckleOptions():
    """
    the knuckle option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No special handling for knuckles"
       "Split", "Split the stiffener at knuckle points"
       "Bend", "Bend at the knuckle points"
    """
    NotSet = 0  # StiffenerBuilderKnuckleOptionsMemberType
    Split = 1  # StiffenerBuilderKnuckleOptionsMemberType
    Bend = 2  # StiffenerBuilderKnuckleOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilderAttachmentOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderAttachmentOption():
    """
    The stiffener attachment plate option
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inferred", "Infer the plate on which to attach the stiffener"
       "Override", "Use the selected attachment plate on which to attach the stiffener"
    """
    Inferred = 0  # StiffenerBuilderAttachmentOptionMemberType
    Override = 1  # StiffenerBuilderAttachmentOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilderEdgeReinforcementPlacementMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StiffenerBuilderEdgeReinforcementPlacementMethods():
    """
    The edge reinforcement placement method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OnEdge", "Attach the edge reinforcement to the edge"
       "OnFace", "Attach the edge reinforcement to the adajacent face"
    """
    OnEdge = 0  # StiffenerBuilderEdgeReinforcementPlacementMethodsMemberType
    OnFace = 1  # StiffenerBuilderEdgeReinforcementPlacementMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StiffenerBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.Stiffener` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateStiffenerBuilder`
    
    Default values.
    
    =====================================================  ==========================================
    Property                                               Value
    =====================================================  ==========================================
    AddNeatTrim                                            0 
    -----------------------------------------------------  ------------------------------------------
    AngularTolerance                                       0.5 
    -----------------------------------------------------  ------------------------------------------
    AttachmentPlateOption                                  Inferred 
    -----------------------------------------------------  ------------------------------------------
    DistanceTolerance                                      0.0254 
    -----------------------------------------------------  ------------------------------------------
    EdgeReinforcementAlignment                             Center 
    -----------------------------------------------------  ------------------------------------------
    EndCutType                                             None 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.ConnectionType                               Connected 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.DraftAngle.Value                             0 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.DraftOffset.Value                            0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.DraftType                                    Trim 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.LimitType                                    Value 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.Offset.Value                                 0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.SelectionType                                FacesWithAttributes 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.ShearAngle.Value                             0 
    -----------------------------------------------------  ------------------------------------------
    EndEndCut.TiltAngle.Value                              0 
    -----------------------------------------------------  ------------------------------------------
    EndLimit.LimitMethod                                   Value 
    -----------------------------------------------------  ------------------------------------------
    EndLimit.LimitValue.Value                              0 
    -----------------------------------------------------  ------------------------------------------
    FaceOffset.Value                                       0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    IncludeRelief                                          1 
    -----------------------------------------------------  ------------------------------------------
    KnuckleOption                                          None 
    -----------------------------------------------------  ------------------------------------------
    MountingAngle.Value                                    0 
    -----------------------------------------------------  ------------------------------------------
    MountingMethod                                         NoOffset 
    -----------------------------------------------------  ------------------------------------------
    OrientType                                             FaceNormal 
    -----------------------------------------------------  ------------------------------------------
    OrientationAngleRule                                   RightHand 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.MeasureAngles             NormaltoCurve 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.ShowSurfaceAngles         0 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.ShowTwistRate             0 
    -----------------------------------------------------  ------------------------------------------
    OrientationDefinitionBuilder.ShowWebAngles             0 
    -----------------------------------------------------  ------------------------------------------
    PathOffset.Value                                       0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StiffenerBySupportPathData.LengthParams.Value          300 (millimeters part), 100 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StiffenerBySupportPathData.OrientationBySupport        0 
    -----------------------------------------------------  ------------------------------------------
    StockData.AnchorPoint                                  0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateHeight.Value                            50 (millimeters part), 2 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.KnuckleRatio                  3.0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.KnuckleSmoothAngle            3.0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.MaterialOption                0 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.RestrictThicknessToMaterial   true 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.ThickenOption                 SingleSided 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    -----------------------------------------------------  ------------------------------------------
    StockData.PlateStockData.ThicknessSourceOption         List 
    -----------------------------------------------------  ------------------------------------------
    StockData.SectionType                                  Profile 
    =====================================================  ==========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        the feature type:  Stiffener or Edge Reinforcement 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Stiffener", "Stiffener type"
           "EdgeReinforcement", "Edge Reinforcement type"
           "AdoptStiffener", "Adoption Stiffener type"
           "AdoptEdgeReinforcement", "Adoption Edge Reinforcement type"
           "StiffenerBySupport", "Stiffener By Support type"
        """
        Stiffener = 0  # StiffenerBuilderTypesMemberType
        EdgeReinforcement = 1  # StiffenerBuilderTypesMemberType
        AdoptStiffener = 2  # StiffenerBuilderTypesMemberType
        AdoptEdgeReinforcement = 3  # StiffenerBuilderTypesMemberType
        StiffenerBySupport = 4  # StiffenerBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MountingMethods():
        """
        the mounting method offset type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoOffset", "No mounting offset"
           "AlongWeb", "Offset stiffener along web direction"
           "FaceNormal", "Offset stiffener along placement face normal"
        """
        NoOffset = 0  # StiffenerBuilderMountingMethodsMemberType
        AlongWeb = 1  # StiffenerBuilderMountingMethodsMemberType
        FaceNormal = 2  # StiffenerBuilderMountingMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EdgeReinforcementAlignmentMethod():
        """
        the edge reinforcement alignment method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Center", "Center the Edge Reinforcement on the selected edge"
           "GuideEdge", "Place the end of the Edge Reinforcement on the selected edge"
           "OppositeGuide", "Place the end of the Edge Reinforcement on the edge opposite the selected edge"
        """
        Center = 0  # StiffenerBuilderEdgeReinforcementAlignmentMethodMemberType
        GuideEdge = 1  # StiffenerBuilderEdgeReinforcementAlignmentMethodMemberType
        OppositeGuide = 2  # StiffenerBuilderEdgeReinforcementAlignmentMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndCutTypes():
        """
        this specifies how the end cuts are applied 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No end cuts are applied"
           "Symmetric", "The same end cut is applied to both ends"
           "TwoSided", "Each end has different end cuts"
        """
        NotSet = 0  # StiffenerBuilderEndCutTypesMemberType
        Symmetric = 1  # StiffenerBuilderEndCutTypesMemberType
        TwoSided = 2  # StiffenerBuilderEndCutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationMethod():
        """
        The stiffener orientation method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceNormal", "Align stiffener with face normal"
           "Vector", "Align stiffener with vector"
           "DatumCSYS", "Align stiffener with one or more coordinate systems"
        """
        FaceNormal = 0  # StiffenerBuilderOrientationMethodMemberType
        Vector = 1  # StiffenerBuilderOrientationMethodMemberType
        DatumCSYS = 2  # StiffenerBuilderOrientationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class KnuckleOptions():
        """
        the knuckle option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No special handling for knuckles"
           "Split", "Split the stiffener at knuckle points"
           "Bend", "Bend at the knuckle points"
        """
        NotSet = 0  # StiffenerBuilderKnuckleOptionsMemberType
        Split = 1  # StiffenerBuilderKnuckleOptionsMemberType
        Bend = 2  # StiffenerBuilderKnuckleOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AttachmentOption():
        """
        The stiffener attachment plate option
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inferred", "Infer the plate on which to attach the stiffener"
           "Override", "Use the selected attachment plate on which to attach the stiffener"
        """
        Inferred = 0  # StiffenerBuilderAttachmentOptionMemberType
        Override = 1  # StiffenerBuilderAttachmentOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EdgeReinforcementPlacementMethods():
        """
        The edge reinforcement placement method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OnEdge", "Attach the edge reinforcement to the edge"
           "OnFace", "Attach the edge reinforcement to the adajacent face"
        """
        OnEdge = 0  # StiffenerBuilderEdgeReinforcementPlacementMethodsMemberType
        OnFace = 1  # StiffenerBuilderEdgeReinforcementPlacementMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetShowMigratedBody(self) -> bool:
        """
        Gets the show migrated body flag.  
        
        Reserved for administrator use only. 
        
        Signature ``GetShowMigratedBody()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.5.3
        
        License requirements: None.
        """
        ...
    
    
    def SetShowMigratedBody(self, showMigratedBody: bool) -> None:
        """
        Sets the show migrated body flag.  
        
        Reserved for administrator use only.
        
        Signature ``SetShowMigratedBody(showMigratedBody)`` 
        
        :param showMigratedBody: 
        :type showMigratedBody: bool 
        
        .. versionadded:: NX8.5.3
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def CreatePath(self) -> tuple:
        """
        Creates path curves for use by the orientation definition object 
        
        Signature ``CreatePath()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (curves, faces). curves is a list of :py:class:`NXOpen.NXObject`.   The curves defining the path of the profile that is being oriented. faces is a list of :py:class:`NXOpen.DisplayableObject`.   The faces/datums defining the placement of the profile that is being oriented. 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DestroyPath(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Destroy the path curves 
        
        Signature ``DestroyPath(curves)`` 
        
        :param curves:  The curves defining the path of the profile that is being oriented.  
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def GetStiffenerBySupportBoundaryAttachedPlate(self, boundary: NXOpen.Body) -> NXOpen.Body:
        """
        Returns the plate body where the stiffener by support boundary is attached.  
        
        Signature ``GetStiffenerBySupportBoundaryAttachedPlate(boundary)`` 
        
        :param boundary: 
        :type boundary: :py:class:`NXOpen.Body` 
        :returns: 
        :rtype: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AddNeatTrim: bool = ...
    """
    Returns or sets  the option to add neat trim to plate edge reinforcements.  
    
    Note this only applies to plates. 
    
    <hr>
    
    Getter Method
    
    Signature ``AddNeatTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddNeatTrim`` 
    
    :param addNeatTrim: 
    :type addNeatTrim: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    AdoptionAnchorPointList: NXOpen.NXObjectList = ...
    """
    Returns  the adoption anchor point list.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionAnchorPointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AdoptionBaseFaces: NXOpen.ScCollector = ...
    """
    Returns  the adoption base faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionBaseFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AdoptionBodies: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the adoption bodies, which are used to create multiple adoption stiffeners.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AdoptionEndCutFaces1: NXOpen.ScCollector = ...
    """
    Returns  the adoption end cut 1 faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionEndCutFaces1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AdoptionEndCutFaces2: NXOpen.ScCollector = ...
    """
    Returns  the adoption end cut 2 faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionEndCutFaces2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AdoptionMoldFaces: NXOpen.ScCollector = ...
    """
    Returns  the adoption mold faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionMoldFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AdoptionOpposingMoldFaces: NXOpen.ScCollector = ...
    """
    Returns  the adoption opposing mold faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionOpposingMoldFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AdoptionTopFaces: NXOpen.ScCollector = ...
    """
    Returns  the adoption top faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionTopFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance (degrees) 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ApplyFlangeSetback: bool = ...
    """
    Returns or sets  the flange set back option for stiffener by support, which indicates if the flange set back should be applied or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyFlangeSetback`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyFlangeSetback`` 
    
    :param applyFlangeSetback: 
    :type applyFlangeSetback: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ApplyWebSetback: bool = ...
    """
    Returns or sets  the web set back option for stiffener by support, which indicates if the web set back should be applied or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyWebSetback`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyWebSetback`` 
    
    :param applyWebSetback: 
    :type applyWebSetback: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    AttachmentPlate: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the selected attachment plate 
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentPlate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AttachmentPlateOption: StiffenerBuilderAttachmentOption = ...
    """
    Returns or sets  the attachment plate option 
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentPlateOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderAttachmentOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttachmentPlateOption`` 
    
    :param attachmentPlateOption: 
    :type attachmentPlateOption: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderAttachmentOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ConnectAngle: float = ...
    """
    Returns or sets  the connect angle of stiffener by support in degrees, negative value is not allowed 
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConnectAngle`` 
    
    :param connectAngle: 
    :type connectAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance (part units) 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EdgeReinforcementAlignment: StiffenerBuilderEdgeReinforcementAlignmentMethod = ...
    """
    Returns or sets  the edge reinforcement alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``EdgeReinforcementAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderEdgeReinforcementAlignmentMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgeReinforcementAlignment`` 
    
    :param edgeReinforcementAlignment: 
    :type edgeReinforcementAlignment: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderEdgeReinforcementAlignmentMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EdgeReinforcementPlacementMethod: StiffenerBuilderEdgeReinforcementPlacementMethods = ...
    """
    Returns or sets  the edge reinforcement placement method 
    
    <hr>
    
    Getter Method
    
    Signature ``EdgeReinforcementPlacementMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderEdgeReinforcementPlacementMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgeReinforcementPlacementMethod`` 
    
    :param edgeReinforcementPlacementMethod: 
    :type edgeReinforcementPlacementMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderEdgeReinforcementPlacementMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EndCutType: StiffenerBuilderEndCutTypes = ...
    """
    Returns or sets  the number of end cuts to apply 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutType`` 
    
    :param endcutType: 
    :type endcutType: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EndEndCut: EndCutBuilder = ...
    """
    Returns  the end end cut 
    
    <hr>
    
    Getter Method
    
    Signature ``EndEndCut`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndLimit: StiffenerLimitBuilder = ...
    """
    Returns  the end path limit 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerLimitBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FaceOffset: NXOpen.Expression = ...
    """
    Returns  the face offset expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FaceReverseDirection: bool = ...
    """
    Returns or sets  the face reverse direction flag 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceReverseDirection`` 
    
    :param faceReverseDirection: 
    :type faceReverseDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    IncludeRelief: bool = ...
    """
    Returns or sets  the include relief option 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeRelief`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeRelief`` 
    
    :param includeRelief: 
    :type includeRelief: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    KnuckleOption: StiffenerBuilderKnuckleOptions = ...
    """
    Returns or sets  the stiffener knuckle option 
    
    <hr>
    
    Getter Method
    
    Signature ``KnuckleOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderKnuckleOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KnuckleOption`` 
    
    :param knuckleOption: 
    :type knuckleOption: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderKnuckleOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    MountingAngle: NXOpen.Expression = ...
    """
    Returns  the mounting angle expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MountingAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MountingMethod: StiffenerBuilderMountingMethods = ...
    """
    Returns or sets  the mounting method 
    
    <hr>
    
    Getter Method
    
    Signature ``MountingMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderMountingMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MountingMethod`` 
    
    :param mountingMethod: 
    :type mountingMethod: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderMountingMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    OrientCsys: NXOpen.Features.SelectDatumCsysList = ...
    """
    Returns  the orientation coordinate systems (when OrientType is DatumCSys 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectDatumCsysList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientType: StiffenerBuilderOrientationMethod = ...
    """
    Returns or sets  the stiffener orientation type 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderOrientationMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientType`` 
    
    :param orientType: 
    :type orientType: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderOrientationMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OrientVector: NXOpen.Direction = ...
    """
    Returns or sets  the orientation vector (when OrientType is Vector) 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientVector`` 
    
    :param orientVector: 
    :type orientVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OrientationAngleRule: FeatureParmsBuilderOrientationAngleRuleTypes = ...
    """
    Returns or sets  the angle rule to use when measuring angles.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationAngleRule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.FeatureParmsBuilderOrientationAngleRuleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationAngleRule`` 
    
    :param angleRule: 
    :type angleRule: :py:class:`NXOpen.Features.ShipDesign.FeatureParmsBuilderOrientationAngleRuleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    OrientationDefinitionBuilder: OrientationDefinitionBuilder = ...
    """
    Returns  the builder used to define the orientation for the stiffener.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationDefinitionBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PathGeometry: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the path geometry
    
    <hr>
    
    Getter Method
    
    Signature ``PathGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PathOffset: NXOpen.Expression = ...
    """
    Returns  the path offset expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PathOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PathReverseDirection: bool = ...
    """
    Returns or sets  the path reverse direction flag 
    
    <hr>
    
    Getter Method
    
    Signature ``PathReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PathReverseDirection`` 
    
    :param pathReverseDirection: 
    :type pathReverseDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    PlacementGeometry: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the placement geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReferenceDirection: NXOpen.Vector3d = ...
    """
    Returns or sets  the reference direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDirection`` 
    
    :param referenceDirection: 
    :type referenceDirection: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReferencePoint: NXOpen.Point3d = ...
    """
    Returns or sets  the reference point (part units) 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePoint`` 
    
    :param referencePoint: 
    :type referencePoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the ship name builder.  
    
    The ship name builder is used to construct the part name of the structure.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StartEndCut: EndCutBuilder = ...
    """
    Returns  the start end cut 
    
    <hr>
    
    Getter Method
    
    Signature ``StartEndCut`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartLimit: StiffenerLimitBuilder = ...
    """
    Returns  the start path limit 
    
    <hr>
    
    Getter Method
    
    Signature ``StartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerLimitBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffenerBySupportPathData: StiffenerBySupportPathBuilder = ...
    """
    Returns  the path data used to define the support information of the stiffener.  
    
    <hr>
    
    Getter Method
    
    Signature ``StiffenerBySupportPathData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBySupportPathBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StockData: StiffenerStockBuilder = ...
    """
    Returns  the stock data 
    
    <hr>
    
    Getter Method
    
    Signature ``StockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerStockBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: StiffenerBuilderTypes = ...
    """
    Returns or sets  the feature type:  Stiffener or Edge Reinforcement 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.StiffenerBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: StiffenerBuilder = ...  # unknown typename


class ShipDesignVersionUpBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipDesignVersionUpBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipDesignVersionUpBuilder`
    
    .. versionadded:: NX9.0.0
    """
    SelectFeatures: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the select features 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFeatures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ShipDesignVersionUpBuilder = ...  # unknown typename


class PillarBuilderStockSectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarBuilderStockSectionType():
    """
    SpreadSheet Type  Profile or BuiltUp 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Profile", "Profile Stock"
       "BuiltUp", "Built Up Stock"
    """
    Profile = 0  # PillarBuilderStockSectionTypeMemberType
    BuiltUp = 1  # PillarBuilderStockSectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarBuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarBuilderCreationMethod():
    """
    Method used to create the support feature. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TwoPlanesandLines", " - "
       "SpecifyLine", " - "
       "SpecifyCsys", " - "
       "Adoption", " - "
       "Structure", " - "
       "Points", " - "
    """
    TwoPlanesandLines = 0  # PillarBuilderCreationMethodMemberType
    SpecifyLine = 1  # PillarBuilderCreationMethodMemberType
    SpecifyCsys = 2  # PillarBuilderCreationMethodMemberType
    Adoption = 3  # PillarBuilderCreationMethodMemberType
    Structure = 4  # PillarBuilderCreationMethodMemberType
    Points = 5  # PillarBuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarBuilderCapOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarBuilderCapOptions():
    """
    Settings to indicate how the cap is designed. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "TwoSided", " - "
       "Symmetric", " - "
    """
    NotSet = 0  # PillarBuilderCapOptionsMemberType
    TwoSided = 1  # PillarBuilderCapOptionsMemberType
    Symmetric = 2  # PillarBuilderCapOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarBuilderEndTypeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarBuilderEndTypeOptions():
    """
    this specifies end type option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No end cuts are applied"
       "Endcut", "The same end cut is applied to both ends"
       "Cap", "Each end has different end cuts"
    """
    NotSet = 0  # PillarBuilderEndTypeOptionsMemberType
    Endcut = 1  # PillarBuilderEndTypeOptionsMemberType
    Cap = 2  # PillarBuilderEndTypeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarBuilderEndCutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarBuilderEndCutTypes():
    """
    this specifies how the end cuts are applied 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No end cuts are applied"
       "Symmetric", "The same end cut is applied to both ends"
       "TwoSided", "Each end has different end cuts"
    """
    NotSet = 0  # PillarBuilderEndCutTypesMemberType
    Symmetric = 1  # PillarBuilderEndCutTypesMemberType
    TwoSided = 2  # PillarBuilderEndCutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarBuilderEndTreatmentTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PillarBuilderEndTreatmentTypes():
    """
    this specifies how the end is treated 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Endcut", "end cuts are applied"
       "Cap", "caps are applied"
    """
    Endcut = 0  # PillarBuilderEndTreatmentTypesMemberType
    Cap = 1  # PillarBuilderEndTreatmentTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PillarBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.Pillar` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreatePillarBuilder`
    
    Default values.
    
    =============================================  ===============================================
    Property                                       Value
    =============================================  ===============================================
    AngleTolerance                                 0.5 (millimeters part), 0.5 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    AngularDim.Value                               0 
    ---------------------------------------------  -----------------------------------------------
    DistanceTolerance                              0.0254 (millimeters part), 0.001 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.KnuckleRatio                  3.0 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.KnuckleSmoothAngle            3.0 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.MaterialOption                0 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.OppositeThickness.Value       0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.RestrictThicknessToMaterial   true 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.ThickenOption                 SingleSided 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.Thickness.Value               10 (millimeters part), 0.5 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    EndCapPlateStock.ThicknessSourceOption         List 
    ---------------------------------------------  -----------------------------------------------
    EndCapThickness.Value                          0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    EndCutType                                     None 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.ConnectionType                       Connected 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.DraftAngle.Value                     0 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.DraftOffset.Value                    0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.DraftType                            Trim 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.LimitType                            Value 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.Offset.Value                         0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.SelectionType                        FacesWithAttributes 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.ShearAngle.Value                     0 
    ---------------------------------------------  -----------------------------------------------
    EndEndCut.TiltAngle.Value                      0 
    ---------------------------------------------  -----------------------------------------------
    EndLimit.LimitMethod                           Value 
    ---------------------------------------------  -----------------------------------------------
    EndLimit.LimitValue.Value                      0 
    ---------------------------------------------  -----------------------------------------------
    EndOffset.Value                                0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    Line1Offset.Value                              0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    Line2Offset.Value                              0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    PlacementMethod                                TwoPlanesandLines 
    ---------------------------------------------  -----------------------------------------------
    SectionType                                    Profile 
    ---------------------------------------------  -----------------------------------------------
    StartCapThickness.Value                        0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    StartOffset.Value                              0 (millimeters part), 0 (inches part) 
    ---------------------------------------------  -----------------------------------------------
    SupportCapOptions                              None 
    =============================================  ===============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class StockSectionType():
        """
        SpreadSheet Type  Profile or BuiltUp 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Profile", "Profile Stock"
           "BuiltUp", "Built Up Stock"
        """
        Profile = 0  # PillarBuilderStockSectionTypeMemberType
        BuiltUp = 1  # PillarBuilderStockSectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreationMethod():
        """
        Method used to create the support feature. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TwoPlanesandLines", " - "
           "SpecifyLine", " - "
           "SpecifyCsys", " - "
           "Adoption", " - "
           "Structure", " - "
           "Points", " - "
        """
        TwoPlanesandLines = 0  # PillarBuilderCreationMethodMemberType
        SpecifyLine = 1  # PillarBuilderCreationMethodMemberType
        SpecifyCsys = 2  # PillarBuilderCreationMethodMemberType
        Adoption = 3  # PillarBuilderCreationMethodMemberType
        Structure = 4  # PillarBuilderCreationMethodMemberType
        Points = 5  # PillarBuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CapOptions():
        """
        Settings to indicate how the cap is designed. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "TwoSided", " - "
           "Symmetric", " - "
        """
        NotSet = 0  # PillarBuilderCapOptionsMemberType
        TwoSided = 1  # PillarBuilderCapOptionsMemberType
        Symmetric = 2  # PillarBuilderCapOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndTypeOptions():
        """
        this specifies end type option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No end cuts are applied"
           "Endcut", "The same end cut is applied to both ends"
           "Cap", "Each end has different end cuts"
        """
        NotSet = 0  # PillarBuilderEndTypeOptionsMemberType
        Endcut = 1  # PillarBuilderEndTypeOptionsMemberType
        Cap = 2  # PillarBuilderEndTypeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndCutTypes():
        """
        this specifies how the end cuts are applied 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No end cuts are applied"
           "Symmetric", "The same end cut is applied to both ends"
           "TwoSided", "Each end has different end cuts"
        """
        NotSet = 0  # PillarBuilderEndCutTypesMemberType
        Symmetric = 1  # PillarBuilderEndCutTypesMemberType
        TwoSided = 2  # PillarBuilderEndCutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndTreatmentTypes():
        """
        this specifies how the end is treated 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Endcut", "end cuts are applied"
           "Cap", "caps are applied"
        """
        Endcut = 0  # PillarBuilderEndTreatmentTypesMemberType
        Cap = 1  # PillarBuilderEndTreatmentTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetShowMigratedBody(self) -> bool:
        """
        Gets the show migrated body flag.  
        
        Reserved for administrator use only. 
        
        Signature ``GetShowMigratedBody()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.5.3
        
        License requirements: None.
        """
        ...
    
    
    def SetShowMigratedBody(self, showMigratedBody: bool) -> None:
        """
        Sets the show migrated body flag.  
        
        Reserved for administrator use only.
        
        Signature ``SetShowMigratedBody(showMigratedBody)`` 
        
        :param showMigratedBody: 
        :type showMigratedBody: bool 
        
        .. versionadded:: NX8.5.3
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def CreatePointPairBuilder(self) -> PointPairBuilder:
        """
        Creates a :py:class:`NXOpen.Features.ShipDesign.PointPairBuilder`.  
        
        Signature ``CreatePointPairBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.PointPairBuilder` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def PopulateAnchorPointList(self) -> None:
        """
        Update anchor points 
        
        Signature ``PopulateAnchorPointList()`` 
        
        .. versionadded:: NX9.0.3
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableAnchorPointNames(self) -> 'list[str]':
        """
        The list of available anchor points  
        
        Signature ``GetAvailableAnchorPointNames()`` 
        
        :returns:  Array of available anchor point names.
        These names are read from the current reuse sketch   
        :rtype: list of str 
        
        .. versionadded:: NX9.0.3
        
        License requirements: None.
        """
        ...
    
    AdoptionBody: NXOpen.SelectTaggedObject = ...
    """
    Returns  the adoption body.  
    
    (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.Adoption <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method). 
    
    <hr>
    
    Getter Method
    
    Signature ``AdoptionBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AnchorPoint: int = ...
    """
    Returns or sets  the anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPoint`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPoint`` 
    
    :param anchorPoint: 
    :type anchorPoint: int 
    
    .. versionadded:: NX9.0.3
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    AngularDim: NXOpen.Expression = ...
    """
    Returns  the angle that the pillar stock will be rotated about its path from its initial location.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BuiltUpBlock: BuiltUpBlockBuilder = ...
    """
    Returns  the list of Seams 
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BuiltUpBlockBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CoordSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coordinate system (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyCsys <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``CoordSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordSystem`` 
    
    :param coordSystem: 
    :type coordSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction of the pillar.  
    
    Only used when Type is Features.ShipDesign.PillarBuilder.Types.ShipStructure. 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EndCapPlateStock: PlateStockBuilder = ...
    """
    Returns  the plate stock builder, which defines the seam material, grade, and thickness
    
    <hr>
    
    Getter Method
    
    Signature ``EndCapPlateStock`` 
    
    :returns:  Plate Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    EndCapStock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the list of available material attributes.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCapStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndCapThickness: NXOpen.Expression = ...
    """
    Returns  the end cap thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndCapThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndCutType: PillarBuilderEndCutTypes = ...
    """
    Returns or sets  the end cut type Symmetric or TwoSided 
    
    <hr>
    
    Getter Method
    
    Signature ``EndCutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndCutType`` 
    
    :param endcutType: 
    :type endcutType: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndCutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EndEndCut: EndCutBuilder = ...
    """
    Returns  the end end cut 
    
    <hr>
    
    Getter Method
    
    Signature ``EndEndCut`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndLimit: StiffenerLimitBuilder = ...
    """
    Returns  the end path limit 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerLimitBuilder` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    EndOffset: NXOpen.Expression = ...
    """
    Returns  the offset used to determine where the support ends (used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyLine <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` 
    and :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyCsys <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation methods).  
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EndPlane: NXOpen.Plane = ...
    """
    Returns or sets  the end plane (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``EndPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPlane`` 
    
    :param endPlane: 
    :type endPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EndTreatmentType: PillarBuilderEndTreatmentTypes = ...
    """
    Returns or sets  the end treatment type: Endcut or Cap 
    
    <hr>
    
    Getter Method
    
    Signature ``EndTreatmentType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndTreatmentTypes` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndTreatmentType`` 
    
    :param endTreatmentType: 
    :type endTreatmentType: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndTreatmentTypes` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    EndTypeOption: PillarBuilderEndTypeOptions = ...
    """
    Returns or sets  the end type Option 
    
    <hr>
    
    Getter Method
    
    Signature ``EndTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndTypeOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndTypeOption`` 
    
    :param endTypeOption: 
    :type endTypeOption: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndTypeOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    GuideCurve: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select guide curve (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyLine <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IntersectingObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the ship structure to intersect with each other that defines the start of a pillar.  
    
    Only used when Type is Features.ShipDesign.PillarSystemBuilder.Types.ShipStructure. 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectingObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    Line1: NXOpen.SelectTaggedObject = ...
    """
    Returns  the first line (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Line1Offset: NXOpen.Expression = ...
    """
    Returns  the first line offset (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Line2: NXOpen.SelectTaggedObject = ...
    """
    Returns  the second line (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``Line2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Line2Offset: NXOpen.Expression = ...
    """
    Returns  the second line offset (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``Line2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MainStock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the stock used to build the pillar from.  
    
    <hr>
    
    Getter Method
    
    Signature ``MainStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OrientationLine: NXOpen.SelectTaggedObject = ...
    """
    Returns  the orientation line (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyLine <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PlacementMethod: PillarBuilderCreationMethod = ...
    """
    Returns or sets  the placement method used to locate the pillar.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementMethod`` 
    
    :param placementMethod: 
    :type placementMethod: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    PointPairList: NXOpen.NXObjectList = ...
    """
    Returns  the list of pairs of points that define the ends of the pillars.  
    
    Only used when Type is Features.ShipDesign.PillarSystemBuilder.Types.Points. 
    
    <hr>
    
    Getter Method
    
    Signature ``PointPairList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObjectList` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    ReverseEndOffset: bool = ...
    """
    Returns or sets  the reverse end offset (used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyLine <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` 
    and :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyCsys <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation methods).  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseEndOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseEndOffset`` 
    
    :param reverseEndOffset: 
    :type reverseEndOffset: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseLine1Offset: bool = ...
    """
    Returns or sets  the reverse first line offset (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseLine1Offset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseLine1Offset`` 
    
    :param reverseLine1Offset: 
    :type reverseLine1Offset: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseLine2Offset: bool = ...
    """
    Returns or sets  the reverse second line offset (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseLine2Offset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseLine2Offset`` 
    
    :param reverseLine2Offset: 
    :type reverseLine2Offset: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseOrientationDirection: bool = ...
    """
    Returns or sets  the reverse orientation direction  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseOrientationDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseOrientationDirection`` 
    
    :param reverseOrientationDirection: 
    :type reverseOrientationDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseReferenceDirection: bool = ...
    """
    Returns or sets  the reverse reference direction  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseReferenceDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseReferenceDirection`` 
    
    :param reverseReferenceDirection: 
    :type reverseReferenceDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseStartOffset: bool = ...
    """
    Returns or sets  the reverse start offset (used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyLine <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` 
    and :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyCsys <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation methods).  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseStartOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseStartOffset`` 
    
    :param reverseStartOffset: 
    :type reverseStartOffset: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SectionType: PillarBuilderStockSectionType = ...
    """
    Returns or sets  the section type (profile or plate) 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderStockSectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param sectionType: 
    :type sectionType: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderStockSectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ShipNames: ShipNamesBuilder = ...
    """
    Returns  the ship name builder.  
    
    The ship name builder is used to construct the part name of the structure.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipNames`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StartCapPlateStock: PlateStockBuilder = ...
    """
    Returns  the plate stock builder, which defines the seam material, grade, and thickness
    
    <hr>
    
    Getter Method
    
    Signature ``StartCapPlateStock`` 
    
    :returns:  Plate Stock Builder  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateStockBuilder` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    StartCapStock: SteelFeatureSpreadsheetBuilder = ...
    """
    Returns  the list of available material attributes.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartCapStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelFeatureSpreadsheetBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartCapThickness: NXOpen.Expression = ...
    """
    Returns  the start cap thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartCapThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartEndCut: EndCutBuilder = ...
    """
    Returns  the start end cut 
    
    <hr>
    
    Getter Method
    
    Signature ``StartEndCut`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.EndCutBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartLimit: StiffenerLimitBuilder = ...
    """
    Returns  the start path limit 
    
    <hr>
    
    Getter Method
    
    Signature ``StartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StiffenerLimitBuilder` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    StartOffset: NXOpen.Expression = ...
    """
    Returns  the offset used to determine where the support starts (used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyLine <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` 
    and :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.SpecifyCsys <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation methods).  
    
    <hr>
    
    Getter Method
    
    Signature ``StartOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartPlane: NXOpen.Plane = ...
    """
    Returns or sets  the start plane (only used with :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCreationMethod.TwoPlanesandLines <NXOpen.Features.ShipDesign.PillarBuilderCreationMethod>` creation method).  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPlane`` 
    
    :param startPlane: 
    :type startPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    StartTreatmentType: PillarBuilderEndTreatmentTypes = ...
    """
    Returns or sets  the start treatment type: Endcut or Cap 
    
    <hr>
    
    Getter Method
    
    Signature ``StartTreatmentType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndTreatmentTypes` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartTreatmentType`` 
    
    :param startTreatmentType: 
    :type startTreatmentType: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderEndTreatmentTypes` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SupportCapOptions: PillarBuilderCapOptions = ...
    """
    Returns or sets  the support cap options.  
    
    <hr>
    
    Getter Method
    
    Signature ``SupportCapOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCapOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SupportCapOptions`` 
    
    :param supportCapOptions: 
    :type supportCapOptions: :py:class:`NXOpen.Features.ShipDesign.PillarBuilderCapOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: PillarBuilder = ...  # unknown typename


class PenetrationAttachment(NXOpen.Issue.IssueAttachment):
    """
    Represents the Penetration Attachment object.  
    
    Not support KF.
    
    .. versionadded:: NX8.0.0
    """
    Null: PenetrationAttachment = ...  # unknown typename


class Cutout2(NXOpen.Features.BodyFeature):
    """
    Represents a cutout2 feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.Cutout2Builder`
    
    .. versionadded:: NX8.0.0
    """
    Null: Cutout2 = ...  # unknown typename


class PillarSystem(NXOpen.Features.CurveFeature):
    """
    Represents a pillar system feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PillarSystemBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: PillarSystem = ...  # unknown typename


class ShipNamesBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ShipNamesBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ShipNamesBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ShipNamesBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ShipNamesBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ShipNamesBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ShipNamesBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ShipNamesBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ShipNamesBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ShipNamesBuilder, object2: ShipNamesBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ShipNamesBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.ShipNamesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ShipNamesBuilderList = ...  # unknown typename


class ZFrameBuilder(TransFrameBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ZFrameBuilder` 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateZFrameBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: ZFrameBuilder = ...  # unknown typename


class DeckBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DeckBuilderTypes():
    """
    Indicates the method that is being used to define the mold face of the deck. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetBody", "Mold face is being defined by a selected sheet body."
       "Planes", "Mold face is being defined by selected or defined planes."
       "RoundCamber", "Mold face is being defined by a generated round camber shape."
       "StraightCamber", "Mold face is being defined by a generated straight camber shape."
    """
    SheetBody = 0  # DeckBuilderTypesMemberType
    Planes = 1  # DeckBuilderTypesMemberType
    RoundCamber = 2  # DeckBuilderTypesMemberType
    StraightCamber = 3  # DeckBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DeckBuilder(PlateSystemBuilder):
    """
    This class is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.Deck` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateDeckBuilder`
    
    Default values.
    
    ======================  ===========================================
    Property                Value
    ======================  ===========================================
    CamberHeight.Value      500 (millimeters part), 20 (inches part) 
    ----------------------  -------------------------------------------
    CamberOffset.Value      1000 (millimeters part), 40 (inches part) 
    ----------------------  -------------------------------------------
    CenterHeight.Value      6000 (millimeters part), 240 (inches part) 
    ----------------------  -------------------------------------------
    Offset.Value            0 (millimeters part), 0 (inches part) 
    ----------------------  -------------------------------------------
    Primary                 FwdPortToInUp 
    ----------------------  -------------------------------------------
    PrimaryOnReference      FwdPortToInUp 
    ----------------------  -------------------------------------------
    Secondary1              FwdPortToInUp 
    ----------------------  -------------------------------------------
    Secondary1OnReference   FwdPortToInUp 
    ----------------------  -------------------------------------------
    Secondary2              FwdPortToInUp 
    ----------------------  -------------------------------------------
    Secondary2OnReference   FwdPortToInUp 
    ======================  ===========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Indicates the method that is being used to define the mold face of the deck. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetBody", "Mold face is being defined by a selected sheet body."
           "Planes", "Mold face is being defined by selected or defined planes."
           "RoundCamber", "Mold face is being defined by a generated round camber shape."
           "StraightCamber", "Mold face is being defined by a generated straight camber shape."
        """
        SheetBody = 0  # DeckBuilderTypesMemberType
        Planes = 1  # DeckBuilderTypesMemberType
        RoundCamber = 2  # DeckBuilderTypesMemberType
        StraightCamber = 3  # DeckBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CamberHeight: NXOpen.Expression = ...
    """
    Returns  the expression containing the difference in the height of the camber from the center
    of the ship to the hull intersections in the selected plane.  
    
    Only used when type is 
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.RoundCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>` or
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.StraightCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CamberHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CamberOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset from the ends of the camber section in the
    selected plane to the start of the straight portion of the camber shape.  
    
    Only used when type is 
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.StraightCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CamberOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CenterHeight: NXOpen.Expression = ...
    """
    Returns  the expression containing the overall height of the camber shape at the center
    of the ship in the selected plane.  
    
    Only used when type is 
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.RoundCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>` or
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.StraightCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Hull: NXOpen.SelectBody = ...
    """
    Returns  the sheet body that defines the hull shape.  
    
    The hull shape is used to determine
    the ends of the camber shape section. Only used when type is 
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.RoundCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>` or
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.StraightCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Hull`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFacePlane: NXOpen.Plane = ...
    """
    Returns or sets  the plane in which the camber shape is generated.  
    
    Only used when type is 
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.RoundCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>` or
    :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.StraightCamber <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoldFacePlane`` 
    
    :param moldFacePlane: 
    :type moldFacePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    MoldFacePlaneList: PlaneListBuilderList = ...
    """
    Returns  the list of planes defined to define the mold face.  
    
    Each plane defined will create a deck.
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.Planes <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlaneList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlaneListBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFacePlanes: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the planes selected to define the mold face.  
    
    Each plane selected will create a deck. When editing 
    a deck, only a single plane can be selected.            
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.Planes <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFacePlanes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoldFaceSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet body selected to define the mold face.  
    
    Only used when type is :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes.SheetBody <NXOpen.Features.ShipDesign.DeckBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldFaceSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: DeckBuilderTypes = ...
    """
    Returns or sets  the method used to define the mold face of the deck.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.DeckBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: DeckBuilder = ...  # unknown typename


class ShipNamesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class provides the mechanism for defining the names of Basic Design objects
    such as Decks, Bulkheads, Stiffener Systems, etc.  
    
    Each Ship object type (Deck, etc.) has a specific format for the names defined in
    a "recipes" files located at UGII_BASE_DIR/nxship/data/ShipNamesRecipes.xml.
    
    A recipe is composed of two or more "fields". Individual fields are defined via
    a :py:class:`NXOpen.Features.ShipDesign.ShipNameFieldBuilder`object.
    
    .. versionadded:: NX9.0.0
    """
    
    def GetFieldcount(self) -> int:
        """
        Get the number of ShipNameFields in this recipe
        
        Signature ``GetFieldcount()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX9.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetField(self, idx: int) -> ShipNameFieldBuilder:
        """
        Get the ShipNameField at the given index (starting at 0)
        
        Signature ``GetField(idx)`` 
        
        :param idx: 
        :type idx: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipNameFieldBuilder` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ContextAttribute: str = ...
    """
    Returns or sets 
    the Context Attribute value.  
    
    This is the value of the SAW_SUB_NAME part
    attribute added to the newly created / named Ship objects.
    
    <hr>
    
    Getter Method
    
    Signature ``ContextAttribute`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContextAttribute`` 
    
    :param newValue: 
    :type newValue: str 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ShipObjectType: ShipnamesBuilderType = ...
    """
    Returns or sets 
    the Ship object type (Hull, Deck, etc.  
    
    ) for which names will be generated.
    
    <hr>
    
    Getter Method
    
    Signature ``ShipObjectType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ShipnamesBuilderType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShipObjectType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.ShipnamesBuilderType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: ShipNamesBuilder = ...  # unknown typename


class TransitionBuilderTransitionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransitionBuilderTransitionTypes():
    """
    Transition Type. 
    Section type means the basic design elements in speicified ship section will be transitioned.
    Frame type means specified basic design elements will be transitioned. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Section", " - "
       "Frame", " - "
    """
    Section = 0  # TransitionBuilderTransitionTypesMemberType
    Frame = 1  # TransitionBuilderTransitionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransitionBuilderTransitionMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransitionBuilderTransitionMethods():
    """
    Transition Method.
    Create New method means all transition will begin with a scratch
    Update Existing method means to update previous transitioned result 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UpdateExisting", " - "
       "CreateNew", " - "
    """
    UpdateExisting = 0  # TransitionBuilderTransitionMethodsMemberType
    CreateNew = 1  # TransitionBuilderTransitionMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransitionBuilder(NXOpen.Builder):
    """
    This is to create a :py:class:`NXOpen.Features.ShipDesign.TransitionBuilder` which is used to create Detail Design elements from Basic Design elements.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateTransitionBuilder`
    
    Default values.
    
    ============================  ===============
    Property                      Value
    ============================  ===============
    SelectPart.SectionFrameType   Section 
    ----------------------------  ---------------
    TransitionMethod              UpdateExisting 
    ----------------------------  ---------------
    TransitionType                Section 
    ============================  ===============
    
    .. versionadded:: NX8.5.0
    """
    
    class TransitionTypes():
        """
        Transition Type. 
        Section type means the basic design elements in speicified ship section will be transitioned.
        Frame type means specified basic design elements will be transitioned. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Section", " - "
           "Frame", " - "
        """
        Section = 0  # TransitionBuilderTransitionTypesMemberType
        Frame = 1  # TransitionBuilderTransitionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TransitionMethods():
        """
        Transition Method.
        Create New method means all transition will begin with a scratch
        Update Existing method means to update previous transitioned result 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UpdateExisting", " - "
           "CreateNew", " - "
        """
        UpdateExisting = 0  # TransitionBuilderTransitionMethodsMemberType
        CreateNew = 1  # TransitionBuilderTransitionMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSectionBlockParts(self, sectionParts: 'list[str]') -> None:
        """
        The section block part file name.  
        
        Signature ``SetSectionBlockParts(sectionParts)`` 
        
        :param sectionParts: 
        :type sectionParts: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetFrameParts(self, framePartFilenames: 'list[str]') -> None:
        """
        Set frame part names.  
        
        Signature ``SetFrameParts(framePartFilenames)`` 
        
        :param framePartFilenames: 
        :type framePartFilenames: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def DryRun(self) -> None:
        """
        Executes a dry run to check whether there are circular references in the basic design structure model and whether the intersection seam is using split or not.  
        
        Signature ``DryRun()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    SectionMappingFile: str = ...
    """
    Returns or sets  the file name of the section mapping from the native file system
    
    <hr>
    
    Getter Method
    
    Signature ``SectionMappingFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionMappingFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX10.0.3
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    SelectPart: SelectPartBuilder = ...
    """
    Returns  the ship basic design part 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SelectPartBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    TransitionMethod: TransitionBuilderTransitionMethods = ...
    """
    Returns or sets  the transition method.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.TransitionBuilderTransitionMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransitionMethod`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Features.ShipDesign.TransitionBuilderTransitionMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    TransitionType: TransitionBuilderTransitionTypes = ...
    """
    Returns or sets  the transition type.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.TransitionBuilderTransitionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransitionType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.TransitionBuilderTransitionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: TransitionBuilder = ...  # unknown typename


class TraceLines(NXOpen.Features.CurveFeature):
    """
    Represents a trace lines feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.TraceLinesBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: TraceLines = ...  # unknown typename


class RebaseBuilder(NXOpen.Builder):
    """
    This class is used to synchronize the end cuts from the ones in mfg group to design group.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateRebaseBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def Rebase(self) -> int:
        """
        Loops through all the parts and rebases the manufacturing end cut parameters to the values of the corresponding design end cut 
        
        Signature ``Rebase()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    DesignElementToRebase: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected design elements to rebase.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignElementToRebase`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: RebaseBuilder = ...  # unknown typename


class Seam(NXOpen.Features.CurveFeature):
    """
    Represents a ship design seam feature.  
    
    A seam is a Scantling, Erection, Straking or Intersection type. 
    Seams are represented with curves on plate systems, and points on profile systems. 
    Scantling seams indicate divisions in ship structure where differing stock definitions are needed.
    Erection seams indicate divisions in ship structure at manufacturing block boundaries. 
    Straking seams indicate divisions in ship structure to make it a manufacturable size.
    Intersection seams indicate divisions in ship structure where other structure intersects the given structure.
    Although Scantling seam is the name given to seams that allow for changing stock definitions, all seam types 
    except straking seams allow for a change in the stock definition.
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SeamBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: Seam = ...  # unknown typename


class RoomAttributesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.RoomAttributesBuilder`  
    It is used in Ship General Arrangement Application.  
    
    The operation defines the attributes of the room
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateRoomAttributesBuilder`
    
    .. versionadded:: NX12.0.0
    """
    RoomAttributes: RoomAttributeListBuilder = ...
    """
    Returns  the room attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``RoomAttributes`` 
    
    :returns:  room attributes  
    :rtype: :py:class:`NXOpen.Features.ShipDesign.RoomAttributeListBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SelectRoom: NXOpen.SelectTaggedObject = ...
    """
    Returns  the select room 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectRoom`` 
    
    :returns:  Body or Component  
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: RoomAttributesBuilder = ...  # unknown typename


class ShipTrimBodyBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ShipTrimBodyBuilder`.  
    
    This class is used to create or edit a :py:class:`NXOpen.Features.ShipDesign.ShipTrimBody` feature.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipTrimBodyBuilder`
    
    Default values.
    
    =================================  ======================================
    Property                           Value
    =================================  ======================================
    BuiltUpOffset.FlangeAngle.Value    0 
    ---------------------------------  --------------------------------------
    BuiltUpOffset.FlangeOffset.Value   0 (millimeters part), 0 (inches part) 
    ---------------------------------  --------------------------------------
    BuiltUpOffset.WebAngle.Value       0 
    ---------------------------------  --------------------------------------
    BuiltUpOffset.WebOffset.Value      0 (millimeters part), 0 (inches part) 
    =================================  ======================================
    
    .. versionadded:: NX9.0.1
    """
    ApplyEndCut: bool = ...
    """
    Returns or sets  the indication of whether end cuts should be applied to the profiles.  
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyEndCut`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyEndCut`` 
    
    :param applyEndCut: 
    :type applyEndCut: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    BuiltUpOffset: BuiltUpOffsetBuilder = ...
    """
    Returns  the builder used to define the offsets for a built-up trim.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuiltUpOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.BuiltUpOffsetBuilder` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the indication whether the default direction of split should be reversed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    SplitDirectionOption: SplitProfilePlateBuilderSplitDirectionOptionType = ...
    """
    Returns or sets  the split direction method being used to construct the splitting sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitDirectionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderSplitDirectionOptionType` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SplitDirectionOption`` 
    
    :param splitDirectionOption: 
    :type splitDirectionOption: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderSplitDirectionOptionType` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    TargetBody: NXOpen.SelectNXObject = ...
    """
    Returns  the profile or plate solid bodies that are being split.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolCurves: NXOpen.SelectNXObjectList = ...
    """
    Returns  the curve(s) used to construct the sheet body when ToolOption is :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType.Extrude <NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolCurves`` 
    
    :returns:  Curve only.  
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolFaces: NXOpen.SelectNXObjectList = ...
    """
    Returns  the datum or face(s) used to construct the sheet body when ToolOption is :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType.Plane <NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolFaces`` 
    
    :returns:  Face only.  
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolOption: SplitProfilePlateBuilderToolOptionType = ...
    """
    Returns or sets  the tool type method that indicates which kind of tools will be used to construct the splitting sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ToolOption`` 
    
    :param toolOption: 
    :type toolOption: :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    ToolVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector defining the direction to extrude the curves to construct the sheet body when ToolOption is :py:class:`NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType.Extrude <NXOpen.Features.ShipDesign.SplitProfilePlateBuilderToolOptionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ToolVector`` 
    
    :param toolVector: 
    :type toolVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: ShipTrimBodyBuilder = ...  # unknown typename


class AnchorPointList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[AnchorPoint]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: AnchorPoint) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: AnchorPoint) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> AnchorPoint:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: AnchorPoint) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: AnchorPoint, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[AnchorPoint]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[AnchorPoint]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: AnchorPoint, object2: AnchorPoint) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: AnchorPoint) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.AnchorPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: AnchorPointList = ...  # unknown typename


class PenetrationRequestBuilderRequestDialogTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PenetrationRequestBuilderRequestDialogType():
    """
    Represents the dialog type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", " - "
       "Create", " - "
       "Modify", " - "
       "Revise", " - "
       "Associate", " - "
       "EditAssociate", " - "
       "ReviseAssociate", " - "
    """
    Unknown = 0  # PenetrationRequestBuilderRequestDialogTypeMemberType
    Create = 1  # PenetrationRequestBuilderRequestDialogTypeMemberType
    Modify = 2  # PenetrationRequestBuilderRequestDialogTypeMemberType
    Revise = 3  # PenetrationRequestBuilderRequestDialogTypeMemberType
    Associate = 4  # PenetrationRequestBuilderRequestDialogTypeMemberType
    EditAssociate = 5  # PenetrationRequestBuilderRequestDialogTypeMemberType
    ReviseAssociate = 6  # PenetrationRequestBuilderRequestDialogTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PenetrationRequestBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.PenetrationRequest` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.PenetrationRequestCollection.CreatePenetrationRequestBuilder`
    
    Default values.
    
    ===================  ======================================
    Property             Value
    ===================  ======================================
    CompensationType     NotRequired 
    -------------------  --------------------------------------
    CornerRadius.Value   0 (millimeters part), 0 (inches part) 
    -------------------  --------------------------------------
    CoutoutType          Circular 
    -------------------  --------------------------------------
    Cut                  0 
    -------------------  --------------------------------------
    Diameter.Value       0 (millimeters part), 0 (inches part) 
    -------------------  --------------------------------------
    DirectionType        PerpendiculartoStructure 
    -------------------  --------------------------------------
    Hanger               0 
    -------------------  --------------------------------------
    Height.Value         0 (millimeters part), 0 (inches part) 
    -------------------  --------------------------------------
    Offset.Value         0 (millimeters part), 0 (inches part) 
    -------------------  --------------------------------------
    PenetrationType      PenetratingObject 
    -------------------  --------------------------------------
    Radius.Value         0 (millimeters part), 0 (inches part) 
    -------------------  --------------------------------------
    RequestType          Single 
    -------------------  --------------------------------------
    Spill                0 
    -------------------  --------------------------------------
    Width.Value          0 (millimeters part), 0 (inches part) 
    ===================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class RequestDialogType():
        """
        Represents the dialog type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", " - "
           "Create", " - "
           "Modify", " - "
           "Revise", " - "
           "Associate", " - "
           "EditAssociate", " - "
           "ReviseAssociate", " - "
        """
        Unknown = 0  # PenetrationRequestBuilderRequestDialogTypeMemberType
        Create = 1  # PenetrationRequestBuilderRequestDialogTypeMemberType
        Modify = 2  # PenetrationRequestBuilderRequestDialogTypeMemberType
        Revise = 3  # PenetrationRequestBuilderRequestDialogTypeMemberType
        Associate = 4  # PenetrationRequestBuilderRequestDialogTypeMemberType
        EditAssociate = 5  # PenetrationRequestBuilderRequestDialogTypeMemberType
        ReviseAssociate = 6  # PenetrationRequestBuilderRequestDialogTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetRequestDescription(self) -> 'list[str]':
        """
        Returns the description  
        
        Signature ``GetRequestDescription()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRequestDescription(self, stringDesc: 'list[str]') -> None:
        """
        Sets the description 
        
        Signature ``SetRequestDescription(stringDesc)`` 
        
        :param stringDesc: 
        :type stringDesc: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AddAdjacentStructure(self, adjacentStructure: NXOpen.Body) -> None:
        """
        Adds adjacent structures 
        
        Signature ``AddAdjacentStructure(adjacentStructure)`` 
        
        :param adjacentStructure: 
        :type adjacentStructure: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def AddNonIntersectedStructure(self, structure: NXOpen.Body) -> None:
        """
        Adds nonintersected structures 
        
        Signature ``AddNonIntersectedStructure(structure)`` 
        
        :param structure: 
        :type structure: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def RemoveNonIntersectedStructures(self) -> None:
        """
        Removes all nonintersected structures 
        
        Signature ``RemoveNonIntersectedStructures()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def RemoveAllAdjacentStructures(self) -> None:
        """
        Removes all adjacent structures 
        
        Signature ``RemoveAllAdjacentStructures()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetApplyOffset(self, applyOffset: bool) -> None:
        """
        Sets the value that whether the offset is applied
        
        Signature ``SetApplyOffset(applyOffset)`` 
        
        :param applyOffset: 
        :type applyOffset: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    
    def SetOffsetValue(self, offsetValue: float) -> None:
        """
        Sets the offset value
        
        Signature ``SetOffsetValue(offsetValue)`` 
        
        :param offsetValue: 
        :type offsetValue: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_penetration_mgmt ("Penetration Management")
        """
        ...
    
    CompensationNumber: str = ...
    """
    Returns or sets  the compensation number 
    
    <hr>
    
    Getter Method
    
    Signature ``CompensationNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompensationNumber`` 
    
    :param stringCompensationNumber: 
    :type stringCompensationNumber: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    CompensationType: PenetrationRequestCompensationType = ...
    """
    Returns or sets  the compensation type 
    
    <hr>
    
    Getter Method
    
    Signature ``CompensationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCompensationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompensationType`` 
    
    :param enumCompensationType: 
    :type enumCompensationType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCompensationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    CornerRadius: NXOpen.Expression = ...
    """
    Returns  the corner radius expression 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CoutoutType: PenetrationRequestCoutoutType = ...
    """
    Returns or sets  the coutout type 
    
    <hr>
    
    Getter Method
    
    Signature ``CoutoutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCoutoutType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoutoutType`` 
    
    :param enumCoutoutType: 
    :type enumCoutoutType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestCoutoutType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Cut: bool = ...
    """
    Returns or sets  the cut 
    
    <hr>
    
    Getter Method
    
    Signature ``Cut`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Cut`` 
    
    :param toggleCut: 
    :type toggleCut: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    DialogType: PenetrationRequestBuilderRequestDialogType = ...
    """
    Returns or sets  the dialog type 
    
    <hr>
    
    Getter Method
    
    Signature ``DialogType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestBuilderRequestDialogType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DialogType`` 
    
    :param dialogType: 
    :type dialogType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestBuilderRequestDialogType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the diameter expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DirectionType: PenetrationRequestDirectionType = ...
    """
    Returns or sets  the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param enumDirection: 
    :type enumDirection: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestDirectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    DueDate: str = ...
    """
    Returns or sets  the due date 
    
    <hr>
    
    Getter Method
    
    Signature ``DueDate`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DueDate`` 
    
    :param stringDueDate: 
    :type stringDueDate: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Hanger: bool = ...
    """
    Returns or sets  the hanger 
    
    <hr>
    
    Getter Method
    
    Signature ``Hanger`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Hanger`` 
    
    :param toggleHanger: 
    :type toggleHanger: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    HangerNumber: str = ...
    """
    Returns or sets  the hanger number 
    
    <hr>
    
    Getter Method
    
    Signature ``HangerNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HangerNumber`` 
    
    :param stringHangerNumber: 
    :type stringHangerNumber: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HoleSubType: str = ...
    """
    Returns or sets  the hole sub-type 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleSubType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleSubType`` 
    
    :param stringHoleType: 
    :type stringHoleType: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    HoleType: str = ...
    """
    Returns or sets  the hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleType`` 
    
    :param stringHoleType: 
    :type stringHoleType: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    HorizontalDirection: NXOpen.Direction = ...
    """
    Returns or sets  the horizontal direction 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalDirection`` 
    
    :param vectorHorizontalDirection: 
    :type vectorHorizontalDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    ModifiedSketch: NXOpen.Sketch = ...
    """
    Returns or sets  the modified sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``ModifiedSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModifiedSketch`` 
    
    :param modifiedSketch: 
    :type modifiedSketch: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Orientation: NXOpen.Direction = ...
    """
    Returns or sets  the orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param vectorOrientation: 
    :type vectorOrientation: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    PenetrationType: PenetrationRequestPenetrationType = ...
    """
    Returns or sets  the penetration type 
    
    <hr>
    
    Getter Method
    
    Signature ``PenetrationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestPenetrationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PenetrationType`` 
    
    :param enumPenetrationType: 
    :type enumPenetrationType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestPenetrationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the penetrating point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param pointPenetrating: 
    :type pointPenetrating: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RequestName: str = ...
    """
    Returns or sets  the request name 
    
    <hr>
    
    Getter Method
    
    Signature ``RequestName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequestName`` 
    
    :param stringName: 
    :type stringName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    RequestType: PenetrationRequestRequestType = ...
    """
    Returns or sets  the request type 
    
    <hr>
    
    Getter Method
    
    Signature ``RequestType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestRequestType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequestType`` 
    
    :param enumRequestType: 
    :type enumRequestType: :py:class:`NXOpen.Features.ShipDesign.PenetrationRequestRequestType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    RouteObjectCollector: NXOpen.SelectNXObjectList = ...
    """
    Returns  the route object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RoutePenetrating: NXOpen.SelectNXObjectList = ...
    """
    Returns  the route penetrating 
    
    <hr>
    
    Getter Method
    
    Signature ``RoutePenetrating`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectedSegment: NXOpen.NXObject = ...
    """
    Returns or sets  the selected segment 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedSegment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedSegment`` 
    
    :param selectedSegment: 
    :type selectedSegment: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_penetration_mgmt ("Penetration Management")
    """
    SelectionCompensation: NXOpen.SelectNXObject = ...
    """
    Returns  the selection compensation 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionCompensation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectionHanger: NXOpen.SelectNXObject = ...
    """
    Returns  the selection hanger 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionHanger`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectionStructure: NXOpen.SelectNXObject = ...
    """
    Returns  the selection structure 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionStructure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Sketch: NXOpen.Section = ...
    """
    Returns  the sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``Sketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Spill: bool = ...
    """
    Returns or sets  the spill 
    
    <hr>
    
    Getter Method
    
    Signature ``Spill`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Spill`` 
    
    :param toggleSpill: 
    :type toggleSpill: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PenetrationRequestBuilder = ...  # unknown typename


class PlatePreparation(NXOpen.Features.BodyFeature):
    """
    Represents a ship plate preparation feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PlatePreparationBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: PlatePreparation = ...  # unknown typename


class PlateBoundaryOptionBuilderBoundaryTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateBoundaryOptionBuilderBoundaryTypes():
    """
    The plate boundary types. 
    
    This option specifies the plate boundary object type. 
    Different boundary object type may have different :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderTrimTypes`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", "use :py:class:`NXOpen.Curve` as the boundary."
       "Solid", "use :py:class:`NXOpen.Body` as the boundary."
       "FacePlane", "use :py:class:`NXOpen.Face` or :py:class:`NXOpen.Plane` as the boundary."
    """
    Curve = 0  # PlateBoundaryOptionBuilderBoundaryTypesMemberType
    Solid = 1  # PlateBoundaryOptionBuilderBoundaryTypesMemberType
    FacePlane = 2  # PlateBoundaryOptionBuilderBoundaryTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBoundaryOptionBuilderTrimTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateBoundaryOptionBuilderTrimTypes():
    """
    The plate boundary trim types. 
    
    This option specifies the plate boundary trim type. 
    Different :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderBoundaryTypes` may have different trim type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SquareCut", "The plate side face is normal to the molding face."
       "NeatTrim", "The plate side face may not be normal to the molding face."
    """
    SquareCut = 0  # PlateBoundaryOptionBuilderTrimTypesMemberType
    NeatTrim = 1  # PlateBoundaryOptionBuilderTrimTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBoundaryOptionBuilderSplitKnuckleTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlateBoundaryOptionBuilderSplitKnuckleTypes():
    """
    The split knuckle edge types. 
    
    This option specifies how the plate is to be split at the knuckle edge. 
    It can be split in miterred or square cut. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Mitered", "Two plates which are split and mitered and whoes side faces at knuckle edge are touching."
       "SquareCut", "The plate side faces at knuckle edge are normal to the molding face."
    """
    Mitered = 0  # PlateBoundaryOptionBuilderSplitKnuckleTypesMemberType
    SquareCut = 1  # PlateBoundaryOptionBuilderSplitKnuckleTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlateBoundaryOptionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilder` builder to define the plate boundary option.
    
    This builder returns None. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipDesign.PlateBuilder.CreatePlateBoundaryOptionBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class BoundaryTypes():
        """
        The plate boundary types. 
        
        This option specifies the plate boundary object type. 
        Different boundary object type may have different :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderTrimTypes`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", "use :py:class:`NXOpen.Curve` as the boundary."
           "Solid", "use :py:class:`NXOpen.Body` as the boundary."
           "FacePlane", "use :py:class:`NXOpen.Face` or :py:class:`NXOpen.Plane` as the boundary."
        """
        Curve = 0  # PlateBoundaryOptionBuilderBoundaryTypesMemberType
        Solid = 1  # PlateBoundaryOptionBuilderBoundaryTypesMemberType
        FacePlane = 2  # PlateBoundaryOptionBuilderBoundaryTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimTypes():
        """
        The plate boundary trim types. 
        
        This option specifies the plate boundary trim type. 
        Different :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderBoundaryTypes` may have different trim type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SquareCut", "The plate side face is normal to the molding face."
           "NeatTrim", "The plate side face may not be normal to the molding face."
        """
        SquareCut = 0  # PlateBoundaryOptionBuilderTrimTypesMemberType
        NeatTrim = 1  # PlateBoundaryOptionBuilderTrimTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplitKnuckleTypes():
        """
        The split knuckle edge types. 
        
        This option specifies how the plate is to be split at the knuckle edge. 
        It can be split in miterred or square cut. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Mitered", "Two plates which are split and mitered and whoes side faces at knuckle edge are touching."
           "SquareCut", "The plate side faces at knuckle edge are normal to the molding face."
        """
        Mitered = 0  # PlateBoundaryOptionBuilderSplitKnuckleTypesMemberType
        SquareCut = 1  # PlateBoundaryOptionBuilderSplitKnuckleTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BoundaryType: PlateBoundaryOptionBuilderBoundaryTypes = ...
    """
    Returns or sets  the plate boundary types.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderBoundaryTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryType`` 
    
    :param boundaryType: 
    :type boundaryType: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderBoundaryTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    TrimType: PlateBoundaryOptionBuilderTrimTypes = ...
    """
    Returns or sets  the plate boundary trim types.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderTrimTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimType`` 
    
    :param trimType: 
    :type trimType: :py:class:`NXOpen.Features.ShipDesign.PlateBoundaryOptionBuilderTrimTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    Null: PlateBoundaryOptionBuilder = ...  # unknown typename


class MaterialEstimationBuilderSelectionMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MaterialEstimationBuilderSelectionMethods():
    """
    Settings to indicate how the objects are selected. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Volume", "Selection by volume."
       "Frame", "Selection by Frame."
       "ShipStructure", "Selection by ship structure."
    """
    Volume = 0  # MaterialEstimationBuilderSelectionMethodsMemberType
    Frame = 1  # MaterialEstimationBuilderSelectionMethodsMemberType
    ShipStructure = 2  # MaterialEstimationBuilderSelectionMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MaterialEstimationBuilder(NXOpen.Builder):
    """
    Represents the class Features.  
    
    ShipDesign.MaterialEstimationBuilder which is used to 
    calculate the material estimation information.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateMaterialEstimationBuilder`
    
    Default values.
    
    ================  =======
    Property          Value
    ================  =======
    SelectionMethod   Volume 
    ================  =======
    
    .. versionadded:: NX10.0.0
    """
    
    class SelectionMethods():
        """
        Settings to indicate how the objects are selected. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Volume", "Selection by volume."
           "Frame", "Selection by Frame."
           "ShipStructure", "Selection by ship structure."
        """
        Volume = 0  # MaterialEstimationBuilderSelectionMethodsMemberType
        Frame = 1  # MaterialEstimationBuilderSelectionMethodsMemberType
        ShipStructure = 2  # MaterialEstimationBuilderSelectionMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetFrameParts(self, nPartCount: int) -> NXOpen.Part:
        """
        Sets the selected frame parts.  
        
        Signature ``SetFrameParts(nPartCount)`` 
        
        :param nPartCount: 
        :type nPartCount: int 
        :returns:  ship basic design structure component. 
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    SelectionMethod: MaterialEstimationBuilderSelectionMethods = ...
    """
    Returns or sets  the selection method.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.MaterialEstimationBuilderSelectionMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionMethod`` 
    
    :param enumSelectionType: 
    :type enumSelectionType: :py:class:`NXOpen.Features.ShipDesign.MaterialEstimationBuilderSelectionMethods` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    ShipStructures: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the selected ship structures.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShipStructures`` 
    
    :returns:  ship basic design plate faces, standard part curves and profile curves. 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    VolumeBody: NXOpen.SelectBody = ...
    """
    Returns  the selected volume body.  
    
    <hr>
    
    Getter Method
    
    Signature ``VolumeBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: MaterialEstimationBuilder = ...  # unknown typename


class DrawingSheetBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DrawingSheetBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DrawingSheetBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DrawingSheetBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DrawingSheetBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DrawingSheetBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DrawingSheetBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DrawingSheetBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DrawingSheetBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DrawingSheetBuilder, object2: DrawingSheetBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DrawingSheetBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.DrawingSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DrawingSheetBuilderList = ...  # unknown typename


class EditContextAttributesBuilder(NXOpen.Builder):
    """
    Represents the class Features.  
    
    ShipDesign.EditContextAttributesBuilder which is used to 
    edit the context attributes on the basic design features.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateEditContextAttributesBuilder`
    
    .. versionadded:: NX10.0.0
    """
    ObjectsToEdit: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the basic design objects whose context attributes will be editted.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectsToEdit`` 
    
    :returns:  ship basic design plate faces, standard part curves or profile curves. 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design")
    """
    Null: EditContextAttributesBuilder = ...  # unknown typename


class GeneralArrangementViewBuilderViewDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralArrangementViewBuilderViewDirectionType():
    """
    Settings to indicate the view direction type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "XPositive", " - "
       "XNegative", " - "
       "YPositive", " - "
       "YNegative", " - "
       "ZPositive", " - "
       "ZNegative", " - "
       "Deck", " - "
    """
    XPositive = 0  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
    XNegative = 1  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
    YPositive = 2  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
    YNegative = 3  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
    ZPositive = 4  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
    ZNegative = 5  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
    Deck = 6  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralArrangementViewBuilderViewCreationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralArrangementViewBuilderViewCreationType():
    """
    Settings to indicate the view type when view direction is X 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProjectView", " - "
       "SectionView", " - "
    """
    ProjectView = 0  # GeneralArrangementViewBuilderViewCreationTypeMemberType
    SectionView = 1  # GeneralArrangementViewBuilderViewCreationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralArrangementViewBuilderInheritedPMISourceOption():
    """
    Settings to indicate the Inherited PMI source type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoChange", "do nothing about PMI, this option only work when edit genearl arrangement view"
       "NotSet", " - "
       "FromGARoot", "Copy PMI label from General Arrangement Root part"
       "FromGAContainer", "Copy PMI label from General Arrangement Deck Container"
       "FromGADrawing", "Copy PMI label from General Arrangement Drawing Root part"
       "FromSourcePart", "Copy PMI label from the selected source part"
    """
    NoChange = 0  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
    NotSet = 1  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
    FromGARoot = 2  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
    FromGAContainer = 3  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
    FromGADrawing = 4  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
    FromSourcePart = 5  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralArrangementViewBuilder(NXOpen.Builder):
    """
    This builder allows you to define the general arrangement view information.  
    
    It represents :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilder`.
    This builder creates one Ship General Arrangement View and return it. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateGeneralArrangementViewBuilder`
    
    Default values.
    
    ==========================  =======
    Property                    Value
    ==========================  =======
    Placement.AlignmentMethod   Infer 
    --------------------------  -------
    Placement.AlignmentOption   ToView 
    ==========================  =======
    
    .. versionadded:: NX12.0.0
    """
    
    class ViewDirectionType():
        """
        Settings to indicate the view direction type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "XPositive", " - "
           "XNegative", " - "
           "YPositive", " - "
           "YNegative", " - "
           "ZPositive", " - "
           "ZNegative", " - "
           "Deck", " - "
        """
        XPositive = 0  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
        XNegative = 1  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
        YPositive = 2  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
        YNegative = 3  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
        ZPositive = 4  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
        ZNegative = 5  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
        Deck = 6  # GeneralArrangementViewBuilderViewDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewCreationType():
        """
        Settings to indicate the view type when view direction is X 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProjectView", " - "
           "SectionView", " - "
        """
        ProjectView = 0  # GeneralArrangementViewBuilderViewCreationTypeMemberType
        SectionView = 1  # GeneralArrangementViewBuilderViewCreationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InheritedPMISourceOption():
        """
        Settings to indicate the Inherited PMI source type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoChange", "do nothing about PMI, this option only work when edit genearl arrangement view"
           "NotSet", " - "
           "FromGARoot", "Copy PMI label from General Arrangement Root part"
           "FromGAContainer", "Copy PMI label from General Arrangement Deck Container"
           "FromGADrawing", "Copy PMI label from General Arrangement Drawing Root part"
           "FromSourcePart", "Copy PMI label from the selected source part"
        """
        NoChange = 0  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
        NotSet = 1  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
        FromGARoot = 2  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
        FromGAContainer = 3  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
        FromGADrawing = 4  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
        FromSourcePart = 5  # GeneralArrangementViewBuilderInheritedPMISourceOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetViewPosition(self, xPosition: float, yPosition: float) -> None:
        """
        Sets the view position on the drawing 
        
        Signature ``SetViewPosition(xPosition, yPosition)`` 
        
        :param xPosition: 
        :type xPosition: float 
        :param yPosition: 
        :type yPosition: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
        """
        ...
    
    Decks: DeckListBuilder = ...
    """
    Returns  the decks 
    
    <hr>
    
    Getter Method
    
    Signature ``Decks`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DeckListBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    DrawingSheet: NXOpen.Drawings.DrawingSheet = ...
    """
    Returns or sets  the drawing sheet which the view on 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheet` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingSheet`` 
    
    :param drawingSheet: 
    :type drawingSheet: :py:class:`NXOpen.Drawings.DrawingSheet` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    EndFrame: NXOpen.NXObject = ...
    """
    Returns or sets  the end frame 
    
    <hr>
    
    Getter Method
    
    Signature ``EndFrame`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndFrame`` 
    
    :param endFrame: 
    :type endFrame: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    InheritedPMISource: GeneralArrangementViewBuilderInheritedPMISourceOption = ...
    """
    Returns or sets  the inherited source 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritedPMISource`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilderInheritedPMISourceOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritedPMISource`` 
    
    :param inheritedPMISource: 
    :type inheritedPMISource: :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilderInheritedPMISourceOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    Placement: NXOpen.Drawings.ViewPlacementBuilder = ...
    """
    Returns  the view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``Placement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Scale: float = ...
    """
    Returns or sets  the view Scale
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scale: 
    :type scale: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    SelectStructures: SelectStructuresBuilder = ...
    """
    Returns  the selected structure 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectStructures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.SelectStructuresBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    SelectedModelView: NXOpen.SelectModelingViewList = ...
    """
    Returns  the list of selected Model View which are the source of PMI 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedModelView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectModelingViewList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    SourcePart: NXOpen.TaggedObject = ...
    """
    Returns or sets  the source part
    
    <hr>
    
    Getter Method
    
    Signature ``SourcePart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SourcePart`` 
    
    :param sourcePart: 
    :type sourcePart: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    StartFrame: NXOpen.NXObject = ...
    """
    Returns or sets  the start frame 
    
    <hr>
    
    Getter Method
    
    Signature ``StartFrame`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartFrame`` 
    
    :param startFrame: 
    :type startFrame: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    ViewCreation: GeneralArrangementViewBuilderViewCreationType = ...
    """
    Returns or sets  the view creation type 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewCreation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilderViewCreationType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewCreation`` 
    
    :param viewCreation: 
    :type viewCreation: :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilderViewCreationType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    ViewDirection: GeneralArrangementViewBuilderViewDirectionType = ...
    """
    Returns or sets  the view direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilderViewDirectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewDirection`` 
    
    :param viewDirection: 
    :type viewDirection: :py:class:`NXOpen.Features.ShipDesign.GeneralArrangementViewBuilderViewDirectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    ViewName: str = ...
    """
    Returns or sets  the view name 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewName`` 
    
    :param viewName: 
    :type viewName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    ViewType: str = ...
    """
    Returns or sets  the view type 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewType`` 
    
    :param viewType: 
    :type viewType: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_ship_gen_arrange ("Ship General Arrangement")
    """
    Null: GeneralArrangementViewBuilder = ...  # unknown typename


class ShipProfileCutoutBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ProfileCutout` builder for editing legacy(NX75) profile cutout feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateShipProfileCutoutBuilder`
    
    .. versionadded:: NX5.0.0
    """
    PierceFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the pierce faces 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ProfileBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the profile bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: str = ...
    """
    Returns or sets  the profile size 
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: ShipProfileCutoutBuilder = ...  # unknown typename


class RollingLine(NXOpen.Features.CurveFeature):
    """
    Represents a rolling line feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.RollingLineBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: RollingLine = ...  # unknown typename


class CustomBracketBuilderCreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomBracketBuilderCreationMethod():
    """
    Creation method used to define the placement of the bracket 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PlanesAndPoint", " - "
       "SpecifyCSYS", " - "
    """
    PlanesAndPoint = 0  # CustomBracketBuilderCreationMethodMemberType
    SpecifyCSYS = 1  # CustomBracketBuilderCreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomBracketBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.CustomBracket` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCustomBracketBuilder`
    
    Default values.
    
    ========================  ========
    Property                  Value
    ========================  ========
    SketchBlock.Exp1.Value    0 
    ------------------------  --------
    SketchBlock.Exp10.Value   0 
    ------------------------  --------
    SketchBlock.Exp11.Value   0 
    ------------------------  --------
    SketchBlock.Exp12.Value   0 
    ------------------------  --------
    SketchBlock.Exp2.Value    0 
    ------------------------  --------
    SketchBlock.Exp3.Value    0 
    ------------------------  --------
    SketchBlock.Exp4.Value    0 
    ------------------------  --------
    SketchBlock.Exp5.Value    0 
    ------------------------  --------
    SketchBlock.Exp6.Value    0 
    ------------------------  --------
    SketchBlock.Exp7.Value    0 
    ------------------------  --------
    SketchBlock.Exp8.Value    0 
    ------------------------  --------
    SketchBlock.Exp9.Value    0 
    ------------------------  --------
    SketchBlock.Sketches      EndCut1 
    ========================  ========
    
    .. versionadded:: NX7.5.0
    """
    
    class CreationMethod():
        """
        Creation method used to define the placement of the bracket 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PlanesAndPoint", " - "
           "SpecifyCSYS", " - "
        """
        PlanesAndPoint = 0  # CustomBracketBuilderCreationMethodMemberType
        SpecifyCSYS = 1  # CustomBracketBuilderCreationMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetAvailableAttributeNames(self) -> 'list[str]':
        """
        Returns the list of available name attributes  
        
        Signature ``GetAvailableAttributeNames()`` 
        
        :returns:  Array of available attribute names.
        These names are specified in the customer
        defaults file.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAvailableAttributeMaterials(self) -> 'list[str]':
        """
        Returns the list of available material attributes  
        
        Signature ``GetAvailableAttributeMaterials()`` 
        
        :returns:  Array of available attribute materials.
        These materials are specified in the customer
        defaults file.   
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AttributeMaterial: int = ...
    """
    Returns or sets  the material attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeMaterial`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeMaterial`` 
    
    :param material: 
    :type material: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    AttributeName: int = ...
    """
    Returns or sets  the name attribute value 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeName`` 
    
    :param name: 
    :type name: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    CoordSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the placement csys of the bracket 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordSystem`` 
    
    :param coordSystem: 
    :type coordSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    HeelOffset: NXOpen.Expression = ...
    """
    Returns  the heel offset 
    
    <hr>
    
    Getter Method
    
    Signature ``HeelOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeelPoint: NXOpen.Point = ...
    """
    Returns or sets  the heel point 
    
    <hr>
    
    Getter Method
    
    Signature ``HeelPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelPoint`` 
    
    :param heelPoint: 
    :type heelPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepCoordSystem: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the previous coordinate system 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepCoordSystem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepCoordSystem`` 
    
    :param keepCoordSystem: 
    :type keepCoordSystem: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepHeelPoint: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the previous heel point 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepHeelPoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepHeelPoint`` 
    
    :param keepHeelPoint: 
    :type keepHeelPoint: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepPlacementPlane: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the previous placement plane 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepPlacementPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepPlacementPlane`` 
    
    :param keepPlacementPlane: 
    :type keepPlacementPlane: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReferencePlane: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the previous reference plane 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReferencePlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReferencePlane`` 
    
    :param keepReferencePlane: 
    :type keepReferencePlane: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepReverseDirection: bool = ...
    """
    Returns or sets  the toggle which allows re-use of the previous flip direction toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepReverseDirection`` 
    
    :param keepReverseDirection: 
    :type keepReverseDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    KeepSelectTrimFace: bool = ...
    """
    Returns or sets  the keep select trim face
    A toggle used to remember the selected object(s) on apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSelectTrimFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSelectTrimFace`` 
    
    :param keepSelectTrimFace: 
    :type keepSelectTrimFace: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    PlacementPlane: NXOpen.Plane = ...
    """
    Returns or sets  the placement plane 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementPlane`` 
    
    :param placementPlane: 
    :type placementPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    PlacementType: CustomBracketBuilderCreationMethod = ...
    """
    Returns or sets  the method used to define the placement of the bracket 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CustomBracketBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param placementType: 
    :type placementType: :py:class:`NXOpen.Features.ShipDesign.CustomBracketBuilderCreationMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReferencePlane: NXOpen.Plane = ...
    """
    Returns or sets  the reference plane 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePlane`` 
    
    :param referencePlane: 
    :type referencePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the flip direction toggle for the extrude direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    SelectTrimFace: NXOpen.ScCollector = ...
    """
    Returns  the select trim face.  
    
    Specifies the face(s) to cut holes in. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTrimFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SketchBlock: NXOpen.SketchExpressionModifierBuilder = ...
    """
    Returns  the sketch block 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SketchExpressionModifierBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the thickness of the bracket 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: CustomBracketBuilder = ...  # unknown typename


class DeleteSeamBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to create a :py:class:`NXOpen.Features.ShipDesign.DeleteSeamBuilder` which
    is used to delete the seams from the ship structural components.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateDeleteSeamBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Seams: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the seams to delete from the ship structural components 
    
    <hr>
    
    Getter Method
    
    Signature ``Seams`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: DeleteSeamBuilder = ...  # unknown typename


class SubSystems(NXOpen.Features.BodyFeature):
    """
    Represents a sub systems feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SubSystemsBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: SubSystems = ...  # unknown typename


class TransFrame(NXOpen.Features.BodyFeature):
    """
    Represents a  TransVerse Frame feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.TransFrameBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: TransFrame = ...  # unknown typename


class Divide(NXOpen.Features.BodyFeature):
    """
    Represents divide feature(s)   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.DivideBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Divide = ...  # unknown typename


class ReadDataSetBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class will read a data set file from Team Center   
    
    .. versionadded:: NX8.5.0
    """
    
    def GetDataSetNames(self) -> 'list[str]':
        """
        The list of available data set names under the current work part
        
        Signature ``GetDataSetNames()`` 
        
        :returns:  Available data set names derived
        from the input Team Center relations.   
        :rtype: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateDataSetToggle: bool = ...
    """
    Returns or sets  the property that if the toggle is on then the native file will be added to current work part as a data set 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateDataSetToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateDataSetToggle`` 
    
    :param createDataSetToggle: 
    :type createDataSetToggle: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    DataSets: int = ...
    """
    Returns or sets  the index value of the available data set names 
    
    <hr>
    
    Getter Method
    
    Signature ``DataSets`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataSets`` 
    
    :param dataSets: 
    :type dataSets: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    NativeFileBrowser: str = ...
    """
    Returns or sets  the file name of the data set from the native file system
    
    <hr>
    
    Getter Method
    
    Signature ``NativeFileBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NativeFileBrowser`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    NativeToggle: bool = ...
    """
    Returns or sets  the flag that represents if toggle is on the a file of the data set type can be retrieved from the Native file system 
    
    <hr>
    
    Getter Method
    
    Signature ``NativeToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NativeToggle`` 
    
    :param nativeToggle: 
    :type nativeToggle: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_concept ("Ship Concept")
    """
    Null: ReadDataSetBuilder = ...  # unknown typename


class Bracket(NXOpen.Features.BodyFeature):
    """
    Represents a bracket feature.  
    
    In Ship Structure Basic Design Application, it outputs a sheet body.
    In Ship Structure Detail Design Application, it outputs a solid body.
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.BracketBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Bracket = ...  # unknown typename


class ExamineSteelFeatureBuilderCheckMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExamineSteelFeatureBuilderCheck():
    """
    Represents the object types to examine. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProfileWidth", "Check profile width"
       "CutoutToHole", "Check cutout to hole"
       "CutoutToSeam", "In basic design,check cutout to seam,In detail design,check cutout to edge"
       "CutoutClearance", "Check cutout top and bottom clearance"
       "CutoutAngle", "Check profile cutout angle offset"
       "StandardInterference", "Check standard part interference"
       "CollarPlateToSeam", "In basic design,check collar plate to seam,In detail design,check collar plate to edge"
       "CollarPlateToHole", "Check collar plate to hole"
       "WideCollarPlate", "Check wide collar plate"
       "NumChecks", "Number of check"
    """
    ProfileWidth = 0  # ExamineSteelFeatureBuilderCheckMemberType
    CutoutToHole = 1  # ExamineSteelFeatureBuilderCheckMemberType
    CutoutToSeam = 2  # ExamineSteelFeatureBuilderCheckMemberType
    CutoutClearance = 3  # ExamineSteelFeatureBuilderCheckMemberType
    CutoutAngle = 4  # ExamineSteelFeatureBuilderCheckMemberType
    StandardInterference = 5  # ExamineSteelFeatureBuilderCheckMemberType
    CollarPlateToSeam = 6  # ExamineSteelFeatureBuilderCheckMemberType
    CollarPlateToHole = 7  # ExamineSteelFeatureBuilderCheckMemberType
    WideCollarPlate = 8  # ExamineSteelFeatureBuilderCheckMemberType
    NumChecks = 9  # ExamineSteelFeatureBuilderCheckMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BuiltUpOffsetBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.BuiltUpOffsetBuilder`.  
    
    This class is for splitting ship built-up solidbodies
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FlangeAngle: NXOpen.Expression = ...
    """
    Returns  the flange angle used to determin the boundary of seam/split 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FlangeOffset: NXOpen.Expression = ...
    """
    Returns  the flange offset used to determin the boundary of seam/split 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    WebAngle: NXOpen.Expression = ...
    """
    Returns  the web angle used to determin the boundary of seam/split 
    
    <hr>
    
    Getter Method
    
    Signature ``WebAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    WebOffset: NXOpen.Expression = ...
    """
    Returns  the web offset used to determin the boundary of seam/split 
    
    <hr>
    
    Getter Method
    
    Signature ``WebOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BuiltUpOffsetBuilder = ...  # unknown typename


class Plate(NXOpen.Features.BodyFeature):
    """
    Represents a plate feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PlateBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: Plate = ...  # unknown typename


class ProfileListBuilderOutputTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileListBuilderOutputTypes():
    """
    Used to specify the desired output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProfileList", " - "
       "XMLOut", " - "
       "All", " - "
    """
    ProfileList = 0  # ProfileListBuilderOutputTypesMemberType
    XMLOut = 1  # ProfileListBuilderOutputTypesMemberType
    All = 2  # ProfileListBuilderOutputTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProfileListBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.ProfileList` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateProfileListBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class OutputTypes():
        """
        Used to specify the desired output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProfileList", " - "
           "XMLOut", " - "
           "All", " - "
        """
        ProfileList = 0  # ProfileListBuilderOutputTypesMemberType
        XMLOut = 1  # ProfileListBuilderOutputTypesMemberType
        All = 2  # ProfileListBuilderOutputTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Component: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the component to preview
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CuttingInterfaceConfigFile: str = ...
    """
    Returns or sets  the Cutting Interface configuration file 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingInterfaceConfigFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingInterfaceConfigFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    CuttingInterfaceOutputFile: str = ...
    """
    Returns or sets  the Cutting Interface output XML file 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingInterfaceOutputFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingInterfaceOutputFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    InverseBending: bool = ...
    """
    Returns or sets  whether to include inverse bending data in the spreadsheet
    
    <hr>
    
    Getter Method
    
    Signature ``InverseBending`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InverseBending`` 
    
    :param inverseBending: 
    :type inverseBending: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    KnuckledProfile: bool = ...
    """
    Returns or sets  whether to include knuckled profile data in the spreadsheet
    
    <hr>
    
    Getter Method
    
    Signature ``KnuckledProfile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KnuckledProfile`` 
    
    :param knuckledProfile: 
    :type knuckledProfile: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ListFile: str = ...
    """
    Returns or sets  the spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ListFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ListFile`` 
    
    :param listFile: 
    :type listFile: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ManufacturingCollector: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the components of this part that contain a profile will be processed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManufacturingCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OutputType: ProfileListBuilderOutputTypes = ...
    """
    Returns or sets  the output type: Spreadsheet or XML 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.ProfileListBuilderOutputTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputType`` 
    
    :param outputType: 
    :type outputType: :py:class:`NXOpen.Features.ShipDesign.ProfileListBuilderOutputTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design")
    """
    PartSet: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the profile components to process
    
    <hr>
    
    Getter Method
    
    Signature ``PartSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    VentilationHoles: bool = ...
    """
    Returns or sets  whether to include ventilation hole data in the spreadsheet
    
    <hr>
    
    Getter Method
    
    Signature ``VentilationHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VentilationHoles`` 
    
    :param ventilationHoles: 
    :type ventilationHoles: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: ProfileListBuilder = ...  # unknown typename


class ProfileList(NXOpen.Features.BodyFeature):
    """
    Represents a profile list feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.ProfileListBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: ProfileList = ...  # unknown typename


class CuttingSideFacesBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CuttingSideFacesBuilderTypes():
    """
    Type of operation to perform on the plate. Automatic works through all
    the visible bodies and assigns the attributes. Manual allows the user
    to interactively select faces and assign data accordingly. Reverse
    only allows faces with existing attributes to be selected and then
    reverse the applied attributes on the existing selected faces.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "Process all the visible solids to assign the cutting side face attributes."
       "Manual", "Process all the selected solids to assign the cutting side attributes."
       "Reverse", "Reverse the cutting side attributes of the selected solids."
    """
    Automatic = 0  # CuttingSideFacesBuilderTypesMemberType
    Manual = 1  # CuttingSideFacesBuilderTypesMemberType
    Reverse = 2  # CuttingSideFacesBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CuttingSideFacesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to create a :py:class:`NXOpen.Features.ShipDesign.CuttingSideFacesBuilder` which
    is used to attribute the cutting side, and opposing cutting side, faces on the plate bodies.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCuttingSideFacesBuilder`
    
    Default values.
    
    ===========================  ======================================
    Property                     Value
    ===========================  ======================================
    ProcessCoplanar              1 
    ---------------------------  --------------------------------------
    ProcessTangent               1 
    ---------------------------  --------------------------------------
    ReverseSide                  0 
    ---------------------------  --------------------------------------
    TangentFaceThreshold.Value   15 
    ---------------------------  --------------------------------------
    WeldGapThreshold.Value       0 (millimeters part), 0 (inches part) 
    ===========================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Type of operation to perform on the plate. Automatic works through all
        the visible bodies and assigns the attributes. Manual allows the user
        to interactively select faces and assign data accordingly. Reverse
        only allows faces with existing attributes to be selected and then
        reverse the applied attributes on the existing selected faces.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "Process all the visible solids to assign the cutting side face attributes."
           "Manual", "Process all the selected solids to assign the cutting side attributes."
           "Reverse", "Reverse the cutting side attributes of the selected solids."
        """
        Automatic = 0  # CuttingSideFacesBuilderTypesMemberType
        Manual = 1  # CuttingSideFacesBuilderTypesMemberType
        Reverse = 2  # CuttingSideFacesBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CuttingSideFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces to identify, or attribute, as cutting side.  
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingSideFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the modeling distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ProcessCoplanar: bool = ...
    """
    Returns or sets  the option identifying if a coplanar rule should be applied to find cutting side faces.  
    
    No limitiations are placed on adjacency of the faces (they can be far away from each other). 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessCoplanar`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessCoplanar`` 
    
    :param processCoplanar: 
    :type processCoplanar: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ProcessTangent: bool = ...
    """
    Returns or sets  the option identifying if a tangent rule should be applied to find adjacent cutting side faces.  
    
    Faces must be adjacent and within the modeling distance tolerance. 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessTangent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessTangent`` 
    
    :param processTangent: 
    :type processTangent: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ReverseSide: bool = ...
    """
    Returns or sets  the value to decide if the normal face assignment should be done to the opposite side.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSide`` 
    
    :param reverseSide: 
    :type reverseSide: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    TangentFaceThreshold: NXOpen.Expression = ...
    """
    Returns  the value (in degrees) to determine if adjacent surfaces are tangent.  
    
    <hr>
    
    Getter Method
    
    Signature ``TangentFaceThreshold`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: CuttingSideFacesBuilderTypes = ...
    """
    Returns or sets  the value for how to process the bodies and faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CuttingSideFacesBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.ShipDesign.CuttingSideFacesBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    WeldGapThreshold: NXOpen.Expression = ...
    """
    Returns  the maximum distance the profile, or another plate, can be from the selected plate face.  
    
    <hr>
    
    Getter Method
    
    Signature ``WeldGapThreshold`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: CuttingSideFacesBuilder = ...  # unknown typename


class PenetrationFolder(NXOpen.Issue.IssueFolder):
    """
    Represents the Penetration Folder object.  
    
    Not support KF.
    
    .. versionadded:: NX8.0.0
    """
    Null: PenetrationFolder = ...  # unknown typename


class StandardPartItemBuilderDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardPartItemBuilderDirection():
    """
    Represents the ship standard part installation direction and thickness direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fore", "fore"
       "Aft", "aft"
       "Up", "up"
       "Down", "down"
       "Port", "port"
       "Starboard", "starboard"
       "In", "in"
       "Out", "out"
       "Center", "center"
    """
    Fore = 0  # StandardPartItemBuilderDirectionMemberType
    Aft = 1  # StandardPartItemBuilderDirectionMemberType
    Up = 2  # StandardPartItemBuilderDirectionMemberType
    Down = 3  # StandardPartItemBuilderDirectionMemberType
    Port = 4  # StandardPartItemBuilderDirectionMemberType
    Starboard = 5  # StandardPartItemBuilderDirectionMemberType
    In = 6  # StandardPartItemBuilderDirectionMemberType
    Out = 7  # StandardPartItemBuilderDirectionMemberType
    Center = 8  # StandardPartItemBuilderDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardPartItemBuilder(NXOpen.Builder):
    """
    Represents the ship standard part item builder.  
    
    This class cannot be directly instantiated and has to be created by CreateStandardPartItem.
    
    .. versionadded:: NX8.0.0
    """
    
    class Direction():
        """
        Represents the ship standard part installation direction and thickness direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fore", "fore"
           "Aft", "aft"
           "Up", "up"
           "Down", "down"
           "Port", "port"
           "Starboard", "starboard"
           "In", "in"
           "Out", "out"
           "Center", "center"
        """
        Fore = 0  # StandardPartItemBuilderDirectionMemberType
        Aft = 1  # StandardPartItemBuilderDirectionMemberType
        Up = 2  # StandardPartItemBuilderDirectionMemberType
        Down = 3  # StandardPartItemBuilderDirectionMemberType
        Port = 4  # StandardPartItemBuilderDirectionMemberType
        Starboard = 5  # StandardPartItemBuilderDirectionMemberType
        In = 6  # StandardPartItemBuilderDirectionMemberType
        Out = 7  # StandardPartItemBuilderDirectionMemberType
        Center = 8  # StandardPartItemBuilderDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateReferences(self, bToUpdateGeometry: bool) -> None:
        """
        Updates and relinks the external references.  
        
        bToUpdateGeometry is used to decide if the input 
        geometries need to be recalculated.
        
        Signature ``UpdateReferences(bToUpdateGeometry)`` 
        
        :param bToUpdateGeometry: 
        :type bToUpdateGeometry: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def LookupRegistration(self) -> str:
        """
        Checks the registration context string when an object is selected.  
        
        Signature ``LookupRegistration()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetOptionalGeometry(self, selectedGeometry: NXOpen.DisplayableObject) -> None:
        """
        Sets one geometry for input selection which has multiple options.  
        
        Multiple options could come from 
        selection configuration setting, or several geometries with the same attributes.
        
        Signature ``SetOptionalGeometry(selectedGeometry)`` 
        
        :param selectedGeometry: 
        :type selectedGeometry: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def CheckScallopSize(self) -> bool:
        """
        Checks the scallop size by enabling the predefined requirement check inside the standard part,
        and resets to original state afterwards.  
        
        If there is no vialation of the requirement, 
        nothing will happen.
        
        Signature ``CheckScallopSize()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ResetItem(self) -> None:
        """
        Resets the standard part item builder to its intial state.  
        
        Signature ``ResetItem()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def SetTransitionGeometry(self, index: int, transitionGeometry: NXOpen.DisplayableObject) -> None:
        """
        Sets the transition geometry given the index.  
        
        Signature ``SetTransitionGeometry(index, transitionGeometry)`` 
        
        :param index: 
        :type index: int 
        :param transitionGeometry: 
        :type transitionGeometry: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def ConvertReferenceGeometry(self, index: int, selObj: NXOpen.DisplayableObject) -> None:
        """
        Converts the selected reference geometry.  
        
        For instance stiffener curve, which represents stiffener body, 
        into an equivalent reference geometry such as molding face, opposing molding face, top face.
        
        Signature ``ConvertReferenceGeometry(index, selObj)`` 
        
        :param index: 
        :type index: int 
        :param selObj: 
        :type selObj: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def AddAcrossObject(self, acrossObject: NXOpen.DisplayableObject) -> None:
        """
        Adds the specific object to the across object list.  
        
        Signature ``AddAcrossObject(acrossObject)`` 
        
        :param acrossObject:  body, face or curve entity.  
        :type acrossObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def RemoveAcrossObject(self, acrossObject: NXOpen.DisplayableObject) -> None:
        """
        Removes the specific object from the across object list.  
        
        Signature ``RemoveAcrossObject(acrossObject)`` 
        
        :param acrossObject:  body, face or curve.  
        :type acrossObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def AddDeselectedAcrossObject(self, acrossObject: NXOpen.DisplayableObject) -> None:
        """
        Adds the specific object to the deselected across object list.  
        
        Signature ``AddDeselectedAcrossObject(acrossObject)`` 
        
        :param acrossObject:  body, face or curve.  
        :type acrossObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    
    def RemoveDeselectedAcrossObject(self, acrossObject: NXOpen.DisplayableObject) -> None:
        """
        Removes the specific object from the deselected across object list.  
        
        Signature ``RemoveDeselectedAcrossObject(acrossObject)`` 
        
        :param acrossObject:  body, face or curve.  
        :type acrossObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
        """
        ...
    
    FifthObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the fifth selected object.  
    
    <hr>
    
    Getter Method
    
    Signature ``FifthObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstAdoptionCurve: NXOpen.ScCollector = ...
    """
    Returns  the first adoption curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAdoptionCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    FirstChainInstallDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  
    the flag to indicate whether to flip the direction of the first selected chain object or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstChainInstallDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstChainInstallDirection`` 
    
    :param firstChainInstallDirection: 
    :type firstChainInstallDirection: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    FirstChainObject: NXOpen.ScCollector = ...
    """
    Returns  the first chain selected object.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstChainObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first selected object.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstPlane: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first selected plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FourthObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the fourth selected object.  
    
    <hr>
    
    Getter Method
    
    Signature ``FourthObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InstallFifthDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  
    the flag to indicate whether to flip the direction of the fifth selected object or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstallFifthDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstallFifthDirection`` 
    
    :param fifthDirectionInstall: 
    :type fifthDirectionInstall: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    InstallFirstDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  
    the flag to indicate whether to flip the direction of the first selected object or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstallFirstDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstallFirstDirection`` 
    
    :param firstDirectionInstall: 
    :type firstDirectionInstall: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    InstallFourthDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  
    the flag to indicate whether to flip the direction of the fourth selected object or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstallFourthDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstallFourthDirection`` 
    
    :param fourthDirectionInstall: 
    :type fourthDirectionInstall: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    InstallSecondDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  
    the flag to indicate whether to flip the direction of the second selected object or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstallSecondDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstallSecondDirection`` 
    
    :param secondDirectionInstall: 
    :type secondDirectionInstall: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    InstallThirdDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  
    the flag to indicate whether to flip the direction of the third selected object or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstallThirdDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstallThirdDirection`` 
    
    :param thirdDirectionInstall: 
    :type thirdDirectionInstall: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SecondAdoptionCurve: NXOpen.ScCollector = ...
    """
    Returns  the second adoption curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondAdoptionCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    """
    SecondChainInstallDirection: StandardPartItemBuilderDirection = ...
    """
    Returns or sets  
    the flag to indicate whether to flip the direction of the second selected chain object or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondChainInstallDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondChainInstallDirection`` 
    
    :param secondChainInstallDirection: 
    :type secondChainInstallDirection: :py:class:`NXOpen.Features.ShipDesign.StandardPartItemBuilderDirection` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design")
    """
    SecondChainObject: NXOpen.ScCollector = ...
    """
    Returns  the second chain selected object.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondChainObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second selected object.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondPlane: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second selected plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThirdObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the third selected object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: StandardPartItemBuilder = ...  # unknown typename


class OrientationDefinitionBuilderMeasureAngleTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationDefinitionBuilderMeasureAngleTypes():
    """
    Settings to indicate how angles are measured in all orientation objects.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NormaltoCurve", "Angles are measured in a plane normal to the landing curve."
       "Orthogonal", "Angles are measured in an orthogonal plane closest to the normal of the landing curve."
    """
    NormaltoCurve = 0  # OrientationDefinitionBuilderMeasureAngleTypesMemberType
    Orthogonal = 1  # OrientationDefinitionBuilderMeasureAngleTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationDefinitionBuilderPlacementSideTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationDefinitionBuilderPlacementSideTypes():
    """
    Settings to indicate which side of the placement faces the stiffener is to be placed.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SameAsNormal", "The stiffener will be placed on the positive normal side of the placement faces."
       "OppositeNormal", "The stiffener will be placed on the negative normal side of the placement faces."
    """
    SameAsNormal = 0  # OrientationDefinitionBuilderPlacementSideTypesMemberType
    OppositeNormal = 1  # OrientationDefinitionBuilderPlacementSideTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationDefinitionBuilder(NXOpen.Builder):
    """
    This class defines the top level object for use in definining the orientation
    of stiffeners and edge reinforcements.  
    
    This object allows you to define
    regions of a profile and allows you to define a different method of orientation
    for each region. 
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateOrientationDefinitionBuilder`
    
    Default values.
    
    ==================  ==============
    Property            Value
    ==================  ==============
    MeasureAngles       NormaltoCurve 
    ------------------  --------------
    ShowSurfaceAngles   0 
    ------------------  --------------
    ShowTwistRate       0 
    ------------------  --------------
    ShowWebAngles       0 
    ==================  ==============
    
    .. versionadded:: NX9.0.0
    """
    
    class MeasureAngleTypes():
        """
        Settings to indicate how angles are measured in all orientation objects.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NormaltoCurve", "Angles are measured in a plane normal to the landing curve."
           "Orthogonal", "Angles are measured in an orthogonal plane closest to the normal of the landing curve."
        """
        NormaltoCurve = 0  # OrientationDefinitionBuilderMeasureAngleTypesMemberType
        Orthogonal = 1  # OrientationDefinitionBuilderMeasureAngleTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PlacementSideTypes():
        """
        Settings to indicate which side of the placement faces the stiffener is to be placed.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SameAsNormal", "The stiffener will be placed on the positive normal side of the placement faces."
           "OppositeNormal", "The stiffener will be placed on the negative normal side of the placement faces."
        """
        SameAsNormal = 0  # OrientationDefinitionBuilderPlacementSideTypesMemberType
        OppositeNormal = 1  # OrientationDefinitionBuilderPlacementSideTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateNewRegion(self, regionPoint: NXOpen.NXObject) -> OrientationRegionItemBuilder:
        """
        Creates a new region on the landing curve to allow you to change the orientation for this area of the landing curve.  
        
        Signature ``CreateNewRegion(regionPoint)`` 
        
        :param regionPoint:  New region boundary point  
        :type regionPoint: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def DeleteRegion(self, region: OrientationRegionItemBuilder) -> None:
        """
        Deletes a previously created region.  
        
        The deleted region will be combined with the previous region. 
        
        Signature ``DeleteRegion(region)`` 
        
        :param region: 
        :type region: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def GetNextRegion(self, region: OrientationRegionItemBuilder) -> OrientationRegionItemBuilder:
        """
        Gets the next region to the current one.  
        
        Signature ``GetNextRegion(region)`` 
        
        :param region: 
        :type region: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def CreatePathCurve(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the landing curve that is being processed into the builder.  
        
        If regions have already been defined the closest point on this
        new curve to the region boundaries will be used for the new region boundaries when the boundary has been defined by a specified point
        otherwise the boundary definition will be reevaluated for this new curve and the boundary set appropriately. 
        
        Signature ``CreatePathCurve(curves)`` 
        
        :param curves:  The curves defining the path of the profile that is being oriented.  
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def SetPlacementFaces(self, faces: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the faces or datum that are being processed into the builder.  
        
        Signature ``SetPlacementFaces(faces)`` 
        
        :param faces:  The faces/datums defining the placement of the profile that is being oriented.  
        :type faces: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def CreateRegionsAtFrames(self) -> 'list[OrientationRegionItemBuilder]':
        """
        Will create new regions at each frame.  
        
        Signature ``CreateRegionsAtFrames()`` 
        
        :returns:  The regions created.  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    
    def SetAnglesNormal(self, regions: 'list[OrientationRegionItemBuilder]') -> None:
        """
        Will set all angle values of input regions so that web is normal to surface.  
        
        Signature ``SetAnglesNormal(regions)`` 
        
        :param regions:  The regions to process.  
        :type regions: list of :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance used in the orientation objects to determine if vectors are parallel.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance used in the orientation objects to determine if locations are coincident.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    MeasureAngles: OrientationDefinitionBuilderMeasureAngleTypes = ...
    """
    Returns or sets  the method in which to measure angles in the orientation objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureAngles`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilderMeasureAngleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureAngles`` 
    
    :param measureAngles: 
    :type measureAngles: :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilderMeasureAngleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    NewRegionPoint: NXOpen.SelectNXObject = ...
    """
    Returns  the new region point or datum that will be used for the boundary of the new region.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewRegionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PlacementSide: OrientationDefinitionBuilderPlacementSideTypes = ...
    """
    Returns or sets  the side of the placement faces the stiffener is to be placed upon.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilderPlacementSideTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementSide`` 
    
    :param placementSide: 
    :type placementSide: :py:class:`NXOpen.Features.ShipDesign.OrientationDefinitionBuilderPlacementSideTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    RegionItemData: OrientationRegionItemBuilder = ...
    """
    Returns  the regionItem builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionItemData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RegionList: OrientationRegionItemBuilderList = ...
    """
    Returns  the list containing all the defined regions.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.OrientationRegionItemBuilderList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ShowSurfaceAngles: bool = ...
    """
    Returns or sets  the indication if the surface angles analysis display is on or off.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSurfaceAngles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSurfaceAngles`` 
    
    :param showSurfaceAngles: 
    :type showSurfaceAngles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ShowTwistRate: bool = ...
    """
    Returns or sets  the indication if the twist rate analysis display is on or off.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowTwistRate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowTwistRate`` 
    
    :param showTwistRate: 
    :type showTwistRate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    ShowWebAngles: bool = ...
    """
    Returns or sets  the indication if the web angle analysis display is on or off.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowWebAngles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowWebAngles`` 
    
    :param showWebAngles: 
    :type showWebAngles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design")
    """
    Null: OrientationDefinitionBuilder = ...  # unknown typename


class VentilationHoles2(NXOpen.Features.BodyFeature):
    """
    Represents a ventilation holes2 feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.VentilationHoles2Builder`
    
    .. versionadded:: NX8.0.0
    """
    Null: VentilationHoles2 = ...  # unknown typename


class SteelCollarPlate(NXOpen.Features.BodyFeature):
    """
    Represents a collar plate steel feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.SteelCollarPlateBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: SteelCollarPlate = ...  # unknown typename


class CompareModeBuilderCompareModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompareModeBuilderCompareMode():
    """
    Compare Mode type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DesignMode", " - "
       "ManufacturingMode", " - "
    """
    DesignMode = 0  # CompareModeBuilderCompareModeMemberType
    ManufacturingMode = 1  # CompareModeBuilderCompareModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompareModeBuilder(NXOpen.Builder):
    """
    This class is used to compare between the two Shipbuilding modes of Design and Manufacturing.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateCompareModeBuilder`
    
    Default values.
    
    =====================  ===========
    Property               Value
    =====================  ===========
    CompareEmphasizeMode   DesignMode 
    =====================  ===========
    
    .. versionadded:: NX8.0.0
    """
    
    class CompareMode():
        """
        Compare Mode type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DesignMode", " - "
           "ManufacturingMode", " - "
        """
        DesignMode = 0  # CompareModeBuilderCompareModeMemberType
        ManufacturingMode = 1  # CompareModeBuilderCompareModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateDisplay(self) -> int:
        """
        Loops through all the parts and updates the display to show the compare between the Design vs Manufacturing data
        
        Signature ``UpdateDisplay()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    
    def RestoreDisplay(self, singleparttorestore: NXOpen.Assemblies.Component) -> None:
        """
        Restores the display and removes the compare between the Design vs Manufacturing data
        
        Signature ``RestoreDisplay(singleparttorestore)`` 
        
        :param singleparttorestore: 
        :type singleparttorestore: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
        """
        ...
    
    CompareEmphasizeMode: CompareModeBuilderCompareMode = ...
    """
    Returns or sets  the compare emphasize mode.  
    
    <hr>
    
    Getter Method
    
    Signature ``CompareEmphasizeMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.CompareModeBuilderCompareMode` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    
    <hr>
    
    Setter Method
    
    Signature ``CompareEmphasizeMode`` 
    
    :param compareEmphasizeMode: 
    :type compareEmphasizeMode: :py:class:`NXOpen.Features.ShipDesign.CompareModeBuilderCompareMode` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    DesignElementToCompare: NXOpen.SelectNXObjectList = ...
    """
    Returns  the design element selection object to be processed in the change of mode comparing.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignElementToCompare`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing")
    """
    Null: CompareModeBuilder = ...  # unknown typename


class VentHolesMarkingBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.ShipDesign.VentHolesMarking` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateVentHolesMarkingBuilder`
    
    .. versionadded:: NX5.0.3
    """
    GridPlanes: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the grid datum planes 
    
    <hr>
    
    Getter Method
    
    Signature ``GridPlanes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX5.0.3
    
    License requirements: None.
    """
    TabNoteGroup: NXOpen.Features.TabNoteCfgBuilder = ...
    """
    Returns  the tab note group 
    
    <hr>
    
    Getter Method
    
    Signature ``TabNoteGroup`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.TabNoteCfgBuilder` 
    
    .. versionadded:: NX5.0.3
    
    License requirements: None.
    """
    Null: VentHolesMarkingBuilder = ...  # unknown typename


class MaterialAllowanceBuilder(NXOpen.Builder):
    """
    Represents the material allowance feature builder to examine steel feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateMaterialAllowanceBuilder`
    
    .. versionadded:: NX10.0.0
    """
    AllowanceValue: float = ...
    """
    Returns or sets  the allowance value to set the material.  
    
    <hr>
    
    Getter Method
    
    Signature ``AllowanceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowanceValue`` 
    
    :param allowanceValue: 
    :type allowanceValue: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_mfg_prep ("Ship Manufacturing")
    """
    ValidFace: NXOpen.SelectNXObjectList = ...
    """
    Returns  the faces to set the material.  
    
    <hr>
    
    Getter Method
    
    Signature ``ValidFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: MaterialAllowanceBuilder = ...  # unknown typename


class CollarPlate(NXOpen.Features.BodyFeature):
    """
    Represents a collar plate feature.  
    
    In Ship Structure Basic Design Application, it outputs sheet bodies.
    In Ship Structure Detail Design Application, it outputs solid bodies.
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.CollarPlateBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: CollarPlate = ...  # unknown typename


class SteelInsulationBoundaryBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SteelInsulationBoundaryBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SteelInsulationBoundaryBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SteelInsulationBoundaryBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SteelInsulationBoundaryBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SteelInsulationBoundaryBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SteelInsulationBoundaryBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SteelInsulationBoundaryBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SteelInsulationBoundaryBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SteelInsulationBoundaryBuilder, object2: SteelInsulationBoundaryBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SteelInsulationBoundaryBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.ShipDesign.SteelInsulationBoundaryBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SteelInsulationBoundaryBuilderList = ...  # unknown typename


class DrawingAnnotationBuilderAnnotationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingAnnotationBuilderAnnotation():
    """
    Settings that indicate how to handle the exsiting annotation in the drawing.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Preserve", " - "
       "Delete", " - "
    """
    Preserve = 0  # DrawingAnnotationBuilderAnnotationMemberType
    Delete = 1  # DrawingAnnotationBuilderAnnotationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingAnnotationBuilder(NXOpen.Builder):
    """
    This builder allows you to define the drawing annotation information.  
    
    It represents :py:class:`NXOpen.Features.ShipDesign.DrawingAnnotationBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ShipCollection.CreateDrawingAnnotationBuilder`
    
    Default values.
    
    ============================  =========
    Property                      Value
    ============================  =========
    ExistingAutomaticAnnotation   Preserve 
    ----------------------------  ---------
    IsCreateOpeningFillLines      1 
    ----------------------------  ---------
    IsCreateScantling             1 
    ----------------------------  ---------
    IsCreateScantlingTable        1 
    ----------------------------  ---------
    IsCreateStructureID           0 
    ============================  =========
    
    .. versionadded:: NX10.0.0
    """
    
    class Annotation():
        """
        Settings that indicate how to handle the exsiting annotation in the drawing.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Preserve", " - "
           "Delete", " - "
        """
        Preserve = 0  # DrawingAnnotationBuilderAnnotationMemberType
        Delete = 1  # DrawingAnnotationBuilderAnnotationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ExistingAutomaticAnnotation: DrawingAnnotationBuilderAnnotation = ...
    """
    Returns or sets  the option specify how to handle existing annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``ExistingAutomaticAnnotation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.ShipDesign.DrawingAnnotationBuilderAnnotation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExistingAutomaticAnnotation`` 
    
    :param existingAutomaticAnnotation: 
    :type existingAutomaticAnnotation: :py:class:`NXOpen.Features.ShipDesign.DrawingAnnotationBuilderAnnotation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    IsCreateContinuitySymbolOnSectionStiffener: bool = ...
    """
    Returns or sets  the setting that indicates whether continuity symbol on section stiffener will be created for the ship objects 
    
    <hr>
    
    Getter Method
    
    Signature ``IsCreateContinuitySymbolOnSectionStiffener`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsCreateContinuitySymbolOnSectionStiffener`` 
    
    :param isCreateContinuitySymbolOnSectionStiffener: 
    :type isCreateContinuitySymbolOnSectionStiffener: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    IsCreateOpeningFillLines: bool = ...
    """
    Returns or sets  the setting that indicates whether opening fill lines will be created for ship objects 
    
    <hr>
    
    Getter Method
    
    Signature ``IsCreateOpeningFillLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsCreateOpeningFillLines`` 
    
    :param isCreateOpeningFillLines: 
    :type isCreateOpeningFillLines: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    IsCreateScantling: bool = ...
    """
    Returns or sets  the setting that indicates whether scantling will be created for the ship objects 
    
    <hr>
    
    Getter Method
    
    Signature ``IsCreateScantling`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsCreateScantling`` 
    
    :param isCreateScantling: 
    :type isCreateScantling: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    IsCreateScantlingTable: bool = ...
    """
    Returns or sets  the setting that indicates whether the most common scantlings for stiffener and plate will be created for the view.  
    
    If yes, the stiffener and plate scantlings, other than the most common one, will not be created.
    
    <hr>
    
    Getter Method
    
    Signature ``IsCreateScantlingTable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsCreateScantlingTable`` 
    
    :param isCreateScantlingTable: 
    :type isCreateScantlingTable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    IsCreateStiffenerSectionSymbol: bool = ...
    """
    Returns or sets  the setting that indicates whether the section symbol will be created for stiffeners 
    
    <hr>
    
    Getter Method
    
    Signature ``IsCreateStiffenerSectionSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsCreateStiffenerSectionSymbol`` 
    
    :param isCreateStiffenerSectionSymbol: 
    :type isCreateStiffenerSectionSymbol: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    IsCreateStructureID: bool = ...
    """
    Returns or sets  the setting that indicates whether structure id will be created for ship objects 
    
    <hr>
    
    Getter Method
    
    Signature ``IsCreateStructureID`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsCreateStructureID`` 
    
    :param isCreateStructureID: 
    :type isCreateStructureID: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ViewList: NXOpen.Drawings.SelectDraftingViewList = ...
    """
    Returns  the drafting views to be annotated 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DrawingAnnotationBuilder = ...  # unknown typename


class PinJig(NXOpen.Features.BodyFeature):
    """
    Represents a Pinjig feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.ShipDesign.PinJigBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: PinJig = ...  # unknown typename


