# module 'NXOpen.Annotations'
#
# Automatically generated 2025-06-09T14:38:43.324254
#
"""Default documentation for NXOpen.Annotations."""

import typing

import NXOpen
import NXOpen.Assemblies
import NXOpen.Display
import NXOpen.Drafting
import NXOpen.Drawings
import NXOpen.Features
import NXOpen.Gateway
import NXOpen.GeometricUtilities
import NXOpen.PDM
import NXOpen.Preferences



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class BaseTitleBlockBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.BaseTitleBlockBuilder` builder.  
    
    This an abstract class and can not be instantiated. Methods of this class can be invoked by using the objects of derived classes 
    :py:class:`NXOpen.Annotations.EditTitleBlockBuilder`, :py:class:`NXOpen.Annotations.DefineTitleBlockBuilder`. 
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX8.0.0
    """
    Cells: TitleBlockCellBuilderList = ...
    """
    Returns  the cells 
    
    <hr>
    
    Getter Method
    
    Signature ``Cells`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TitleBlockCellBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: BaseTitleBlockBuilder = ...  # unknown typename


class EditTitleBlockBuilder(BaseTitleBlockBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.EditTitleBlockBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.TitleBlockCollection.CreateEditTitleBlockBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def GetCellValueForLabel(self, label: str) -> str:
        """
        Return the value of the cell for given label.  
        
        If multiple title blocks are selected, 
        then value of the cell from the first title block, which has the cell with given label, is returned.  
        
        Signature ``GetCellValueForLabel(label)`` 
        
        :param label:  Label whose value is queried  
        :type label: str 
        :returns:  Value of the label  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCellValueForLabel(self, label: str, value: str) -> None:
        """
        Sets the value of the cell for given label.  
        
        If multiple title blocks are selected, 
        then values of cells with the given label in all the title blocks are set. 
        
        Signature ``SetCellValueForLabel(label, value)`` 
        
        :param label:  Label whose value is to be set  
        :type label: str 
        :param value:  Value of the label  
        :type value: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Null: EditTitleBlockBuilder = ...  # unknown typename


class FcfFrameData(NXOpen.TransientObject):
    """
    Represents FCF frames data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFrames(self) -> 'list[FcfFrame]':
        """
        Returns the frames  
        
        Signature ``GetFrames()`` 
        
        :returns:  List of frames  
        :rtype: list of :py:class:`NXOpen.Annotations.FcfFrame` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameBuilder.FeatureControlFrameDataList` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetFrames(self, frames: 'list[FcfFrame]') -> None:
        """
        Sets the frames 
        
        Signature ``SetFrames(frames)`` 
        
        :param frames:  List of frames  
        :type frames: list of :py:class:`NXOpen.Annotations.FcfFrame` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameBuilder.FeatureControlFrameDataList` instead.
        
        License requirements: None.
        """
        ...
    
    GeometricCharacteristic: GeometricCharacteristic = ...
    """
    Returns or sets  the geometric characteristic 
    
    <hr>
    
    Getter Method
    
    Signature ``GeometricCharacteristic`` 
    
    :returns:  Geometric characteristics  
    :rtype: :py:class:`NXOpen.Annotations.GeometricCharacteristic` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.FeatureControlFrameBuilder.Characteristic`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeometricCharacteristic`` 
    
    :param characteristic:  New geometric characteristics  
    :type characteristic: :py:class:`NXOpen.Annotations.GeometricCharacteristic` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.FeatureControlFrameBuilder.Characteristic`` instead.
    
    License requirements: None.
    """


class TableInsertRowsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableInsertRowsType():
    """
    Represents mode of insertion of a row
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Above", "Insert row above."
       "Below", "Insert row below."
    """
    Above = 0  # TableInsertRowsTypeMemberType
    Below = 1  # TableInsertRowsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableInsertColumnsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableInsertColumnsType():
    """
    Represents mode of insertion of a column
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", "Insert column to left."
       "Right", "Insert column to right."
    """
    Left = 0  # TableInsertColumnsTypeMemberType
    Right = 1  # TableInsertColumnsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Table(NXOpen.DisplayableObject):
    """
    Represents a :py:class:`NXOpen.Annotations.Table`.  
    
    This class represents a tabular note.
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX8.0.0
    """
    
    class InsertRowsType():
        """
        Represents mode of insertion of a row
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Above", "Insert row above."
           "Below", "Insert row below."
        """
        Above = 0  # TableInsertRowsTypeMemberType
        Below = 1  # TableInsertRowsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InsertColumnsType():
        """
        Represents mode of insertion of a column
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", "Insert column to left."
           "Right", "Insert column to right."
        """
        Left = 0  # TableInsertColumnsTypeMemberType
        Right = 1  # TableInsertColumnsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DoUpdate(self) -> None:
        """
        Update tabular note 
        
        Signature ``DoUpdate()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EvaluateRulesAndUpdate(self) -> None:
        """
        Evalute rules and update tabular note 
        
        Signature ``EvaluateRulesAndUpdate()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def EditCellText(self, tableCell: NXOpen.DisplayableObject, text: str) -> None:
        """
        Edit Cell Text 
        
        Signature ``EditCellText(tableCell, text)`` 
        
        :param tableCell:  Table cell object to edit cell text. 
        :type tableCell: :py:class:`NXOpen.DisplayableObject` 
        :param text:  Text to edit cell text of table cell object. 
        :type text: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def ResizeRowsCols(self, rowsOrColumns: 'list[NXOpen.DisplayableObject]', resizeValue: float) -> None:
        """
        Resize rows and columns 
        
        Signature ``ResizeRowsCols(rowsOrColumns, resizeValue)`` 
        
        :param rowsOrColumns:  Table row or column object to resize. 
        :type rowsOrColumns: list of :py:class:`NXOpen.DisplayableObject` 
        :param resizeValue:  Value to resize row or column. 
        :type resizeValue: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def LockUnlockRows(self, rows: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Lock or Unlock Rows 
        
        Signature ``LockUnlockRows(rows)`` 
        
        :param rows:  Array of table row object to lock or unlock. 
        :type rows: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def InsertRows(self, selectedRows: 'list[NXOpen.DisplayableObject]', insertRowsInTabularNote: TableInsertRowsType) -> None:
        """
        Insert Rows 
        
        Signature ``InsertRows(selectedRows, insertRowsInTabularNote)`` 
        
        :param selectedRows:  array of selected table row object to insert new rows. 
        :type selectedRows: list of :py:class:`NXOpen.DisplayableObject` 
        :param insertRowsInTabularNote:  position of table row to be inserted in the table. 
        :type insertRowsInTabularNote: :py:class:`NXOpen.Annotations.TableInsertRowsType` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def InsertColumns(self, selectedColumns: 'list[NXOpen.DisplayableObject]', insertColumnsInTabularNote: TableInsertColumnsType) -> None:
        """
        Insert Columns 
        
        Signature ``InsertColumns(selectedColumns, insertColumnsInTabularNote)`` 
        
        :param selectedColumns:  array of selected table column object to insert new rows. 
        :type selectedColumns: list of :py:class:`NXOpen.DisplayableObject` 
        :param insertColumnsInTabularNote:  position of table column to be inserted in the table. 
        :type insertColumnsInTabularNote: :py:class:`NXOpen.Annotations.TableInsertColumnsType` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def InsertHeaderRow(self) -> None:
        """
        Insert Header Row 
        
        Signature ``InsertHeaderRow()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def IsRowLocked(self, row: NXOpen.DisplayableObject) -> bool:
        """
        Check Row Lock/Unlock Status  
        
        Signature ``IsRowLocked(row)`` 
        
        :param row: 
        :type row: :py:class:`NXOpen.DisplayableObject` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Null: Table = ...  # unknown typename


class HoleTable(Table):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleTable`.  
    
    This class represents a hole table.
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.HoleTableBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Update(self) -> None:
        """
        Update hole table 
        
        Signature ``Update()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Null: HoleTable = ...  # unknown typename


class AnnotationManager():
    """
    Represents an object that manages annotation and PMI (Product and Manufacturing Information) 
    display instance objects.  
    
    This class contains the collection objects for creating and iterating over annotations and PMI
    display instances. 
    To obtain an instance of this class, refer to :py:class:`NXOpen.BasePart`
    
    .. versionadded:: NX3.0.0
    """
    
    def CreateNote(self, textLines: 'list[str]', origin: NXOpen.Point3d, orientation: NXOpen.AxisOrientation, letteringPreferences: LetteringPreferences, userSymbolPreferences: UserSymbolPreferences) -> Note:
        """
        Creates a note  
        
        Signature ``CreateNote(textLines, origin, orientation, letteringPreferences, userSymbolPreferences)`` 
        
        :param textLines:  text for the note  
        :type textLines: list of str 
        :param origin:  origin for the note  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param orientation:  determines whether the note will be horizontal or vertical  
        :type orientation: :py:class:`NXOpen.AxisOrientation` 
        :param letteringPreferences:                      lettering preferences.  If None, the global lettering preferences will be used  
        :type letteringPreferences: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        :param userSymbolPreferences:                      user symbol preferences.  If None, the scale and aspect ratio will be set to 1.0  
        :type userSymbolPreferences: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        :returns:  the new note  
        :rtype: :py:class:`NXOpen.Annotations.Note` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertToLineWeld(self, draftingAid: LineWeld, keepDraftingAid: bool, leader: LeaderBundle) -> LineWeld:
        """
        Converts a simple drafting aid into a line weld by creating a new line weld
        using the text, origin, and preferences from the drafting aid.  
        
        If there are other annotations that are dependent on the drafting aid,
        (for example, a line weld that has a leader attached to the drafting aid),
        those dependencies will NOT be copied over.  
        
        Signature ``ConvertToLineWeld(draftingAid, keepDraftingAid, leader)`` 
        
        :param draftingAid:  the drafting aid to convert  
        :type draftingAid: :py:class:`NXOpen.Annotations.LineWeld` 
        :param keepDraftingAid:  whether to keep the drafting aid.  If false,                                    the drafting aid will be deleted  
        :type keepDraftingAid: bool 
        :param leader:  specifies the leaders for the new label.                    The leader type must be Plain, Around, PlainAligned, or AroundAligned.                    To use any other type of leader, you must create a GDT instead.  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  the new line weld  
        :rtype: :py:class:`NXOpen.Annotations.LineWeld` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertToNote(self, draftingAid: SimpleDraftingAid, keepDraftingAid: bool) -> Note:
        """
        Converts a simple drafting aid into a note by creating a new note
        using the text, origin, and preferences from the drafting aid.  
        
        If there are other annotations that are dependent on the drafting aid,
        (for example, a label that has a leader attached to the drafting aid),
        those dependencies will NOT be copied over.  
        
        Signature ``ConvertToNote(draftingAid, keepDraftingAid)`` 
        
        :param draftingAid:  the drafting aid to convert  
        :type draftingAid: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        :param keepDraftingAid:  whether to keep the drafting aid.  If false,                                    the drafting aid will be deleted  
        :type keepDraftingAid: bool 
        :returns:  the new note  
        :rtype: :py:class:`NXOpen.Annotations.Note` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertToLabel(self, draftingAid: SimpleDraftingAid, keepDraftingAid: bool, leader: LeaderBundle) -> Label:
        """
        Converts a simple drafting aid into a label by creating a new label
        using the text, origin, and preferences from the drafting aid.  
        
        If there are other annotations that are dependent on the drafting aid,
        (for example, a label that has a leader attached to the drafting aid),
        those dependencies will NOT be copied over.  
        
        Signature ``ConvertToLabel(draftingAid, keepDraftingAid, leader)`` 
        
        :param draftingAid:  the drafting aid to convert  
        :type draftingAid: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        :param keepDraftingAid:  whether to keep the drafting aid.  If false,                                    the drafting aid will be deleted  
        :type keepDraftingAid: bool 
        :param leader:  specifies the leaders for the new label.                    The leader type must be Plain, Around, PlainAligned, or AroundAligned.                    To use any other type of leader, you must create a GDT instead.  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  the new label  
        :rtype: :py:class:`NXOpen.Annotations.Label` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertToGdt(self, draftingAid: SimpleDraftingAid, keepDraftingAid: bool, leader: LeaderBundle) -> Gdt:
        """
        Converts a simple drafting aid into a GDT by creating a new GDT
        using the text, origin, and preferences from the drafting aid.  
        
        If there are other annotations that are dependent on the drafting aid,
        (for example, a label that has a leader attached to the drafting aid),
        those dependencies will NOT be copied over.  
        
        Signature ``ConvertToGdt(draftingAid, keepDraftingAid, leader)`` 
        
        :param draftingAid:  the drafting aid to convert  
        :type draftingAid: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        :param keepDraftingAid:  whether to keep the drafting aid.  If false,                                    the drafting aid will be deleted  
        :type keepDraftingAid: bool 
        :param leader:  specifies the leaders for the new GDT  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  the new GDT  
        :rtype: :py:class:`NXOpen.Annotations.Gdt` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertToIdSymbol(self, draftingAid: SimpleDraftingAid, keepDraftingAid: bool, leader: LeaderBundle) -> SimpleDraftingAid:
        """
        Converts a simple drafting aid into an ID symbol by creating a new
        ID symbol using the text, origin, and preferences from the drafting aid.  
        
        If there are other annotations that are dependent on the drafting aid,
        (for example, a label that has a leader attached to the drafting aid),
        those dependencies will NOT be copied over.  
        
        Signature ``ConvertToIdSymbol(draftingAid, keepDraftingAid, leader)`` 
        
        :param draftingAid:  the drafting aid to convert  
        :type draftingAid: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        :param keepDraftingAid:  whether to keep the drafting aid.  If false,                                    the drafting aid will be deleted  
        :type keepDraftingAid: bool 
        :param leader:  specifies the leaders for the new ID Symbol  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  the new ID Symbol  
        :rtype: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateLabel(self, textLines: 'list[str]', origin: NXOpen.Point3d, letteringPreferences: LetteringPreferences, userSymbolPreferences: UserSymbolPreferences, lineArrowPreferences: LineAndArrowPreferences, leader: LeaderBundle) -> Label:
        """
        Creates a label.  
        
        The leader type must be Plain, Around, PlainAligned, or AroundAligned.
        To use any other type of leader, you must create a GDT instead.  
        
        Signature ``CreateLabel(textLines, origin, letteringPreferences, userSymbolPreferences, lineArrowPreferences, leader)`` 
        
        :param textLines:  text for the label  
        :type textLines: list of str 
        :param origin:  origin for the label  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param letteringPreferences:                      lettering preferences.  If None, the global lettering preferences will be used  
        :type letteringPreferences: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        :param userSymbolPreferences:                      user symbol preferences.  If None, the scale and aspect ratio will be set to 1.0  
        :type userSymbolPreferences: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        :param lineArrowPreferences:                      line and arrow preferences.  If None, the global line and arrow preferences will be used  
        :type lineArrowPreferences: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        :param leader:  specifies the leaders for the label  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  the new label  
        :rtype: :py:class:`NXOpen.Annotations.Label` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateGdt(self, textLines: 'list[str]', origin: NXOpen.Point3d, letteringPreferences: LetteringPreferences, userSymbolPreferences: UserSymbolPreferences, lineArrowPreferences: LineAndArrowPreferences, alwaysVertical: bool, leader: LeaderBundle) -> Gdt:
        """
        Creates a GDT symbol  
        
        Signature ``CreateGdt(textLines, origin, letteringPreferences, userSymbolPreferences, lineArrowPreferences, alwaysVertical, leader)`` 
        
        :param textLines:  text for the GDT  
        :type textLines: list of str 
        :param origin:  origin for the GDT  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param letteringPreferences:                      lettering preferences.  If None, the global lettering preferences will be used  
        :type letteringPreferences: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        :param userSymbolPreferences:                      user symbol preferences.  If None, the scale and aspect ratio will be set to 1.0  
        :type userSymbolPreferences: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        :param lineArrowPreferences:                      line and arrow preferences.  If None, the global line and arrow preferences will be used  
        :type lineArrowPreferences: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        :param alwaysVertical: 
        :type alwaysVertical: bool 
        :param leader:  specifies the leaders for the GDT.                    The following leader types are not valid for GDT symbols:                    PlainNostub and AlignedNostub  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  the new GDT  
        :rtype: :py:class:`NXOpen.Annotations.Gdt` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def NewUserSymbolPreferences(self, type: UserSymbolPreferencesSizeType, lengthOrScale: float, heightOrAspectRatio: float) -> UserSymbolPreferences:
        """
        Constructs a new UserSymbolPreferences object  
        
        Signature ``NewUserSymbolPreferences(type, lengthOrScale, heightOrAspectRatio)`` 
        
        :param type:  Whether to use length and height or scale and aspect ratio  
        :type type: :py:class:`NXOpen.Annotations.UserSymbolPreferencesSizeType` 
        :param lengthOrScale:  Length or scale  
        :type lengthOrScale: float 
        :param heightOrAspectRatio:  Height or aspect ratio  
        :type heightOrAspectRatio: float 
        :returns:  the new object  
        :rtype: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewLeaderBundle(self) -> LeaderBundle:
        """
        Constructs a new LeaderBundle object  
        
        Signature ``NewLeaderBundle()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LeaderBundle` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def LoadSymbolFontFromSbfFile(self, symbolName: str) -> tuple:
        """
        Loads a symbol font from the current symbol font definition file  
        
        Signature ``LoadSymbolFontFromSbfFile(symbolName)`` 
        
        :param symbolName:  name of the symbol  
        :type symbolName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (symbolFont, symbolWidth, symbolHeight). symbolFont is a :py:class:`NXOpen.SymbolFont`. symbolWidth is a float. symbolHeight is a float. 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ReadAllSymbolNamesFromSbfFile(self) -> 'list[str]':
        """
        Reads the names of all symbol fonts in the current symbol font definition file  
        
        Signature ``ReadAllSymbolNamesFromSbfFile()`` 
        
        :returns:  
        array of names of all symbol fonts in the file  
        :rtype: list of str 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveUserSymbolPart(self, symData: MasterCustomSymbolData) -> None:
        """
        Save a new master Custom Symbol file.  
        
        Use builder class :py:class:`NXOpen.Annotations.MasterSymbolBuilder` 
        methods instead of this method.
        
        Signature ``SaveUserSymbolPart(symData)`` 
        
        :param symData:  New master part data  
        :type symData: :py:class:`NXOpen.Annotations.MasterCustomSymbolData` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX7.5.2
           Use :py:class:`NXOpen.Annotations.MasterSymbolBuilder` instead.
        
        License requirements: None.
        """
        ...
    
    
    def NewPmiData(self) -> PmiData:
        """
        Creates a new PmiData object  
        
        Signature ``NewPmiData()`` 
        
        :returns:  New PMIData object  
        :rtype: :py:class:`NXOpen.Annotations.PmiData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewAppendedText(self) -> AppendedText:
        """
        Creates a new AppendedText object  
        
        Signature ``NewAppendedText()`` 
        
        :returns:  New AppendedText object  
        :rtype: :py:class:`NXOpen.Annotations.AppendedText` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewDimensionData(self) -> DimensionData:
        """
        Creates new DimensionData object  
        
        Signature ``NewDimensionData()`` 
        
        :returns:  New DimensionData  object  
        :rtype: :py:class:`NXOpen.Annotations.DimensionData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewAssociativity(self) -> Associativity:
        """
        Creates a new Associativity object  
        
        Signature ``NewAssociativity()`` 
        
        :returns:  New Associativity object  
        :rtype: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewFcfFrame(self) -> FcfFrame:
        """
        Creates a new FcfFrame object  
        
        Signature ``NewFcfFrame()`` 
        
        :returns:  New FcfFrame object  
        :rtype: :py:class:`NXOpen.Annotations.FcfFrame` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewDatumReference(self) -> DatumReference:
        """
        Creates a new DatumReference object  
        
        Signature ``NewDatumReference()`` 
        
        :returns:  New DatumReference object  
        :rtype: :py:class:`NXOpen.Annotations.DatumReference` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewMasterCustomSymbolData(self) -> MasterCustomSymbolData:
        """
        Creates a new MasterCustomSymbolData object  
        
        Signature ``NewMasterCustomSymbolData()`` 
        
        :returns:  New MasterCustomSymbolData object  
        :rtype: :py:class:`NXOpen.Annotations.MasterCustomSymbolData` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX9.0.0
           Use :py:class:`NXOpen.Annotations.MasterSymbolBuilder` instead.
        
        License requirements: None.
        """
        ...
    
    
    def GetDefaultAnnotationPlane(self, jaDefaultPlane: PmiDefaultPlane) -> NXOpen.Xform:
        """
        Returns the default annotation plane for the specified part  
        
        Signature ``GetDefaultAnnotationPlane(jaDefaultPlane)`` 
        
        :param jaDefaultPlane: 
        :type jaDefaultPlane: :py:class:`NXOpen.Annotations.PmiDefaultPlane` 
        :returns: 
        :rtype: :py:class:`NXOpen.Xform` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateQueryPmiBuilder(self) -> QueryPmiBuilder:
        """
        Creates the Query PMI builder  
        
        Signature ``CreateQueryPmiBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.QueryPmiBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def QueryPmiFromGeometry(self, geom: 'list[NXOpen.DisplayableObject]') -> 'list[Annotation]':
        """
        Finds all PMI symbols that reference the given geometry as an 
        associated object.  
        
        The geometry types supported are limited
        to those supported by :py:class:`NXOpen.Annotations.AssociatedObject`. 
        
        Signature ``QueryPmiFromGeometry(geom)`` 
        
        :param geom:  Geometry to be searched  
        :type geom: list of :py:class:`NXOpen.DisplayableObject` 
        :returns:  PMI symbols that reference the geometry  
        :rtype: list of :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateQueryView(self, pmiSymbols: 'list[Annotation]') -> NXOpen.ModelingView:
        """
        Creates a model view displaying the given PMI symbols.  
        
        This method would ordinarily be invoked with the PMI
        symbols resulting from a call to 
        :py:meth:`NXOpen.Annotations.AnnotationManager.QueryPmiFromGeometry`.  
        
        Signature ``CreateQueryView(pmiSymbols)`` 
        
        :param pmiSymbols:  List of PMI symbols, ordinarily from a geometry query  
        :type pmiSymbols: list of :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  Model view displaying the given PMI symbols  
        :rtype: :py:class:`NXOpen.ModelingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def NewFcfFrameData(self) -> FcfFrameData:
        """
        Creates a new Fcf Frame Data object  
        
        Signature ``NewFcfFrameData()`` 
        
        :returns:  New Fcf Frame Data object  
        :rtype: :py:class:`NXOpen.Annotations.FcfFrameData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateAssociativityBuilder(self, dimension: Dimension, assocIndex: int) -> AssociativityBuilder:
        """
        Creates the Dimension Associativity builder  
        
        Signature ``CreateAssociativityBuilder(dimension, assocIndex)`` 
        
        :param dimension:  :py:class:`NXOpen.Annotations.Dimension` to be edited  
        :type dimension: :py:class:`NXOpen.Annotations.Dimension` 
        :param assocIndex:  Associativity index  
        :type assocIndex: int 
        :returns:  AssociateDimensionBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.AssociativityBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateAssociateDimensionBuilder(self, dimension: Dimension) -> AssociateDimensionBuilder:
        """
        Creates the Dimension Associativity builder  
        
        Signature ``CreateAssociateDimensionBuilder(dimension)`` 
        
        :param dimension:  :py:class:`NXOpen.Annotations.Dimension` to be edited  
        :type dimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  AssociateDimensionBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.AssociateDimensionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateLeaderData(self) -> LeaderData:
        """
        Creates a :py:class:`NXOpen.Annotations.LeaderData`  
        
        Signature ``CreateLeaderData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MakePmi(self, annotation: Annotation) -> None:
        """
        Flag the annotation as PMI object.  
        
        Once flagged,
        the annotation particiaptes in all PMI specific 
        behaviors, so you can manage it from Part Navigator, 
        inherit on a drawing view, control its display in 
        different model views etc.. 
        
        Signature ``MakePmi(annotation)`` 
        
        :param annotation:  :py:class:`NXOpen.Annotations.Annotation` to be edited  
        :type annotation: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def RemovePmi(self, annotation: Annotation) -> None:
        """
        Remove PMI flag from annotation.  
        
        After the flag is removed, 
        the annotation can't be managed as PMI. However it retains 
        all its properties. 
        
        Signature ``RemovePmi(annotation)`` 
        
        :param annotation:  :py:class:`NXOpen.Annotations.Annotation` to be edited  
        :type annotation: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateDraftingNoteBuilder(self, annotation: SimpleDraftingAid) -> DraftingNoteBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.DraftingNoteBuilder`  
        
        Signature ``CreateDraftingNoteBuilder(annotation)`` 
        
        :param annotation:  :py:class:`NXOpen.Annotations.SimpleDraftingAid` to be edited  
        :type annotation: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DraftingNoteBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiNoteBuilder(self, annotation: SimpleDraftingAid) -> PmiNoteBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiNoteBuilder`  
        
        Signature ``CreatePmiNoteBuilder(annotation)`` 
        
        :param annotation:  :py:class:`NXOpen.Annotations.SimpleDraftingAid` to be edited  
        :type annotation: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiNoteBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDraftingFeatureControlFrameBuilder(self, fcf: Gdt) -> DraftingFeatureControlFrameBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.DraftingFeatureControlFrameBuilder`  
        
        Signature ``CreateDraftingFeatureControlFrameBuilder(fcf)`` 
        
        :param fcf:  the fcf symbol to be edited,                                                            if None,  then create an fcf symbol  
        :type fcf: :py:class:`NXOpen.Annotations.Gdt` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DraftingFeatureControlFrameBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDraftingDatumTargetBuilder(self, datumTarget: DraftingDatumTarget) -> DraftingDatumTargetBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.DraftingDatumTargetBuilder`  
        
        Signature ``CreateDraftingDatumTargetBuilder(datumTarget)`` 
        
        :param datumTarget:  Datum to edit  
        :type datumTarget: :py:class:`NXOpen.Annotations.DraftingDatumTarget` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DraftingDatumTargetBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiDatumTargetBuilder(self, datumTarget: DatumTarget) -> PmiDatumTargetBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`  
        
        Signature ``CreatePmiDatumTargetBuilder(datumTarget)`` 
        
        :param datumTarget:  Datum to edit  
        :type datumTarget: :py:class:`NXOpen.Annotations.DatumTarget` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiFeatureControlFrameBuilder(self, fcf: Fcf) -> PmiFeatureControlFrameBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiFeatureControlFrameBuilder`  
        
        Signature ``CreatePmiFeatureControlFrameBuilder(fcf)`` 
        
        :param fcf:  the fcf symbol to be edited,                                                            if None,  then create an fcf symbol  
        :type fcf: :py:class:`NXOpen.Annotations.Fcf` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiFeatureControlFrameBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateFeatureControlFrameDataBuilder(self, frame: FeatureControlFrameData) -> FeatureControlFrameDataBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder`  
        
        Signature ``CreateFeatureControlFrameDataBuilder(frame)`` 
        
        :param frame:  the fcf symbol to be edited,                                                                                  if None, then create an fcf symbol  
        :type frame: :py:class:`NXOpen.Annotations.FeatureControlFrameData` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDatumReferenceBuilder(self, datumReference: FcfDatumReference) -> DatumReferenceBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.DatumReferenceBuilder`  
        
        Signature ``CreateDatumReferenceBuilder(datumReference)`` 
        
        :param datumReference:  the datum reference to be edited,                                                                                           if None, then create an fcf symbol  
        :type datumReference: :py:class:`NXOpen.Annotations.FcfDatumReference` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateEmptyDatumReferenceBuilder(self) -> DatumReferenceBuilder:
        """
        Creates a new empty datum reference builder  
        
        Signature ``CreateEmptyDatumReferenceBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCompoundDatumReferenceBuilder(self) -> CompoundDatumReferenceBuilder:
        """
        Creates a new compound datum dialog  
        
        Signature ``CreateCompoundDatumReferenceBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.CompoundDatumReferenceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateEditLeaderBuilder(self, tableTag: NXOpen.DisplayableObject) -> EditLeaderBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.EditLeaderBuilder`  
        
        Signature ``CreateEditLeaderBuilder(tableTag)`` 
        
        :param tableTag:  the table object to edit  
        :type tableTag: :py:class:`NXOpen.DisplayableObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.EditLeaderBuilder` 
        
        .. versionadded:: NX6.0.1
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateComponentData(self, annotationTag: Annotation) -> ComponentData:
        """
        Creates a :py:class:`NXOpen.Annotations.ComponentData` for an annotation.  
        
        Signature ``CreateComponentData(annotationTag)`` 
        
        :param annotationTag:  the annotation whose component data                                                                             will be available with this object  
        :type annotationTag: :py:class:`NXOpen.Annotations.Annotation` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.ComponentData` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetMasterSymbolNameInQaf(self) -> None:
        """
        This method writes master custom symbol name 
        to the predefined quick access folder and saves the part.  
        
        The given part should correspond to the part file of 
        native symbol part file otherwise error will be raised.
        
        Signature ``SetMasterSymbolNameInQaf()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateAssociativeText(self) -> AssociativeText:
        """
        Creates a :py:class:`NXOpen.Annotations.AssociativeText`.  
        
        The :py:class:`NXOpen.Annotations.AssociativeText` instance must be deleted after its use.
        
        Signature ``CreateAssociativeText()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.AssociativeText` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetStandardSymbolTextFont(self) -> str:
        """
        Returns the font to use for displaying symbols with standard fonts.  
        
        Signature ``GetStandardSymbolTextFont()`` 
        
        :returns:  The name of the text font to use for displaying a symbol when using a standard font.  
        :rtype: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetStandardSymbolTextFont(self, symbolTextFontName: str) -> None:
        """
        Signature ``SetStandardSymbolTextFont(symbolTextFontName)`` 
        
        :param symbolTextFontName:  The name of the text font to use for displaying a symbol when using a standard font.  
        :type symbolTextFontName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiTrackingPropertiesBuilder(self) -> PmiTrackingPropertiesBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiTrackingPropertiesBuilder`.  
        
        Signature ``CreatePmiTrackingPropertiesBuilder()`` 
        
        :returns:  PmiTrackingPropertiesBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.PmiTrackingPropertiesBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetParallelToScreen(self, parallelToScreen: bool, annotations: 'list[Annotation]') -> None:
        """
        Sets the parallel to screen status on each input annotation.  
        
        Signature ``SetParallelToScreen(parallelToScreen, annotations)`` 
        
        :param parallelToScreen:  Parallel to Screen Setting  
        :type parallelToScreen: bool 
        :param annotations:  Annotations to be set  
        :type annotations: list of :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateFeatureControlFrameIndicatorBuilder(self) -> FeatureControlFrameIndicatorBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder`  
        
        Signature ``CreateFeatureControlFrameIndicatorBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    CurrentSbfFile: str = ...
    """
    Returns or sets  the symbol font definition file.  
    
    :py:meth:`LoadSymbolFontFromSbfFile`
    will read from this file 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentSbfFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentSbfFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WeldStandard: WeldStandard = ...
    """
    Returns or sets  the weld standard for the part file.  
    
    <hr>
    
    Getter Method
    
    Signature ``WeldStandard`` 
    
    :returns:  Weld standard  
    :rtype: :py:class:`NXOpen.Annotations.WeldStandard` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldStandard`` 
    
    :param standard:  Weld standard  
    :type standard: :py:class:`NXOpen.Annotations.WeldStandard` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Preferences: NXOpen.Preferences.AnnotationPreferences = ...
    """
    Global annotation preferences 
    
    Signature ``Preferences`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.AnnotationPreferences`
    """
    PmiFilters: PmiFilterCollection = ...
    """
    PmiFilter collection 
    
    Signature ``PmiFilters`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiFilterCollection`
    """
    Fcfs: FcfCollection = ...
    """
    Fcf collection 
    
    Signature ``Fcfs`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FcfCollection`
    """
    Datums: GdtDatumCollection = ...
    """
    Datum collection 
    
    Signature ``Datums`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.GdtDatumCollection`
    """
    DatumTargets: DatumTargetCollection = ...
    """
    DatumTarget collection 
    
    Signature ``DatumTargets`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumTargetCollection`
    """
    DraftingDatumTargets: DraftingDatumTargetCollection = ...
    """
    DraftingDatumTarget collection 
    
    Signature ``DraftingDatumTargets`` 
    
    .. versionadded:: NX8.0.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DraftingDatumTargetCollection`
    """
    Welds: WeldCollection = ...
    """
    Weld collection 
    
    Signature ``Welds`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.WeldCollection`
    """
    CustomSymbols: CustomSymbolCollection = ...
    """
    CustomSymbol collection 
    
    Signature ``CustomSymbols`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CustomSymbolCollection`
    """
    IdSymbols: IdSymbolCollection = ...
    """
    IdSymbol collection 
    
    Signature ``IdSymbols`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.IdSymbolCollection`
    """
    BusinessModifiers: BusinessModifierCollection = ...
    """
    BusinessModifier collection 
    
    Signature ``BusinessModifiers`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BusinessModifierCollection`
    """
    OrdinateMargins: OrdinateMarginCollection = ...
    """
    OrdinateMargin collection 
    
    Signature ``OrdinateMargins`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateMarginCollection`
    """
    DimensionSets: DimensionSetCollection = ...
    """
    DimensionSet collection 
    
    Signature ``DimensionSets`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionSetCollection`
    """
    Centerlines: CenterlineCollection = ...
    """
    Centerlines collection 
    
    Signature ``Centerlines`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CenterlineCollection`
    """
    IntersectionSymbols: IntersectionSymbolCollection = ...
    """
    IntersectionSymbol collection 
    
    Signature ``IntersectionSymbols`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.IntersectionSymbolCollection`
    """
    TargetPoints: TargetPointCollection = ...
    """
    TargetPoint collection 
    
    Signature ``TargetPoints`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TargetPointCollection`
    """
    OffsetCenterPoints: OffsetCenterPointCollection = ...
    """
    OffsetCenterPoint collection 
    
    Signature ``OffsetCenterPoints`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OffsetCenterPointCollection`
    """
    Hatches: HatchCollection = ...
    """
    Hatch collection 
    
    Signature ``Hatches`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchCollection`
    """
    DraftingSurfaceFinishSymbols: DraftingSurfaceFinishCollection = ...
    """
    Drafting surface finish collection 
    
    Signature ``DraftingSurfaceFinishSymbols`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DraftingSurfaceFinishCollection`
    """
    PartSymbolFolders: PartSymbolFolderCollection = ...
    """
    Part Symbol Folder collection 
    
    Signature ``PartSymbolFolders`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartSymbolFolderCollection`
    """
    TableSections: TableSectionCollection = ...
    """
    Table section collection 
    
    Signature ``TableSections`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableSectionCollection`
    """
    Tables: TableCollection = ...
    """
    Table collection 
    
    Signature ``Tables`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCollection`
    """
    HoleTables: HoleTableCollection = ...
    """
    Hole Table collection 
    
    Signature ``HoleTables`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableCollection`
    """
    PmiTableSections: PmiTableSectionCollection = ...
    """
    PMI Table collection 
    
    Signature ``PmiTableSections`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiTableSectionCollection`
    """
    FrameBars: FrameBarCollection = ...
    """
    Frame bar collection 
    
    Signature ``FrameBars`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarCollection`
    """
    SymbolFiles: SymbolFileCollection = ...
    """
    Library Symbol collection 
    
    Signature ``SymbolFiles`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SymbolFileCollection`
    """
    DraftingImages: DraftingImageCollection = ...
    """
    Drafting Image collection 
    
    Signature ``DraftingImages`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DraftingImageCollection`
    """
    BendTables: BendTableCollection = ...
    """
    Bend Table collection 
    
    Signature ``BendTables`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BendTableCollection`
    """


class FitDisplayAlignmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FitDisplayAlignment():
    """
    Specifies the limit and fit display alignment 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CenterValue", "Center value"
       "CenterValueAndFit", "Center value and Fit"
       "Bottom", "Bottom"
    """
    CenterValue = 0  # FitDisplayAlignmentMemberType
    CenterValueAndFit = 1  # FitDisplayAlignmentMemberType
    Bottom = 2  # FitDisplayAlignmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IAppendedText(NXOpen.INXObject):
    """
    Represents an object that has appended text   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class AnnotationAssociativeOriginData_Struct():
    """
    Describes the geometry that an annotation's origin
    is associated with .  
    
    Constructor: 
    NXOpen.Annotations.Annotation.AssociativeOriginData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    OriginType: AssociativeOriginType = ...
    """
    Type of associativity 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.AssociativeOriginType`
    """
    View: NXOpen.View = ...
    """
    View of associativity for the annotation.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.RelativeToView <NXOpen.Annotations.AssociativeOriginType>` 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.View`
    """
    ViewOfGeometry: NXOpen.View = ...
    """
    The member view in which the absolute model
    point lies.  
    
    This is used for mapping onto
    the drawing. 
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.RelativeToGeometry <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.View`
    """
    PointOnGeometry: NXOpen.Point = ...
    """
    Absolute point in absolute space the annotation
    is associated with.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Point`
    """
    VertAnnotation: Annotation = ...
    """
    Annotation to align with.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.VerticallyAligned <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.Annotation`
    """
    VertAlignmentPosition: AlignmentPosition = ...
    """
    Alignment position on
    vert_annotation to
    align to.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.VerticallyAligned <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.AlignmentPosition`
    """
    HorizAnnotation: Annotation = ...
    """
    Annotation to align with.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.HorizontallyAligned <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.Annotation`
    """
    HorizAlignmentPosition: AlignmentPosition = ...
    """
    Alignment position on
    horiz_annotation to
    align to.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.HorizontallyAligned <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.AlignmentPosition`
    """
    AlignedAnnotation: Annotation = ...
    """
    Alignment annotation.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AlignedWithArrows <NXOpen.Annotations.AssociativeOriginType>`.
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.Annotation`
    """
    DimensionLine: int = ...
    """
    1 for dimension line 1, 2 for dimension line 2.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AlignedWithArrows <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type:int
    """
    AssociatedView: NXOpen.View = ...
    """
    The member view in  which the absolute model
    point lies.  
    
    This is used for mapping onto
    the drawing.  May be None if annotation is
    on the model or the point is on the drawing.
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AtAPoint <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.View`
    """
    AssociatedPoint: NXOpen.Point = ...
    """
    Origin location of annotation.  
    
    Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AtAPoint <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Point`
    """
    OffsetAnnotation: Annotation = ...
    """
    Annotation to align to.  
    
    :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.Annotation`
    """
    OffsetAlignmentPosition: AlignmentPosition = ...
    """
    Alignment position
    on annotation to
    align with.  
    
    :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.AlignmentPosition`
    """
    XOffsetFactor: float = ...
    """
    X Offset factor from
    associated point.  
    
    :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type:float
    """
    YOffsetFactor: float = ...
    """
    Y Offset factor from
    associated point.  
    
    :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
    <hr>
    
    Field Value
    Type:float
    """
    StackAlignmentPosition: StackAlignmentPosition = ...
    """
    Field Value
    Type::py:class:`NXOpen.Annotations.StackAlignmentPosition`
    """


class Annotation(NXOpen.DisplayableObject):
    """
    Represents an annotation / PMI (Product and Manufacturing Information) display instance 
    object.  
    
    Creation of drafting annotation objects is controlled by drafting license.
    
    Creation of PMI display instance objects is controlled by geometric_tol license.
    
    In all edit methods, the changes are not applied to the system until
    an update is performed.  An update can be performed by calling :py:meth:`Update.DoUpdate`().
    
    This is an abstract class.
    
    .. versionadded:: NX3.0.0
    """
    
    class AssociativeOriginData():
        """
        Describes the geometry that an annotation's origin
        is associated with .  
        
        Constructor: 
        NXOpen.Annotations.Annotation.AssociativeOriginData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        OriginType: AssociativeOriginType = ...
        """
        Type of associativity 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.AssociativeOriginType`
        """
        View: NXOpen.View = ...
        """
        View of associativity for the annotation.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.RelativeToView <NXOpen.Annotations.AssociativeOriginType>` 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.View`
        """
        ViewOfGeometry: NXOpen.View = ...
        """
        The member view in which the absolute model
        point lies.  
        
        This is used for mapping onto
        the drawing. 
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.RelativeToGeometry <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.View`
        """
        PointOnGeometry: NXOpen.Point = ...
        """
        Absolute point in absolute space the annotation
        is associated with.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Point`
        """
        VertAnnotation: Annotation = ...
        """
        Annotation to align with.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.VerticallyAligned <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.Annotation`
        """
        VertAlignmentPosition: AlignmentPosition = ...
        """
        Alignment position on
        vert_annotation to
        align to.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.VerticallyAligned <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.AlignmentPosition`
        """
        HorizAnnotation: Annotation = ...
        """
        Annotation to align with.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.HorizontallyAligned <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.Annotation`
        """
        HorizAlignmentPosition: AlignmentPosition = ...
        """
        Alignment position on
        horiz_annotation to
        align to.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.HorizontallyAligned <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.AlignmentPosition`
        """
        AlignedAnnotation: Annotation = ...
        """
        Alignment annotation.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AlignedWithArrows <NXOpen.Annotations.AssociativeOriginType>`.
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.Annotation`
        """
        DimensionLine: int = ...
        """
        1 for dimension line 1, 2 for dimension line 2.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AlignedWithArrows <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type:int
        """
        AssociatedView: NXOpen.View = ...
        """
        The member view in  which the absolute model
        point lies.  
        
        This is used for mapping onto
        the drawing.  May be None if annotation is
        on the model or the point is on the drawing.
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AtAPoint <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.View`
        """
        AssociatedPoint: NXOpen.Point = ...
        """
        Origin location of annotation.  
        
        Used for :py:class:`NXOpen.Annotations.AssociativeOriginType.AtAPoint <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Point`
        """
        OffsetAnnotation: Annotation = ...
        """
        Annotation to align to.  
        
        :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.Annotation`
        """
        OffsetAlignmentPosition: AlignmentPosition = ...
        """
        Alignment position
        on annotation to
        align with.  
        
        :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Annotations.AlignmentPosition`
        """
        XOffsetFactor: float = ...
        """
        X Offset factor from
        associated point.  
        
        :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type:float
        """
        YOffsetFactor: float = ...
        """
        Y Offset factor from
        associated point.  
        
        :py:class:`NXOpen.Annotations.AssociativeOriginType.OffsetFromText <NXOpen.Annotations.AssociativeOriginType>`
        <hr>
        
        Field Value
        Type:float
        """
        StackAlignmentPosition: StackAlignmentPosition = ...
        """
        Field Value
        Type::py:class:`NXOpen.Annotations.StackAlignmentPosition`
        """
    
    
    def GetAssociativeOrigin(self) -> tuple:
        """
        Overloaded method GetAssociativeOrigin
        
        * ``GetAssociativeOrigin()`` 
        * ``GetAssociativeOrigin()`` 
        
        <hr>
        
        Gets data that specifies the origin's associativity  
        
        Signature ``GetAssociativeOrigin()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (assocOrigin, origin). assocOrigin is a :py:class:`NXOpen.Annotations.AnnotationAssociativeOriginData_Struct`.   associativity data origin is a :py:class:`NXOpen.Point3d`.   coordinates of the origin 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def SetAssociativeOrigin(self, assocOrigin: AnnotationAssociativeOriginData_Struct, origin: NXOpen.Point3d) -> None:
        """
        Associates the annotation's origin to the specified geometry.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociativeOrigin(assocOrigin, origin)`` 
        
        :param assocOrigin:  associativity data  
        :type assocOrigin: :py:class:`NXOpen.Annotations.AnnotationAssociativeOriginData_Struct` 
        :param origin:  coordinates of the origin  
        :type origin: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetLetteringPreferences(self) -> LetteringPreferences:
        """
        Returns the lettering preferences for the annotation  
        
        Signature ``GetLetteringPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLetteringPreferences(self, letteringPrefs: LetteringPreferences) -> None:
        """
        Sets the lettering preferences for the annotation.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetLetteringPreferences(letteringPrefs)`` 
        
        :param letteringPrefs: 
        :type letteringPrefs: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetLineAndArrowPreferences(self) -> LineAndArrowPreferences:
        """
        Returns the line and arrow preferences for the annotation  
        
        Signature ``GetLineAndArrowPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLineAndArrowPreferences(self, lineArrowPrefs: LineAndArrowPreferences) -> None:
        """
        Sets the line and arrow preferences for the annotation.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetLineAndArrowPreferences(lineArrowPrefs)`` 
        
        :param lineArrowPrefs: 
        :type lineArrowPrefs: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetSymbolPreferences(self) -> SymbolPreferences:
        """
        Returns the symbol preferences for the annotation  
        
        Signature ``GetSymbolPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SymbolPreferences` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSymbolPreferences(self, symbolPrefs: SymbolPreferences) -> None:
        """
        Sets the symbol preferences for the annotation.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetSymbolPreferences(symbolPrefs)`` 
        
        :param symbolPrefs: 
        :type symbolPrefs: :py:class:`NXOpen.Annotations.SymbolPreferences` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetAssociativity(self, associativityIndex: int) -> Associativity:
        """
        Returns the associativity at specified index.  
        
        The index starts from 1, and is less than or equal 
        to the return value from :py:meth:`NXOpen.Annotations.Annotation.NumberOfAssociativities`. 
        
        Signature ``GetAssociativity(associativityIndex)`` 
        
        :param associativityIndex:  Associativity index  
        :type associativityIndex: int 
        :returns:  Associativity object  
        :rtype: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociativity(self, associativityIndex: int, associativity: Associativity) -> None:
        """
        Sets the associativity at specified index.  
        
        The index starts from 1, and is less than or equal 
        to the return value from :py:meth:`NXOpen.Annotations.Annotation.NumberOfAssociativities`.
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociativity(associativityIndex, associativity)`` 
        
        :param associativityIndex:  Associativity index  
        :type associativityIndex: int 
        :param associativity:  Associativity object  
        :type associativity: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetInferredAnnotationPlane(self, jaDefaultPlane: PmiDefaultPlane) -> NXOpen.Xform:
        """
        Returns the inferred annotation plane  
        
        Signature ``GetInferredAnnotationPlane(jaDefaultPlane)`` 
        
        :param jaDefaultPlane: 
        :type jaDefaultPlane: :py:class:`NXOpen.Annotations.PmiDefaultPlane` 
        :returns: 
        :rtype: :py:class:`NXOpen.Xform` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetViews(self) -> 'list[NXOpen.View]':
        """
        Returns the views that the PMI display instance object is displayed in
        NOTE: This method is only valid for PMI display instance objects.  
        
        This method will return an empty view list for non-PMI display instance objects.
        This method will return an empty view list if the PMI object is displayed in all views.  
        
        Signature ``GetViews()`` 
        
        :returns:  List of views that PMI display instance object is displayed in  
        :rtype: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetViews(self, modelViews: 'list[NXOpen.View]') -> None:
        """
        Sets the views that the PMI display instance object is displayed in.  
        
        NOTE: This method is only valid for PMI display instance objects.
        This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetViews(modelViews)`` 
        
        :param modelViews:  List of new views to display PMI display instance object in  
        :type modelViews: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def InsertIntoStack(self, stack: Annotation, position: StackAlignmentPosition) -> None:
        """
        Inserts the annotation into a stack.  
        
        Annotations that already reside within a stack cannot be inserted
        into another stack (or the same stack) without first being removed from the stack they are in (attempting
        to do so will result in no changes to the annotation). The "position" parameter controls where in the stack
        the annotation will be inserted relative to the "stack" parameter. It is important to note that stacks have
        a primary column of members. Each member in the primary column can have up to three children (left, right,
        and below). If you stack an annotation above an existing stack member, the existing member becomes a child
        of the newly added member. The top most element in the primary column is the "owner" of the stack and all
        other annotations in the stack move relative to it.
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``InsertIntoStack(stack, position)`` 
        
        :param stack:  Annotation in the stack  
        :type stack: :py:class:`NXOpen.Annotations.Annotation` 
        :param position:  Alignment position  
        :type position: :py:class:`NXOpen.Annotations.StackAlignmentPosition` 
        
        .. versionadded:: NX6.0.1
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def RemoveFromStack(self) -> None:
        """
        Removes the annotation from a stack.  
        
        Annotations that do not reside within a stack are ignored. 
        
        Signature ``RemoveFromStack()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    AnnotationOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin (location) of the annotation.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationOrigin`` 
    
    :returns:  the location  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnnotationOrigin`` 
    
    :param origin:  the new location  
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AnnotationPlane: NXOpen.Xform = ...
    """
    Returns or sets  the annotation plane.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnnotationPlane`` 
    
    :param annotationPlane: 
    :type annotationPlane: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    HasAssociativeOrigin: bool = ...
    """
    Returns  a flag indicating whether the origin is associative 
    
    <hr>
    
    Getter Method
    
    Signature ``HasAssociativeOrigin`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    IsRetained: bool = ...
    """
    Returns  a flag indicating whether the annotation is retained 
    
    <hr>
    
    Getter Method
    
    Signature ``IsRetained`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LeaderOrientation: LeaderOrientation = ...
    """
    Returns or sets  the leader orientation for the annotation.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderOrientation` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderOrientation`` 
    
    :param leaderOrientation: 
    :type leaderOrientation: :py:class:`NXOpen.Annotations.LeaderOrientation` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NumberOfAssociativities: int = ...
    """
    Returns  the number of associativities for the annotation.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfAssociativities`` 
    
    :returns:  Number of associativities  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ParallelToScreen: bool = ...
    """
    Returns or sets  the PMI parallel to screen setting
    
    <hr>
    
    Getter Method
    
    Signature ``ParallelToScreen`` 
    
    :returns:  Parallel to Screen Setting  
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParallelToScreen`` 
    
    :param parallelToScreen:  Parallel to Screen Setting  
    :type parallelToScreen: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: geometric_tol ("GDT")
    """
    Suppressed: bool = ...
    """
    Returns  the flag indicating whether the annotation is suppressed 
    
    <hr>
    
    Getter Method
    
    Signature ``Suppressed`` 
    
    :returns:  Suppression status of annotation  
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: Annotation = ...  # unknown typename


class DimensionMeasurementTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DimensionMeasurementTypes():
    """
    Specifies dimension measurement types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "General", "General"
       "Directed", "Directed"
       "FeatureOfSize", "FeatureOfSize"
    """
    General = 0  # DimensionMeasurementTypesMemberType
    Directed = 1  # DimensionMeasurementTypesMemberType
    FeatureOfSize = 2  # DimensionMeasurementTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Dimension(Annotation, IAppendedText):
    """
    Represents a dimension   
    
    Abstract class
    
    .. versionadded:: NX3.0.0
    """
    
    class MeasurementTypes():
        """
        Specifies dimension measurement types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "General", "General"
           "Directed", "Directed"
           "FeatureOfSize", "FeatureOfSize"
        """
        General = 0  # DimensionMeasurementTypesMemberType
        Directed = 1  # DimensionMeasurementTypesMemberType
        FeatureOfSize = 2  # DimensionMeasurementTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetDimensionPreferences(self) -> DimensionPreferences:
        """
        Returns the dimension preferences  
        
        Signature ``GetDimensionPreferences()`` 
        
        :returns:  Dimenension preferences  
        :rtype: :py:class:`NXOpen.Annotations.DimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDimensionPreferences(self, preferences: DimensionPreferences) -> None:
        """
        Sets the dimension preferences 
        
        Signature ``SetDimensionPreferences(preferences)`` 
        
        :param preferences:  New dimension preferences  
        :type preferences: :py:class:`NXOpen.Annotations.DimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetNarrowDimensionTextOffset(self, narrowTextOffset: float) -> None:
        """
        Sets the narrow dimension text offset for the given chain dimension.  
        
        Signature ``SetNarrowDimensionTextOffset(narrowTextOffset)`` 
        
        :param narrowTextOffset: 
        :type narrowTextOffset: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetNarrowDimensionTextOffset(self) -> float:
        """
        Returns the narrow dimension text offset for the given chain dimension.  
        
        Signature ``GetNarrowDimensionTextOffset()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNarrowDimensionPreferences(self, narrowDimensionData: NarrowDimensionData) -> None:
        """
        Sets the narrow dimension preferences to the given linear dimension.  
        
        Signature ``SetNarrowDimensionPreferences(narrowDimensionData)`` 
        
        :param narrowDimensionData:  New narrow dimension preferences  
        :type narrowDimensionData: :py:class:`NXOpen.Annotations.NarrowDimensionData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetNarrowDimensionPreferences(self) -> NarrowDimensionData:
        """
        Returns the narrow dimension preferences for the given linear dimension.  
        
        Signature ``GetNarrowDimensionPreferences()`` 
        
        :returns:  Narrow dimension preferences  
        :rtype: :py:class:`NXOpen.Annotations.NarrowDimensionData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFirstAssociativity(self) -> Associativity:
        """
        Returns the first associativity data.  
        
        Signature ``GetFirstAssociativity()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFirstAssociativity(self, newAssociativity: Associativity) -> None:
        """
        Sets the first associativity data.  
        
        Signature ``SetFirstAssociativity(newAssociativity)`` 
        
        :param newAssociativity: 
        :type newAssociativity: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondAssociativity(self) -> Associativity:
        """
        Returns the second associativity data.  
        
        Signature ``GetSecondAssociativity()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSecondAssociativity(self, newAssociativity: Associativity) -> None:
        """
        Sets the second associativity data.  
        
        Signature ``SetSecondAssociativity(newAssociativity)`` 
        
        :param newAssociativity: 
        :type newAssociativity: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetComputedSize(self, computedSize: float) -> None:
        """
        Signature ``SetComputedSize(computedSize)`` 
        
        :param computedSize: 
        :type computedSize: float 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX8.0.0
           Use :py:meth:`NXOpen.Annotations.Dimension.SetDimensionText` instead.
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def IsDriving(self) -> bool:
        """
        Determines if a dimension is driving.  
        
        A driving dimension is a dimension that is used to constrain
        geometry created by the sketcher on a drawing. A driving dimension is also referred to as 
        a sketch dimension.  
        
        Signature ``IsDriving()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDimensionText(self, mainTextLines: 'list[str]') -> None:
        """
        Set the main dimension text.  
        
        If the dimension is manual non-numerical text dimension and it has dual dimension, the dual 
        dimension text will also be set with the same text as the main text.
        
        Signature ``SetDimensionText(mainTextLines)`` 
        
        :param mainTextLines:  List of main text lines  
        :type mainTextLines: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetDimensionText(self) -> tuple:
        """
        Returns the dimension text - both the main text and the dual text.  
        
        The returned 
        text may contain just the computed dimension value or manual text including
        the control characters.        
        
        Note that the text doesn't contain the tolerance text, appended text or text for 
        flags like inspection/reference. 
        
        Signature ``GetDimensionText()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (mainTextLines, dualTextLines). mainTextLines is a list of str.   List of main text lines dualTextLines is a list of str.   List of dual text lines 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def IsApproximate(self) -> bool:
        """
        Returns whether or not the given dimension is approximate.  
        
        A dimension is approximate if
        it is attached to lightweight view geometry that doesn't have exact data.  
        
        Signature ``IsApproximate()`` 
        
        :returns:  TRUE, if dimension is approximate. 
        FALSE, if dimension is not approximate. 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetMeasurementType(self) -> DimensionMeasurementTypes:
        """
        Returns  dimension measurement type.  
        
        Signature ``GetMeasurementType()`` 
        
        :returns:  Dimension Measurement Type.  
        :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementTypes` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UnretainForInconsistentSilhouette(self, index: int) -> None:
        """
        Unretain the dimension if it no longer has an inconsistent silhouette as the indexed associativity 
        
        Signature ``UnretainForInconsistentSilhouette(index)`` 
        
        :param index:  index  
        :type index: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetAppendedText(self) -> AppendedText:
        """
        Returns the appended text  
        
        Signature ``GetAppendedText()`` 
        
        :returns:  Appended text  
        :rtype: :py:class:`NXOpen.Annotations.AppendedText` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAppendedText(self, appendedText: AppendedText) -> None:
        """
        Sets the appended text 
        
        Signature ``SetAppendedText(appendedText)`` 
        
        :param appendedText:  Appended text  
        :type appendedText: :py:class:`NXOpen.Annotations.AppendedText` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    ComputedSize: float = ...
    """
    Returns  the computed size of the dimension.  
    
    <hr>
    
    Getter Method
    
    Signature ``ComputedSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    InspectionDimensionFlag: bool = ...
    """
    Returns or sets  a setting to control the inspection box displayed around the dimension value.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionDimensionFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionDimensionFlag`` 
    
    :param inspectionDimensionFlag: 
    :type inspectionDimensionFlag: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IsOriginCentered: bool = ...
    """
    Returns or sets  a flag indicating whether the dimension text is centered
    equally between the extension lines.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated.
    
    <hr>
    
    Getter Method
    
    Signature ``IsOriginCentered`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsOriginCentered`` 
    
    :param isOriginCentered: 
    :type isOriginCentered: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitAnsiHoleType: FitAnsiHoleType = ...
    """
    Returns or sets  the tolerance limit fit ANSI hole type.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :returns:  Limit fit ANSI hole type  
    :rtype: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :param fitHoleType:  New limit fit ANSI hole type  
    :type fitHoleType: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDeviation: str = ...
    """
    Returns or sets  the tolerance limit fit deviation.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDeviation`` 
    
    :returns:  Limit fit deviation  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDeviation`` 
    
    :param fitDeviation:  New limit fit deviation  
    :type fitDeviation: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplayStyle: FitDisplayStyle = ...
    """
    Returns or sets  the tolerance limit fit display style.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :returns:  Limit fit tolerance display style  
    :rtype: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :param fitDisplayStyle:  New limit fit tolerance display style  
    :type fitDisplayStyle: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitEnhancedDisplayType: FitAnsiHoleType = ...
    """
    Returns or sets  the enhanced limit fit display type.  
    
    Used to determine if the tolerance representation is for
    hole, shaft, or fit tolerance (fit meaning both hole and shaft tolerances are displayed).
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitEnhancedDisplayType`` 
    
    :returns:  Limit fit enhanced tolerance display style  
    :rtype: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitEnhancedDisplayType`` 
    
    :param fitEnhancedDisplayType:  New limit fit enhanced tolerance display style  
    :type fitEnhancedDisplayType: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitGrade: int = ...
    """
    Returns or sets  the tolerance limit fit grade.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitGrade`` 
    
    :returns:  Limit fit grade  
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitGrade`` 
    
    :param fitGrade:  New limit fit grade  
    :type fitGrade: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitShaftDeviation: str = ...
    """
    Returns or sets  the deviation for limit fit representation of shaft tolerance
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitShaftDeviation`` 
    
    :returns:  Limit fit shaft deviation  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitShaftDeviation`` 
    
    :param fitShaftDeviation:  New limit fit shaft deviation  
    :type fitShaftDeviation: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitShaftGrade: int = ...
    """
    Returns or sets  the grade for limit fit representation of shaft tolerance
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitShaftGrade`` 
    
    :returns:  Limit fit shaft grade  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitShaftGrade`` 
    
    :param fitShaftGrade:  New limit fit shaft grade  
    :type fitShaftGrade: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LowerMetricToleranceValue: float = ...
    """
    Returns or sets  a setting to control the metric lower tolerance value of a dimension.  
    
    If the dimension is displayed with equal bilateral tolerance type, the lower 
    tolerance value is ignored and this method will return the default tolerance value. 
    
    If the dimension is displayed with unilateral plus tolerance type, the lower tolerance value is
    ignored and this method will return the default tolerance value.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerMetricToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerMetricToleranceValue`` 
    
    :param toleranceValue: 
    :type toleranceValue: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LowerToleranceValue: float = ...
    """
    Returns or sets  a setting to control the lower tolerance value of a dimension.  
    
    If the dimension is displayed with equal bilateral tolerance type, the lower 
    tolerance value is ignored and this method will return the default tolerance value. 
    
    If the dimension is displayed with unilateral plus tolerance type, the lower tolerance value is
    ignored and this method will return the default tolerance value.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceValue`` 
    
    :param upperToleranceValue: 
    :type upperToleranceValue: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    MeasurementDirection: NXOpen.Direction = ...
    """
    Returns or sets  the measurement direction.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementDirection`` 
    
    :returns:  Direction Object 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementDirection`` 
    
    :param direction:  Direction Object 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    MeasurementDirectionView: NXOpen.View = ...
    """
    Returns or sets  the measurement direction view.  
    
    NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementDirectionView`` 
    
    :returns:  View Object 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementDirectionView`` 
    
    :param view:  View Object 
    :type view: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    MetricNominalDecimalPlaces: int = ...
    """
    Returns or sets  a setting to control the number of decimal places for the nominal value of a metric dimension.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``MetricNominalDecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MetricNominalDecimalPlaces`` 
    
    :param decimalPlaces: 
    :type decimalPlaces: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    MetricToleranceDecimalPlaces: int = ...
    """
    Returns or sets  a setting to control the number of decimal places for the metric tolerance value of a dimension.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``MetricToleranceDecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MetricToleranceDecimalPlaces`` 
    
    :param decimalPlaces: 
    :type decimalPlaces: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NominalDecimalPlaces: int = ...
    """
    Returns or sets  a setting to control the number of decimal places for the nominal value of a dimension.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``NominalDecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NominalDecimalPlaces`` 
    
    :param decimalPlaces: 
    :type decimalPlaces: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ReferenceDimensionFlag: bool = ...
    """
    Returns or sets  a setting to control the visibility of the reference parenthesis of a dimension.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDimensionFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDimensionFlag`` 
    
    :param referenceDimensionFlag: 
    :type referenceDimensionFlag: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ShaftLowerToleranceValue: float = ...
    """
    Returns  a setting to control the shaft lower tolerance value of a dimension.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShaftLowerToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    """
    ShaftUpperToleranceValue: float = ...
    """
    Returns  a setting to control the shaft upper tolerance value of a dimension.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShaftUpperToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    """
    ToleranceDecimalPlaces: int = ...
    """
    Returns or sets  a setting to control the number of decimal places for the primary tolerance value of a dimension.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceDecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceDecimalPlaces`` 
    
    :param decimalPlaces: 
    :type decimalPlaces: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceType: ToleranceType = ...
    """
    Returns or sets  a setting to control the tolerance display style.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param toleranceType: 
    :type toleranceType: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UpperMetricToleranceValue: float = ...
    """
    Returns or sets  a setting to control the metric upper tolerance value of a dimension.  
    
    If the dimension is displayed with unilateral minus tolerance type, the upper tolerance value is
    ignored and this method will return the default tolerance value.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperMetricToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperMetricToleranceValue`` 
    
    :param toleranceValue: 
    :type toleranceValue: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UpperToleranceValue: float = ...
    """
    Returns or sets  a setting to control the upper tolerance value of a dimension.  
    
    If the dimension is displayed with unilateral minus tolerance type, the upper tolerance value is 
    ignored and this method will return the default tolerance value.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceValue`` 
    
    :param upperToleranceValue: 
    :type upperToleranceValue: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: Dimension = ...  # unknown typename


class ILinearTolerance(NXOpen.INXObject):
    """
    Represents an object that has linear tolerance   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class IPmi(NXOpen.INXObject):
    """
    Represents an object that has PMI(Product and Manufacturing Information) data.  
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class BaseRadiusDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a radius dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetRadiusDimensionType(self) -> RadiusDimensionType:
        """
        Returns the radius dimension type  
        
        Signature ``GetRadiusDimensionType()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.RadiusDimensionType` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseRadiusDimension = ...  # unknown typename


class GeneralFoldedRadiusDimension(BaseRadiusDimension):
    """
    Represents a folded radius dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralFoldedRadiusDimension = ...  # unknown typename


class PmiFilterFilterTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PmiFilterFilterType():
    """
    Represents a type of PMI filter that can be created using the Part
    Navigator. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ByType", "Specifies a PMI filter defined by a set of PMI types"
       "ByView", "Specifies a PMI filter defined by a set of component model views"
       "ByComponent", "Specifies a PMI filter defined by a set of components"
    """
    ByType = 0  # PmiFilterFilterTypeMemberType
    ByView = 1  # PmiFilterFilterTypeMemberType
    ByComponent = 2  # PmiFilterFilterTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiFilterComponentMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PmiFilterComponentMethod():
    """
    Specifies the type of component method used on the associated
    components for display. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Selected", "Specifies all components will be used"
       "SelectedAndChildren", "Specifies all components and their children will be used"
       "All", "Specifies all components will be used"
    """
    Selected = 0  # PmiFilterComponentMethodMemberType
    SelectedAndChildren = 1  # PmiFilterComponentMethodMemberType
    All = 2  # PmiFilterComponentMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiFilter(NXOpen.NXObject):
    """
    Represents a base class for a PMI filter.  
    
    .. versionadded:: NX4.0.0
    """
    
    class FilterType():
        """
        Represents a type of PMI filter that can be created using the Part
        Navigator. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ByType", "Specifies a PMI filter defined by a set of PMI types"
           "ByView", "Specifies a PMI filter defined by a set of component model views"
           "ByComponent", "Specifies a PMI filter defined by a set of components"
        """
        ByType = 0  # PmiFilterFilterTypeMemberType
        ByView = 1  # PmiFilterFilterTypeMemberType
        ByComponent = 2  # PmiFilterFilterTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ComponentMethod():
        """
        Specifies the type of component method used on the associated
        components for display. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Selected", "Specifies all components will be used"
           "SelectedAndChildren", "Specifies all components and their children will be used"
           "All", "Specifies all components will be used"
        """
        Selected = 0  # PmiFilterComponentMethodMemberType
        SelectedAndChildren = 1  # PmiFilterComponentMethodMemberType
        All = 2  # PmiFilterComponentMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetFilterType(self) -> PmiFilterFilterType:
        """
        Gets the type of PMI filter.  
        
        Signature ``GetFilterType()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiFilterFilterType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetComponents(self) -> 'list[NXOpen.Assemblies.Component]':
        """
        Gets the components associated with the PMI filter.  
        
        Signature ``GetComponents()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetComponents(self, components: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Sets the components associated with the PMI filter.  
        
        Signature ``SetComponents(components)`` 
        
        :param components: 
        :type components: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetComponentMethod(self) -> PmiFilterComponentMethod:
        """
        Gets the component method of the PMI filter.  
        
        Signature ``GetComponentMethod()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiFilterComponentMethod` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetComponentMethod(self, componentMethod: PmiFilterComponentMethod) -> None:
        """
        Sets the component method of the PMI filter.  
        
        Signature ``SetComponentMethod(componentMethod)`` 
        
        :param componentMethod: 
        :type componentMethod: :py:class:`NXOpen.Annotations.PmiFilterComponentMethod` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def ApplyToView(self, view: NXOpen.View) -> None:
        """
        Applies the PMI filter to a view.  
        
        Signature ``ApplyToView(view)`` 
        
        :param view:  Specifies the model view in which the filter is to be applied  
        :type view: :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def RemoveFromView(self, view: NXOpen.View) -> None:
        """
        Removes a PMI filter from a view.  
        
        Signature ``RemoveFromView(view)`` 
        
        :param view:  Specifies the model view in which the filter should be removed  
        :type view: :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAppliedViews(self) -> 'list[NXOpen.View]':
        """
        Gets the views where the PMI filter is applied  
        
        Signature ``GetAppliedViews()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EnableInView(self, view: NXOpen.View, enabled: bool) -> None:
        """
        Enables or disables the PMI filter in a given view 
        
        Signature ``EnableInView(view, enabled)`` 
        
        :param view:  Specifies the model view in which the filter should be enabled or disabled  
        :type view: :py:class:`NXOpen.View` 
        :param enabled:  Specifies the flag indicating that the filter should be enabled 
        :type enabled: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def Copy(self) -> PmiFilter:
        """
        Creates a copy of the PMI filter  
        
        Signature ``Copy()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiFilter` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def IsEnabled(self, view: NXOpen.View) -> bool:
        """
        Determines if the PMI filter is enabled in the view  
        
        Signature ``IsEnabled(view)`` 
        
        :param view:  Specifies the model view to query  
        :type view: :py:class:`NXOpen.View` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePmiDisplay(self) -> None:
        """
        Updates the PMI display in the associated views of the filter
        
        Signature ``UpdatePmiDisplay()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Null: PmiFilter = ...  # unknown typename


class PmiFilterByTypeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PmiFilterByTypeType():
    """
    Represents a PMI type that is assigned to the PMI filter. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Dimension", "Indicates a PMI dimension type"
       "FeatureControlFrame", "Indicates a PMI feature control frame type"
       "Datum", "Indicates a PMI datum feature type"
       "DatumTarget", "Indicates a PMI datum target type"
       "Note", "Indicates a PMI note type"
       "GeneralNote", "Indicates a PMI general note type"
       "SpecificNote", "Indicates a PMI specific note type"
       "CoordinateNote", "Indicates a PMI coordinate note type"
       "BalloonNote", "Indicates a PMI balloon type"
       "CustomSymbol", "Indicates a PMI custom symbol type"
       "Centerline", "Indicates a PMI centerline type"
       "LineWeld", "Indicates a PMI weld type"
       "Crosshatch", "Indicates a PMI crosshatch type"
       "Material", "Indicates a PMI material type"
       "SurfaceFinish", "Indicates a PMI surface finish type"
       "Locator", "Indicates a PMI locator type"
       "EnterpriseIdentifier", "Indicates a PMI enterprise identifier type"
       "Process", "Indicates a PMI process type"
       "PartIdentifier", "Indicates a PMI part identifier type"
       "Emarking", "Indicates a PMI e-Marking type"
       "Url", "Indicates a PMI URL type"
       "UserDefined", "Indicates a PMI user defined type"
       "Geometry", "Indicates a PMI Geometry type"
       "CuttingPlaneSymbol", "Indicates a PMI Cutting Symbol Type"
       "Table", "Indicates a PMI Table Type"
    """
    Dimension = 0  # PmiFilterByTypeTypeMemberType
    FeatureControlFrame = 1  # PmiFilterByTypeTypeMemberType
    Datum = 2  # PmiFilterByTypeTypeMemberType
    DatumTarget = 3  # PmiFilterByTypeTypeMemberType
    Note = 4  # PmiFilterByTypeTypeMemberType
    GeneralNote = 5  # PmiFilterByTypeTypeMemberType
    SpecificNote = 6  # PmiFilterByTypeTypeMemberType
    CoordinateNote = 7  # PmiFilterByTypeTypeMemberType
    BalloonNote = 8  # PmiFilterByTypeTypeMemberType
    CustomSymbol = 9  # PmiFilterByTypeTypeMemberType
    Centerline = 10  # PmiFilterByTypeTypeMemberType
    LineWeld = 11  # PmiFilterByTypeTypeMemberType
    Crosshatch = 12  # PmiFilterByTypeTypeMemberType
    Material = 13  # PmiFilterByTypeTypeMemberType
    SurfaceFinish = 14  # PmiFilterByTypeTypeMemberType
    Locator = 15  # PmiFilterByTypeTypeMemberType
    EnterpriseIdentifier = 16  # PmiFilterByTypeTypeMemberType
    Process = 17  # PmiFilterByTypeTypeMemberType
    PartIdentifier = 18  # PmiFilterByTypeTypeMemberType
    Emarking = 19  # PmiFilterByTypeTypeMemberType
    Url = 20  # PmiFilterByTypeTypeMemberType
    UserDefined = 21  # PmiFilterByTypeTypeMemberType
    Geometry = 22  # PmiFilterByTypeTypeMemberType
    CuttingPlaneSymbol = 23  # PmiFilterByTypeTypeMemberType
    Table = 24  # PmiFilterByTypeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiFilterByType(PmiFilter):
    """
    Represents a PMI filter defined by a set of types.  
    
    .. versionadded:: NX4.0.0
    """
    
    class Type():
        """
        Represents a PMI type that is assigned to the PMI filter. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Dimension", "Indicates a PMI dimension type"
           "FeatureControlFrame", "Indicates a PMI feature control frame type"
           "Datum", "Indicates a PMI datum feature type"
           "DatumTarget", "Indicates a PMI datum target type"
           "Note", "Indicates a PMI note type"
           "GeneralNote", "Indicates a PMI general note type"
           "SpecificNote", "Indicates a PMI specific note type"
           "CoordinateNote", "Indicates a PMI coordinate note type"
           "BalloonNote", "Indicates a PMI balloon type"
           "CustomSymbol", "Indicates a PMI custom symbol type"
           "Centerline", "Indicates a PMI centerline type"
           "LineWeld", "Indicates a PMI weld type"
           "Crosshatch", "Indicates a PMI crosshatch type"
           "Material", "Indicates a PMI material type"
           "SurfaceFinish", "Indicates a PMI surface finish type"
           "Locator", "Indicates a PMI locator type"
           "EnterpriseIdentifier", "Indicates a PMI enterprise identifier type"
           "Process", "Indicates a PMI process type"
           "PartIdentifier", "Indicates a PMI part identifier type"
           "Emarking", "Indicates a PMI e-Marking type"
           "Url", "Indicates a PMI URL type"
           "UserDefined", "Indicates a PMI user defined type"
           "Geometry", "Indicates a PMI Geometry type"
           "CuttingPlaneSymbol", "Indicates a PMI Cutting Symbol Type"
           "Table", "Indicates a PMI Table Type"
        """
        Dimension = 0  # PmiFilterByTypeTypeMemberType
        FeatureControlFrame = 1  # PmiFilterByTypeTypeMemberType
        Datum = 2  # PmiFilterByTypeTypeMemberType
        DatumTarget = 3  # PmiFilterByTypeTypeMemberType
        Note = 4  # PmiFilterByTypeTypeMemberType
        GeneralNote = 5  # PmiFilterByTypeTypeMemberType
        SpecificNote = 6  # PmiFilterByTypeTypeMemberType
        CoordinateNote = 7  # PmiFilterByTypeTypeMemberType
        BalloonNote = 8  # PmiFilterByTypeTypeMemberType
        CustomSymbol = 9  # PmiFilterByTypeTypeMemberType
        Centerline = 10  # PmiFilterByTypeTypeMemberType
        LineWeld = 11  # PmiFilterByTypeTypeMemberType
        Crosshatch = 12  # PmiFilterByTypeTypeMemberType
        Material = 13  # PmiFilterByTypeTypeMemberType
        SurfaceFinish = 14  # PmiFilterByTypeTypeMemberType
        Locator = 15  # PmiFilterByTypeTypeMemberType
        EnterpriseIdentifier = 16  # PmiFilterByTypeTypeMemberType
        Process = 17  # PmiFilterByTypeTypeMemberType
        PartIdentifier = 18  # PmiFilterByTypeTypeMemberType
        Emarking = 19  # PmiFilterByTypeTypeMemberType
        Url = 20  # PmiFilterByTypeTypeMemberType
        UserDefined = 21  # PmiFilterByTypeTypeMemberType
        Geometry = 22  # PmiFilterByTypeTypeMemberType
        CuttingPlaneSymbol = 23  # PmiFilterByTypeTypeMemberType
        Table = 24  # PmiFilterByTypeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetPmiTypes(self) -> 'list[PmiFilterByTypeType]':
        """
        Gets the array of PMI types defined by the PMI filter.  
        
        Signature ``GetPmiTypes()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.PmiFilterByTypeType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPmiTypes(self, types: 'list[PmiFilterByTypeType]') -> None:
        """
        Sets the PMI types on the PMI filter 
        
        Signature ``SetPmiTypes(types)`` 
        
        :param types: 
        :type types: list of :py:class:`NXOpen.Annotations.PmiFilterByTypeType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Null: PmiFilterByType = ...  # unknown typename


class BaseSymbolBuilder(NXOpen.Builder):
    """
    Represents a Base Symbol Builder   
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX6.0.0
    """
    Null: BaseSymbolBuilder = ...  # unknown typename


class CenterlineBuilder(BaseSymbolBuilder):
    """
    Represents a Base Centerline Builder for all types of centerlines   
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX6.0.0
    """
    
    def AddExtension(self, index: int, defaultValue: float) -> None:
        """
        Adds extension based on select object index 
        
        Signature ``AddExtension(index, defaultValue)`` 
        
        :param index:  Index of the selected object  
        :type index: int 
        :param defaultValue:  Default extension value  
        :type defaultValue: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def RemoveExtension(self, index: int) -> None:
        """
        Removes extension based on select object index 
        
        Signature ``RemoveExtension(index)`` 
        
        :param index:  Index of the selected object  
        :type index: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def AddEndExtensions(self, start: float, end: float) -> None:
        """
        Adds extensions only at ends 
        
        Signature ``AddEndExtensions(start, end)`` 
        
        :param start:  Default start extension value  
        :type start: float 
        :param end:  Default end extension value  
        :type end: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def RemoveEndExtensions(self) -> None:
        """
        Removes extensions only at ends 
        
        Signature ``RemoveEndExtensions()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetIndividualExtensions(self, index: int, value1: float, value2: float) -> None:
        """
        Modifies extensions based on select object index 
        
        Signature ``SetIndividualExtensions(index, value1, value2)`` 
        
        :param index:  Index of the selected object  
        :type index: int 
        :param value1:  New extension value at one end  
        :type value1: float 
        :param value2:  New extension value at other end  
        :type value2: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetEndExtensions(self, start: float, end: float) -> None:
        """
        Modifies end extensions only 
        
        Signature ``SetEndExtensions(start, end)`` 
        
        :param start:  New extension value at one end  
        :type start: float 
        :param end:  New extension value at one end  
        :type end: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetEndExtensions(self) -> 'list[float]':
        """
        Returns end extensions only.  
        
        The first and the last extension of the centerline.  
        
        If the builder is a :py:class:`NXOpen.Annotations.BoltCircleCenterlineBuilder` or  :py:class:`NXOpen.Annotations.CircularCenterlineBuilder` and 
        :py:meth:`NXOpen.Annotations.CircleCenterlineSettingsBuilder.IndividualDistance` is false, this will method will return no extensions.
        
        Signature ``GetEndExtensions()`` 
        
        :returns:  Extension values as output 
        :rtype: list of float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetAllIndividualExtensions(self) -> 'list[float]':
        """
        Returns individual extensions.  
        
        This method is applicable only for :py:class:`NXOpen.Annotations.CenterMark` and :py:class:`NXOpen.Annotations.CircleCenterline`.
        
        If the builder is a :py:class:`NXOpen.Annotations.BoltCircleCenterlineBuilder` or  :py:class:`NXOpen.Annotations.CircularCenterlineBuilder` and 
        :py:meth:`NXOpen.Annotations.CircleCenterlineSettingsBuilder.IndividualDistance` is false, this will method will return no extensions.    
        
        Signature ``GetAllIndividualExtensions()`` 
        
        :returns:  Extension values as output 
        :rtype: list of float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetAllIndividualExtensions(self, extensionValues: 'list[float]') -> None:
        """
        Sets all individual extensions 
        
        Signature ``SetAllIndividualExtensions(extensionValues)`` 
        
        :param extensionValues:  Extension values as input 
        :type extensionValues: list of float 
        
        .. versionadded:: NX8.0.1
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetAllExtensions(self) -> 'list[float]':
        """
        Returns all extensions.  
        
        If the builder is a :py:class:`NXOpen.Annotations.BoltCircleCenterlineBuilder` or  :py:class:`NXOpen.Annotations.CircularCenterlineBuilder` and 
        :py:meth:`NXOpen.Annotations.CircleCenterlineSettingsBuilder.IndividualDistance` is false, this will method will return no extensions.    
        
        Signature ``GetAllExtensions()`` 
        
        :returns:  Extension values as output 
        :rtype: list of float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ResetAllExtensions(self, defaultValue: float) -> None:
        """
        Reset all extensions by the supplied defaultValue 
        
        Signature ``ResetAllExtensions(defaultValue)`` 
        
        :param defaultValue:  New extension value  
        :type defaultValue: float 
        
        .. versionadded:: NX6.0.1
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Null: CenterlineBuilder = ...  # unknown typename


class OrdinateDimensionDoglegPreferences_Struct():
    """
    Specifies the ordinate dogleg preferences .  
    
    Constructor: 
    NXOpen.Annotations.OrdinateDimension.DoglegPreferences()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    DoglegSetting: OrdinateDoglegDefinition = ...
    """
    Field Value
    Type::py:class:`NXOpen.Annotations.OrdinateDoglegDefinition`
    """
    Angle: float = ...
    """
    Field Value
    Type:float
    """
    StartOffset: float = ...
    """
    Field Value
    Type:float
    """
    EndOffset: float = ...
    """
    Field Value
    Type:float
    """
    DoglegOption: OrdinateDoglegCreationOption = ...
    """
    Field Value
    Type::py:class:`NXOpen.Annotations.OrdinateDoglegCreationOption`
    """


class OrdinateDimension(Dimension, ILinearTolerance):
    """
    Represents an ordinate dimension   
    
    Abstract class
    
    .. versionadded:: NX4.0.0
    """
    
    class DoglegPreferences():
        """
        Specifies the ordinate dogleg preferences .  
        
        Constructor: 
        NXOpen.Annotations.OrdinateDimension.DoglegPreferences()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        DoglegSetting: OrdinateDoglegDefinition = ...
        """
        Field Value
        Type::py:class:`NXOpen.Annotations.OrdinateDoglegDefinition`
        """
        Angle: float = ...
        """
        Field Value
        Type:float
        """
        StartOffset: float = ...
        """
        Field Value
        Type:float
        """
        EndOffset: float = ...
        """
        Field Value
        Type:float
        """
        DoglegOption: OrdinateDoglegCreationOption = ...
        """
        Field Value
        Type::py:class:`NXOpen.Annotations.OrdinateDoglegCreationOption`
        """
    
    
    def GetDoglegData(self) -> OrdinateDimensionDoglegPreferences_Struct:
        """
        Returns the dogleg data for Ordinate Dimension  
        
        Signature ``GetDoglegData()`` 
        
        :returns:  Dogleg preferences  
        :rtype: :py:class:`NXOpen.Annotations.OrdinateDimensionDoglegPreferences_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDoglegData(self, ordinateDoglegPreferences: OrdinateDimensionDoglegPreferences_Struct) -> None:
        """
        Sets the dogleg data for Ordinate Dimension.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetDoglegData(ordinateDoglegPreferences)`` 
        
        :param ordinateDoglegPreferences:  New dogleg preferences  
        :type ordinateDoglegPreferences: :py:class:`NXOpen.Annotations.OrdinateDimensionDoglegPreferences_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetOrdinateOrigin(self) -> OrdinateOriginDimension:
        """
        Returns the ordinate origin of a given ordinate dimension  
        
        Signature ``GetOrdinateOrigin()`` 
        
        :returns:  Ordinate Origin  
        :rtype: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def NavigateToOrigin(self) -> None:
        """
        Navigates to the ordinate origin of a given ordinate dimension 
        
        Signature ``NavigateToOrigin()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Null: OrdinateDimension = ...  # unknown typename


class HorizontalOrdinateDimension(OrdinateDimension):
    """
    Represents a horizontal ordinate dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.OrdinateDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: HorizontalOrdinateDimension = ...  # unknown typename


class PmiHorizontalOrdinateDimension(HorizontalOrdinateDimension, IPmi):
    """
    Represents a PMI horizontal ordinate dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiOrdinateDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiHorizontalOrdinateDimension = ...  # unknown typename


class VerticalOrdinateDimension(OrdinateDimension):
    """
    Represents a vertical ordinate dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.OrdinateDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: VerticalOrdinateDimension = ...  # unknown typename


class PmiVerticalOrdinateDimension(VerticalOrdinateDimension, IPmi):
    """
    Represents a PMI vertical ordinate dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiOrdinateDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiVerticalOrdinateDimension = ...  # unknown typename


class BaseArrow(Annotation):
    """
    Represents a BaseArrow   
    
    There is no KF creator for this class.
    
    .. versionadded:: NX9.0.0
    """
    Null: BaseArrow = ...  # unknown typename


class DiameterSymbolMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DiameterSymbol():
    """
    Specifies the diameter symbol 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Dia", "Specifies DIA symbol"
       "Standard", "Specifies standard symbol"
       "UserDefined", "Specifies user defined symbol"
       "Spherical", "Specifies spherical symbol"
       "Last", "Last enum value. Should not be used."
    """
    Dia = 0  # DiameterSymbolMemberType
    Standard = 1  # DiameterSymbolMemberType
    UserDefined = 2  # DiameterSymbolMemberType
    Spherical = 3  # DiameterSymbolMemberType
    Last = 4  # DiameterSymbolMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlipOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlipOption():
    """
    Specifies the custom symbol flip option. This option is only available when editing. 
    This option is unavailable for symbols with leaders. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", "Flips a symbol horizontally about a vertical line taken through its anchor point"
       "Vertical", "Flips a symbol vertically about a horizontal line taken through its anchor point"
       "Last", "Last enum value. Should not be used."
    """
    Horizontal = 0  # FlipOptionMemberType
    Vertical = 1  # FlipOptionMemberType
    Last = 2  # FlipOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GdtDatumCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Datum` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def NewDatumData(self) -> DatumData:
        """
        Creates new DatumData object  
        
        Signature ``NewDatumData()`` 
        
        :returns:  New DatumData  
        :rtype: :py:class:`NXOpen.Annotations.DatumData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def CreateDatum(self, datumData: DatumData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> Datum:
        """
        Creates a PMI datum  
        
        Signature ``CreateDatum(datumData, pmiData, annotationPlane, origin, leader)`` 
        
        :param datumData:  Datum data  
        :type datumData: :py:class:`NXOpen.Annotations.DatumData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the datum lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the datum  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the FCF                                     The following leader types are not valid for Datum:                                     PlainNostub and AlignedNostub  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New datum  
        :rtype: :py:class:`NXOpen.Annotations.Datum` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    @typing.overload
    def CreateDatum(self, datumData: DatumData, origin: NXOpen.Point3d, leader: LeaderBundle) -> DraftingDatum:
        """
        Creates a drafting datum  
        
        Signature ``CreateDatum(datumData, origin, leader)`` 
        
        :param datumData:  Datum data  
        :type datumData: :py:class:`NXOpen.Annotations.DatumData` 
        :param origin:  Origin for the datum  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the FCF                                     The following leader types are not valid for Datum:                                     PlainNostub and AlignedNostub  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New datum  
        :rtype: :py:class:`NXOpen.Annotations.DraftingDatum` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateDraftingDatumFeatureSymbolBuilder(self, datum: DraftingDatum) -> DraftingDatumFeatureSymbolBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.DraftingDatumFeatureSymbolBuilder`  
        
        Signature ``CreateDraftingDatumFeatureSymbolBuilder(datum)`` 
        
        :param datum:  Datum to edit  
        :type datum: :py:class:`NXOpen.Annotations.DraftingDatum` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DraftingDatumFeatureSymbolBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiDatumFeatureSymbolBuilder(self, datum: Datum) -> PmiDatumFeatureSymbolBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiDatumFeatureSymbolBuilder`  
        
        Signature ``CreatePmiDatumFeatureSymbolBuilder(datum)`` 
        
        :param datum:  Datum to edit  
        :type datum: :py:class:`NXOpen.Annotations.Datum` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiDatumFeatureSymbolBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    


class DraftingNoteBuilderTextAlignMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingNoteBuilderTextAlign():
    """
    text over leader types for text 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "Align top"
       "Middle", "Align middle"
       "Bottom", "Align bottom"
       "BelowbottomExtToMax", "Align below bottom extension to maximum"
       "BelowbottomExtToMaxUnderline", "Align below bottom extension to maximum and underline"
       "Belowbottom", "Align below bottom"
       "BelowbottomUnderline", "Align below bottom and underline"
       "BelowTopExtToMax", "Align below top extension to maximum"
       "BelowTopExtToMaxUnderline", "Align below top extension to maximum and underline"
       "BelowTop", "Align below top"
       "BelowTopUnderline", "Align below top and underline"
    """
    Top = 0  # DraftingNoteBuilderTextAlignMemberType
    Middle = 1  # DraftingNoteBuilderTextAlignMemberType
    Bottom = 2  # DraftingNoteBuilderTextAlignMemberType
    BelowbottomExtToMax = 3  # DraftingNoteBuilderTextAlignMemberType
    BelowbottomExtToMaxUnderline = 4  # DraftingNoteBuilderTextAlignMemberType
    Belowbottom = 5  # DraftingNoteBuilderTextAlignMemberType
    BelowbottomUnderline = 6  # DraftingNoteBuilderTextAlignMemberType
    BelowTopExtToMax = 7  # DraftingNoteBuilderTextAlignMemberType
    BelowTopExtToMaxUnderline = 8  # DraftingNoteBuilderTextAlignMemberType
    BelowTop = 9  # DraftingNoteBuilderTextAlignMemberType
    BelowTopUnderline = 10  # DraftingNoteBuilderTextAlignMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingNoteBuilderThicknessTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingNoteBuilderThicknessTypes():
    """
    thickness types for text 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Medium", "Medium thickness type"
       "Thick", "Thick thickness type"
    """
    Medium = 0  # DraftingNoteBuilderThicknessTypesMemberType
    Thick = 1  # DraftingNoteBuilderThicknessTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingNoteBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.Note` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateDraftingNoteBuilder`
    
    Default values.
    
    =================================  ===========================================
    Property                           Value
    =================================  ===========================================
    Text.TextBlock.CustomSymbolScale   1.0 
    ---------------------------------  -------------------------------------------
    Text.TextBlock.SymbolAspectRatio   1.0 
    ---------------------------------  -------------------------------------------
    Text.TextBlock.SymbolHeight        25.4 (millimeters part), 1.0 (inches part) 
    ---------------------------------  -------------------------------------------
    Text.TextBlock.SymbolLength        25.4 (millimeters part), 1.0 (inches part) 
    ---------------------------------  -------------------------------------------
    Text.TextBlock.SymbolPreferences   UseCurrent 
    ---------------------------------  -------------------------------------------
    Text.TextBlock.SymbolScale         1.0 
    ---------------------------------  -------------------------------------------
    Text.TextBlock.SymbolSizeMethod    ScaleAndAspectRatio 
    =================================  ===========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class TextAlign():
        """
        text over leader types for text 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "Align top"
           "Middle", "Align middle"
           "Bottom", "Align bottom"
           "BelowbottomExtToMax", "Align below bottom extension to maximum"
           "BelowbottomExtToMaxUnderline", "Align below bottom extension to maximum and underline"
           "Belowbottom", "Align below bottom"
           "BelowbottomUnderline", "Align below bottom and underline"
           "BelowTopExtToMax", "Align below top extension to maximum"
           "BelowTopExtToMaxUnderline", "Align below top extension to maximum and underline"
           "BelowTop", "Align below top"
           "BelowTopUnderline", "Align below top and underline"
        """
        Top = 0  # DraftingNoteBuilderTextAlignMemberType
        Middle = 1  # DraftingNoteBuilderTextAlignMemberType
        Bottom = 2  # DraftingNoteBuilderTextAlignMemberType
        BelowbottomExtToMax = 3  # DraftingNoteBuilderTextAlignMemberType
        BelowbottomExtToMaxUnderline = 4  # DraftingNoteBuilderTextAlignMemberType
        Belowbottom = 5  # DraftingNoteBuilderTextAlignMemberType
        BelowbottomUnderline = 6  # DraftingNoteBuilderTextAlignMemberType
        BelowTopExtToMax = 7  # DraftingNoteBuilderTextAlignMemberType
        BelowTopExtToMaxUnderline = 8  # DraftingNoteBuilderTextAlignMemberType
        BelowTop = 9  # DraftingNoteBuilderTextAlignMemberType
        BelowTopUnderline = 10  # DraftingNoteBuilderTextAlignMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ThicknessTypes():
        """
        thickness types for text 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Medium", "Medium thickness type"
           "Thick", "Thick thickness type"
        """
        Medium = 0  # DraftingNoteBuilderThicknessTypesMemberType
        Thick = 1  # DraftingNoteBuilderThicknessTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InheritProperties(self, annotation: SimpleDraftingAid, recordNumber: int) -> None:
        """
        Inheriting properties from the note  
        
        Signature ``InheritProperties(annotation, recordNumber)`` 
        
        :param annotation: 
        :type annotation: :py:class:`NXOpen.Annotations.SimpleDraftingAid` 
        :param recordNumber: 
        :type recordNumber: int 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the note from which the properties are inherited 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Text: TextWithEditControlsBuilder = ...
    """
    Returns  the text 
    
    <hr>
    
    Getter Method
    
    Signature ``Text`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextWithEditControlsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TextAlignment: DraftingNoteBuilderTextAlign = ...
    """
    Returns or sets  the text alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``TextAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DraftingNoteBuilderTextAlign` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    
    <hr>
    
    Setter Method
    
    Signature ``TextAlignment`` 
    
    :param textAlignment: 
    :type textAlignment: :py:class:`NXOpen.Annotations.DraftingNoteBuilderTextAlign` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    VerticalText: bool = ...
    """
    Returns or sets  the vertical text for text 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalText`` 
    
    :param verticalText: 
    :type verticalText: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: DraftingNoteBuilder = ...  # unknown typename


class PmiNoteBuilder(DraftingNoteBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.Note` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreatePmiNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder`  for note  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiNoteBuilder = ...  # unknown typename


class TextTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextType():
    """
    Specifies the custom symbol text type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Mandatory", "Specifies text defined in the master symbol which can't be modified in the custom symbol."
       "Arbitrary", "Specifies the default text defined in the master symbol which can be modified in the custom symbol. The text can be single or multiple line text."
       "Controlled", "Specifies the text defined in the master symbol as enumerated set of values, one of which can be selected in the custom symbol."
       "PartiallyControlled", "Specifies the text defined in the master symbol as enumerated set of values, one of which can be selected or overwritten in the custom symbol."
       "Integer", "Specifies ther text defined in the master symbol as an integer constrained between maximum and minimum value. An integer value between minimum and maximum can be used in custom symbol."
       "Real", "Specifies ther text defined in the master symbol as an real constrained between maximum and minimum value. An real value between minimum and maximum can be used in the custom symbol."
       "Last", "Last enum value. Should not be used."
    """
    Mandatory = 0  # TextTypeMemberType
    Arbitrary = 1  # TextTypeMemberType
    Controlled = 2  # TextTypeMemberType
    PartiallyControlled = 3  # TextTypeMemberType
    Integer = 4  # TextTypeMemberType
    Real = 5  # TextTypeMemberType
    Last = 6  # TextTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutomaticCenterlineBuilderCenterlineThicknessMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AutomaticCenterlineBuilderCenterlineThickness():
    """
    the types of centerline thickness 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "thin"
       "Normal", "normal"
       "Thick", "thick"
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Thin = 0  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Normal = 1  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Thick = 2  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    One = 6  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Two = 7  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Three = 8  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Four = 9  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Five = 10  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Six = 11  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Seven = 12  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Eight = 13  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    Nine = 14  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutomaticCenterlineBuilder(NXOpen.Builder):
    """
    Builder for creating Automatic Centerlines   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreateAutomaticCenterlineBuilder`
    
    Default values.
    
    =====================  =============================================
    Property               Value
    =====================  =============================================
    CylindricalExtension   1.5 (millimeters part), 0.0625 (inches part) 
    ---------------------  ---------------------------------------------
    InheritAngle           1 
    ---------------------  ---------------------------------------------
    Width                  Thin 
    =====================  =============================================
    
    .. versionadded:: NX6.0.0
    """
    
    class CenterlineThickness():
        """
        the types of centerline thickness 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "thin"
           "Normal", "normal"
           "Thick", "thick"
           "One", "Width One"
           "Two", "Width Two"
           "Three", "Width Three"
           "Four", "Width Four"
           "Five", "Width Five"
           "Six", "Width Six"
           "Seven", "Width Seven"
           "Eight", "Width Eight"
           "Nine", "Width Nine"
        """
        Thin = 0  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Normal = 1  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Thick = 2  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        One = 6  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Two = 7  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Three = 8  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Four = 9  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Five = 10  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Six = 11  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Seven = 12  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Eight = 13  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        Nine = 14  # AutomaticCenterlineBuilderCenterlineThicknessMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CylindricalExtension: float = ...
    """
    Returns or sets  the cylindrical extension 
    
    <hr>
    
    Getter Method
    
    Signature ``CylindricalExtension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CylindricalExtension`` 
    
    :param cylindricalExtension: 
    :type cylindricalExtension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritAngle: bool = ...
    """
    Returns or sets  the inherit angle 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritAngle`` 
    
    :param inheritAngle: 
    :type inheritAngle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Views: NXOpen.Drawings.SelectDraftingViewList = ...
    """
    Returns  the selected views 
    
    <hr>
    
    Getter Method
    
    Signature ``Views`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Width: AutomaticCenterlineBuilderCenterlineThickness = ...
    """
    Returns or sets  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AutomaticCenterlineBuilderCenterlineThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Annotations.AutomaticCenterlineBuilderCenterlineThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: AutomaticCenterlineBuilder = ...  # unknown typename


class DraftingAid(Annotation):
    """
    Represents a drafting aid   
    
    This is an abstract class.
    
    .. versionadded:: NX3.0.0
    """
    Null: DraftingAid = ...  # unknown typename


class SimpleDraftingAid(DraftingAid):
    """
    Represents a simple drafting aid.  
    
    In all edit methods, the changes are not applied to the system until
    an update is performed.  An update can be performed by calling :py:meth:`NXOpen.Update.DoUpdate`.
    
    This is an abstract class.
    
    .. versionadded:: NX3.0.0
    """
    
    def SetText(self, lines: 'list[str]') -> None:
        """
        Sets the drafting aid's text.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.
        NOTE: This method may require an additional update for correct symbol display. 
        
        Signature ``SetText(lines)`` 
        
        :param lines:  the new text  
        :type lines: list of str 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def GetText(self) -> 'list[str]':
        """
        Returns the drafting aid's text  
        
        Signature ``GetText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUserSymbolPreferences(self, usymPrefs: UserSymbolPreferences) -> None:
        """
        Sets the user symbol preferences.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetUserSymbolPreferences(usymPrefs)`` 
        
        :param usymPrefs: 
        :type usymPrefs: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def SetUserSymbolSize(self, sizeType: UserSymbolPreferencesSizeType, lengthOrScale: float, heightOrAspectRatio: float) -> None:
        """
        Sets the user symbol size.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetUserSymbolSize(sizeType, lengthOrScale, heightOrAspectRatio)`` 
        
        :param sizeType:  Whether to use length and height or scale and aspect ratio  
        :type sizeType: :py:class:`NXOpen.Annotations.UserSymbolPreferencesSizeType` 
        :param lengthOrScale: 
        :type lengthOrScale: float 
        :param heightOrAspectRatio: 
        :type heightOrAspectRatio: float 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def GetUserSymbolSize(self) -> tuple:
        """
        Gets the user symbol size 
        
        Signature ``GetUserSymbolSize()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (sizeType, lengthOrScale, heightOrAspectRatio). sizeType is a :py:class:`NXOpen.Annotations.UserSymbolPreferencesSizeType`.   Whether the length and height or scale and aspect ratio is used lengthOrScale is a float. heightOrAspectRatio is a float. 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUserSymbolPreferences(self) -> UserSymbolPreferences:
        """
        Returns the user symbol preferences  
        
        Signature ``GetUserSymbolPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    Null: SimpleDraftingAid = ...  # unknown typename


class NoteBase(SimpleDraftingAid):
    """
    Represents a base class for notes and labels   
    
    This is an abstract class
    
    .. versionadded:: NX3.0.0
    """
    Null: NoteBase = ...  # unknown typename


class Label(NoteBase):
    """
    Represents a label 
    
    To create an instance of this class :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX3.0.0
    """
    Null: Label = ...  # unknown typename


class GeneralLabel(Label):
    """
    Represents a General Label   
    
    To obtain an instance of this class use :py:class:`NXOpen.Annotations.LabelCollection`
    
    .. versionadded:: NX7.5.0
    """
    Null: GeneralLabel = ...  # unknown typename


class MasterCustomSymbolData(NXOpen.TransientObject):
    """
    Represents master custom symbol data   
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:class:`NXOpen.Annotations.MasterSymbolBuilder` instead.
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetGeometry(self, geom: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Specify the geometry for this master custom symbol data.  
        
        Signature ``SetGeometry(geom)`` 
        
        :param geom:  symbol geometry  
        :type geom: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPath(self) -> str:
        """
        Get the path for part name  
        
        Signature ``GetPath()`` 
        
        :returns:   Path  
        :rtype: str 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    
    def SetPath(self, path: str) -> None:
        """
        Set the valid path for part name 
        
        Signature ``SetPath(path)`` 
        
        :param path:  New path  
        :type path: str 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    Anchor: NXOpen.Point = ...
    """
    Returns or sets  the anchor point 
    
    <hr>
    
    Getter Method
    
    Signature ``Anchor`` 
    
    :returns:  Anchor point  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Anchor`` 
    
    :param anchor:  New anchor point  
    :type anchor: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PartName: str = ...
    """
    Returns or sets  the master part name 
    
    <hr>
    
    Getter Method
    
    Signature ``PartName`` 
    
    :returns:   The master part name  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartName`` 
    
    :param name:  New master part name  
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SymbolName: str = ...
    """
    Returns or sets  the symbol name 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolName`` 
    
    :returns:  Symbol name  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolName`` 
    
    :param name:  New symbol name  
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """


class IRectangularTarget(NXOpen.INXObject):
    """
    Represents interface class for a rectangular datum target   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class StubSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StubSymbolType():
    """
    Specifies on what type of symbol is attached to dimension stub 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "AllAround", "All around symbol"
       "AllOver", "All over symbol"
    """
    NotSet = 0  # StubSymbolTypeMemberType
    AllAround = 1  # StubSymbolTypeMemberType
    AllOver = 2  # StubSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseCylindricalDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a cylindrical dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseCylindricalDimension = ...  # unknown typename


class GeneralCylindricalDimension(BaseCylindricalDimension):
    """
    Represents a horizontal dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralCylindricalDimension = ...  # unknown typename


class PmiAttributeValueNumberBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiAttributeValueNumber` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiAttributeValueNumberBuilder`
    
    .. versionadded:: NX6.0.0
    """
    NumberValue: float = ...
    """
    Returns or sets  the number_value 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberValue`` 
    
    :param numberValue: 
    :type numberValue: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiAttributeValueNumberBuilder = ...  # unknown typename


class CircleCenterlineBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CircleCenterlineBuilderTypes():
    """
    the valid enumeration used for the creation types, applicable only while creation
    Once created type centerpoint will be set for all bolt circle/circular centerline
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Through3Points", "Centerline using 3 or More Points Method"
       "Centerpoint", "Centerline using Centerpoint Method"
    """
    Through3Points = 0  # CircleCenterlineBuilderTypesMemberType
    Centerpoint = 1  # CircleCenterlineBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CircleCenterlineBuilder(CenterlineBuilder):
    """
    Represents a CircleCenterline Builder   
    
    This is an abstract class.
    
    Default values.
    
    ============================  ================================================
    Property                      Value
    ============================  ================================================
    Settings.Extension            6.35 (millimeters part), 0.25 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Gap                  1.5875 (millimeters part), 0.0625 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.IndividualDistance   0 
    ----------------------------  ------------------------------------------------
    Settings.Size                 3.175 (millimeters part), 0.125 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Width                Thin 
    ============================  ================================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        the valid enumeration used for the creation types, applicable only while creation
        Once created type centerpoint will be set for all bolt circle/circular centerline
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Through3Points", "Centerline using 3 or More Points Method"
           "Centerpoint", "Centerline using Centerpoint Method"
        """
        Through3Points = 0  # CircleCenterlineBuilderTypesMemberType
        Centerpoint = 1  # CircleCenterlineBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def RemoveLocation(self, index: int) -> None:
        """
        Removes location object for a given index from the Select Object List.  
        
        This method is required for the retained circle centerline case , however the method
        can be used for removing any object from select object list for the Circle Centerline. 
        
        Signature ``RemoveLocation(index)`` 
        
        :param index:  Index of the object in the select object list  
        :type index: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    FullCircle: bool = ...
    """
    Returns or sets  the method which returns full or partial circle flag
    
    <hr>
    
    Getter Method
    
    Signature ``FullCircle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FullCircle`` 
    
    :param fullType: 
    :type fullType: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit object
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Locations: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selction object of the centerline
    
    <hr>
    
    Getter Method
    
    Signature ``Locations`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Settings: CircleCenterlineSettingsBuilder = ...
    """
    Returns  the settings builder object for the centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Settings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CircleCenterlineSettingsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: CircleCenterlineBuilderTypes = ...
    """
    Returns or sets  the method which returns type of centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CircleCenterlineBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Annotations.CircleCenterlineBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: CircleCenterlineBuilder = ...  # unknown typename


class CircularCenterlineBuilder(CircleCenterlineBuilder):
    """
    Represents a CircularCenterlineBuilder Builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreateCircularCenterlineBuilder`
    
    Default values.
    
    ===========  ===============
    Property     Value
    ===========  ===============
    FullCircle   true 
    -----------  ---------------
    Type         Through3Points 
    ===========  ===============
    
    .. versionadded:: NX6.0.0
    """
    Null: CircularCenterlineBuilder = ...  # unknown typename


class ChamferSymbolPlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChamferSymbolPlacement():
    """
    Specifies the chamfer dimension symbol placement 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Specifies no symbol"
       "Prefix", "CHAM 5 x 5"
       "Suffix", "5 x 5 CHAM"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # ChamferSymbolPlacementMemberType
    Prefix = 1  # ChamferSymbolPlacementMemberType
    Suffix = 2  # ChamferSymbolPlacementMemberType
    Last = 3  # ChamferSymbolPlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiWaveCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.PmiWave` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.PmiManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePmiWaveLinkBuilder(self, annotation: Annotation) -> PmiWaveLinkBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiWaveLinkBuilder`  
        
        Signature ``CreatePmiWaveLinkBuilder(annotation)`` 
        
        :param annotation:  the PMI to be WAVE linked  
        :type annotation: :py:class:`NXOpen.Annotations.Annotation` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiWaveLinkBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class StackHorizontalAlignmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StackHorizontalAlignment():
    """
    Specifies the horizontal alignment(left/right alignment) option
    when aligning annotations within a stack 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "Align horizontally along top edge of text box"
       "Middle", "Align horizontally along middle line of text box"
       "Bottom", "Align horizontally along bottom edge of text box"
    """
    Top = 0  # StackHorizontalAlignmentMemberType
    Middle = 1  # StackHorizontalAlignmentMemberType
    Bottom = 2  # StackHorizontalAlignmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IContainer(NXOpen.INXObject):
    """
    Represents an object that contains other objects   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class DimensionSet(Annotation, IContainer):
    """
    Represents a dimension set   
    
    This is an abstract class.
    
    .. versionadded:: NX4.0.0
    """
    
    def AddDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d, autoAdjustNarrowDim: bool) -> Dimension:
        """
        Adds a dimension to the set  
        
        Signature ``AddDimension(dimensionData, origin, autoAdjustNarrowDim)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param autoAdjustNarrowDim:  If narrow dimension should be                                      automatically adjusted  
        :type autoAdjustNarrowDim: bool 
        :returns:  Dimension added to the set  
        :rtype: :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    @typing.overload
    def AddPmiDimension(self, dimensionData: DimensionData, pmiData: PmiData, origin: NXOpen.Point3d, autoAdjustNarrowDim: bool) -> Dimension:
        """
        Adds a PMI dimension to the PMI dimension set. The new dimension is created on the same plane
        as the existing dimensions.  
        
        Signature ``AddPmiDimension(dimensionData, pmiData, origin, autoAdjustNarrowDim)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param autoAdjustNarrowDim:  If narrow dimension should be                                      automatically adjusted  
        :type autoAdjustNarrowDim: bool 
        :returns:  Dimension added to the set  
        :rtype: :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    @typing.overload
    def AddPmiDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, autoAdjustNarrowDim: bool) -> Dimension:
        """
        Adds a PMI dimension to the PMI dimension set. The new dimension is created on the same plane
        as the existing dimensions.  
        
        Signature ``AddPmiDimension(dimensionData, pmiData, annotationPlane, origin, autoAdjustNarrowDim)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimensions lie  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param autoAdjustNarrowDim:  If narrow dimension should be                                      automatically adjusted  
        :type autoAdjustNarrowDim: bool 
        :returns:  Dimension added to the set  
        :rtype: :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def ReverseOffset(self) -> None:
        """
        Reverse the offset of Baseline/Chain Dimension 
        
        Signature ``ReverseOffset()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAllSubDimensions(self) -> 'list[Dimension]':
        """
        Returns all the sub dimensions of this set  
        
        Signature ``GetAllSubDimensions()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the objects in the container  
        
        Signature ``GetObjects()`` 
        
        :returns:  List of objects  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveObject(self, object: NXOpen.NXObject) -> None:
        """
        Removes an object in the container.  
        
        The container object is deleted when
        the last object in it is deleted 
        
        Signature ``RemoveObject(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    DimensionOffset: float = ...
    """
    Returns or sets  the dimension offset 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionOffset`` 
    
    :returns:  Dimension offset  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionOffset`` 
    
    :param dimensionOffset: 
    :type dimensionOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: DimensionSet = ...  # unknown typename


class BaselineDimension(DimensionSet):
    """
    Represents a baseline dimension.  
    
    It is a set of horizontal or vertical
    dimensions. 
    There is no KF creator for this class.
    
    .. versionadded:: NX4.0.0
    """
    Null: BaselineDimension = ...  # unknown typename


class PmiBaselineDimension(BaselineDimension):
    """
    Represents a PMI baseline dimension.  
    
    It is a set of horizontal or vertical
    dimensions. 
    There is no KF creator for this class.
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiBaselineDimension = ...  # unknown typename


class DatumTargetBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DatumTargetBuilderTypes():
    """
    datum symbol type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Point", "point"
       "Line", "point"
       "Rectangular", "rectangular"
       "Circular", "circular"
       "Annular", "annular"
       "Spherical", "spherical"
       "Cylindrical", "cylindrical"
       "Arbitrary", "arbitrary"
    """
    Point = 0  # DatumTargetBuilderTypesMemberType
    Line = 1  # DatumTargetBuilderTypesMemberType
    Rectangular = 2  # DatumTargetBuilderTypesMemberType
    Circular = 3  # DatumTargetBuilderTypesMemberType
    Annular = 4  # DatumTargetBuilderTypesMemberType
    Spherical = 5  # DatumTargetBuilderTypesMemberType
    Cylindrical = 6  # DatumTargetBuilderTypesMemberType
    Arbitrary = 7  # DatumTargetBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DatumTargetBuilderTerminatorTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DatumTargetBuilderTerminatorTypes():
    """
    represents the datum target terminator type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Arrow", "terminated with Arrow only"
       "X", "terminated with x"
       "Plus", "terminated with plus"
    """
    Arrow = 0  # DatumTargetBuilderTerminatorTypesMemberType
    X = 1  # DatumTargetBuilderTerminatorTypesMemberType
    Plus = 2  # DatumTargetBuilderTerminatorTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DatumTargetBuilderStandardTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DatumTargetBuilderStandardTypes():
    """
    represents the datum target standards 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoStandard", "NO_STANDARD"
       "AsmeY145m1982", "ASME_Y145M_1982"
       "AsmeY145m1994", "Y145M_1994"
       "AsmeIso11011983", "ISO 1101 1983"
       "GmAddendum94", "94_GM_ADDENDUM"
       "Asig2000", "ASIG_2000"
       "AsmeY1452009", "ASME_Y145_2009"
    """
    NoStandard = 0  # DatumTargetBuilderStandardTypesMemberType
    AsmeY145m1982 = 1  # DatumTargetBuilderStandardTypesMemberType
    AsmeY145m1994 = 2  # DatumTargetBuilderStandardTypesMemberType
    AsmeIso11011983 = 3  # DatumTargetBuilderStandardTypesMemberType
    GmAddendum94 = 4  # DatumTargetBuilderStandardTypesMemberType
    Asig2000 = 5  # DatumTargetBuilderStandardTypesMemberType
    AsmeY1452009 = 6  # DatumTargetBuilderStandardTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DatumTargetBuilder(NXOpen.Builder):
    """
    Represents a Datum target Builder   
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        datum symbol type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Point", "point"
           "Line", "point"
           "Rectangular", "rectangular"
           "Circular", "circular"
           "Annular", "annular"
           "Spherical", "spherical"
           "Cylindrical", "cylindrical"
           "Arbitrary", "arbitrary"
        """
        Point = 0  # DatumTargetBuilderTypesMemberType
        Line = 1  # DatumTargetBuilderTypesMemberType
        Rectangular = 2  # DatumTargetBuilderTypesMemberType
        Circular = 3  # DatumTargetBuilderTypesMemberType
        Annular = 4  # DatumTargetBuilderTypesMemberType
        Spherical = 5  # DatumTargetBuilderTypesMemberType
        Cylindrical = 6  # DatumTargetBuilderTypesMemberType
        Arbitrary = 7  # DatumTargetBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TerminatorTypes():
        """
        represents the datum target terminator type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Arrow", "terminated with Arrow only"
           "X", "terminated with x"
           "Plus", "terminated with plus"
        """
        Arrow = 0  # DatumTargetBuilderTerminatorTypesMemberType
        X = 1  # DatumTargetBuilderTerminatorTypesMemberType
        Plus = 2  # DatumTargetBuilderTerminatorTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StandardTypes():
        """
        represents the datum target standards 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoStandard", "NO_STANDARD"
           "AsmeY145m1982", "ASME_Y145M_1982"
           "AsmeY145m1994", "Y145M_1994"
           "AsmeIso11011983", "ISO 1101 1983"
           "GmAddendum94", "94_GM_ADDENDUM"
           "Asig2000", "ASIG_2000"
           "AsmeY1452009", "ASME_Y145_2009"
        """
        NoStandard = 0  # DatumTargetBuilderStandardTypesMemberType
        AsmeY145m1982 = 1  # DatumTargetBuilderStandardTypesMemberType
        AsmeY145m1994 = 2  # DatumTargetBuilderStandardTypesMemberType
        AsmeIso11011983 = 3  # DatumTargetBuilderStandardTypesMemberType
        GmAddendum94 = 4  # DatumTargetBuilderStandardTypesMemberType
        Asig2000 = 5  # DatumTargetBuilderStandardTypesMemberType
        AsmeY1452009 = 6  # DatumTargetBuilderStandardTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InheritFrom(self, inheritTag: BaseDatumTarget) -> None:
        """
        The datum target is inherited form existing datum target.  
        
        Signature ``InheritFrom(inheritTag)`` 
        
        :param inheritTag: 
        :type inheritTag: :py:class:`NXOpen.Annotations.BaseDatumTarget` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ReverseMovableModifier(self) -> None:
        """
        Reverses the Movable datum target direction by 180 degree 
        
        Signature ``ReverseMovableModifier()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    AreaSize: str = ...
    """
    Returns or sets  the area size 
    
    <hr>
    
    Getter Method
    
    Signature ``AreaSize`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreaSize`` 
    
    :param areaSize: 
    :type areaSize: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DatumTargetStandard: DatumTargetBuilderStandardTypes = ...
    """
    Returns or sets  the datum target standard.  
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumTargetBuilderStandardTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetStandard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Annotations.DatumTargetBuilderStandardTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DrawX: bool = ...
    """
    Returns or sets  the draw x 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawX`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.DatumTargetBuilder.TerminatorType` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawX`` 
    
    :param flag: 
    :type flag: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.DatumTargetBuilder.TerminatorType` instead.
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Index: int = ...
    """
    Returns or sets  the index 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index: 
    :type index: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    InnerDiameter: NXOpen.Expression = ...
    """
    Returns  the inner diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Label: str = ...
    """
    Returns or sets  the label 
    
    <hr>
    
    Getter Method
    
    Signature ``Label`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Label`` 
    
    :param label: 
    :type label: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Movable: bool = ...
    """
    Returns or sets  the flag that indicates movable .  
    
    If true then movable. 
    
    <hr>
    
    Getter Method
    
    Signature ``Movable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Movable`` 
    
    :param flag: 
    :type flag: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    MovableModifierAngle: NXOpen.Expression = ...
    """
    Returns  the movable modifier angle 
    
    <hr>
    
    Getter Method
    
    Signature ``MovableModifierAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OuterDiameter: NXOpen.Expression = ...
    """
    Returns  the outer diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TerminatorType: DatumTargetBuilderTerminatorTypes = ...
    """
    Returns or sets  the terminator type 
    
    <hr>
    
    Getter Method
    
    Signature ``TerminatorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumTargetBuilderTerminatorTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TerminatorType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.DatumTargetBuilderTerminatorTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Type: DatumTargetBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumTargetBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.DatumTargetBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DatumTargetBuilder = ...  # unknown typename


class DraftingDatumTargetBuilder(DatumTargetBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DraftingDatumTargetBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateDraftingDatumTargetBuilder`
    
    Default values.
    
    ====================  ========================================
    Property              Value
    ====================  ========================================
    Height.Value          10 (millimeters part), 1 (inches part) 
    --------------------  ----------------------------------------
    InnerDiameter.Value   10 (millimeters part), .1 (inches part) 
    --------------------  ----------------------------------------
    OuterDiameter.Value   10 (millimeters part), 1 (inches part) 
    --------------------  ----------------------------------------
    Width.Value           10 (millimeters part), 1 (inches part) 
    ====================  ========================================
    
    .. versionadded:: NX6.0.0
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DraftingDatumTargetBuilder = ...  # unknown typename


class BaseBoltCircleCenterlineBuilder(CircleCenterlineBuilder):
    """
    Represents a Base Bolt Centerline Builder for Pmi and Drafting bolt circle centerline   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX12.0.0
    """
    Null: BaseBoltCircleCenterlineBuilder = ...  # unknown typename


class AddTicBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.AddTicBuilder`.  
    
    This class allows to create Add Tic
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.FrameBarCollection.CreateAddTicBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def SelectTic(self, index: int) -> None:
        """
        Stores index of the tic for adding the tic 
        
        Signature ``SelectTic(index)`` 
        
        :param index:  index of selected tic 
        :type index: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    Null: AddTicBuilder = ...  # unknown typename


class ReplaceSymbolBuilder(NXOpen.Builder):
    """
    Represents a Builder for Replace Custom Symbol functionality   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.CreateReplaceSymbolBuilder`
    
    Default values.
    
    ===========  =====
    Property     Value
    ===========  =====
    ReplaceAll   0 
    ===========  =====
    
    .. versionadded:: NX8.0.1
    """
    IsPartSymbol: bool = ...
    """
    Returns or sets  the flag indicating whether the selected symbol is part symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``IsPartSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsPartSymbol`` 
    
    :param isPartSymbol: 
    :type isPartSymbol: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    ReplaceAll: bool = ...
    """
    Returns or sets  the flag indicating whether to replace all instances of selected symbols 
    
    <hr>
    
    Getter Method
    
    Signature ``ReplaceAll`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReplaceAll`` 
    
    :param replaceAll: 
    :type replaceAll: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    Symbol: SelectBaseCustomSymbolList = ...
    """
    Returns  the symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``Symbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectBaseCustomSymbolList` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    SymbolName: str = ...
    """
    Returns or sets  the symbol name 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolName`` 
    
    :param symbolName: 
    :type symbolName: str 
    
    .. versionadded:: NX8.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolPath: str = ...
    """
    Returns or sets  the symbol path 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolPath`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolPath`` 
    
    :param symbolPath: 
    :type symbolPath: str 
    
    .. versionadded:: NX8.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ReplaceSymbolBuilder = ...  # unknown typename


class AppendedText(NXOpen.TransientObject):
    """
    Represents Appended text   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBeforeText(self) -> 'list[str]':
        """
        Returns the appended text before the annotation  
        
        Signature ``GetBeforeText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBeforeText(self, lines: 'list[str]') -> None:
        """
        Sets the appended text before the annotation 
        
        Signature ``SetBeforeText(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAfterText(self) -> 'list[str]':
        """
        Returns the appended text after the annotation  
        
        Signature ``GetAfterText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAfterText(self, lines: 'list[str]') -> None:
        """
        Sets the appended text after the annotation 
        
        Signature ``SetAfterText(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAboveText(self) -> 'list[str]':
        """
        Returns the appended text above the annotation  
        
        Signature ``GetAboveText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAboveText(self, lines: 'list[str]') -> None:
        """
        Sets the appended text above the annotation 
        
        Signature ``SetAboveText(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBelowText(self) -> 'list[str]':
        """
        Returns the appended text below the annotaton  
        
        Signature ``GetBelowText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBelowText(self, lines: 'list[str]') -> None:
        """
        Sets the appended text below the annotation 
        
        Signature ``SetBelowText(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class PmiAttribute(Annotation):
    """
    Represents a Pmi Attribute   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiAttributeBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttribute = ...  # unknown typename


class LocatorDesignator(PmiAttribute):
    """
    Represents a Locator Designator   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LocatorDesignatorBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: LocatorDesignator = ...  # unknown typename


class Centerline(DraftingAid):
    """
    Represents a drafting centerline   
    
    This is an abstract class.
    
    .. versionadded:: NX6.0.0
    """
    Null: Centerline = ...  # unknown typename


class BaseCenterline3d(Centerline):
    """
    Represents a Base 3D centerline   
    
    This is an abstract class.
    
    .. versionadded:: NX7.5.0
    """
    Null: BaseCenterline3d = ...  # unknown typename


class PmiCenterline3d(BaseCenterline3d, IPmi):
    """
    Represents a Pmi 3D centerline   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiCenterline3dBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiCenterline3d = ...  # unknown typename


class EnterpriseIdentification(PmiAttribute):
    """
    Represents a Enterprise Identification   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.EnterpriseIdentificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: EnterpriseIdentification = ...  # unknown typename


class FeatureControlFrameIndicatorBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[FeatureControlFrameIndicatorBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: FeatureControlFrameIndicatorBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: FeatureControlFrameIndicatorBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> FeatureControlFrameIndicatorBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FeatureControlFrameIndicatorBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FeatureControlFrameIndicatorBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[FeatureControlFrameIndicatorBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[FeatureControlFrameIndicatorBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: FeatureControlFrameIndicatorBuilder, object2: FeatureControlFrameIndicatorBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: FeatureControlFrameIndicatorBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: FeatureControlFrameIndicatorBuilderList = ...  # unknown typename


class ArrowDisplayMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ArrowDisplay():
    """
    Specifies the arrow display option 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "Displays both the arrows"
       "First", "Displays arrow to the first object selected to create the dimension"
       "Second", "Displays arrow to the second object selected to create the dimension"
       "NotSet", "Doesn't display arrows"
       "Last", "Last enum value. Should not be used."
    """
    Two = 0  # ArrowDisplayMemberType
    First = 1  # ArrowDisplayMemberType
    Second = 2  # ArrowDisplayMemberType
    NotSet = 3  # ArrowDisplayMemberType
    Last = 4  # ArrowDisplayMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldBuilderFieldWeldTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldBuilderFieldWeldType():
    """
    Represents the field weld type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plain", " - "
       "TopField", " - "
       "TopFieldSimpleFlag", " - "
    """
    Plain = 0  # LineWeldBuilderFieldWeldTypeMemberType
    TopField = 1  # LineWeldBuilderFieldWeldTypeMemberType
    TopFieldSimpleFlag = 2  # LineWeldBuilderFieldWeldTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldBuilderIdLineTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldBuilderIdLineType():
    """
    Represents the id line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plain", " - "
       "IdLineAbove", " - "
       "IdLineBelow", " - "
       "CenteredSpotWeld", " - "
       "CenteredSeamWeld", " - "
       "Centered", " - "
    """
    Plain = 0  # LineWeldBuilderIdLineTypeMemberType
    IdLineAbove = 1  # LineWeldBuilderIdLineTypeMemberType
    IdLineBelow = 2  # LineWeldBuilderIdLineTypeMemberType
    CenteredSpotWeld = 3  # LineWeldBuilderIdLineTypeMemberType
    CenteredSeamWeld = 4  # LineWeldBuilderIdLineTypeMemberType
    Centered = 5  # LineWeldBuilderIdLineTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldBuilderStaggeredWeldTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldBuilderStaggeredWeldType():
    """
    Represents the staggered weld type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoStaggeredSymbol", " - "
       "StaggeredSymbol", " - "
       "StaggeredSymbolWeldSide", " - "
    """
    NoStaggeredSymbol = 0  # LineWeldBuilderStaggeredWeldTypeMemberType
    StaggeredSymbol = 1  # LineWeldBuilderStaggeredWeldTypeMemberType
    StaggeredSymbolWeldSide = 2  # LineWeldBuilderStaggeredWeldTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldBuilderTailTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldBuilderTailType():
    """
    represents the tail type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoTail", " - "
       "Tail", " - "
       "Box", " - "
    """
    NoTail = 0  # LineWeldBuilderTailTypeMemberType
    Tail = 1  # LineWeldBuilderTailTypeMemberType
    Box = 2  # LineWeldBuilderTailTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldBuilderWeldSymbolWeldAlongContourType():
    """
    Represents the weld along contour option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Closed", " - "
       "Unclosed", " - "
       "TrilateralWeld", " - "
       "AllAround", " - "
    """
    NotSet = 0  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
    Closed = 1  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
    Unclosed = 2  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
    TrilateralWeld = 3  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
    AllAround = 4  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.LineWeldBuilder`    
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.WeldCollection.CreateLineWeldBuilder`
    
    Default values.
    
    ================================  ==================
    Property                          Value
    ================================  ==================
    ArrowSideWeldData.ContourSymbol   None 
    --------------------------------  ------------------
    ArrowSideWeldData.FinishSymbol    None 
    --------------------------------  ------------------
    ArrowSideWeldData.WeldSizeCode    None 
    --------------------------------  ------------------
    ArrowSideWeldData.WeldSymbol      None 
    --------------------------------  ------------------
    FieldWeld                         Plain 
    --------------------------------  ------------------
    FlipDirection                     False 
    --------------------------------  ------------------
    FlipHorizontal                    False 
    --------------------------------  ------------------
    FlipVertical                      False 
    --------------------------------  ------------------
    IdLine                            Plain 
    --------------------------------  ------------------
    Scale                             1 
    --------------------------------  ------------------
    StaggeredWeld                     NoStaggeredSymbol 
    --------------------------------  ------------------
    Tail                              NoTail 
    --------------------------------  ------------------
    WeldAlongContour                  None 
    ================================  ==================
    
    .. versionadded:: NX6.0.0
    """
    
    class FieldWeldType():
        """
        Represents the field weld type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plain", " - "
           "TopField", " - "
           "TopFieldSimpleFlag", " - "
        """
        Plain = 0  # LineWeldBuilderFieldWeldTypeMemberType
        TopField = 1  # LineWeldBuilderFieldWeldTypeMemberType
        TopFieldSimpleFlag = 2  # LineWeldBuilderFieldWeldTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class IdLineType():
        """
        Represents the id line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plain", " - "
           "IdLineAbove", " - "
           "IdLineBelow", " - "
           "CenteredSpotWeld", " - "
           "CenteredSeamWeld", " - "
           "Centered", " - "
        """
        Plain = 0  # LineWeldBuilderIdLineTypeMemberType
        IdLineAbove = 1  # LineWeldBuilderIdLineTypeMemberType
        IdLineBelow = 2  # LineWeldBuilderIdLineTypeMemberType
        CenteredSpotWeld = 3  # LineWeldBuilderIdLineTypeMemberType
        CenteredSeamWeld = 4  # LineWeldBuilderIdLineTypeMemberType
        Centered = 5  # LineWeldBuilderIdLineTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StaggeredWeldType():
        """
        Represents the staggered weld type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoStaggeredSymbol", " - "
           "StaggeredSymbol", " - "
           "StaggeredSymbolWeldSide", " - "
        """
        NoStaggeredSymbol = 0  # LineWeldBuilderStaggeredWeldTypeMemberType
        StaggeredSymbol = 1  # LineWeldBuilderStaggeredWeldTypeMemberType
        StaggeredSymbolWeldSide = 2  # LineWeldBuilderStaggeredWeldTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TailType():
        """
        represents the tail type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoTail", " - "
           "Tail", " - "
           "Box", " - "
        """
        NoTail = 0  # LineWeldBuilderTailTypeMemberType
        Tail = 1  # LineWeldBuilderTailTypeMemberType
        Box = 2  # LineWeldBuilderTailTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WeldSymbolWeldAlongContourType():
        """
        Represents the weld along contour option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Closed", " - "
           "Unclosed", " - "
           "TrilateralWeld", " - "
           "AllAround", " - "
        """
        NotSet = 0  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
        Closed = 1  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
        Unclosed = 2  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
        TrilateralWeld = 3  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
        AllAround = 4  # LineWeldBuilderWeldSymbolWeldAlongContourTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetReference(self) -> 'list[str]':
        """
        Returns the reference or specification text  
        
        Signature ``GetReference()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReference(self, reference: 'list[str]') -> None:
        """
        Sets the reference or specification text
        
        Signature ``SetReference(reference)`` 
        
        :param reference: 
        :type reference: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def InheritProperties(self, annotation: Weld) -> None:
        """
        This inherits the properties from the existing weld symbol 
        
        Signature ``InheritProperties(annotation)`` 
        
        :param annotation: 
        :type annotation: :py:class:`NXOpen.Annotations.Weld` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def InheritPropertiesFromWeldFeature(self, feature: NXOpen.DisplayableObject) -> None:
        """
        This inherits the properties from the existing weld feature 
        
        Signature ``InheritPropertiesFromWeldFeature(feature)`` 
        
        :param feature: 
        :type feature: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    ArrowSideWeldData: LineWeldDataBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LineWeldDataBuilder` for the arrow side of the weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowSideWeldData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldDataBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FieldWeld: LineWeldBuilderFieldWeldType = ...
    """
    Returns or sets  the field indicating the weld is done at the field site 
    
    <hr>
    
    Getter Method
    
    Signature ``FieldWeld`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldBuilderFieldWeldType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FieldWeld`` 
    
    :param fieldWeld: 
    :type fieldWeld: :py:class:`NXOpen.Annotations.LineWeldBuilderFieldWeldType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    FlipDirection: bool = ...
    """
    Returns or sets  the flip direction for top seam
    
    <hr>
    
    Getter Method
    
    Signature ``FlipDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlipDirection`` 
    
    :param flipDirection: 
    :type flipDirection: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    FlipHorizontal: bool = ...
    """
    Returns or sets  the flip horizontal direction for side seam 
    
    <hr>
    
    Getter Method
    
    Signature ``FlipHorizontal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlipHorizontal`` 
    
    :param flipHorizontal: 
    :type flipHorizontal: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    FlipVertical: bool = ...
    """
    Returns or sets  the flip vertical direction for side seam 
    
    <hr>
    
    Getter Method
    
    Signature ``FlipVertical`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlipVertical`` 
    
    :param flipVertical: 
    :type flipVertical: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    IdLine: LineWeldBuilderIdLineType = ...
    """
    Returns or sets  the identification or reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``IdLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldBuilderIdLineType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IdLine`` 
    
    :param idLine: 
    :type idLine: :py:class:`NXOpen.Annotations.LineWeldBuilderIdLineType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the weld symbol from which the style properties are inherited 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.OriginBuilder` for the weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OtherSideWeldData: LineWeldDataBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LineWeldDataBuilder` for the other side of the weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``OtherSideWeldData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldDataBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Scale: float = ...
    """
    Returns or sets  the scaling factor for the welding symbol  
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scale: 
    :type scale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SideSeamObjects: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the side seam object 
    
    <hr>
    
    Getter Method
    
    Signature ``SideSeamObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SpaceFactor: float = ...
    """
    Returns or sets  the space factor for the welding symbol  
    
    <hr>
    
    Getter Method
    
    Signature ``SpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpaceFactor`` 
    
    :param spaceFactor: 
    :type spaceFactor: float 
    
    .. versionadded:: NX7.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    StaggeredWeld: LineWeldBuilderStaggeredWeldType = ...
    """
    Returns or sets  the staggered weld 
    
    <hr>
    
    Getter Method
    
    Signature ``StaggeredWeld`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldBuilderStaggeredWeldType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaggeredWeld`` 
    
    :param staggeredWeld: 
    :type staggeredWeld: :py:class:`NXOpen.Annotations.LineWeldBuilderStaggeredWeldType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Style: StyleBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.StyleBuilder` for the weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Tail: LineWeldBuilderTailType = ...
    """
    Returns or sets  the weld tail 
    
    <hr>
    
    Getter Method
    
    Signature ``Tail`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldBuilderTailType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tail`` 
    
    :param tail: 
    :type tail: :py:class:`NXOpen.Annotations.LineWeldBuilderTailType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    TopSeamObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the top seam object 
    
    <hr>
    
    Getter Method
    
    Signature ``TopSeamObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WeldAlongContour: LineWeldBuilderWeldSymbolWeldAlongContourType = ...
    """
    Returns or sets  the weld along contour option 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldAlongContour`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldBuilderWeldSymbolWeldAlongContourType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldAlongContour`` 
    
    :param alongContour: 
    :type alongContour: :py:class:`NXOpen.Annotations.LineWeldBuilderWeldSymbolWeldAlongContourType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: LineWeldBuilder = ...  # unknown typename


class DatumReference(NXOpen.TransientObject):
    """
    Represents a datum reference   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetMaterialConditionModifiers(self) -> 'list[MaterialConditionModifier]':
        """
        Returns the material condition modifiers  
        
        Signature ``GetMaterialConditionModifiers()`` 
        
        :returns:  List of modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.MaterialConditionModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMaterialConditionModifiers(self, modifiers: 'list[MaterialConditionModifier]') -> None:
        """
        Sets the material condition modifiers 
        
        Signature ``SetMaterialConditionModifiers(modifiers)`` 
        
        :param modifiers:  List of modifiers  
        :type modifiers: list of :py:class:`NXOpen.Annotations.MaterialConditionModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    DatumLabel: str = ...
    """
    Returns or sets  the datum label 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumLabel`` 
    
    :returns:  Datum label  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumLabel`` 
    
    :param label:  New datum label  
    :type label: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class SymbolCatalogParameterBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SymbolCatalogParameterBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SymbolCatalogParameterBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SymbolCatalogParameterBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SymbolCatalogParameterBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SymbolCatalogParameterBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SymbolCatalogParameterBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SymbolCatalogParameterBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SymbolCatalogParameterBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SymbolCatalogParameterBuilder, object2: SymbolCatalogParameterBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SymbolCatalogParameterBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SymbolCatalogParameterBuilderList = ...  # unknown typename


class DatumTargetData(NXOpen.TransientObject):
    """
    Represents datum target data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSimpleDraftingAidPreferences(self) -> SimpleDraftingAidPreferences:
        """
        Returns the SimpleDraftingAidPreferences object  
        
        Signature ``GetSimpleDraftingAidPreferences()`` 
        
        :returns:  Datum target preferences  
        :rtype: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSimpleDraftingAidPreferences(self, preferences: SimpleDraftingAidPreferences) -> None:
        """
        Sets the SimpleDraftingAidPreferences object 
        
        Signature ``SetSimpleDraftingAidPreferences(preferences)`` 
        
        :param preferences:  New datum target preferences  
        :type preferences: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    DatumLabel: str = ...
    """
    Returns or sets  the datum label.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumLabel`` 
    
    :returns:  Datum label  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumLabel`` 
    
    :param datumLabel:  New datum label  
    :type datumLabel: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Index: int = ...
    """
    Returns or sets  the target index.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Target index  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New target index  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class RectangularTargetData(DatumTargetData):
    """
    Represents rectangular datum target data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLength(self) -> Value:
        """
        Returns the length  
        
        Signature ``GetLength()`` 
        
        :returns:  Length data   
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLength(self, length: Value) -> None:
        """
        Sets the length.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetLength(length)`` 
        
        :param length:  New length data  
        :type length: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetWidth(self) -> Value:
        """
        Returns the width  
        
        Signature ``GetWidth()`` 
        
        :returns:  Width data  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidth(self, width: Value) -> None:
        """
        Sets the width.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetWidth(width)`` 
        
        :param width:  New width data  
        :type width: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class PmiUrlNote(PmiAttribute):
    """
    Represents a Pmi url Note   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiUrlNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiUrlNote = ...  # unknown typename


class BendTableBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.BendTableBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.BendTableCollection.CreateBendTableBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AnnotationOrigin: OriginBuilder = ...
    """
    Returns  the bend table origin.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FlatPatternView: NXOpen.Drawings.SelectDraftingView = ...
    """
    Returns  the flat pattern view the bend table is associated to.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlatPatternView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Style: TableStyleBuilder = ...
    """
    Returns  the bend table style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BendTableBuilder = ...  # unknown typename


class BaseArcLengthDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a arc length dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseArcLengthDimension = ...  # unknown typename


class ArcLengthDimension(BaseArcLengthDimension):
    """
    Represents an arc length dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.CurveLengthDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: ArcLengthDimension = ...  # unknown typename


class BaseAngularDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.AngularDimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def AlternateAngle(self) -> None:
        """
        Alternate angle 
        
        Signature ``AlternateAngle()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetFirstAssociativityVectorFlipped(self, firstVectorFlipped: bool) -> None:
        """
        First associativity vector flipped 
        
        Signature ``SetFirstAssociativityVectorFlipped(firstVectorFlipped)`` 
        
        :param firstVectorFlipped: 
        :type firstVectorFlipped: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetSecondAssociativityVectorFlipped(self, secondVectorFlipped: bool) -> None:
        """
        Second associativity vector flipped 
        
        Signature ``SetSecondAssociativityVectorFlipped(secondVectorFlipped)`` 
        
        :param secondVectorFlipped: 
        :type secondVectorFlipped: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetFirstAssociativityVectorFlipped(self) -> bool:
        """
        First associativity vector flipped  
        
        Signature ``GetFirstAssociativityVectorFlipped()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondAssociativityVectorFlipped(self) -> bool:
        """
        Second associativity vector flipped  
        
        Signature ``GetSecondAssociativityVectorFlipped()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FirstAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FirstVector: NXOpen.Direction = ...
    """
    Returns or sets  the first vector 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstVector`` 
    
    :param firstVector: 
    :type firstVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FirstVectorView: NXOpen.View = ...
    """
    Returns or sets  the first vector view
    
    <hr>
    
    Getter Method
    
    Signature ``FirstVectorView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstVectorView`` 
    
    :param firstVectorView: 
    :type firstVectorView: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Inherit: SelectDimension = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectDimension` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MeasurementType: DimensionMeasurementTypes = ...
    """
    Returns or sets  the measurement type
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementType`` 
    
    :param measurementType: 
    :type measurementType: :py:class:`NXOpen.Annotations.DimensionMeasurementTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SecondAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SecondVector: NXOpen.Direction = ...
    """
    Returns or sets  the second vector 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondVector`` 
    
    :param secondVector: 
    :type secondVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondVectorView: NXOpen.View = ...
    """
    Returns or sets  the second vector view
    
    <hr>
    
    Getter Method
    
    Signature ``SecondVectorView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondVectorView`` 
    
    :param firstVectorView: 
    :type firstVectorView: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BaseAngularDimensionBuilder = ...  # unknown typename


class AngularDimensionBuilder(BaseAngularDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.AngularDimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    Driving: DrivingValueBuilder = ...
    """
    Returns  the driving 
    
    <hr>
    
    Getter Method
    
    Signature ``Driving`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: AngularDimensionBuilder = ...  # unknown typename


class MinorAngularDimensionBuilder(AngularDimensionBuilder):
    """
    Represents a :py:class:`Annotations.AngularDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateMinorAngularDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: MinorAngularDimensionBuilder = ...  # unknown typename


class TextPreferencesOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextPreferencesOption():
    """
    Specifies the custom symbol text preferences option.
    This option is only available when creating. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PartLettering", "Specifies current part files's lettering preferences will be used"
       "MasterSymbol", "Specifies master symbol's text preferences will be used"
       "Last", "Last enum value. Should not be used."
    """
    PartLettering = 0  # TextPreferencesOptionMemberType
    MasterSymbol = 1  # TextPreferencesOptionMemberType
    Last = 2  # TextPreferencesOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiAttributeBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiAttribute` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiAttributeBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetAttributeValues(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the attribute values 
        
        Signature ``GetAttributeValues()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAttributeValues(self, attributeValues: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the attribute values
        
        Signature ``SetAttributeValues(attributeValues)`` 
        
        :param attributeValues:  attribute values  
        :type attributeValues: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Attribute: Pmi = ...
    """
    Returns or sets  the :py:class:`NXOpen.Annotations.Pmi` for this annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Attribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.Pmi` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Attribute`` 
    
    :param attribute: 
    :type attribute: :py:class:`NXOpen.Annotations.Pmi` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BusinessModifier: NXOpen.NXObject = ...
    """
    Returns or sets  the business modifier 
    
    <hr>
    
    Getter Method
    
    Signature ``BusinessModifier`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BusinessModifier`` 
    
    :param businessModifier: 
    :type businessModifier: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    KnowledgeFusionClassName: str = ...
    """
    Returns or sets  the knowledge fusion class name file, the default class is UG provided pmi KF class 
    
    <hr>
    
    Getter Method
    
    Signature ``KnowledgeFusionClassName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KnowledgeFusionClassName`` 
    
    :param knowledgeFusionClassName: 
    :type knowledgeFusionClassName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.OriginBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.StyleBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiAttributeBuilder = ...  # unknown typename


class SpecificNoteBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.SpecificNote` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateSpecificNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetText(self) -> 'list[str]':
        """
        Returns the text  
        
        Signature ``GetText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetText(self, text: 'list[str]') -> None:
        """
        Sets the text 
        
        Signature ``SetText(text)`` 
        
        :param text: 
        :type text: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Category: str = ...
    """
    Returns or sets  the category 
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: SpecificNoteBuilder = ...  # unknown typename


class ISlotDimension(NXOpen.INXObject):
    """
    Represents a slot dimension   
    
    .. versionadded:: NX9.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class BaseHorizontalDimension(Dimension, ILinearTolerance, IPmi, ISlotDimension):
    """
    Represents a horizontal dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def IsSlotDimension(self) -> bool:
        """
        Check if the dimension qualifies as a slot dimension.  
        
        Signature ``IsSlotDimension()`` 
        
        :returns:  True if this dimension qualifies as a slot dimension  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ConvertSlotDimensionAssociativity(self) -> bool:
        """
        Convert this dimension's associativity if it is a slot dimension.  
        
        Signature ``ConvertSlotDimensionAssociativity()`` 
        
        :returns:  True if NX can convert this dimension's associativity  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseHorizontalDimension = ...  # unknown typename


class GeneralHorizontalDimension(BaseHorizontalDimension):
    """
    Represents a horizontal dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralHorizontalDimension = ...  # unknown typename


class ShipDimensionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Dimension` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateShipDimensionBuilder(self, dimension: Dimension) -> ShipDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.ShipDimensionBuilder`  
        
        Signature ``CreateShipDimensionBuilder(dimension)`` 
        
        :param dimension:  the ship dimension to be edited,                                                                                                                     if None,  then create a ship dimension   
        :type dimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the ship dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.ShipDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class IAngularTolerance(NXOpen.INXObject):
    """
    Represents an object that has angular tolerance   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class BaseAngularDimension(Dimension, IAngularTolerance):
    """
    Represents an angular dimension   
    
    Abstract class
    
    .. versionadded:: NX9.0.0
    """
    
    def GetTolerance(self) -> AngularTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.AngularTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerances: AngularTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerances)`` 
        
        :param tolerances: 
        :type tolerances: :py:class:`NXOpen.Annotations.AngularTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Null: BaseAngularDimension = ...  # unknown typename


class AngularDimension(BaseAngularDimension):
    """
    Represents an angular dimension   
    
    Abstract class
    
    .. versionadded:: NX4.0.0
    """
    Null: AngularDimension = ...  # unknown typename


class PmiAttributeValueUrlBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiAttributeValueUrl` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiAttributeValueUrlBuilder`
    
    .. versionadded:: NX6.0.0
    """
    UrlValue: str = ...
    """
    Returns or sets  the url_value 
    
    <hr>
    
    Getter Method
    
    Signature ``UrlValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UrlValue`` 
    
    :param urlValue: 
    :type urlValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiAttributeValueUrlBuilder = ...  # unknown typename


class DimensionTextFormatMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DimensionTextFormat():
    """
    Specifies the dimension text format 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Decimal", "Specifies decimal format"
       "HalfSizeFraction", "Specifies 1/2 size fraction format"
       "TwoThirdSizeFraction", "Specfies 2/3 size fraction format"
       "FullSizeFraction", "Specifies full size fraction format"
       "Last", "Last enum value. Should not be used."
    """
    Decimal = 0  # DimensionTextFormatMemberType
    HalfSizeFraction = 1  # DimensionTextFormatMemberType
    TwoThirdSizeFraction = 2  # DimensionTextFormatMemberType
    FullSizeFraction = 3  # DimensionTextFormatMemberType
    Last = 4  # DimensionTextFormatMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FcfCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Fcf` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def NewFcfData(self) -> FcfData:
        """
        Creates new FcfData object  
        
        Signature ``NewFcfData()`` 
        
        :returns:  New FcfData  
        :rtype: :py:class:`NXOpen.Annotations.FcfData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateFcf(self, fcfData: FcfData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> Fcf:
        """
        Creates an FCF  
        
        Signature ``CreateFcf(fcfData, pmiData, annotationPlane, origin, leader)`` 
        
        :param fcfData:  FCF data  
        :type fcfData: :py:class:`NXOpen.Annotations.FcfData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the FCF lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the FCF  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the FCF                                     The following leader types are not valid for FCF:                                     PlainNostub and AlignedNostub  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New FCF  
        :rtype: :py:class:`NXOpen.Annotations.Fcf` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    


class BaseChamferDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a chamfer dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    ChamferOrientation: ChamferOrientationType = ...
    """
    Returns or sets  a value of chamfer dimension linear leader parallel
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ChamferOrientationType` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferOrientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.Annotations.ChamferOrientationType` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseChamferDimension = ...  # unknown typename


class GeneralChamferDimension(BaseChamferDimension):
    """
    Represents a chamfer dimension   
    
    To obtain an instance of this class use :py:class:`NXOpen.Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralChamferDimension = ...  # unknown typename


class LineWeldData(NXOpen.TransientObject):
    """
    Represents line weld data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWeldStandard(self, standard: WeldStandard) -> None:
        """
        Signature ``SetWeldStandard(standard)`` 
        
        :param standard:  New weld standard  
        :type standard: :py:class:`NXOpen.Annotations.WeldStandard` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetArrowSideData(self) -> LineWeldSideData:
        """
        Returns the arrow side data  
        
        Signature ``GetArrowSideData()`` 
        
        :returns:  Arrow side line weld data  
        :rtype: :py:class:`NXOpen.Annotations.LineWeldSideData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArrowSideData(self, arrowSide: LineWeldSideData) -> None:
        """
        Sets the arrow side data 
        
        Signature ``SetArrowSideData(arrowSide)`` 
        
        :param arrowSide:  New arrow side line weld data  
        :type arrowSide: :py:class:`NXOpen.Annotations.LineWeldSideData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOtherSideData(self) -> LineWeldSideData:
        """
        Returns the other side data  
        
        Signature ``GetOtherSideData()`` 
        
        :returns:  Other side line weld data  
        :rtype: :py:class:`NXOpen.Annotations.LineWeldSideData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOtherSideData(self, otherSide: LineWeldSideData) -> None:
        """
        Sets the other side data 
        
        Signature ``SetOtherSideData(otherSide)`` 
        
        :param otherSide:  New other side line weld data  
        :type otherSide: :py:class:`NXOpen.Annotations.LineWeldSideData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetTailSpecificationText(self) -> 'list[str]':
        """
        Returns the tail specification text   
        
        Signature ``GetTailSpecificationText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTailSpecificationText(self, lines: 'list[str]') -> None:
        """
        Sets the tail specification text 
        
        Signature ``SetTailSpecificationText(lines)`` 
        
        :param lines:  List of lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetTopSeamObjects(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns the top seam objects.  
        
        Signature ``GetTopSeamObjects()`` 
        
        :returns:  List of top seam objects  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTopSeamObjects(self, objects: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the top seam objects.  
        
        Following objects are allowed -
        
        Point
        
        Curve
        
        Edge
        
        Signature ``SetTopSeamObjects(objects)`` 
        
        :param objects:  List of new top seam objects  
        :type objects: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSideSeamObjects(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns the side seam objects.  
        
        Signature ``GetSideSeamObjects()`` 
        
        :returns:  List of side seam objects  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSideSeamObjects(self, objects: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the side seam objects.  
        
        Following objects are allowed -
        
        Curve
        
        Edge
        
        Signature ``SetSideSeamObjects(objects)`` 
        
        :param objects:  List of new side seam objects  
        :type objects: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    AllroundSymbol: bool = ...
    """
    Returns or sets  the flag indicating whether the allround symbol is displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``AllroundSymbol`` 
    
    :returns:  Flag indicating whether to display all around symbol  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllroundSymbol`` 
    
    :param allroundSymbol:  Flag indicating whether to display all around symbol  
    :type allroundSymbol: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    CenterSymbol: bool = ...
    """
    Returns or sets  the flag indicating whether the weld symbol is at center of
    reference line, applicable only to spot and seam symbols 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterSymbol`` 
    
    :returns:  Flag indicating the weld symbol at the center of reference line  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterSymbol`` 
    
    :param centerSymbol:  Flag indicating the weld symbol at the center of reference line  
    :type centerSymbol: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FieldWeld: bool = ...
    """
    Returns or sets  the flag indicating whether the weld is done at the field site 
    
    <hr>
    
    Getter Method
    
    Signature ``FieldWeld`` 
    
    :returns:  Flag indicating whether the weld is done at field site  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FieldWeld`` 
    
    :param fieldWeld:  Flag indicating whether the weld is done at field site  
    :type fieldWeld: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    IdentificationLineLocation: IdentificationLineLocation = ...
    """
    Returns or sets  the identification line location 
    
    <hr>
    
    Getter Method
    
    Signature ``IdentificationLineLocation`` 
    
    :returns:  New identification line location  
    :rtype: :py:class:`NXOpen.Annotations.IdentificationLineLocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IdentificationLineLocation`` 
    
    :param location:  Identification line location  
    :type location: :py:class:`NXOpen.Annotations.IdentificationLineLocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SideSeamDisplay: bool = ...
    """
    Returns or sets  the flag indicating whether the side seam is displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``SideSeamDisplay`` 
    
    :returns:  Flag indicating whether the side seam is displayed  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideSeamDisplay`` 
    
    :param sideSeam:  Flag indicating whether the side seam is displayed  
    :type sideSeam: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SideSeamHorizontalFlip: bool = ...
    """
    Returns or sets  the flag indicating whether the side seam is flipped in the horizontal
    direction 
    
    <hr>
    
    Getter Method
    
    Signature ``SideSeamHorizontalFlip`` 
    
    :returns:  Flag indicating whether the side seam is horizontally flipped  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideSeamHorizontalFlip`` 
    
    :param horizontalFlip:  Flag indicating whether the side seam is horizontally flipped  
    :type horizontalFlip: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SideSeamVerticalFlip: bool = ...
    """
    Returns or sets  the flag indicating whether the side seam is flipped in the vertical
    direction 
    
    <hr>
    
    Getter Method
    
    Signature ``SideSeamVerticalFlip`` 
    
    :returns:  Flag indicating whether the side seam is vertically flipped  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideSeamVerticalFlip`` 
    
    :param verticalFlip:  Flag indicating whether the side seam is vertically flipped  
    :type verticalFlip: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SideSeamView: NXOpen.Drawings.DraftingView = ...
    """
    Returns or sets  the view for which side seam is to be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideSeamView`` 
    
    :returns:  View for which side seam is to be created  
    :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideSeamView`` 
    
    :param sideSeamView:  New view for which side seam is to be created  
    :type sideSeamView: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    StaggeredWeldSymbolDisplay: bool = ...
    """
    Returns or sets  the flag indicating whether the staggered weld symbol is displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``StaggeredWeldSymbolDisplay`` 
    
    :returns:  Flag indicating whether the staggered symbol is displayed  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaggeredWeldSymbolDisplay`` 
    
    :param staggeredDisplay:  Flag indicating whether the staggered symbol is displayed  
    :type staggeredDisplay: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolScale: float = ...
    """
    Returns or sets  the symbol scale 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolScale`` 
    
    :returns:  Scale  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolScale`` 
    
    :param symbolScale:  New scale  
    :type symbolScale: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Tail: Tail = ...
    """
    Returns or sets  the tail for the reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``Tail`` 
    
    :returns:  Tail type for the reference line  
    :rtype: :py:class:`NXOpen.Annotations.Tail` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tail`` 
    
    :param tail:  New tail type for the reference line  
    :type tail: :py:class:`NXOpen.Annotations.Tail` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TopSeamDisplay: bool = ...
    """
    Returns or sets  the flag indicating whether the top seam is displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``TopSeamDisplay`` 
    
    :returns:  Flag indicating whether the top seam is displayed  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopSeamDisplay`` 
    
    :param topSeamDisplay:  Flag indicating whether the top seam is displayed  
    :type topSeamDisplay: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TopSeamReverse: bool = ...
    """
    Returns or sets  the flag indicating whether the top seam direction is reveresed 
    
    <hr>
    
    Getter Method
    
    Signature ``TopSeamReverse`` 
    
    :returns:  Flag indicating whether the top seam is reversed  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopSeamReverse`` 
    
    :param reverse:  Flag indicating whether the top seam is reversed  
    :type reverse: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TopSeamView: NXOpen.Drawings.DraftingView = ...
    """
    Returns or sets  the view for which top seam is to be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopSeamView`` 
    
    :returns:  View for which top seam is to be created  
    :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopSeamView`` 
    
    :param topSeamView:  New view for which top seam is to be created  
    :type topSeamView: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    WeldStandard: WeldStandard = ...
    """
    Returns  the standard 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldStandard`` 
    
    :returns:  Weld standard  
    :rtype: :py:class:`NXOpen.Annotations.WeldStandard` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class TextCfw():
    """
    Specifies color, font, and width for text .  
    
    Constructor: 
    NXOpen.Annotations.TextCfw()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Color: int = ...
    """
    Field Value
    Type:int
    """
    Font: int = ...
    """
    Character font (blockfont, etc).  
    
    The font must be a font that has been
    loaded into the part.  The :py:class:`NXOpen.FontCollection` class
    can be used to load fonts into the part. 
    <hr>
    
    Field Value
    Type:int
    """
    Width: LineWidth = ...
    """
    Field Value
    Type::py:class:`NXOpen.Annotations.LineWidth`
    """


class PmiFilterByPart(PmiFilter):
    """
    Represents a PMI filter defined by a set of parts.  
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiFilterByPart = ...  # unknown typename


class BaseHoleDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a hole dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseHoleDimension = ...  # unknown typename


class PmiHoleDimension(BaseHoleDimension):
    """
    Represents a PMI hole dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiRadialDimensionBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: PmiHoleDimension = ...  # unknown typename


class ArbitraryAreaSeedBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiManager.CreateArbitraryAreaSeedBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    SelectFace: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the select face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SpecifyCurves: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the specify curves 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SpecifyPoint: NXOpen.Point = ...
    """
    Returns or sets  the specify point 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyPoint`` 
    
    :param specifyPoint: 
    :type specifyPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: ArbitraryAreaSeedBuilder = ...  # unknown typename


class CompanyProprietaryInformation(PmiAttribute):
    """
    Represents a Company Proprietary Information   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.CompanyProprietaryInformationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CompanyProprietaryInformation = ...  # unknown typename


class GeodesicDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateGeodesicDimensionBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Driving: DrivingValueBuilder = ...
    """
    Returns  the driving value builder, which manages driving dimension values 
    
    <hr>
    
    Getter Method
    
    Signature ``Driving`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Measurement: DimensionMeasurementBuilder = ...
    """
    Returns  the measurement 
    
    <hr>
    
    Getter Method
    
    Signature ``Measurement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MeasurementPoint: NXOpen.SelectPoint = ...
    """
    Returns  the measurement point 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPoint` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OriginCurve: NXOpen.SelectEdge = ...
    """
    Returns  the curves or edges to dimension from 
    
    <hr>
    
    Getter Method
    
    Signature ``OriginCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: GeodesicDimensionBuilder = ...  # unknown typename


class ArbitraryAreaSeedBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ArbitraryAreaSeedBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ArbitraryAreaSeedBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ArbitraryAreaSeedBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ArbitraryAreaSeedBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ArbitraryAreaSeedBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ArbitraryAreaSeedBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ArbitraryAreaSeedBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ArbitraryAreaSeedBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ArbitraryAreaSeedBuilder, object2: ArbitraryAreaSeedBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ArbitraryAreaSeedBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ArbitraryAreaSeedBuilderList = ...  # unknown typename


class GeneralHoleDimension(BaseHoleDimension):
    """
    Represents a hole dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralHoleDimension = ...  # unknown typename


class IFcf(NXOpen.INXObject):
    """
    Represents interface class for a feature control frame   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class Gdt(SimpleDraftingAid, IFcf):
    """
    Represents a Geometric Dimensioning and Tolerancing symbol
    
    This is an abstract class, and cannot be instantiated
    
    .. versionadded:: NX3.0.0
    """
    
    def SetSymbolCfw(self, cfw: LineCfw) -> None:
        """
        Sets the symbol color, font, and width.  
        
        The changes are not applied to the system until
        an update is performed.  An update can be performed by calling :py:meth:`Update.DoUpdate`.
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.
        
        Signature ``SetSymbolCfw(cfw)`` 
        
        :param cfw: 
        :type cfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetFcfFrameData(self) -> FcfFrameData:
        """
        Returns the single FCF frames data 
        This is only designed to work with old feature control frames without builders.  
        
        For newer feature control frames,
        the builder should be used to access this data.  This method will return an error.  
        
        Signature ``GetFcfFrameData()`` 
        
        :returns:  FCF frame data  
        :rtype: :py:class:`NXOpen.Annotations.FcfFrameData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetFcfFrameData(self, data: FcfFrameData) -> None:
        """
        Sets the single FCF frames data.
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetFcfFrameData(data)`` 
        
        :param data:   FCF frame data  
        :type data: :py:class:`NXOpen.Annotations.FcfFrameData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    @typing.overload
    def SetFcfFrameData(self, fcfFrameData: 'list[FcfFrameData]') -> None:
        """
        Sets the multiple FCF frames data.
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetFcfFrameData(fcfFrameData)`` 
        
        :param fcfFrameData:   FCF frame datas  
        :type fcfFrameData: list of :py:class:`NXOpen.Annotations.FcfFrameData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetFcfFrameDataArray(self) -> 'list[FcfFrameData]':
        """
        Returns the multiple FCF frames data 
        This is only designed to work with old feature control frames without builders.  
        
        For newer feature control frames,
        the builder should be used to access this data.  This method will return an error.  
        
        Signature ``GetFcfFrameDataArray()`` 
        
        :returns:  FCF frame datas  
        :rtype: list of :py:class:`NXOpen.Annotations.FcfFrameData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    CanChangeLeaderPositionParameter: bool = ...
    """
    Returns  a flag indicating whether the :py:meth:`NXOpen.Annotations.Gdt.LeaderPositionParameter` can be changed 
    
    <hr>
    
    Getter Method
    
    Signature ``CanChangeLeaderPositionParameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    HasLeaderPositionParameter: bool = ...
    """
    Returns  a flag indicating whether this GDT has a leader position parameter.  
    
    GDTs with the following leader types do not have a leader position
    parameter:
    
    :py:class:`NXOpen.Annotations.LeaderType.Plain <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.Around <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.PlainAligned <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.AroundAligned <NXOpen.Annotations.LeaderType>`
    
    <hr>
    
    Getter Method
    
    Signature ``HasLeaderPositionParameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    HasStubbedDatumStyle: bool = ...
    """
    Returns or sets  a flag indicating whether the leader has a stubbed datum style.  
    
    This property is not applicable to GDTs with the following leader
    types: 
    
    :py:class:`NXOpen.Annotations.LeaderType.Plain <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.Around <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.PlainAligned <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.AroundAligned <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.OnAnnotation <NXOpen.Annotations.LeaderType>`
    
    Do not attempt to set this property for these
    leader types. 
    
    <hr>
    
    Getter Method
    
    Signature ``HasStubbedDatumStyle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HasStubbedDatumStyle`` 
    
    :param stubbed: 
    :type stubbed: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LeaderPositionParameter: float = ...
    """
    Returns or sets  a parameter which indicates where the leader end point is located on
    the object that it is attached to.  
    
    0.0 indicates the start of the 
    object that it is attached to and 1.0 indicates the end of the object.
    This property is not applicable to GDTs with the following leader
    types: 
    
    :py:class:`NXOpen.Annotations.LeaderType.Plain <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.Around <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.PlainAligned <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.AroundAligned <NXOpen.Annotations.LeaderType>`
    
    You should not attempt to read this parameter unless 
    :py:meth:`NXOpen.Annotations.Gdt.HasLeaderPositionParameter` is true. 
    You should not attempt to
    change this parameter unless
    :py:meth:`NXOpen.Annotations.Gdt.CanChangeLeaderPositionParameter`
    returns true. 
    This parameter cannot not set for GDTs with the following leader
    types: 
    
    :py:class:`NXOpen.Annotations.LeaderType.Plain <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.Around <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.PlainAligned <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.AroundAligned <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.OnAnnotation <NXOpen.Annotations.LeaderType>`
    
    :py:class:`NXOpen.Annotations.LeaderType.OnStub <NXOpen.Annotations.LeaderType>`
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderPositionParameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderPositionParameter`` 
    
    :param param: 
    :type param: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: Gdt = ...  # unknown typename


class IDatumTarget(NXOpen.INXObject):
    """
    Represents interface class for a datum target   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class BaseDatumTarget(Gdt, IDatumTarget):
    """
    Represents a datum target  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.0
    """
    DatumLabel: str = ...
    """
    Returns or sets  the datum target label.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumLabel`` 
    
    :returns:  Datum label  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumLabel`` 
    
    :param datumLabel:  New datum label  
    :type datumLabel: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    TargetIndex: int = ...
    """
    Returns or sets  the datum target index.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetIndex`` 
    
    :returns:  Datum target index  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetIndex`` 
    
    :param index:  New datum target index  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: BaseDatumTarget = ...  # unknown typename


class PmiAttributeCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.PmiAttribute` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.PmiManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePmiAttributeBuilder(self, pmiAttr: PmiAttribute) -> PmiAttributeBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAttributeBuilder`  
        
        Signature ``CreatePmiAttributeBuilder(pmiAttr)`` 
        
        :param pmiAttr:  pmi base class 
        :type pmiAttr: :py:class:`NXOpen.Annotations.PmiAttribute` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiAttributeBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiUserDefinedBuilder(self, userDefined: PmiUserDefined) -> PmiUserDefinedBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiUserDefinedBuilder`  
        
        Signature ``CreatePmiUserDefinedBuilder(userDefined)`` 
        
        :param userDefined:  user defined  
        :type userDefined: :py:class:`NXOpen.Annotations.PmiUserDefined` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiUserDefinedBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiIntegerBuilder(self, pmiInteger: PmiInteger) -> PmiIntegerBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiIntegerBuilder`  
        
        Signature ``CreatePmiIntegerBuilder(pmiInteger)`` 
        
        :param pmiInteger:  integer 
        :type pmiInteger: :py:class:`NXOpen.Annotations.PmiInteger` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiIntegerBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiStringBuilder(self, pmiString: PmiString) -> PmiStringBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiStringBuilder`  
        
        Signature ``CreatePmiStringBuilder(pmiString)`` 
        
        :param pmiString:  string  
        :type pmiString: :py:class:`NXOpen.Annotations.PmiString` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiStringBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiNumberBuilder(self, pmiNumber: PmiNumber) -> PmiNumberBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiNumberBuilder`  
        
        Signature ``CreatePmiNumberBuilder(pmiNumber)`` 
        
        :param pmiNumber:  number  
        :type pmiNumber: :py:class:`NXOpen.Annotations.PmiNumber` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiNumberBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiUrlNoteBuilder(self, pmiUrlNote: PmiUrlNote) -> PmiUrlNoteBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiUrlNoteBuilder`  
        
        Signature ``CreatePmiUrlNoteBuilder(pmiUrlNote)`` 
        
        :param pmiUrlNote:  url note  
        :type pmiUrlNote: :py:class:`NXOpen.Annotations.PmiUrlNote` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiUrlNoteBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateGovernmentSecurityInformationBuilder(self, governmentSecurityInformation: GovernmentSecurityInformation) -> GovernmentSecurityInformationBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.GovernmentSecurityInformationBuilder`  
        
        Signature ``CreateGovernmentSecurityInformationBuilder(governmentSecurityInformation)`` 
        
        :param governmentSecurityInformation:  eMarking government  
        :type governmentSecurityInformation: :py:class:`NXOpen.Annotations.GovernmentSecurityInformation` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.GovernmentSecurityInformationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCompanyProprietaryInformationBuilder(self, companyProprietaryInformation: CompanyProprietaryInformation) -> CompanyProprietaryInformationBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.CompanyProprietaryInformationBuilder`  
        
        Signature ``CreateCompanyProprietaryInformationBuilder(companyProprietaryInformation)`` 
        
        :param companyProprietaryInformation:  company proprietary  
        :type companyProprietaryInformation: :py:class:`NXOpen.Annotations.CompanyProprietaryInformation` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.CompanyProprietaryInformationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateGeneralNoteBuilder(self, generalNote: GeneralNote) -> GeneralNoteBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.GeneralNoteBuilder`  
        
        Signature ``CreateGeneralNoteBuilder(generalNote)`` 
        
        :param generalNote:  general note 
        :type generalNote: :py:class:`NXOpen.Annotations.GeneralNote` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.GeneralNoteBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSurfaceFinishBuilder(self, surfaceFinish: SurfaceFinish) -> SurfaceFinishBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SurfaceFinishBuilder`  
        
        Signature ``CreateSurfaceFinishBuilder(surfaceFinish)`` 
        
        :param surfaceFinish:  surface finish 
        :type surfaceFinish: :py:class:`NXOpen.Annotations.SurfaceFinish` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SurfaceFinishBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSpecificNoteBuilder(self, specificNote: SpecificNote) -> SpecificNoteBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SpecificNoteBuilder`  
        
        Signature ``CreateSpecificNoteBuilder(specificNote)`` 
        
        :param specificNote:  specific note 
        :type specificNote: :py:class:`NXOpen.Annotations.SpecificNote` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SpecificNoteBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCoordinateNoteBuilder(self, coordinateNote: CoordinateNote) -> CoordinateNoteBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.CoordinateNoteBuilder`  
        
        Signature ``CreateCoordinateNoteBuilder(coordinateNote)`` 
        
        :param coordinateNote:  coordinate note 
        :type coordinateNote: :py:class:`NXOpen.Annotations.CoordinateNote` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.CoordinateNoteBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateEnterpriseIdentificationBuilder(self, enterpriseIdentification: EnterpriseIdentification) -> EnterpriseIdentificationBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.EnterpriseIdentificationBuilder`  
        
        Signature ``CreateEnterpriseIdentificationBuilder(enterpriseIdentification)`` 
        
        :param enterpriseIdentification:  enterprise identification 
        :type enterpriseIdentification: :py:class:`NXOpen.Annotations.EnterpriseIdentification` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.EnterpriseIdentificationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePartIdentificationBuilder(self, partIdentification: PartIdentification) -> PartIdentificationBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PartIdentificationBuilder`  
        
        Signature ``CreatePartIdentificationBuilder(partIdentification)`` 
        
        :param partIdentification:  part identification  
        :type partIdentification: :py:class:`NXOpen.Annotations.PartIdentification` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PartIdentificationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateProcessSpecificationBuilder(self, processSpecification: ProcessSpecification) -> ProcessSpecificationBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.ProcessSpecificationBuilder`  
        
        Signature ``CreateProcessSpecificationBuilder(processSpecification)`` 
        
        :param processSpecification:  process specification  
        :type processSpecification: :py:class:`NXOpen.Annotations.ProcessSpecification` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.ProcessSpecificationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateMaterialSpecificationBuilder(self, materialSpecification: MaterialSpecification) -> MaterialSpecificationBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.MaterialSpecificationBuilder`  
        
        Signature ``CreateMaterialSpecificationBuilder(materialSpecification)`` 
        
        :param materialSpecification:  material specification  
        :type materialSpecification: :py:class:`NXOpen.Annotations.MaterialSpecification` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.MaterialSpecificationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateLocatorDesignatorBuilder(self, locatorDesignator: LocatorDesignator) -> LocatorDesignatorBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.LocatorDesignatorBuilder`  
        
        Signature ``CreateLocatorDesignatorBuilder(locatorDesignator)`` 
        
        :param locatorDesignator:  locator designator  
        :type locatorDesignator: :py:class:`NXOpen.Annotations.LocatorDesignator` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LocatorDesignatorBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateBalloonNoteBuilder(self, balloonNote: BalloonNote) -> BalloonNoteBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.BalloonNoteBuilder`  
        
        Signature ``CreateBalloonNoteBuilder(balloonNote)`` 
        
        :param balloonNote:  balloon note  
        :type balloonNote: :py:class:`NXOpen.Annotations.BalloonNote` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.BalloonNoteBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiAttributeValueStringBuilder(self, pmiAttributeValueString: PmiAttributeValueString) -> PmiAttributeValueStringBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAttributeValueStringBuilder`  
        
        Signature ``CreatePmiAttributeValueStringBuilder(pmiAttributeValueString)`` 
        
        :param pmiAttributeValueString:  string value  
        :type pmiAttributeValueString: :py:class:`NXOpen.Annotations.PmiAttributeValueString` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiAttributeValueStringBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiAttributeValueMultipleStringBuilder(self, pmiAttributeValueMultipleString: PmiAttributeValueMultipleString) -> PmiAttributeValueMultipleStringBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAttributeValueMultipleStringBuilder`  
        
        Signature ``CreatePmiAttributeValueMultipleStringBuilder(pmiAttributeValueMultipleString)`` 
        
        :param pmiAttributeValueMultipleString:  multiple string value  
        :type pmiAttributeValueMultipleString: :py:class:`NXOpen.Annotations.PmiAttributeValueMultipleString` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiAttributeValueMultipleStringBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiAttributeValueIntegerBuilder(self, pmiAttributeValueInteger: PmiAttributeValueInteger) -> PmiAttributeValueIntegerBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAttributeValueIntegerBuilder`  
        
        Signature ``CreatePmiAttributeValueIntegerBuilder(pmiAttributeValueInteger)`` 
        
        :param pmiAttributeValueInteger:  integer value  
        :type pmiAttributeValueInteger: :py:class:`NXOpen.Annotations.PmiAttributeValueInteger` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiAttributeValueIntegerBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiAttributeValueListBuilder(self, pmiAttributeValueList: PmiAttributeValueList) -> PmiAttributeValueListBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAttributeValueListBuilder`  
        
        Signature ``CreatePmiAttributeValueListBuilder(pmiAttributeValueList)`` 
        
        :param pmiAttributeValueList:  list value  
        :type pmiAttributeValueList: :py:class:`NXOpen.Annotations.PmiAttributeValueList` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiAttributeValueListBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiAttributeValueUrlBuilder(self, pmiAttributeValueUrl: PmiAttributeValueUrl) -> PmiAttributeValueUrlBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAttributeValueUrlBuilder`  
        
        Signature ``CreatePmiAttributeValueUrlBuilder(pmiAttributeValueUrl)`` 
        
        :param pmiAttributeValueUrl:  list value  
        :type pmiAttributeValueUrl: :py:class:`NXOpen.Annotations.PmiAttributeValueUrl` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiAttributeValueUrlBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiAttributeValueNumberBuilder(self, pmiAttributeValueNumber: PmiAttributeValueNumber) -> PmiAttributeValueNumberBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAttributeValueNumberBuilder`  
        
        Signature ``CreatePmiAttributeValueNumberBuilder(pmiAttributeValueNumber)`` 
        
        :param pmiAttributeValueNumber:  number value  
        :type pmiAttributeValueNumber: :py:class:`NXOpen.Annotations.PmiAttributeValueNumber` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiAttributeValueNumberBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateExportControlBuilder(self, exportControl: ExportControl) -> ExportControlBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.ExportControlBuilder`  
        
        Signature ``CreateExportControlBuilder(exportControl)`` 
        
        :param exportControl:  export control  
        :type exportControl: :py:class:`NXOpen.Annotations.ExportControl` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.ExportControlBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> NXOpen.TaggedObject:
        """
        Finds the :py:class:`NXOpen.Annotations.PmiAttribute` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the pmi  
        :type journalIdentifier: str 
        :returns:  PMI with this identifier  
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ShipDimensionBuilderGroupTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipDimensionBuilderGroupType():
    """
    The enum represents group type from concept model 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MainShipItem", "Group type MainShipItem"
       "Decks", "Group type Decks"
       "TransversalFrames", "Group type Transversal frames"
       "Bulkheads", "Group type Bulkheads"
       "LongitudinalFrames", "Group type Longitudinal frames"
    """
    MainShipItem = 0  # ShipDimensionBuilderGroupTypeMemberType
    Decks = 1  # ShipDimensionBuilderGroupTypeMemberType
    TransversalFrames = 2  # ShipDimensionBuilderGroupTypeMemberType
    Bulkheads = 3  # ShipDimensionBuilderGroupTypeMemberType
    LongitudinalFrames = 4  # ShipDimensionBuilderGroupTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.ShipDimensionCollection.CreateShipDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class GroupType():
        """
        The enum represents group type from concept model 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MainShipItem", "Group type MainShipItem"
           "Decks", "Group type Decks"
           "TransversalFrames", "Group type Transversal frames"
           "Bulkheads", "Group type Bulkheads"
           "LongitudinalFrames", "Group type Longitudinal frames"
        """
        MainShipItem = 0  # ShipDimensionBuilderGroupTypeMemberType
        Decks = 1  # ShipDimensionBuilderGroupTypeMemberType
        TransversalFrames = 2  # ShipDimensionBuilderGroupTypeMemberType
        Bulkheads = 3  # ShipDimensionBuilderGroupTypeMemberType
        LongitudinalFrames = 4  # ShipDimensionBuilderGroupTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Element: int = ...
    """
    Returns or sets  the element 
    
    <hr>
    
    Getter Method
    
    Signature ``Element`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Element`` 
    
    :param element: 
    :type element: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ElementName: str = ...
    """
    Returns or sets  the element name 
    
    <hr>
    
    Getter Method
    
    Signature ``ElementName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``ElementName`` 
    
    :param elementName: 
    :type elementName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FirstAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Group: ShipDimensionBuilderGroupType = ...
    """
    Returns or sets  the group 
    
    <hr>
    
    Getter Method
    
    Signature ``Group`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ShipDimensionBuilderGroupType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Group`` 
    
    :param group: 
    :type group: :py:class:`NXOpen.Annotations.ShipDimensionBuilderGroupType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ShipDimensionBuilder = ...  # unknown typename


class PartSymbolFolder(NXOpen.NXObject):
    """
    Represents a part symbol folder  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PartSymbolFolderBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: PartSymbolFolder = ...  # unknown typename


class BaseNote(NoteBase, IPmi):
    """
    Represents a Note   
    
    This is an abstract class and cannot be directly instantiated
    
    .. versionadded:: NX6.0.0
    """
    
    def UpdateFromRule(self) -> None:
        """
        Updates the specified note from the KF rule.  
        
        The changes are not applied till an update is performed by 
        calling :py:meth:`Update.DoUpdate` .
        
        Signature ``UpdateFromRule()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    IsVertical: bool = ...
    """
    Returns or sets  a flag indicating whether the note is vertical.  
    
    When editing this, the changes are not applied to the system until
    an update is performed.  An update can be performed by calling :py:meth:`Update.DoUpdate`.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated.
    
    <hr>
    
    Getter Method
    
    Signature ``IsVertical`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsVertical`` 
    
    :param isVertical: 
    :type isVertical: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseNote = ...  # unknown typename


class PmiNote(BaseNote):
    """
    Represents a PMI note   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiNoteBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiNote = ...  # unknown typename


class SymmetricalCenterline(Centerline):
    """
    Represents a Symmetrical Centerline   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.SymmetricalCenterlineBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: SymmetricalCenterline = ...  # unknown typename


class BaseOrdinateDimensionBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseOrdinateDimensionBuilderTypes():
    """
    the type of dimension being created 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleDimension", "singular dimension"
       "MultipleDimension", "group or set of dimensions"
    """
    SingleDimension = 0  # BaseOrdinateDimensionBuilderTypesMemberType
    MultipleDimension = 1  # BaseOrdinateDimensionBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseOrdinateDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.OrdinateDimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    class Types():
        """
        the type of dimension being created 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SingleDimension", "singular dimension"
           "MultipleDimension", "group or set of dimensions"
        """
        SingleDimension = 0  # BaseOrdinateDimensionBuilderTypesMemberType
        MultipleDimension = 1  # BaseOrdinateDimensionBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActiveHorizontalMargin: OrdinateMargin = ...
    """
    Returns or sets  the active horizontal margin(defined or inferred) where horizontal dimension will be automatically placed.  
    
    A margin can be created using :py:class:`NXOpen.Annotations.OrdinateMarginCollection`.
    If None, must set a HorizontalInferredMarginLocation which will be used to place dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveHorizontalMargin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateMargin` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveHorizontalMargin`` 
    
    :param margin: 
    :type margin: :py:class:`NXOpen.Annotations.OrdinateMargin` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ActiveVerticalMargin: OrdinateMargin = ...
    """
    Returns or sets  the active vertical margin(defined or inferred) where horizontal dimension will be automatically placed.  
    
    A margin can be created using :py:class:`NXOpen.Annotations.OrdinateMarginCollection`.
    If None, must set a VerticalInferredMarginLocation which will be used to place dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveVerticalMargin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateMargin` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveVerticalMargin`` 
    
    :param margin: 
    :type margin: :py:class:`NXOpen.Annotations.OrdinateMargin` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AllowDuplicates: bool = ...
    """
    Returns or sets  the allow duplicates 
    
    <hr>
    
    Getter Method
    
    Signature ``AllowDuplicates`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowDuplicates`` 
    
    :param allowDuplicates: 
    :type allowDuplicates: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AutoAssociativities: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the auto ordinate associativities 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoAssociativities`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Baseline: OrdinateBaselineBuilder = ...
    """
    Returns  the baseline 
    
    <hr>
    
    Getter Method
    
    Signature ``Baseline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateBaselineBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HorizontalInferredMarginLocation: NXOpen.Point3d = ...
    """
    Returns or sets  the horizontal inferred margin location 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalInferredMarginLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalInferredMarginLocation`` 
    
    :param location: 
    :type location: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OrdinateOrigin: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the ordinate origin 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RespositionExisting: bool = ...
    """
    Returns or sets  the resposition existing 
    
    <hr>
    
    Getter Method
    
    Signature ``RespositionExisting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RespositionExisting`` 
    
    :param respositionExisting: 
    :type respositionExisting: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondAssociativities: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second associativities 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondAssociativities`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Type: BaseOrdinateDimensionBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseOrdinateDimensionBuilderTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.BaseOrdinateDimensionBuilderTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VerticalInferredMarginLocation: NXOpen.Point3d = ...
    """
    Returns or sets  the vertical inferred margin location 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalInferredMarginLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalInferredMarginLocation`` 
    
    :param location: 
    :type location: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BaseOrdinateDimensionBuilder = ...  # unknown typename


class OrdinateDimensionBuilder(BaseOrdinateDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.OrdinateDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateOrdinateDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Driving: DrivingValueBuilder = ...
    """
    Returns  the driving 
    
    <hr>
    
    Getter Method
    
    Signature ``Driving`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: OrdinateDimensionBuilder = ...  # unknown typename


class ProcessSpecificationBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ProcessSpecification` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateProcessSpecificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetNomenclature(self) -> 'list[str]':
        """
        Returns the nomenclature  
        
        Signature ``GetNomenclature()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNomenclature(self, nomenclature: 'list[str]') -> None:
        """
        Sets the nomenclature 
        
        Signature ``SetNomenclature(nomenclature)`` 
        
        :param nomenclature: 
        :type nomenclature: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOpenField(self) -> 'list[str]':
        """
        Returns the open field  
        
        Signature ``GetOpenField()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOpenField(self, openField: 'list[str]') -> None:
        """
        Sets the open field 
        
        Signature ``SetOpenField(openField)`` 
        
        :param openField: 
        :type openField: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ProcessSpecificationBuilder = ...  # unknown typename


class HatchFillSettingsBuilderAnnotationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HatchFillSettingsBuilderAnnotationTypes():
    """
    the valid types of hatch objects 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Crosshatch", "Crosshatch"
       "AreaFill", "Area Fill"
    """
    Crosshatch = 0  # HatchFillSettingsBuilderAnnotationTypesMemberType
    AreaFill = 1  # HatchFillSettingsBuilderAnnotationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HatchFillSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class is used to construct the Crosshatch and area Fill setting block .  
    
    .. versionadded:: NX7.5.0
    """
    
    class AnnotationTypes():
        """
        the valid types of hatch objects 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Crosshatch", "Crosshatch"
           "AreaFill", "Area Fill"
        """
        Crosshatch = 0  # HatchFillSettingsBuilderAnnotationTypesMemberType
        AreaFill = 1  # HatchFillSettingsBuilderAnnotationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def FindCrosshatchFile(self, identifier: str) -> str:
        """
        Finds the crosshatch file from pattern.  
        
        May be blank if not found  
        
        Signature ``FindCrosshatchFile(identifier)`` 
        
        :param identifier: 
        :type identifier: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Angle: float = ...
    """
    Returns or sets  the angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AnnotationType: HatchFillSettingsBuilderAnnotationTypes = ...
    """
    Returns or sets  the type of hatch object 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchFillSettingsBuilderAnnotationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnnotationType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.HatchFillSettingsBuilderAnnotationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ApplyToAllFromSameComp: bool = ...
    """
    Returns or sets  the state to set this crosshatch settings to all same component crosshatches.  
    
    If true, it applies crosshatch settings on all of the current cut faces from the same component in all section views.
    If false, it applies crosshatch settings on selected crosshatch. 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyToAllFromSameComp`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyToAllFromSameComp`` 
    
    :param applyOnAllView: 
    :type applyOnAllView: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    AreafillAngle: float = ...
    """
    Returns or sets  the areafill angle 
    
    <hr>
    
    Getter Method
    
    Signature ``AreafillAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreafillAngle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX6.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    CrosshatchFile: str = ...
    """
    Returns or sets  the crosshatch file 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Distance: float = ...
    """
    Returns or sets  the distance 
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Distance`` 
    
    :param distance: 
    :type distance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Material: AreaFillMaterial = ...
    """
    Returns or sets  the area fill material 
    
    <hr>
    
    Getter Method
    
    Signature ``Material`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AreaFillMaterial` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Material`` 
    
    :param areaFillMaterial: 
    :type areaFillMaterial: :py:class:`NXOpen.Annotations.AreaFillMaterial` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Pattern: str = ...
    """
    Returns or sets  the pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``Pattern`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pattern`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: float = ...
    """
    Returns or sets  the scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scale: 
    :type scale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Width: LineWidth = ...
    """
    Returns or sets  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: HatchFillSettingsBuilder = ...  # unknown typename


class StackVerticalAlignmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StackVerticalAlignment():
    """
    Specifies the vertical alignment(above/below alignment) option
    when aligning annotations within a stack 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", "Align vertically along left edge of text box"
       "Center", "Align vertically along center of text box"
       "Right", "Align vertically along right edge of text box"
    """
    Left = 0  # StackVerticalAlignmentMemberType
    Center = 1  # StackVerticalAlignmentMemberType
    Right = 2  # StackVerticalAlignmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IntersectionSymbolCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.IntersectionSymbol` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateIntersectionSymbolBuilder(self, intersectionPt: IntersectionSymbol) -> IntersectionSymbolBuilder:
        """
        Creates the IntersectionSymbolBuilder  
        
        Signature ``CreateIntersectionSymbolBuilder(intersectionPt)`` 
        
        :param intersectionPt:  :py:class:`NXOpen.Annotations.IntersectionSymbol` to be edited, if None then create a new one  
        :type intersectionPt: :py:class:`NXOpen.Annotations.IntersectionSymbol` 
        :returns:  IntersectionSymbolBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.IntersectionSymbolBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> IntersectionSymbol:
        """
        Finds the intersection symbol with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the intersection symbol to be found  
        :type journalIdentifier: str 
        :returns:  Intersecton Symbol with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.IntersectionSymbol` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class TargetPointBuilderThicknessMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TargetPointBuilderThickness():
    """
    the types of target point thickness 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Thin = 0  # TargetPointBuilderThicknessMemberType
    Normal = 1  # TargetPointBuilderThicknessMemberType
    Thick = 2  # TargetPointBuilderThicknessMemberType
    One = 6  # TargetPointBuilderThicknessMemberType
    Two = 7  # TargetPointBuilderThicknessMemberType
    Three = 8  # TargetPointBuilderThicknessMemberType
    Four = 9  # TargetPointBuilderThicknessMemberType
    Five = 10  # TargetPointBuilderThicknessMemberType
    Six = 11  # TargetPointBuilderThicknessMemberType
    Seven = 12  # TargetPointBuilderThicknessMemberType
    Eight = 13  # TargetPointBuilderThicknessMemberType
    Nine = 14  # TargetPointBuilderThicknessMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TargetPointBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.TargetPoint` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.TargetPointCollection.CreateTargetPointBuilder`
    
    Default values.
    
    ========  =====
    Property  Value
    ========  =====
    Angle     0 
    --------  -----
    Height    5 
    --------  -----
    Width     Thin 
    ========  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class Thickness():
        """
        the types of target point thickness 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "Thin"
           "Normal", "Normal"
           "Thick", "Thick"
           "One", "Width One"
           "Two", "Width Two"
           "Three", "Width Three"
           "Four", "Width Four"
           "Five", "Width Five"
           "Six", "Width Six"
           "Seven", "Width Seven"
           "Eight", "Width Eight"
           "Nine", "Width Nine"
        """
        Thin = 0  # TargetPointBuilderThicknessMemberType
        Normal = 1  # TargetPointBuilderThicknessMemberType
        Thick = 2  # TargetPointBuilderThicknessMemberType
        One = 6  # TargetPointBuilderThicknessMemberType
        Two = 7  # TargetPointBuilderThicknessMemberType
        Three = 8  # TargetPointBuilderThicknessMemberType
        Four = 9  # TargetPointBuilderThicknessMemberType
        Five = 10  # TargetPointBuilderThicknessMemberType
        Six = 11  # TargetPointBuilderThicknessMemberType
        Seven = 12  # TargetPointBuilderThicknessMemberType
        Eight = 13  # TargetPointBuilderThicknessMemberType
        Nine = 14  # TargetPointBuilderThicknessMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Angle: float = ...
    """
    Returns or sets  the angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Height: float = ...
    """
    Returns or sets  the height 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Location: NXOpen.SelectNXObject = ...
    """
    Returns  the location 
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Width: TargetPointBuilderThickness = ...
    """
    Returns or sets  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TargetPointBuilderThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Annotations.TargetPointBuilderThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: TargetPointBuilder = ...  # unknown typename


class Region(Annotation, IPmi):
    """
    Represents a Region   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.RegionBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetBoundaryCurves(self) -> 'list[NXOpen.Curve]':
        """
        Returns the region boundary curves 
        
        Signature ``GetBoundaryCurves()`` 
        
        :returns:  Array of boundary curves  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetHatchCurves(self) -> 'list[NXOpen.Curve]':
        """
        Returns the region hatch curves 
        
        Signature ``GetHatchCurves()`` 
        
        :returns:  Array of boundary curves  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: Region = ...  # unknown typename


class AppendedTextBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class is used to set/access the appended text of a dimension   
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    def GetAbove(self) -> 'list[str]':
        """
        Gets the appended text above the annotation  
        
        Signature ``GetAbove()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAbove(self, lines: 'list[str]') -> None:
        """
        Sets the appended text above the annotation 
        
        Signature ``SetAbove(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def GetAfter(self) -> 'list[str]':
        """
        Gets the appended text after the annotation  
        
        Signature ``GetAfter()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAfter(self, lines: 'list[str]') -> None:
        """
        Sets the appended text after the annotation 
        
        Signature ``SetAfter(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def GetBelow(self) -> 'list[str]':
        """
        Gets the appended text below the annotation  
        
        Signature ``GetBelow()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBelow(self, lines: 'list[str]') -> None:
        """
        Sets the appended text below the annotation 
        
        Signature ``SetBelow(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def GetBefore(self) -> 'list[str]':
        """
        Gets the appended text before the annotation  
        
        Signature ``GetBefore()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBefore(self, lines: 'list[str]') -> None:
        """
        Sets the appended text before the annotation 
        
        Signature ``SetBefore(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    UserDefinedSymbolAspectRatio: float = ...
    """
    Returns or sets  the aspect ratio for user defined symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedSymbolAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedSymbolAspectRatio`` 
    
    :param aspectRatio: 
    :type aspectRatio: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UserDefinedSymbolHeight: float = ...
    """
    Returns or sets  the height for user defined symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedSymbolHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedSymbolHeight`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UserDefinedSymbolLength: float = ...
    """
    Returns or sets  the length for user defined symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedSymbolLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedSymbolLength`` 
    
    :param length: 
    :type length: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UserDefinedSymbolScale: float = ...
    """
    Returns or sets  the scale for user defined symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedSymbolScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedSymbolScale`` 
    
    :param scale: 
    :type scale: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: AppendedTextBuilder = ...  # unknown typename


class LocatorDesignatorBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.LocatorDesignator` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateLocatorDesignatorBuilder`
    
    .. versionadded:: NX6.0.0
    """
    CoordinatePlane: str = ...
    """
    Returns or sets  the coordinateplane 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinatePlane`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinatePlane`` 
    
    :param coordinatePlane: 
    :type coordinatePlane: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HotSpot: NXOpen.Point = ...
    """
    Returns or sets  the hot spot 
    
    <hr>
    
    Getter Method
    
    Signature ``HotSpot`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HotSpot`` 
    
    :param hotSpot: 
    :type hotSpot: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HotSpotText: str = ...
    """
    Returns or sets  the hot spot text 
    
    <hr>
    
    Getter Method
    
    Signature ``HotSpotText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HotSpotText`` 
    
    :param hotSpotText: 
    :type hotSpotText: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LocatorLetter: str = ...
    """
    Returns or sets  the locatorletter 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorLetter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LocatorLetter`` 
    
    :param locatorLetter: 
    :type locatorLetter: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LocatorType: str = ...
    """
    Returns or sets  the locatortype 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LocatorType`` 
    
    :param locatorType: 
    :type locatorType: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalDirection: NXOpen.Direction = ...
    """
    Returns or sets  the normal direction 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDirection`` 
    
    :param normalDirection: 
    :type normalDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NoteText: str = ...
    """
    Returns or sets  the notetext 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteText`` 
    
    :param noteText: 
    :type noteText: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PinDirection: NXOpen.Direction = ...
    """
    Returns or sets  the pin direction 
    
    <hr>
    
    Getter Method
    
    Signature ``PinDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PinDirection`` 
    
    :param pinDirection: 
    :type pinDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PunchDirection: NXOpen.Direction = ...
    """
    Returns or sets  the punch direction 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchDirection`` 
    
    :param punchDirection: 
    :type punchDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Subscript: str = ...
    """
    Returns or sets  the subscript 
    
    <hr>
    
    Getter Method
    
    Signature ``Subscript`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Subscript`` 
    
    :param subscript: 
    :type subscript: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: LocatorDesignatorBuilder = ...  # unknown typename


class BaseCenterline3dBuilder(CenterlineBuilder):
    """
    Represents a Base Centerline3d Builder for pmi and drafting 3D centerlines   
    
    This is an abstract class, and cannot be instantiated.
    
    Default values.
    
    ============================  ================================================
    Property                      Value
    ============================  ================================================
    Settings.Extension            6.35 (millimeters part), 0.25 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Gap                  1.5875 (millimeters part), 0.0625 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.IndividualDistance   0 
    ----------------------------  ------------------------------------------------
    Settings.Size                 3.175 (millimeters part), 0.125 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Width                Thin 
    ============================  ================================================
    
    .. versionadded:: NX7.5.0
    """
    Face: NXOpen.SelectNXObjectList = ...
    """
    Returns  the face 
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReferenceIndex: int = ...
    """
    Returns or sets  the reference index 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceIndex`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceIndex`` 
    
    :param referenceIndex: 
    :type referenceIndex: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Settings: Centerline3dSettingsBuilder = ...
    """
    Returns  the settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Settings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.Centerline3dSettingsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BaseCenterline3dBuilder = ...  # unknown typename


class PmiCenterline3dBuilder(BaseCenterline3dBuilder):
    """
    Builder for creating Pmi 3D Centerline.  
    
    It creates or edits Pmi 3D Centerlines 
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreatePmiCenterline3dBuilder`
    
    .. versionadded:: NX7.5.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects for the 3D Centerline
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PmiCenterline3dBuilder = ...  # unknown typename


class TitleBlockCellBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[TitleBlockCellBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: TitleBlockCellBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: TitleBlockCellBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> TitleBlockCellBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TitleBlockCellBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TitleBlockCellBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[TitleBlockCellBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[TitleBlockCellBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: TitleBlockCellBuilder, object2: TitleBlockCellBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: TitleBlockCellBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TitleBlockCellBuilderList = ...  # unknown typename


class MaterialConditionModifierMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MaterialConditionModifier():
    """
    Specifies the material condition modifier 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Mmc", "Specifies maximum material condition modifier"
       "Lmc", "Specifies least material condition modifier"
       "Rfs", "Specified regardless of feature size modifier"
       "Tangential", "Specifies tangent plane modifier"
       "NotSet", "Specifies no material modifier. NOTE: This should be used in place of the RFS for ASME 1994 and ISO standards"
       "Last", "Last enum value. Should not be used."
    """
    Mmc = 0  # MaterialConditionModifierMemberType
    Lmc = 1  # MaterialConditionModifierMemberType
    Rfs = 2  # MaterialConditionModifierMemberType
    Tangential = 3  # MaterialConditionModifierMemberType
    NotSet = 4  # MaterialConditionModifierMemberType
    Last = 5  # MaterialConditionModifierMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DimensionData(NXOpen.TransientObject):
    """
    Represents dimension data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAssociativity(self, associativityIndex: int) -> 'list[Associativity]':
        """
        Returns the associativity at specified index.  
        
        Valid index values 
        are {1, 2, 3}. 
        
        For ordinate dimensions, -
        
        the associativity at index 1 stores the ordinate origin dimension associativity data. -
        
        the associativity at index 2 stores the ordinate dimension associativity data.
        
        The associativity at index 3 stores the following -
        
        1. Fold location for the folded radius dimension
        
        2. Margin data for the ordinate dimensions
        
        Signature ``GetAssociativity(associativityIndex)`` 
        
        :param associativityIndex:  Associativity index  
        :type associativityIndex: int 
        :returns:  List of associativity objects  
        :rtype: list of :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociativity(self, associativityIndex: int, associativity: 'list[Associativity]') -> None:
        """
        Sets the associativity at specified index.  
        
        Valid index values 
        are {1, 2, 3}. 
        
        For ordinate dimensions, the associativity at index 1 stores the ordinate
        origin data.
        
        The associativity at index 3 stores the following -
        
        1. Fold location for the folded radius dimension
        
        2. Margin data for the ordinate dimensions
        
        Signature ``SetAssociativity(associativityIndex, associativity)`` 
        
        :param associativityIndex:  Associativity index  
        :type associativityIndex: int 
        :param associativity:  List of new associativity objects  
        :type associativity: list of :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDimensionPreferences(self) -> DimensionPreferences:
        """
        Returns the dimension preferences  
        
        Signature ``GetDimensionPreferences()`` 
        
        :returns:  Dimension preferences  
        :rtype: :py:class:`NXOpen.Annotations.DimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDimensionPreferences(self, preferences: DimensionPreferences) -> None:
        """
        Sets the dimension preferences 
        
        Signature ``SetDimensionPreferences(preferences)`` 
        
        :param preferences:  New dimension preferences  
        :type preferences: :py:class:`NXOpen.Annotations.DimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLineAndArrowPreferences(self) -> LineAndArrowPreferences:
        """
        Returns the line and arrow preferences  
        
        Signature ``GetLineAndArrowPreferences()`` 
        
        :returns:  Line and arrow preferences  
        :rtype: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLineAndArrowPreferences(self, prefs: LineAndArrowPreferences) -> None:
        """
        Sets the line and arrow preferences 
        
        Signature ``SetLineAndArrowPreferences(prefs)`` 
        
        :param prefs:  New line and arrow preferences  
        :type prefs: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLetteringPreferences(self) -> LetteringPreferences:
        """
        Returns the lettering preferences  
        
        Signature ``GetLetteringPreferences()`` 
        
        :returns:  Lettering preferences  
        :rtype: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLetteringPreferences(self, letteringPrefs: LetteringPreferences) -> None:
        """
        Sets the lettering preferences 
        
        Signature ``SetLetteringPreferences(letteringPrefs)`` 
        
        :param letteringPrefs:  New lettering preferences  
        :type letteringPrefs: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUserSymbolPreferences(self) -> UserSymbolPreferences:
        """
        Returns the user defined symbol preferences  
        
        Signature ``GetUserSymbolPreferences()`` 
        
        :returns:  User symbol preferences  
        :rtype: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUserSymbolPreferences(self, userSymbolPrefs: UserSymbolPreferences) -> None:
        """
        Sets the user defined symbol preferences 
        
        Signature ``SetUserSymbolPreferences(userSymbolPrefs)`` 
        
        :param userSymbolPrefs:  New user symbol preferences  
        :type userSymbolPrefs: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAppendedText(self) -> AppendedText:
        """
        Returns the appended text  
        
        Signature ``GetAppendedText()`` 
        
        :returns:  Appended text  
        :rtype: :py:class:`NXOpen.Annotations.AppendedText` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAppendedText(self, appendedText: AppendedText) -> None:
        """
        Sets the appended text 
        
        Signature ``SetAppendedText(appendedText)`` 
        
        :param appendedText:  New appended text  
        :type appendedText: :py:class:`NXOpen.Annotations.AppendedText` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetInferredPlane(self, jaDefaultPlane: PmiDefaultPlane, dimType: DimensionType) -> NXOpen.Xform:
        """
        Get inferred annotation plane.  
        
        Before calling this method, you must fill in the associativities for the
        Dimension by calling :py:meth:`NXOpen.Annotations.DimensionData.SetAssociativity` for
        the correct number of objects based on the type of Dimension you wish to create.
        
        Also, you must specify the particular type of Dimension to be created
        as the inferred Dimension plane depends on the type of the Dimension as well
        as the geometry being measured.
        
        Signature ``GetInferredPlane(jaDefaultPlane, dimType)`` 
        
        :param jaDefaultPlane: 
        :type jaDefaultPlane: :py:class:`NXOpen.Annotations.PmiDefaultPlane` 
        :param dimType: 
        :type dimType: :py:class:`NXOpen.Annotations.DimensionType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Xform` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLinearTolerance(self) -> LinearTolerance:
        """
        Returns the linear tolerances  
        
        Signature ``GetLinearTolerance()`` 
        
        :returns:  Linear tolerance  
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLinearTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the linear tolerances 
        
        Signature ``SetLinearTolerance(tolerance)`` 
        
        :param tolerance:  New linear tolerance  
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAngularTolerance(self) -> AngularTolerance:
        """
        Returns the angular tolerances  
        
        Signature ``GetAngularTolerance()`` 
        
        :returns:  Angular tolerance  
        :rtype: :py:class:`NXOpen.Annotations.AngularTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAngularTolerance(self, tolerance: AngularTolerance) -> None:
        """
        Sets the angular tolerances 
        
        Signature ``SetAngularTolerance(tolerance)`` 
        
        :param tolerance:  New angular tolerance  
        :type tolerance: :py:class:`NXOpen.Annotations.AngularTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    LeaderOrientation: LeaderOrientation = ...
    """
    Returns or sets  the leader orientation for the dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderOrientation`` 
    
    :returns:  Leader orientation  
    :rtype: :py:class:`NXOpen.Annotations.LeaderOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderOrientation`` 
    
    :param leaderOrientation:  New leader orientation  
    :type leaderOrientation: :py:class:`NXOpen.Annotations.LeaderOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    MeasurementDirection: NXOpen.Direction = ...
    """
    Returns or sets  the measurement direction 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementDirection`` 
    
    :returns:  Direction  
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementDirection`` 
    
    :param vector:  Direction  
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MeasurementDirectionView: NXOpen.View = ...
    """
    Returns or sets  the measurement direction view 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementDirectionView`` 
    
    :returns:  Measurement direction view  
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementDirectionView`` 
    
    :param view:  Measurement direction view  
    :type view: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """


class SafetyClassBusinessModifierBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.SafetyClassBusinessModifier` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.BusinessModifierCollection.CreateSafetyClassBusinessModifierBuilder`
    
    .. versionadded:: NX6.0.0
    """
    SafetyClass: str = ...
    """
    Returns or sets  the safety class 
    
    <hr>
    
    Getter Method
    
    Signature ``SafetyClass`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SafetyClass`` 
    
    :param safetyClass: 
    :type safetyClass: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: SafetyClassBusinessModifierBuilder = ...  # unknown typename


class BaseConcentricCircleDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a concentric circle dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseConcentricCircleDimension = ...  # unknown typename


class ConcentricCircleDimension(BaseConcentricCircleDimension):
    """
    Represents a concentric circle dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.ThicknessDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: ConcentricCircleDimension = ...  # unknown typename


class MinorAngularDimension(AngularDimension, IPmi):
    """
    Represents a minor angular dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.MinorAngularDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: MinorAngularDimension = ...  # unknown typename


class GeneralMinorAngularDimension(MinorAngularDimension):
    """
    Represents a minor angular dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralMinorAngularDimension = ...  # unknown typename


class ChamferDimensionPreferences(NXOpen.TransientObject):
    """
    Represents chamfer dimension preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    CharacterSpacing: float = ...
    """
    Returns or sets  the space between the text characters or symbols as a factor of the character size 
    
    <hr>
    
    Getter Method
    
    Signature ``CharacterSpacing`` 
    
    :returns:  Character spacing  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CharacterSpacing`` 
    
    :param characterSpacing:  New character spacing  
    :type characterSpacing: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Form: ChamferForm = ...
    """
    Returns or sets  the form 
    
    <hr>
    
    Getter Method
    
    Signature ``Form`` 
    
    :returns:  Form  
    :rtype: :py:class:`NXOpen.Annotations.ChamferForm` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Form`` 
    
    :param form:  New form  
    :type form: :py:class:`NXOpen.Annotations.ChamferForm` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LeaderPlacement: ChamferLeaderPlacement = ...
    """
    Returns or sets  the leader placement relative to the chamfer 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderPlacement`` 
    
    :returns:  Leader placement relative to chamfer  
    :rtype: :py:class:`NXOpen.Annotations.ChamferLeaderPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderPlacement`` 
    
    :param leaderPlacement:  New leader placement relative to chamfer  
    :type leaderPlacement: :py:class:`NXOpen.Annotations.ChamferLeaderPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Separator: ChamferSeparatorType = ...
    """
    Returns or sets  the separator type 
    
    <hr>
    
    Getter Method
    
    Signature ``Separator`` 
    
    :returns:  Separator type  
    :rtype: :py:class:`NXOpen.Annotations.ChamferSeparatorType` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Separator`` 
    
    :param separator:  New separator type  
    :type separator: :py:class:`NXOpen.Annotations.ChamferSeparatorType` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    StubType: ChamferStubType = ...
    """
    Returns or sets  the stub type 
    
    <hr>
    
    Getter Method
    
    Signature ``StubType`` 
    
    :returns:  Stub type  
    :rtype: :py:class:`NXOpen.Annotations.ChamferStubType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StubType`` 
    
    :param type:  New stub type  
    :type type: :py:class:`NXOpen.Annotations.ChamferStubType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolName: str = ...
    """
    Returns or sets  the symbol name 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolName`` 
    
    :returns:  Symbol name  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolName`` 
    
    :param symbolName:  New symbol name  
    :type symbolName: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolPlacement: ChamferSymbolPlacement = ...
    """
    Returns or sets  the symbol placement 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolPlacement`` 
    
    :returns:  Symbol placement  
    :rtype: :py:class:`NXOpen.Annotations.ChamferSymbolPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolPlacement`` 
    
    :param symbolPlacement:  New symbol placement  
    :type symbolPlacement: :py:class:`NXOpen.Annotations.ChamferSymbolPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class Pmi(NXOpen.NXObject, IPmi):
    """
    Represents a PMI(Product and Manufacturing Information) object.  
    
    A PMI object
    is used to embed non-geometric information into part. It is displayed in the 
    graphics area using objects called PMI Display Instances represented by 
    subclasses of :py:class:`NXOpen.Annotations.Annotation` and inheriting from
    :py:class:`NXOpen.Annotations.IPmi`.  
    
    .. versionadded:: NX5.0.0
    """
    
    def GetDisplayInstances(self) -> 'list[Annotation]':
        """
        Returns all the objects that display this PMI in graphics area.  
        
        Signature ``GetDisplayInstances()`` 
        
        :returns:  List of display instances  
        :rtype: list of :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: Pmi = ...  # unknown typename


class BusinessModifier(NXOpen.NXObject):
    """
    Represents a business modifier object.  
    
    A business modifier can be applied to a PMI to embed
    additional business/process information. The business modifier objects are knowledge fusion 
    driven meaning that they are created from the attributes defined in a .dfa file. 
    
    .. versionadded:: NX4.0.0
    """
    TextValue: str = ...
    """
    Returns or sets  the value 
    
    <hr>
    
    Getter Method
    
    Signature ``TextValue`` 
    
    :returns:  Value in the text format  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextValue`` 
    
    :param textValue:  New value in the text format  
    :type textValue: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Title: str = ...
    """
    Returns or sets  the title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns:  Title  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title:  New title  
    :type title: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: BusinessModifier = ...  # unknown typename


class ListBusinessModifier(BusinessModifier):
    """
    Represents a base class for list based business modifiers   
    
    .. versionadded:: NX4.0.0
    """
    
    def GetList(self) -> 'list[str]':
        """
        Returns the list  
        
        Signature ``GetList()`` 
        
        :returns:  List  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    CurrentItemIndex: int = ...
    """
    Returns or sets  the current item index 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentItemIndex`` 
    
    :returns:  Current item index  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentItemIndex`` 
    
    :param currentItemIndex:  New item index  
    :type currentItemIndex: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: ListBusinessModifier = ...  # unknown typename


class CustomerValueBusinessModifier(ListBusinessModifier):
    """
    Represents business modifier that applies customer values such as CTQ (Critical To Quality), 
    KC (Key Characteristic) to a PMI.  
    
    Please see ug_customer_value_bus_mod.dfa for attribute details.  
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.CustomerValueBusinessModifierBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: CustomerValueBusinessModifier = ...  # unknown typename


class MajorAngularDimensionBuilder(AngularDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.AngularDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateMajorAngularDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: MajorAngularDimensionBuilder = ...  # unknown typename


class UserSymbolPreferencesSizeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UserSymbolPreferencesSizeType():
    """
    Specifies whether length and height or scale and aspect ratio is used
    in specifying the size of the symbol 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LengthHeight", "length and height"
       "ScaleAspectRatio", "scale and aspect ratio"
    """
    LengthHeight = 0  # UserSymbolPreferencesSizeTypeMemberType
    ScaleAspectRatio = 1  # UserSymbolPreferencesSizeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UserSymbolPreferences(NXOpen.TransientObject):
    """
    Represents preferences related to user-defined symbols   
    
    .. versionadded:: NX3.0.0
    """
    
    class SizeType():
        """
        Specifies whether length and height or scale and aspect ratio is used
        in specifying the size of the symbol 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LengthHeight", "length and height"
           "ScaleAspectRatio", "scale and aspect ratio"
        """
        LengthHeight = 0  # UserSymbolPreferencesSizeTypeMemberType
        ScaleAspectRatio = 1  # UserSymbolPreferencesSizeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSize(self) -> tuple:
        """
        Gets the size preference 
        
        Signature ``GetSize()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (sizeType, lengthOrScale, heightOrAspectRatio). sizeType is a :py:class:`NXOpen.Annotations.UserSymbolPreferencesSizeType`.   Specifies whether length and height or scale and aspect ratio is used lengthOrScale is a float.   Length or scale heightOrAspectRatio is a float.   Height or aspect ratio 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetScaleAndAspectRatio(self, scale: float, aspectRatio: float) -> None:
        """
        Sets the scale and aspect ratio 
        
        Signature ``SetScaleAndAspectRatio(scale, aspectRatio)`` 
        
        :param scale: 
        :type scale: float 
        :param aspectRatio: 
        :type aspectRatio: float 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLengthAndHeight(self, length: float, height: float) -> None:
        """
        Sets the length and height 
        
        Signature ``SetLengthAndHeight(length, height)`` 
        
        :param length: 
        :type length: float 
        :param height: 
        :type height: float 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    


class WeldCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Weld` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def NewLineWeldData(self) -> LineWeldData:
        """
        Creates new LineWeldData object.  
        
        Signature ``NewLineWeldData()`` 
        
        :returns:  New LineWeldData  
        :rtype: :py:class:`NXOpen.Annotations.LineWeldData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateLineWeld(self, lineWeldData: LineWeldData, origin: NXOpen.Point3d, leader: LeaderBundle) -> LineWeld:
        """
        Creates a line weld.  
        
        Signature ``CreateLineWeld(lineWeldData, origin, leader)`` 
        
        :param lineWeldData: 
        :type lineWeldData: :py:class:`NXOpen.Annotations.LineWeldData` 
        :param origin:  Origin for the line weld  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the line weld  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New line weld  
        :rtype: :py:class:`NXOpen.Annotations.LineWeld` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiLineWeld(self, lineWeldData: LineWeldData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> PmiLineWeld:
        """
        Creates a PMI line weld.  
        
        Signature ``CreatePmiLineWeld(lineWeldData, pmiData, annotationPlane, origin, leader)`` 
        
        :param lineWeldData: 
        :type lineWeldData: :py:class:`NXOpen.Annotations.LineWeldData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the line weld lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the line weld  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the line weld  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New PMI line weld  
        :rtype: :py:class:`NXOpen.Annotations.PmiLineWeld` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateLineWeldBuilder(self, weld: LineWeld) -> LineWeldBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.LineWeldBuilder`  
        
        Signature ``CreateLineWeldBuilder(weld)`` 
        
        :param weld: 
        :type weld: :py:class:`NXOpen.Annotations.LineWeld` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineWeldBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiLineWeldBuilder(self, weld: PmiLineWeld) -> PmiLineWeldBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiLineWeldBuilder`  
        
        Signature ``CreatePmiLineWeldBuilder(weld)`` 
        
        :param weld: 
        :type weld: :py:class:`NXOpen.Annotations.PmiLineWeld` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiLineWeldBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    


class TableEditSettingsBuilder(NXOpen.Drafting.BaseEditSettingsBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TableEditSettingsBuilder`.  
    
    It provides an interface for editing Table Section settings.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drafting.SettingsManager.CreateTableEditSettingsBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: NXOpen.DisplayableObject) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected cell object.                                                                         None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    BendTable: BendTableSettingsBuilder = ...
    """
    Returns  the Bend table settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``BendTable`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BendTableSettingsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DisplayStyle: DisplayStyleBuilder = ...
    """
    Returns  the display style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DisplayStyleBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    HoleTableContent: HoleTableSettingsContentBuilder = ...
    """
    Returns  the Hole table settings content builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableContent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsContentBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableFormat: HoleTableSettingsFormatBuilder = ...
    """
    Returns  the Hole table settings format builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableHoleFilters: HoleTableSettingsHoleFiltersBuilder = ...
    """
    Returns  the Hole table settings hole filters builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableHoleFilters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsHoleFiltersBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableLabel: HoleTableSettingsLabelBuilder = ...
    """
    Returns  the Hole table settings label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableWorkflow: HoleTableSettingsWorkflowBuilder = ...
    """
    Returns  the Hole table settings workflow builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableWorkflow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsWorkflowBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Ordinate: OrdinateStyleBuilder = ...
    """
    Returns  the ordinate style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Ordinate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PartsList: PartsListBuilder = ...
    """
    Returns  the parts list style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``PartsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartsListBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RoutingBillOfMaterial: BillOfMaterialBuilder = ...
    """
    Returns  the table routing Bill of Materail builder 
    
    <hr>
    
    Getter Method
    
    Signature ``RoutingBillOfMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BillOfMaterialBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TableCell: TableCellStyleBuilder = ...
    """
    Returns  the cell style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableCell`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TableColumn: TableColumnBuilder = ...
    """
    Returns  the table column builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableColumn`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableColumnBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TableCutSheet: CutSheetBuilder = ...
    """
    Returns  the table cut sheet builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableCutSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CutSheetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TableLettering: LetteringStyleBuilder = ...
    """
    Returns  the lettering style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableLettering`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LetteringStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TableLineArrow: LineArrowStyleBuilder = ...
    """
    Returns  the line arrow style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableLineArrow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineArrowStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TablePinList: PinListBuilder = ...
    """
    Returns  the table pin list builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TablePinList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PinListBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TableSection: TableSectionStyleBuilder = ...
    """
    Returns  the section style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableSectionStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TabularNote: TabularNoteStyleBuilder = ...
    """
    Returns  the tabular note style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TabularNote`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TabularNoteStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: TableEditSettingsBuilder = ...  # unknown typename


class BoundaryBuilderSelectionMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BoundaryBuilderSelectionMethod():
    """
    This enum represents the methods for selecting boundaries  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curves", "Select boundaries by selecting curves"
       "Location", "Select boundaries by cursor location"
    """
    Curves = 0  # BoundaryBuilderSelectionMethodMemberType
    Location = 1  # BoundaryBuilderSelectionMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BoundaryBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This builder contains the boundaries that define a crosshatch pattern   
    
    .. versionadded:: NX6.0.0
    """
    
    class SelectionMethod():
        """
        This enum represents the methods for selecting boundaries  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curves", "Select boundaries by selecting curves"
           "Location", "Select boundaries by cursor location"
        """
        Curves = 0  # BoundaryBuilderSelectionMethodMemberType
        Location = 1  # BoundaryBuilderSelectionMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetView(self) -> NXOpen.View:
        """
        The boundary view  
        
        Signature ``GetView()`` 
        
        :returns:  Drafting view  
        :rtype: :py:class:`NXOpen.View` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetView(self, view: NXOpen.View) -> None:
        """
        The boundary view 
        
        Signature ``SetView(view)`` 
        
        :param view:  Drafting view  
        :type view: :py:class:`NXOpen.View` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CurveBoundaries: NXOpen.SectionList = ...
    """
    Returns  the curve boundaries 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveBoundaries`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SectionList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectionType: BoundaryBuilderSelectionMethod = ...
    """
    Returns or sets  the selection type 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BoundaryBuilderSelectionMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.BoundaryBuilderSelectionMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BoundaryBuilder = ...  # unknown typename


class BaseLinearDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.Dimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def SetNthSecondaryOrigin(self, nth: int, secondaryOrigin: NXOpen.Point3d) -> None:
        """
        The origin for nth secondary dimensions 
        
        Signature ``SetNthSecondaryOrigin(nth, secondaryOrigin)`` 
        
        :param nth: 
        :type nth: int 
        :param secondaryOrigin: 
        :type secondaryOrigin: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetNthSecondaryOrigin(self, nth: int) -> NXOpen.Point3d:
        """
        The origin for nth secondary dimensions  
        
        Signature ``GetNthSecondaryOrigin(nth)`` 
        
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNthSecondaryArrowheadOrientation(self, nth: int, secondaryArrowheadOrientation: TextPlacement) -> None:
        """
        The arrowhead orientation for nth secondary dimensions 
        
        Signature ``SetNthSecondaryArrowheadOrientation(nth, secondaryArrowheadOrientation)`` 
        
        :param nth: 
        :type nth: int 
        :param secondaryArrowheadOrientation: 
        :type secondaryArrowheadOrientation: :py:class:`NXOpen.Annotations.TextPlacement` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetNthSecondaryArrowheadOrientation(self, nth: int) -> TextPlacement:
        """
        The arrowhead orientation for nth secondary dimensions  
        
        Signature ``GetNthSecondaryArrowheadOrientation(nth)`` 
        
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.TextPlacement` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondaryCallouts(self) -> 'list[Dimension]':
        """
        The secondary callouts  
        
        Signature ``GetSecondaryCallouts()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DimensionSet: DimensionSetBuilder = ...
    """
    Returns  the dimension set 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionSetBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FirstAssociativity: NXOpen.SelectNXObject = ...
    """
    Returns  the first associativity.  
    
    Supported object types include Feature and DisplayableObject. 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    IsAutoplaced: bool = ...
    """
    Returns or sets  a flag to indicate if auto placement turned on.  
    
    This is used to compute origins for secondary dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``IsAutoplaced`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsAutoplaced`` 
    
    :param isAutoplaced: 
    :type isAutoplaced: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Measurement: DimensionMeasurementBuilder = ...
    """
    Returns  the measurement 
    
    <hr>
    
    Getter Method
    
    Signature ``Measurement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MeasurementType: DimensionMeasurementTypes = ...
    """
    Returns or sets  the measurement type
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementType`` 
    
    :param measurementType: 
    :type measurementType: :py:class:`NXOpen.Annotations.DimensionMeasurementTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SecondAssociativity: NXOpen.SelectNXObject = ...
    """
    Returns  the second associativity.  
    
    Supported object types include Feature and DisplayableObject. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UseBaseline: bool = ...
    """
    Returns or sets  a treat first associativity as a baseline 
    
    <hr>
    
    Getter Method
    
    Signature ``UseBaseline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseBaseline`` 
    
    :param useBaseline: 
    :type useBaseline: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    Null: BaseLinearDimensionBuilder = ...  # unknown typename


class LinearDimensionBuilder(BaseLinearDimensionBuilder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateLinearDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Driving: DrivingValueBuilder = ...
    """
    Returns  the driving 
    
    <hr>
    
    Getter Method
    
    Signature ``Driving`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: LinearDimensionBuilder = ...  # unknown typename


class SearchModelViewCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.SearchModelView` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.PmiManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSearchModelViewBuilder(self, searchModelView: NXOpen.ModelingView) -> SearchModelViewBuilder:
        """
        Creates the Search PMI builder  
        
        Signature ``CreateSearchModelViewBuilder(searchModelView)`` 
        
        :param searchModelView:  search model view 
        :type searchModelView: :py:class:`NXOpen.ModelingView` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSearchCriteriaDimensionBuilder(self, searchCriteria: NXOpen.NXObject) -> SearchCriteriaDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilder`  
        
        Signature ``CreateSearchCriteriaDimensionBuilder(searchCriteria)`` 
        
        :param searchCriteria:  search criteria  
        :type searchCriteria: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSearchCriteriaFeatureControlFrameBuilder(self, searchCriteria: NXOpen.NXObject) -> SearchCriteriaFeatureControlFrameBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilder`  
        
        Signature ``CreateSearchCriteriaFeatureControlFrameBuilder(searchCriteria)`` 
        
        :param searchCriteria:  search criteria  
        :type searchCriteria: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSearchCriteriaDatumFeatureSymbolBuilder(self, searchCriteria: NXOpen.NXObject) -> SearchCriteriaDatumFeatureSymbolBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SearchCriteriaDatumFeatureSymbolBuilder`  
        
        Signature ``CreateSearchCriteriaDatumFeatureSymbolBuilder(searchCriteria)`` 
        
        :param searchCriteria:  search criteria  
        :type searchCriteria: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDatumFeatureSymbolBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSearchCriteriaDatumTargetBuilder(self, searchCriteria: NXOpen.NXObject) -> SearchCriteriaDatumTargetBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SearchCriteriaDatumTargetBuilder`  
        
        Signature ``CreateSearchCriteriaDatumTargetBuilder(searchCriteria)`` 
        
        :param searchCriteria:  search criteria  
        :type searchCriteria: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDatumTargetBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSearchCriteriaSurfaceFinishBuilder(self, searchCriteria: NXOpen.NXObject) -> SearchCriteriaSurfaceFinishBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SearchCriteriaSurfaceFinishBuilder`  
        
        Signature ``CreateSearchCriteriaSurfaceFinishBuilder(searchCriteria)`` 
        
        :param searchCriteria:  search criteria  
        :type searchCriteria: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaSurfaceFinishBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSearchCriteriaPminotesBuilder(self, searchCriteria: NXOpen.NXObject) -> SearchCriteriaPMINotesBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SearchCriteriaPMINotesBuilder`  
        
        Signature ``CreateSearchCriteriaPminotesBuilder(searchCriteria)`` 
        
        :param searchCriteria:  search criteria  
        :type searchCriteria: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaPMINotesBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class OrdinateMarginCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.OrdinateMargin`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHorizontalMargin(self, ordinateOrigin: OrdinateOriginDimension, associativity: Associativity, offsetDistance: float) -> HorizontalOrdinateMargin:
        """
        Creates a horizontal ordinate margin object  
        
        Signature ``CreateHorizontalMargin(ordinateOrigin, associativity, offsetDistance)`` 
        
        :param ordinateOrigin:  Ordinate origin dimension  
        :type ordinateOrigin: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        :param associativity:  Associativity data for the ordinate margin  
        :type associativity: :py:class:`NXOpen.Annotations.Associativity` 
        :param offsetDistance:  Margin offset distance  
        :type offsetDistance: float 
        :returns:  New horizontal ordinate margin  
        :rtype: :py:class:`NXOpen.Annotations.HorizontalOrdinateMargin` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def CreateVerticalMargin(self, ordinateOrigin: OrdinateOriginDimension, associativity: Associativity, offsetDistance: float) -> VerticalOrdinateMargin:
        """
        Creates a vertical ordinate margin object  
        
        Signature ``CreateVerticalMargin(ordinateOrigin, associativity, offsetDistance)`` 
        
        :param ordinateOrigin:  Ordinate origin dimension  
        :type ordinateOrigin: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        :param associativity:  Associativity data for the ordinate margin  
        :type associativity: :py:class:`NXOpen.Annotations.Associativity` 
        :param offsetDistance:  Margin offset distance  
        :type offsetDistance: float 
        :returns:  New vertical ordinate margin  
        :rtype: :py:class:`NXOpen.Annotations.VerticalOrdinateMargin` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def AddMargin(self, ordinateOrigin: OrdinateOriginDimension, editMargin: OrdinateMargin, offsetDistance: float) -> OrdinateMargin:
        """
        Adds an ordinate margin object  
        
        Signature ``AddMargin(ordinateOrigin, editMargin, offsetDistance)`` 
        
        :param ordinateOrigin:  Ordinate origin dimension  
        :type ordinateOrigin: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        :param editMargin:  existing margin  
        :type editMargin: :py:class:`NXOpen.Annotations.OrdinateMargin` 
        :param offsetDistance:  Margin offset distance  
        :type offsetDistance: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.OrdinateMargin` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def CreateInferredMargin(self, ordinateOrigin: OrdinateOriginDimension, origin: NXOpen.Point3d, subtype: int) -> OrdinateMargin:
        """
        Creates an inferred ordinate margin object  
        
        Signature ``CreateInferredMargin(ordinateOrigin, origin, subtype)`` 
        
        :param ordinateOrigin:  Ordinate origin dimension  
        :type ordinateOrigin: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        :param origin:  Margin point in dimension entity space  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param subtype:  Ordinate margin subtype  
        :type subtype: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.OrdinateMargin` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    


class Centerline2dBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Centerline2dBuilderTypes():
    """
    the valid types of 2D Centerline, applicable only for creation 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromCurves", "centerline from curves"
       "ByPoints", "centerline by points"
    """
    FromCurves = 0  # Centerline2dBuilderTypesMemberType
    ByPoints = 1  # Centerline2dBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Centerline2dBuilderOffsetMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Centerline2dBuilderOffset():
    """
    the valid types of 2D Centerline offset method
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "no offset"
       "DistanceMethod", "offset distance method"
       "ObjectMethod", "offset object method"
    """
    NotSet = 0  # Centerline2dBuilderOffsetMemberType
    DistanceMethod = 1  # Centerline2dBuilderOffsetMemberType
    ObjectMethod = 2  # Centerline2dBuilderOffsetMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Centerline2dBuilder(CenterlineBuilder):
    """
    Builder for creating 2D Centerline.  
    
    It creates or edits 2D Centerlines 
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreateCenterline2dBuilder`
    
    Default values.
    
    ============================  ================================================
    Property                      Value
    ============================  ================================================
    OffsetDistance                0 
    ----------------------------  ------------------------------------------------
    OffsetMethod                  None 
    ----------------------------  ------------------------------------------------
    Settings.Extension            6.35 (millimeters part), 0.25 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Gap                  1.5875 (millimeters part), 0.0625 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.IndividualDistance   0 
    ----------------------------  ------------------------------------------------
    Settings.Size                 3.175 (millimeters part), 0.125 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Width                Thin 
    ----------------------------  ------------------------------------------------
    Type                          FromCurves 
    ============================  ================================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        the valid types of 2D Centerline, applicable only for creation 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromCurves", "centerline from curves"
           "ByPoints", "centerline by points"
        """
        FromCurves = 0  # Centerline2dBuilderTypesMemberType
        ByPoints = 1  # Centerline2dBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Offset():
        """
        the valid types of 2D Centerline offset method
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "no offset"
           "DistanceMethod", "offset distance method"
           "ObjectMethod", "offset object method"
        """
        NotSet = 0  # Centerline2dBuilderOffsetMemberType
        DistanceMethod = 1  # Centerline2dBuilderOffsetMemberType
        ObjectMethod = 2  # Centerline2dBuilderOffsetMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit object
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OffsetDistance: float = ...
    """
    Returns or sets  the offset distance for centerline by points
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDistance`` 
    
    :param offsetDistance: 
    :type offsetDistance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OffsetMethod: Centerline2dBuilderOffset = ...
    """
    Returns or sets  the offset method for centerline by points
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.Centerline2dBuilderOffset` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetMethod`` 
    
    :param offsetMethod: 
    :type offsetMethod: :py:class:`NXOpen.Annotations.Centerline2dBuilderOffset` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OffsetObject: NXOpen.SelectNXObject = ...
    """
    Returns  the offset object for centerline by points 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Point1: NXOpen.SelectNXObject = ...
    """
    Returns  the point 1 of 2D Centerline for centerline by points
    
    <hr>
    
    Getter Method
    
    Signature ``Point1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Point2: NXOpen.SelectNXObject = ...
    """
    Returns  the point 2 of 2D Centerline for centerline by points
    
    <hr>
    
    Getter Method
    
    Signature ``Point2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Settings: Centerline2dSettingsBuilder = ...
    """
    Returns  the settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Settings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.Centerline2dSettingsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Side1: NXOpen.SelectNXObject = ...
    """
    Returns  the side 1 of 2D Centerline for centerline from curves
    
    <hr>
    
    Getter Method
    
    Signature ``Side1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Side2: NXOpen.SelectNXObject = ...
    """
    Returns  the side 2 of 2D Centerline for centerline from curves
    
    <hr>
    
    Getter Method
    
    Signature ``Side2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: Centerline2dBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.Centerline2dBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.Centerline2dBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: Centerline2dBuilder = ...  # unknown typename


class NarrowDimensionData():
    """
    Specifies the narrow dimension preferences .  
    
    Constructor: 
    NXOpen.Annotations.NarrowDimensionData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    DisplayType: NarrowDisplayOption = ...
    """
    Field Value
    Type::py:class:`NXOpen.Annotations.NarrowDisplayOption`
    """
    TextOrientation: NarrowTextOrientation = ...
    """
    Field Value
    Type::py:class:`NXOpen.Annotations.NarrowTextOrientation`
    """
    LeaderAngle: float = ...
    """
    Field Value
    Type:float
    """
    TextOffset: float = ...
    """
    Field Value
    Type:float
    """


class LabelCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of labels 
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX3.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def NewLabelData(self) -> LabelData:
        """
        Creates new LabelData object  
        
        Signature ``NewLabelData()`` 
        
        :returns:  New LabelData  
        :rtype: :py:class:`NXOpen.Annotations.LabelData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiLabel(self, labelData: LabelData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> PmiLabel:
        """
        Creates a PMI label  
        
        Signature ``CreatePmiLabel(labelData, pmiData, annotationPlane, origin, leader)`` 
        
        :param labelData:  Label data  
        :type labelData: :py:class:`NXOpen.Annotations.LabelData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the label lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the label  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the label  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New PMI label  
        :rtype: :py:class:`NXOpen.Annotations.PmiLabel` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    


class BaseFrameBarBuilderAxisTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseFrameBarBuilderAxisType():
    """
    Enum for Ship Axis This is used by :py:meth:`NXOpen.Annotations.BaseFrameBarBuilder.Axis` 
    and :py:meth:`NXOpen.Annotations.BaseFrameBarBuilder.Axis` to get/set the axis for a frame bar
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", "Ship X Axis"
       "Y", "Ship Y Axis"
       "Z", "Ship Z Axis"
    """
    X = 0  # BaseFrameBarBuilderAxisTypeMemberType
    Y = 1  # BaseFrameBarBuilderAxisTypeMemberType
    Z = 2  # BaseFrameBarBuilderAxisTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseFrameBarBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.BaseFrameBarBuilder`.  
    
    This class allows to create frame bar annotation
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX8.0.0
    """
    
    class AxisType():
        """
        Enum for Ship Axis This is used by :py:meth:`NXOpen.Annotations.BaseFrameBarBuilder.Axis` 
        and :py:meth:`NXOpen.Annotations.BaseFrameBarBuilder.Axis` to get/set the axis for a frame bar
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", "Ship X Axis"
           "Y", "Ship Y Axis"
           "Z", "Ship Z Axis"
        """
        X = 0  # BaseFrameBarBuilderAxisTypeMemberType
        Y = 1  # BaseFrameBarBuilderAxisTypeMemberType
        Z = 2  # BaseFrameBarBuilderAxisTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateFromConceptModel(self) -> None:
        """
        This function is used to update framebar from Concept model 
        
        Signature ``UpdateFromConceptModel()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def ReverseTics(self) -> None:
        """
        This function is used to reverse tics on the framebar 
        
        Signature ``ReverseTics()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def CreateFrameBarObject(self) -> None:
        """
        Creates frame bar object 
        
        Signature ``CreateFrameBarObject()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetFramebar(self) -> BaseFrameBar:
        """
        The frame bar  
        
        Signature ``GetFramebar()`` 
        
        :returns:  The frame bar  
        :rtype: :py:class:`NXOpen.Annotations.BaseFrameBar` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateFrameBarFromStyle(self) -> None:
        """
        Updates frame bar object as per style 
        
        Signature ``UpdateFrameBarFromStyle()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    AftPerpendicular: bool = ...
    """
    Returns or sets  the aft perpendicular 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicular`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicular`` 
    
    :param aftPerpendicular: 
    :type aftPerpendicular: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Axis: BaseFrameBarBuilderAxisType = ...
    """
    Returns or sets  the axis 
    
    <hr>
    
    Getter Method
    
    Signature ``Axis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseFrameBarBuilderAxisType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Axis`` 
    
    :param axis: 
    :type axis: :py:class:`NXOpen.Annotations.BaseFrameBarBuilderAxisType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Baseline: bool = ...
    """
    Returns or sets  the baseline 
    
    <hr>
    
    Getter Method
    
    Signature ``Baseline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Baseline`` 
    
    :param baseline: 
    :type baseline: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeads: bool = ...
    """
    Returns or sets  the bulk heads 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeads`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeads`` 
    
    :param bulkHeads: 
    :type bulkHeads: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Centerline: bool = ...
    """
    Returns or sets  the centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Centerline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Centerline`` 
    
    :param centerline: 
    :type centerline: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Decks: bool = ...
    """
    Returns or sets  the decks 
    
    <hr>
    
    Getter Method
    
    Signature ``Decks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Decks`` 
    
    :param decks: 
    :type decks: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicular: bool = ...
    """
    Returns or sets  the forward perpendicular 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicular`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicular`` 
    
    :param forwardPerpendicular: 
    :type forwardPerpendicular: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFrames: bool = ...
    """
    Returns or sets  the inter transverse frames 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFrames`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFrames`` 
    
    :param interTransverseFrames: 
    :type interTransverseFrames: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFrames: bool = ...
    """
    Returns or sets  the longitudinal yframes 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFrames`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFrames`` 
    
    :param longitudinalYFrames: 
    :type longitudinalYFrames: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFrames: bool = ...
    """
    Returns or sets  the longitudinal zframes 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFrames`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFrames`` 
    
    :param longitudinalZFrames: 
    :type longitudinalZFrames: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TransveralInsertArea: bool = ...
    """
    Returns or sets  the transveral insert area 
    
    <hr>
    
    Getter Method
    
    Signature ``TransveralInsertArea`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransveralInsertArea`` 
    
    :param transveralInsertArea: 
    :type transveralInsertArea: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFrames: bool = ...
    """
    Returns or sets  the transverse frames 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFrames`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFrames`` 
    
    :param transverseFrames: 
    :type transverseFrames: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    View: NXOpen.Drawings.SelectDraftingView = ...
    """
    Returns  the select view 
    
    <hr>
    
    Getter Method
    
    Signature ``View`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Waterline: bool = ...
    """
    Returns or sets  the waterline 
    
    <hr>
    
    Getter Method
    
    Signature ``Waterline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Waterline`` 
    
    :param waterline: 
    :type waterline: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: BaseFrameBarBuilder = ...  # unknown typename


class ToleranceZoneShapeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ToleranceZoneShape():
    """
    Specifies the tolerance zone shape 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Planar", "Specifies planar zone shape"
       "Cylindrical", "Specifies cylindrical zone shape"
       "Spherical", "Specifies spherical zone shape"
       "Last", "Last enum value. Should not be used."
    """
    Planar = 0  # ToleranceZoneShapeMemberType
    Cylindrical = 1  # ToleranceZoneShapeMemberType
    Spherical = 2  # ToleranceZoneShapeMemberType
    Last = 3  # ToleranceZoneShapeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiArcLengthDimension(BaseArcLengthDimension):
    """
    Represents a PMI arc length dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiCurveLengthDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiArcLengthDimension = ...  # unknown typename


class VerticalTextJustificationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VerticalTextJustification():
    """
    Represents the vertical text justification 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", " - "
       "Middle", " - "
       "Bottom", " - "
    """
    Top = 1  # VerticalTextJustificationMemberType
    Middle = 2  # VerticalTextJustificationMemberType
    Bottom = 3  # VerticalTextJustificationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MasterSymbolListItemBuilderTextTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MasterSymbolListItemBuilderTextTypes():
    """
    The Enum for Text Types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Mandatory", " - "
       "Arbitrary", " - "
       "Controlled", " - "
       "PartiallyControlled", " - "
       "Integer", " - "
       "Real", " - "
       "Rule", " - "
    """
    Mandatory = 0  # MasterSymbolListItemBuilderTextTypesMemberType
    Arbitrary = 1  # MasterSymbolListItemBuilderTextTypesMemberType
    Controlled = 2  # MasterSymbolListItemBuilderTextTypesMemberType
    PartiallyControlled = 3  # MasterSymbolListItemBuilderTextTypesMemberType
    Integer = 4  # MasterSymbolListItemBuilderTextTypesMemberType
    Real = 5  # MasterSymbolListItemBuilderTextTypesMemberType
    Rule = 6  # MasterSymbolListItemBuilderTextTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MasterSymbolListItemBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.CreateMasterSymbolListItemBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class TextTypes():
        """
        The Enum for Text Types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Mandatory", " - "
           "Arbitrary", " - "
           "Controlled", " - "
           "PartiallyControlled", " - "
           "Integer", " - "
           "Real", " - "
           "Rule", " - "
        """
        Mandatory = 0  # MasterSymbolListItemBuilderTextTypesMemberType
        Arbitrary = 1  # MasterSymbolListItemBuilderTextTypesMemberType
        Controlled = 2  # MasterSymbolListItemBuilderTextTypesMemberType
        PartiallyControlled = 3  # MasterSymbolListItemBuilderTextTypesMemberType
        Integer = 4  # MasterSymbolListItemBuilderTextTypesMemberType
        Real = 5  # MasterSymbolListItemBuilderTextTypesMemberType
        Rule = 6  # MasterSymbolListItemBuilderTextTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetMultilineString(self) -> 'list[str]':
        """
        Returns the  multiple notes for a given Text Type.  
        
        this property is valid for 
        :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Arbitrary  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>`, 
        :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Controlled  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>`,
        :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.PartiallyControlled  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>`
        
        Signature ``GetMultilineString()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMultilineString(self, multilineString: 'list[str]') -> None:
        """
        Sets the multiple notes for the given Text Type 
        
        Signature ``SetMultilineString(multilineString)`` 
        
        :param multilineString:  array of notes  
        :type multilineString: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DoubleDefault: float = ...
    """
    Returns or sets  the double default, this property is valid if text type is :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Real  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleDefault`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleDefault`` 
    
    :param doubleDefault: 
    :type doubleDefault: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    DoubleMax: float = ...
    """
    Returns or sets  the double max, this property is valid if text type is :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Real  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleMax`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleMax`` 
    
    :param doubleMax: 
    :type doubleMax: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    DoubleMin: float = ...
    """
    Returns or sets  the double min, this property is valid if text type is :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Real  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleMin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleMin`` 
    
    :param doubleMin: 
    :type doubleMin: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    IntegerDefault: int = ...
    """
    Returns or sets  the integer default, this property is valid if text type is :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Integer  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegerDefault`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegerDefault`` 
    
    :param integerDefault: 
    :type integerDefault: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    IntegerMax: int = ...
    """
    Returns or sets  the integer max ,this property is valid if text type is :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Integer  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegerMax`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegerMax`` 
    
    :param integerMax: 
    :type integerMax: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    IntegerMin: int = ...
    """
    Returns or sets  the integer min , this property is valid if text type is :py:class:` NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes.Integer  < NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegerMin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegerMin`` 
    
    :param integerMin: 
    :type integerMin: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    NoteText: str = ...
    """
    Returns or sets  the first line of note text 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteText`` 
    
    :param noteText: 
    :type noteText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    NoteTitle: str = ...
    """
    Returns or sets  the note title 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteTitle`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteTitle`` 
    
    :param noteTitle: 
    :type noteTitle: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Rule: str = ...
    """
    Returns or sets  the note rule 
    
    <hr>
    
    Getter Method
    
    Signature ``Rule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rule`` 
    
    :param rule: 
    :type rule: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    TextType: MasterSymbolListItemBuilderTextTypes = ...
    """
    Returns or sets  the text type 
    
    <hr>
    
    Getter Method
    
    Signature ``TextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextType`` 
    
    :param textType: 
    :type textType: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilderTextTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: MasterSymbolListItemBuilder = ...  # unknown typename


class BaseFrameBar(Annotation):
    """
    Represents a base frame bar class   
    
    This is an abstract class and cannot be directly instantiated
    
    .. versionadded:: NX8.0.0
    """
    
    def GetFramebarPreferences(self) -> FrameBarPreferences:
        """
        Returns the framebar preferences for the annotation  
        
        Signature ``GetFramebarPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.FrameBarPreferences` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFramebarPreferences(self, framebarPrefs: FrameBarPreferences) -> None:
        """
        Sets the symbol preferences for the annotation 
        
        Signature ``SetFramebarPreferences(framebarPrefs)`` 
        
        :param framebarPrefs: 
        :type framebarPrefs: :py:class:`NXOpen.Annotations.FrameBarPreferences` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    Null: BaseFrameBar = ...  # unknown typename


class FrameBar(BaseFrameBar):
    """
    Represents a frame bar class   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.FrameBarBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: FrameBar = ...  # unknown typename


class GovernmentSecurityInformation(PmiAttribute):
    """
    Represents a Government Security Information   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.GovernmentSecurityInformationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: GovernmentSecurityInformation = ...  # unknown typename


class SearchModelViewBuilderPmiTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchModelViewBuilderPmiTypes():
    """
    the search criteria pmitype 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Dimension", "dimension type"
       "FeatureControlFrame", "feature control frame type"
       "DatumFeatureSymbol", "datum feature symbol type"
       "DatumTarget", "datum target type"
       "SurfaceFinish", "surface finish type"
       "Note", "note type"
    """
    Dimension = 0  # SearchModelViewBuilderPmiTypesMemberType
    FeatureControlFrame = 1  # SearchModelViewBuilderPmiTypesMemberType
    DatumFeatureSymbol = 2  # SearchModelViewBuilderPmiTypesMemberType
    DatumTarget = 3  # SearchModelViewBuilderPmiTypesMemberType
    SurfaceFinish = 4  # SearchModelViewBuilderPmiTypesMemberType
    Note = 5  # SearchModelViewBuilderPmiTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchModelViewBuilderValueComparisionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchModelViewBuilderValueComparisionOptions():
    """
    Represents the value comparision options
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Less", " - "
       "LessEqual", " - "
       "Equal", " - "
       "MoreEqual", " - "
       "More", " - "
    """
    Less = 0  # SearchModelViewBuilderValueComparisionOptionsMemberType
    LessEqual = 1  # SearchModelViewBuilderValueComparisionOptionsMemberType
    Equal = 2  # SearchModelViewBuilderValueComparisionOptionsMemberType
    MoreEqual = 3  # SearchModelViewBuilderValueComparisionOptionsMemberType
    More = 4  # SearchModelViewBuilderValueComparisionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchModelViewBuilderTextComparisionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchModelViewBuilderTextComparisionOptions():
    """
    Represents the text comparision options
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Equals", "Equals"
       "Contains", "Contains"
    """
    Equals = 0  # SearchModelViewBuilderTextComparisionOptionsMemberType
    Contains = 1  # SearchModelViewBuilderTextComparisionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchModelViewBuilderSearchScopeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchModelViewBuilderSearchScopeOptions():
    """
    seaerch scope type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WorkPart", "work part only"
       "WorkPartAndComponents", "work part and components"
    """
    WorkPart = 0  # SearchModelViewBuilderSearchScopeOptionsMemberType
    WorkPartAndComponents = 1  # SearchModelViewBuilderSearchScopeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchModelViewBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.SearchModelViewBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SearchModelViewCollection.CreateSearchModelViewBuilder`
    
    Default values.
    
    ========  ==========
    Property  Value
    ========  ==========
    PmiType   Dimension 
    ========  ==========
    
    .. versionadded:: NX7.5.0
    """
    
    class PmiTypes():
        """
        the search criteria pmitype 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Dimension", "dimension type"
           "FeatureControlFrame", "feature control frame type"
           "DatumFeatureSymbol", "datum feature symbol type"
           "DatumTarget", "datum target type"
           "SurfaceFinish", "surface finish type"
           "Note", "note type"
        """
        Dimension = 0  # SearchModelViewBuilderPmiTypesMemberType
        FeatureControlFrame = 1  # SearchModelViewBuilderPmiTypesMemberType
        DatumFeatureSymbol = 2  # SearchModelViewBuilderPmiTypesMemberType
        DatumTarget = 3  # SearchModelViewBuilderPmiTypesMemberType
        SurfaceFinish = 4  # SearchModelViewBuilderPmiTypesMemberType
        Note = 5  # SearchModelViewBuilderPmiTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ValueComparisionOptions():
        """
        Represents the value comparision options
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Less", " - "
           "LessEqual", " - "
           "Equal", " - "
           "MoreEqual", " - "
           "More", " - "
        """
        Less = 0  # SearchModelViewBuilderValueComparisionOptionsMemberType
        LessEqual = 1  # SearchModelViewBuilderValueComparisionOptionsMemberType
        Equal = 2  # SearchModelViewBuilderValueComparisionOptionsMemberType
        MoreEqual = 3  # SearchModelViewBuilderValueComparisionOptionsMemberType
        More = 4  # SearchModelViewBuilderValueComparisionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TextComparisionOptions():
        """
        Represents the text comparision options
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Equals", "Equals"
           "Contains", "Contains"
        """
        Equals = 0  # SearchModelViewBuilderTextComparisionOptionsMemberType
        Contains = 1  # SearchModelViewBuilderTextComparisionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SearchScopeOptions():
        """
        seaerch scope type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WorkPart", "work part only"
           "WorkPartAndComponents", "work part and components"
        """
        WorkPart = 0  # SearchModelViewBuilderSearchScopeOptionsMemberType
        WorkPartAndComponents = 1  # SearchModelViewBuilderSearchScopeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ExecuteSearch(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``ExecuteSearch()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveAsModelView(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``SaveAsModelView()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetResults(self) -> 'list[NXOpen.NXObject]':
        """
        All results  
        
        Signature ``GetResults()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCriteriaObject(self, searchType: SearchModelViewBuilderPmiTypes) -> NXOpen.NXObject:
        """
        Create search criteria object in search model view builder 
        
        Signature ``CreateCriteriaObject(searchType)`` 
        
        :param searchType:  search type  
        :type searchType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderPmiTypes` 
        :returns:  criteria object  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteCriteriaObject(self, criteriaObject: NXOpen.NXObject) -> None:
        """
        Delete search criteria object in search model view builder
        
        Signature ``DeleteCriteriaObject(criteriaObject)`` 
        
        :param criteriaObject:  criteria Object  
        :type criteriaObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    CriteriaList: NXOpen.TaggedObjectList = ...
    """
    Returns  the criteria list 
    
    <hr>
    
    Getter Method
    
    Signature ``CriteriaList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ModelViewName: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``ModelViewName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelViewName`` 
    
    :param modelViewName: 
    :type modelViewName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PmiType: SearchModelViewBuilderPmiTypes = ...
    """
    Returns or sets  the pmi type 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderPmiTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiType`` 
    
    :param pmiType: 
    :type pmiType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderPmiTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SearchScope: SearchModelViewBuilderSearchScopeOptions = ...
    """
    Returns or sets  the search scope 
    
    <hr>
    
    Getter Method
    
    Signature ``SearchScope`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderSearchScopeOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SearchScope`` 
    
    :param searchScope: 
    :type searchScope: :py:class:`NXOpen.Annotations.SearchModelViewBuilderSearchScopeOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SearchModelViewBuilder = ...  # unknown typename


class BaseChamferDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.BaseChamferDimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FirstAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Inherit: SelectDimension = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectDimension` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Orientation: ChamferOrientationType = ...
    """
    Returns or sets  the orientation of linear chamfer dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ChamferOrientationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.Annotations.ChamferOrientationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SecondAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BaseChamferDimensionBuilder = ...  # unknown typename


class LineArrowStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.LineArrowStyleBuilder`.  
    
    This class queries and sets preferences that apply to leaders and arrow and 
    extension lines when creating or editing annotations, including dimensions.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AllAroundSymbolSize: float = ...
    """
    Returns or sets  the size of all around symbol.  
    
    This is also used for inner diameter of all over symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``AllAroundSymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllAroundSymbolSize`` 
    
    :param allAroundSymbol: 
    :type allAroundSymbol: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ArrowheadIncludedAngle: float = ...
    """
    Returns or sets  the arrowhead included angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadIncludedAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadIncludedAngle`` 
    
    :param arrowheadIncludedAngle: 
    :type arrowheadIncludedAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ArrowheadLength: float = ...
    """
    Returns or sets  the arrowhead length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadLength`` 
    
    :param arrowheadLength: 
    :type arrowheadLength: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ClipOrdinateDimensionLine: bool = ...
    """
    Returns or sets  the clipping of the dimension line to the ordinate origin at the view border 
    
    <hr>
    
    Getter Method
    
    Signature ``ClipOrdinateDimensionLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClipOrdinateDimensionLine`` 
    
    :param clipOrdinateDimLine: 
    :type clipOrdinateDimLine: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DatumLengthPastArrow: float = ...
    """
    Returns or sets  the distance from the apex of the datum arrowhead to the
    end of the extension line 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumLengthPastArrow`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumLengthPastArrow`` 
    
    :param datumLengthPastArrow: 
    :type datumLengthPastArrow: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DotArrowheadDiameter: float = ...
    """
    Returns or sets  the dot arrowhead diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``DotArrowheadDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DotArrowheadDiameter`` 
    
    :param dotArrowheadDiameter: 
    :type dotArrowheadDiameter: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstArrowLineColor: NXOpen.NXColor = ...
    """
    Returns or sets  the first arrow line color 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowLineColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowLineColor`` 
    
    :param firstArrowLineColor: 
    :type firstArrowLineColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstArrowLineFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the first arrow line font 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowLineFont`` 
    
    :param firstArrowLineFont: 
    :type firstArrowLineFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstArrowLineWidth: LineWidth = ...
    """
    Returns or sets  the first arrow line width 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowLineWidth`` 
    
    :param firstArrowLineWidth: 
    :type firstArrowLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstArrowType: ArrowheadType = ...
    """
    Returns or sets  the first arrowhead type 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowType`` 
    
    :param firstArrowType: 
    :type firstArrowType: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstArrowheadColor: NXOpen.NXColor = ...
    """
    Returns or sets  the first arrowhead color 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowheadColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowheadColor`` 
    
    :param firstArrowheadColor: 
    :type firstArrowheadColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstArrowheadFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the first arrowhead font 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowheadFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowheadFont`` 
    
    :param firstArrowheadFont: 
    :type firstArrowheadFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstArrowheadWidth: LineWidth = ...
    """
    Returns or sets  the first arrowhead width 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowheadWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowheadWidth`` 
    
    :param firstArrowheadWidth: 
    :type firstArrowheadWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstExtensionLineColor: NXOpen.NXColor = ...
    """
    Returns or sets  the first extension line color 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstExtensionLineColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstExtensionLineColor`` 
    
    :param firstExtensionLineColor: 
    :type firstExtensionLineColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstExtensionLineFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the first extension line font 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstExtensionLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstExtensionLineFont`` 
    
    :param firstExtensionLineFont: 
    :type firstExtensionLineFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstExtensionLineWidth: LineWidth = ...
    """
    Returns or sets  the first extension line width 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstExtensionLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstExtensionLineWidth`` 
    
    :param firstExtensionLineWidth: 
    :type firstExtensionLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstJogAngle: float = ...
    """
    Returns or sets  the first jog angle, between the jog and the extension line, in degrees.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstJogAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstJogAngle`` 
    
    :param jogAngle: 
    :type jogAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstJogDisplay: bool = ...
    """
    Returns or sets  the first jog's display flag, if true, the first jog will be displayed, false otherwise 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstJogDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstJogDisplay`` 
    
    :param jogDisplay: 
    :type jogDisplay: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstJogEndOffset: float = ...
    """
    Returns or sets  the first jog end offset from the dimension line 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstJogEndOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstJogEndOffset`` 
    
    :param jogEndOffset: 
    :type jogEndOffset: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstJogOrientation: JogOrientation = ...
    """
    Returns or sets  the first jog orientation, can be either IN or OUT 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstJogOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.JogOrientation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstJogOrientation`` 
    
    :param jogOrientation: 
    :type jogOrientation: :py:class:`NXOpen.Annotations.JogOrientation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstJogStartOffset: float = ...
    """
    Returns or sets  the first jog start offset from the dimension line 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstJogStartOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstJogStartOffset`` 
    
    :param jogStartOffset: 
    :type jogStartOffset: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstPosToExtensionLineDistance: float = ...
    """
    Returns or sets  the distance from the position on the object being dimensioned to
    the end of the first extension line or arc 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstPosToExtensionLineDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstPosToExtensionLineDistance`` 
    
    :param firstPosToExtensionLineDistance: 
    :type firstPosToExtensionLineDistance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LeaderLocation: VerticalTextJustification = ...
    """
    Returns or sets  the leader location 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.VerticalTextJustification` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderLocation`` 
    
    :param leaderLocation: 
    :type leaderLocation: :py:class:`NXOpen.Annotations.VerticalTextJustification` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LeaderOrientation: LeaderSide = ...
    """
    Returns or sets  the leader orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderSide` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderOrientation`` 
    
    :param leaderOrientation: 
    :type leaderOrientation: :py:class:`NXOpen.Annotations.LeaderSide` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LinePastArrowDistance: float = ...
    """
    Returns or sets  the distance an extension line or arc extends past the dimension line or arc 
    
    <hr>
    
    Getter Method
    
    Signature ``LinePastArrowDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinePastArrowDistance`` 
    
    :param linePastArrowDistance: 
    :type linePastArrowDistance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LinePastArrowDistance2: float = ...
    """
    Returns or sets  the second distance an extension line or arc extends past the dimension line or arc 
    
    <hr>
    
    Getter Method
    
    Signature ``LinePastArrowDistance2`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinePastArrowDistance2`` 
    
    :param linePastArrowDistance: 
    :type linePastArrowDistance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ObliqueExtensionLineAngle: float = ...
    """
    Returns or sets  the extension line angle.  
    
    This angle only applies to vertical and horizontal dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``ObliqueExtensionLineAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObliqueExtensionLineAngle`` 
    
    :param obliqueExtensionLineAngle: 
    :type obliqueExtensionLineAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondArrowLineColor: NXOpen.NXColor = ...
    """
    Returns or sets  the second arrow line color 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowLineColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowLineColor`` 
    
    :param secondArrowLineColor: 
    :type secondArrowLineColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondArrowLineFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the second arrow line font 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowLineFont`` 
    
    :param secondArrowLineFont: 
    :type secondArrowLineFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondArrowLineWidth: LineWidth = ...
    """
    Returns or sets  the second arrow line width 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowLineWidth`` 
    
    :param secondArrowLineWidth: 
    :type secondArrowLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondArrowType: ArrowheadType = ...
    """
    Returns or sets  the second arrowhead type 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowType`` 
    
    :param secondArrowType: 
    :type secondArrowType: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondArrowheadColor: NXOpen.NXColor = ...
    """
    Returns or sets  the second arrowhead color 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowheadColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowheadColor`` 
    
    :param secondArrowheadColor: 
    :type secondArrowheadColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondArrowheadFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the second arrowhead font 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowheadFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowheadFont`` 
    
    :param secondArrowheadFont: 
    :type secondArrowheadFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondArrowheadWidth: LineWidth = ...
    """
    Returns or sets  the second arrowhead width 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowheadWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowheadWidth`` 
    
    :param secondArrowheadWidth: 
    :type secondArrowheadWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondExtensionLineColor: NXOpen.NXColor = ...
    """
    Returns or sets  the second extension line color 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondExtensionLineColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondExtensionLineColor`` 
    
    :param secondExtensionLineColor: 
    :type secondExtensionLineColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondExtensionLineFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the second extension line font 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondExtensionLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondExtensionLineFont`` 
    
    :param secondExtensionLineFont: 
    :type secondExtensionLineFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondExtensionLineWidth: LineWidth = ...
    """
    Returns or sets  the second extension line width 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondExtensionLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondExtensionLineWidth`` 
    
    :param secondExtensionLineWidth: 
    :type secondExtensionLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondJogAngle: float = ...
    """
    Returns or sets  the second jog angle, between the jog and the extension line, in degrees.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondJogAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondJogAngle`` 
    
    :param jogAngle: 
    :type jogAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondJogDisplay: bool = ...
    """
    Returns or sets  the second jog's display flag, if true, the second jog will be displayed, false otherwise  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondJogDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondJogDisplay`` 
    
    :param jogDisplay: 
    :type jogDisplay: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondJogEndOffset: float = ...
    """
    Returns or sets  the second jog end offset from the dimension line 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondJogEndOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondJogEndOffset`` 
    
    :param jogEndOffset: 
    :type jogEndOffset: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondJogOrientation: JogOrientation = ...
    """
    Returns or sets  the second jog orientation, can be either IN or OUT 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondJogOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.JogOrientation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondJogOrientation`` 
    
    :param jogOrientation: 
    :type jogOrientation: :py:class:`NXOpen.Annotations.JogOrientation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondJogStartOffset: float = ...
    """
    Returns or sets  the second jog start offset from the dimension line 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondJogStartOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondJogStartOffset`` 
    
    :param jogStartOffset: 
    :type jogStartOffset: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SecondPosToExtensionLineDistance: float = ...
    """
    Returns or sets  the  distance from the position on the object being dimensioned to
    the end of the second extension line 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondPosToExtensionLineDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondPosToExtensionLineDistance`` 
    
    :param secondPosToExtensionLineDistance: 
    :type secondPosToExtensionLineDistance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StubLength: float = ...
    """
    Returns or sets  the stub length.  
    
    This is the size of the dogleg on a label or dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``StubLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StubLength`` 
    
    :param stubLength: 
    :type stubLength: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StubSymbolType: StubSymbolType = ...
    """
    Returns or sets  the stub symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``StubSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StubSymbolType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StubSymbolType`` 
    
    :param stubSymbolType: 
    :type stubSymbolType: :py:class:`NXOpen.Annotations.StubSymbolType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextOverLeaderGapFactor: float = ...
    """
    Returns or sets  the character size factor that controls the gap between text and the leader 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOverLeaderGapFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOverLeaderGapFactor`` 
    
    :param textOverLeaderGapFactor: 
    :type textOverLeaderGapFactor: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextOverStubFactor: float = ...
    """
    Returns or sets  the character size factor which controls the distance between the stub and label text
    when the text displays above the stub line 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOverStubFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOverStubFactor`` 
    
    :param textOverStubFactor: 
    :type textOverStubFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextToLineDistance: float = ...
    """
    Returns or sets  the distance from the text to the dimension line(stub) or arc 
    
    <hr>
    
    Getter Method
    
    Signature ``TextToLineDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextToLineDistance`` 
    
    :param textToLineDistance: 
    :type textToLineDistance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: LineArrowStyleBuilder = ...  # unknown typename


class SymbolPreferences(NXOpen.TransientObject):
    """
    Represents symbol preferences   
    
    .. versionadded:: NX3.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIdSymbolCfw(self) -> LineCfw:
        """
        Returns the id symbol color, font, and width  
        
        Signature ``GetIdSymbolCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetIdSymbolCfw(self, idSymbolCfw: LineCfw) -> None:
        """
        Sets the id symbol color, font, and width  
        
        Signature ``SetIdSymbolCfw(idSymbolCfw)`` 
        
        :param idSymbolCfw: 
        :type idSymbolCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUserDefinedSymbolCfw(self) -> LineCfw:
        """
        Returns the user defined symbol color, font, and width   
        
        Signature ``GetUserDefinedSymbolCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUserDefinedSymbolCfw(self, userDefinedSymbolCfw: LineCfw) -> None:
        """
        Sets the user defined symbol color, font, and width  
        
        Signature ``SetUserDefinedSymbolCfw(userDefinedSymbolCfw)`` 
        
        :param userDefinedSymbolCfw: 
        :type userDefinedSymbolCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetCenterlineSymbolCfw(self) -> LineCfw:
        """
        Returns the centerline symbol color, font, and width   
        
        Signature ``GetCenterlineSymbolCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCenterlineSymbolCfw(self, centerlineSymbolCfw: LineCfw) -> None:
        """
        Sets the centerline symbol color, font, and width  
        
        Signature ``SetCenterlineSymbolCfw(centerlineSymbolCfw)`` 
        
        :param centerlineSymbolCfw: 
        :type centerlineSymbolCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIntersectionSymbolCfw(self) -> LineCfw:
        """
        Returns the intersection symbol color, font, and width   
        
        Signature ``GetIntersectionSymbolCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetIntersectionSymbolCfw(self, intersectionSymbolCfw: LineCfw) -> None:
        """
        Sets the intersection symbol color, font, and width  
        
        Signature ``SetIntersectionSymbolCfw(intersectionSymbolCfw)`` 
        
        :param intersectionSymbolCfw: 
        :type intersectionSymbolCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetTargetSymbolCfw(self) -> LineCfw:
        """
        Returns the target symbol color, font, and width   
        
        Signature ``GetTargetSymbolCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTargetSymbolCfw(self, targetSymbolCfw: LineCfw) -> None:
        """
        Sets the target symbol color, font, and width  
        
        Signature ``SetTargetSymbolCfw(targetSymbolCfw)`` 
        
        :param targetSymbolCfw: 
        :type targetSymbolCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetGdtSymbolCfw(self) -> LineCfw:
        """
        Returns the gdt symbol color, font, and width   
        
        Signature ``GetGdtSymbolCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetGdtSymbolCfw(self, gdtSymbolCfw: LineCfw) -> None:
        """
        Sets the gdt symbol color, font, and width  
        
        Signature ``SetGdtSymbolCfw(gdtSymbolCfw)`` 
        
        :param gdtSymbolCfw: 
        :type gdtSymbolCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetWeldSymbolCfw(self) -> LineCfw:
        """
        Returns the weld symbol color, font, and width   
        
        Signature ``GetWeldSymbolCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWeldSymbolCfw(self, weldSymbolCfw: LineCfw) -> None:
        """
        Sets the weld symbol color, font, and width  
        
        Signature ``SetWeldSymbolCfw(weldSymbolCfw)`` 
        
        :param weldSymbolCfw: 
        :type weldSymbolCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetWeldLineGap(self) -> float:
        """
        Returns the weld line gap   
        
        Signature ``GetWeldLineGap()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWeldLineGap(self, lineGap: float) -> None:
        """
        Sets the weld symbol line gap 
        
        Signature ``SetWeldLineGap(lineGap)`` 
        
        :param lineGap: 
        :type lineGap: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSurfaceFinishCfw(self) -> LineCfw:
        """
        Returns the surface finish symbol color, font, and width   
        
        Signature ``GetSurfaceFinishCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSurfaceFinishCfw(self, surfaceFinishCfw: LineCfw) -> None:
        """
        Sets the surface finish symbol color, font, and width  
        
        Signature ``SetSurfaceFinishCfw(surfaceFinishCfw)`` 
        
        :param surfaceFinishCfw: 
        :type surfaceFinishCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetWeldSpaceFactor(self) -> float:
        """
        Returns the weld space factor  
        
        Signature ``GetWeldSpaceFactor()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWeldSpaceFactor(self, spaceFactor: float) -> None:
        """
        Sets the weld symbol space factor 
        
        Signature ``SetWeldSpaceFactor(spaceFactor)`` 
        
        :param spaceFactor: 
        :type spaceFactor: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetWeldSymbolSizeFactor(self) -> float:
        """
        The character size factor that controls the weld symbol size.  
        
        The value is greater than zero.  
        
        Signature ``GetWeldSymbolSizeFactor()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWeldSymbolSizeFactor(self, symbolSizeFactor: float) -> None:
        """
        Signature ``SetWeldSymbolSizeFactor(symbolSizeFactor)`` 
        
        :param symbolSizeFactor: 
        :type symbolSizeFactor: float 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    DraftingSurfaceFinishStandard: SurfaceFinishStandard = ...
    """
    Returns or sets  the drafting surface finish standard 
    
    <hr>
    
    Getter Method
    
    Signature ``DraftingSurfaceFinishStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SurfaceFinishStandard` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DraftingSurfaceFinishStandard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Annotations.SurfaceFinishStandard` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    IdSymbolSize: float = ...
    """
    Returns or sets  the id symbol size 
    
    <hr>
    
    Getter Method
    
    Signature ``IdSymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IdSymbolSize`` 
    
    :param idSymbolSize: 
    :type idSymbolSize: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WeldSymbolStandard: WeldStandard = ...
    """
    Returns or sets  the weld symbol standard 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSymbolStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.WeldStandard` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSymbolStandard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Annotations.WeldStandard` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """


class PlaneBuilderPlaneMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlaneBuilderPlaneMethodType():
    """
    method used to compute the annotation plane 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "XyPlane", "XY of the WCS"
       "XzPlane", "XZ of the WCS"
       "YzPlane", "YZ of the WCS"
       "ModelView", "Model view plane"
       "UserDefined", "User define plane"
    """
    XyPlane = 0  # PlaneBuilderPlaneMethodTypeMemberType
    XzPlane = 1  # PlaneBuilderPlaneMethodTypeMemberType
    YzPlane = 2  # PlaneBuilderPlaneMethodTypeMemberType
    ModelView = 3  # PlaneBuilderPlaneMethodTypeMemberType
    UserDefined = 4  # PlaneBuilderPlaneMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlaneBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PlaneBuilder` object.  
    
    This object
    stored information about the plane in which an annotation lies.
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX6.0.0
    """
    
    class PlaneMethodType():
        """
        method used to compute the annotation plane 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "XyPlane", "XY of the WCS"
           "XzPlane", "XZ of the WCS"
           "YzPlane", "YZ of the WCS"
           "ModelView", "Model view plane"
           "UserDefined", "User define plane"
        """
        XyPlane = 0  # PlaneBuilderPlaneMethodTypeMemberType
        XzPlane = 1  # PlaneBuilderPlaneMethodTypeMemberType
        YzPlane = 2  # PlaneBuilderPlaneMethodTypeMemberType
        ModelView = 3  # PlaneBuilderPlaneMethodTypeMemberType
        UserDefined = 4  # PlaneBuilderPlaneMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    PlaneMethod: PlaneBuilderPlaneMethodType = ...
    """
    Returns or sets  the plane method 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PlaneBuilderPlaneMethodType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneMethod`` 
    
    :param planeMethod: 
    :type planeMethod: :py:class:`NXOpen.Annotations.PlaneBuilderPlaneMethodType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UserDefinedPlane: NXOpen.Xform = ...
    """
    Returns or sets  the user-defined plane used by the operation 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedPlane`` 
    
    :returns:  user defined plane  
    :rtype: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedPlane`` 
    
    :param userDefinedPlane:  user defined plane  
    :type userDefinedPlane: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PlaneBuilder = ...  # unknown typename


class HoleTableSettingsLabelBuilderIndexTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsLabelBuilderIndexType():
    """
    Represents Index Options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "HoleTypeSymbolAndNumber", "Hole Type Symbol and Number"
       "Number", "Number"
       "LetterAndNumber", "Letter and Number"
    """
    HoleTypeSymbolAndNumber = 0  # HoleTableSettingsLabelBuilderIndexTypeMemberType
    Number = 1  # HoleTableSettingsLabelBuilderIndexTypeMemberType
    LetterAndNumber = 2  # HoleTableSettingsLabelBuilderIndexTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsLabelBuilderRelativeLocationType():
    """
    Represents Relative Location Options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", "Top Left"
       "TopMiddle", "Top Middle"
       "TopRight", "Top Right"
       "CenterLeft", "Center Left"
       "Center", "Center"
       "CenterRight", "Center Right"
       "BottomLeft", "Bottom Left"
       "BottomMiddle", "Bottom Middle"
       "BottomRight", "Bottom Right"
    """
    TopLeft = 0  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    TopMiddle = 1  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    TopRight = 2  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    CenterLeft = 3  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    Center = 4  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    CenterRight = 5  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    BottomLeft = 6  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    BottomMiddle = 7  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    BottomRight = 8  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsLabelBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleTableSettingsLabelBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class IndexType():
        """
        Represents Index Options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "HoleTypeSymbolAndNumber", "Hole Type Symbol and Number"
           "Number", "Number"
           "LetterAndNumber", "Letter and Number"
        """
        HoleTypeSymbolAndNumber = 0  # HoleTableSettingsLabelBuilderIndexTypeMemberType
        Number = 1  # HoleTableSettingsLabelBuilderIndexTypeMemberType
        LetterAndNumber = 2  # HoleTableSettingsLabelBuilderIndexTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RelativeLocationType():
        """
        Represents Relative Location Options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopLeft", "Top Left"
           "TopMiddle", "Top Middle"
           "TopRight", "Top Right"
           "CenterLeft", "Center Left"
           "Center", "Center"
           "CenterRight", "Center Right"
           "BottomLeft", "Bottom Left"
           "BottomMiddle", "Bottom Middle"
           "BottomRight", "Bottom Right"
        """
        TopLeft = 0  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        TopMiddle = 1  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        TopRight = 2  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        CenterLeft = 3  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        Center = 4  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        CenterRight = 5  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        BottomLeft = 6  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        BottomMiddle = 7  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        BottomRight = 8  # HoleTableSettingsLabelBuilderRelativeLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CharactersToSkip: str = ...
    """
    Returns or sets  the characters to skip 
    
    <hr>
    
    Getter Method
    
    Signature ``CharactersToSkip`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CharactersToSkip`` 
    
    :param charactersToSkip: 
    :type charactersToSkip: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IndexFormat: HoleTableSettingsLabelBuilderIndexType = ...
    """
    Returns or sets  the index format of hole label 
    
    <hr>
    
    Getter Method
    
    Signature ``IndexFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsLabelBuilderIndexType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndexFormat`` 
    
    :param indexFormat: 
    :type indexFormat: :py:class:`NXOpen.Annotations.HoleTableSettingsLabelBuilderIndexType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RelativeLocation: HoleTableSettingsLabelBuilderRelativeLocationType = ...
    """
    Returns or sets  the relative location of hole label 
    
    <hr>
    
    Getter Method
    
    Signature ``RelativeLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsLabelBuilderRelativeLocationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RelativeLocation`` 
    
    :param relativeLocation: 
    :type relativeLocation: :py:class:`NXOpen.Annotations.HoleTableSettingsLabelBuilderRelativeLocationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowLabelWithLeader: bool = ...
    """
    Returns or sets  the show hole label with leader 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowLabelWithLeader`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowLabelWithLeader`` 
    
    :param showLabelWithLeader: 
    :type showLabelWithLeader: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: HoleTableSettingsLabelBuilder = ...  # unknown typename


class DiameterRadiusPreferences(NXOpen.TransientObject):
    """
    Represents diameter and radius preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    DiameterSymbol: DiameterSymbol = ...
    """
    Returns or sets  the diameter symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterSymbol`` 
    
    :returns:  Diameter symbol  
    :rtype: :py:class:`NXOpen.Annotations.DiameterSymbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterSymbol`` 
    
    :param symbol:  New diameter symbol  
    :type symbol: :py:class:`NXOpen.Annotations.DiameterSymbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DiameterSymbolText: str = ...
    """
    Returns or sets  the symbol text for user defined diameter symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterSymbolText`` 
    
    :returns:  Symbol text  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterSymbolText`` 
    
    :param symbolText:  New symbol text  
    :type symbolText: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DistanceBetweenSymbolAndDimensionText: float = ...
    """
    Returns or sets  the distance between diameter/radius symbol and dimension text 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceBetweenSymbolAndDimensionText`` 
    
    :returns:  Distance between symbol and dimension text  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceBetweenSymbolAndDimensionText`` 
    
    :param symbolToDimensionTextDistance:  New distance between symbol and dimension text  
    :type symbolToDimensionTextDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FoldedRadiusAngle: float = ...
    """
    Returns or sets  the interior angle for folded radius type dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``FoldedRadiusAngle`` 
    
    :returns:  Folded radius angle  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FoldedRadiusAngle`` 
    
    :param foldedRadiusAngle:  New folded radius angle  
    :type foldedRadiusAngle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LeaderStub: DiameterRadiusLeaderStub = ...
    """
    Returns or sets  the leader stub relative to diameter/radius dimension text 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderStub`` 
    
    :returns:  Leader stub relative to dimension text  
    :rtype: :py:class:`NXOpen.Annotations.DiameterRadiusLeaderStub` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionPreferences.TextPosition` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderStub`` 
    
    :param leaderStub:  New leader stub relative to dimension text  
    :type leaderStub: :py:class:`NXOpen.Annotations.DiameterRadiusLeaderStub` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionPreferences.TextPosition` instead.
    
    License requirements: None.
    """
    RadiusSymbol: RadiusSymbol = ...
    """
    Returns or sets  the radius symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusSymbol`` 
    
    :returns:  Radius symbol  
    :rtype: :py:class:`NXOpen.Annotations.RadiusSymbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadiusSymbol`` 
    
    :param symbol:  New radius symbol  
    :type symbol: :py:class:`NXOpen.Annotations.RadiusSymbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    RadiusSymbolText: str = ...
    """
    Returns or sets  the symbol text for user defined radius symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusSymbolText`` 
    
    :returns:  Symbol text  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadiusSymbolText`` 
    
    :param symbolText:  New symbol text  
    :type symbolText: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolPlacement: DiameterRadiusSymbolPlacement = ...
    """
    Returns or sets  the diameter/radius symbol placement relative to the dimension text 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolPlacement`` 
    
    :returns:  Symbol placement relative to dimension text  
    :rtype: :py:class:`NXOpen.Annotations.DiameterRadiusSymbolPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolPlacement`` 
    
    :param symbolPlacement:  New symbol placement relative to dimension text  
    :type symbolPlacement: :py:class:`NXOpen.Annotations.DiameterRadiusSymbolPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class BusinessModifierCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.BusinessModifier` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateUrlBusinessModifier(self, modifierName: str) -> UrlBusinessModifier:
        """
        Creates a URL business modifier  
        
        Signature ``CreateUrlBusinessModifier(modifierName)`` 
        
        :param modifierName:  Knowledge fusion name of modifier  
        :type modifierName: str 
        :returns:  New url business modifier  
        :rtype: :py:class:`NXOpen.Annotations.UrlBusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX6.0.0
           Use :py:meth:`BusinessModifierCollection.CreateUrlBusinessModifier` instead.
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateCustomerValueBusinessModifier(self, modifierName: str) -> CustomerValueBusinessModifier:
        """
        Creates a customer value business modifier   
        
        Signature ``CreateCustomerValueBusinessModifier(modifierName)`` 
        
        :param modifierName:  Knowledge fusion name of modifier  
        :type modifierName: str 
        :returns:  New customer value business modifier  
        :rtype: :py:class:`NXOpen.Annotations.CustomerValueBusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX6.0.0
           Use :py:meth:`BusinessModifierCollection.CreateCustomerValueBusinessModifierBuilder` instead.
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateRevisonBusinessModifier(self, modifierName: str) -> RevisionBusinessModifier:
        """
        Creates a revision business modifier  
        
        Signature ``CreateRevisonBusinessModifier(modifierName)`` 
        
        :param modifierName:  Knowledge fusion name of modifier  
        :type modifierName: str 
        :returns:  New revision business modifier  
        :rtype: :py:class:`NXOpen.Annotations.RevisionBusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX6.0.0
           Use :py:meth:`BusinessModifierCollection.CreateRevisionBusinessModifierBuilder` instead.
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateSafetyClassBusinessModifier(self, modifierName: str) -> SafetyClassBusinessModifier:
        """
        Creates a safety class business modifier  
        
        Signature ``CreateSafetyClassBusinessModifier(modifierName)`` 
        
        :param modifierName:  Knowledge fusion name of modifier  
        :type modifierName: str 
        :returns:  New safety class business modifier  
        :rtype: :py:class:`NXOpen.Annotations.SafetyClassBusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX6.0.0
           Use :py:meth:`BusinessModifierCollection.CreateSafetyClassBusinessModifierBuilder` instead.
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateRevisionBusinessModifierBuilder(self, revisionbusinessModifier: RevisionBusinessModifier) -> RevisionBusinessModifierBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.RevisionBusinessModifierBuilder`  
        
        Signature ``CreateRevisionBusinessModifierBuilder(revisionbusinessModifier)`` 
        
        :param revisionbusinessModifier: 
        :type revisionbusinessModifier: :py:class:`NXOpen.Annotations.RevisionBusinessModifier` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.RevisionBusinessModifierBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSafetyClassBusinessModifierBuilder(self, safetyclassbusinessmodifier: SafetyClassBusinessModifier) -> SafetyClassBusinessModifierBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SafetyClassBusinessModifierBuilder`  
        
        Signature ``CreateSafetyClassBusinessModifierBuilder(safetyclassbusinessmodifier)`` 
        
        :param safetyclassbusinessmodifier: 
        :type safetyclassbusinessmodifier: :py:class:`NXOpen.Annotations.SafetyClassBusinessModifier` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SafetyClassBusinessModifierBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateFeatureIdBusinessModifierBuilder(self, featureidbusinessmodifier: FeatureIdBusinessModifier) -> FeatureIdBusinessModifierBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.FeatureIdBusinessModifierBuilder`  
        
        Signature ``CreateFeatureIdBusinessModifierBuilder(featureidbusinessmodifier)`` 
        
        :param featureidbusinessmodifier: 
        :type featureidbusinessmodifier: :py:class:`NXOpen.Annotations.FeatureIdBusinessModifier` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.FeatureIdBusinessModifierBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCustomerValueBusinessModifierBuilder(self, customervaluebusinessmodifier: CustomerValueBusinessModifier) -> CustomerValueBusinessModifierBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.CustomerValueBusinessModifierBuilder`  
        
        Signature ``CreateCustomerValueBusinessModifierBuilder(customervaluebusinessmodifier)`` 
        
        :param customervaluebusinessmodifier: 
        :type customervaluebusinessmodifier: :py:class:`NXOpen.Annotations.CustomerValueBusinessModifier` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.CustomerValueBusinessModifierBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateUrlBusinessModifierBuilder(self, urlbusinessmodifier: UrlBusinessModifier) -> UrlBusinessModifierBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.UrlBusinessModifierBuilder`  
        
        Signature ``CreateUrlBusinessModifierBuilder(urlbusinessmodifier)`` 
        
        :param urlbusinessmodifier: 
        :type urlbusinessmodifier: :py:class:`NXOpen.Annotations.UrlBusinessModifier` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.UrlBusinessModifierBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> NXOpen.TaggedObject:
        """
        Finds the :py:class:`NXOpen.Annotations.BusinessModifier` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the business modifier  
        :type journalIdentifier: str 
        :returns:  Business Modifier with this identifier  
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class BaseParallelDimension(Dimension, ILinearTolerance, IPmi, ISlotDimension):
    """
    Represents a parallel dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def IsSlotDimension(self) -> bool:
        """
        Check if the dimension qualifies as a slot dimension.  
        
        Signature ``IsSlotDimension()`` 
        
        :returns:  True if this dimension qualifies as a slot dimension  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ConvertSlotDimensionAssociativity(self) -> bool:
        """
        Convert this dimension's associativity if it is a slot dimension.  
        
        Signature ``ConvertSlotDimensionAssociativity()`` 
        
        :returns:  True if NX can convert this dimension's associativity  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseParallelDimension = ...  # unknown typename


class GeneralParallelDimension(BaseParallelDimension):
    """
    Represents a parallel dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralParallelDimension = ...  # unknown typename


class PmiIntegerBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiInteger` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiIntegerBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    IntegerValue   0 
    =============  =====
    
    .. versionadded:: NX6.0.0
    """
    IntegerValue: int = ...
    """
    Returns or sets  the int value 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegerValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegerValue`` 
    
    :param integerValue: 
    :type integerValue: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiIntegerBuilder = ...  # unknown typename


class PmiWave(Annotation, IPmi):
    """
    Represents a Wave   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiWaveLinkBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiWave = ...  # unknown typename


class FrameBarBuilder(BaseFrameBarBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.FrameBarBuilder`.  
    
    This class allows to create frame bar annotation
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.FrameBarCollection.CreateFrameBarBuilder`
    
    Default values.
    
    ======================  =====
    Property                Value
    ======================  =====
    AftPerpendicular        0 
    ----------------------  -----
    Axis                    X 
    ----------------------  -----
    Baseline                0 
    ----------------------  -----
    BulkHeads               0 
    ----------------------  -----
    Centerline              0 
    ----------------------  -----
    Decks                   0 
    ----------------------  -----
    ForwardPerpendicular    0 
    ----------------------  -----
    InterTransverseFrames   0 
    ----------------------  -----
    LongitudinalYFrames     0 
    ----------------------  -----
    LongitudinalZFrames     0 
    ----------------------  -----
    TransveralInsertArea    0 
    ----------------------  -----
    TransverseFrames        0 
    ----------------------  -----
    Waterline               0 
    ======================  =====
    
    .. versionadded:: NX8.0.0
    """
    Null: FrameBarBuilder = ...  # unknown typename


class GdtCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of GDTs   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX3.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class HatchCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Hatch` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHatchBuilder(self, hatch: Hatch) -> HatchBuilder:
        """
        Creates the HatchBuilder  
        
        Signature ``CreateHatchBuilder(hatch)`` 
        
        :param hatch:  :py:class:`NXOpen.Annotations.Hatch` to be edited  
        :type hatch: :py:class:`NXOpen.Annotations.Hatch` 
        :returns:  HatchBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.HatchBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class DatumFeatureSymbolBuilder(NXOpen.Builder):
    """
    Represents a Base Datum Feature Symbol Builder for all types of datum feature symbols   
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX6.0.0
    """
    
    def InheritFrom(self, inheritTag: BaseDatum) -> None:
        """
        The datum feature symbol is inherited form the given datum feature symbol.  
        
        Signature ``InheritFrom(inheritTag)`` 
        
        :param inheritTag: 
        :type inheritTag: :py:class:`NXOpen.Annotations.BaseDatum` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Letter: str = ...
    """
    Returns or sets  the datum feature string 
    
    <hr>
    
    Getter Method
    
    Signature ``Letter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Letter`` 
    
    :param datumFeatureLetter: 
    :type datumFeatureLetter: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the datum feature symbol origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the datum feature  style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DatumFeatureSymbolBuilder = ...  # unknown typename


class DraftingDatumFeatureSymbolBuilder(DatumFeatureSymbolBuilder):
    """
    datum feature symbol builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.GdtDatumCollection.CreateDraftingDatumFeatureSymbolBuilder`
    
    .. versionadded:: NX6.0.0
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DraftingDatumFeatureSymbolBuilder = ...  # unknown typename


class FrameBarElementsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FrameBarElements():
    """
    Specifies the frame bar elements
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AftPerpendicular", " - "
       "ForwardPerpendicular", " - "
       "CenterlineY", " - "
       "Baseline", " - "
       "Waterline", " - "
       "TransversalInsertArea", " - "
       "BulkHeads", " - "
       "Decks", " - "
       "TransverseFrames", " - "
       "InterTransverseFrames", " - "
       "LongitudinalYFrames", " - "
       "LongitudinalZFrames", " - "
    """
    AftPerpendicular = 0  # FrameBarElementsMemberType
    ForwardPerpendicular = 1  # FrameBarElementsMemberType
    CenterlineY = 2  # FrameBarElementsMemberType
    Baseline = 3  # FrameBarElementsMemberType
    Waterline = 4  # FrameBarElementsMemberType
    TransversalInsertArea = 5  # FrameBarElementsMemberType
    BulkHeads = 6  # FrameBarElementsMemberType
    Decks = 7  # FrameBarElementsMemberType
    TransverseFrames = 8  # FrameBarElementsMemberType
    InterTransverseFrames = 9  # FrameBarElementsMemberType
    LongitudinalYFrames = 10  # FrameBarElementsMemberType
    LongitudinalZFrames = 11  # FrameBarElementsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FcfFrame(NXOpen.TransientObject):
    """
    Represents an FCF frame   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetTolerance(self) -> Value:
        """
        Return the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns:  Tolerance data  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceValue`` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: Value) -> None:
        """
        Sets the tolerance 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance:  Tolerance data  
        :type tolerance: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceValue`` instead.
        
        License requirements: None.
        """
        ...
    
    
    def GetMaterialConditionModifiers(self) -> 'list[MaterialConditionModifier]':
        """
        Return the material condition modifiers  
        
        Signature ``GetMaterialConditionModifiers()`` 
        
        :returns:  List of modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.MaterialConditionModifier` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.MaterialModifier`` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetMaterialConditionModifiers(self, modifiers: 'list[MaterialConditionModifier]') -> None:
        """
        Sets the material condition modifiers 
        
        Signature ``SetMaterialConditionModifiers(modifiers)`` 
        
        :param modifiers:  List of modifiers  
        :type modifiers: list of :py:class:`NXOpen.Annotations.MaterialConditionModifier` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.MaterialModifier`` instead.
        
        License requirements: None.
        """
        ...
    
    
    def GetPrimaryDatumReference(self) -> DatumReference:
        """
        Returns the primary datum reference  
        
        Signature ``GetPrimaryDatumReference()`` 
        
        :returns:  Primary datum reference frame  
        :rtype: :py:class:`NXOpen.Annotations.DatumReference` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.PrimaryDatumReference` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetPrimaryDatumReference(self, primary: DatumReference) -> None:
        """
        Sets the primary datum reference 
        
        Signature ``SetPrimaryDatumReference(primary)`` 
        
        :param primary:  Primary datum reference frame  
        :type primary: :py:class:`NXOpen.Annotations.DatumReference` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.PrimaryDatumReference` instead.
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondaryDatumReference(self) -> DatumReference:
        """
        Returns the secondary datum reference  
        
        Signature ``GetSecondaryDatumReference()`` 
        
        :returns:  Secondary datum reference frame  
        :rtype: :py:class:`NXOpen.Annotations.DatumReference` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.SecondaryDatumReference` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetSecondaryDatumReference(self, secondary: DatumReference) -> None:
        """
        Sets the secondary datum reference 
        
        Signature ``SetSecondaryDatumReference(secondary)`` 
        
        :param secondary:  Secondary datum reference frame  
        :type secondary: :py:class:`NXOpen.Annotations.DatumReference` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.SecondaryDatumReference` instead.
        
        License requirements: None.
        """
        ...
    
    
    def GetTertiaryDatumReference(self) -> DatumReference:
        """
        Returns the tertiary datum reference  
        
        Signature ``GetTertiaryDatumReference()`` 
        
        :returns:  Tertiary datum reference frame  
        :rtype: :py:class:`NXOpen.Annotations.DatumReference` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.TertiaryDatumReference` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetTertiaryDatumReference(self, tertiary: DatumReference) -> None:
        """
        Sets the tertiary datum reference 
        
        Signature ``SetTertiaryDatumReference(tertiary)`` 
        
        :param tertiary:  Tertiary datum reference frame  
        :type tertiary: :py:class:`NXOpen.Annotations.DatumReference` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.TertiaryDatumReference` instead.
        
        License requirements: None.
        """
        ...
    
    ToleranceZoneShape: ToleranceZoneShape = ...
    """
    Returns or sets  the tolerance zone shape 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceZoneShape`` 
    
    :returns:  Tolerance zone shape  
    :rtype: :py:class:`NXOpen.Annotations.ToleranceZoneShape` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.ZoneShape`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceZoneShape`` 
    
    :param zoneShape:  Tolerance zone shape  
    :type zoneShape: :py:class:`NXOpen.Annotations.ToleranceZoneShape` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.FeatureControlFrameDataBuilder.ZoneShape`` instead.
    
    License requirements: None.
    """


class ChamferSeparatorTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChamferSeparatorType():
    """
    Specifies the chamfer dimension separator type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UppercaseX", "Specifies X"
       "LowercaseX", "Specifies x"
    """
    UppercaseX = 0  # ChamferSeparatorTypeMemberType
    LowercaseX = 1  # ChamferSeparatorTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ArbitraryTargetData(DatumTargetData):
    """
    Represents arbitrary datum target data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    UpperText: str = ...
    """
    Returns or sets  the upper text.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperText`` 
    
    :returns:  Upper text  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperText`` 
    
    :param upperText:  New upper text  
    :type upperText: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class StyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.StyleBuilder`.  
    
    This class is used to set Annotation preferences when creating or editing an annotation.
    
    .. versionadded:: NX6.0.0
    """
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: NXOpen.DisplayableObject) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected annotation or table instance object.                                                                         None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BreakSettings: BreakSettingsBuilder = ...
    """
    Returns  the get break builder 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BreakSettingsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DimensionStyle: DimensionStyleBuilder = ...
    """
    Returns  the dimension style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DisplayStyle: DisplayStyleBuilder = ...
    """
    Returns  the display style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DisplayStyleBuilder` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    ForeshorteningSymbolSettings: ForeshorteningSymbolSettingsBuilder = ...
    """
    Returns  the get builder for foreshortening symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbolSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolSettingsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    FrameBarStyle: FrameBarStyleBuilder = ...
    """
    Returns  the frame bar builder 
    
    <hr>
    
    Getter Method
    
    Signature ``FrameBarStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HatchStyle: HatchStyleBuilder = ...
    """
    Returns  the hatch style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HatchStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HoleCalloutSettings: HoleCalloutSettingsBuilder = ...
    """
    Returns  the hole callout settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleCalloutSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    LetteringStyle: LetteringStyleBuilder = ...
    """
    Returns  the lettering style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``LetteringStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LetteringStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LineArrowStyle: LineArrowStyleBuilder = ...
    """
    Returns  the line/arrow style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``LineArrowStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineArrowStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OrdinateStyle: OrdinateStyleBuilder = ...
    """
    Returns  the ordinate style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RadialStyle: RadialStyleBuilder = ...
    """
    Returns  the radial style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.RadialStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SingleSidedDisplay: SingleSidedDisplayBuilder = ...
    """
    Returns  the single sided display builder 
    
    <hr>
    
    Getter Method
    
    Signature ``SingleSidedDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SingleSidedDisplayBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SymbolStyle: SymbolStyleBuilder = ...
    """
    Returns  the symbol style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SymbolStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UnitsStyle: UnitsStyleBuilder = ...
    """
    Returns  the units style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``UnitsStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.UnitsStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: StyleBuilder = ...  # unknown typename


class IdentificationLineLocationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IdentificationLineLocation():
    """
    Specifies the weld identification line location (ISO and DIN only) 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Specifies no identification line"
       "Top", "Specifies identification line above the reference line"
       "Bottom", "Specifies identification line below the reference line"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # IdentificationLineLocationMemberType
    Top = 1  # IdentificationLineLocationMemberType
    Bottom = 2  # IdentificationLineLocationMemberType
    Last = 3  # IdentificationLineLocationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FitDisplaySplitByDimlineMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FitDisplaySplitByDimline():
    """
    Specifies the limit and fit assembly display when split by dimension line 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No split"
       "ToleranceOnly", "Split tolerance only"
       "ToleranceAndValue", "Split tolerance and value"
    """
    NotSet = 0  # FitDisplaySplitByDimlineMemberType
    ToleranceOnly = 1  # FitDisplaySplitByDimlineMemberType
    ToleranceAndValue = 2  # FitDisplaySplitByDimlineMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompanyProprietaryInformationBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.CompanyProprietaryInformation` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateCompanyProprietaryInformationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetStringText(self) -> 'list[str]':
        """
        Returns the str text  
        
        Signature ``GetStringText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetStringText(self, stringText: 'list[str]') -> None:
        """
        Sets the str text 
        
        Signature ``SetStringText(stringText)`` 
        
        :param stringText: 
        :type stringText: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CompanyProprietaryInformationBuilder = ...  # unknown typename


class BaseFcf(Gdt):
    """
    Represents a datum   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.0
    """
    Null: BaseFcf = ...  # unknown typename


class DraftingFcf(BaseFcf):
    """
    Represents an FCF   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingFeatureControlFrameBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: DraftingFcf = ...  # unknown typename


class TolerancePlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TolerancePlacement():
    """
    Specifies the tolerance text placement relative to the dimension text 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Below", "Specifies tolerance below dimension text"
       "After", "Specifies tolerance after dimension text"
       "Above", "Specifies tolerance above dimension text"
       "Last", "Last enum value. Should not be used."
    """
    Below = 0  # TolerancePlacementMemberType
    After = 1  # TolerancePlacementMemberType
    Above = 2  # TolerancePlacementMemberType
    Last = 3  # TolerancePlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDiameterDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a diameter dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    DiamDimLineAng: float = ...
    """
    Returns or sets  a value of diameter dimension line angle
    
    <hr>
    
    Getter Method
    
    Signature ``DiamDimLineAng`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`DiameterDimensionLineAngle` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiamDimLineAng`` 
    
    :param diamDimLineAngle: 
    :type diamDimLineAngle: float 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`DiameterDimensionLineAngle` instead.
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DiameterDimensionLineAngle: float = ...
    """
    Returns or sets  a value of diameter dimension line angle
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterDimensionLineAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterDimensionLineAngle`` 
    
    :param diamDimLineAngle: 
    :type diamDimLineAngle: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseDiameterDimension = ...  # unknown typename


class FcfDatumReference(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Annotations.FcfDatumReference`   
    
    .. versionadded:: NX6.0.0
    """
    Null: FcfDatumReference = ...  # unknown typename


class OrdinateOriginDisplayOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrdinateOriginDisplayOption():
    """
    Specifies the ordinate origin dimension display option 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UserDefinedSymbol", "Displays user defined symbol at the ordinate origin"
       "OrdinateSetName", "Displays the ordinate set name at the ordinate origin"
       "NoText", "Display no text at the ordinate origin"
       "Last", "Last enum value. Should not be used."
    """
    UserDefinedSymbol = 0  # OrdinateOriginDisplayOptionMemberType
    OrdinateSetName = 1  # OrdinateOriginDisplayOptionMemberType
    NoText = 2  # OrdinateOriginDisplayOptionMemberType
    Last = 3  # OrdinateOriginDisplayOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiHorizontalDimension(BaseHorizontalDimension):
    """
    Represents a PMI horizontal dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiLinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiHorizontalDimension = ...  # unknown typename


class ToleranceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ToleranceType():
    """
    Specifies the tolerance type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No tolerance"
       "LimitOneLine", "-LIM +LIM"
       "LimitTwoLines", "+LIM  
    
    -LIM
    
    "
       "BilateralOneLine", "+-TOL"
       "BilateralTwoLines", "+TOL
    -TOL
    
    "
       "UnilateralAbove", "+TOL
    -.000
    
    "
       "UnilateralBelow", "+.000
    -TOL
    
    "
       "Basic", "|xxx|"
       "Reference", "(xxx)"
       "LimitLargerFirst", "+LIM -LIM"
       "LimitLargerBelow", "-LIM
    +LIM
    
    "
       "LimitsAndFits", "A5"
       "NotToScale", "xxx
    ---
    
    "
       "DiameterReference", "(DIA xxx)"
       "BasicNotToScale", " - "
    """
    NotSet = 0  # ToleranceTypeMemberType
    LimitOneLine = 1  # ToleranceTypeMemberType
    LimitTwoLines = 2  # ToleranceTypeMemberType
    BilateralOneLine = 3  # ToleranceTypeMemberType
    BilateralTwoLines = 4  # ToleranceTypeMemberType
    UnilateralAbove = 5  # ToleranceTypeMemberType
    UnilateralBelow = 6  # ToleranceTypeMemberType
    Basic = 7  # ToleranceTypeMemberType
    Reference = 8  # ToleranceTypeMemberType
    LimitLargerFirst = 9  # ToleranceTypeMemberType
    LimitLargerBelow = 10  # ToleranceTypeMemberType
    LimitsAndFits = 11  # ToleranceTypeMemberType
    NotToScale = 12  # ToleranceTypeMemberType
    DiameterReference = 13  # ToleranceTypeMemberType
    BasicNotToScale = 14  # ToleranceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureIdBusinessModifier(ListBusinessModifier):
    """
    Represents buiness modifier that indicates a featire identification PMI object.  
    
    Please
    see ug_featureID_busmod.dfa for attribute details. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.FeatureIdBusinessModifierBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: FeatureIdBusinessModifier = ...  # unknown typename


class OriginBuilderAlignmentPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OriginBuilderAlignmentPosition():
    """
    alignment position on the annotation 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", "Top left position"
       "TopCenter", "Top center position"
       "TopRight", "Top right position"
       "MidLeft", "Mid left position"
       "MidCenter", "Mid center position"
       "MidRight", "Mid right position"
       "BottomLeft", "Bottom left position"
       "BottomCenter", "Bottom center position"
       "BottomRight", "Bottom right position"
    """
    TopLeft = 0  # OriginBuilderAlignmentPositionMemberType
    TopCenter = 1  # OriginBuilderAlignmentPositionMemberType
    TopRight = 2  # OriginBuilderAlignmentPositionMemberType
    MidLeft = 3  # OriginBuilderAlignmentPositionMemberType
    MidCenter = 4  # OriginBuilderAlignmentPositionMemberType
    MidRight = 5  # OriginBuilderAlignmentPositionMemberType
    BottomLeft = 6  # OriginBuilderAlignmentPositionMemberType
    BottomCenter = 7  # OriginBuilderAlignmentPositionMemberType
    BottomRight = 8  # OriginBuilderAlignmentPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OriginBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.OriginBuilder`
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX6.0.0
    """
    
    class AlignmentPosition():
        """
        alignment position on the annotation 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopLeft", "Top left position"
           "TopCenter", "Top center position"
           "TopRight", "Top right position"
           "MidLeft", "Mid left position"
           "MidCenter", "Mid center position"
           "MidRight", "Mid right position"
           "BottomLeft", "Bottom left position"
           "BottomCenter", "Bottom center position"
           "BottomRight", "Bottom right position"
        """
        TopLeft = 0  # OriginBuilderAlignmentPositionMemberType
        TopCenter = 1  # OriginBuilderAlignmentPositionMemberType
        TopRight = 2  # OriginBuilderAlignmentPositionMemberType
        MidLeft = 3  # OriginBuilderAlignmentPositionMemberType
        MidCenter = 4  # OriginBuilderAlignmentPositionMemberType
        MidRight = 5  # OriginBuilderAlignmentPositionMemberType
        BottomLeft = 6  # OriginBuilderAlignmentPositionMemberType
        BottomCenter = 7  # OriginBuilderAlignmentPositionMemberType
        BottomRight = 8  # OriginBuilderAlignmentPositionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetAssociativeOrigin(self) -> AnnotationAssociativeOriginData_Struct:
        """
        Gets the data that specifies the origin's associativity  
        
        Signature ``GetAssociativeOrigin()`` 
        
        :returns:  associativity data  
        :rtype: :py:class:`NXOpen.Annotations.AnnotationAssociativeOriginData_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociativeOrigin(self, assocOrigin: AnnotationAssociativeOriginData_Struct) -> None:
        """
        Associates the annotation's origin to the specified objects 
        
        Signature ``SetAssociativeOrigin(assocOrigin)`` 
        
        :param assocOrigin:  associativity data  
        :type assocOrigin: :py:class:`NXOpen.Annotations.AnnotationAssociativeOriginData_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetInferRelativeToGeometry(self, inferRelativeToGeometry: bool) -> None:
        """
        Infers a relative to geometry associative on commit if no other associativity has been applied 
        
        Signature ``SetInferRelativeToGeometry(inferRelativeToGeometry)`` 
        
        :param inferRelativeToGeometry:  relative to geometry flag  
        :type inferRelativeToGeometry: bool 
        
        .. versionadded:: NX6.0.1
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Anchor: OriginBuilderAlignmentPosition = ...
    """
    Returns or sets  the anchor location of the origin on the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Anchor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilderAlignmentPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Anchor`` 
    
    :param anchor: 
    :type anchor: :py:class:`NXOpen.Annotations.OriginBuilderAlignmentPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    AnnotationView: NXOpen.Drawings.SelectDraftingView = ...
    """
    Returns  the view of the annotation (drafting member views only) 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OriginPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the origin point 
    
    <hr>
    
    Getter Method
    
    Signature ``OriginPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OriginPoint`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    Plane: PlaneBuilder = ...
    """
    Returns  the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: OriginBuilder = ...  # unknown typename


class DraftingDatumTarget(BaseDatumTarget):
    """
    Represents a datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingDatumTargetBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    def ConvertToPointTarget(self) -> PointTarget:
        """
        Converts a datum target line or area to a datum target point.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.  
        
        Signature ``ConvertToPointTarget()`` 
        
        :returns:  New point target  
        :rtype: :py:class:`NXOpen.Annotations.PointTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def ConvertToLineTarget(self) -> LineTarget:
        """
        Converts a datum target point or area to a datum target line.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.  
        
        Signature ``ConvertToLineTarget()`` 
        
        :returns:  New line target  
        :rtype: :py:class:`NXOpen.Annotations.LineTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def ConvertToAreaTarget(self) -> ArbitraryTarget:
        """
        Converts a datum target point, line, or non-rectangular area to a rectangular area.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.  
        
        Signature ``ConvertToAreaTarget()`` 
        
        :returns:  New rectangulartarget  
        :rtype: :py:class:`NXOpen.Annotations.ArbitraryTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def ConvertToDraftingPointTarget(self) -> DraftingPointTarget:
        """
        Converts a drafting datum target line or area to a drafting datum target point.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.  
        
        Signature ``ConvertToDraftingPointTarget()`` 
        
        :returns:  New point target  
        :rtype: :py:class:`NXOpen.Annotations.DraftingPointTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertToDraftingLineTarget(self) -> DraftingLineTarget:
        """
        Converts a drafting datum target point or area to a drafting datum target line.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.  
        
        Signature ``ConvertToDraftingLineTarget()`` 
        
        :returns:  New line target  
        :rtype: :py:class:`NXOpen.Annotations.DraftingLineTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertToDraftingAreaTarget(self) -> DraftingArbitraryTarget:
        """
        Converts a drafting datum target point, line, or non-rectangular area to a drafting rectangular area.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated.  
        
        Signature ``ConvertToDraftingAreaTarget()`` 
        
        :returns:  New rectangulartarget  
        :rtype: :py:class:`NXOpen.Annotations.DraftingArbitraryTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Null: DraftingDatumTarget = ...  # unknown typename


class DatumTarget(DraftingDatumTarget, IPmi):
    """
    Represents a datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: DatumTarget = ...  # unknown typename


class IPointTarget(NXOpen.INXObject):
    """
    Represents interface class for a point datum target   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class PointTarget(DatumTarget, IPointTarget):
    """
    Represents point datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    PointCoordinates: NXOpen.Point3d = ...
    """
    Returns  the target point coordinates 
    
    <hr>
    
    Getter Method
    
    Signature ``PointCoordinates`` 
    
    :returns:  Point coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Null: PointTarget = ...  # unknown typename


class Weld(DraftingAid):
    """
    Represents a weld   
    
    To obtain an instance of this class, use :py:class:`NXOpen.Annotations.WeldCollection`
    
    .. versionadded:: NX4.0.0
    """
    Null: Weld = ...  # unknown typename


class ShipDraftingFramebarGeneralBuilderTicDirectionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipDraftingFramebarGeneralBuilderTicDirectionTypes():
    """
    Tic Direction Options
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TowardsView", " - "
       "AwayfromView", " - "
    """
    TowardsView = 0  # ShipDraftingFramebarGeneralBuilderTicDirectionTypesMemberType
    AwayfromView = 1  # ShipDraftingFramebarGeneralBuilderTicDirectionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipDraftingFramebarGeneralBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ShipDraftingFramebarGeneralBuilder`
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class TicDirectionTypes():
        """
        Tic Direction Options
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TowardsView", " - "
           "AwayfromView", " - "
        """
        TowardsView = 0  # ShipDraftingFramebarGeneralBuilderTicDirectionTypesMemberType
        AwayfromView = 1  # ShipDraftingFramebarGeneralBuilderTicDirectionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DecimalPlaces: int = ...
    """
    Returns or sets  the decimal places 
    
    <hr>
    
    Getter Method
    
    Signature ``DecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecimalPlaces`` 
    
    :param decimalPlaces: 
    :type decimalPlaces: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TicDirection: ShipDraftingFramebarGeneralBuilderTicDirectionTypes = ...
    """
    Returns or sets  the tic direction 
    
    <hr>
    
    Getter Method
    
    Signature ``TicDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ShipDraftingFramebarGeneralBuilderTicDirectionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TicDirection`` 
    
    :param ticDirection: 
    :type ticDirection: :py:class:`NXOpen.Annotations.ShipDraftingFramebarGeneralBuilderTicDirectionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: ShipDraftingFramebarGeneralBuilder = ...  # unknown typename


class DraftingDatumTargetCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.DraftingDatumTarget` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX8.0.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingDatumTarget:
        """
        Finds the drafting datum target with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the target to be found  
        :type journalIdentifier: str 
        :returns:  Target with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.DraftingDatumTarget` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralNoteBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.GeneralNote` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateGeneralNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetText(self) -> 'list[str]':
        """
        Returns the text  
        
        Signature ``GetText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetText(self, text: 'list[str]') -> None:
        """
        Sets the text 
        
        Signature ``SetText(text)`` 
        
        :param text: 
        :type text: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Category: str = ...
    """
    Returns or sets  the category 
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: GeneralNoteBuilder = ...  # unknown typename


class BalloonNoteBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.BalloonNote` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateBalloonNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetText(self) -> 'list[str]':
        """
        Returns the text  
        
        Signature ``GetText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetText(self, text: 'list[str]') -> None:
        """
        Sets the text 
        
        Signature ``SetText(text)`` 
        
        :param text: 
        :type text: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    BalloonText: str = ...
    """
    Returns or sets  the balloon text 
    
    <hr>
    
    Getter Method
    
    Signature ``BalloonText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BalloonText`` 
    
    :param balloonText: 
    :type balloonText: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Category: str = ...
    """
    Returns or sets  the category 
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Scale: float = ...
    """
    Returns or sets  the scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scale: 
    :type scale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BalloonNoteBuilder = ...  # unknown typename


class PmiAttributeValue(NXOpen.NXObject):
    """
    Represents a PMI Attribute Value   
    
    This is an abstract class.
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttributeValue = ...  # unknown typename


class PmiAttributeValueUrl(PmiAttributeValue):
    """
    Represents a PMI Attribute Url Value   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiAttributeValueUrlBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttributeValueUrl = ...  # unknown typename


class BaseRapidDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.Dimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def SetFirstAssociativityVectorFlipped(self, firstVectorFlipped: bool) -> None:
        """
        First associativity vector flipped 
        
        Signature ``SetFirstAssociativityVectorFlipped(firstVectorFlipped)`` 
        
        :param firstVectorFlipped: 
        :type firstVectorFlipped: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetSecondAssociativityVectorFlipped(self, secondVectorFlipped: bool) -> None:
        """
        Second associativity vector flipped 
        
        Signature ``SetSecondAssociativityVectorFlipped(secondVectorFlipped)`` 
        
        :param secondVectorFlipped: 
        :type secondVectorFlipped: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetFirstAssociativityVectorFlipped(self) -> bool:
        """
        First associativity vector flipped  
        
        Signature ``GetFirstAssociativityVectorFlipped()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondAssociativityVectorFlipped(self) -> bool:
        """
        Second associativity vector flipped  
        
        Signature ``GetSecondAssociativityVectorFlipped()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FirstAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Measurement: DimensionMeasurementBuilder = ...
    """
    Returns  the measurement 
    
    <hr>
    
    Getter Method
    
    Signature ``Measurement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SecondAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BaseRapidDimensionBuilder = ...  # unknown typename


class RapidDimensionBuilder(BaseRapidDimensionBuilder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateRapidDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Driving: DrivingValueBuilder = ...
    """
    Returns  the driving 
    
    <hr>
    
    Getter Method
    
    Signature ``Driving`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: RapidDimensionBuilder = ...  # unknown typename


class LeaderBundle(NXOpen.TransientObject):
    """
    Represents the data for all the leaders of an annotation   
    
    .. versionadded:: NX3.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLeaderData(self, n: int, attachmentType: LeaderAttachment, attachmentObject: NXOpen.NXObject, attachmentView: NXOpen.View, endPoint: NXOpen.Point3d, angle: float, intermediatePoints: 'list[NXOpen.Point3d]') -> None:
        """
        Sets the leader data for the nth leader 
        
        Signature ``SetLeaderData(n, attachmentType, attachmentObject, attachmentView, endPoint, angle, intermediatePoints)`` 
        
        :param n:  The leader to set the data for  
        :type n: int 
        :param attachmentType: 
        :type attachmentType: :py:class:`NXOpen.Annotations.LeaderAttachment` 
        :param attachmentObject:  Attachment object.  Should be None                                    if the attachment type is Screen.                                    Must not be None if the attachment type                                    is OnObject.  
        :type attachmentObject: :py:class:`NXOpen.NXObject` 
        :param attachmentView:  The view that the leader will be associated with.                                        Must not be None  
        :type attachmentView: :py:class:`NXOpen.View` 
        :param endPoint:  The coordinates of the leader's end point.                                        If the attachment type is Screen, the                                         coordinates will be view coordinates.                                        If the attachment type is OnObject, the                                        coordinates will be in the absolute                                        coordinate system of the model that owns                                        the attachment object  
        :type endPoint: :py:class:`NXOpen.Point3d` 
        :param angle: 
        :type angle: float 
        :param intermediatePoints:  Intermediate points for the leader.  The number of points must not                exceed :py:class:`AnnotationsConstants.MaxLeaderIntermediatePoints <AnnotationsConstants>`.                The points are in the view coordinate system.                The only leader types that permit intermediate points are the                following:  Plain, Around, PlainAligned, AroundAligned,                DatumArrow, and GbDatumArrow.  
        :type intermediatePoints: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    LeaderAlignment: LeaderAlignment = ...
    """
    Returns or sets  the leader alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderAlignment` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderAlignment`` 
    
    :param leaderAlignment: 
    :type leaderAlignment: :py:class:`NXOpen.Annotations.LeaderAlignment` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LeaderSide: LeaderSide = ...
    """
    Returns or sets  the leader side 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderSide` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderSide`` 
    
    :param leaderSide: 
    :type leaderSide: :py:class:`NXOpen.Annotations.LeaderSide` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LeaderType: LeaderType = ...
    """
    Returns or sets  the leader type 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderType`` 
    
    :param leaderType: 
    :type leaderType: :py:class:`NXOpen.Annotations.LeaderType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    NumberOfLeaders: int = ...
    """
    Returns or sets  the number of leaders.  
    
    Must not exceed
    :py:class:`AnnotationsConstants.MaxLeaders <AnnotationsConstants>`.
    The only leader types that permit more than one leader are the following:
    Plain, Around, PlainAligned, and AroundAligned.
    PlainAligned and AroundAligned require at least one leader.
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfLeaders`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfLeaders`` 
    
    :param numLeaders: 
    :type numLeaders: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class OrdinateMargin(NXOpen.NXObject):
    """
    Represents an ordinate margin.  
    
    A margin can be created using :py:class:`NXOpen.Annotations.OrdinateMarginCollection` 
    
    .. versionadded:: NX4.0.0
    """
    
    def DeleteMargin(self, ordinateOrigin: OrdinateOriginDimension) -> None:
        """
        Deletes a defined ordinate margin object from the ordinate set.  
        
        Any dimensions located on that margin are moved to a newly created inferred margin. 
        
        Signature ``DeleteMargin(ordinateOrigin)`` 
        
        :param ordinateOrigin: 
        :type ordinateOrigin: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def MoveMargin(self, offset: float) -> None:
        """
        Moves an ordinate margin object by specifying a new offset from the margin origin.  
        
        Signature ``MoveMargin(offset)`` 
        
        :param offset: 
        :type offset: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def RedefineMargin(self, ordinateOrigin: OrdinateOriginDimension, associativity: Associativity) -> None:
        """
        Redefines an ordinate margin object by specifying a new associativity.  
        
        Signature ``RedefineMargin(ordinateOrigin, associativity)`` 
        
        :param ordinateOrigin: 
        :type ordinateOrigin: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        :param associativity: 
        :type associativity: :py:class:`NXOpen.Annotations.Associativity` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Null: OrdinateMargin = ...  # unknown typename


class VerticalOrdinateMargin(OrdinateMargin):
    """
    Represents a vertical ordinate margin   
    
    .. versionadded:: NX4.0.0
    """
    Null: VerticalOrdinateMargin = ...  # unknown typename


class BasePerpendicularDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a perpendicular dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BasePerpendicularDimension = ...  # unknown typename


class PmiPerpendicularDimension(BasePerpendicularDimension):
    """
    Represents a PMI perpendicular dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiLinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiPerpendicularDimension = ...  # unknown typename


class PmiAttributeValueInteger(PmiAttributeValue):
    """
    Represents a PMI Attribute Integer Value   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiAttributeValueIntegerBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttributeValueInteger = ...  # unknown typename


class HatchStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.HatchStyleBuilder`.  
    
    This class queries and sets crosshatching and area fill preferences when creating and editing
    crosshatching and area fill drafting annotations.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AreaFillAngle: float = ...
    """
    Returns or sets  the area fill angle 
    
    <hr>
    
    Getter Method
    
    Signature ``AreaFillAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreaFillAngle`` 
    
    :param areaFillAngle: 
    :type areaFillAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AreaFillMaterial: AreaFillMaterial = ...
    """
    Returns or sets  the area fill material 
    
    <hr>
    
    Getter Method
    
    Signature ``AreaFillMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AreaFillMaterial` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreaFillMaterial`` 
    
    :param areaFillMaterial: 
    :type areaFillMaterial: :py:class:`NXOpen.Annotations.AreaFillMaterial` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AreaFillScale: float = ...
    """
    Returns or sets  the area fill scale 
    
    <hr>
    
    Getter Method
    
    Signature ``AreaFillScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreaFillScale`` 
    
    :param areaFillScale: 
    :type areaFillScale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AutoTextIsland: bool = ...
    """
    Returns or sets  the automatic text island creation flag.  
    
    A value of True means a text island will be created when the crosshatch
    or area fill is created 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoTextIsland`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoTextIsland`` 
    
    :param autoTextIsland: 
    :type autoTextIsland: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color of crosshatch or area fill lines or area fill solid fill color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FindApparentIntersections: bool = ...
    """
    Returns or sets  the Find Apparent Intersections creation flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``FindApparentIntersections`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FindApparentIntersections`` 
    
    :param findApparentIntersections: 
    :type findApparentIntersections: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    HatchAngle: float = ...
    """
    Returns or sets  the angle of the crosshatching lines 
    
    <hr>
    
    Getter Method
    
    Signature ``HatchAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HatchAngle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    HatchDistance: float = ...
    """
    Returns or sets  the distance between crosshatch lines 
    
    <hr>
    
    Getter Method
    
    Signature ``HatchDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HatchDistance`` 
    
    :param distance: 
    :type distance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    HatchFile: str = ...
    """
    Returns or sets  the crosshatch definition file 
    
    <hr>
    
    Getter Method
    
    Signature ``HatchFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HatchFile`` 
    
    :param file: 
    :type file: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    HatchMaterial: str = ...
    """
    Returns or sets  the crosshatch material 
    
    <hr>
    
    Getter Method
    
    Signature ``HatchMaterial`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HatchMaterial`` 
    
    :param material: 
    :type material: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IslandMargin: float = ...
    """
    Returns or sets  the Island margin 
    
    <hr>
    
    Getter Method
    
    Signature ``IslandMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IslandMargin`` 
    
    :param islandMargin: 
    :type islandMargin: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LineWidth: LineWidth = ...
    """
    Returns or sets  the line width for crosshatch lines 
    
    <hr>
    
    Getter Method
    
    Signature ``LineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineWidth`` 
    
    :param lineWidth: 
    :type lineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Tolerance: float = ...
    """
    Returns or sets  the crosshatch and area fill tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: HatchStyleBuilder = ...  # unknown typename


class CustomSymbolLeaderBuilder(NXOpen.Builder):
    """
    This class is responsible for defining the origin and leader for custom
    symbol objects.  
    
    There is no KF for this.
    
    .. versionadded:: NX6.0.0
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.OriginBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CustomSymbolLeaderBuilder = ...  # unknown typename


class OrdinatePositiveDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrdinatePositiveDirection():
    """
    Specifies the positive direction for ordinate dimensions 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "Specifies positive direction for all dimensions"
       "UpperRight", "Specifies positive direction for dimensions in upper right qudrant"
       "UpperLeft", "Specifies positive direction for dimensions in upper left qudrant"
       "LowerRight", "Specifies positive direction for dimensions in lower right qudrant"
       "LowerLeft", "Specifies positive direction for dimensions in lower left qudrant"
       "Last", "Last enum value. Should not be used."
    """
    All = 0  # OrdinatePositiveDirectionMemberType
    UpperRight = 1  # OrdinatePositiveDirectionMemberType
    UpperLeft = 2  # OrdinatePositiveDirectionMemberType
    LowerRight = 3  # OrdinatePositiveDirectionMemberType
    LowerLeft = 4  # OrdinatePositiveDirectionMemberType
    Last = 5  # OrdinatePositiveDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DimensionSetBuilderDimensionSetMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DimensionSetBuilderDimensionSetMethod():
    """
    dimension set method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Not part of a set"
       "Chain", "Part of a chain"
       "Baseline", "Part of a baseline"
    """
    NotSet = 0  # DimensionSetBuilderDimensionSetMethodMemberType
    Chain = 1  # DimensionSetBuilderDimensionSetMethodMemberType
    Baseline = 2  # DimensionSetBuilderDimensionSetMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DimensionSetBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DimensionSetBuilder`
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class DimensionSetMethod():
        """
        dimension set method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Not part of a set"
           "Chain", "Part of a chain"
           "Baseline", "Part of a baseline"
        """
        NotSet = 0  # DimensionSetBuilderDimensionSetMethodMemberType
        Chain = 1  # DimensionSetBuilderDimensionSetMethodMemberType
        Baseline = 2  # DimensionSetBuilderDimensionSetMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DimensionOrSet: SelectAnnotation = ...
    """
    Returns  the dimension or dimension set object 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionOrSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectAnnotation` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Method: DimensionSetBuilderDimensionSetMethod = ...
    """
    Returns or sets  the dimension set method 
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionSetBuilderDimensionSetMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Annotations.DimensionSetBuilderDimensionSetMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    Null: DimensionSetBuilder = ...  # unknown typename


class MajorAngularDimension(AngularDimension, IPmi):
    """
    Represents a major angular dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.MajorAngularDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: MajorAngularDimension = ...  # unknown typename


class GeneralMajorAngularDimension(MajorAngularDimension):
    """
    Represents a major angular dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralMajorAngularDimension = ...  # unknown typename


class AreaTarget(DatumTarget):
    """
    Represents an area target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: AreaTarget = ...  # unknown typename


class RectangularTarget(AreaTarget, IRectangularTarget):
    """
    Represents a rectangular datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetLength(self) -> Value:
        """
        Returns the target length  
        
        Signature ``GetLength()`` 
        
        :returns:  Length data  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLength(self, length: Value) -> None:
        """
        Sets the target length.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetLength(length)`` 
        
        :param length:  New length data  
        :type length: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetWidth(self) -> Value:
        """
        Returns the target width  
        
        Signature ``GetWidth()`` 
        
        :returns:  Width data  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidth(self, width: Value) -> None:
        """
        Sets the target width.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetWidth(width)`` 
        
        :param width:  New width data  
        :type width: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Null: RectangularTarget = ...  # unknown typename


class PmiBoltCircleCenterlineBuilder(BaseBoltCircleCenterlineBuilder):
    """
    Builder for creating or editing PMI Bolt Circle Centerline   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreatePmiBoltCircleCenterlineBuilder`
    
    Default values.
    
    ===========  ===============
    Property     Value
    ===========  ===============
    FullCircle   true 
    -----------  ---------------
    Type         Through3Points 
    ===========  ===============
    
    .. versionadded:: NX12.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects for the center mark
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Plane: PlaneBuilder = ...
    """
    Returns  the plane for the creation of center mark 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PlaneBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: PmiBoltCircleCenterlineBuilder = ...  # unknown typename


class CenterlineSettingsBuilderCenterlineThicknessMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CenterlineSettingsBuilderCenterlineThickness():
    """
    the types of centerline thickness 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Thin = 0  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Normal = 1  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Thick = 2  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    One = 6  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Two = 7  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Three = 8  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Four = 9  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Five = 10  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Six = 11  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Seven = 12  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Eight = 13  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    Nine = 14  # CenterlineSettingsBuilderCenterlineThicknessMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CenterlineSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Builder for Centerline Settings.  
    
    This contains settings common to all centerlines 
    
    .. versionadded:: NX6.0.0
    """
    
    class CenterlineThickness():
        """
        the types of centerline thickness 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "Thin"
           "Normal", "Normal"
           "Thick", "Thick"
           "One", "Width One"
           "Two", "Width Two"
           "Three", "Width Three"
           "Four", "Width Four"
           "Five", "Width Five"
           "Six", "Width Six"
           "Seven", "Width Seven"
           "Eight", "Width Eight"
           "Nine", "Width Nine"
        """
        Thin = 0  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Normal = 1  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Thick = 2  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        One = 6  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Two = 7  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Three = 8  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Four = 9  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Five = 10  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Six = 11  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Seven = 12  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Eight = 13  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        Nine = 14  # CenterlineSettingsBuilderCenterlineThicknessMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color of centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Gap: float = ...
    """
    Returns or sets  the gap parameter for centeline 
    
    <hr>
    
    Getter Method
    
    Signature ``Gap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Gap`` 
    
    :param gap: 
    :type gap: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Width: CenterlineSettingsBuilderCenterlineThickness = ...
    """
    Returns or sets  the width of centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CenterlineSettingsBuilderCenterlineThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Annotations.CenterlineSettingsBuilderCenterlineThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: CenterlineSettingsBuilder = ...  # unknown typename


class CenterMarkSettingsBuilder(CenterlineSettingsBuilder):
    """
    Represents a Builder for CenterMark Settings.  
    
    This can be used for all types of centerlines 
    
    .. versionadded:: NX6.0.0
    """
    Angle: float = ...
    """
    Returns or sets  the angle of rotation for Center Marks 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX11.0.0
       Use NXOpen.Annotations.CenterMarkBuilder.Settings.AssociativeAngle instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX11.0.0
       Use NXOpen.Annotations.CenterMarkBuilder.Settings.AssociativeAngle instead.
    
    License requirements: drafting ("DRAFTING")
    """
    AssociativeAngle: NXOpen.Drawings.AssociativeAngleBuilder = ...
    """
    Returns  the AssociativeAngle builder of center Mark 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.AssociativeAngleBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Extension: float = ...
    """
    Returns or sets  the extension parameter for centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Extension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IndividualDistance: bool = ...
    """
    Returns or sets  the individual extension distance On/Off parameter for CenterMark 
    
    <hr>
    
    Getter Method
    
    Signature ``IndividualDistance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndividualDistance`` 
    
    :param individualDistance: 
    :type individualDistance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritAngle: bool = ...
    """
    Returns or sets  the inherit angle option for Center Marks 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritAngle`` 
    
    :param inheritAngle: 
    :type inheritAngle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowCenterPoint: bool = ...
    """
    Returns or sets  the show center point option for Center Marks 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowCenterPoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowCenterPoint`` 
    
    :param showCenterPoint: 
    :type showCenterPoint: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Size: float = ...
    """
    Returns or sets  the size parameter for centerline.  
    
    The size parameter gives offset value for
    :py:class:`NXOpen.Annotations.SymmetricalCenterline` and gives Center Cross Size for
    :py:class:`NXOpen.Annotations.CenterMark` and :py:class:`NXOpen.Annotations.CircleCenterline`
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: CenterMarkSettingsBuilder = ...  # unknown typename


class DatumReferenceBuilderDatumReferenceMaterialConditionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DatumReferenceBuilderDatumReferenceMaterialCondition():
    """
    Specifies the material modifier condition for the datum reference 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessOfFeatureSize", "regardless of size"
    """
    NotSet = 0  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
    LeastMaterialCondition = 1  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
    MaximumMaterialCondition = 2  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
    RegardlessOfFeatureSize = 3  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DatumReferenceBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DatumReferenceBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateEmptyDatumReferenceBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class DatumReferenceMaterialCondition():
        """
        Specifies the material modifier condition for the datum reference 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessOfFeatureSize", "regardless of size"
        """
        NotSet = 0  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
        LeastMaterialCondition = 1  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
        MaximumMaterialCondition = 2  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
        RegardlessOfFeatureSize = 3  # DatumReferenceBuilderDatumReferenceMaterialConditionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FreeState: bool = ...
    """
    Returns or sets  the datum reference free state 
    
    <hr>
    
    Getter Method
    
    Signature ``FreeState`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FreeState`` 
    
    :param datumReferenceFreeState: 
    :type datumReferenceFreeState: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Letter: str = ...
    """
    Returns or sets  the datum reference datum letter 
    
    <hr>
    
    Getter Method
    
    Signature ``Letter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Letter`` 
    
    :param datumReferenceDatum: 
    :type datumReferenceDatum: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    MaterialCondition: DatumReferenceBuilderDatumReferenceMaterialCondition = ...
    """
    Returns or sets  the datum reference material condition 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialCondition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilderDatumReferenceMaterialCondition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialCondition`` 
    
    :param materialCondition: 
    :type materialCondition: :py:class:`NXOpen.Annotations.DatumReferenceBuilderDatumReferenceMaterialCondition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Projected: bool = ...
    """
    Returns or sets  the datum reference projected 
    
    <hr>
    
    Getter Method
    
    Signature ``Projected`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Projected`` 
    
    :param datumReferenceProjected: 
    :type datumReferenceProjected: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: DatumReferenceBuilder = ...  # unknown typename


class TableSectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.TableSection` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTableSectionBuilder(self, section: TableSection) -> TableSectionBuilder:
        """
        If None create a new table section, otherwise edit existing new table section 
        
        Signature ``CreateTableSectionBuilder(section)`` 
        
        :param section:  table section  
        :type section: :py:class:`NXOpen.Annotations.TableSection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.TableSectionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> TableSection:
        """
        Finds the table section with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the table section to be found  
        :type journalIdentifier: str 
        :returns:  table section with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.TableSection` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaCalloutBuilderCalloutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaCalloutBuilderCalloutTypes():
    """
    CalloutTypes
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hole", "Hole"
       "Diameter", "Diameter"
       "Cylindrical", "Cylindrical"
    """
    Hole = 0  # SearchCriteriaCalloutBuilderCalloutTypesMemberType
    Diameter = 1  # SearchCriteriaCalloutBuilderCalloutTypesMemberType
    Cylindrical = 2  # SearchCriteriaCalloutBuilderCalloutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaCalloutBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents SearchCriteriaCalloutBuilder   
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class CalloutTypes():
        """
        CalloutTypes
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hole", "Hole"
           "Diameter", "Diameter"
           "Cylindrical", "Cylindrical"
        """
        Hole = 0  # SearchCriteriaCalloutBuilderCalloutTypesMemberType
        Diameter = 1  # SearchCriteriaCalloutBuilderCalloutTypesMemberType
        Cylindrical = 2  # SearchCriteriaCalloutBuilderCalloutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngleType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the angle setting 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleType`` 
    
    :param angleType: 
    :type angleType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AngleValue: float = ...
    """
    Returns or sets  the angle value 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleValue`` 
    
    :param angleValue: 
    :type angleValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByAngle: bool = ...
    """
    Returns or sets  the angle toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByAngle`` 
    
    :param byAngle: 
    :type byAngle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByCalloutType: bool = ...
    """
    Returns or sets  the callout type toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCalloutType`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCalloutType`` 
    
    :param calloutType: 
    :type calloutType: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByCounterboreDepth: bool = ...
    """
    Returns or sets  the counterboreDepth toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCounterboreDepth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCounterboreDepth`` 
    
    :param byCounterboreDepth: 
    :type byCounterboreDepth: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByCounterboreDiameter: bool = ...
    """
    Returns or sets  the counterboreDiameter toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCounterboreDiameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCounterboreDiameter`` 
    
    :param byCounterboreDiameter: 
    :type byCounterboreDiameter: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByCountersinkAngle: bool = ...
    """
    Returns or sets  the countersinkAngle toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCountersinkAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCountersinkAngle`` 
    
    :param byCountersinkAngle: 
    :type byCountersinkAngle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByCountersinkDiameter: bool = ...
    """
    Returns or sets  the countersinkDiameter toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCountersinkDiameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCountersinkDiameter`` 
    
    :param byCountersinkDiameter: 
    :type byCountersinkDiameter: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByDepth: bool = ...
    """
    Returns or sets  the depth toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDepth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDepth`` 
    
    :param byDepth: 
    :type byDepth: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByDiameter: bool = ...
    """
    Returns or sets  the diameter toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDiameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDiameter`` 
    
    :param byDiameter: 
    :type byDiameter: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByPitch: bool = ...
    """
    Returns or sets  the pitch toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByPitch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByPitch`` 
    
    :param byPitch: 
    :type byPitch: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByScrewSize: bool = ...
    """
    Returns or sets  the screwSize toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByScrewSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByScrewSize`` 
    
    :param byScrewSize: 
    :type byScrewSize: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByTaperAngle: bool = ...
    """
    Returns or sets  the taperAngle toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTaperAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTaperAngle`` 
    
    :param byTaperAngle: 
    :type byTaperAngle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByThreadDepth: bool = ...
    """
    Returns or sets  the threadDepth toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByThreadDepth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByThreadDepth`` 
    
    :param byThreadDepth: 
    :type byThreadDepth: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByThreadSize: bool = ...
    """
    Returns or sets  the threadSize toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByThreadSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByThreadSize`` 
    
    :param byThreadSize: 
    :type byThreadSize: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CalloutType: SearchCriteriaCalloutBuilderCalloutTypes = ...
    """
    Returns or sets  the callout type 
    
    <hr>
    
    Getter Method
    
    Signature ``CalloutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaCalloutBuilderCalloutTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalloutType`` 
    
    :param calloutType: 
    :type calloutType: :py:class:`NXOpen.Annotations.SearchCriteriaCalloutBuilderCalloutTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CounterboreDepthType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the counterboreDepth setting 
    
    <hr>
    
    Getter Method
    
    Signature ``CounterboreDepthType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CounterboreDepthType`` 
    
    :param counterboreDepthType: 
    :type counterboreDepthType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CounterboreDepthValue: float = ...
    """
    Returns or sets  the counterboreDepth value 
    
    <hr>
    
    Getter Method
    
    Signature ``CounterboreDepthValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CounterboreDepthValue`` 
    
    :param counterboreDepthValue: 
    :type counterboreDepthValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CounterboreDiameterType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the counterboreDiameter setting 
    
    <hr>
    
    Getter Method
    
    Signature ``CounterboreDiameterType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CounterboreDiameterType`` 
    
    :param counterboreDiameterType: 
    :type counterboreDiameterType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CounterboreDiameterValue: float = ...
    """
    Returns or sets  the counterboreDiameter value 
    
    <hr>
    
    Getter Method
    
    Signature ``CounterboreDiameterValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CounterboreDiameterValue`` 
    
    :param counterboreDiameterValue: 
    :type counterboreDiameterValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CountersinkAngleType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the countersinkAngle setting 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersinkAngleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CountersinkAngleType`` 
    
    :param countersinkAngleType: 
    :type countersinkAngleType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CountersinkAngleValue: float = ...
    """
    Returns or sets  the countersinkAngle value 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersinkAngleValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CountersinkAngleValue`` 
    
    :param countersinkAngleValue: 
    :type countersinkAngleValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CountersinkDiameterType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the countersinkDiameter setting 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersinkDiameterType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CountersinkDiameterType`` 
    
    :param countersinkDiameterType: 
    :type countersinkDiameterType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CountersinkDiameterValue: float = ...
    """
    Returns or sets  the countersinkDiameter value 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersinkDiameterValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CountersinkDiameterValue`` 
    
    :param countersinkDiameterValue: 
    :type countersinkDiameterValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DepthType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the depth setting 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DepthType`` 
    
    :param depthType: 
    :type depthType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DepthValue: float = ...
    """
    Returns or sets  the depth value 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DepthValue`` 
    
    :param depthValue: 
    :type depthValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DiameterType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the diameter setting 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterType`` 
    
    :param diameterType: 
    :type diameterType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DiameterValue: float = ...
    """
    Returns or sets  the diameter value 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterValue`` 
    
    :param diameterValue: 
    :type diameterValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PitchType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the pitch setting 
    
    <hr>
    
    Getter Method
    
    Signature ``PitchType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PitchType`` 
    
    :param pitchType: 
    :type pitchType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PitchValue: float = ...
    """
    Returns or sets  the pitch value 
    
    <hr>
    
    Getter Method
    
    Signature ``PitchValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PitchValue`` 
    
    :param pitchValue: 
    :type pitchValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ScrewSizeText: str = ...
    """
    Returns or sets  the screwSize text 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewSizeText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewSizeText`` 
    
    :param screwSizeText: 
    :type screwSizeText: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ScrewSizeTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the ScrewSize setting 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewSizeTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewSizeTextType`` 
    
    :param screwSizeTextType: 
    :type screwSizeTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TaperAngleType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the taperAngle setting 
    
    <hr>
    
    Getter Method
    
    Signature ``TaperAngleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperAngleType`` 
    
    :param taperAngleType: 
    :type taperAngleType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TaperAngleValue: float = ...
    """
    Returns or sets  the taperAngle value 
    
    <hr>
    
    Getter Method
    
    Signature ``TaperAngleValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperAngleValue`` 
    
    :param taperAngleValue: 
    :type taperAngleValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ThreadDepthType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the threadDepth setting 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadDepthType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadDepthType`` 
    
    :param threadDepthType: 
    :type threadDepthType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ThreadDepthValue: float = ...
    """
    Returns or sets  the threadDepth value 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadDepthValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadDepthValue`` 
    
    :param threadDepthValue: 
    :type threadDepthValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ThreadSizeText: str = ...
    """
    Returns or sets  the threadSize text 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadSizeText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadSizeText`` 
    
    :param threadSizeText: 
    :type threadSizeText: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ThreadSizeTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the threadSize setting 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadSizeTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadSizeTextType`` 
    
    :param threadSizeTextType: 
    :type threadSizeTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SearchCriteriaCalloutBuilder = ...  # unknown typename


class AreaFillMaterialMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AreaFillMaterial():
    """
    Specifies the area fill material type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CorkFelt", "Cork felt"
       "SoundInsulation", "Sound insulation"
       "Concrete", "Concrete"
       "Earth", "Earth"
       "Rock", "Rock"
       "Sand", "Sand"
       "Liquids", "Liquids"
       "WoodAcrossGrain", "Wood across grain"
       "WoodAlongGrain", "Wood along grain"
       "SolidFill", "Solid fill"
    """
    CorkFelt = 0  # AreaFillMaterialMemberType
    SoundInsulation = 1  # AreaFillMaterialMemberType
    Concrete = 2  # AreaFillMaterialMemberType
    Earth = 3  # AreaFillMaterialMemberType
    Rock = 4  # AreaFillMaterialMemberType
    Sand = 5  # AreaFillMaterialMemberType
    Liquids = 6  # AreaFillMaterialMemberType
    WoodAcrossGrain = 7  # AreaFillMaterialMemberType
    WoodAlongGrain = 8  # AreaFillMaterialMemberType
    SolidFill = 9  # AreaFillMaterialMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableStyleBuilder(StyleBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TableStyleBuilder`.  
    
    This class is used to set Annotation preferences when creating or editing an annotation.
    
    .. versionadded:: NX8.0.0
    """
    BendTable: BendTableSettingsBuilder = ...
    """
    Returns  the Bend table settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``BendTable`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BendTableSettingsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableContent: HoleTableSettingsContentBuilder = ...
    """
    Returns  the Hole table settings content builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableContent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsContentBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableFormat: HoleTableSettingsFormatBuilder = ...
    """
    Returns  the Hole table settings format builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableHoleFilters: HoleTableSettingsHoleFiltersBuilder = ...
    """
    Returns  the Hole table settings hole filters builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableHoleFilters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsHoleFiltersBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableLabel: HoleTableSettingsLabelBuilder = ...
    """
    Returns  the Hole table settings label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleTableWorkflow: HoleTableSettingsWorkflowBuilder = ...
    """
    Returns  the Hole table settings workflow builder 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTableWorkflow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsWorkflowBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TableCellStyle: TableCellStyleBuilder = ...
    """
    Returns  the cell style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableCellStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TableSectionStyle: TableSectionStyleBuilder = ...
    """
    Returns  the section style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TableSectionStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableSectionStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TabularNoteStyle: TabularNoteStyleBuilder = ...
    """
    Returns  the tabular note style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TabularNoteStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TabularNoteStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: TableStyleBuilder = ...  # unknown typename


class BoltCircleCenterlineBuilder(BaseBoltCircleCenterlineBuilder):
    """
    Represents a BoltCircleCenterlineBuilder Builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreateBoltCircleCenterlineBuilder`
    
    Default values.
    
    ===========  ===============
    Property     Value
    ===========  ===============
    FullCircle   true 
    -----------  ---------------
    Type         Through3Points 
    ===========  ===============
    
    .. versionadded:: NX6.0.0
    """
    Null: BoltCircleCenterlineBuilder = ...  # unknown typename


class PMIExplicitOrderBuilder(NXOpen.Gateway.BaseExplicitOrderBuilder):
    """
    This is the :py:class:`NXOpen.Annotations.PMIExplicitOrderBuilder` for the explicit order  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiManager.CreateExplicitOrderBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: PMIExplicitOrderBuilder = ...  # unknown typename


class Centerline3dSettingsBuilder(CenterlineSettingsBuilder):
    """
    Represents a Builder for Centerline3dSettings.  
    
    .. versionadded:: NX6.0.0
    """
    Extension: float = ...
    """
    Returns or sets  the extension parameter for 3D Centerline
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Extension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IndividualDistance: bool = ...
    """
    Returns or sets  the individual extension distance On/Off parameter for 3D Centerline
    
    <hr>
    
    Getter Method
    
    Signature ``IndividualDistance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndividualDistance`` 
    
    :param individualDistance: 
    :type individualDistance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Size: float = ...
    """
    Returns or sets  the overrun size parameter for 3D Centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: Centerline3dSettingsBuilder = ...  # unknown typename


class LetteringPreferences(NXOpen.TransientObject):
    """
    Represents lettering preferences.  
    
    When setting the property, changes are not applied to object until
    the set method is called
    
    .. versionadded:: NX3.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDimensionText(self) -> Lettering:
        """
        Returns the dimension text  
        
        Signature ``GetDimensionText()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDimensionText(self, dimensionText: Lettering) -> None:
        """
        Sets the dimension text 
        
        Signature ``SetDimensionText(dimensionText)`` 
        
        :param dimensionText: 
        :type dimensionText: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAppendedText(self) -> Lettering:
        """
        Returns the appended text  
        
        Signature ``GetAppendedText()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAppendedText(self, appendedText: Lettering) -> None:
        """
        Sets the appended text 
        
        Signature ``SetAppendedText(appendedText)`` 
        
        :param appendedText: 
        :type appendedText: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetToleranceText(self) -> Lettering:
        """
        Returns the tolerance text  
        
        Signature ``GetToleranceText()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetToleranceText(self, toleranceText: Lettering) -> None:
        """
        Sets the tolerance text 
        
        Signature ``SetToleranceText(toleranceText)`` 
        
        :param toleranceText: 
        :type toleranceText: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetGeneralText(self) -> Lettering:
        """
        Returns the general text  
        
        Signature ``GetGeneralText()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetGeneralText(self, generalText: Lettering) -> None:
        """
        Sets the general text 
        
        Signature ``SetGeneralText(generalText)`` 
        
        :param generalText: 
        :type generalText: :py:class:`NXOpen.Annotations.Lettering` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    AlignmentPosition: AlignmentPosition = ...
    """
    Returns or sets  the align position 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AlignmentPosition` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentPosition`` 
    
    :param alignPosition: 
    :type alignPosition: :py:class:`NXOpen.Annotations.AlignmentPosition` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Angle: float = ...
    """
    Returns or sets  the angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DimAppendedTextSpaceFactor: float = ...
    """
    Returns or sets  the dimension/appended text space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``DimAppendedTextSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimAppendedTextSpaceFactor`` 
    
    :param dimAppTextSpaceFactor: 
    :type dimAppTextSpaceFactor: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DimDimLineSpaceFactor: float = ...
    """
    Returns or sets  the dimension/dimension line space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``DimDimLineSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimDimLineSpaceFactor`` 
    
    :param dimDimLineSpaceFactor: 
    :type dimDimLineSpaceFactor: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DimToleranceTextSpaceFactor: float = ...
    """
    Returns or sets  the dimension/tolerance text space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``DimToleranceTextSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimToleranceTextSpaceFactor`` 
    
    :param dimTolTextSpaceFactor: 
    :type dimTolTextSpaceFactor: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    GdtFrameHeightFactor: float = ...
    """
    Returns or sets  the gdt frame height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``GdtFrameHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GdtFrameHeightFactor`` 
    
    :param gdtFrameHeightFactor: 
    :type gdtFrameHeightFactor: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    HorizTextJust: TextJustification = ...
    """
    Returns or sets  the horizontal text justification 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizTextJust`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextJustification` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizTextJust`` 
    
    :param horizTextJust: 
    :type horizTextJust: :py:class:`NXOpen.Annotations.TextJustification` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    StackAboveSpaceFactor: float = ...
    """
    Returns or sets  the stack above spacing factor for space buffer above annotation in stack.  
    
    <hr>
    
    Getter Method
    
    Signature ``StackAboveSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackAboveSpaceFactor`` 
    
    :param stackAboveSpaceFactor: 
    :type stackAboveSpaceFactor: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    StackAutospace: bool = ...
    """
    Returns or sets  the flag indicating whether to automatically set the stack spacing to system derived values 
    
    <hr>
    
    Getter Method
    
    Signature ``StackAutospace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackAutospace`` 
    
    :param stackAutospace: 
    :type stackAutospace: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StackBelowSpaceFactor: float = ...
    """
    Returns or sets  the stack below spacing factor for space buffer below annotation in stack.  
    
    <hr>
    
    Getter Method
    
    Signature ``StackBelowSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackBelowSpaceFactor`` 
    
    :param stackBelowSpaceFactor: 
    :type stackBelowSpaceFactor: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    StackHorizontalAlignment: StackHorizontalAlignment = ...
    """
    Returns or sets  the stack horizontal(left/right) alignment option 
    
    <hr>
    
    Getter Method
    
    Signature ``StackHorizontalAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StackHorizontalAlignment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackHorizontalAlignment`` 
    
    :param horizontalAlignment: 
    :type horizontalAlignment: :py:class:`NXOpen.Annotations.StackHorizontalAlignment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    StackInheritAssociatedObjects: bool = ...
    """
    Returns or sets  the flag indicating whether to inherit the associated objects of a stack when 
    an annotation is inserted into a stack.  
    
    <hr>
    
    Getter Method
    
    Signature ``StackInheritAssociatedObjects`` 
    
    :returns:  Flag to whether inherit associated objects of stack 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackInheritAssociatedObjects`` 
    
    :param stackInheritAssociatedObjects:  Flag to whether inherit associated objects of stack 
    :type stackInheritAssociatedObjects: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    StackLeftSpaceFactor: float = ...
    """
    Returns or sets  the stack left spacing factor for space buffer left annotation in stack.  
    
    <hr>
    
    Getter Method
    
    Signature ``StackLeftSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackLeftSpaceFactor`` 
    
    :param stackLeftSpaceFactor: 
    :type stackLeftSpaceFactor: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    StackRightSpaceFactor: float = ...
    """
    Returns or sets  the stack right spacing factor for space buffer right annotation in stack.  
    
    <hr>
    
    Getter Method
    
    Signature ``StackRightSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackRightSpaceFactor`` 
    
    :param stackRightSpaceFactor: 
    :type stackRightSpaceFactor: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    StackVerticalAlignment: StackVerticalAlignment = ...
    """
    Returns or sets  the stack vertical(above/below) alignment option 
    
    <hr>
    
    Getter Method
    
    Signature ``StackVerticalAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StackVerticalAlignment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackVerticalAlignment`` 
    
    :param verticalAlignment: 
    :type verticalAlignment: :py:class:`NXOpen.Annotations.StackVerticalAlignment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """


class BaseCurveLengthDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.BaseArcLengthDimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FirstAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Inherit: SelectDimension = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectDimension` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BaseCurveLengthDimensionBuilder = ...  # unknown typename


class HoleDimension(BaseHoleDimension):
    """
    Represents a hole dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.RadialDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: HoleDimension = ...  # unknown typename


class LeaderBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.LeaderBuilder`.  
    
    This class is
    used to construct a leader for an annotation object.
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Leaders: LeaderDataList = ...
    """
    Returns  the leaders to attach to the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leaders`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderDataList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: LeaderBuilder = ...  # unknown typename


class ConstantsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Constants():
    """
    Constants for annotations 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MaxLeaders", "The maximum number of leaders that an annotation can have"
       "MaxLeaderIntermediatePoints", "The maximum number of intermediate points that a leader can have"
    """
    MaxLeaders = 7  # ConstantsMemberType
    MaxLeaderIntermediatePoints = 7  # ConstantsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiChamferDimensionBuilder(BaseChamferDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiChamferDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiChamferDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PmiChamferDimensionBuilder = ...  # unknown typename


class FinishMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FinishMethod():
    """
    Specifies the weld finish method 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Specifies no finishing method"
       "Chipping", "Specifies chipping finish"
       "Grinding", "Specifies grinding finish"
       "Hammering", "Specifies hammering finish"
       "Machining", "Specifies machining finish"
       "Rolling", "Specifies rolling finish"
       "Peening", "Specifies peening finish"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # FinishMethodMemberType
    Chipping = 1  # FinishMethodMemberType
    Grinding = 2  # FinishMethodMemberType
    Hammering = 3  # FinishMethodMemberType
    Machining = 4  # FinishMethodMemberType
    Rolling = 5  # FinishMethodMemberType
    Peening = 6  # FinishMethodMemberType
    Last = 7  # FinishMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiRadiusDimension(BaseRadiusDimension):
    """
    Represents a PMI radius dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiRadialDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiRadiusDimension = ...  # unknown typename


class BaseThicknessDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.BaseThicknessDimensionBuilder` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FirstAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Inherit: SelectDimension = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectDimension` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SecondAssociativity: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BaseThicknessDimensionBuilder = ...  # unknown typename


class ThicknessDimensionBuilder(BaseThicknessDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ConcentricCircleDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateThicknessDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: ThicknessDimensionBuilder = ...  # unknown typename


class PartIdentification(PmiAttribute):
    """
    Represents a Part Identification   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PartIdentificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PartIdentification = ...  # unknown typename


class PmiRapidDimensionBuilder(BaseRapidDimensionBuilder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiRapidDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PmiRapidDimensionBuilder = ...  # unknown typename


class LeaderOrientationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderOrientation():
    """
    Specifies the leader's orientation 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromLeft", " - "
       "FromRight", " - "
       "FromTop", " - "
       "FromBottom", " - "
       "Inferred", " - "
    """
    FromLeft = 1  # LeaderOrientationMemberType
    FromRight = 2  # LeaderOrientationMemberType
    FromTop = 3  # LeaderOrientationMemberType
    FromBottom = 4  # LeaderOrientationMemberType
    Inferred = 5  # LeaderOrientationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseFoldedRadiusDimension(Dimension, ILinearTolerance, IPmi):
    """
    Represents a folded radius dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseFoldedRadiusDimension = ...  # unknown typename


class FoldedRadiusDimension(BaseFoldedRadiusDimension):
    """
    Represents a folded radius dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.RadialDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: FoldedRadiusDimension = ...  # unknown typename


class NoteCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of notes   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX3.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def NewNoteData(self) -> NoteData:
        """
        Creates a new NoteData object  
        
        Signature ``NewNoteData()`` 
        
        :returns:  New NoteData  
        :rtype: :py:class:`NXOpen.Annotations.NoteData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiNote(self, noteData: NoteData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiNote:
        """
        Creates a PMI note  
        
        Signature ``CreatePmiNote(noteData, pmiData, annotationPlane, origin)`` 
        
        :param noteData:  Note data  
        :type noteData: :py:class:`NXOpen.Annotations.NoteData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the note lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the note  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI note  
        :rtype: :py:class:`NXOpen.Annotations.PmiNote` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    


class SearchCriteriaDatumFeatureSymbolBuilder(NXOpen.Builder):
    """
    Represents SearchCriteriaDatumFeatureSymbolBuilder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SearchModelViewCollection.CreateSearchCriteriaDatumFeatureSymbolBuilder`
    
    .. versionadded:: NX7.5.0
    """
    ByDatumFeatureSymbolLabel: bool = ...
    """
    Returns or sets  the datum feature symbol label toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDatumFeatureSymbolLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDatumFeatureSymbolLabel`` 
    
    :param datumFeatureSymbolLabel: 
    :type datumFeatureSymbolLabel: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DatumFeatureSymbolLabel: str = ...
    """
    Returns or sets  the datum feature symbol label 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumFeatureSymbolLabel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumFeatureSymbolLabel`` 
    
    :param datumFeatureSymbolLabel: 
    :type datumFeatureSymbolLabel: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SearchCriteriaDatumFeatureSymbolBuilder = ...  # unknown typename


class EditSymbolDisplayBuilderFontTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EditSymbolDisplayBuilderFontTypes():
    """
    The Enum represent font types. :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Font` and 
    :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Font` will set this font type at builder side and
    will be used to apply the same on the selected contents after commit
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Solid", "Solid type"
       "Dashed", "Dashed Type"
       "Phantom", "Phantom Type"
       "Centerline", "Centerline"
       "Dotted", "Dotted Type"
       "LongDashed", "Long Dash"
       "DottedDashed", "Dotted Dash"
    """
    Solid = 0  # EditSymbolDisplayBuilderFontTypesMemberType
    Dashed = 1  # EditSymbolDisplayBuilderFontTypesMemberType
    Phantom = 2  # EditSymbolDisplayBuilderFontTypesMemberType
    Centerline = 3  # EditSymbolDisplayBuilderFontTypesMemberType
    Dotted = 4  # EditSymbolDisplayBuilderFontTypesMemberType
    LongDashed = 5  # EditSymbolDisplayBuilderFontTypesMemberType
    DottedDashed = 6  # EditSymbolDisplayBuilderFontTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EditSymbolDisplayBuilderWidthTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EditSymbolDisplayBuilderWidthTypes():
    """
    The Enum represent width types :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Width` and 
    :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Width` will set this width type at builder side and
    will be used to apply the same on the selected contents after commit
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "ThicknessOne", "Width One"
       "ThicknessTwo", "Width Two"
       "ThicknessThree", "Width Three"
       "ThicknessFour", "Width Four"
       "ThicknessFive", "Width Five"
       "ThicknessSix", "Width Six"
       "ThicknessSeven", "Width Seven"
       "ThicknessEight", "Width Eight"
       "ThicknessNine", "Width Nine"
    """
    Thin = 0  # EditSymbolDisplayBuilderWidthTypesMemberType
    Normal = 1  # EditSymbolDisplayBuilderWidthTypesMemberType
    Thick = 2  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessOne = 6  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessTwo = 7  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessThree = 8  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessFour = 9  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessFive = 10  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessSix = 11  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessSeven = 12  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessEight = 13  # EditSymbolDisplayBuilderWidthTypesMemberType
    ThicknessNine = 14  # EditSymbolDisplayBuilderWidthTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EditSymbolDisplayBuilder(NXOpen.Builder):
    """
    Represents a EditSymbolPieces builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.EditSymbolDisplayBuilder`
    
    Default values.
    
    ========  ======
    Property  Value
    ========  ======
    Font      Solid 
    --------  ------
    Width     Thin 
    ========  ======
    
    .. versionadded:: NX7.5.0
    """
    
    class FontTypes():
        """
        The Enum represent font types. :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Font` and 
        :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Font` will set this font type at builder side and
        will be used to apply the same on the selected contents after commit
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Solid", "Solid type"
           "Dashed", "Dashed Type"
           "Phantom", "Phantom Type"
           "Centerline", "Centerline"
           "Dotted", "Dotted Type"
           "LongDashed", "Long Dash"
           "DottedDashed", "Dotted Dash"
        """
        Solid = 0  # EditSymbolDisplayBuilderFontTypesMemberType
        Dashed = 1  # EditSymbolDisplayBuilderFontTypesMemberType
        Phantom = 2  # EditSymbolDisplayBuilderFontTypesMemberType
        Centerline = 3  # EditSymbolDisplayBuilderFontTypesMemberType
        Dotted = 4  # EditSymbolDisplayBuilderFontTypesMemberType
        LongDashed = 5  # EditSymbolDisplayBuilderFontTypesMemberType
        DottedDashed = 6  # EditSymbolDisplayBuilderFontTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WidthTypes():
        """
        The Enum represent width types :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Width` and 
        :py:meth:`NXOpen.Annotations.EditSymbolDisplayBuilder.Width` will set this width type at builder side and
        will be used to apply the same on the selected contents after commit
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "Thin"
           "Normal", "Normal"
           "Thick", "Thick"
           "ThicknessOne", "Width One"
           "ThicknessTwo", "Width Two"
           "ThicknessThree", "Width Three"
           "ThicknessFour", "Width Four"
           "ThicknessFive", "Width Five"
           "ThicknessSix", "Width Six"
           "ThicknessSeven", "Width Seven"
           "ThicknessEight", "Width Eight"
           "ThicknessNine", "Width Nine"
        """
        Thin = 0  # EditSymbolDisplayBuilderWidthTypesMemberType
        Normal = 1  # EditSymbolDisplayBuilderWidthTypesMemberType
        Thick = 2  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessOne = 6  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessTwo = 7  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessThree = 8  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessFour = 9  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessFive = 10  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessSix = 11  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessSeven = 12  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessEight = 13  # EditSymbolDisplayBuilderWidthTypesMemberType
        ThicknessNine = 14  # EditSymbolDisplayBuilderWidthTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SelectComponent(self, sid: str) -> None:
        """
        Stores index of the custom symbol component for editing display 
        
        Signature ``SelectComponent(sid)`` 
        
        :param sid:  sid of selected component 
        :type sid: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ApplyStyle(self) -> None:
        """
        Apply text preferences 
        
        Signature ``ApplyStyle()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ApplyCfw(self) -> None:
        """
        Apply color font width 
        
        Signature ``ApplyCfw()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color picker 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param colorPicker: 
    :type colorPicker: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Font: EditSymbolDisplayBuilderFontTypes = ...
    """
    Returns or sets  the enum font 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.EditSymbolDisplayBuilderFontTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param enumFont: 
    :type enumFont: :py:class:`NXOpen.Annotations.EditSymbolDisplayBuilderFontTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Width: EditSymbolDisplayBuilderWidthTypes = ...
    """
    Returns or sets  the enum width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.EditSymbolDisplayBuilderWidthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param enumWidth: 
    :type enumWidth: :py:class:`NXOpen.Annotations.EditSymbolDisplayBuilderWidthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: EditSymbolDisplayBuilder = ...  # unknown typename


class WeldStandardMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WeldStandard():
    """
    Specifies the weld standard 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ansi", "ANSI standard"
       "Din", "DIN standard"
       "Jis", "JIS standard"
       "Iso", "ISO standard"
       "Eskd", "ESKD standard"
       "Gb", "GB standard"
       "Last", "Last enum value. Should not be used."
    """
    Ansi = 0  # WeldStandardMemberType
    Din = 1  # WeldStandardMemberType
    Jis = 2  # WeldStandardMemberType
    Iso = 3  # WeldStandardMemberType
    Eskd = 4  # WeldStandardMemberType
    Gb = 5  # WeldStandardMemberType
    Last = 6  # WeldStandardMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SymbolFile(NXOpen.NXObject):
    """
    Represents a symbolFile   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.SymbolFileBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: SymbolFile = ...  # unknown typename


class OrdinateLineArrowDisplayOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrdinateLineArrowDisplayOption():
    """
    Specifies the ordinate dimension line and arrow display option 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Doesn't display line and arrow"
       "All", "Displays both the line and arrow"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # OrdinateLineArrowDisplayOptionMemberType
    All = 1  # OrdinateLineArrowDisplayOptionMemberType
    Last = 2  # OrdinateLineArrowDisplayOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiConcentricCircleDimension(BaseConcentricCircleDimension):
    """
    Represents a PMI concentric circle dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiThicknessDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiConcentricCircleDimension = ...  # unknown typename


class LineWeld(Weld):
    """
    Represents a line weld   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LineWeldBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetWeldData(self) -> LineWeldData:
        """
        Returns the weld data  
        
        Signature ``GetWeldData()`` 
        
        :returns:  Line weld data  
        :rtype: :py:class:`NXOpen.Annotations.LineWeldData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWeldData(self, data: LineWeldData) -> None:
        """
        Sets the weld data.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetWeldData(data)`` 
        
        :param data:  New line weld data  
        :type data: :py:class:`NXOpen.Annotations.LineWeldData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetAutoWeldSymbol(self, isAutoWeldSymbol: bool) -> None:
        """
        Sets the auto weld symbol flag.  
        
        Signature ``SetAutoWeldSymbol(isAutoWeldSymbol)`` 
        
        :param isAutoWeldSymbol: 
        :type isAutoWeldSymbol: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Null: LineWeld = ...  # unknown typename


class PmiLineWeld(LineWeld, IPmi):
    """
    Represents a PMI line weld   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiLineWeldBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiLineWeld = ...  # unknown typename


class TextWithSymbolsBuilderSymbolSizingMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextWithSymbolsBuilderSymbolSizingMethod():
    """
    sizing method for embedded user-defined symbols 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ScaleAndAspectRatio", "Size using scale and aspect ratio"
       "LengthAndHeight", "Size using length and height"
    """
    ScaleAndAspectRatio = 0  # TextWithSymbolsBuilderSymbolSizingMethodMemberType
    LengthAndHeight = 1  # TextWithSymbolsBuilderSymbolSizingMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TextWithSymbolsBuilderSymbolPreferencesTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextWithSymbolsBuilderSymbolPreferencesType():
    """
    Enum for the symbol preferences 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UseCurrent", "Use Current"
       "UseDefinition", "Use Definition"
    """
    UseCurrent = 0  # TextWithSymbolsBuilderSymbolPreferencesTypeMemberType
    UseDefinition = 1  # TextWithSymbolsBuilderSymbolPreferencesTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TextWithSymbolsBuilderSymbolAlignmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextWithSymbolsBuilderSymbolAlignmentType():
    """
    Enum for the symbol alignment 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Top", "Top"
       "Middle", "Middle"
       "Bottom", "Bottom"
       "AnchorPoint", "Anchor Point"
    """
    NotSet = 0  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
    Top = 1  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
    Middle = 2  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
    Bottom = 3  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
    AnchorPoint = 4  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TextWithSymbolsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TextWithSymbolsBuilder` which collects
    internationalized text strings from the user for processing on an annotation object.  
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX6.0.0
    """
    
    class SymbolSizingMethod():
        """
        sizing method for embedded user-defined symbols 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ScaleAndAspectRatio", "Size using scale and aspect ratio"
           "LengthAndHeight", "Size using length and height"
        """
        ScaleAndAspectRatio = 0  # TextWithSymbolsBuilderSymbolSizingMethodMemberType
        LengthAndHeight = 1  # TextWithSymbolsBuilderSymbolSizingMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SymbolPreferencesType():
        """
        Enum for the symbol preferences 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UseCurrent", "Use Current"
           "UseDefinition", "Use Definition"
        """
        UseCurrent = 0  # TextWithSymbolsBuilderSymbolPreferencesTypeMemberType
        UseDefinition = 1  # TextWithSymbolsBuilderSymbolPreferencesTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SymbolAlignmentType():
        """
        Enum for the symbol alignment 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Top", "Top"
           "Middle", "Middle"
           "Bottom", "Bottom"
           "AnchorPoint", "Anchor Point"
        """
        NotSet = 0  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
        Top = 1  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
        Middle = 2  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
        Bottom = 3  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
        AnchorPoint = 4  # TextWithSymbolsBuilderSymbolAlignmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetText(self) -> 'list[str]':
        """
        Returns the text of the annotation  
        
        Signature ``GetText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetText(self, text: 'list[str]') -> None:
        """
        Sets the text of the annotation 
        
        Signature ``SetText(text)`` 
        
        :param text: 
        :type text: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def AddSymbol(self, newObject: NXOpen.NXObject, name: str, lineNo: int, cursorPos: int) -> None:
        """
        Adds a symbol 
        
        Signature ``AddSymbol(newObject, name, lineNo, cursorPos)`` 
        
        :param newObject:  symbol instance object  
        :type newObject: :py:class:`NXOpen.NXObject` 
        :param name:  symbol name  
        :type name: str 
        :param lineNo:  line number to insert token with index from 1  
        :type lineNo: int 
        :param cursorPos:  cursor position in the line with index from 1  
        :type cursorPos: int 
        
        .. versionadded:: NX7.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def RemoveSymbol(self, path: str) -> None:
        """
        Removes specified symbol 
        
        Signature ``RemoveSymbol(path)`` 
        
        :param path:  Symbol name  
        :type path: str 
        
        .. versionadded:: NX7.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetEmbeddedCustomSymbols(self) -> 'list[BaseCustomSymbol]':
        """
        Retrieves the embedded custom symbols  
        
        Signature ``GetEmbeddedCustomSymbols()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSymbolAlignment(self, symbolName: str) -> TextWithSymbolsBuilderSymbolAlignmentType:
        """
        Get the alignement of embedded symbol correspoding to symbol name 
        
        Signature ``GetSymbolAlignment(symbolName)`` 
        
        :param symbolName:  Symbol Name  
        :type symbolName: str 
        :returns:  Symbol Alignment  
        :rtype: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolAlignmentType` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetSymbolAlignment(self, symbolName: str, symbolAlignment: TextWithSymbolsBuilderSymbolAlignmentType) -> None:
        """
        Set the alignement on embedded symbol correspoding to symbol name
        
        Signature ``SetSymbolAlignment(symbolName, symbolAlignment)`` 
        
        :param symbolName:  Symbol Name  
        :type symbolName: str 
        :param symbolAlignment:  Symbol Alignment  
        :type symbolAlignment: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolAlignmentType` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def AddAttributeReference(self, ownerTag: NXOpen.NXObject, title: str, displayTokens: bool, lineNo: int, cursorPos: int) -> None:
        """
        Adds an attribute reference 
        
        Signature ``AddAttributeReference(ownerTag, title, displayTokens, lineNo, cursorPos)`` 
        
        :param ownerTag:  object that owns the attribute.  If we are trying to reference a part attribute                                                          then this should be the part object  
        :type ownerTag: :py:class:`NXOpen.NXObject` 
        :param title:  title of attribute  
        :type title: str 
        :param displayTokens:  True to display using TC tokens.                                                          False to display as plain text.  
        :type displayTokens: bool 
        :param lineNo:  line number to insert token with index from 1  
        :type lineNo: int 
        :param cursorPos:  cursor position in the line with index from 1  
        :type cursorPos: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def AddExpressionReference(self, expName: str, format: str, lineNo: int, cursorPos: int) -> None:
        """
        Adds an expression reference 
        
        Signature ``AddExpressionReference(expName, format, lineNo, cursorPos)`` 
        
        :param expName:  expression name  
        :type expName: str 
        :param format:  format to use for displaying an expression.                                          'A' for displaying the expression formula, or                                          'm.n' where 'm' is the minimum number of characters displayed                                          and 'n' is the number of decimal places to display  
        :type format: str 
        :param lineNo:  line number to insert token with index from 1  
        :type lineNo: int 
        :param cursorPos:  cursor position in the line with index from 1  
        :type cursorPos: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CustomSymbolScale: float = ...
    """
    Returns or sets  the scale of the custom symbols  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomSymbolScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomSymbolScale`` 
    
    :param customSymbolScale: 
    :type customSymbolScale: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SymbolAspectRatio: float = ...
    """
    Returns or sets  the aspect ratio of the embedded user-defined symbols if the symbol size method is
    :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod.ScaleAndAspectRatio <NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolAspectRatio`` 
    
    :param symbolAspectRatio: 
    :type symbolAspectRatio: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SymbolHeight: float = ...
    """
    Returns or sets  the height of the embedded user-defined symbols if the symbol size method is
    :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod.LengthAndHeight <NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolHeight`` 
    
    :param symbolHeight: 
    :type symbolHeight: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SymbolLength: float = ...
    """
    Returns or sets  the length of the embedded user-defined symbols if the symbol size method is
    :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod.LengthAndHeight <NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolLength`` 
    
    :param symbolLength: 
    :type symbolLength: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SymbolPreferences: TextWithSymbolsBuilderSymbolPreferencesType = ...
    """
    Returns or sets  the symbol preferences 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolPreferences`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolPreferencesType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolPreferences`` 
    
    :param symbolPreferences: 
    :type symbolPreferences: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolPreferencesType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolScale: float = ...
    """
    Returns or sets  the scale of the embedded user-defined symbols if the symbol size method is
    :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod.ScaleAndAspectRatio <NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolScale`` 
    
    :param symbolScale: 
    :type symbolScale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SymbolSizeMethod: TextWithSymbolsBuilderSymbolSizingMethod = ...
    """
    Returns or sets  the method in which embedded user-defined symbols are scaled 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolSizeMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolSizeMethod`` 
    
    :param symbolSizeMethod: 
    :type symbolSizeMethod: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilderSymbolSizingMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: TextWithSymbolsBuilder = ...  # unknown typename


class BendTableSettingsBuilderColumnTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendTableSettingsBuilderColumnType():
    """
    This enum represents the type of the column in the bend table 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BendID", "Bend ID"
       "BendName", "Bend Name"
       "BendRadius", "Bend Radius"
       "BendAngle", "Bend Angle"
       "BendDirection", "Bend Direction"
       "IncludedAngle", "Included Angle"
    """
    BendID = 0  # BendTableSettingsBuilderColumnTypeMemberType
    BendName = 1  # BendTableSettingsBuilderColumnTypeMemberType
    BendRadius = 2  # BendTableSettingsBuilderColumnTypeMemberType
    BendAngle = 3  # BendTableSettingsBuilderColumnTypeMemberType
    BendDirection = 4  # BendTableSettingsBuilderColumnTypeMemberType
    IncludedAngle = 5  # BendTableSettingsBuilderColumnTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendTableSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.BendTableSettingsBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class ColumnType():
        """
        This enum represents the type of the column in the bend table 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BendID", "Bend ID"
           "BendName", "Bend Name"
           "BendRadius", "Bend Radius"
           "BendAngle", "Bend Angle"
           "BendDirection", "Bend Direction"
           "IncludedAngle", "Included Angle"
        """
        BendID = 0  # BendTableSettingsBuilderColumnTypeMemberType
        BendName = 1  # BendTableSettingsBuilderColumnTypeMemberType
        BendRadius = 2  # BendTableSettingsBuilderColumnTypeMemberType
        BendAngle = 3  # BendTableSettingsBuilderColumnTypeMemberType
        BendDirection = 4  # BendTableSettingsBuilderColumnTypeMemberType
        IncludedAngle = 5  # BendTableSettingsBuilderColumnTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetColumnOrder(self) -> 'list[BendTableSettingsBuilderColumnType]':
        """
        Returns the order of the columns in the bend table  
        
        Signature ``GetColumnOrder()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.BendTableSettingsBuilderColumnType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetColumnOrder(self, columnOrder: 'list[BendTableSettingsBuilderColumnType]') -> None:
        """
        Sets the order of the columns in the bend table 
        
        Signature ``SetColumnOrder(columnOrder)`` 
        
        :param columnOrder: 
        :type columnOrder: list of :py:class:`NXOpen.Annotations.BendTableSettingsBuilderColumnType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AutomaticUpdate: bool = ...
    """
    Returns or sets  the automatic update option
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticUpdate`` 
    
    :param automaticUpdate: 
    :type automaticUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SortColumn: BendTableSettingsBuilderColumnType = ...
    """
    Returns or sets  the column that is used to sort the bend table
    
    <hr>
    
    Getter Method
    
    Signature ``SortColumn`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BendTableSettingsBuilderColumnType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``SortColumn`` 
    
    :param sortColumn: 
    :type sortColumn: :py:class:`NXOpen.Annotations.BendTableSettingsBuilderColumnType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SortOnUpdate: bool = ...
    """
    Returns or sets  the sort on update option
    
    <hr>
    
    Getter Method
    
    Signature ``SortOnUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``SortOnUpdate`` 
    
    :param sortOnUpdate: 
    :type sortOnUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BendTableSettingsBuilder = ...  # unknown typename


class SupplementarySymbolMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SupplementarySymbol():
    """
    Specifies the supplementary weld symbol  
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Specifies no supplementary weld symbol"
       "Convex", "Specifies convex supplementary weld symbol"
       "Flush", "Specifies flush supplementary weld symbol"
       "Concave", "Specifies concave supplementary weld symbol"
       "BlendedToes", "Specifies blended toes supplementary weld symbol"
       "BackingStripPermanent", "Specifies backing strip permanent supplementary weld symbol"
       "BackingStripRemovable", "Specifies backing strip removable supplementary weld symbol"
       "MeltThrough", "Specifies melt through supplementary weld symbol"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # SupplementarySymbolMemberType
    Convex = 1  # SupplementarySymbolMemberType
    Flush = 2  # SupplementarySymbolMemberType
    Concave = 3  # SupplementarySymbolMemberType
    BlendedToes = 4  # SupplementarySymbolMemberType
    BackingStripPermanent = 5  # SupplementarySymbolMemberType
    BackingStripRemovable = 6  # SupplementarySymbolMemberType
    MeltThrough = 7  # SupplementarySymbolMemberType
    Last = 8  # SupplementarySymbolMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssociateDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.AssociateDimensionBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateAssociateDimensionBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Associativity1: AssociativityBuilder = ...
    """
    Returns  the first associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``Associativity1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociativityBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Associativity2: AssociativityBuilder = ...
    """
    Returns  the second associativity 
    
    <hr>
    
    Getter Method
    
    Signature ``Associativity2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociativityBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: AssociateDimensionBuilder = ...  # unknown typename


class PmiWaveLinkBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.Pmi` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiWaveCollection.CreatePmiWaveLinkBuilder`
    
    .. versionadded:: NX8.0.0
    """
    GeometryTypeToWAVELink: int = ...
    """
    Returns or sets  the associated geometry type to WAVE link 
    
    <hr>
    
    Getter Method
    
    Signature ``GeometryTypeToWAVELink`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``GeometryTypeToWAVELink`` 
    
    :param geometryType: 
    :type geometryType: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SelectedPMI: SelectAnnotationList = ...
    """
    Returns  the list of selected PMI to be WAVE linked 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedPMI`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectAnnotationList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SourcePart: NXOpen.TaggedObject = ...
    """
    Returns or sets  the source part for the WAVE link 
    
    <hr>
    
    Getter Method
    
    Signature ``SourcePart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``SourcePart`` 
    
    :param sourcePart: 
    :type sourcePart: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    TargetPart: NXOpen.TaggedObject = ...
    """
    Returns or sets  the target part for the WAVE link 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``TargetPart`` 
    
    :param targetPart: 
    :type targetPart: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: PmiWaveLinkBuilder = ...  # unknown typename


class Lettering():
    """
    Specifies lettering data .  
    
    Constructor: 
    NXOpen.Annotations.Lettering()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Size: float = ...
    """
    Height of a character 
    <hr>
    
    Field Value
    Type:float
    """
    CharacterSpaceFactor: float = ...
    """
    Multiplier applied to font's standard character spacing 
    <hr>
    
    Field Value
    Type:float
    """
    AspectRatio: float = ...
    """
    Aspect ratio for a character 
    <hr>
    
    Field Value
    Type:float
    """
    LineSpaceFactor: float = ...
    """
    Multiplier applied to font's standard line spacing 
    <hr>
    
    Field Value
    Type:float
    """
    Cfw: TextCfw = ...
    """
    Color, font, and width for lettering 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Annotations.TextCfw`
    """
    Italic: bool = ...
    """
    italicized text for standard font text 
    <hr>
    
    Field Value
    Type:bool
    """
    SymbolAspectRatio: float = ...
    """
    Symbol  aspect ratio (this only applies to symbols when using standard fonts)
    This value controls the aspect ratio of text control sequences such as the 
    diameter symbol (represented by the &#x3C;O&#x3E; text control sequence), the 
    counterbore symbol (represented by the &#x3C;&#x23;C&#x3E; text control sequence), the 
    degree symbol (represented by the &#x3C;&#x24;s&#x3E; text control sequence), the true 
    position symbol (represented by the &#x3C;&#x26;10&#x3E; text control sequence), etc.  
    
    This value cannot be negative. The default value is zero. A zero value indicates that the
    aspect ratio for a character will be used for the symbol aspect ratio. 
    <hr>
    
    Field Value
    Type:float
    """


class DimensionMeasurementBuilderMeasurementMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DimensionMeasurementBuilderMeasurementMethod():
    """
    measurement method for the dimensions 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inferred", "Inferred measurement direction (UI Only)"
       "Horizontal", "Horizontal measurement direction"
       "Vertical", "Vertical measurement direction"
       "PointToPoint", "Point to point measurement direction"
       "Perpendicular", "Perpendicular measurement direction"
       "Cylindrical", "Linear measurement method representing a diameter"
       "Angular", "Angular measurement type"
       "Radial", "Radial measurement type"
       "Diametral", "Diametral measurement type"
       "HoleCallout", "Hole Callout based measurement"
    """
    Inferred = 0  # DimensionMeasurementBuilderMeasurementMethodMemberType
    Horizontal = 1  # DimensionMeasurementBuilderMeasurementMethodMemberType
    Vertical = 2  # DimensionMeasurementBuilderMeasurementMethodMemberType
    PointToPoint = 3  # DimensionMeasurementBuilderMeasurementMethodMemberType
    Perpendicular = 4  # DimensionMeasurementBuilderMeasurementMethodMemberType
    Cylindrical = 5  # DimensionMeasurementBuilderMeasurementMethodMemberType
    Angular = 6  # DimensionMeasurementBuilderMeasurementMethodMemberType
    Radial = 7  # DimensionMeasurementBuilderMeasurementMethodMemberType
    Diametral = 8  # DimensionMeasurementBuilderMeasurementMethodMemberType
    HoleCallout = 9  # DimensionMeasurementBuilderMeasurementMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DimensionMeasurementBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DimensionMeasurementBuilder`
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class MeasurementMethod():
        """
        measurement method for the dimensions 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inferred", "Inferred measurement direction (UI Only)"
           "Horizontal", "Horizontal measurement direction"
           "Vertical", "Vertical measurement direction"
           "PointToPoint", "Point to point measurement direction"
           "Perpendicular", "Perpendicular measurement direction"
           "Cylindrical", "Linear measurement method representing a diameter"
           "Angular", "Angular measurement type"
           "Radial", "Radial measurement type"
           "Diametral", "Diametral measurement type"
           "HoleCallout", "Hole Callout based measurement"
        """
        Inferred = 0  # DimensionMeasurementBuilderMeasurementMethodMemberType
        Horizontal = 1  # DimensionMeasurementBuilderMeasurementMethodMemberType
        Vertical = 2  # DimensionMeasurementBuilderMeasurementMethodMemberType
        PointToPoint = 3  # DimensionMeasurementBuilderMeasurementMethodMemberType
        Perpendicular = 4  # DimensionMeasurementBuilderMeasurementMethodMemberType
        Cylindrical = 5  # DimensionMeasurementBuilderMeasurementMethodMemberType
        Angular = 6  # DimensionMeasurementBuilderMeasurementMethodMemberType
        Radial = 7  # DimensionMeasurementBuilderMeasurementMethodMemberType
        Diametral = 8  # DimensionMeasurementBuilderMeasurementMethodMemberType
        HoleCallout = 9  # DimensionMeasurementBuilderMeasurementMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the measurement direction when using :py:class:`NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod.PointToPoint <NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod>`  (optional) 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    DirectionView: NXOpen.View = ...
    """
    Returns or sets  the measurement direction view when using :py:class:`NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod.PointToPoint <NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod>`  (optional) 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionView`` 
    
    :param directionView: 
    :type directionView: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    Method: DimensionMeasurementBuilderMeasurementMethod = ...
    """
    Returns or sets  the measurement method for the size of the dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    PartOccurrence: NXOpen.Assemblies.Component = ...
    """
    Returns or sets  the measurement part occurrence 
    
    <hr>
    
    Getter Method
    
    Signature ``PartOccurrence`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.Component` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartOccurrence`` 
    
    :param partOccurrence: 
    :type partOccurrence: :py:class:`NXOpen.Assemblies.Component` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    SecondaryCalloutActive: bool = ...
    """
    Returns or sets  the activation of hole callout secondary dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryCalloutActive`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryCalloutActive`` 
    
    :param secondaryCalloutActive: 
    :type secondaryCalloutActive: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING")
    """
    Null: DimensionMeasurementBuilder = ...  # unknown typename


class SelectTableSectionList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: TableSection) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Annotations.TableSection` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[TableSection]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Annotations.TableSection` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: TableSection, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.TableSection` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TableSection, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TableSection, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.TableSection` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.TableSection` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: TableSection, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.TableSection` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: TableSection) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.TableSection` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: TableSection, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.TableSection` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TableSection, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TableSection, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.TableSection` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.TableSection` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[TableSection]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Annotations.TableSection` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: TableSection) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Annotations.TableSection` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[TableSection]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Annotations.TableSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[TableSection]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Annotations.TableSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTableSectionList = ...  # unknown typename


class PmiManager():
    """
    Represents an object that manages PMI objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    """
    
    def CopyObjects(self, inputObjects: 'list[Pmi]') -> 'list[Pmi]':
        """
        Creates copies of input PMI objects in the part.  
        
        Only PMI objects which can be copied in the NX user interface will be copied.
        
        Client must perform update :py:meth:`NXOpen.Update.DoUpdate` after calling 
        this method.
        
        Signature ``CopyObjects(inputObjects)`` 
        
        :param inputObjects:  PMI objects to be copied  
        :type inputObjects: list of :py:class:`NXOpen.Annotations.Pmi` 
        :returns:  Copies of PMI objects  
        :rtype: list of :py:class:`NXOpen.Annotations.Pmi` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CopyDisplayInstanceObjects(self, inputObjects: 'list[Annotation]', view: NXOpen.View) -> 'list[Annotation]':
        """
        Creates copies of input PMI Display Instance objects in the part.  
        
        Only PMI Display Instance objects which can be copied in the NX user interface
        will be copied.
        
        Client must perform update :py:meth:`NXOpen.Update.DoUpdate`()
        after calling this method.
        
        Signature ``CopyDisplayInstanceObjects(inputObjects, view)`` 
        
        :param inputObjects:  PMI Display Instance objects to be copied  
        :type inputObjects: list of :py:class:`NXOpen.Annotations.Annotation` 
        :param view:  View in which PMI Display Instance are copied.  
        :type view: :py:class:`NXOpen.View` 
        :returns:  Copies of PMI Display Instance objects  
        :rtype: list of :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CutDisplayInstanceObjects(self, inputObjects: 'list[Annotation]', cutViews: 'list[NXOpen.View]', viewOfPaste: NXOpen.View) -> None:
        """
        Cuts the input PMI Display Instance objects in the part.  
        
        Cut operation makes the PMI
        Display Instance object invisible in the view of cut and makes it visible in 
        the view of paste. Only PMI Display Instance objects which can be cut in the NX user
        interface will be copied.
        
        Client must perform update :py:meth:`NXOpen.Update.DoUpdate`() after calling this 
        method.
        
        Signature ``CutDisplayInstanceObjects(inputObjects, cutViews, viewOfPaste)`` 
        
        :param inputObjects:  PMI Display Instance objects to be cut  
        :type inputObjects: list of :py:class:`NXOpen.Annotations.Annotation` 
        :param cutViews:  List of cut views. Each PMI Display Instance                                                              object is cut from the corresponding view                                                               in the list.                                                                
        :type cutViews: list of :py:class:`NXOpen.View` 
        :param viewOfPaste:  View in which PMI Display Instances are pasted.  
        :type viewOfPaste: :py:class:`NXOpen.View` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def RestoreUnpastedObjects(self) -> None:
        """
        Restores the unpasted PMI objects in the part.  
        
        This method is used by NX user interface to restore PMI objects that
        were cut but not pasted. If called by an automation program, this
        method can cause unexpected results.
        
        Signature ``RestoreUnpastedObjects()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def IsInheritedPmi(self, object: Annotation) -> bool:
        """
        The flag indicating whether the annotation is an inherited PMI on the drawing 
        sheet/view.  
        
        Inherited PMI is the associative copy of the PMI display 
        instance in modeling.  
        
        Signature ``IsInheritedPmi(object)`` 
        
        :param object:  Annotation to examine  
        :type object: :py:class:`NXOpen.Annotations.Annotation` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetInheritParent(self, inheritedPmi: Annotation) -> Annotation:
        """
        Returns the inherited PMI parent.  
        
        The parent is the PMI Display Instance in modeling.  
        
        Signature ``GetInheritParent(inheritedPmi)`` 
        
        :param inheritedPmi:  Inherited PMI  
        :type inheritedPmi: :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  Parent PMI Display Instance  
        :rtype: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDisplayInstanceParent(self, displayInstance: Annotation) -> Pmi:
        """
        Returns the PMI Display Instance parent.  
        
        The parent is the PMI Object.  
        
        Signature ``GetDisplayInstanceParent(displayInstance)`` 
        
        :param displayInstance:  PMI Display Instance  
        :type displayInstance: :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  Parent PMI object  
        :rtype: :py:class:`NXOpen.Annotations.Pmi` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateArbitraryAreaSeedBuilder(self) -> ArbitraryAreaSeedBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder`  
        
        Signature ``CreateArbitraryAreaSeedBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteReplaceAnnotation(self, oldAnnotation: Annotation, newAnnotation: Annotation) -> None:
        """
        Deletes or replaces one annotation with another.  
        
        This will adjust the requirements ID of the annotation if one annotation replaces
        another. This method may be used in NX generated automation programs but it is not
        intended to be used in a customer  written automation program.
        
        Signature ``DeleteReplaceAnnotation(oldAnnotation, newAnnotation)`` 
        
        :param oldAnnotation:  :py:class:`NXOpen.Annotations.Annotation` Annotation or Dimension Set to be deleted  
        :type oldAnnotation: :py:class:`NXOpen.Annotations.Annotation` 
        :param newAnnotation:  :py:class:`NXOpen.Annotations.Annotation` to replace the deleted annootation, can be NULL  
        :type newAnnotation: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Resize(self) -> None:
        """
        Resizes all PMI symbols displayed in the active view
        
        Signature ``Resize()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def ResetSize(self) -> None:
        """
        Resets the size of all the PMI displayed in the part.  
        
        This will restore the size of the PMI to the part default.
        
        Signature ``ResetSize()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateExplicitOrderBuilder(self) -> PMIExplicitOrderBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PMIExplicitOrderBuilder`  
        
        Signature ``CreateExplicitOrderBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PMIExplicitOrderBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ApplyModelViewOrder(self, savedOrderName: str) -> None:
        """
        Applies a saved explicit order
        
        Signature ``ApplyModelViewOrder(savedOrderName)`` 
        
        :param savedOrderName: 
        :type savedOrderName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def SaveModelViewOrder(self, orderList: 'list[str]', saveName: str) -> None:
        """
        Saves an explicit order defined by the user 
        
        Signature ``SaveModelViewOrder(orderList, saveName)`` 
        
        :param orderList: 
        :type orderList: list of str 
        :param saveName: 
        :type saveName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def IsEffectivityFiltered(self, object: Pmi) -> bool:
        """
        The flag indicates whether the PMI is an effectivity filtered PMI 
        because of assembly component configuration from managed environment  
        
        Signature ``IsEffectivityFiltered(object)`` 
        
        :param object:  PMI object to examine  
        :type object: :py:class:`NXOpen.Annotations.Pmi` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.5.1
        
        License requirements: None.
        """
        ...
    
    
    def CreateSuppressPmibuilder(self) -> SuppressPMIBuilder:
        """
        Creates a :py:class:`Annotations.SuppressPMIBuilder`  
        
        Signature ``CreateSuppressPmibuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SuppressPMIBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    Pmis: PmiCollection = ...
    """
    Pmi collection 
    
    Signature ``Pmis`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiCollection`
    """
    PmiAttributes: PmiAttributeCollection = ...
    """
    PmiAttribute collection 
    
    Signature ``PmiAttributes`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiAttributeCollection`
    """
    PmiRegions: PmiRegionCollection = ...
    """
    Region collection 
    
    Signature ``PmiRegions`` 
    
    .. versionadded:: NX6.0.2
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiRegionCollection`
    """
    SearchModelViews: SearchModelViewCollection = ...
    """
    PMI search view collection 
    
    Signature ``SearchModelViews`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewCollection`
    """
    PmiLightweightSections: PmiLightweightSectionCollection = ...
    """
    Lightweight Section View collection 
    
    Signature ``PmiLightweightSections`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiLightweightSectionCollection`
    """
    PmiWave: PmiWaveCollection = ...
    """
    WAVE collection 
    
    Signature ``PmiWave`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiWaveCollection`
    """


class CutSheetBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Builder for Formboard cut sheet functionality used in formboard.  
    
    This class queries and sets settings specific to formboard cut sheet.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AutoUpdate: bool = ...
    """
    Returns or sets  the options specifies whether annotation automatically updates.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutoUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoUpdate`` 
    
    :param autoUpdate: 
    :type autoUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    FlattenHierarchy: bool = ...
    """
    Returns or sets  the options specifies whether to flatten hierarchy.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlattenHierarchy`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlattenHierarchy`` 
    
    :param flattenHierarchy: 
    :type flattenHierarchy: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: CutSheetBuilder = ...  # unknown typename


class ProcessSpecification(PmiAttribute):
    """
    Represents a Process Specification   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.ProcessSpecificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: ProcessSpecification = ...  # unknown typename


class SelectBaseCustomSymbolList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: BaseCustomSymbol) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[BaseCustomSymbol]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: BaseCustomSymbol, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: BaseCustomSymbol, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: BaseCustomSymbol, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: BaseCustomSymbol, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: BaseCustomSymbol) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: BaseCustomSymbol, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: BaseCustomSymbol, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: BaseCustomSymbol, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[BaseCustomSymbol]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: BaseCustomSymbol) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[BaseCustomSymbol]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[BaseCustomSymbol]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectBaseCustomSymbolList = ...  # unknown typename


class BaseCenterMark(Centerline):
    """
    Represents a base center mark class   
    
    This is an abstract class.
    
    .. versionadded:: NX7.5.0
    """
    Null: BaseCenterMark = ...  # unknown typename


class CenterMark(BaseCenterMark):
    """
    Represents a center mark class   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.CenterMarkBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CenterMark = ...  # unknown typename


class PartSymbolFolderBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PartSymbolFolderBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PartSymbolFolderCollection.CreatePartSymbolFolderBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetFolderName(self) -> str:
        """
        Returns the folder name 
        
        Signature ``GetFolderName()`` 
        
        :returns:  folder name 
        :rtype: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFolderName(self, folderName: str) -> None:
        """
        Sets folder name provided current folder is not root folder 
        
        Signature ``SetFolderName(folderName)`` 
        
        :param folderName:  folder name 
        :type folderName: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetCurrentFolder(self) -> PartSymbolFolder:
        """
        Returns current folder  
        
        Signature ``GetCurrentFolder()`` 
        
        :returns:  current folder 
        :rtype: :py:class:`NXOpen.Annotations.PartSymbolFolder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParent(self) -> PartSymbolFolder:
        """
        Returns parent of current folder  provided current folder is not root folder  
        
        Signature ``GetParent()`` 
        
        :returns:  parent part symbol folder 
        :rtype: :py:class:`NXOpen.Annotations.PartSymbolFolder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetParent(self, parentfolder: PartSymbolFolder) -> None:
        """
        Sets parent of current folder  provided current folder is not root folder 
        
        Signature ``SetParent(parentfolder)`` 
        
        :param parentfolder:  parent part symbol folder 
        :type parentfolder: :py:class:`NXOpen.Annotations.PartSymbolFolder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetRootFolder(self) -> PartSymbolFolder:
        """
        Get the root part symbol folder  
        
        Signature ``GetRootFolder()`` 
        
        :returns:  root part symbol folder 
        :rtype: :py:class:`NXOpen.Annotations.PartSymbolFolder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def IsRootFolder(self) -> bool:
        """
        Checks whether the given folder is root folder or not  
        
        Signature ``IsRootFolder()`` 
        
        :returns:   returns true if root folder  
        :rtype: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetChildren(self) -> 'list[PartSymbolFolder]':
        """
        Returns children of current folder  
        
        Signature ``GetChildren()`` 
        
        :returns:   array of sub folders 
        :rtype: list of :py:class:`NXOpen.Annotations.PartSymbolFolder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFolderCount(self) -> int:
        """
        Returns number of child folders of current folder  
        
        Signature ``GetFolderCount()`` 
        
        :returns:   number of child folders 
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPartSymbolCount(self) -> int:
        """
        Returns number of part symbols of current folder  
        
        Signature ``GetPartSymbolCount()`` 
        
        :returns:   number of part symbols 
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPartSymbols(self) -> 'list[MasterSymbol]':
        """
        Returns part symbols of current folder  
        
        Signature ``GetPartSymbols()`` 
        
        :returns:   array of part symbols 
        :rtype: list of :py:class:`NXOpen.Annotations.MasterSymbol` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Null: PartSymbolFolderBuilder = ...  # unknown typename


class BaseCustomSymbol(DraftingAid, IPmi):
    """
    Represents a base custom symbol   
    
    This is an abstract class and cannot be directly instantiated
    
    .. versionadded:: NX4.0.0
    """
    
    def GetSymbolData(self) -> CustomSymbolData:
        """
        Returns the custom symbol data  
        
        Signature ``GetSymbolData()`` 
        
        :returns:  Custom symbol data  
        :rtype: :py:class:`NXOpen.Annotations.CustomSymbolData` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           Use :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder` for Drafting Custom Symbol and :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder` for PMI Custom Symbol objects.
        
        License requirements: None.
        """
        ...
    
    
    def SetSymbolData(self, data: CustomSymbolData) -> None:
        """
        Sets the custom symbol data.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetSymbolData(data)`` 
        
        :param data:  New custom symbol data  
        :type data: :py:class:`NXOpen.Annotations.CustomSymbolData` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           Use :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder` for Drafting Custom Symbol and :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder` for PMI Custom Symbol objects.
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def FlipSymbol(self, flipOption: FlipOption) -> None:
        """
        Flips the custom symbol horizontally/vertically.  
        
        This is only available when editing. This option is unavailable for symbols with leaders.
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``FlipSymbol(flipOption)`` 
        
        :param flipOption:  New flip option  
        :type flipOption: :py:class:`NXOpen.Annotations.FlipOption` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def UpdateSymbolGeometry(self, origin: NXOpen.Point3d, scale: float, angle: float) -> None:
        """
        Sets the origin, scale and angle for a custom symbol instance
        and updates the leaders (if any) as needed.  
        
        Signature ``UpdateSymbolGeometry(origin, scale, angle)`` 
        
        :param origin:  New origin  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param scale:  New scale   
        :type scale: float 
        :param angle:  New angle   
        :type angle: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def AddLeader(self, leader: LeaderBundle) -> None:
        """
        Adds leaders to the custom symbol.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``AddLeader(leader)`` 
        
        :param leader:  Specifies the leaders to add  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def RemoveLeader(self, nthLeader: int) -> None:
        """
        Removes leader from the custom symbol.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``RemoveLeader(nthLeader)`` 
        
        :param nthLeader:  Specifies which leader to remove  
        :type nthLeader: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SynchronizeSymbol(self) -> None:
        """
        Synchronize associative custom symbol.  
        
        Signature ``SynchronizeSymbol()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ReplaceSymbol(self, name: str, path: str, isPartSymbol: bool) -> None:
        """
        Replace custom symbol with the given master symbol name and path.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``ReplaceSymbol(name, path, isPartSymbol)`` 
        
        :param name:  Master symbol name  
        :type name: str 
        :param path:  Master symbol path  
        :type path: str 
        :param isPartSymbol:  true if part symbol else false  
        :type isPartSymbol: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetAnchor(self) -> NXOpen.Point:
        """
        Returns the master custom symbol anchor point  
        
        Signature ``GetAnchor()`` 
        
        :returns:  Custom Symbol Anchor Point  
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAnchor(self, anchorPoint: NXOpen.Point) -> None:
        """
        Sets the master custom symbol anchor point.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAnchor(anchorPoint)`` 
        
        :param anchorPoint:  Custom Symbol Anchor Point  
        :type anchorPoint: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateFromRule(self) -> None:
        """
        Updates the specified symbol from the KF rule.  
        
        The changes are not applied till an update is performed by 
        calling :py:meth:`Update.DoUpdate` .
        
        Signature ``UpdateFromRule()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    SymbolName: str = ...
    """
    Returns  the symbol name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolName`` 
    
    :returns:  Custom symbol name  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseCustomSymbol = ...  # unknown typename


class CustomSymbol(BaseCustomSymbol):
    """
    Represents a custom symbol   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: CustomSymbol = ...  # unknown typename


class ZeroToleranceDisplayStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ZeroToleranceDisplayStyle():
    """
    Specifies the 0 tolerance display style 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BasedOnUnits", "Zero tolerance display is tied to display units"
       "AsZero", "Always display zero tolerance as 0"
       "OmittedAndInlined", "Omit the display of zero tolerance and inline the remaining tolerance"
       "Omitted", "Omit the display of zero tolerance and maintain position of remaining tolerance"
    """
    BasedOnUnits = 0  # ZeroToleranceDisplayStyleMemberType
    AsZero = 1  # ZeroToleranceDisplayStyleMemberType
    OmittedAndInlined = 2  # ZeroToleranceDisplayStyleMemberType
    Omitted = 3  # ZeroToleranceDisplayStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AngularDimensionFormatMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AngularDimensionFormat():
    """
    Specifies the angular dimension format 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FractionalDegrees", "Specifies fractional degrees format"
       "WholeDegrees", "Specifies whole degrees format"
       "DegreesMinutes", "Specifies degrees minutes format"
       "DegreesMinutesSeconds", "Specifies degrees minutes seconds format"
       "Last", "Last enum value. Should not be used."
    """
    FractionalDegrees = 0  # AngularDimensionFormatMemberType
    WholeDegrees = 1  # AngularDimensionFormatMemberType
    DegreesMinutes = 2  # AngularDimensionFormatMemberType
    DegreesMinutesSeconds = 3  # AngularDimensionFormatMemberType
    Last = 4  # AngularDimensionFormatMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiAttributeValueMultipleString(PmiAttributeValue):
    """
    Represents a PMI Attribute MultipleString Value   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiAttributeValueMultipleStringBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttributeValueMultipleString = ...  # unknown typename


class OffsetCenterPointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.OffsetCenterPoint` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateOffsetCenterPointBuilder(self, centerPoint: OffsetCenterPoint) -> OffsetCenterPointBuilder:
        """
        Creates the OffsetCenterPointBuilder  
        
        Signature ``CreateOffsetCenterPointBuilder(centerPoint)`` 
        
        :param centerPoint:  :py:class:`NXOpen.Annotations.OffsetCenterPoint` to be edited, if None then create a new one  
        :type centerPoint: :py:class:`NXOpen.Annotations.OffsetCenterPoint` 
        :returns:  OffsetCenterPointCenterlineBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.OffsetCenterPointBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> OffsetCenterPoint:
        """
        Finds the offset center point with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the offset center point to be found  
        :type journalIdentifier: str 
        :returns:  OffsetCenterPoint with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.OffsetCenterPoint` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class RevisionBusinessModifier(BusinessModifier):
    """
    Represents business modifier that applies a revision (in the string format such as -A1) to 
    a PMI.  
    
    Plese see ug_revision_busmod.dfa for attribute details. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.RevisionBusinessModifierBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: RevisionBusinessModifier = ...  # unknown typename


class IArbitraryTarget(NXOpen.INXObject):
    """
    Represents interface class for arbitrary datum target areas   
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class DraftingArbitraryTarget(DraftingDatumTarget, IArbitraryTarget):
    """
    Represents a drafting arbitrary datum target.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    UpperText: str = ...
    """
    Returns or sets  the target upper text.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperText`` 
    
    :returns:  Upper text  
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperText`` 
    
    :param upperText:  Upper text  
    :type upperText: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: DraftingArbitraryTarget = ...  # unknown typename


class PmiFoldedRadiusDimension(BaseFoldedRadiusDimension):
    """
    Represents a PMI folded radius dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiRadialDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiFoldedRadiusDimension = ...  # unknown typename


class CommonWorkflowBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.CommonWorkflowBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DynamicAlignmentInGlobalSelection: bool = ...
    """
    Returns or sets  the dynamic alignment in global selection determines whether drafting annotations and dimensions will automatically 
    align or not when moving them in Global Selection.  
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicAlignmentInGlobalSelection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicAlignmentInGlobalSelection`` 
    
    :param dynamicAlignmentInGlobalSelection: 
    :type dynamicAlignmentInGlobalSelection: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: CommonWorkflowBuilder = ...  # unknown typename


class AngularSuppressZerosMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AngularSuppressZeros():
    """
    Specifies the suppress zeros option for the angular dimension 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Specifies no zeros suppressed"
       "Leading", "Specifies leading zeros suppressed"
       "Any", "Specifies any zeros suppressed"
       "Trailing", "Specifies trailing zeros suppressed"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # AngularSuppressZerosMemberType
    Leading = 1  # AngularSuppressZerosMemberType
    Any = 2  # AngularSuppressZerosMemberType
    Trailing = 3  # AngularSuppressZerosMemberType
    Last = 4  # AngularSuppressZerosMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RevisionBusinessModifierBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.RevisionBusinessModifier` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.BusinessModifierCollection.CreateRevisionBusinessModifierBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: RevisionBusinessModifierBuilder = ...  # unknown typename


class MasterSymbol(NXOpen.NXObject):
    """
    Represents a part symbol folder  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.MasterSymbolBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: MasterSymbol = ...  # unknown typename


class TableCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Table` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> Table:
        """
        Finds the table with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the table to be found  
        :type journalIdentifier: str 
        :returns:  table with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.Table` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class DatumTargetCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.DatumTarget` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def NewTargetData(self) -> DatumTargetData:
        """
        Creates a new DatumTargetData object  
        
        Signature ``NewTargetData()`` 
        
        :returns:  New DatumTargetData  
        :rtype: :py:class:`NXOpen.Annotations.DatumTargetData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewRectangularTargetData(self) -> RectangularTargetData:
        """
        Creates a new RectangularTargetData object  
        
        Signature ``NewRectangularTargetData()`` 
        
        :returns:  New RectangularTargetData  
        :rtype: :py:class:`NXOpen.Annotations.RectangularTargetData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewCircularTargetData(self) -> CircularTargetData:
        """
        Creates a new CircularTargetData object  
        
        Signature ``NewCircularTargetData()`` 
        
        :returns:  New CircularTargetData  
        :rtype: :py:class:`NXOpen.Annotations.CircularTargetData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewArbitraryTargetData(self) -> ArbitraryTargetData:
        """
        Creates a new ArbitraryTargetData object  
        
        Signature ``NewArbitraryTargetData()`` 
        
        :returns:  New ArbitraryTargetData  
        :rtype: :py:class:`NXOpen.Annotations.ArbitraryTargetData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def CreatePointTarget(self, targetData: DatumTargetData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> PointTarget:
        """
        Creates a PMI point target  
        
        Signature ``CreatePointTarget(targetData, pmiData, annotationPlane, origin, leader)`` 
        
        :param targetData:  Datum target data  
        :type targetData: :py:class:`NXOpen.Annotations.DatumTargetData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the datum target lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New point target  
        :rtype: :py:class:`NXOpen.Annotations.PointTarget` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    @typing.overload
    def CreatePointTarget(self, targetData: DatumTargetData, origin: NXOpen.Point3d, leader: LeaderBundle) -> DraftingPointTarget:
        """
        Creates a drafting point target  
        
        Signature ``CreatePointTarget(targetData, origin, leader)`` 
        
        :param targetData:  Datum target data  
        :type targetData: :py:class:`NXOpen.Annotations.DatumTargetData` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New point target  
        :rtype: :py:class:`NXOpen.Annotations.DraftingPointTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    @typing.overload
    def CreateLineTarget(self, targetData: DatumTargetData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> LineTarget:
        """
        Creates a PMI line target  
        
        Signature ``CreateLineTarget(targetData, pmiData, annotationPlane, origin, leader)`` 
        
        :param targetData:  Datum target data  
        :type targetData: :py:class:`NXOpen.Annotations.DatumTargetData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the datum target lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New line target  
        :rtype: :py:class:`NXOpen.Annotations.LineTarget` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    @typing.overload
    def CreateLineTarget(self, targetData: DatumTargetData, origin: NXOpen.Point3d, leader: LeaderBundle) -> DraftingLineTarget:
        """
        Creates a drafting line target  
        
        Signature ``CreateLineTarget(targetData, origin, leader)`` 
        
        :param targetData:  Datum target data  
        :type targetData: :py:class:`NXOpen.Annotations.DatumTargetData` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New line target  
        :rtype: :py:class:`NXOpen.Annotations.DraftingLineTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateRectangularTarget(self, targetData: RectangularTargetData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> RectangularTarget:
        """
        Creates a PMI rectangular target  
        
        Signature ``CreateRectangularTarget(targetData, pmiData, annotationPlane, origin, leader)`` 
        
        :param targetData:  Rectangular target data  
        :type targetData: :py:class:`NXOpen.Annotations.RectangularTargetData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the datum target lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New rectangular target  
        :rtype: :py:class:`NXOpen.Annotations.RectangularTarget` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateCircularTarget(self, targetData: CircularTargetData, data: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> CircularTarget:
        """
        Creates a PMI circular target  
        
        Signature ``CreateCircularTarget(targetData, data, annotationPlane, origin, leader)`` 
        
        :param targetData:  Circular target data  
        :type targetData: :py:class:`NXOpen.Annotations.CircularTargetData` 
        :param data:  PMI data  
        :type data: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the datum target lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New circular target  
        :rtype: :py:class:`NXOpen.Annotations.CircularTarget` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    @typing.overload
    def CreateArbitraryTarget(self, targetData: ArbitraryTargetData, data: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> ArbitraryTarget:
        """
        Creates a PMI arbitrary target  
        
        Signature ``CreateArbitraryTarget(targetData, data, annotationPlane, origin, leader)`` 
        
        :param targetData:  Arbitrary target data  
        :type targetData: :py:class:`NXOpen.Annotations.ArbitraryTargetData` 
        :param data:  PMI data  
        :type data: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the datum target lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New arbitrary target  
        :rtype: :py:class:`NXOpen.Annotations.ArbitraryTarget` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    @typing.overload
    def CreateArbitraryTarget(self, targetData: ArbitraryTargetData, origin: NXOpen.Point3d, leader: LeaderBundle) -> DraftingArbitraryTarget:
        """
        Creates a drafting arbitrary target  
        
        Signature ``CreateArbitraryTarget(targetData, origin, leader)`` 
        
        :param targetData:  Arbitrary target data  
        :type targetData: :py:class:`NXOpen.Annotations.ArbitraryTargetData` 
        :param origin:  Origin for the datum target  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the datum target  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New arbitrary target  
        :rtype: :py:class:`NXOpen.Annotations.DraftingArbitraryTarget` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class Associativity(NXOpen.TransientObject):
    """
    Represents an associativity object.  
    
    The associativity object describes
    how an annotation is attached to geometry. The associativities are specified 
    at indices starting with 1. In most cases, the index corresponds to the order in
    which objects are selected to create an annotation. So, the associativity at 
    index 1 specifies first object selectd, the associativity at index 2 specifies second 
    object selected and so on...
    
    Dimensions can only have associativities at indices {1, 2, 3}. Please note the following
    special cases for the dimension associativities -
    
    1. For ordinate dimensions :py:class:`NXOpen.Annotations.OrdinateDimension`, the 
    associativity at index 1 stores the ordinate origin data.
    
    2. The associativity at index 3 stores the following -
    
    A. Fold location for the folded radius dimension
    
    B. Margin data for the ordinate dimensions
    
    3. Set the associativities at index 1 when creating chain and baseline dimensions.
    The associativity at index 2 and 3 are ignored.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.NewAssociativity`
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    Angle: float = ...
    """
    Returns or sets  the angle.  
    
    Required for following line option -
    :py:class:`NXOpen.Annotations.AssociativityLineOption.Angle <NXOpen.Annotations.AssociativityLineOption>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns:  Angle in radians  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle:  New angle in radians  
    :type angle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FirstDefinitionPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the first definition point.  
    
    Required for following line options -
    :py:class:`NXOpen.Annotations.AssociativityLineOption.PointVector <NXOpen.Annotations.AssociativityLineOption>` 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstDefinitionPoint`` 
    
    :returns:  Firt definition point in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstDefinitionPoint`` 
    
    :param firstDefinitionPoint:  New first definition point in absolute coordinates  
    :type firstDefinitionPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FirstObject: NXOpen.NXObject = ...
    """
    Returns or sets  the first associativity object 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstObject`` 
    
    :returns:  First associativity object  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstObject`` 
    
    :param object:  New first associativity object  
    :type object: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LineOption: AssociativityLineOption = ...
    """
    Returns or sets  the line option 
    
    <hr>
    
    Getter Method
    
    Signature ``LineOption`` 
    
    :returns:  Line option  
    :rtype: :py:class:`NXOpen.Annotations.AssociativityLineOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineOption`` 
    
    :param lineOption:  New line option  
    :type lineOption: :py:class:`NXOpen.Annotations.AssociativityLineOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ObjectView: NXOpen.View = ...
    """
    Returns or sets  the object view.  
    
    Both the associativity objects must have the same view. 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectView`` 
    
    :returns:  Object view  
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectView`` 
    
    :param objectView:  New object view  
    :type objectView: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    PickPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the pick point 
    
    <hr>
    
    Getter Method
    
    Signature ``PickPoint`` 
    
    :returns:  Pick point in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PickPoint`` 
    
    :param pickPoint:  New pick point in absolute coordinates  
    :type pickPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    PointOption: AssociativityPointOption = ...
    """
    Returns or sets  the point option 
    
    <hr>
    
    Getter Method
    
    Signature ``PointOption`` 
    
    :returns:  Point option  
    :rtype: :py:class:`NXOpen.Annotations.AssociativityPointOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointOption`` 
    
    :param pointOption:  New point option  
    :type pointOption: :py:class:`NXOpen.Annotations.AssociativityPointOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SecondDefinitionPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the second definition point.  
    
    Required for following line options -
    :py:class:`NXOpen.Annotations.AssociativityLineOption.PointVector <NXOpen.Annotations.AssociativityLineOption>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondDefinitionPoint`` 
    
    :returns:  Second definition point in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondDefinitionPoint`` 
    
    :param secondDefinitionPoint:  New second definition point in absolute coordinates  
    :type secondDefinitionPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SecondObject: NXOpen.NXObject = ...
    """
    Returns or sets  the second associativity object, if the annotation is associated to
    an intersection point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondObject`` 
    
    :returns:  Second associativity object  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondObject`` 
    
    :param object2:  New second associativity object  
    :type object2: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class PartsList(Table):
    """
    Represents a Annotations.PartsList. 
    
    This class represents a parts list.
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    def UpdateCalloutgroupForDeleteCallouts(self, calloutSymbols: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Updates Id Symbol callout group on deletion of symbol(s) in the group 
        
        Signature ``UpdateCalloutgroupForDeleteCallouts(calloutSymbols)`` 
        
        :param calloutSymbols:  Array of grouped Id Symbol callouts, None not allowed 
        :type calloutSymbols: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    Null: PartsList = ...  # unknown typename


class ArcComponentArcTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ArcComponentArcType():
    """
    the arc type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Extension", "extension arc"
       "Dimension", "dimension arc"
       "AllAround", "all around"
       "Annotation", "annotation arc"
       "Inspection", "inspection arc"
       "AllOver", "all over"
       "GbDatum", "GB Datum arc"
    """
    Extension = 0  # ArcComponentArcTypeMemberType
    Dimension = 1  # ArcComponentArcTypeMemberType
    AllAround = 2  # ArcComponentArcTypeMemberType
    Annotation = 3  # ArcComponentArcTypeMemberType
    Inspection = 4  # ArcComponentArcTypeMemberType
    AllOver = 5  # ArcComponentArcTypeMemberType
    GbDatum = 6  # ArcComponentArcTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ArcComponent(NXOpen.TransientObject):
    """
    Represents a single arc in an annotation and can be queried
    for information about that arc.  
    
    This information
    includes the arc type, the start angle, the end angle, 
    the radius, and the center point in absolute coordinates. 
    
    .. versionadded:: NX6.0.0
    """
    
    class ArcType():
        """
        the arc type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Extension", "extension arc"
           "Dimension", "dimension arc"
           "AllAround", "all around"
           "Annotation", "annotation arc"
           "Inspection", "inspection arc"
           "AllOver", "all over"
           "GbDatum", "GB Datum arc"
        """
        Extension = 0  # ArcComponentArcTypeMemberType
        Dimension = 1  # ArcComponentArcTypeMemberType
        AllAround = 2  # ArcComponentArcTypeMemberType
        Annotation = 3  # ArcComponentArcTypeMemberType
        Inspection = 4  # ArcComponentArcTypeMemberType
        AllOver = 5  # ArcComponentArcTypeMemberType
        GbDatum = 6  # ArcComponentArcTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Free resources associated with the arc component.  
        
        After this method
        is called, it is illegal to use the object.  In .NET, this method
        is automatically called when the object is deleted by the garbage
        collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    CenterPoint: NXOpen.Point3d = ...
    """
    Returns  the arc center point in absolute coordinates.  
    
    If the annotation is on a drawing, the center point is returned 
    in drawing space. If the annotation is on the model,
    the center point is returned in model space. 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterPoint`` 
    
    :returns:  the arc center point in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EndAngle: float = ...
    """
    Returns  the arc end angle in radians.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndAngle`` 
    
    :returns:  the arc end angle in radians 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Index: int = ...
    """
    Returns  the arc index.  
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  the arc index 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Radius: float = ...
    """
    Returns  the arc radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns:  the arc radius 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StartAngle: float = ...
    """
    Returns  the arc start angle in radians.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartAngle`` 
    
    :returns:  the arc start angle in radians 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: ArcComponentArcType = ...
    """
    Returns  the arc type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  the arc type  
    :rtype: :py:class:`NXOpen.Annotations.ArcComponentArcType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """


class BaseVerticalDimension(Dimension, ILinearTolerance, IPmi, ISlotDimension):
    """
    Represents a horizontal dimension   
    
    Abstract class
    
    .. versionadded:: NX6.0.0
    """
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def IsSlotDimension(self) -> bool:
        """
        Check if the dimension qualifies as a slot dimension.  
        
        Signature ``IsSlotDimension()`` 
        
        :returns:  True if this dimension qualifies as a slot dimension  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ConvertSlotDimensionAssociativity(self) -> bool:
        """
        Convert this dimension's associativity if it is a slot dimension.  
        
        Signature ``ConvertSlotDimensionAssociativity()`` 
        
        :returns:  True if NX can convert this dimension's associativity  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BaseVerticalDimension = ...  # unknown typename


class PmiParallelDimension(BaseParallelDimension):
    """
    Represents a PMI parallel dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiLinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiParallelDimension = ...  # unknown typename


class RadiusDimensionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RadiusDimensionType():
    """
    Specifies the radius dimension type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ToCenter", "Radius dimension to center"
       "NotToCenter", "Radius dimension not to center"
       "Last", "Last enum value. Should not be used."
    """
    ToCenter = 0  # RadiusDimensionTypeMemberType
    NotToCenter = 1  # RadiusDimensionTypeMemberType
    Last = 2  # RadiusDimensionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableColumnBuilderCategoryTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableColumnBuilderCategoryType():
    """
    The options specify the type of column.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "General", " - "
       "Callout", " - "
       "Quantity", " - "
    """
    General = 0  # TableColumnBuilderCategoryTypeMemberType
    Callout = 1  # TableColumnBuilderCategoryTypeMemberType
    Quantity = 2  # TableColumnBuilderCategoryTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableColumnBuilderScopeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableColumnBuilderScopeType():
    """
    The options determine whether to apply settings to all cells or only to cells of new rows.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CellsinNewRows", " - "
       "AllCellsinColumn", " - "
    """
    CellsinNewRows = 0  # TableColumnBuilderScopeTypeMemberType
    AllCellsinColumn = 1  # TableColumnBuilderScopeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableColumnBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TableColumnBuilder`.  
    
    This class queries and sets settings specific to parts list  column when creating or
    editing parts list settings.
    
    .. versionadded:: NX9.0.0
    """
    
    class CategoryType():
        """
        The options specify the type of column.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "General", " - "
           "Callout", " - "
           "Quantity", " - "
        """
        General = 0  # TableColumnBuilderCategoryTypeMemberType
        Callout = 1  # TableColumnBuilderCategoryTypeMemberType
        Quantity = 2  # TableColumnBuilderCategoryTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ScopeType():
        """
        The options determine whether to apply settings to all cells or only to cells of new rows.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CellsinNewRows", " - "
           "AllCellsinColumn", " - "
        """
        CellsinNewRows = 0  # TableColumnBuilderScopeTypeMemberType
        AllCellsinColumn = 1  # TableColumnBuilderScopeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AttributeName: str = ...
    """
    Returns or sets  the attribute name specifies the attribute name for cells in column.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeName`` 
    
    :param attributeName: 
    :type attributeName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Category: TableColumnBuilderCategoryType = ...
    """
    Returns or sets  the category specifies the type of column.  
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableColumnBuilderCategoryType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: :py:class:`NXOpen.Annotations.TableColumnBuilderCategoryType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DefaultText: str = ...
    """
    Returns or sets  the default text specifies the default text set for the column cells.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultText`` 
    
    :param defaultText: 
    :type defaultText: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeNestedAssemblies: bool = ...
    """
    Returns or sets  the include nested assy specified the nested assy setting.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeNestedAssemblies`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeNestedAssemblies`` 
    
    :param includeNestedAssemblies: 
    :type includeNestedAssemblies: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    KeyField: bool = ...
    """
    Returns or sets  the key field specifies whether column is key column.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeyField`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeyField`` 
    
    :param keyField: 
    :type keyField: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ProtectCells: bool = ...
    """
    Returns or sets  the protect cells specifies whether cells of column are protected.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProtectCells`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProtectCells`` 
    
    :param protectCells: 
    :type protectCells: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scope: TableColumnBuilderScopeType = ...
    """
    Returns or sets  the scope enum specifies whether settings are to be applied to all 
    cells of column or only cells of new rows in column.  
    
    <hr>
    
    Getter Method
    
    Signature ``Scope`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableColumnBuilderScopeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scope`` 
    
    :param scope: 
    :type scope: :py:class:`NXOpen.Annotations.TableColumnBuilderScopeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectParentComponent: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the select parent component.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectParentComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: TableColumnBuilder = ...  # unknown typename


class TableSectionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.TableSection` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.TableSectionCollection.CreateTableSectionBuilder`
    
    Default values.
    
    ================  =========================================
    Property          Value
    ================  =========================================
    ColumnWidth       50 (millimeters part), 2 (inches part) 
    ----------------  -----------------------------------------
    NumberOfColumns   5 
    ----------------  -----------------------------------------
    NumberOfRows      5 
    ----------------  -----------------------------------------
    RowHeight         8 (millimeters part), 0.25 (inches part) 
    ================  =========================================
    
    .. versionadded:: NX8.0.0
    """
    ColumnWidth: float = ...
    """
    Returns or sets  the column width 
    
    <hr>
    
    Getter Method
    
    Signature ``ColumnWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColumnWidth`` 
    
    :param columnWidth: 
    :type columnWidth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NumberOfColumns: int = ...
    """
    Returns or sets  the number of columns, input for tabulr note column numbers  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfColumns`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfColumns`` 
    
    :param numberOfColumns: 
    :type numberOfColumns: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    NumberOfRows: int = ...
    """
    Returns or sets  the number of rows 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfRows`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfRows`` 
    
    :param numberOfRows: 
    :type numberOfRows: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin, where the symbol is going to be displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RowHeight: float = ...
    """
    Returns or sets  the row height 
    
    <hr>
    
    Getter Method
    
    Signature ``RowHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RowHeight`` 
    
    :param rowHeight: 
    :type rowHeight: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Style: TableStyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: TableSectionBuilder = ...  # unknown typename


class BaseCenterMarkBuilder(CenterlineBuilder):
    """
    Represents a Base CenterMark Builder for Pmi and Drafting centermark   
    
    This is an abstract class, and cannot be instantiated.
    
    Default values.
    
    ==========================================  ================================================
    Property                                    Value
    ==========================================  ================================================
    Settings.Angle                              0 
    ------------------------------------------  ------------------------------------------------
    Settings.AssociativeAngle.Angle.Value       0 
    ------------------------------------------  ------------------------------------------------
    Settings.AssociativeAngle.Associative       0 
    ------------------------------------------  ------------------------------------------------
    Settings.AssociativeAngle.EvaluationPlane   DrawingSheet 
    ------------------------------------------  ------------------------------------------------
    Settings.Extension                          6.35 (millimeters part), 0.25 (inches part) 
    ------------------------------------------  ------------------------------------------------
    Settings.Gap                                1.5875 (millimeters part), 0.0625 (inches part) 
    ------------------------------------------  ------------------------------------------------
    Settings.IndividualDistance                 0 
    ------------------------------------------  ------------------------------------------------
    Settings.InheritAngle                       0 
    ------------------------------------------  ------------------------------------------------
    Settings.ShowCenterPoint                    0 
    ------------------------------------------  ------------------------------------------------
    Settings.Size                               3.175 (millimeters part), 0.125 (inches part) 
    ------------------------------------------  ------------------------------------------------
    Settings.Width                              Thin 
    ==========================================  ================================================
    
    .. versionadded:: NX7.5.0
    """
    
    def RemoveLocation(self, index: int) -> None:
        """
        Removes location object for a given index from the Select Object List.  
        
        This method is required for the retained centermark case, however the method can be
        used for removing any object from select object list for the CenterMark  
        
        Signature ``RemoveLocation(index)`` 
        
        :param index:  Index of the object in the select object list 
        :type index: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    Locations: NXOpen.SelectNXObjectList = ...
    """
    Returns  the location object 
    
    <hr>
    
    Getter Method
    
    Signature ``Locations`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MultipleCenterMarks: bool = ...
    """
    Returns or sets  the multiple center marks option, applicable only for creation 
    
    <hr>
    
    Getter Method
    
    Signature ``MultipleCenterMarks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MultipleCenterMarks`` 
    
    :param multipleCenterlines: 
    :type multipleCenterlines: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Settings: CenterMarkSettingsBuilder = ...
    """
    Returns  the center mark settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Settings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CenterMarkSettingsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BaseCenterMarkBuilder = ...  # unknown typename


class BaseCustomSymbolBuilderAnnotationPreferencesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseCustomSymbolBuilderAnnotationPreferences():
    """
    Enum for Annotation Preferences This is used by :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.AnnotationPreference` 
    and :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.AnnotationPreference` 
    to set the annotation preferences for a symbol
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UseCurrent", "Current preferences"
       "UseDefinition", "Defined preferences"
    """
    UseCurrent = 0  # BaseCustomSymbolBuilderAnnotationPreferencesMemberType
    UseDefinition = 1  # BaseCustomSymbolBuilderAnnotationPreferencesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseCustomSymbolBuilderGeometryPreferencesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseCustomSymbolBuilderGeometryPreferences():
    """
    Enum for Geometric Preferences This is used by :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.GeometryPreference` 
    and :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.GeometryPreference` 
    to set the geometric preferences for a symbol
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UseCurrent", "Current preferences"
       "UseDefinition", "Defined preferences"
    """
    UseCurrent = 0  # BaseCustomSymbolBuilderGeometryPreferencesMemberType
    UseDefinition = 1  # BaseCustomSymbolBuilderGeometryPreferencesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseCustomSymbolBuilder(NXOpen.Builder):
    """
    Represents a base Builder for Drafting and PMI Custom Symbol   
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX7.5.0
    """
    
    class AnnotationPreferences():
        """
        Enum for Annotation Preferences This is used by :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.AnnotationPreference` 
        and :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.AnnotationPreference` 
        to set the annotation preferences for a symbol
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UseCurrent", "Current preferences"
           "UseDefinition", "Defined preferences"
        """
        UseCurrent = 0  # BaseCustomSymbolBuilderAnnotationPreferencesMemberType
        UseDefinition = 1  # BaseCustomSymbolBuilderAnnotationPreferencesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GeometryPreferences():
        """
        Enum for Geometric Preferences This is used by :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.GeometryPreference` 
        and :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.GeometryPreference` 
        to set the geometric preferences for a symbol
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UseCurrent", "Current preferences"
           "UseDefinition", "Defined preferences"
        """
        UseCurrent = 0  # BaseCustomSymbolBuilderGeometryPreferencesMemberType
        UseDefinition = 1  # BaseCustomSymbolBuilderGeometryPreferencesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetArbitraryNoteTitle(self) -> 'list[str]':
        """
        Returns the arbitrary note value in an array.  
        
        This should be used only after :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.SelectText` is used  
        
        Signature ``GetArbitraryNoteTitle()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArbitraryNoteTitle(self, arbitraryNoteTitle: 'list[str]') -> None:
        """
        Sets the arbitrary note value.  
        
        This should be used only after :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.SelectText` is used 
        
        Signature ``SetArbitraryNoteTitle(arbitraryNoteTitle)`` 
        
        :param arbitraryNoteTitle: 
        :type arbitraryNoteTitle: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SelectSymbol(self, name: str) -> None:
        """
        Selects custom symbol 
        
        Signature ``SelectSymbol(name)`` 
        
        :param name:  Name of symbol  
        :type name: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SelectPartSymbol(self, name: str, path: str) -> None:
        """
        Selects part custom symbol 
        
        Signature ``SelectPartSymbol(name, path)`` 
        
        :param name:  Name of symbol  
        :type name: str 
        :param path:  PartSymbol full Path  
        :type path: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SelectText(self, index: int) -> None:
        """
        Selects the node index of custom symbol text 
        
        Signature ``SelectText(index)`` 
        
        :param index:  index of selected text  
        :type index: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetSymbol(self) -> BaseCustomSymbol:
        """
        Returns the custom symbol  
        
        Signature ``GetSymbol()`` 
        
        :returns:  The custom symbol  
        :rtype: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AnnotationPreference: BaseCustomSymbolBuilderAnnotationPreferences = ...
    """
    Returns or sets  the enum annot pref.  
    
    This is used while creating the object 
    and it is non-editable property 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationPreference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseCustomSymbolBuilderAnnotationPreferences` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnnotationPreference`` 
    
    :param enumAnnotPref: 
    :type enumAnnotPref: :py:class:`NXOpen.Annotations.BaseCustomSymbolBuilderAnnotationPreferences` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ControlledNoteTitle: int = ...
    """
    Returns or sets  the controlled note title 
    
    <hr>
    
    Getter Method
    
    Signature ``ControlledNoteTitle`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ControlledNoteTitle`` 
    
    :param controlledNoteTitle: 
    :type controlledNoteTitle: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    GeometryPreference: BaseCustomSymbolBuilderGeometryPreferences = ...
    """
    Returns or sets  the enum geom pref.  
    
    This is used while creating the object
    and it is non-editable property 
    
    <hr>
    
    Getter Method
    
    Signature ``GeometryPreference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseCustomSymbolBuilderGeometryPreferences` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeometryPreference`` 
    
    :param enumGeomPref: 
    :type enumGeomPref: :py:class:`NXOpen.Annotations.BaseCustomSymbolBuilderGeometryPreferences` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    HorizontalFlip: bool = ...
    """
    Returns or sets  the horizontal flip 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalFlip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalFlip`` 
    
    :param horizontalFlip: 
    :type horizontalFlip: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Integer: int = ...
    """
    Returns or sets  the integer value of selected text 
    
    <hr>
    
    Getter Method
    
    Signature ``Integer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Integer`` 
    
    :param integer: 
    :type integer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    IsPartSymbol: bool = ...
    """
    Returns or sets  the is part symbol.  
    
    This is used while creating the object 
    and it is non-editable property 
    
    <hr>
    
    Getter Method
    
    Signature ``IsPartSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsPartSymbol`` 
    
    :param isPartSymbol: 
    :type isPartSymbol: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LockStatus: bool = ...
    """
    Returns or sets  the get symbol lock property 
    
    <hr>
    
    Getter Method
    
    Signature ``LockStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockStatus`` 
    
    :param lockUpdate: 
    :type lockUpdate: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MasterSymbolName: str = ...
    """
    Returns or sets  the master symbol Name.  
    
    This is used while creating the object
    and it is non-editable property 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterSymbolName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterSymbolName`` 
    
    :param masterSymbolName: 
    :type masterSymbolName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    MasterSymbolPath: str = ...
    """
    Returns or sets  the master symbol path.  
    
    This is used while creating the object 
    and it is non-editable property 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterSymbolPath`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterSymbolPath`` 
    
    :param masterSymbolPath: 
    :type masterSymbolPath: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PartiallyControlledNoteTitle: str = ...
    """
    Returns or sets  the partially controlled note title 
    
    <hr>
    
    Getter Method
    
    Signature ``PartiallyControlledNoteTitle`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartiallyControlledNoteTitle`` 
    
    :param partiallyControlledNoteTitle: 
    :type partiallyControlledNoteTitle: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Real: float = ...
    """
    Returns or sets  the real value of selected text 
    
    <hr>
    
    Getter Method
    
    Signature ``Real`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Real`` 
    
    :param real: 
    :type real: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: NXOpen.Expression = ...
    """
    Returns  the scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SmashSymbol: bool = ...
    """
    Returns or sets  the smash symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``SmashSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmashSymbol`` 
    
    :param smashSymbol: 
    :type smashSymbol: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Style: StyleBuilder = ...
    """
    Returns  the style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Texts: MasterSymbolListItemBuilderList = ...
    """
    Returns  the texts 
    
    <hr>
    
    Getter Method
    
    Signature ``Texts`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilderList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    VerticalFlip: bool = ...
    """
    Returns or sets  the vertical flip 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalFlip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalFlip`` 
    
    :param verticalFlip: 
    :type verticalFlip: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BaseCustomSymbolBuilder = ...  # unknown typename


class BaseRadialDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.Dimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    AppendedText: AppendedTextBuilder = ...
    """
    Returns  the appended text 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DiameterDimensionDimLineAngle: float = ...
    """
    Returns or sets  the diameter dimension's dimension-line-angle 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterDimensionDimLineAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterDimensionDimLineAngle`` 
    
    :param dimLineAngle: 
    :type dimLineAngle: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FirstAssociativity: NXOpen.SelectNXObject = ...
    """
    Returns  the first associativity.  
    
    Supported object types include Feature and DisplayableObject. 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstAssociativity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FoldLocation: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the fold location 
    
    <hr>
    
    Getter Method
    
    Signature ``FoldLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    IsFoldedRadius: bool = ...
    """
    Returns or sets  the is folded radius 
    
    <hr>
    
    Getter Method
    
    Signature ``IsFoldedRadius`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsFoldedRadius`` 
    
    :param isFoldedRadius: 
    :type isFoldedRadius: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IsHoleStyle: bool = ...
    """
    Returns or sets  the is hole style dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``IsHoleStyle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsHoleStyle`` 
    
    :param isArrowsOutDia: 
    :type isArrowsOutDia: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    IsRadiusToCenter: bool = ...
    """
    Returns or sets  the is radius to center 
    
    <hr>
    
    Getter Method
    
    Signature ``IsRadiusToCenter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsRadiusToCenter`` 
    
    :param isRadiusToCenter: 
    :type isRadiusToCenter: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Measurement: DimensionMeasurementBuilder = ...
    """
    Returns  the measurement 
    
    <hr>
    
    Getter Method
    
    Signature ``Measurement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionMeasurementBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OffsetCenterPoint: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the offset center point 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetCenterPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: BaseRadialDimensionBuilder = ...  # unknown typename


class PmiRadialDimensionBuilder(BaseRadialDimensionBuilder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiRadialDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PmiRadialDimensionBuilder = ...  # unknown typename


class Centerline3dBuilderOffsetMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Centerline3dBuilderOffset():
    """
    the valid types of 3D Centerline offset method
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No Offset"
       "DistanceMethod", "Offset Distance"
       "ObjectMethod", "Offset Object, applicable only for creation"
    """
    NotSet = 0  # Centerline3dBuilderOffsetMemberType
    DistanceMethod = 1  # Centerline3dBuilderOffsetMemberType
    ObjectMethod = 2  # Centerline3dBuilderOffsetMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Centerline3dBuilder(BaseCenterline3dBuilder):
    """
    Builder for creating 3D Centerline.  
    
    It creates or edits 3D Centerlines 
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreateCenterline3dBuilder`
    
    Default values.
    
    ===================  ======
    Property             Value
    ===================  ======
    AlignedCenterlines   false 
    -------------------  ------
    OffsetDistance       0 
    -------------------  ------
    OffsetMethod         None 
    ===================  ======
    
    .. versionadded:: NX6.0.0
    """
    
    class Offset():
        """
        the valid types of 3D Centerline offset method
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No Offset"
           "DistanceMethod", "Offset Distance"
           "ObjectMethod", "Offset Object, applicable only for creation"
        """
        NotSet = 0  # Centerline3dBuilderOffsetMemberType
        DistanceMethod = 1  # Centerline3dBuilderOffsetMemberType
        ObjectMethod = 2  # Centerline3dBuilderOffsetMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AlignedCenterlines: bool = ...
    """
    Returns or sets  the aligned centerlines, applicable only for creation 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignedCenterlines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignedCenterlines`` 
    
    :param alignedCenterlines: 
    :type alignedCenterlines: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit object 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OffsetDistance: float = ...
    """
    Returns or sets  the offset distance, it is used only when aligned centerlines
    toggle is off 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDistance`` 
    
    :param offsetDistance: 
    :type offsetDistance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OffsetMethod: Centerline3dBuilderOffset = ...
    """
    Returns or sets  the offset method , it is used only when aligned centerlines
    toggle is off 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.Centerline3dBuilderOffset` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetMethod`` 
    
    :param offsetMethod: 
    :type offsetMethod: :py:class:`NXOpen.Annotations.Centerline3dBuilderOffset` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OffsetObject: NXOpen.SelectNXObject = ...
    """
    Returns  the offset object, it is used only when aligned centerlines
    toggle is off
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: Centerline3dBuilder = ...  # unknown typename


class DisplayPmiEffectivityMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DisplayPmiEffectivityMethod():
    """
    Specifies the options for display PMI Effectivity
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AllAssocOccLoaded", " - "
       "AnyAssocOccLoaded", " - "
    """
    AllAssocOccLoaded = 1  # DisplayPmiEffectivityMethodMemberType
    AnyAssocOccLoaded = 2  # DisplayPmiEffectivityMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDimensionBuilderDimensionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaDimensionBuilderDimensionTypes():
    """
    Specifies dimension types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Angular", "Angular"
       "Diameter", "Diameter"
       "Radial", "Radial"
       "Chamfer", "Chamfer"
       "Thickness", "Thickness"
       "ArcLength", "ArcLength"
       "Chain", "Chain"
       "Ordinate", "Ordinate"
       "Baseline", "Baseline"
    """
    Linear = 0  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Angular = 1  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Diameter = 2  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Radial = 3  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Chamfer = 4  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Thickness = 5  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    ArcLength = 6  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Chain = 7  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Ordinate = 8  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    Baseline = 9  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDimensionBuilderMeasurementTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaDimensionBuilderMeasurementTypes():
    """
    Specifies measurement types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "Linear ALL"
       "Directed", "Linear Directed"
       "FeatureOfSize", "Linear Feature of Size"
    """
    All = 0  # SearchCriteriaDimensionBuilderMeasurementTypesMemberType
    Directed = 1  # SearchCriteriaDimensionBuilderMeasurementTypesMemberType
    FeatureOfSize = 2  # SearchCriteriaDimensionBuilderMeasurementTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaDimensionBuilderRadialSymbolOptions():
    """
    Specifies radial symbol option
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "R", "R"
       "Rad", "RAD"
       "Sr", "SR"
       "Cr", "CR"
       "UserDefined", "UserDefined"
    """
    R = 0  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
    Rad = 1  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
    Sr = 2  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
    Cr = 3  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
    UserDefined = 4  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaDimensionBuilderDiameterSymbolOptions():
    """
    Specifies diameter symbol option
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Diameter", " - "
       "Dia", " - "
       "SphericalDiameter", " - "
       "UserDefined", "UserDefined"
    """
    Diameter = 0  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
    Dia = 1  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
    SphericalDiameter = 2  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
    UserDefined = 3  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDimensionBuilderToleranceTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaDimensionBuilderToleranceTypes():
    """
    Specifies tolerance types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoTolerance", "NoTolerance"
       "EqualBilateralTolerance", "qualBilateralTolerance"
       "BilateralTolerance", "BilateralTolerance"
       "UnilateralPlus", "UnilateralPlus"
       "UnilateralMinus", "UnilateralMinus"
       "PlusLimitTwoLines", "PlusLimitTwoLines"
       "MinusLimitTwoLines", "MinusLimitTwoLines"
       "PlusLimitOneLine", "PlusLimitOneLine"
       "MinusLimitOneLine", "MinusLimitOneLine"
       "LimitsAndFits", "LimitsAndFits"
       "Basic", "Basic"
       "Reference", "Reference"
       "DiameterReference", "DiameterReference"
       "NotToScale", "NotToScale"
       "BasicDimensionNotToScale", "BasicDimensionNotToScale"
    """
    NoTolerance = 0  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    EqualBilateralTolerance = 1  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    BilateralTolerance = 2  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    UnilateralPlus = 3  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    UnilateralMinus = 4  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    PlusLimitTwoLines = 5  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    MinusLimitTwoLines = 6  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    PlusLimitOneLine = 7  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    MinusLimitOneLine = 8  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    LimitsAndFits = 9  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    Basic = 10  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    Reference = 11  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    DiameterReference = 12  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    NotToScale = 13  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    BasicDimensionNotToScale = 14  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDimensionBuilder(NXOpen.Builder):
    """
    Represents SearchCriteriaDimensionBuilder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SearchModelViewCollection.CreateSearchCriteriaDimensionBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class DimensionTypes():
        """
        Specifies dimension types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Angular", "Angular"
           "Diameter", "Diameter"
           "Radial", "Radial"
           "Chamfer", "Chamfer"
           "Thickness", "Thickness"
           "ArcLength", "ArcLength"
           "Chain", "Chain"
           "Ordinate", "Ordinate"
           "Baseline", "Baseline"
        """
        Linear = 0  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Angular = 1  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Diameter = 2  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Radial = 3  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Chamfer = 4  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Thickness = 5  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        ArcLength = 6  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Chain = 7  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Ordinate = 8  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        Baseline = 9  # SearchCriteriaDimensionBuilderDimensionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeasurementTypes():
        """
        Specifies measurement types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", "Linear ALL"
           "Directed", "Linear Directed"
           "FeatureOfSize", "Linear Feature of Size"
        """
        All = 0  # SearchCriteriaDimensionBuilderMeasurementTypesMemberType
        Directed = 1  # SearchCriteriaDimensionBuilderMeasurementTypesMemberType
        FeatureOfSize = 2  # SearchCriteriaDimensionBuilderMeasurementTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RadialSymbolOptions():
        """
        Specifies radial symbol option
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "R", "R"
           "Rad", "RAD"
           "Sr", "SR"
           "Cr", "CR"
           "UserDefined", "UserDefined"
        """
        R = 0  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
        Rad = 1  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
        Sr = 2  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
        Cr = 3  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
        UserDefined = 4  # SearchCriteriaDimensionBuilderRadialSymbolOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DiameterSymbolOptions():
        """
        Specifies diameter symbol option
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Diameter", " - "
           "Dia", " - "
           "SphericalDiameter", " - "
           "UserDefined", "UserDefined"
        """
        Diameter = 0  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
        Dia = 1  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
        SphericalDiameter = 2  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
        UserDefined = 3  # SearchCriteriaDimensionBuilderDiameterSymbolOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToleranceTypes():
        """
        Specifies tolerance types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoTolerance", "NoTolerance"
           "EqualBilateralTolerance", "qualBilateralTolerance"
           "BilateralTolerance", "BilateralTolerance"
           "UnilateralPlus", "UnilateralPlus"
           "UnilateralMinus", "UnilateralMinus"
           "PlusLimitTwoLines", "PlusLimitTwoLines"
           "MinusLimitTwoLines", "MinusLimitTwoLines"
           "PlusLimitOneLine", "PlusLimitOneLine"
           "MinusLimitOneLine", "MinusLimitOneLine"
           "LimitsAndFits", "LimitsAndFits"
           "Basic", "Basic"
           "Reference", "Reference"
           "DiameterReference", "DiameterReference"
           "NotToScale", "NotToScale"
           "BasicDimensionNotToScale", "BasicDimensionNotToScale"
        """
        NoTolerance = 0  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        EqualBilateralTolerance = 1  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        BilateralTolerance = 2  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        UnilateralPlus = 3  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        UnilateralMinus = 4  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        PlusLimitTwoLines = 5  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        MinusLimitTwoLines = 6  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        PlusLimitOneLine = 7  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        MinusLimitOneLine = 8  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        LimitsAndFits = 9  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        Basic = 10  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        Reference = 11  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        DiameterReference = 12  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        NotToScale = 13  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        BasicDimensionNotToScale = 14  # SearchCriteriaDimensionBuilderToleranceTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AboveText: str = ...
    """
    Returns or sets  the above text 
    
    <hr>
    
    Getter Method
    
    Signature ``AboveText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AboveText`` 
    
    :param aboveText: 
    :type aboveText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AboveTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the above text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``AboveTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AboveTextType`` 
    
    :param aboveTextType: 
    :type aboveTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AfterText: str = ...
    """
    Returns or sets  the after text 
    
    <hr>
    
    Getter Method
    
    Signature ``AfterText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AfterText`` 
    
    :param afterText: 
    :type afterText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AfterTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the after text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``AfterTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AfterTextType`` 
    
    :param afterTextType: 
    :type afterTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BeforeText: str = ...
    """
    Returns or sets  the before text 
    
    <hr>
    
    Getter Method
    
    Signature ``BeforeText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BeforeText`` 
    
    :param beforeText: 
    :type beforeText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BeforeTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the before text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``BeforeTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BeforeTextType`` 
    
    :param beforeTextType: 
    :type beforeTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BelowText: str = ...
    """
    Returns or sets  the below text 
    
    <hr>
    
    Getter Method
    
    Signature ``BelowText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BelowText`` 
    
    :param belowText: 
    :type belowText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BelowTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the below text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``BelowTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BelowTextType`` 
    
    :param belowTextType: 
    :type belowTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByAboveText: bool = ...
    """
    Returns or sets  the above text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByAboveText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByAboveText`` 
    
    :param aboveText: 
    :type aboveText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByAfterText: bool = ...
    """
    Returns or sets  the after text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByAfterText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByAfterText`` 
    
    :param afterText: 
    :type afterText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByBeforeText: bool = ...
    """
    Returns or sets  the before text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByBeforeText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByBeforeText`` 
    
    :param beforeText: 
    :type beforeText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByBelowText: bool = ...
    """
    Returns or sets  the below text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByBelowText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByBelowText`` 
    
    :param belowText: 
    :type belowText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByDeviation: bool = ...
    """
    Returns or sets  the deviation toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDeviation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDeviation`` 
    
    :param byDeviation: 
    :type byDeviation: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByDiameterSymbol: bool = ...
    """
    Returns or sets  the diameter symbol toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDiameterSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDiameterSymbol`` 
    
    :param diameterSymbol: 
    :type diameterSymbol: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByDimensionType: bool = ...
    """
    Returns or sets  the dimension type toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDimensionType`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDimensionType`` 
    
    :param dimensionType: 
    :type dimensionType: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByDimensionValue: bool = ...
    """
    Returns or sets  the dimension value toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDimensionValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDimensionValue`` 
    
    :param dimensionValue: 
    :type dimensionValue: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByGrade: bool = ...
    """
    Returns or sets  the grade toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByGrade`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByGrade`` 
    
    :param byGrade: 
    :type byGrade: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByLowerTolerance: bool = ...
    """
    Returns or sets  the lower tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByLowerTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByLowerTolerance`` 
    
    :param lowerTolerance: 
    :type lowerTolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByRadialSymbol: bool = ...
    """
    Returns or sets  the radial symbol toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByRadialSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByRadialSymbol`` 
    
    :param radialSymbol: 
    :type radialSymbol: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByToleranceType: bool = ...
    """
    Returns or sets  the tolerance type toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByToleranceType`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByToleranceType`` 
    
    :param toleranceType: 
    :type toleranceType: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByUpperTolerance: bool = ...
    """
    Returns or sets  the upper tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByUpperTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByUpperTolerance`` 
    
    :param upperTolerance: 
    :type upperTolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Callout: SearchCriteriaCalloutBuilder = ...
    """
    Returns  the callout block 
    
    <hr>
    
    Getter Method
    
    Signature ``Callout`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaCalloutBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Deviation: str = ...
    """
    Returns or sets  the deviation 
    
    <hr>
    
    Getter Method
    
    Signature ``Deviation`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Deviation`` 
    
    :param deviation: 
    :type deviation: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DiameterSymbol: SearchCriteriaDimensionBuilderDiameterSymbolOptions = ...
    """
    Returns or sets  the diameter symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderDiameterSymbolOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterSymbol`` 
    
    :param diameterSymbol: 
    :type diameterSymbol: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderDiameterSymbolOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DimensionType: SearchCriteriaDimensionBuilderDimensionTypes = ...
    """
    Returns or sets  the dimension type 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderDimensionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionType`` 
    
    :param dimensionType: 
    :type dimensionType: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderDimensionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DimensionValue: float = ...
    """
    Returns or sets  the dimension value 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionValue`` 
    
    :param dimensionValue: 
    :type dimensionValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DimensionValueType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the dimension value enum 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionValueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionValueType`` 
    
    :param dimensionValueType: 
    :type dimensionValueType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Grade: str = ...
    """
    Returns or sets  the grade 
    
    <hr>
    
    Getter Method
    
    Signature ``Grade`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Grade`` 
    
    :param grade: 
    :type grade: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerToleranceType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the lower tolerance enum 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceType`` 
    
    :param lowerToleranceType: 
    :type lowerToleranceType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerToleranceValue: float = ...
    """
    Returns or sets  the lower tolerance value 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceValue`` 
    
    :param lowerToleranceValue: 
    :type lowerToleranceValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MeasurementType: SearchCriteriaDimensionBuilderMeasurementTypes = ...
    """
    Returns or sets  the measurement type 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderMeasurementTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementType`` 
    
    :param measurementType: 
    :type measurementType: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderMeasurementTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RadialSymbol: SearchCriteriaDimensionBuilderRadialSymbolOptions = ...
    """
    Returns or sets  the radial symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderRadialSymbolOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialSymbol`` 
    
    :param radialSymbol: 
    :type radialSymbol: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderRadialSymbolOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToleranceType: SearchCriteriaDimensionBuilderToleranceTypes = ...
    """
    Returns or sets  the tolerance type 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderToleranceTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param toleranceType: 
    :type toleranceType: :py:class:`NXOpen.Annotations.SearchCriteriaDimensionBuilderToleranceTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperToleranceType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the upper tolerance enum 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceType`` 
    
    :param upperToleranceType: 
    :type upperToleranceType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperToleranceValue: float = ...
    """
    Returns or sets  the upper tolerance value 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceValue`` 
    
    :param upperToleranceValue: 
    :type upperToleranceValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SearchCriteriaDimensionBuilder = ...  # unknown typename


class FeatureControlFrameDataBuilderToleranceZoneShapeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameDataBuilderToleranceZoneShape():
    """
    Specifies the zone shape for the feature control frame 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "no zone shape"
       "Diameter", "diameter"
       "SphericalDiameter", "spherical diameter"
       "Square", "square"
    """
    NotSet = 0  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
    Diameter = 1  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
    SphericalDiameter = 2  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
    Square = 3  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameDataBuilderToleranceMaterialModifier():
    """
    Specifies the tolerance material modifier condition 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "no material modifier"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessOfFeatureSize", "regardless of feature size condition"
    """
    NotSet = 0  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
    LeastMaterialCondition = 1  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
    MaximumMaterialCondition = 2  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
    RegardlessOfFeatureSize = 3  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameDataBuilderAreaSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameDataBuilderAreaSymbolType():
    """
    Specifies the unit type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", "Rectangular"
       "Circular", "Circular"
       "Spherical", "Spherical"
       "Square", "Square"
    """
    Rectangular = 0  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
    Circular = 1  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
    Spherical = 2  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
    Square = 3  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameDataBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a FeatureControlFrameDataBuilder
    
    .. versionadded:: NX6.0.0
    """
    
    class ToleranceZoneShape():
        """
        Specifies the zone shape for the feature control frame 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "no zone shape"
           "Diameter", "diameter"
           "SphericalDiameter", "spherical diameter"
           "Square", "square"
        """
        NotSet = 0  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
        Diameter = 1  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
        SphericalDiameter = 2  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
        Square = 3  # FeatureControlFrameDataBuilderToleranceZoneShapeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToleranceMaterialModifier():
        """
        Specifies the tolerance material modifier condition 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "no material modifier"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessOfFeatureSize", "regardless of feature size condition"
        """
        NotSet = 0  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
        LeastMaterialCondition = 1  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
        MaximumMaterialCondition = 2  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
        RegardlessOfFeatureSize = 3  # FeatureControlFrameDataBuilderToleranceMaterialModifierMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AreaSymbolType():
        """
        Specifies the unit type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", "Rectangular"
           "Circular", "Circular"
           "Spherical", "Spherical"
           "Square", "Square"
        """
        Rectangular = 0  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
        Circular = 1  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
        Spherical = 2  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
        Square = 3  # FeatureControlFrameDataBuilderAreaSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AreaSymbol: FeatureControlFrameDataBuilderAreaSymbolType = ...
    """
    Returns or sets  the area symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``AreaSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilderAreaSymbolType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreaSymbol`` 
    
    :param areaSymbol: 
    :type areaSymbol: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilderAreaSymbolType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    CircleU: bool = ...
    """
    Returns or sets  the circle utoggle 
    
    <hr>
    
    Getter Method
    
    Signature ``CircleU`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircleU`` 
    
    :param circleU: 
    :type circleU: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    CircleUvalue: str = ...
    """
    Returns or sets  the circle u value 
    Only available when
    :py:meth:`Annotations.FeatureControlFrameDataBuilder.CircleU`
    is true.  
    
    <hr>
    
    Getter Method
    
    Signature ``CircleUvalue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircleUvalue`` 
    
    :param circleUValue: 
    :type circleUValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    CommonZone: bool = ...
    """
    Returns or sets  the common zone toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``CommonZone`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CommonZone`` 
    
    :param commonZone: 
    :type commonZone: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    FeatureControlFrameIndicatorList: FeatureControlFrameIndicatorBuilderList = ...
    """
    Returns  the feature control frame indicator list.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureControlFrameIndicatorList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilderList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    FreeState: bool = ...
    """
    Returns or sets  the free state toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``FreeState`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FreeState`` 
    
    :param freeState: 
    :type freeState: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    MaterialModifier: FeatureControlFrameDataBuilderToleranceMaterialModifier = ...
    """
    Returns or sets  the material modifier 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialModifier`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilderToleranceMaterialModifier` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialModifier`` 
    
    :param materialModifier: 
    :type materialModifier: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilderToleranceMaterialModifier` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    MaximumTolerance: bool = ...
    """
    Returns or sets  the maximum tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumTolerance`` 
    
    :param maximumTolerance: 
    :type maximumTolerance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    MaximumToleranceValue: str = ...
    """
    Returns or sets  the maximum tolerance value 
    Only available when
    :py:meth:`Annotations.FeatureControlFrameDataBuilder.MaximumTolerance`
    is true.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumToleranceValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumToleranceValue`` 
    
    :param maximumToleranceValue: 
    :type maximumToleranceValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    PrimaryCompoundDatumReference: CompoundDatumReferenceBuilder = ...
    """
    Returns  the primary compound datum reference 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryCompoundDatumReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CompoundDatumReferenceBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PrimaryDatumExtendedText: str = ...
    """
    Returns or sets  the primary datum extended text.  
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDatumExtendedText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDatumExtendedText`` 
    
    :param extendedText: 
    :type extendedText: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    PrimaryDatumReference: DatumReferenceBuilder = ...
    """
    Returns  the primary datum reference 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDatumReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Projected: bool = ...
    """
    Returns or sets  the projected toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``Projected`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Projected`` 
    
    :param projected: 
    :type projected: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ProjectedValue: str = ...
    """
    Returns or sets  the projected value 
    Only available when
    :py:meth:`Annotations.FeatureControlFrameDataBuilder.Projected`
    is true.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectedValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectedValue`` 
    
    :param projectedValue: 
    :type projectedValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SecondaryCompoundDatumReference: CompoundDatumReferenceBuilder = ...
    """
    Returns  the secondary compound datum reference 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryCompoundDatumReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CompoundDatumReferenceBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SecondaryDatumExtendedText: str = ...
    """
    Returns or sets  the secondary datum extended text.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryDatumExtendedText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryDatumExtendedText`` 
    
    :param extendedText: 
    :type extendedText: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SecondaryDatumReference: DatumReferenceBuilder = ...
    """
    Returns  the secondary datum reference 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryDatumReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StatisticalTolerance: bool = ...
    """
    Returns or sets  the statistical tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``StatisticalTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StatisticalTolerance`` 
    
    :param statisticalTolerance: 
    :type statisticalTolerance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    TangentPlane: bool = ...
    """
    Returns or sets  the tangent plane toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``TangentPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TangentPlane`` 
    
    :param tangentPlane: 
    :type tangentPlane: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    TertiaryCompoundDatumReference: CompoundDatumReferenceBuilder = ...
    """
    Returns  the tertiary compound datum reference 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryCompoundDatumReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CompoundDatumReferenceBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TertiaryDatumExtendedText: str = ...
    """
    Returns or sets  the tertiary datum extended text.  
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryDatumExtendedText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TertiaryDatumExtendedText`` 
    
    :param extendedText: 
    :type extendedText: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    TertiaryDatumReference: DatumReferenceBuilder = ...
    """
    Returns  the tertiary datum reference 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryDatumReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToleranceValue: str = ...
    """
    Returns or sets  the tolerance value string 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceValue`` 
    
    :param toleranceValue: 
    :type toleranceValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UnitBasis: bool = ...
    """
    Returns or sets  the unit basis toggle
    Only available when feature control frame characteristic is
    :py:class:`Annotations.FeatureControlFrameBuilderFcfCharacteristic.Straightness <Annotations.FeatureControlFrameBuilderFcfCharacteristic>`
    :py:class:`Annotations.FeatureControlFrameBuilderFcfCharacteristic.Flatness <Annotations.FeatureControlFrameBuilderFcfCharacteristic>`
    :py:class:`Annotations.FeatureControlFrameBuilderFcfCharacteristic.ProfileOfALine <Annotations.FeatureControlFrameBuilderFcfCharacteristic>`
    :py:class:`Annotations.FeatureControlFrameBuilderFcfCharacteristic.ProfileOfASurface <Annotations.FeatureControlFrameBuilderFcfCharacteristic>` 
    
    <hr>
    
    Getter Method
    
    Signature ``UnitBasis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnitBasis`` 
    
    :param unitBasis: 
    :type unitBasis: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UnitBasisValue1: str = ...
    """
    Returns or sets  the unit basis value1 
    Only available when
    :py:meth:`Annotations.FeatureControlFrameDataBuilder.UnitBasis`
    is true.  
    
    <hr>
    
    Getter Method
    
    Signature ``UnitBasisValue1`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnitBasisValue1`` 
    
    :param unitBasisValue1: 
    :type unitBasisValue1: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UnitBasisValue2: str = ...
    """
    Returns or sets  the unit basis value2 
    Only available when
    :py:meth:`Annotations.FeatureControlFrameDataBuilder.UnitBasis`
    is true.  
    
    <hr>
    
    Getter Method
    
    Signature ``UnitBasisValue2`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnitBasisValue2`` 
    
    :param unitBasisValue2: 
    :type unitBasisValue2: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Uz: bool = ...
    """
    Returns or sets  the uz toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``Uz`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Uz`` 
    
    :param uz: 
    :type uz: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ZoneShape: FeatureControlFrameDataBuilderToleranceZoneShape = ...
    """
    Returns or sets  the zone shape 
    
    <hr>
    
    Getter Method
    
    Signature ``ZoneShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilderToleranceZoneShape` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZoneShape`` 
    
    :param zoneShape: 
    :type zoneShape: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilderToleranceZoneShape` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: FeatureControlFrameDataBuilder = ...  # unknown typename


class UnitsFormatPreferences(NXOpen.TransientObject):
    """
    Represents units and format preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    AngularDimensionFormat: AngularDimensionFormat = ...
    """
    Returns or sets  the angular dimension format 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDimensionFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularDimensionFormat`` 
    
    :param format: 
    :type format: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    AngularToleranceFormat: AngularDimensionFormat = ...
    """
    Returns or sets  the angular tolerance format 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularToleranceFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularToleranceFormat`` 
    
    :param format: 
    :type format: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ConvertPrimaryToleranceToDualDimensionUnit: bool = ...
    """
    Returns or sets  the flag indicating whether to convert the primary tolerance to dual dimension unit 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertPrimaryToleranceToDualDimensionUnit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertPrimaryToleranceToDualDimensionUnit`` 
    
    :param convertPrimaryToleranceToDualUnit: 
    :type convertPrimaryToleranceToDualUnit: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DecimalPointCharacter: DecimalPointCharacter = ...
    """
    Returns or sets  the decimal point character 
    
    <hr>
    
    Getter Method
    
    Signature ``DecimalPointCharacter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DecimalPointCharacter` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecimalPointCharacter`` 
    
    :param decimalPointCharacter: 
    :type decimalPointCharacter: :py:class:`NXOpen.Annotations.DecimalPointCharacter` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DimensionLeadingZero: bool = ...
    """
    Returns or sets  the dimension leading zero display property 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionLeadingZero`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionLeadingZero`` 
    
    :param dimensionLeadingZero: 
    :type dimensionLeadingZero: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    DisplayTrailingZeros: bool = ...
    """
    Returns or sets  the flag indicating whether to display trailing zeros on dimension values 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayTrailingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayTrailingZeros`` 
    
    :param displayTrailingZeros: 
    :type displayTrailingZeros: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DualDimensionCenterDimensionLine: bool = ...
    """
    Returns or sets  the center dimension line flag for dual dimension.  
    
    If this flag is true, the alignment of the dimension line will be centered between
    the main and dual text, regardless of appended text above or below and the Vertical
    Alignment of the leader line.
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionCenterDimensionLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionCenterDimensionLine`` 
    
    :param centerDimensionLine: 
    :type centerDimensionLine: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DualDimensionPlacement: DualDimensionPlacement = ...
    """
    Returns or sets  the dual dimension placement relative to the primary dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DualDimensionPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionPlacement`` 
    
    :param placement: 
    :type placement: :py:class:`NXOpen.Annotations.DualDimensionPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DualDimensionTextFormat: DimensionTextFormat = ...
    """
    Returns or sets  the dual dimension text format 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionTextFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionTextFormat`` 
    
    :param textFormat: 
    :type textFormat: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DualDimensionUnit: DimensionUnit = ...
    """
    Returns or sets  the dual dimension unit 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionUnit`` 
    
    :param unit: 
    :type unit: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FractionalDisplay: bool = ...
    """
    Returns or sets  the fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``FractionalDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FractionalDisplay`` 
    
    :param fractionalDisplay: 
    :type fractionalDisplay: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NumeratorDegrees: int = ...
    """
    Returns or sets  the numerator degrees of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorDegrees`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorDegrees`` 
    
    :param numeratorDegrees: 
    :type numeratorDegrees: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NumeratorFraction: float = ...
    """
    Returns or sets  the numerator fractional degrees of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorFraction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorFraction`` 
    
    :param numeratorFraction: 
    :type numeratorFraction: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NumeratorMinutes: int = ...
    """
    Returns or sets  the numerator minutes of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorMinutes`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorMinutes`` 
    
    :param numeratorMinutes: 
    :type numeratorMinutes: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NumeratorSeconds: int = ...
    """
    Returns or sets  the numerator seconds of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorSeconds`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorSeconds`` 
    
    :param numeratorSeconds: 
    :type numeratorSeconds: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PrimaryDimensionTextFormat: DimensionTextFormat = ...
    """
    Returns or sets  the primary dimension text format 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDimensionTextFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDimensionTextFormat`` 
    
    :param textFormat: 
    :type textFormat: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    PrimaryDimensionUnit: DimensionUnit = ...
    """
    Returns or sets  the primary dimension unit 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDimensionUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDimensionUnit`` 
    
    :param unit: 
    :type unit: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SuppressAngularZerosOption: AngularSuppressZeros = ...
    """
    Returns or sets  the angular dimension suppress zeros option 
    
    <hr>
    
    Getter Method
    
    Signature ``SuppressAngularZerosOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AngularSuppressZeros` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SuppressAngularZerosOption`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Annotations.AngularSuppressZeros` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ToleranceLeadingZero: bool = ...
    """
    Returns or sets  the tolerance leading zero display property 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceLeadingZero`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceLeadingZero`` 
    
    :param toleranceLeadingZero: 
    :type toleranceLeadingZero: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    TolerancePlacement: TolerancePlacement = ...
    """
    Returns or sets  the tolerance text placement relative to the dimension text 
    
    <hr>
    
    Getter Method
    
    Signature ``TolerancePlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TolerancePlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TolerancePlacement`` 
    
    :param placement: 
    :type placement: :py:class:`NXOpen.Annotations.TolerancePlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class LeaderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderType():
    """
    Specifies the leader type.  Corresponds to the leader types in the
    UI's Leader Tool 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Null", "Should not be used"
       "Plain", " - "
       "Around", " - "
       "PlainAligned", " - "
       "AroundAligned", " - "
       "Extension", " - "
       "DatumArrow", " - "
       "DatumExt", " - "
       "DatumDim", " - "
       "GbDatumArrow", " - "
       "GbDatumExt", " - "
       "GbDatumDim", " - "
       "OnAnnotation", " - "
       "OnStub", " - "
       "PlainNostub", " - "
       "AlignedNostub", " - "
       "OnCenterline", " - "
       "DatumOnDotTerminatedLeader", "leader type for "datum on dot terminated leader""
       "IdExtension", "Extension leaders for ID symbols"
       "LinearExtension", " - "
       "LinearIdExtension", " - "
       "AllOver", " - "
       "Last", "Last enum value. Should not be used."
    """
    Null = -1  # LeaderTypeMemberType
    Plain = 0  # LeaderTypeMemberType
    Around = 1  # LeaderTypeMemberType
    PlainAligned = 2  # LeaderTypeMemberType
    AroundAligned = 3  # LeaderTypeMemberType
    Extension = 4  # LeaderTypeMemberType
    DatumArrow = 5  # LeaderTypeMemberType
    DatumExt = 6  # LeaderTypeMemberType
    DatumDim = 7  # LeaderTypeMemberType
    GbDatumArrow = 8  # LeaderTypeMemberType
    GbDatumExt = 9  # LeaderTypeMemberType
    GbDatumDim = 10  # LeaderTypeMemberType
    OnAnnotation = 11  # LeaderTypeMemberType
    OnStub = 12  # LeaderTypeMemberType
    PlainNostub = 13  # LeaderTypeMemberType
    AlignedNostub = 14  # LeaderTypeMemberType
    OnCenterline = 15  # LeaderTypeMemberType
    DatumOnDotTerminatedLeader = 16  # LeaderTypeMemberType
    IdExtension = 17  # LeaderTypeMemberType
    LinearExtension = 18  # LeaderTypeMemberType
    LinearIdExtension = 19  # LeaderTypeMemberType
    AllOver = 20  # LeaderTypeMemberType
    Last = 21  # LeaderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseSurfaceFinish(PmiAttribute, ILinearTolerance):
    """
    Represents a Base Surface Finish   
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX7.5.0
    """
    
    def GetUnitsFormatPrefs(self) -> UnitsFormatPreferences:
        """
        Returns the unit format preferences  
        
        Signature ``GetUnitsFormatPrefs()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.UnitsFormatPreferences` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUnitsFormatPrefs(self, unitsFormat: UnitsFormatPreferences) -> None:
        """
        Sets the unit format preferences.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetUnitsFormatPrefs(unitsFormat)`` 
        
        :param unitsFormat: 
        :type unitsFormat: :py:class:`NXOpen.Annotations.UnitsFormatPreferences` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetInvertSymbol(self) -> bool:
        """
        Return the invert symbol flag for symbol having flag type leader  
        
        Signature ``GetInvertSymbol()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    
    def SetInvertSymbol(self, invertSymbol: bool) -> None:
        """
        Set the invert symbol flag for symbol having flag type leader.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetInvertSymbol(invertSymbol)`` 
        
        :param invertSymbol: 
        :type invertSymbol: bool 
        
        .. versionadded:: NX7.5.2
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetTolerance(self) -> LinearTolerance:
        """
        Returns the tolerance  
        
        Signature ``GetTolerance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: LinearTolerance) -> None:
        """
        Sets the tolerance.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance: 
        :type tolerance: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Null: BaseSurfaceFinish = ...  # unknown typename


class SurfaceFinish(BaseSurfaceFinish):
    """
    Represents a PMI Surface Finish  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.SurfaceFinishBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: SurfaceFinish = ...  # unknown typename


class JogOrientationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JogOrientation():
    """
    Specifies the options jog orientation
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "JogIn", "Jog orientation in"
       "JogOut", "Jog orientation out"
    """
    JogIn = 1  # JogOrientationMemberType
    JogOut = 2  # JogOrientationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CuttingPlaneSymbolBuilderViewNameFormatOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CuttingPlaneSymbolBuilderViewNameFormatOption():
    """
    Represents whether the view name is derived from the PMI cutting plane symbol text. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UserDefined", "User Defined View Name"
       "A", "View Name is in the 'Section Prefix A' format, Where Section Prefix is taken from PMI Preferences and A is the Text of the PMI Cutting Plane Symbol."
       "AA", "View Name is in the 'Section Prefix A-A' format, Where Where Section Prefix is taken from PMI Preferences and A is the Text of the PMI Cutting Plane Symbol."
    """
    UserDefined = 0  # CuttingPlaneSymbolBuilderViewNameFormatOptionMemberType
    A = 1  # CuttingPlaneSymbolBuilderViewNameFormatOptionMemberType
    AA = 2  # CuttingPlaneSymbolBuilderViewNameFormatOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CuttingPlaneSymbolBuilderTextPlaneRelativeArrowMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CuttingPlaneSymbolBuilderTextPlaneRelativeArrow():
    """
    Represents position of the text relative to the arrow option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Parallel", "The Plane of the PMI Cutting Plane Symbol Text is Parallel to its Arrow."
       "Perpendicular", "The Plane of the PMI Cutting Plane Symbol Text is Perpendicular to its Arrow."
    """
    Parallel = 0  # CuttingPlaneSymbolBuilderTextPlaneRelativeArrowMemberType
    Perpendicular = 1  # CuttingPlaneSymbolBuilderTextPlaneRelativeArrowMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CuttingPlaneSymbolBuilderArrowDirectionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CuttingPlaneSymbolBuilderArrowDirectionOption():
    """
    Represents position of the arrow direction relative to cutting plane 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Towards", "The Direction of the PMI Cutting Plane Symbol Arrow Towards Plane."
       "Away", "The Direction of the PMI Cutting Plane Symbol Arrow Away From Plane."
    """
    Towards = 0  # CuttingPlaneSymbolBuilderArrowDirectionOptionMemberType
    Away = 1  # CuttingPlaneSymbolBuilderArrowDirectionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CuttingPlaneSymbolBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilder`
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class ViewNameFormatOption():
        """
        Represents whether the view name is derived from the PMI cutting plane symbol text. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UserDefined", "User Defined View Name"
           "A", "View Name is in the 'Section Prefix A' format, Where Section Prefix is taken from PMI Preferences and A is the Text of the PMI Cutting Plane Symbol."
           "AA", "View Name is in the 'Section Prefix A-A' format, Where Where Section Prefix is taken from PMI Preferences and A is the Text of the PMI Cutting Plane Symbol."
        """
        UserDefined = 0  # CuttingPlaneSymbolBuilderViewNameFormatOptionMemberType
        A = 1  # CuttingPlaneSymbolBuilderViewNameFormatOptionMemberType
        AA = 2  # CuttingPlaneSymbolBuilderViewNameFormatOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TextPlaneRelativeArrow():
        """
        Represents position of the text relative to the arrow option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Parallel", "The Plane of the PMI Cutting Plane Symbol Text is Parallel to its Arrow."
           "Perpendicular", "The Plane of the PMI Cutting Plane Symbol Text is Perpendicular to its Arrow."
        """
        Parallel = 0  # CuttingPlaneSymbolBuilderTextPlaneRelativeArrowMemberType
        Perpendicular = 1  # CuttingPlaneSymbolBuilderTextPlaneRelativeArrowMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ArrowDirectionOption():
        """
        Represents position of the arrow direction relative to cutting plane 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Towards", "The Direction of the PMI Cutting Plane Symbol Arrow Towards Plane."
           "Away", "The Direction of the PMI Cutting Plane Symbol Arrow Away From Plane."
        """
        Towards = 0  # CuttingPlaneSymbolBuilderArrowDirectionOptionMemberType
        Away = 1  # CuttingPlaneSymbolBuilderArrowDirectionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AlternateArrow(self) -> None:
        """
        The Cutting Plane Symbol Alternate Arrow
        
        Signature ``AlternateArrow()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ArrowDirection: CuttingPlaneSymbolBuilderArrowDirectionOption = ...
    """
    Returns or sets  the Cutting Plane Symbol Arrow Direction relative to plane 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderArrowDirectionOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowDirection`` 
    
    :param arrowDirection: 
    :type arrowDirection: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderArrowDirectionOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    ArrowLength: float = ...
    """
    Returns or sets  the Cutting Plane Symbol Arrow Length
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowLength`` 
    
    :param arrowLength: 
    :type arrowLength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Color: int = ...
    """
    Returns or sets  the color of the Cutting Plane Symbol
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param cuttingPlaneSymbolColor: 
    :type cuttingPlaneSymbolColor: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    CuttingPlaneSymbolText: str = ...
    """
    Returns or sets  the Cutting Plane Symbol text 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolText`` 
    
    :param cuttingPlaneSymbolName: 
    :type cuttingPlaneSymbolName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    DisplayCuttingPlaneSymbol: bool = ...
    """
    Returns or sets  the display cutting plane symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayCuttingPlaneSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayCuttingPlaneSymbol`` 
    
    :param displayCuttingPlaneSymbol: 
    :type displayCuttingPlaneSymbol: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Font: NXOpen.LineFontBuilder = ...
    """
    Returns  the font 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineFontBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ShadedPlane: bool = ...
    """
    Returns or sets  the shaded plane 
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadedPlane`` 
    
    :param shadedPlane: 
    :type shadedPlane: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Style: StyleBuilder = ...
    """
    Returns  the Cutting Plane Symbol Style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TextPlaneRelativeToArrow: CuttingPlaneSymbolBuilderTextPlaneRelativeArrow = ...
    """
    Returns or sets  the text plane relative to arrow 
    
    <hr>
    
    Getter Method
    
    Signature ``TextPlaneRelativeToArrow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderTextPlaneRelativeArrow` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextPlaneRelativeToArrow`` 
    
    :param textPlaneRelativeToArrow: 
    :type textPlaneRelativeToArrow: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderTextPlaneRelativeArrow` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    UseTwoArrows: bool = ...
    """
    Returns or sets  the use two arrows 
    
    <hr>
    
    Getter Method
    
    Signature ``UseTwoArrows`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseTwoArrows`` 
    
    :param useTwoArrows: 
    :type useTwoArrows: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    ViewNameFormat: CuttingPlaneSymbolBuilderViewNameFormatOption = ...
    """
    Returns or sets  the name view from symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewNameFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderViewNameFormatOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewNameFormat`` 
    
    :param viewNameFormat: 
    :type viewNameFormat: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderViewNameFormatOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: CuttingPlaneSymbolBuilder = ...  # unknown typename


class DraftingCustomSymbolBuilder(BaseCustomSymbolBuilder):
    """
    Represents builder for Drafting Custom Symbol   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.CreateDraftingCustomSymbolBuilder`
    
    .. versionadded:: NX7.5.0
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DraftingCustomSymbolBuilder = ...  # unknown typename


class InspectionSymbolAroundAppendedTextMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InspectionSymbolAroundAppendedText():
    """
    Specifies on how an inspection symbol is drawn around appended text 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Before", "Include before appended text"
       "After", "Include after appended text"
       "BeforeAfter", "Include before and after appended textx"
       "All", "Include all appended texts"
    """
    NotSet = 0  # InspectionSymbolAroundAppendedTextMemberType
    Before = 1  # InspectionSymbolAroundAppendedTextMemberType
    After = 2  # InspectionSymbolAroundAppendedTextMemberType
    BeforeAfter = 3  # InspectionSymbolAroundAppendedTextMemberType
    All = 4  # InspectionSymbolAroundAppendedTextMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LetteringStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.LetteringStyleBuilder`.  
    
    This class queries and sets lettering preferences when creating or editing annotations.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlignPosition: AlignmentPosition = ...
    """
    Returns or sets  the alignment position 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AlignmentPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignPosition`` 
    
    :param alignPosition: 
    :type alignPosition: :py:class:`NXOpen.Annotations.AlignmentPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Angle: float = ...
    """
    Returns or sets  the angle for general text 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedNxTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the appended NX text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the NX font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedNxTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedNxTextCharacterSpaceFactor`` 
    
    :param appendedNXTextCharSpaceFactor: 
    :type appendedNXTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedStandardTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the appended Standard text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the Standard font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedStandardTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedStandardTextCharacterSpaceFactor`` 
    
    :param appendedStandardTextCharSpaceFactor: 
    :type appendedStandardTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextAspectRatio: float = ...
    """
    Returns or sets  the appended text aspect ratio.  
    
    This specifies a ratio of length to height which represents the size of character text.
    This only defines the aspect ratio for text. :py:meth:`LetteringStyleBuilder.AppendedTextSymbolAspectRatio`` 
    controls the aspect ratio of symbol text control sequences. 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextAspectRatio`` 
    
    :param appendedTextAspectRatio: 
    :type appendedTextAspectRatio: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextCharSpaceFactor: float = ...
    """
    Returns or sets  the appended text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the current font 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextCharSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextCharSpaceFactor`` 
    
    :param appendedTextCharSpaceFactor: 
    :type appendedTextCharSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextColor: NXOpen.NXColor = ...
    """
    Returns or sets  the appended text color 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextColor`` 
    
    :param appendedTextColor: 
    :type appendedTextColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextFont: int = ...
    """
    Returns or sets  the appended text font 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextFont`` 
    
    :param appendedTextFont: 
    :type appendedTextFont: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextItalicized: bool = ...
    """
    Returns or sets  the appended text italic status 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextItalicized`` 
    
    :param appendedTextItalicized: 
    :type appendedTextItalicized: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextLineSpaceFactor: float = ...
    """
    Returns or sets  the appended text line space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextLineSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextLineSpaceFactor`` 
    
    :param appendedTextLineSpaceFactor: 
    :type appendedTextLineSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextLineWidth: LineWidth = ...
    """
    Returns or sets  the appended text line width.  
    
    The values for :py:class:`NXOpen.Annotations.LineWidth` when using standard font : 
    A value of :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` is equivalent to a value of "Regular" or "Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.AppendedTextItalicized`` is set).
    Any value other than :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` 
    is equivalent to a value of "Bold" or "Bold Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.AppendedTextItalicized`` is set).
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextLineWidth`` 
    
    :param appendedTextLineWidth: 
    :type appendedTextLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextSize: float = ...
    """
    Returns or sets  the appended text character size 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextSize`` 
    
    :param appendedTextSize: 
    :type appendedTextSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextSpaceFactor: float = ...
    """
    Returns or sets  the appended text space factor.  
    
    This controls the spacing between the before appended text and the
    next piece of dimension text to its right; and the spacing between
    the after appended text and the next piece of text to its left.
    The space is equal to the appended text character size multiplied by
    the space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextSpaceFactor`` 
    
    :param appendedTextSpaceFactor: 
    :type appendedTextSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AppendedTextSymbolAspectRatio: float = ...
    """
    Returns or sets  the symbol aspect ratio for appended text (only available for symbols
    when using standard font).  
    
    This value controls the aspect ratio of text control sequences such as the 
    diameter symbol (represented by the &#x3C;O&#x3E; text control sequence), the 
    counterbore symbol (represented by the &#x3C;&#x23;C&#x3E; text control sequence), the 
    degree symbol (represented by the &#x3C;&#x24;s&#x3E; text control sequence), the true 
    position symbol (represented by the &#x3C;&#x26;10&#x3E; text control sequence), etc. 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextSymbolAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AppendedTextSymbolAspectRatio`` 
    
    :param appendedTextSymbolAspect: 
    :type appendedTextSymbolAspect: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimLineSpaceFactor: float = ...
    """
    Returns or sets  the dimension line space factor.  
    
    This controls the spacing between the bottom most piece of text on the dimension
    and the dimension line. This only applies when the text orientation is text over 
    dimension line. The space is equal to the dimension text character size
    multiplied by the space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``DimLineSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimLineSpaceFactor`` 
    
    :param dimLineSpaceFactor: 
    :type dimLineSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionNxTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the dimension NX text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the NX font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionNxTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionNxTextCharacterSpaceFactor`` 
    
    :param dimensionNXTextCharSpaceFactor: 
    :type dimensionNXTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionStandardTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the dimension Standard text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the Standard font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionStandardTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionStandardTextCharacterSpaceFactor`` 
    
    :param dimensionStandardTextCharSpaceFactor: 
    :type dimensionStandardTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextAspectRatio: float = ...
    """
    Returns or sets  the dimension text aspect ratio.  
    
    This specifies a ratio of length to height which represents the size of character text.
    This only defines the aspect ratio for text. :py:meth:`LetteringStyleBuilder.DimensionTextSymbolAspectRatio`` 
    controls the aspect ratio of symbol text control sequences. 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextAspectRatio`` 
    
    :param dimensionTextAspectRatio: 
    :type dimensionTextAspectRatio: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextCharSpaceFactor: float = ...
    """
    Returns or sets  the dimension text space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the current font 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextCharSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextCharSpaceFactor`` 
    
    :param dimensionTextCharSpaceFactor: 
    :type dimensionTextCharSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextColor: NXOpen.NXColor = ...
    """
    Returns or sets  the dimension text color 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextColor`` 
    
    :param dimensionTextColor: 
    :type dimensionTextColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextFont: int = ...
    """
    Returns or sets  the dimension text font 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextFont`` 
    
    :param dimensionTextFont: 
    :type dimensionTextFont: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextItalicized: bool = ...
    """
    Returns or sets  the dimension text italic status 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextItalicized`` 
    
    :param dimensionTextItalic: 
    :type dimensionTextItalic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextLineSpaceFactor: float = ...
    """
    Returns or sets  the dimension text line space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextLineSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextLineSpaceFactor`` 
    
    :param dimensionTextLineSpaceFactor: 
    :type dimensionTextLineSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextLineWidth: LineWidth = ...
    """
    Returns or sets  the dimension text line width.  
    
    The values for :py:class:`NXOpen.Annotations.LineWidth` when using standard font : 
    A value of :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` is equivalent to a value of "Regular" or "Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.DimensionTextItalicized`` is set).
    Any value other than :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` 
    is equivalent to a value of "Bold" or "Bold Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.DimensionTextItalicized`` is set).
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextLineWidth`` 
    
    :param dimensionTextLineWidth: 
    :type dimensionTextLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextSize: float = ...
    """
    Returns or sets  the dimension text character size 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextSize`` 
    
    :param dimensionTextSize: 
    :type dimensionTextSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTextSymbolAspectRatio: float = ...
    """
    Returns or sets  the symbol aspect ratio for dimension text (only available for symbols
    when using standard font).  
    
    This value controls the aspect ratio of text control sequences such as the 
    diameter symbol (represented by the &#x3C;O&#x3E; text control sequence), the 
    counterbore symbol (represented by the &#x3C;&#x23;C&#x3E; text control sequence), the 
    degree symbol (represented by the &#x3C;&#x24;s&#x3E; text control sequence), the true 
    position symbol (represented by the &#x3C;&#x26;10&#x3E; text control sequence), etc. 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextSymbolAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextSymbolAspectRatio`` 
    
    :param dimensionTextSymbolAspect: 
    :type dimensionTextSymbolAspect: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GdtFrameHeightFactor: float = ...
    """
    Returns or sets  the GD and T frame height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``GdtFrameHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GdtFrameHeightFactor`` 
    
    :param gdtFrameHeightFactor: 
    :type gdtFrameHeightFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralNxTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the general NX text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the NX font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralNxTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralNxTextCharacterSpaceFactor`` 
    
    :param generalNXTextCharSpaceFactor: 
    :type generalNXTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralStandardTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the general Standard text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the Standard font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralStandardTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralStandardTextCharacterSpaceFactor`` 
    
    :param generalStandardTextCharSpaceFactor: 
    :type generalStandardTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextAspectRatio: float = ...
    """
    Returns or sets  the general text aspect ratio.  
    
    This specifies a ratio of length to height which represents the size of character text.
    This only defines the aspect ratio for text. :py:meth:`LetteringStyleBuilder.GeneralTextSymbolAspectRatio`` 
    controls the aspect ratio of symbol text control sequences. 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextAspectRatio`` 
    
    :param generalTextAspectRatio: 
    :type generalTextAspectRatio: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextCharSpaceFactor: float = ...
    """
    Returns or sets  the general text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the current font 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextCharSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextCharSpaceFactor`` 
    
    :param generalTextCharSpaceFactor: 
    :type generalTextCharSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextColor: NXOpen.NXColor = ...
    """
    Returns or sets  the general text color 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextColor`` 
    
    :param generalTextColor: 
    :type generalTextColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextFont: int = ...
    """
    Returns or sets  the general text font 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextFont`` 
    
    :param generalTextFont: 
    :type generalTextFont: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextItalicized: bool = ...
    """
    Returns or sets  the general text italic status 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextItalicized`` 
    
    :param generalTextItalicized: 
    :type generalTextItalicized: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextLineSpaceFactor: float = ...
    """
    Returns or sets  the general text line space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextLineSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextLineSpaceFactor`` 
    
    :param generalTextLineSpaceFactor: 
    :type generalTextLineSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextLineWidth: LineWidth = ...
    """
    Returns or sets  the general text line width.  
    
    The values for :py:class:`NXOpen.Annotations.LineWidth` when using standard font : 
    A value of :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` is equivalent to a value of "Regular" or "Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.GeneralTextItalicized`` is set).
    Any value other than :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>`
    is equivalent to a value of "Bold" or "Bold Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.GeneralTextItalicized`` is set).
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextLineWidth`` 
    
    :param generalTextLineWidth: 
    :type generalTextLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextSize: float = ...
    """
    Returns or sets  the general text character size 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextSize`` 
    
    :param generalTextSize: 
    :type generalTextSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GeneralTextSymbolAspectRatio: float = ...
    """
    Returns or sets  the symbol aspect ratio for general text (only available for symbols
    when using standard font).  
    
    This value controls the aspect ratio of text control sequences such as the 
    diameter symbol (represented by the &#x3C;O&#x3E; text control sequence), the 
    counterbore symbol (represented by the &#x3C;&#x23;C&#x3E; text control sequence), the 
    degree symbol (represented by the &#x3C;&#x24;s&#x3E; text control sequence), the true 
    position symbol (represented by the &#x3C;&#x26;10&#x3E; text control sequence), etc. 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTextSymbolAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralTextSymbolAspectRatio`` 
    
    :param generalTextSymbolAspect: 
    :type generalTextSymbolAspect: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    HorizontalTextJustification: TextJustification = ...
    """
    Returns or sets  the horizontal text justification 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalTextJustification`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextJustification` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalTextJustification`` 
    
    :param horizontalTextJustification: 
    :type horizontalTextJustification: :py:class:`NXOpen.Annotations.TextJustification` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackAboveSpaceFactor: float = ...
    """
    Returns or sets  the stack above space factor.  
    
    This specifies the space buffer above the annotation within a stack
    as a factor of a multiple of the character size 
    
    <hr>
    
    Getter Method
    
    Signature ``StackAboveSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackAboveSpaceFactor`` 
    
    :param stackAboveSpaceFactor: 
    :type stackAboveSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackAutospace: bool = ...
    """
    Returns or sets  the stack autospace setting.  
    
    A value of True means that system defined spacing values will be used
    when a symbol is inserted into a stack 
    
    <hr>
    
    Getter Method
    
    Signature ``StackAutospace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackAutospace`` 
    
    :param stackAutospace: 
    :type stackAutospace: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackBelowSpaceFactor: float = ...
    """
    Returns or sets  the stack below space factor.  
    
    This specifies the space buffer below the annotation within a stack
    as a factor of a multiple of the character size 
    
    <hr>
    
    Getter Method
    
    Signature ``StackBelowSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackBelowSpaceFactor`` 
    
    :param stackBelowSpaceFactor: 
    :type stackBelowSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackHorizontalAlignment: StackHorizontalAlignment = ...
    """
    Returns or sets  the stack horizontal alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``StackHorizontalAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StackHorizontalAlignment` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackHorizontalAlignment`` 
    
    :param stackHorizontalAlignment: 
    :type stackHorizontalAlignment: :py:class:`NXOpen.Annotations.StackHorizontalAlignment` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackInheritAssociatedObjects: bool = ...
    """
    Returns or sets  the stack inherit associated objects setting.  
    
    A value of True means that a PMI annotation when added to a stack will
    automatically inherit the associated objects of the stack 
    
    <hr>
    
    Getter Method
    
    Signature ``StackInheritAssociatedObjects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackInheritAssociatedObjects`` 
    
    :param stackInheritAssociatedObjects: 
    :type stackInheritAssociatedObjects: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackLeftSpaceFactor: float = ...
    """
    Returns or sets  the stack left space factor.  
    
    This specifies the space buffer to the left of the annotation within a stack
    as a factor of a multiple of the character size 
    
    <hr>
    
    Getter Method
    
    Signature ``StackLeftSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackLeftSpaceFactor`` 
    
    :param stackLeftSpaceFactor: 
    :type stackLeftSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackRightSpaceFactor: float = ...
    """
    Returns or sets  the stack right space factor.  
    
    This specifies the space buffer to the rght of the annotation within a stack
    as a factor of a multiple of the character size 
    
    <hr>
    
    Getter Method
    
    Signature ``StackRightSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackRightSpaceFactor`` 
    
    :param stackRightSpaceFactor: 
    :type stackRightSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StackVerticalAlignment: StackVerticalAlignment = ...
    """
    Returns or sets  the stack vertical alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``StackVerticalAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StackVerticalAlignment` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StackVerticalAlignment`` 
    
    :param stackVerticalAlignment: 
    :type stackVerticalAlignment: :py:class:`NXOpen.Annotations.StackVerticalAlignment` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SymbolFontFile: str = ...
    """
    Returns or sets  the symbol font file setting.  
    
    This is global preferences setting. 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolFontFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolFontFile`` 
    
    :param symbolFontFile: 
    :type symbolFontFile: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceNxTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the tolerance NX text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the NX font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceNxTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceNxTextCharacterSpaceFactor`` 
    
    :param toleranceNXTextCharSpaceFactor: 
    :type toleranceNXTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceStandardTextCharacterSpaceFactor: float = ...
    """
    Returns or sets  the tolerance Standard text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the Standard font.
    This setting is specific to preferences and object style in create mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceStandardTextCharacterSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceStandardTextCharacterSpaceFactor`` 
    
    :param toleranceStandardTextCharSpaceFactor: 
    :type toleranceStandardTextCharSpaceFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextAspectRatio: float = ...
    """
    Returns or sets  the tolerance text aspect ratio.  
    
    This specifies a ratio of length to height which represents the size of character text.
    This only defines the aspect ratio for text. :py:meth:`LetteringStyleBuilder.ToleranceTextSymbolAspectRatio`` 
    controls the aspect ratio of symbol text control sequences. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextAspectRatio`` 
    
    :param toleranceTextAspectRatio: 
    :type toleranceTextAspectRatio: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextCharSpaceFactor: float = ...
    """
    Returns or sets  the tolerance text character space factor.  
    
    This defines the spacing between characters in text as a multiple of the
    standard character spacing for the current font 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextCharSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextCharSpaceFactor`` 
    
    :param toleranceTextCharSpaceFactor: 
    :type toleranceTextCharSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextColor: NXOpen.NXColor = ...
    """
    Returns or sets  the tolerance text color 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextColor`` 
    
    :param toleranceTextColor: 
    :type toleranceTextColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextFont: int = ...
    """
    Returns or sets  the tolerance text font 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextFont`` 
    
    :param toleranceTextFont: 
    :type toleranceTextFont: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextItalicized: bool = ...
    """
    Returns or sets  the tolerance text italic status 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextItalicized`` 
    
    :param toleranceTextItalicized: 
    :type toleranceTextItalicized: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextLineSpaceFactor: float = ...
    """
    Returns or sets  the tolerance text line space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextLineSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextLineSpaceFactor`` 
    
    :param toleranceTextLineSpaceFactor: 
    :type toleranceTextLineSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextLineWidth: LineWidth = ...
    """
    Returns or sets  the tolerance text line width.  
    
    The values for :py:class:`NXOpen.Annotations.LineWidth` when using standard font : 
    A value of :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` is equivalent to a value of "Regular" or "Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.ToleranceTextItalicized`` is set).
    Any value other than :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` 
    is equivalent to a value of "Bold" or "Bold Italic" (if :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.ToleranceTextItalicized`` is set).
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextLineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextLineWidth`` 
    
    :param toleranceTextLineWidth: 
    :type toleranceTextLineWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextSize: float = ...
    """
    Returns or sets  the tolerance text character size 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextSize`` 
    
    :param toleranceTextSize: 
    :type toleranceTextSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextSpaceFactor: float = ...
    """
    Returns or sets  the tolerance text space factor.  
    
    This contols the spacing between the dimension main text and the after tolerance text.
    The space is equal to the tolerance text character size multiplied by the space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextSpaceFactor`` 
    
    :param toleranceTextSpaceFactor: 
    :type toleranceTextSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceTextSymbolAspectRatio: float = ...
    """
    Returns or sets  the symbol aspect ratio for tolerance text (only available for symbols
    when using standard font).  
    
    This value controls the aspect ratio of text control sequences such as the 
    diameter symbol (represented by the &#x3C;O&#x3E; text control sequence), the 
    counterbore symbol (represented by the &#x3C;&#x23;C&#x3E; text control sequence), the 
    degree symbol (represented by the &#x3C;&#x24;s&#x3E; text control sequence), the true 
    position symbol (represented by the &#x3C;&#x26;10&#x3E; text control sequence), etc. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextSymbolAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextSymbolAspectRatio`` 
    
    :param toleranceTextSymbolAspect: 
    :type toleranceTextSymbolAspect: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TwoLineToleranceTextSize: float = ...
    """
    Returns or sets  the two-line tolerance text character size 
    
    <hr>
    
    Getter Method
    
    Signature ``TwoLineToleranceTextSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwoLineToleranceTextSize`` 
    
    :param twoLineToleranceTextSize: 
    :type twoLineToleranceTextSize: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: LetteringStyleBuilder = ...  # unknown typename


class DraftingImageFileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingImageFileType():
    """
    The export image file types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Png", "PNG file type"
       "Jpg", "JPG file type"
       "Tif", "TIF file type"
    """
    Png = 0  # DraftingImageFileTypeMemberType
    Jpg = 1  # DraftingImageFileTypeMemberType
    Tif = 2  # DraftingImageFileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingImage(Annotation):
    """
    Represents a drafting image   
    
    To obtain an instance of this class, use :py:class:`NXOpen.Annotations.DraftingImageCollection`.
    
    .. versionadded:: NX9.0.0
    """
    
    class FileType():
        """
        The export image file types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Png", "PNG file type"
           "Jpg", "JPG file type"
           "Tif", "TIF file type"
        """
        Png = 0  # DraftingImageFileTypeMemberType
        Jpg = 1  # DraftingImageFileTypeMemberType
        Tif = 2  # DraftingImageFileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetFileType(self) -> DraftingImageFileType:
        """
        Return the file type of the image associated with this object
        
        Signature ``GetFileType()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DraftingImageFileType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ExportFile(self) -> tuple:
        """
        Export the image file under the directory specified by 
        system environment variable UGII_TMP_DIR
        
        Signature ``ExportFile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (filename, fileExist). filename is a str. fileExist is a bool. 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Null: DraftingImage = ...  # unknown typename


class CoordinateNote(PmiAttribute):
    """
    Represents a Coordinate Note   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.CoordinateNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CoordinateNote = ...  # unknown typename


class GeneralArcLengthDimension(BaseArcLengthDimension):
    """
    Represents a arc length dimension   
    
    To obtain an instance of this class use :py:class:`NXOpen.Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralArcLengthDimension = ...  # unknown typename


class DefineTitleBlockBuilder(BaseTitleBlockBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DefineTitleBlockBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.TitleBlockCollection.CreateDefineTitleBlockBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Components: SelectTableSectionList = ...
    """
    Returns  the components, i.  
    
    e. tags of selected entities such as tabular notes 
    
    <hr>
    
    Getter Method
    
    Signature ``Components`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectTableSectionList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Origin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin of the title block.  
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns:  the origin  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin:  the origin  
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: DefineTitleBlockBuilder = ...  # unknown typename


class PmiChamferDimension(BaseChamferDimension):
    """
    Represents a PMI chamfer dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiChamferDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiChamferDimension = ...  # unknown typename


class GenericNote(BaseNote):
    """
    Represents a Generic Note   
    
    To obtain an instance of this class use :py:class:`NXOpen.Annotations.NoteCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GenericNote = ...  # unknown typename


class PmiLightweightSectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.LightweightSection` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.PmiManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLightweightSectionBuilder(self, view: LightweightSection) -> LightweightSectionBuilder:
        """
        Overloaded method CreateLightweightSectionBuilder
        
        * ``CreateLightweightSectionBuilder(view)`` 
        * ``CreateLightweightSectionBuilder(section)`` 
        
        <hr>
        
        Creates a :py:class:`NXOpen.Annotations.LightweightSectionBuilder`  
        
        Signature ``CreateLightweightSectionBuilder(view)`` 
        
        :param view:  the lightweight section to be edited,                                                                  if Annotations.LightweightSection.NULL,  then create a lightweight section  
        :type view: :py:class:`NXOpen.Annotations.LightweightSection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LightweightSectionBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def FindObject(self, name: str) -> LightweightSection:
        """
        Finds the lightweight section with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the lightweight section to be found  
        :type name: str 
        :returns:  Lightweight section with this name  
        :rtype: :py:class:`NXOpen.Annotations.LightweightSection` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class PmiFilterCollection(NXOpen.TaggedObjectCollection):
    """
    Represents the collection of all PMI filters in the part.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateByTypesFilter(self, componentMethod: PmiFilterComponentMethod, components: 'list[NXOpen.Assemblies.Component]', types: 'list[PmiFilterByTypeType]') -> PmiFilter:
        """
        Creates a PMI filter defines by a set of PMI types.  
        
        Signature ``CreateByTypesFilter(componentMethod, components, types)`` 
        
        :param componentMethod:  Specifies the component method applied to the components  
        :type componentMethod: :py:class:`NXOpen.Annotations.PmiFilterComponentMethod` 
        :param components:  Specifies the components in which the filter applies  
        :type components: list of :py:class:`NXOpen.Assemblies.Component` 
        :param types:  Specifies the types in which the filter applies  
        :type types: list of :py:class:`NXOpen.Annotations.PmiFilterByTypeType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiFilter` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateByViewsFilter(self, componentMethod: PmiFilterComponentMethod, components: 'list[NXOpen.Assemblies.Component]', views: 'list[str]') -> PmiFilter:
        """
        Creates a PMI filter defined by a set of model views.  
        
        Signature ``CreateByViewsFilter(componentMethod, components, views)`` 
        
        :param componentMethod:  Specifies the component method applied to the components  
        :type componentMethod: :py:class:`NXOpen.Annotations.PmiFilterComponentMethod` 
        :param components:  Specifies the components in which the filter applies  
        :type components: list of :py:class:`NXOpen.Assemblies.Component` 
        :param views:  Specified the views in which the filter applies  
        :type views: list of str 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiFilter` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateByPartsFilter(self, componentMethod: PmiFilterComponentMethod, components: 'list[NXOpen.Assemblies.Component]') -> PmiFilter:
        """
        Creates a PMI filter defined by a set of components  
        
        Signature ``CreateByPartsFilter(componentMethod, components)`` 
        
        :param componentMethod:  Specifies the component method applied to the components  
        :type componentMethod: :py:class:`NXOpen.Annotations.PmiFilterComponentMethod` 
        :param components:  Specifies the components in which the filter applies  
        :type components: list of :py:class:`NXOpen.Assemblies.Component` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiFilter` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    


class SymbolCatalogParameterBuilder(NXOpen.Builder):
    """
    This builder allows you to define one parameter for a symbol   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SymbolCatalogBuilder.NewParameter`
    
    .. versionadded:: NX8.0.0
    """
    Label: str = ...
    """
    Returns or sets  the label string of the parameter,
    NOTE: Client must free the returned char* with SM_free    
    
    <hr>
    
    Getter Method
    
    Signature ``Label`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Label`` 
    
    :param label: 
    :type label: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    LogicalName: str = ...
    """
    Returns or sets  the logical name of the parameter,
    NOTE: Client must free the returned char* with SM_free
    
    <hr>
    
    Getter Method
    
    Signature ``LogicalName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LogicalName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Value: str = ...
    """
    Returns or sets  the value string of the parameter,
    NOTE: Client must free the returned char* with SM_free
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param paraValue: 
    :type paraValue: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: SymbolCatalogParameterBuilder = ...  # unknown typename


class ForeshorteningSymbolSettingsBuilderSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ForeshorteningSymbolSettingsBuilderSymbolType():
    """
    Represents foreshortening symbol type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Regular", " - "
       "Stretched", " - "
    """
    Regular = 0  # ForeshorteningSymbolSettingsBuilderSymbolTypeMemberType
    Stretched = 1  # ForeshorteningSymbolSettingsBuilderSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ForeshorteningSymbolSettingsBuilderMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ForeshorteningSymbolSettingsBuilderMethodType():
    """
    Represents foreshortening symbol method type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WidthAndAngle", " - "
       "WidthAndHeight", " - "
    """
    WidthAndAngle = 0  # ForeshorteningSymbolSettingsBuilderMethodTypeMemberType
    WidthAndHeight = 1  # ForeshorteningSymbolSettingsBuilderMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ForeshorteningSymbolSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ForeshorteningSymbolSettingsBuilder` builder   
    
    .. versionadded:: NX10.0.0
    """
    
    class SymbolType():
        """
        Represents foreshortening symbol type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Regular", " - "
           "Stretched", " - "
        """
        Regular = 0  # ForeshorteningSymbolSettingsBuilderSymbolTypeMemberType
        Stretched = 1  # ForeshorteningSymbolSettingsBuilderSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MethodType():
        """
        Represents foreshortening symbol method type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WidthAndAngle", " - "
           "WidthAndHeight", " - "
        """
        WidthAndAngle = 0  # ForeshorteningSymbolSettingsBuilderMethodTypeMemberType
        WidthAndHeight = 1  # ForeshorteningSymbolSettingsBuilderMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Angle: float = ...
    """
    Returns or sets  the foreshortening symbol angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param foreshorteningSymbolAngle: 
    :type foreshorteningSymbolAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ForeshorteningSymbolMethodType: ForeshorteningSymbolSettingsBuilderMethodType = ...
    """
    Returns or sets  the foreshortening symbol method 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbolMethodType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolSettingsBuilderMethodType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForeshorteningSymbolMethodType`` 
    
    :param foreshorteningSymbolMethod: 
    :type foreshorteningSymbolMethod: :py:class:`NXOpen.Annotations.ForeshorteningSymbolSettingsBuilderMethodType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ForeshorteningSymbolType: ForeshorteningSymbolSettingsBuilderSymbolType = ...
    """
    Returns or sets  the foreshortening symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolSettingsBuilderSymbolType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForeshorteningSymbolType`` 
    
    :param foreshorteningSymbolType: 
    :type foreshorteningSymbolType: :py:class:`NXOpen.Annotations.ForeshorteningSymbolSettingsBuilderSymbolType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Height: float = ...
    """
    Returns or sets  the foreshortening symbol height 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param foreshorteningSymbolHeight: 
    :type foreshorteningSymbolHeight: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Width: float = ...
    """
    Returns or sets  the foreshortening symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param foreshorteningSymbolWidth: 
    :type foreshorteningSymbolWidth: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ForeshorteningSymbolSettingsBuilder = ...  # unknown typename


class IDatum(NXOpen.INXObject):
    """
    Represents interface class for a datum   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class BaseDatum(Gdt, IDatum):
    """
    Represents a datum   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.0
    """
    Label: str = ...
    """
    Returns or sets  the label.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Label`` 
    
    :returns:  Datum label  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Label`` 
    
    :param label:  New datum label  
    :type label: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: BaseDatum = ...  # unknown typename


class DraftingDatum(BaseDatum):
    """
    Represents a datum   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingDatumFeatureSymbolBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: DraftingDatum = ...  # unknown typename


class Datum(DraftingDatum, IPmi):
    """
    Represents a datum   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumFeatureSymbolBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: Datum = ...  # unknown typename


class ChamferDimensionBuilder(BaseChamferDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ChamferDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateChamferDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: ChamferDimensionBuilder = ...  # unknown typename


class OffsetCenterPointBuilderOffsetMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OffsetCenterPointBuilderOffset():
    """
    the valid offset method types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "HorizontalDistanceFromArc", "horizontal distance from arc"
       "HorizontalDistanceFromCenter", "horizontal distance from center"
       "HorizontalDistanceByPosition", "horizontal distance by position, applicable only for creation"
       "VerticalDistanceFromArc", "vertical distance from arc"
       "VerticalDistanceFromCenter", "vertical distance from center"
       "VerticalDistanceByPosition", "vertical distance by position, applicable only for creation"
    """
    HorizontalDistanceFromArc = 0  # OffsetCenterPointBuilderOffsetMemberType
    HorizontalDistanceFromCenter = 1  # OffsetCenterPointBuilderOffsetMemberType
    HorizontalDistanceByPosition = 2  # OffsetCenterPointBuilderOffsetMemberType
    VerticalDistanceFromArc = 3  # OffsetCenterPointBuilderOffsetMemberType
    VerticalDistanceFromCenter = 4  # OffsetCenterPointBuilderOffsetMemberType
    VerticalDistanceByPosition = 5  # OffsetCenterPointBuilderOffsetMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OffsetCenterPointBuilderDisplayMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OffsetCenterPointBuilderDisplay():
    """
    the valid types of display styles 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CenterPoint", "center point"
       "CenterLine", "center line"
       "CenterLineWithExtension", "center line with extension"
    """
    CenterPoint = 0  # OffsetCenterPointBuilderDisplayMemberType
    CenterLine = 1  # OffsetCenterPointBuilderDisplayMemberType
    CenterLineWithExtension = 2  # OffsetCenterPointBuilderDisplayMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OffsetCenterPointBuilderThicknessMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OffsetCenterPointBuilderThickness():
    """
    the valid types of offset center point thickness 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "thin"
       "Normal", "normal"
       "Thick", "thick"
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Thin = 0  # OffsetCenterPointBuilderThicknessMemberType
    Normal = 1  # OffsetCenterPointBuilderThicknessMemberType
    Thick = 2  # OffsetCenterPointBuilderThicknessMemberType
    One = 6  # OffsetCenterPointBuilderThicknessMemberType
    Two = 7  # OffsetCenterPointBuilderThicknessMemberType
    Three = 8  # OffsetCenterPointBuilderThicknessMemberType
    Four = 9  # OffsetCenterPointBuilderThicknessMemberType
    Five = 10  # OffsetCenterPointBuilderThicknessMemberType
    Six = 11  # OffsetCenterPointBuilderThicknessMemberType
    Seven = 12  # OffsetCenterPointBuilderThicknessMemberType
    Eight = 13  # OffsetCenterPointBuilderThicknessMemberType
    Nine = 14  # OffsetCenterPointBuilderThicknessMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OffsetCenterPointBuilder(BaseSymbolBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.OffsetCenterPoint` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.OffsetCenterPointCollection.CreateOffsetCenterPointBuilder`
    
    Default values.
    
    =============  ================================================
    Property       Value
    =============  ================================================
    CenterCross    3.175 (millimeters part), 0.125 (inches part) 
    -------------  ------------------------------------------------
    DisplayStyle   CenterPoint 
    -------------  ------------------------------------------------
    Distance       0 
    -------------  ------------------------------------------------
    Extension      6.35 (millimeters part), 0.25 (inches part) 
    -------------  ------------------------------------------------
    Gap            1.5875 (millimeters part), 0.0625 (inches part) 
    -------------  ------------------------------------------------
    OffsetMethod   HorizontalDistanceFromArc 
    -------------  ------------------------------------------------
    Width          Thin 
    =============  ================================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Offset():
        """
        the valid offset method types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "HorizontalDistanceFromArc", "horizontal distance from arc"
           "HorizontalDistanceFromCenter", "horizontal distance from center"
           "HorizontalDistanceByPosition", "horizontal distance by position, applicable only for creation"
           "VerticalDistanceFromArc", "vertical distance from arc"
           "VerticalDistanceFromCenter", "vertical distance from center"
           "VerticalDistanceByPosition", "vertical distance by position, applicable only for creation"
        """
        HorizontalDistanceFromArc = 0  # OffsetCenterPointBuilderOffsetMemberType
        HorizontalDistanceFromCenter = 1  # OffsetCenterPointBuilderOffsetMemberType
        HorizontalDistanceByPosition = 2  # OffsetCenterPointBuilderOffsetMemberType
        VerticalDistanceFromArc = 3  # OffsetCenterPointBuilderOffsetMemberType
        VerticalDistanceFromCenter = 4  # OffsetCenterPointBuilderOffsetMemberType
        VerticalDistanceByPosition = 5  # OffsetCenterPointBuilderOffsetMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Display():
        """
        the valid types of display styles 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CenterPoint", "center point"
           "CenterLine", "center line"
           "CenterLineWithExtension", "center line with extension"
        """
        CenterPoint = 0  # OffsetCenterPointBuilderDisplayMemberType
        CenterLine = 1  # OffsetCenterPointBuilderDisplayMemberType
        CenterLineWithExtension = 2  # OffsetCenterPointBuilderDisplayMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Thickness():
        """
        the valid types of offset center point thickness 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "thin"
           "Normal", "normal"
           "Thick", "thick"
           "One", "Width One"
           "Two", "Width Two"
           "Three", "Width Three"
           "Four", "Width Four"
           "Five", "Width Five"
           "Six", "Width Six"
           "Seven", "Width Seven"
           "Eight", "Width Eight"
           "Nine", "Width Nine"
        """
        Thin = 0  # OffsetCenterPointBuilderThicknessMemberType
        Normal = 1  # OffsetCenterPointBuilderThicknessMemberType
        Thick = 2  # OffsetCenterPointBuilderThicknessMemberType
        One = 6  # OffsetCenterPointBuilderThicknessMemberType
        Two = 7  # OffsetCenterPointBuilderThicknessMemberType
        Three = 8  # OffsetCenterPointBuilderThicknessMemberType
        Four = 9  # OffsetCenterPointBuilderThicknessMemberType
        Five = 10  # OffsetCenterPointBuilderThicknessMemberType
        Six = 11  # OffsetCenterPointBuilderThicknessMemberType
        Seven = 12  # OffsetCenterPointBuilderThicknessMemberType
        Eight = 13  # OffsetCenterPointBuilderThicknessMemberType
        Nine = 14  # OffsetCenterPointBuilderThicknessMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CenterCross: float = ...
    """
    Returns or sets  the center cross size 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterCross`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterCross`` 
    
    :param centerCross: 
    :type centerCross: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayStyle: OffsetCenterPointBuilderDisplay = ...
    """
    Returns or sets  the display style 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OffsetCenterPointBuilderDisplay` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStyle`` 
    
    :param display: 
    :type display: :py:class:`NXOpen.Annotations.OffsetCenterPointBuilderDisplay` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Distance: float = ...
    """
    Returns or sets  the offset distance, valid for all offset method types except those by position 
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Distance`` 
    
    :param distance: 
    :type distance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Extension: float = ...
    """
    Returns or sets  the extension 
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Extension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Gap: float = ...
    """
    Returns or sets  the gap 
    
    <hr>
    
    Getter Method
    
    Signature ``Gap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Gap`` 
    
    :param gap: 
    :type gap: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Location: NXOpen.SelectNXObject = ...
    """
    Returns  the location 
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OffsetMethod: OffsetCenterPointBuilderOffset = ...
    """
    Returns or sets  the offset method 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OffsetCenterPointBuilderOffset` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetMethod`` 
    
    :param offsetMethod: 
    :type offsetMethod: :py:class:`NXOpen.Annotations.OffsetCenterPointBuilderOffset` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OffsetPosition: NXOpen.Point3d = ...
    """
    Returns or sets  the offset position, valid for position offset methods 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetPosition`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Width: OffsetCenterPointBuilderThickness = ...
    """
    Returns or sets  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OffsetCenterPointBuilderThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Annotations.OffsetCenterPointBuilderThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: OffsetCenterPointBuilder = ...  # unknown typename


class TextJustificationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextJustification():
    """
    Represents the horizontal text justification 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", " - "
       "Center", " - "
       "Right", " - "
    """
    Left = 1  # TextJustificationMemberType
    Center = 2  # TextJustificationMemberType
    Right = 3  # TextJustificationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ParallelDimension(BaseParallelDimension):
    """
    Represents a parallel dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: ParallelDimension = ...  # unknown typename


class FrameBarStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.FrameBarStyleBuilder`.  
    
    This class queries and sets FrameBar preferences when creating and editing
    FrameBar drafting annotations.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AftPerpendicularStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style aft perpendicular
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BaselineStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style baseline
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BulkHeadsStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style bulk heads
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CenterlineYStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style centerline y
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DecksStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style decks
    
    <hr>
    
    Getter Method
    
    Signature ``DecksStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForwardPerpendicularStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style forward perpendicular
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InterTransverseFramesStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style inter transverse frames
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LongitudinalYFramesStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style longitudinal y frames
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LongitudinalZFramesStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style longitudinal z frames
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TransversalInsertAreaStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style transversal insert area
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TransverseFramesStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style transverse frames
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WaterlineStyle: FrameBarElementStyleBuilder = ...
    """
    Returns  the style waterline
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: FrameBarStyleBuilder = ...  # unknown typename


class GeneralPerpendicularDimension(BasePerpendicularDimension):
    """
    Represents a horizontal dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralPerpendicularDimension = ...  # unknown typename


class LinearTolerance(NXOpen.TransientObject):
    """
    Represents linear tolerance   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUpperToleranceInches(self) -> Value:
        """
        Returns the upper tolerance in inches  
        
        Signature ``GetUpperToleranceInches()`` 
        
        :returns:  Upper tolerance in inches  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUpperToleranceInches(self, upperToleranceInches: Value) -> None:
        """
        Sets the upper tolerance in inches 
        
        Signature ``SetUpperToleranceInches(upperToleranceInches)`` 
        
        :param upperToleranceInches:   New upper tolerance in inches  
        :type upperToleranceInches: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLowerToleranceInches(self) -> Value:
        """
        Returns the lower tolerance value in inches  
        
        Signature ``GetLowerToleranceInches()`` 
        
        :returns:  Lower tolerance in inches  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLowerToleranceInches(self, lowerToleranceInches: Value) -> None:
        """
        Sets the lower tolerance value in inches 
        
        Signature ``SetLowerToleranceInches(lowerToleranceInches)`` 
        
        :param lowerToleranceInches:  New lower tolerance in inches  
        :type lowerToleranceInches: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUpperToleranceMm(self) -> Value:
        """
        Returns the upper tolerance in millimeters(MM)  
        
        Signature ``GetUpperToleranceMm()`` 
        
        :returns:  Upper tolerance in millimeters  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUpperToleranceMm(self, upperToleranceMm: Value) -> None:
        """
        Sets the upper tolerance in millimeters(MM) 
        
        Signature ``SetUpperToleranceMm(upperToleranceMm)`` 
        
        :param upperToleranceMm:  New upper tolerance in millimeters  
        :type upperToleranceMm: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLowerToleranceMm(self) -> Value:
        """
        Returns the lower tolerance in millimeters(MM)  
        
        Signature ``GetLowerToleranceMm()`` 
        
        :returns:  Lower tolerance in millimeters  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLowerToleranceMm(self, lowerToleranceMm: Value) -> None:
        """
        Sets the lower tolerance in millimeters(MM) 
        
        Signature ``SetLowerToleranceMm(lowerToleranceMm)`` 
        
        :param lowerToleranceMm:  New lower tolerance in millimeters  
        :type lowerToleranceMm: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    DualDimensionDecimalPlaces: int = ...
    """
    Returns or sets  the number of decimal places for dual dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionDecimalPlaces`` 
    
    :returns:  Number of dual dimension decimal places  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionDecimalPlaces`` 
    
    :param dualDimensionDecimalPlaces:  New number of dual dimension decimal places  
    :type dualDimensionDecimalPlaces: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DualToleranceDecimalPlaces: int = ...
    """
    Returns or sets  the number of decimal places for dual tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DualToleranceDecimalPlaces`` 
    
    :returns:  Number of dual tolerance decimal places  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualToleranceDecimalPlaces`` 
    
    :param dualToleranceDecimalPlaces:  New number of dual tolerance decimal places  
    :type dualToleranceDecimalPlaces: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LimitFitAnsiHoleType: FitAnsiHoleType = ...
    """
    Returns or sets  the tolerance limit fit ansi hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :returns:  Limit fit tolerance ansi hole type  
    :rtype: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :param fitHoleType:  New limit tolerance ansi hole type  
    :type fitHoleType: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDeviation: str = ...
    """
    Returns or sets  the tolerance limit fit deviation 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDeviation`` 
    
    :returns:  Limit fit deviation  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDeviation`` 
    
    :param fitDeviation:  New limit fit deviation  
    :type fitDeviation: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplayStyle: FitDisplayStyle = ...
    """
    Returns or sets  the tolerance limit fit display style 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :returns:  Limit fit tolerance display style  
    :rtype: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :param fitDisplayStyle:  New limit tolerance display style  
    :type fitDisplayStyle: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitGrade: int = ...
    """
    Returns or sets  the tolerance limit fit grade 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitGrade`` 
    
    :returns:  Limit fit grade  
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitGrade`` 
    
    :param fitGrade:  New Limit fit grade  
    :type fitGrade: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    PrimaryDimensionDecimalPlaces: int = ...
    """
    Returns or sets  the number of decimal places for primary dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDimensionDecimalPlaces`` 
    
    :returns:  Number of primary dimension decimal places  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDimensionDecimalPlaces`` 
    
    :param primaryDimensionDecimalPlaces:  New number of primary dimension decimal places  
    :type primaryDimensionDecimalPlaces: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ToleranceType: ToleranceType = ...
    """
    Returns or sets  the tolerance type 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns:  Tolerance type  
    :rtype: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param type:  New tolerance type  
    :type type: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ZeroToleranceDisplayStyle: ZeroToleranceDisplayStyle = ...
    """
    Returns or sets  the zero tolerance display style 
    
    <hr>
    
    Getter Method
    
    Signature ``ZeroToleranceDisplayStyle`` 
    
    :returns:  Zero tolerance display style  
    :rtype: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZeroToleranceDisplayStyle`` 
    
    :param zeroDisplayStyle: 
    :type zeroDisplayStyle: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """


class OrdinateDoglegDefinitionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrdinateDoglegDefinition():
    """
    Specifies the ordinate dimension dogleg definition      
    
    A - Start offset
    
    B - End offset
    
    C - Dog leg angle
    
    _____________ Dimension Line
    |
    |
    B   |
    _______ |
    A           /
    /
    .   /
    .C / Dogleg Segement 
    . /
    _______./
    |
    |
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StartAndEnd", "Specifies start and end offeset defined"
       "StartAngle", "Specifies start offset and dogleg angle defined"
       "EndAngle", "Specifies end offset and dogleg angle defined"
       "Last", "Last enum value. Should not be used."
    """
    StartAndEnd = 0  # OrdinateDoglegDefinitionMemberType
    StartAngle = 1  # OrdinateDoglegDefinitionMemberType
    EndAngle = 2  # OrdinateDoglegDefinitionMemberType
    Last = 3  # OrdinateDoglegDefinitionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SuppressPMIBuilderSuppressionMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SuppressPMIBuilderSuppressionMethodType():
    """
    Suppression methods 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Unsuppress selected PMI objects."
       "Manual", "Suppress selected PMI objects."
       "CreateExpressionForEach", "Creates expressions for controlling the suppression of each selected PMI object."
       "CreateSharedExpression", "Creates a single expression for controlling the suppression of the selected PMI objects and suppresses them."
       "SelectExpression", "Allows selection of an expression to control the suppression of the selected PMI objects."
    """
    NotSet = 0  # SuppressPMIBuilderSuppressionMethodTypeMemberType
    Manual = 1  # SuppressPMIBuilderSuppressionMethodTypeMemberType
    CreateExpressionForEach = 2  # SuppressPMIBuilderSuppressionMethodTypeMemberType
    CreateSharedExpression = 3  # SuppressPMIBuilderSuppressionMethodTypeMemberType
    SelectExpression = 4  # SuppressPMIBuilderSuppressionMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SuppressPMIBuilder(NXOpen.Builder):
    """
    Represents Annotations.  
    
    SuppressPMIBuilder.
    This builder is used for controlling suppression of PMI objects either manually or
    through expressions. A suppressed PMI is not displayed and does not 
    participate in most of the PMI operations. 
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiManager.CreateSuppressPmibuilder`
    
    Default values.
    
    ==================  =====
    Property            Value
    ==================  =====
    SuppressionMethod   None 
    ==================  =====
    
    .. versionadded:: NX12.0.0
    """
    
    class SuppressionMethodType():
        """
        Suppression methods 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Unsuppress selected PMI objects."
           "Manual", "Suppress selected PMI objects."
           "CreateExpressionForEach", "Creates expressions for controlling the suppression of each selected PMI object."
           "CreateSharedExpression", "Creates a single expression for controlling the suppression of the selected PMI objects and suppresses them."
           "SelectExpression", "Allows selection of an expression to control the suppression of the selected PMI objects."
        """
        NotSet = 0  # SuppressPMIBuilderSuppressionMethodTypeMemberType
        Manual = 1  # SuppressPMIBuilderSuppressionMethodTypeMemberType
        CreateExpressionForEach = 2  # SuppressPMIBuilderSuppressionMethodTypeMemberType
        CreateSharedExpression = 3  # SuppressPMIBuilderSuppressionMethodTypeMemberType
        SelectExpression = 4  # SuppressPMIBuilderSuppressionMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SelectExpression(self, expression: NXOpen.Expression) -> None:
        """
        Selects the expression for suppression when the method is Select Expression 
        
        Signature ``SelectExpression(expression)`` 
        
        :param expression: 
        :type expression: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    SelectPMIObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected pmi objects 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPMIObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SuppressionMethod: SuppressPMIBuilderSuppressionMethodType = ...
    """
    Returns or sets  the suppression method 
    
    <hr>
    
    Getter Method
    
    Signature ``SuppressionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SuppressPMIBuilderSuppressionMethodType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SuppressionMethod`` 
    
    :param suppressionMethod: 
    :type suppressionMethod: :py:class:`NXOpen.Annotations.SuppressPMIBuilderSuppressionMethodType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: SuppressPMIBuilder = ...  # unknown typename


class ChamferOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChamferOrientationType():
    """
    Specifies the linear chamfer dimension orientation 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", "default (same as the adjacent edge)"
       "Vertical", "perpendicular with default"
       "Parallel", "parallel to the chamfer line itself"
    """
    Horizontal = 0  # ChamferOrientationTypeMemberType
    Vertical = 1  # ChamferOrientationTypeMemberType
    Parallel = 2  # ChamferOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DimensionSetCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.DimensionSet` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHorizontalBaselineDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> BaselineDimension:
        """
        Overloaded method CreateHorizontalBaselineDimension
        
        * ``CreateHorizontalBaselineDimension(dimensionData, origin)`` 
        * ``CreateHorizontalBaselineDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a horizontal baseline dimension.  
        
        Signature ``CreateHorizontalBaselineDimension(dimensionData, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New horizontal baseline dimension  
        :rtype: :py:class:`NXOpen.Annotations.BaselineDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiHorizontalBaselineDimension(self, dimensionData: DimensionData, pmidata: 'list[PmiData]', annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiBaselineDimension:
        """
        Creates a PMI horizontal baseline dimension.  
        
        Signature ``CreatePmiHorizontalBaselineDimension(dimensionData, pmidata, annotationPlane, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmidata:  List of PmiData objects  
        :type pmidata: list of :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimensions lie  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI horizontal baseline dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiBaselineDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateVerticalBaselineDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> BaselineDimension:
        """
        Creates a vertical baseline dimension.  
        
        Signature ``CreateVerticalBaselineDimension(dimensionData, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New vertical baseline dimension  
        :rtype: :py:class:`NXOpen.Annotations.BaselineDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiVerticalBaselineDimension(self, dimensionData: DimensionData, pmidata: 'list[PmiData]', annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiBaselineDimension:
        """
        Creates a PMI vertical baseline dimension.  
        
        Signature ``CreatePmiVerticalBaselineDimension(dimensionData, pmidata, annotationPlane, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmidata:  List of PmiData objects  
        :type pmidata: list of :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimensions lie  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI vertical baseline dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiBaselineDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateHorizontalChainDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> ChainDimension:
        """
        Overloaded method CreateHorizontalChainDimension
        
        * ``CreateHorizontalChainDimension(dimensionData, origin)`` 
        * ``CreateHorizontalChainDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a horizontal chain dimension.  
        
        Signature ``CreateHorizontalChainDimension(dimensionData, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New horizontal chain dimension  
        :rtype: :py:class:`NXOpen.Annotations.ChainDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiHorizontalChainDimension(self, dimensionData: DimensionData, pmidata: 'list[PmiData]', annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiChainDimension:
        """
        Creates a PMI horizontal chain dimension.  
        
        Signature ``CreatePmiHorizontalChainDimension(dimensionData, pmidata, annotationPlane, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmidata:  List of PmiData objects  
        :type pmidata: list of :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimensions lie  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI horizontal chain dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiChainDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateVerticalChainDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> ChainDimension:
        """
        Creates a vertical chain dimension.  
        
        Signature ``CreateVerticalChainDimension(dimensionData, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New vertical chain dimension  
        :rtype: :py:class:`NXOpen.Annotations.ChainDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiVerticalChainDimension(self, dimensionData: DimensionData, pmidata: 'list[PmiData]', annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiChainDimension:
        """
        Creates a PMI vertical chain dimension.  
        
        Signature ``CreatePmiVerticalChainDimension(dimensionData, pmidata, annotationPlane, origin)`` 
        
        :param dimensionData: 
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmidata:  List of PmiData objects  
        :type pmidata: list of :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimensions lie  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI vertical chain dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiChainDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    


class PmiCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Pmi` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.PmiManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def ExpandCollapsePmiNode(self, expand: bool) -> None:
        """
        Expand or collapse the PMI node in the Part Navigator.  
        
        Signature ``ExpandCollapsePmiNode(expand)`` 
        
        :param expand: 
        :type expand: bool 
        
        .. versionadded:: NX9.0.3
        
        License requirements: None.
        """
        ...
    


class NoteData(NXOpen.TransientObject):
    """
    Represents note data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetText(self) -> 'list[str]':
        """
        Returns the text  
        
        Signature ``GetText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetText(self, lines: 'list[str]') -> None:
        """
        Sets the text 
        
        Signature ``SetText(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSimpleDraftingAidPreferences(self) -> SimpleDraftingAidPreferences:
        """
        Returns the SimpleDraftingAidPreferences object  
        
        Signature ``GetSimpleDraftingAidPreferences()`` 
        
        :returns:  Note preferences  
        :rtype: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSimpleDraftingAidPreferences(self, preferences: SimpleDraftingAidPreferences) -> None:
        """
        Sets the SimpleDraftingAidPreferences object 
        
        Signature ``SetSimpleDraftingAidPreferences(preferences)`` 
        
        :param preferences:  New note preferences  
        :type preferences: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class SizeLetterCodeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SizeLetterCode():
    """
    Specifies the weld size letter code (ISO and DIN only) 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Specifies no letter code"
       "A", "Specifies size letter code "a""
       "C", "Specifies size letter code "c""
       "D", "Specifies size letter code "d""
       "S", "Specifies size letter code "s""
       "Z", "Specifies size letter code "z""
       "P", "Specifies size letter code "P""
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # SizeLetterCodeMemberType
    A = 1  # SizeLetterCodeMemberType
    C = 2  # SizeLetterCodeMemberType
    D = 3  # SizeLetterCodeMemberType
    S = 4  # SizeLetterCodeMemberType
    Z = 5  # SizeLetterCodeMemberType
    P = 6  # SizeLetterCodeMemberType
    Last = 7  # SizeLetterCodeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssociativityBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.AssociativityBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateAssociativityBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Angle: float = ...
    """
    Returns or sets  the angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    LineOption: AssociativityLineOption = ...
    """
    Returns or sets  the line option 
    
    <hr>
    
    Getter Method
    
    Signature ``LineOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociativityLineOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineOption`` 
    
    :param lineOption: 
    :type lineOption: :py:class:`NXOpen.Annotations.AssociativityLineOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SelectObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the select object 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Vector: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the vector 
    
    <hr>
    
    Getter Method
    
    Signature ``Vector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: AssociativityBuilder = ...  # unknown typename


class PartsListBuilderPartsListGrowDirectionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartsListBuilderPartsListGrowDirectionOptions():
    """
    Grow direction options
    The options specify the direction of growth for the parts list
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Up", " - "
       "Down", " - "
    """
    Up = 0  # PartsListBuilderPartsListGrowDirectionOptionsMemberType
    Down = 1  # PartsListBuilderPartsListGrowDirectionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartsListBuilderPartsListVerticalGroupLeaderAttachmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartsListBuilderPartsListVerticalGroupLeaderAttachment():
    """
    Represents leader attachment for vertical callout groups. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", " - "
       "Bottom", " - "
    """
    Top = 0  # PartsListBuilderPartsListVerticalGroupLeaderAttachmentMemberType
    Bottom = 1  # PartsListBuilderPartsListVerticalGroupLeaderAttachmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartsListBuilderPartsListShowLockedDeletedRowsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartsListBuilderPartsListShowLockedDeletedRows():
    """
    Locked deleted rows options
    The options specify how to show rows that are locked, but reference components that have been removed from the assembly
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Strikethrough", " - "
       "Blanked", " - "
       "Hidden", " - "
       "Ordinary", " - "
    """
    Strikethrough = 0  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
    Blanked = 1  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
    Hidden = 2  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
    Ordinary = 3  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartsListBuilderPartsListSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartsListBuilderPartsListSymbolType():
    """
    Symbol Types
    The types specify the balloon type used to call out members
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Circle", " - "
       "DividedCircle", " - "
       "TrianglePointedDown", " - "
       "TrianglePointedUp", " - "
       "Square", " - "
       "DividedSquare", " - "
       "Hexagon", " - "
       "DividedHexagon", " - "
       "QuadrantCircle", " - "
       "RoundedBox", " - "
       "Underline", " - "
       "Label", " - "
    """
    NotSet = 0  # PartsListBuilderPartsListSymbolTypeMemberType
    Circle = 1  # PartsListBuilderPartsListSymbolTypeMemberType
    DividedCircle = 2  # PartsListBuilderPartsListSymbolTypeMemberType
    TrianglePointedDown = 3  # PartsListBuilderPartsListSymbolTypeMemberType
    TrianglePointedUp = 4  # PartsListBuilderPartsListSymbolTypeMemberType
    Square = 5  # PartsListBuilderPartsListSymbolTypeMemberType
    DividedSquare = 6  # PartsListBuilderPartsListSymbolTypeMemberType
    Hexagon = 7  # PartsListBuilderPartsListSymbolTypeMemberType
    DividedHexagon = 8  # PartsListBuilderPartsListSymbolTypeMemberType
    QuadrantCircle = 9  # PartsListBuilderPartsListSymbolTypeMemberType
    RoundedBox = 10  # PartsListBuilderPartsListSymbolTypeMemberType
    Underline = 11  # PartsListBuilderPartsListSymbolTypeMemberType
    Label = 12  # PartsListBuilderPartsListSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartsListBuilderPartsListMainSymbolTextMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartsListBuilderPartsListMainSymbolText():
    """
    Main Symbol Text Types
    Specifies the text to display in the main callout symbol
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Callout", " - "
       "PartName", " - "
       "CalloutandQuantity", " - "
       "Custom", " - "
    """
    NotSet = 0  # PartsListBuilderPartsListMainSymbolTextMemberType
    Callout = 1  # PartsListBuilderPartsListMainSymbolTextMemberType
    PartName = 2  # PartsListBuilderPartsListMainSymbolTextMemberType
    CalloutandQuantity = 3  # PartsListBuilderPartsListMainSymbolTextMemberType
    Custom = 4  # PartsListBuilderPartsListMainSymbolTextMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartsListBuilderPartsListReferenceSymbolTextMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartsListBuilderPartsListReferenceSymbolText():
    """
    Reference Symbol Text Types
    Specifies the text to display in the reference callout symbol
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Callout", " - "
       "PartName", " - "
       "CalloutandQuantity", " - "
       "Custom", " - "
    """
    NotSet = 0  # PartsListBuilderPartsListReferenceSymbolTextMemberType
    Callout = 1  # PartsListBuilderPartsListReferenceSymbolTextMemberType
    PartName = 2  # PartsListBuilderPartsListReferenceSymbolTextMemberType
    CalloutandQuantity = 3  # PartsListBuilderPartsListReferenceSymbolTextMemberType
    Custom = 4  # PartsListBuilderPartsListReferenceSymbolTextMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartsListBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PartsListBuilder`.  
    
    This class queries and sets settings specific to parts list when creating or
    editing parts list settings.
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class PartsListGrowDirectionOptions():
        """
        Grow direction options
        The options specify the direction of growth for the parts list
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Up", " - "
           "Down", " - "
        """
        Up = 0  # PartsListBuilderPartsListGrowDirectionOptionsMemberType
        Down = 1  # PartsListBuilderPartsListGrowDirectionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PartsListVerticalGroupLeaderAttachment():
        """
        Represents leader attachment for vertical callout groups. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", " - "
           "Bottom", " - "
        """
        Top = 0  # PartsListBuilderPartsListVerticalGroupLeaderAttachmentMemberType
        Bottom = 1  # PartsListBuilderPartsListVerticalGroupLeaderAttachmentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PartsListShowLockedDeletedRows():
        """
        Locked deleted rows options
        The options specify how to show rows that are locked, but reference components that have been removed from the assembly
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Strikethrough", " - "
           "Blanked", " - "
           "Hidden", " - "
           "Ordinary", " - "
        """
        Strikethrough = 0  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
        Blanked = 1  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
        Hidden = 2  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
        Ordinary = 3  # PartsListBuilderPartsListShowLockedDeletedRowsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PartsListSymbolType():
        """
        Symbol Types
        The types specify the balloon type used to call out members
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Circle", " - "
           "DividedCircle", " - "
           "TrianglePointedDown", " - "
           "TrianglePointedUp", " - "
           "Square", " - "
           "DividedSquare", " - "
           "Hexagon", " - "
           "DividedHexagon", " - "
           "QuadrantCircle", " - "
           "RoundedBox", " - "
           "Underline", " - "
           "Label", " - "
        """
        NotSet = 0  # PartsListBuilderPartsListSymbolTypeMemberType
        Circle = 1  # PartsListBuilderPartsListSymbolTypeMemberType
        DividedCircle = 2  # PartsListBuilderPartsListSymbolTypeMemberType
        TrianglePointedDown = 3  # PartsListBuilderPartsListSymbolTypeMemberType
        TrianglePointedUp = 4  # PartsListBuilderPartsListSymbolTypeMemberType
        Square = 5  # PartsListBuilderPartsListSymbolTypeMemberType
        DividedSquare = 6  # PartsListBuilderPartsListSymbolTypeMemberType
        Hexagon = 7  # PartsListBuilderPartsListSymbolTypeMemberType
        DividedHexagon = 8  # PartsListBuilderPartsListSymbolTypeMemberType
        QuadrantCircle = 9  # PartsListBuilderPartsListSymbolTypeMemberType
        RoundedBox = 10  # PartsListBuilderPartsListSymbolTypeMemberType
        Underline = 11  # PartsListBuilderPartsListSymbolTypeMemberType
        Label = 12  # PartsListBuilderPartsListSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PartsListMainSymbolText():
        """
        Main Symbol Text Types
        Specifies the text to display in the main callout symbol
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Callout", " - "
           "PartName", " - "
           "CalloutandQuantity", " - "
           "Custom", " - "
        """
        NotSet = 0  # PartsListBuilderPartsListMainSymbolTextMemberType
        Callout = 1  # PartsListBuilderPartsListMainSymbolTextMemberType
        PartName = 2  # PartsListBuilderPartsListMainSymbolTextMemberType
        CalloutandQuantity = 3  # PartsListBuilderPartsListMainSymbolTextMemberType
        Custom = 4  # PartsListBuilderPartsListMainSymbolTextMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PartsListReferenceSymbolText():
        """
        Reference Symbol Text Types
        Specifies the text to display in the reference callout symbol
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Callout", " - "
           "PartName", " - "
           "CalloutandQuantity", " - "
           "Custom", " - "
        """
        NotSet = 0  # PartsListBuilderPartsListReferenceSymbolTextMemberType
        Callout = 1  # PartsListBuilderPartsListReferenceSymbolTextMemberType
        PartName = 2  # PartsListBuilderPartsListReferenceSymbolTextMemberType
        CalloutandQuantity = 3  # PartsListBuilderPartsListReferenceSymbolTextMemberType
        Custom = 4  # PartsListBuilderPartsListReferenceSymbolTextMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AllowManualRows: bool = ...
    """
    Returns or sets  the allow manual rows option that determines whether or not manual rows are allowed to be inserted into a parts list 
    
    <hr>
    
    Getter Method
    
    Signature ``AllowManualRows`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowManualRows`` 
    
    :param allowManualRows: 
    :type allowManualRows: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AutomaticUpdate: bool = ...
    """
    Returns or sets  the automatic update option to determine whether or not the parts list updates automatically whenever a change occurs to a referenced object in the model 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticUpdate`` 
    
    :param automaticUpdate: 
    :type automaticUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CalloutSuffix: str = ...
    """
    Returns or sets  the callout suffix specifies the suffix to be used for reference symbol text 
    
    <hr>
    
    Getter Method
    
    Signature ``CalloutSuffix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalloutSuffix`` 
    
    :param calloutSuffix: 
    :type calloutSuffix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CharToSkip: str = ...
    """
    Returns or sets  the characters to skip specifies the characters to be skipped for callouts 
    
    <hr>
    
    Getter Method
    
    Signature ``CharToSkip`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CharToSkip`` 
    
    :param charsToSkip: 
    :type charsToSkip: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CreateNewRowAsLocked: bool = ...
    """
    Returns or sets  the create new row as locked option that determines whether new rows in the parts list are locked automatically on creation 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateNewRowAsLocked`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateNewRowAsLocked`` 
    
    :param createNewRowAsLocked: 
    :type createNewRowAsLocked: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    GrowDirectionOptions: PartsListBuilderPartsListGrowDirectionOptions = ...
    """
    Returns or sets  the grow direction options that specify the direction of growth for the parts list 
    
    <hr>
    
    Getter Method
    
    Signature ``GrowDirectionOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListGrowDirectionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GrowDirectionOptions`` 
    
    :param growDirectionOptions: 
    :type growDirectionOptions: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListGrowDirectionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HighlightColor: NXOpen.NXColor = ...
    """
    Returns or sets  the highlight color specifies the color used for the delimiters that highlight manual cell text 
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightColor`` 
    
    :param highlightColor: 
    :type highlightColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HighlightManualText: bool = ...
    """
    Returns or sets  the highlight manual text specifies whether manual cell text is to be highlighted by delimiters 
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightManualText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightManualText`` 
    
    :param highlightManualText: 
    :type highlightManualText: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Increment: int = ...
    """
    Returns or sets  the increment specifies the value by which consecutive callout values are be incremented 
    
    <hr>
    
    Getter Method
    
    Signature ``Increment`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Increment`` 
    
    :param increment: 
    :type increment: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    InitialCallout: str = ...
    """
    Returns or sets  the initial callout specifies the text string used to represent the first callout in the parts list 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialCallout`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialCallout`` 
    
    :param initialCallout: 
    :type initialCallout: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    LockPartsListSetup: bool = ...
    """
    Returns or sets  the Lock Parts List Setup option that determines Is the parts list setup protected/locked 
    
    <hr>
    
    Getter Method
    
    Signature ``LockPartsListSetup`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockPartsListSetup`` 
    
    :param lockPartsListSetup: 
    :type lockPartsListSetup: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MainSymbolCustomText: str = ...
    """
    Returns or sets  the main symbol custom text specifies the custom text to display in the main callout symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``MainSymbolCustomText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MainSymbolCustomText`` 
    
    :param mainSymbolCustomText: 
    :type mainSymbolCustomText: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MainSymbolText: PartsListBuilderPartsListMainSymbolText = ...
    """
    Returns or sets  the main symbol text specifies the text to display in the main callout symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``MainSymbolText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListMainSymbolText` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MainSymbolText`` 
    
    :param mainSymbolText: 
    :type mainSymbolText: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListMainSymbolText` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReferenceSymbolCustomText: str = ...
    """
    Returns or sets  the reference symbol custom text specifies the custom text to display in the main callout symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceSymbolCustomText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceSymbolCustomText`` 
    
    :param referenceSymbolCustomText: 
    :type referenceSymbolCustomText: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReferenceSymbolText: PartsListBuilderPartsListReferenceSymbolText = ...
    """
    Returns or sets  the reference symbol text specifies the text to display in the reference callout symbol
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceSymbolText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListReferenceSymbolText` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceSymbolText`` 
    
    :param referenceSymbolText: 
    :type referenceSymbolText: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListReferenceSymbolText` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ShowLockedDeletedRows: PartsListBuilderPartsListShowLockedDeletedRows = ...
    """
    Returns or sets  the show locked deleted rows option to show rows that are locked, but reference components that have been removed from the assembly 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowLockedDeletedRows`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListShowLockedDeletedRows` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowLockedDeletedRows`` 
    
    :param showLockedDeletedRows: 
    :type showLockedDeletedRows: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListShowLockedDeletedRows` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ShowReferenceCalloutSuffix: bool = ...
    """
    Returns or sets  the flag indicating whether the reference callout suffix will be displayed.  
    
    A value of true indicates that the suffix will be displayed. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowReferenceCalloutSuffix`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowReferenceCalloutSuffix`` 
    
    :param showReferenceCalloutSuffix: 
    :type showReferenceCalloutSuffix: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SortOnUpdate: bool = ...
    """
    Returns or sets  the sort on update option that determines whether or not the parts list sorts automatically during update 
    
    <hr>
    
    Getter Method
    
    Signature ``SortOnUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SortOnUpdate`` 
    
    :param sortOnUpdate: 
    :type sortOnUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Symbol: PartsListBuilderPartsListSymbolType = ...
    """
    Returns or sets  the symbol type specifies the balloon type used to call out members 
    
    <hr>
    
    Getter Method
    
    Signature ``Symbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListSymbolType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Symbol`` 
    
    :param symbol: 
    :type symbol: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListSymbolType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    VerticalGroupAttachment: PartsListBuilderPartsListVerticalGroupLeaderAttachment = ...
    """
    Returns or sets  the leader attachment to vertical callout groups 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalGroupAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListVerticalGroupLeaderAttachment` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalGroupAttachment`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Annotations.PartsListBuilderPartsListVerticalGroupLeaderAttachment` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: PartsListBuilder = ...  # unknown typename


class GeneralNote(PmiAttribute):
    """
    Represents a General Note   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.GeneralNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralNote = ...  # unknown typename


class Value():
    """
    Specifies the value data .  
    
    Constructor: 
    NXOpen.Annotations.Value()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    ItemValue: float = ...
    """
    Value of the item 
    <hr>
    
    Field Value
    Type:float
    """
    ValueExpression: NXOpen.Expression = ...
    """
    Expression representing the value.  
    
    None, if not used. 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Expression`
    """
    ValuePrecision: int = ...
    """
    Value precision 
    <hr>
    
    Field Value
    Type:int
    """


class RadiusSymbolMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RadiusSymbol():
    """
    Specifies the radius symbol 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "R", "Specifies R symbol"
       "RAD", "Specfies RAD symbol"
       "UserDefined", "Specfies user defined symbol"
       "SR", "Specifes SR symbol"
       "CR", "Specifies CR symbol"
       "Last", "Last enum value. Should not be used."
    """
    R = 0  # RadiusSymbolMemberType
    RAD = 1  # RadiusSymbolMemberType
    UserDefined = 2  # RadiusSymbolMemberType
    SR = 3  # RadiusSymbolMemberType
    CR = 4  # RadiusSymbolMemberType
    Last = 5  # RadiusSymbolMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldDataBuilderFinishSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldDataBuilderFinishSymbolType():
    """
    Represents the finish symbol type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Chipping", " - "
       "Grinding", " - "
       "Hammering", " - "
       "Machining", " - "
       "Rolling", " - "
       "Peening", " - "
    """
    NotSet = 0  # LineWeldDataBuilderFinishSymbolTypeMemberType
    Chipping = 1  # LineWeldDataBuilderFinishSymbolTypeMemberType
    Grinding = 2  # LineWeldDataBuilderFinishSymbolTypeMemberType
    Hammering = 3  # LineWeldDataBuilderFinishSymbolTypeMemberType
    Machining = 4  # LineWeldDataBuilderFinishSymbolTypeMemberType
    Rolling = 5  # LineWeldDataBuilderFinishSymbolTypeMemberType
    Peening = 6  # LineWeldDataBuilderFinishSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldDataBuilderContourSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldDataBuilderContourSymbolType():
    """
    Represents the contour symbol type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Convex", " - "
       "Flat", " - "
       "Concave", " - "
       "BlendedToesIsoAndDinOnly", " - "
       "BackingStripPermanentIsoAndDinOnly", " - "
       "BackingStripRemovableIsoAndDinOnly", " - "
       "MeltThrough", " - "
       "Flush", " - "
       "MachiningGradedJunction", " - "
    """
    NotSet = 0  # LineWeldDataBuilderContourSymbolTypeMemberType
    Convex = 1  # LineWeldDataBuilderContourSymbolTypeMemberType
    Flat = 2  # LineWeldDataBuilderContourSymbolTypeMemberType
    Concave = 3  # LineWeldDataBuilderContourSymbolTypeMemberType
    BlendedToesIsoAndDinOnly = 4  # LineWeldDataBuilderContourSymbolTypeMemberType
    BackingStripPermanentIsoAndDinOnly = 5  # LineWeldDataBuilderContourSymbolTypeMemberType
    BackingStripRemovableIsoAndDinOnly = 6  # LineWeldDataBuilderContourSymbolTypeMemberType
    MeltThrough = 7  # LineWeldDataBuilderContourSymbolTypeMemberType
    Flush = 8  # LineWeldDataBuilderContourSymbolTypeMemberType
    MachiningGradedJunction = 9  # LineWeldDataBuilderContourSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldDataBuilderWeldSizeCodeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldDataBuilderWeldSizeCodeType():
    """
    Represents the weld size code type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "A", " - "
       "C", " - "
       "D", " - "
       "S", " - "
       "Z", " - "
       "P", " - "
    """
    NotSet = 0  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
    A = 1  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
    C = 2  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
    D = 3  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
    S = 4  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
    Z = 5  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
    P = 6  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldDataBuilderWeldSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWeldDataBuilderWeldSymbolType():
    """
    Represents the weld symbol type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "ButtWeldWithRaisedEdges", " - "
       "SingleFlange", " - "
       "SquareButt", " - "
       "VButt", " - "
       "VButtWithBroadRootFace", " - "
       "BevelButt", " - "
       "BevelButtWithBroadRootFace", " - "
       "UButt", " - "
       "JButt", " - "
       "FlareV", " - "
       "FlareBevel", " - "
       "KGroove", ".."
       "Fillet", " - "
       "Stake", " - "
       "PlugSlot", " - "
       "Edge", " - "
       "Edge2", " - "
       "Spot", " - "
       "Spot2", " - "
       "Seam", " - "
       "Seam2", " - "
       "SteepFlankedVButt", " - "
       "SteepFlankedBevelButt", " - "
       "Backing", " - "
       "SurfaceJoint", " - "
       "SolderedJoint", " - "
       "InclinedJoint", " - "
       "FoldJoint", " - "
       "Stud", " - "
       "Surfacing", " - "
       "Intermittent", " - "
       "BackingPlate", " - "
       "NotSpecified", " - "
    """
    NotSet = 0  # LineWeldDataBuilderWeldSymbolTypeMemberType
    ButtWeldWithRaisedEdges = 1  # LineWeldDataBuilderWeldSymbolTypeMemberType
    SingleFlange = 2  # LineWeldDataBuilderWeldSymbolTypeMemberType
    SquareButt = 3  # LineWeldDataBuilderWeldSymbolTypeMemberType
    VButt = 4  # LineWeldDataBuilderWeldSymbolTypeMemberType
    VButtWithBroadRootFace = 5  # LineWeldDataBuilderWeldSymbolTypeMemberType
    BevelButt = 6  # LineWeldDataBuilderWeldSymbolTypeMemberType
    BevelButtWithBroadRootFace = 7  # LineWeldDataBuilderWeldSymbolTypeMemberType
    UButt = 8  # LineWeldDataBuilderWeldSymbolTypeMemberType
    JButt = 9  # LineWeldDataBuilderWeldSymbolTypeMemberType
    FlareV = 10  # LineWeldDataBuilderWeldSymbolTypeMemberType
    FlareBevel = 11  # LineWeldDataBuilderWeldSymbolTypeMemberType
    KGroove = 12  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Fillet = 13  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Stake = 14  # LineWeldDataBuilderWeldSymbolTypeMemberType
    PlugSlot = 15  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Edge = 16  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Edge2 = 17  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Spot = 18  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Spot2 = 19  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Seam = 20  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Seam2 = 21  # LineWeldDataBuilderWeldSymbolTypeMemberType
    SteepFlankedVButt = 22  # LineWeldDataBuilderWeldSymbolTypeMemberType
    SteepFlankedBevelButt = 23  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Backing = 24  # LineWeldDataBuilderWeldSymbolTypeMemberType
    SurfaceJoint = 25  # LineWeldDataBuilderWeldSymbolTypeMemberType
    SolderedJoint = 26  # LineWeldDataBuilderWeldSymbolTypeMemberType
    InclinedJoint = 27  # LineWeldDataBuilderWeldSymbolTypeMemberType
    FoldJoint = 28  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Stud = 29  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Surfacing = 30  # LineWeldDataBuilderWeldSymbolTypeMemberType
    Intermittent = 31  # LineWeldDataBuilderWeldSymbolTypeMemberType
    BackingPlate = 32  # LineWeldDataBuilderWeldSymbolTypeMemberType
    NotSpecified = 33  # LineWeldDataBuilderWeldSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineWeldDataBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.LineWeldDataBuilder`   
    
    .. versionadded:: NX6.0.0
    """
    
    class FinishSymbolType():
        """
        Represents the finish symbol type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Chipping", " - "
           "Grinding", " - "
           "Hammering", " - "
           "Machining", " - "
           "Rolling", " - "
           "Peening", " - "
        """
        NotSet = 0  # LineWeldDataBuilderFinishSymbolTypeMemberType
        Chipping = 1  # LineWeldDataBuilderFinishSymbolTypeMemberType
        Grinding = 2  # LineWeldDataBuilderFinishSymbolTypeMemberType
        Hammering = 3  # LineWeldDataBuilderFinishSymbolTypeMemberType
        Machining = 4  # LineWeldDataBuilderFinishSymbolTypeMemberType
        Rolling = 5  # LineWeldDataBuilderFinishSymbolTypeMemberType
        Peening = 6  # LineWeldDataBuilderFinishSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContourSymbolType():
        """
        Represents the contour symbol type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Convex", " - "
           "Flat", " - "
           "Concave", " - "
           "BlendedToesIsoAndDinOnly", " - "
           "BackingStripPermanentIsoAndDinOnly", " - "
           "BackingStripRemovableIsoAndDinOnly", " - "
           "MeltThrough", " - "
           "Flush", " - "
           "MachiningGradedJunction", " - "
        """
        NotSet = 0  # LineWeldDataBuilderContourSymbolTypeMemberType
        Convex = 1  # LineWeldDataBuilderContourSymbolTypeMemberType
        Flat = 2  # LineWeldDataBuilderContourSymbolTypeMemberType
        Concave = 3  # LineWeldDataBuilderContourSymbolTypeMemberType
        BlendedToesIsoAndDinOnly = 4  # LineWeldDataBuilderContourSymbolTypeMemberType
        BackingStripPermanentIsoAndDinOnly = 5  # LineWeldDataBuilderContourSymbolTypeMemberType
        BackingStripRemovableIsoAndDinOnly = 6  # LineWeldDataBuilderContourSymbolTypeMemberType
        MeltThrough = 7  # LineWeldDataBuilderContourSymbolTypeMemberType
        Flush = 8  # LineWeldDataBuilderContourSymbolTypeMemberType
        MachiningGradedJunction = 9  # LineWeldDataBuilderContourSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WeldSizeCodeType():
        """
        Represents the weld size code type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "A", " - "
           "C", " - "
           "D", " - "
           "S", " - "
           "Z", " - "
           "P", " - "
        """
        NotSet = 0  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
        A = 1  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
        C = 2  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
        D = 3  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
        S = 4  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
        Z = 5  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
        P = 6  # LineWeldDataBuilderWeldSizeCodeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WeldSymbolType():
        """
        Represents the weld symbol type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "ButtWeldWithRaisedEdges", " - "
           "SingleFlange", " - "
           "SquareButt", " - "
           "VButt", " - "
           "VButtWithBroadRootFace", " - "
           "BevelButt", " - "
           "BevelButtWithBroadRootFace", " - "
           "UButt", " - "
           "JButt", " - "
           "FlareV", " - "
           "FlareBevel", " - "
           "KGroove", ".."
           "Fillet", " - "
           "Stake", " - "
           "PlugSlot", " - "
           "Edge", " - "
           "Edge2", " - "
           "Spot", " - "
           "Spot2", " - "
           "Seam", " - "
           "Seam2", " - "
           "SteepFlankedVButt", " - "
           "SteepFlankedBevelButt", " - "
           "Backing", " - "
           "SurfaceJoint", " - "
           "SolderedJoint", " - "
           "InclinedJoint", " - "
           "FoldJoint", " - "
           "Stud", " - "
           "Surfacing", " - "
           "Intermittent", " - "
           "BackingPlate", " - "
           "NotSpecified", " - "
        """
        NotSet = 0  # LineWeldDataBuilderWeldSymbolTypeMemberType
        ButtWeldWithRaisedEdges = 1  # LineWeldDataBuilderWeldSymbolTypeMemberType
        SingleFlange = 2  # LineWeldDataBuilderWeldSymbolTypeMemberType
        SquareButt = 3  # LineWeldDataBuilderWeldSymbolTypeMemberType
        VButt = 4  # LineWeldDataBuilderWeldSymbolTypeMemberType
        VButtWithBroadRootFace = 5  # LineWeldDataBuilderWeldSymbolTypeMemberType
        BevelButt = 6  # LineWeldDataBuilderWeldSymbolTypeMemberType
        BevelButtWithBroadRootFace = 7  # LineWeldDataBuilderWeldSymbolTypeMemberType
        UButt = 8  # LineWeldDataBuilderWeldSymbolTypeMemberType
        JButt = 9  # LineWeldDataBuilderWeldSymbolTypeMemberType
        FlareV = 10  # LineWeldDataBuilderWeldSymbolTypeMemberType
        FlareBevel = 11  # LineWeldDataBuilderWeldSymbolTypeMemberType
        KGroove = 12  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Fillet = 13  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Stake = 14  # LineWeldDataBuilderWeldSymbolTypeMemberType
        PlugSlot = 15  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Edge = 16  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Edge2 = 17  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Spot = 18  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Spot2 = 19  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Seam = 20  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Seam2 = 21  # LineWeldDataBuilderWeldSymbolTypeMemberType
        SteepFlankedVButt = 22  # LineWeldDataBuilderWeldSymbolTypeMemberType
        SteepFlankedBevelButt = 23  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Backing = 24  # LineWeldDataBuilderWeldSymbolTypeMemberType
        SurfaceJoint = 25  # LineWeldDataBuilderWeldSymbolTypeMemberType
        SolderedJoint = 26  # LineWeldDataBuilderWeldSymbolTypeMemberType
        InclinedJoint = 27  # LineWeldDataBuilderWeldSymbolTypeMemberType
        FoldJoint = 28  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Stud = 29  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Surfacing = 30  # LineWeldDataBuilderWeldSymbolTypeMemberType
        Intermittent = 31  # LineWeldDataBuilderWeldSymbolTypeMemberType
        BackingPlate = 32  # LineWeldDataBuilderWeldSymbolTypeMemberType
        NotSpecified = 33  # LineWeldDataBuilderWeldSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CompoundWeldSize: str = ...
    """
    Returns or sets  the compound weld size 
    
    <hr>
    
    Getter Method
    
    Signature ``CompoundWeldSize`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompoundWeldSize`` 
    
    :param compoundWeldSize: 
    :type compoundWeldSize: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    CompoundWeldSizeCode: LineWeldDataBuilderWeldSizeCodeType = ...
    """
    Returns or sets  the compound weld size letter code 
    
    <hr>
    
    Getter Method
    
    Signature ``CompoundWeldSizeCode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldDataBuilderWeldSizeCodeType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompoundWeldSizeCode`` 
    
    :param compoundWeldSizeCode: 
    :type compoundWeldSizeCode: :py:class:`NXOpen.Annotations.LineWeldDataBuilderWeldSizeCodeType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ContourSymbol: LineWeldDataBuilderContourSymbolType = ...
    """
    Returns or sets  the supplementary contour weld symbols that identify the shape of the weld surface or execution of a weld for both top and bottom of the reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``ContourSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldDataBuilderContourSymbolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContourSymbol`` 
    
    :param contourSymbol: 
    :type contourSymbol: :py:class:`NXOpen.Annotations.LineWeldDataBuilderContourSymbolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    FinishSymbol: LineWeldDataBuilderFinishSymbolType = ...
    """
    Returns or sets  the finishing method for the weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``FinishSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldDataBuilderFinishSymbolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FinishSymbol`` 
    
    :param finishSymbol: 
    :type finishSymbol: :py:class:`NXOpen.Annotations.LineWeldDataBuilderFinishSymbolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    GrooveCountersinkAngle: str = ...
    """
    Returns or sets  the groove or coutersink angle
    
    <hr>
    
    Getter Method
    
    Signature ``GrooveCountersinkAngle`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GrooveCountersinkAngle`` 
    
    :param grooveCountersinkAngle: 
    :type grooveCountersinkAngle: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    IsCompound: bool = ...
    """
    Returns or sets  the compound weld 
    
    <hr>
    
    Getter Method
    
    Signature ``IsCompound`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsCompound`` 
    
    :param isCompound: 
    :type isCompound: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    LengthPitch: str = ...
    """
    Returns or sets  the length or pitch 
    
    <hr>
    
    Getter Method
    
    Signature ``LengthPitch`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LengthPitch`` 
    
    :param lengthPitch: 
    :type lengthPitch: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    NumberRootDepth: str = ...
    """
    Returns or sets  the number of welds or root opening or depth of weld 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberRootDepth`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberRootDepth`` 
    
    :param numberRootDepth: 
    :type numberRootDepth: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    WeldSize: str = ...
    """
    Returns or sets  the weld size 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSize`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSize`` 
    
    :param weldSize: 
    :type weldSize: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    WeldSizeCode: LineWeldDataBuilderWeldSizeCodeType = ...
    """
    Returns or sets  the weld size letter code 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSizeCode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldDataBuilderWeldSizeCodeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSizeCode`` 
    
    :param weldSizeCode: 
    :type weldSizeCode: :py:class:`NXOpen.Annotations.LineWeldDataBuilderWeldSizeCodeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    WeldSymbol: LineWeldDataBuilderWeldSymbolType = ...
    """
    Returns or sets  the weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWeldDataBuilderWeldSymbolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSymbol`` 
    
    :param weldSymbol: 
    :type weldSymbol: :py:class:`NXOpen.Annotations.LineWeldDataBuilderWeldSymbolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: LineWeldDataBuilder = ...  # unknown typename


class LeaderSideMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderSide():
    """
    Specifies which side the leader will be on 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Null", "Should not be used"
       "Left", " - "
       "Right", " - "
       "Inferred", "When used with NXOpen API, leader side will be set to Left by default. This is only used while interacting with NX UI"
       "Last", "Last enum value. Should not be used."
    """
    Null = -1  # LeaderSideMemberType
    Left = 0  # LeaderSideMemberType
    Right = 1  # LeaderSideMemberType
    Inferred = 2  # LeaderSideMemberType
    Last = 3  # LeaderSideMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DatumReferenceBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DatumReferenceBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DatumReferenceBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DatumReferenceBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DatumReferenceBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DatumReferenceBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DatumReferenceBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DatumReferenceBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DatumReferenceBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DatumReferenceBuilder, object2: DatumReferenceBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DatumReferenceBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DatumReferenceBuilderList = ...  # unknown typename


class GeneralDiameterDimension(BaseDiameterDimension):
    """
    Represents a horizontal dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralDiameterDimension = ...  # unknown typename


class MasterCustomSymbol(NXOpen.TaggedObject):
    """
    Represents a custom symbol   
    
    .. versionadded:: NX4.0.0
    """
    Null: MasterCustomSymbol = ...  # unknown typename


class TextOrientationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextOrientation():
    """
    Specifies the dimension text orientation 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", "Specifies horizontal dimension text"
       "Aligned", "Specifies dimenson text aligned with the dimension line"
       "OverDimensionLine", "Specifies dimenson text aligned with and above the dimension line"
       "ByAngle", "Specifies dimension text at angle"
       "Perpendicular", "Specifies dimension text perpendicular to the dimension line"
       "SplitByDimensionLine", "Specifies dimenson text split by the dimension line"
       "Last", "Last enum value. Should not be used."
    """
    Horizontal = 0  # TextOrientationMemberType
    Aligned = 1  # TextOrientationMemberType
    OverDimensionLine = 2  # TextOrientationMemberType
    ByAngle = 3  # TextOrientationMemberType
    Perpendicular = 4  # TextOrientationMemberType
    SplitByDimensionLine = 5  # TextOrientationMemberType
    Last = 6  # TextOrientationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MaterialSpecificationBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.MaterialSpecification` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateMaterialSpecificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetMaterialProperties(self) -> 'list[str]':
        """
        Returns the material properties  
        
        Signature ``GetMaterialProperties()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMaterialProperties(self, materialProperties: 'list[str]') -> None:
        """
        Sets the material properties 
        
        Signature ``SetMaterialProperties(materialProperties)`` 
        
        :param materialProperties: 
        :type materialProperties: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNomenclature(self) -> 'list[str]':
        """
        Returns the nomenclature  
        
        Signature ``GetNomenclature()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNomenclature(self, nomenclature: 'list[str]') -> None:
        """
        Sets the nomenclature 
        
        Signature ``SetNomenclature(nomenclature)`` 
        
        :param nomenclature: 
        :type nomenclature: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOpenField(self) -> 'list[str]':
        """
        Returns the open field  
        
        Signature ``GetOpenField()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOpenField(self, openField: 'list[str]') -> None:
        """
        Sets the open field 
        
        Signature ``SetOpenField(openField)`` 
        
        :param openField: 
        :type openField: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    AvailableMaterial: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``AvailableMaterial`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AvailableMaterial`` 
    
    :param availableMaterial: 
    :type availableMaterial: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Category: str = ...
    """
    Returns or sets  the category 
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MaterialType: str = ...
    """
    Returns or sets  the material type 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialType`` 
    
    :param materialType: 
    :type materialType: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: MaterialSpecificationBuilder = ...  # unknown typename


class PmiThicknessDimensionBuilder(BaseThicknessDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiConcentricCircleDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiThicknessDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PmiThicknessDimensionBuilder = ...  # unknown typename


class PmiStringBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiString` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiStringBuilder`
    
    .. versionadded:: NX6.0.0
    """
    StringValue: str = ...
    """
    Returns or sets  the str value 
    
    <hr>
    
    Getter Method
    
    Signature ``StringValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringValue`` 
    
    :param stringValue: 
    :type stringValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiStringBuilder = ...  # unknown typename


class HorizontalDimension(BaseHorizontalDimension):
    """
    Represents a horizontal dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: HorizontalDimension = ...  # unknown typename


class DraftingSurfaceFinish(BaseSurfaceFinish):
    """
    Represents a Drafting Surface Finish   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingSurfaceFinishBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: DraftingSurfaceFinish = ...  # unknown typename


class PmiDatumFeatureSymbolBuilder(DatumFeatureSymbolBuilder):
    """
    datum feature symbol builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.GdtDatumCollection.CreatePmiDatumFeatureSymbolBuilder`
    
    .. versionadded:: NX6.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the datum feature  associated object 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiDatumFeatureSymbolBuilder = ...  # unknown typename


class UnitsStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.UnitsStyleBuilder`.  
    
    This class queries and sets units and format preferences when creating or editing a dimension. 
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngularSuppressZeros: AngularSuppressZeros = ...
    """
    Returns or sets  the angular suppress zeros option 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularSuppressZeros`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AngularSuppressZeros` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularSuppressZeros`` 
    
    :param angularSuppressZeros: 
    :type angularSuppressZeros: :py:class:`NXOpen.Annotations.AngularSuppressZeros` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ConvertPrimaryTolerance: bool = ...
    """
    Returns or sets  the convert primary tolerance option.  
    
    A value of True means that the dual dimension tolerance is automatically
    set by converting the primary dimension tolerance value to the dual dimension units 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertPrimaryTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertPrimaryTolerance`` 
    
    :param convertPrimaryTolerance: 
    :type convertPrimaryTolerance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DecimalPointCharacter: DecimalPointCharacter = ...
    """
    Returns or sets  the decimal point character 
    
    <hr>
    
    Getter Method
    
    Signature ``DecimalPointCharacter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DecimalPointCharacter` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecimalPointCharacter`` 
    
    :param decimalPointCharacter: 
    :type decimalPointCharacter: :py:class:`NXOpen.Annotations.DecimalPointCharacter` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionAngularFormat: AngularDimensionFormat = ...
    """
    Returns or sets  the dimension angular format and precision 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionAngularFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionAngularFormat`` 
    
    :param dimensionAngularFormat: 
    :type dimensionAngularFormat: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionLinearUnits: DimensionUnit = ...
    """
    Returns or sets  the dimension linear units 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionLinearUnits`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionLinearUnits`` 
    
    :param dimensionLinearUnits: 
    :type dimensionLinearUnits: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionTolerancePlacement: TolerancePlacement = ...
    """
    Returns or sets  the dimension tolerance placement relative to the dimension value 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTolerancePlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TolerancePlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTolerancePlacement`` 
    
    :param dimensionTolerancePlacement: 
    :type dimensionTolerancePlacement: :py:class:`NXOpen.Annotations.TolerancePlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayLeadingDimensionZeros: bool = ...
    """
    Returns or sets  the display leading dimension zeros setting for
    linear dimensions and fractional angular dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayLeadingDimensionZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayLeadingDimensionZeros`` 
    
    :param displayLeadingDimensionZeros: 
    :type displayLeadingDimensionZeros: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayLeadingToleranceZeros: bool = ...
    """
    Returns or sets  the display leading tolerance zeros setting for
    linear dimensions and fractional angular dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayLeadingToleranceZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayLeadingToleranceZeros`` 
    
    :param displayLeadingToleranceZeros: 
    :type displayLeadingToleranceZeros: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayTrailingZeros: bool = ...
    """
    Returns or sets  the display trailing zeros setting for linear dimensions and tolerances 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayTrailingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayTrailingZeros`` 
    
    :param displayTrailingZeros: 
    :type displayTrailingZeros: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DualDimensionCenterDimensionLine: bool = ...
    """
    Returns or sets  the center dimension line flag for dual dimension.  
    
    If this flag is true, the alignment of the dimension line will be centered between
    the main and dual text, regardless of appended text above or below and the Vertical
    Alignment of the leader line.
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionCenterDimensionLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionCenterDimensionLine`` 
    
    :param centerDimensionLine: 
    :type centerDimensionLine: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DualDimensionFormat: DualDimensionPlacement = ...
    """
    Returns or sets  the dual dimension format.  
    
    This specifies both the creation and position of the dual dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DualDimensionPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionFormat`` 
    
    :param dualDimensionFormat: 
    :type dualDimensionFormat: :py:class:`NXOpen.Annotations.DualDimensionPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DualDimensionUnits: DimensionUnit = ...
    """
    Returns or sets  the dual dimension units 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionUnits`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionUnits`` 
    
    :param dualDimensionUnits: 
    :type dualDimensionUnits: :py:class:`NXOpen.Annotations.DimensionUnit` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DualFractionType: DimensionTextFormat = ...
    """
    Returns or sets  the decimal and fraction format for dual nonmetric dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``DualFractionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualFractionType`` 
    
    :param dualFractionType: 
    :type dualFractionType: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FractionalDisplay: bool = ...
    """
    Returns or sets  the fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``FractionalDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FractionalDisplay`` 
    
    :param fractionalDisplay: 
    :type fractionalDisplay: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LinearFractionType: DimensionTextFormat = ...
    """
    Returns or sets  the decimal and fraction text format for nonmetric dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearFractionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearFractionType`` 
    
    :param linearFractionType: 
    :type linearFractionType: :py:class:`NXOpen.Annotations.DimensionTextFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NumeratorDegrees: int = ...
    """
    Returns or sets  the numerator degrees of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorDegrees`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorDegrees`` 
    
    :param numeratorDegrees: 
    :type numeratorDegrees: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NumeratorFraction: float = ...
    """
    Returns or sets  the numerator fractional degrees of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorFraction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorFraction`` 
    
    :param numeratorFraction: 
    :type numeratorFraction: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NumeratorMinutes: int = ...
    """
    Returns or sets  the numerator minutes of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorMinutes`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorMinutes`` 
    
    :param numeratorMinutes: 
    :type numeratorMinutes: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NumeratorSeconds: int = ...
    """
    Returns or sets  the numerator seconds of fractional display for angular dimension
    
    <hr>
    
    Getter Method
    
    Signature ``NumeratorSeconds`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumeratorSeconds`` 
    
    :param numeratorSeconds: 
    :type numeratorSeconds: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceAngularFormat: AngularDimensionFormat = ...
    """
    Returns or sets  the tolerance angular format and precision 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceAngularFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceAngularFormat`` 
    
    :param toleranceAngularFormat: 
    :type toleranceAngularFormat: :py:class:`NXOpen.Annotations.AngularDimensionFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: UnitsStyleBuilder = ...  # unknown typename


class PmiAngularDimension(BaseAngularDimension):
    """
    Represents a PMI angular dimension   
    
    Abstract class
    
    .. versionadded:: NX9.0.0
    """
    Null: PmiAngularDimension = ...  # unknown typename


class PmiMinorAngularDimension(PmiAngularDimension, IPmi):
    """
    Represents a PMI minor angular dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiMinorAngularDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiMinorAngularDimension = ...  # unknown typename


class PmiTableBuilder(TableSectionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiTableSection` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiTableSectionCollection.CreatePmiTableBuilder`
    
    Default values.
    
    ================  =========================================
    Property          Value
    ================  =========================================
    ColumnWidth       50 (millimeters part), 2 (inches part) 
    ----------------  -----------------------------------------
    NumberOfColumns   5 
    ----------------  -----------------------------------------
    NumberOfRows      5 
    ----------------  -----------------------------------------
    RowHeight         8 (millimeters part), 0.25 (inches part) 
    ================  =========================================
    
    .. versionadded:: NX12.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` for PMI Table  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: PmiTableBuilder = ...  # unknown typename


class TrimDimensionLineStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimDimensionLineStyle():
    """
    Specifies the dimension trim dimension line style.
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DoNotTrim", "Dimension line will not be trimmed when text crosses both extension lines"
       "Trim", "Dimension line will be trimmed when text crosses both extension lines"
    """
    DoNotTrim = 0  # TrimDimensionLineStyleMemberType
    Trim = 1  # TrimDimensionLineStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiRegionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Region` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.PmiManager`
    
    .. versionadded:: NX6.0.2
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRegionBuilder(self, region: Region) -> RegionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.RegionBuilder`  
        
        Signature ``CreateRegionBuilder(region)`` 
        
        :param region:  the region to be edited,                                                                  if None,  then create a region  
        :type region: :py:class:`NXOpen.Annotations.Region` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.RegionBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class HatchBuilderAnnotationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HatchBuilderAnnotationTypes():
    """
    Represents types of hatch objects. Use :py:meth:`NXOpen.Annotations.HatchBuilder.HatchFillSettings` instead..  
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Annotations.HatchBuilder.HatchFillSettings` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Crosshatch", "Crosshatch"
       "AreaFill", "Area Fill"
    """
    Crosshatch = 0  # HatchBuilderAnnotationTypesMemberType
    AreaFill = 1  # HatchBuilderAnnotationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HatchBuilder(NXOpen.Builder):
    """
    This class is used to construct the crosshatching that lies within a boundary.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.HatchCollection.CreateHatchBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class AnnotationTypes():
        """
        Represents types of hatch objects. Use :py:meth:`NXOpen.Annotations.HatchBuilder.HatchFillSettings` instead..  
        
        .. deprecated::  NX7.5.0
           Use :py:meth:`NXOpen.Annotations.HatchBuilder.HatchFillSettings` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Crosshatch", "Crosshatch"
           "AreaFill", "Area Fill"
        """
        Crosshatch = 0  # HatchBuilderAnnotationTypesMemberType
        AreaFill = 1  # HatchBuilderAnnotationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetMarginPercent(self, annotation: NXOpen.NXObject) -> float:
        """
        Get margin percent of a annotation 
        
        Signature ``GetMarginPercent(annotation)`` 
        
        :param annotation:  annotation or DraftingCombinedInstance 
        :type annotation: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMarginPercent(self, annotation: NXOpen.NXObject, marginpercent: float) -> None:
        """
        Set margin percent to a annotation
        
        Signature ``SetMarginPercent(annotation, marginpercent)`` 
        
        :param annotation:  annotation or DraftingCombinedInstance 
        :type annotation: :py:class:`NXOpen.NXObject` 
        :param marginpercent:  text islands value 
        :type marginpercent: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetNumCurrentDirectionMapElements(self, numCurrentDirectionMapElement: int) -> None:
        """
        Set number of direction map elements to the annotation
        
        Signature ``SetNumCurrentDirectionMapElements(numCurrentDirectionMapElement)`` 
        
        :param numCurrentDirectionMapElement: 
        :type numCurrentDirectionMapElement: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetCurveDirection(self, curveTag: NXOpen.NXObject, curveDirection: int) -> None:
        """
        Set direction of a curve to the annotation 
        The number of diection map elements need to specify before to 
        the direction of the curve elements to the annotation
        
        Signature ``SetCurveDirection(curveTag, curveDirection)`` 
        
        :param curveTag: 
        :type curveTag: :py:class:`NXOpen.NXObject` 
        :param curveDirection: 
        :type curveDirection: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetSectionCurveDirections(self, section: NXOpen.NXObject, curve: NXOpen.NXObject, curveDirections: 'list[int]') -> None:
        """
        Set directions of a curve to the annotation 
        The number of diection map elements need to specify before to 
        the direction of the curve elements to the annotation
        
        Signature ``SetSectionCurveDirections(section, curve, curveDirections)`` 
        
        :param section: 
        :type section: :py:class:`NXOpen.NXObject` 
        :param curve: 
        :type curve: :py:class:`NXOpen.NXObject` 
        :param curveDirections:  array of directions for the curve  
        :type curveDirections: list of int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Angle: float = ...
    """
    Returns or sets  the angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    AnnotationToExclude: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the select annotation to exclude 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationToExclude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AnnotationType: HatchBuilderAnnotationTypes = ...
    """
    Returns or sets  the type of hatch object 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchBuilderAnnotationTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnnotationType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.HatchBuilderAnnotationTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AreafillAngle: float = ...
    """
    Returns or sets  the areafill angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``AreafillAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreafillAngle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticallyExcludeText: bool = ...
    """
    Returns or sets  the exclude text.  
    
    This is not used if :py:class:`Annotations.BoundaryBuilderSelectionMethod.Curves <Annotations.BoundaryBuilderSelectionMethod>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticallyExcludeText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticallyExcludeText`` 
    
    :param excludeText: 
    :type excludeText: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Boundary: BoundaryBuilder = ...
    """
    Returns  the boundary 
    
    <hr>
    
    Getter Method
    
    Signature ``Boundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BoundaryBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color.  
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CrosshatchFile: str = ...
    """
    Returns or sets  the crosshatch file.  
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Distance: float = ...
    """
    Returns or sets  the distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Distance`` 
    
    :param distance: 
    :type distance: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    HatchFillSettings: HatchFillSettingsBuilder = ...
    """
    Returns  the HatchFillSetting 
    
    <hr>
    
    Getter Method
    
    Signature ``HatchFillSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Material: AreaFillMaterial = ...
    """
    Returns or sets  the area fill material.  
    
    <hr>
    
    Getter Method
    
    Signature ``Material`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AreaFillMaterial` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Material`` 
    
    :param areaFillMaterial: 
    :type areaFillMaterial: :py:class:`NXOpen.Annotations.AreaFillMaterial` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Pattern: str = ...
    """
    Returns or sets  the pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``Pattern`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pattern`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: float = ...
    """
    Returns or sets  the scale.  
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scale: 
    :type scale: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Width: LineWidth = ...
    """
    Returns or sets  the width.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Null: HatchBuilder = ...  # unknown typename


class OrdinateOriginDimension(Dimension):
    """
    Represents an ordinate origin dimension   
    
    There is no KF creator for this class.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetOrdinateDimensions(self) -> 'list[OrdinateDimension]':
        """
        Returns ordinate dimensions of an ordinate set 
        
        Signature ``GetOrdinateDimensions()`` 
        
        :returns:  Ordinate dimensions  
        :rtype: list of :py:class:`NXOpen.Annotations.OrdinateDimension` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    Null: OrdinateOriginDimension = ...  # unknown typename


class PmiOrdinateOriginDimension(OrdinateOriginDimension, IPmi):
    """
    Represents a PMI ordinate origin dimension   
    
    There is no KF creator for this class.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiOrdinateOriginDimension = ...  # unknown typename


class ILineTarget(NXOpen.INXObject):
    """
    Represents interface class for line datum target   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class AngularTolerance(NXOpen.TransientObject):
    """
    Represents angular tolerance   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUpperToleranceDegrees(self) -> Value:
        """
        Returns the upper tolerance in degrees  
        
        Signature ``GetUpperToleranceDegrees()`` 
        
        :returns:  Upper tolerance in degrees  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUpperToleranceDegrees(self, upperToleranceDegrees: Value) -> None:
        """
        Sets the upper tolerance in degrees 
        
        Signature ``SetUpperToleranceDegrees(upperToleranceDegrees)`` 
        
        :param upperToleranceDegrees:  New upper tolerance in degrees  
        :type upperToleranceDegrees: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLowerToleranceDegrees(self) -> Value:
        """
        Returns the lower tolerance in degrees  
        
        Signature ``GetLowerToleranceDegrees()`` 
        
        :returns:  Lower tolerance in degrees  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLowerToleranceDegrees(self, lowerToleranceDegrees: Value) -> None:
        """
        Sets the lower tolerance in degrees 
        
        Signature ``SetLowerToleranceDegrees(lowerToleranceDegrees)`` 
        
        :param lowerToleranceDegrees:  New lower tolerance in degrees  
        :type lowerToleranceDegrees: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    DimensionDecimalPlaces: int = ...
    """
    Returns or sets  the number of decimal places for dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionDecimalPlaces`` 
    
    :returns:  Number of dimension decimal places  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionDecimalPlaces`` 
    
    :param dimensionDecimalPlaces:  New number of dimension decimal places  
    :type dimensionDecimalPlaces: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ToleranceType: ToleranceType = ...
    """
    Returns or sets  the tolerance type 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns:  Tolerance type  
    :rtype: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param type:  New tolerance type  
    :type type: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ZeroToleranceDisplayStyle: ZeroToleranceDisplayStyle = ...
    """
    Returns or sets  the zero tolerance display style 
    
    <hr>
    
    Getter Method
    
    Signature ``ZeroToleranceDisplayStyle`` 
    
    :returns:  Zero tolerance display style  
    :rtype: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZeroToleranceDisplayStyle`` 
    
    :param zeroDisplayStyle: 
    :type zeroDisplayStyle: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """


class PmiCurveLengthDimensionBuilder(BaseCurveLengthDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiArcLengthDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiCurveLengthDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PmiCurveLengthDimensionBuilder = ...  # unknown typename


class SpecificNote(PmiAttribute):
    """
    Represents a Specific Note   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.SpecificNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: SpecificNote = ...  # unknown typename


class TargetPointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.TargetPoint` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTargetPointBuilder(self, targetPt: TargetPoint) -> TargetPointBuilder:
        """
        Creates the TargetPointBuilder  
        
        Signature ``CreateTargetPointBuilder(targetPt)`` 
        
        :param targetPt:  :py:class:`NXOpen.Annotations.TargetPoint` to be edited, if None then create a new one  
        :type targetPt: :py:class:`NXOpen.Annotations.TargetPoint` 
        :returns:  TargetPointBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.TargetPointBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> TargetPoint:
        """
        Finds the target point with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the target point to be found  
        :type journalIdentifier: str 
        :returns:  Target Point with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.TargetPoint` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class CurveLengthDimensionBuilder(BaseCurveLengthDimensionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ArcLengthDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateCurveLengthDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: CurveLengthDimensionBuilder = ...  # unknown typename


class BillOfMaterialBuilderDetailLevelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BillOfMaterialBuilderDetailLevelType():
    """
    The options specify the detail level type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Summary", " - "
       "Itemized", " - "
    """
    Summary = 0  # BillOfMaterialBuilderDetailLevelTypeMemberType
    Itemized = 1  # BillOfMaterialBuilderDetailLevelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BillOfMaterialBuilderFabricationNumberingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BillOfMaterialBuilderFabricationNumberingType():
    """
    The options specify the fabrication numbering type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sequential", " - "
       "Original", " - "
    """
    Sequential = 0  # BillOfMaterialBuilderFabricationNumberingTypeMemberType
    Original = 1  # BillOfMaterialBuilderFabricationNumberingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BillOfMaterialBuilderStockLengthTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BillOfMaterialBuilderStockLengthType():
    """
    The options specify the stock length type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleSum", " - "
       "ListEach", " - "
    """
    SingleSum = 0  # BillOfMaterialBuilderStockLengthTypeMemberType
    ListEach = 1  # BillOfMaterialBuilderStockLengthTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BillOfMaterialBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Builder for Bill of Material functionality used in Routing.  
    
    This class queries and sets settings specific to Routing Bill of Material.
    
    .. versionadded:: NX9.0.0
    """
    
    class DetailLevelType():
        """
        The options specify the detail level type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Summary", " - "
           "Itemized", " - "
        """
        Summary = 0  # BillOfMaterialBuilderDetailLevelTypeMemberType
        Itemized = 1  # BillOfMaterialBuilderDetailLevelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FabricationNumberingType():
        """
        The options specify the fabrication numbering type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sequential", " - "
           "Original", " - "
        """
        Sequential = 0  # BillOfMaterialBuilderFabricationNumberingTypeMemberType
        Original = 1  # BillOfMaterialBuilderFabricationNumberingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StockLengthType():
        """
        The options specify the stock length type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SingleSum", " - "
           "ListEach", " - "
        """
        SingleSum = 0  # BillOfMaterialBuilderStockLengthTypeMemberType
        ListEach = 1  # BillOfMaterialBuilderStockLengthTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DetailLevel: BillOfMaterialBuilderDetailLevelType = ...
    """
    Returns or sets  the value that specifies the detail level type.  
    
    <hr>
    
    Getter Method
    
    Signature ``DetailLevel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BillOfMaterialBuilderDetailLevelType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DetailLevel`` 
    
    :param detailLevel: 
    :type detailLevel: :py:class:`NXOpen.Annotations.BillOfMaterialBuilderDetailLevelType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    FabricationNumbering: BillOfMaterialBuilderFabricationNumberingType = ...
    """
    Returns or sets  the value that specifies the fabrication numbering.  
    
    <hr>
    
    Getter Method
    
    Signature ``FabricationNumbering`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BillOfMaterialBuilderFabricationNumberingType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FabricationNumbering`` 
    
    :param fabricationNumbering: 
    :type fabricationNumbering: :py:class:`NXOpen.Annotations.BillOfMaterialBuilderFabricationNumberingType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    IncludeComponents: bool = ...
    """
    Returns or sets  the value that specifies whether include components.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeComponents`` 
    
    :param includeComponents: 
    :type includeComponents: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    IncludeGaskNutBolts: bool = ...
    """
    Returns or sets  the value that specifies whether include gask, nut and bolts.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeGaskNutBolts`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeGaskNutBolts`` 
    
    :param includeGaskNutBolts: 
    :type includeGaskNutBolts: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    IncludeOverStock: bool = ...
    """
    Returns or sets  the value that specifies whether include overstock.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeOverStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeOverStock`` 
    
    :param includeOverStock: 
    :type includeOverStock: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    IncludeStock: bool = ...
    """
    Returns or sets  the value that specifies whether to include stock.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeStock`` 
    
    :param includeStock: 
    :type includeStock: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    IncludeWireStock: bool = ...
    """
    Returns or sets  the value that specifies whether include wire stock.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeWireStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeWireStock`` 
    
    :param includeWireStock: 
    :type includeWireStock: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockLength: BillOfMaterialBuilderStockLengthType = ...
    """
    Returns or sets  the value that specifies the stock length type.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BillOfMaterialBuilderStockLengthType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StockLength`` 
    
    :param stockLength: 
    :type stockLength: :py:class:`NXOpen.Annotations.BillOfMaterialBuilderStockLengthType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockPieceCount: bool = ...
    """
    Returns or sets  the value that specifies whether include report cout of stock pieces.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockPieceCount`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StockPieceCount`` 
    
    :param stockPieceCount: 
    :type stockPieceCount: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: BillOfMaterialBuilder = ...  # unknown typename


class TitleBlockCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.TitleBlock`.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drafting.DraftingApplicationManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateEditTitleBlockBuilder(self, titleBlocks: 'list[TitleBlock]') -> EditTitleBlockBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.EditTitleBlockBuilder`.  
        
        This builder provides functions for editing values of unlocked cells in one 
        or more title blocks. 
        If you want to create a new title block from tabular notes 
        or add/remove tabular notes from existing title block, please use 
        :py:class:`NXOpen.Annotations.DefineTitleBlockBuilder`.  
        
        Signature ``CreateEditTitleBlockBuilder(titleBlocks)`` 
        
        :param titleBlocks: 
        :type titleBlocks: list of :py:class:`NXOpen.Annotations.TitleBlock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.EditTitleBlockBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDefineTitleBlockBuilder(self, titleblock: TitleBlock) -> DefineTitleBlockBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.DefineTitleBlockBuilder`.  
        
        This builder provides functions to create a new title block from 
        tabular notes or add/remove tabular notes from existing title block. 
        It also permits user to edit label and lock status of cells. 
        If you want to edit values of cells in existing 
        title block, please use :py:class:`NXOpen.Annotations.EditTitleBlockBuilder`.  
        
        Signature ``CreateDefineTitleBlockBuilder(titleblock)`` 
        
        :param titleblock: 
        :type titleblock: :py:class:`NXOpen.Annotations.TitleBlock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DefineTitleBlockBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCellBuilder(self, object: NXOpen.DisplayableObject, isLocked: bool, contentType: int, value: str, label: str, canLockStatusChange: bool) -> TitleBlockCellBuilder:
        """
        Creates a cell builder  
        
        Signature ``CreateCellBuilder(object, isLocked, contentType, value, label, canLockStatusChange)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.DisplayableObject` 
        :param isLocked: 
        :type isLocked: bool 
        :param contentType: 
        :type contentType: int 
        :param value: 
        :type value: str 
        :param label: 
        :type label: str 
        :param canLockStatusChange: 
        :type canLockStatusChange: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.TitleBlockCellBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class MaterialSpecification(PmiAttribute):
    """
    Represents a Material Specification   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.MaterialSpecificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: MaterialSpecification = ...  # unknown typename


class PinListBuilderFilterTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PinListBuilderFilterType():
    """
    The options specify the filter type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RoutedandUnroutedConnections", " - "
       "OnlyRoutedConnections", " - "
       "OnlyUnroutedConnections", " - "
    """
    RoutedandUnroutedConnections = 0  # PinListBuilderFilterTypeMemberType
    OnlyRoutedConnections = 1  # PinListBuilderFilterTypeMemberType
    OnlyUnroutedConnections = 2  # PinListBuilderFilterTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PinListBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Builder for Formboard pin list functionality used in formboard.  
    
    This class queries and sets settings specific to formboard pin list.
    
    .. versionadded:: NX9.0.0
    """
    
    class FilterType():
        """
        The options specify the filter type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RoutedandUnroutedConnections", " - "
           "OnlyRoutedConnections", " - "
           "OnlyUnroutedConnections", " - "
        """
        RoutedandUnroutedConnections = 0  # PinListBuilderFilterTypeMemberType
        OnlyRoutedConnections = 1  # PinListBuilderFilterTypeMemberType
        OnlyUnroutedConnections = 2  # PinListBuilderFilterTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AutoUpdate: bool = ...
    """
    Returns or sets  the options specifies whether annotation automatically updates.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutoUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoUpdate`` 
    
    :param autoUpdate: 
    :type autoUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Filter: PinListBuilderFilterType = ...
    """
    Returns or sets  the category specifies the filter type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Filter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PinListBuilderFilterType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Filter`` 
    
    :param filter: 
    :type filter: :py:class:`NXOpen.Annotations.PinListBuilderFilterType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    FlattenHierarchy: bool = ...
    """
    Returns or sets  the options specifies whether to flatten hierarchy.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlattenHierarchy`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlattenHierarchy`` 
    
    :param flattenHierarchy: 
    :type flattenHierarchy: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: PinListBuilder = ...  # unknown typename


class PmiOrdinateDimensionBuilder(BaseOrdinateDimensionBuilder):
    """
    Represents a :py:class:`Annotations.OrdinateDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiOrdinateDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PmiOrdinateDimensionBuilder = ...  # unknown typename


class OrdinateStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.OrdinateStyleBuilder`.  
    
    This class queries and sets ordinate specific preferences when
    creating or editing an ordinate set or ordinate dimension.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlignSymbolWithBaseline: bool = ...
    """
    Returns or sets  the align symbol with baseline preference 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignSymbolWithBaseline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignSymbolWithBaseline`` 
    
    :param alignSymbolWithBaseline: 
    :type alignSymbolWithBaseline: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayDimensionLine: OrdinateLineArrowDisplayOption = ...
    """
    Returns or sets  the display dimension line preference for an ordinate set 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayDimensionLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateLineArrowDisplayOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayDimensionLine`` 
    
    :param displayDimensionLine: 
    :type displayDimensionLine: :py:class:`NXOpen.Annotations.OrdinateLineArrowDisplayOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayNameStyle: OrdinateOriginDisplayOption = ...
    """
    Returns or sets  the name display style for an ordinate set 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayNameStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateOriginDisplayOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayNameStyle`` 
    
    :param displayNameStyle: 
    :type displayNameStyle: :py:class:`NXOpen.Annotations.OrdinateOriginDisplayOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayZeroAtBaseline: bool = ...
    """
    Returns or sets  the display zero at baseline flag.  
    
    If this is true, then ordinate set will have zero text displayed at 
    extension lines.
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayZeroAtBaseline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayZeroAtBaseline`` 
    
    :param zeroTextsDisplay: 
    :type zeroTextsDisplay: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DoglegAngle: float = ...
    """
    Returns or sets  the dogleg angle.  
    
    The valid range is greater than zero and less than or equal to 90 degrees 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegAngle`` 
    
    :param doglegAngle: 
    :type doglegAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DoglegCreationOption: OrdinateDoglegCreationOption = ...
    """
    Returns or sets  the dogleg creation option 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegCreationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateDoglegCreationOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegCreationOption`` 
    
    :param doglegCreationOption: 
    :type doglegCreationOption: :py:class:`NXOpen.Annotations.OrdinateDoglegCreationOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DoglegEndOffset: float = ...
    """
    Returns or sets  the dogleg end offset.  
    
    This is the offset between the dimension line and the end position of the dogleg.
    This value must be greater than or equal to zero and less than or equal to the
    start offset 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegEndOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegEndOffset`` 
    
    :param doglegEndOffset: 
    :type doglegEndOffset: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DoglegSetting: OrdinateDoglegDefinition = ...
    """
    Returns or sets  the dogleg setting.  
    
    This specifies which options are used to specify the dogleg 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegSetting`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateDoglegDefinition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegSetting`` 
    
    :param doglegSetting: 
    :type doglegSetting: :py:class:`NXOpen.Annotations.OrdinateDoglegDefinition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DoglegStartOffset: float = ...
    """
    Returns or sets  the dogleg start offset.  
    
    This is the offset between the dimension line and the start position of the dogleg.
    The value must be greater than or equal to zero 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegStartOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegStartOffset`` 
    
    :param doglegStartOffset: 
    :type doglegStartOffset: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    MarginFirstOffset: float = ...
    """
    Returns or sets  the distance from the baseline to the first margin.  
    
    This can be a positive or negative number. 
    The positive direction is away from the view's center 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginFirstOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginFirstOffset`` 
    
    :param marginFirstOffset: 
    :type marginFirstOffset: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    MarginSpacing: float = ...
    """
    Returns or sets  the interval distance between successive margins 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginSpacing`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginSpacing`` 
    
    :param marginSpacing: 
    :type marginSpacing: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NumberOfMargins: int = ...
    """
    Returns or sets  the number of margins to create.  
    
    The maximum is 32 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfMargins`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfMargins`` 
    
    :param numberOfMargins: 
    :type numberOfMargins: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    OrdinateTextAngle: float = ...
    """
    Returns or sets  the ordinate text angle 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateTextAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrdinateTextAngle`` 
    
    :param ordinateTextAngle: 
    :type ordinateTextAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    OrdinateTextOrientation: TextOrientation = ...
    """
    Returns or sets  the ordinate text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateTextOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrdinateTextOrientation`` 
    
    :param ordinateTextOrientation: 
    :type ordinateTextOrientation: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    PositiveDirection: OrdinatePositiveDirection = ...
    """
    Returns or sets  the positive direction of measurement for an ordinate set 
    
    <hr>
    
    Getter Method
    
    Signature ``PositiveDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinatePositiveDirection` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositiveDirection`` 
    
    :param positiveDirection: 
    :type positiveDirection: :py:class:`NXOpen.Annotations.OrdinatePositiveDirection` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SymbolAngle: float = ...
    """
    Returns or sets  the symbol angle in degress with respect to the baseline.  
    
    This option only applies if the name display style is User-Defined and the
    the value of the Align Symbol with Baseline preference is false 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolAngle`` 
    
    :param symbolAngle: 
    :type symbolAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SymbolAspectRatio: float = ...
    """
    Returns or sets  the symbol aspect ratio 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolAspectRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolAspectRatio`` 
    
    :param symbolAspectRatio: 
    :type symbolAspectRatio: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SymbolHeight: float = ...
    """
    Returns or sets  the symbol height 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolHeight`` 
    
    :param symbolHeight: 
    :type symbolHeight: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SymbolLength: float = ...
    """
    Returns or sets  the symbol length 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolLength`` 
    
    :param symbolLength: 
    :type symbolLength: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SymbolScale: float = ...
    """
    Returns or sets  the symbol scale 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolScale`` 
    
    :param symbolScale: 
    :type symbolScale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UserDefinedText: str = ...
    """
    Returns or sets  the ordinate origin user defined text 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedText`` 
    
    :param userDefinedText: 
    :type userDefinedText: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: OrdinateStyleBuilder = ...  # unknown typename


class PmiNumber(PmiAttribute):
    """
    Represents a Pmi Number   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiNumberBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiNumber = ...  # unknown typename


class AssociativeOriginTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssociativeOriginType():
    """
    Specifies the type of associativity for an annotation's origin 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Drag", " - "
       "RelativeToView", " - "
       "RelativeToGeometry", " - "
       "VerticallyAligned", " - "
       "HorizontallyAligned", " - "
       "AlignedWithArrows", " - "
       "AtAPoint", " - "
       "OffsetFromText", " - "
       "AttachedToStack", " - "
    """
    Drag = 0  # AssociativeOriginTypeMemberType
    RelativeToView = 1  # AssociativeOriginTypeMemberType
    RelativeToGeometry = 2  # AssociativeOriginTypeMemberType
    VerticallyAligned = 3  # AssociativeOriginTypeMemberType
    HorizontallyAligned = 4  # AssociativeOriginTypeMemberType
    AlignedWithArrows = 5  # AssociativeOriginTypeMemberType
    AtAPoint = 6  # AssociativeOriginTypeMemberType
    OffsetFromText = 7  # AssociativeOriginTypeMemberType
    AttachedToStack = 8  # AssociativeOriginTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssociativityPointOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssociativityPointOption():
    """
    Specifies the associativity point option 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No point"
       "Control", "Control point"
       "ArcCenter", "Arc center point"
       "Tangent", "Tangent point"
       "Intersection", "Intersection point"
       "ScreenPosition", "Screen position"
       "OnCurve", "Point on curve"
       "Pole", "Spline pole"
       "Anchor", "Conic Anchor"
       "Defining", "Spline defining point"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # AssociativityPointOptionMemberType
    Control = 1  # AssociativityPointOptionMemberType
    ArcCenter = 2  # AssociativityPointOptionMemberType
    Tangent = 3  # AssociativityPointOptionMemberType
    Intersection = 4  # AssociativityPointOptionMemberType
    ScreenPosition = 5  # AssociativityPointOptionMemberType
    OnCurve = 6  # AssociativityPointOptionMemberType
    Pole = 7  # AssociativityPointOptionMemberType
    Anchor = 8  # AssociativityPointOptionMemberType
    Defining = 9  # AssociativityPointOptionMemberType
    Last = 10  # AssociativityPointOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CharacterSpaceFactor():
    """
    Specifies the standard font character space factor for each of the text types .  
    
    Constructor: 
    NXOpen.Annotations.CharacterSpaceFactor()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    General: float = ...
    """
    Standard Font Character Space Factor for General Text 
    <hr>
    
    Field Value
    Type:float
    """
    Dimension: float = ...
    """
    Standard Font Character Space Factor for Dimension Text 
    <hr>
    
    Field Value
    Type:float
    """
    Tolerance: float = ...
    """
    Standard Font Character Space Factor for Tolerance Text 
    <hr>
    
    Field Value
    Type:float
    """
    Appended: float = ...
    """
    Standard Font Character Space Factor for Appended Text 
    <hr>
    
    Field Value
    Type:float
    """


class TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TabularNoteStyleBuilderShowLockedDeletedRowMethod():
    """
    the valid locked deleted row methods 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Strikethru", "Strike thru"
       "Blank", "Blank"
       "Remove", "Remove"
       "Ordinary", "Ordinary"
    """
    Strikethru = 0  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
    Blank = 1  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
    Remove = 2  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
    Ordinary = 3  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TabularNoteStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TabularNoteStyleBuilder`.  
    
    .. versionadded:: NX8.0.0
    """
    
    class ShowLockedDeletedRowMethod():
        """
        the valid locked deleted row methods 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Strikethru", "Strike thru"
           "Blank", "Blank"
           "Remove", "Remove"
           "Ordinary", "Ordinary"
        """
        Strikethru = 0  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
        Blank = 1  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
        Remove = 2  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
        Ordinary = 3  # TabularNoteStyleBuilderShowLockedDeletedRowMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AutomaticUpdate: bool = ...
    """
    Returns or sets  the automatic update 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticUpdate`` 
    
    :param automaticUpdate: 
    :type automaticUpdate: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LockTableContents: bool = ...
    """
    Returns or sets  the lock table contents 
    
    <hr>
    
    Getter Method
    
    Signature ``LockTableContents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockTableContents`` 
    
    :param lockedTableContents: 
    :type lockedTableContents: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LockTableFormat: bool = ...
    """
    Returns or sets  the lock table format 
    
    <hr>
    
    Getter Method
    
    Signature ``LockTableFormat`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockTableFormat`` 
    
    :param lockedTableFormat: 
    :type lockedTableFormat: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ShowLockedDeletedContent: TabularNoteStyleBuilderShowLockedDeletedRowMethod = ...
    """
    Returns or sets  the locked deleted row method 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowLockedDeletedContent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TabularNoteStyleBuilderShowLockedDeletedRowMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowLockedDeletedContent`` 
    
    :param showLockedDeletedContent: 
    :type showLockedDeletedContent: :py:class:`NXOpen.Annotations.TabularNoteStyleBuilderShowLockedDeletedRowMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: TabularNoteStyleBuilder = ...  # unknown typename


class HoleTableSettingsWorkflowBuilder(TabularNoteStyleBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleTableSettingsWorkflowBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    Null: HoleTableSettingsWorkflowBuilder = ...  # unknown typename


class PmiUserDefinedBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiUserDefined` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiUserDefinedBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Title: str = ...
    """
    Returns or sets  the title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiUserDefinedBuilder = ...  # unknown typename


class TableCellStyleBuilderZeroDisplayTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderZeroDisplayType():
    """
    the valid zero display types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Zero", " - "
       "Dash", " - "
       "Empty", " - "
    """
    Zero = 0  # TableCellStyleBuilderZeroDisplayTypeMemberType
    Dash = 1  # TableCellStyleBuilderZeroDisplayTypeMemberType
    Empty = 2  # TableCellStyleBuilderZeroDisplayTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderTextAlignmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderTextAlignmentType():
    """
    the valid text alignment types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", "Top left"
       "TopCenter", "Top center"
       "TopRight", "Top right"
       "MidLeft", "Mid left"
       "MidCenter", "Mid center"
       "MidRight", "Mid right"
       "BottomLeft", "Bottom left"
       "BottomCenter", "Bottom center"
       "BottomRight", "Bottom right"
    """
    TopLeft = 1  # TableCellStyleBuilderTextAlignmentTypeMemberType
    TopCenter = 2  # TableCellStyleBuilderTextAlignmentTypeMemberType
    TopRight = 3  # TableCellStyleBuilderTextAlignmentTypeMemberType
    MidLeft = 4  # TableCellStyleBuilderTextAlignmentTypeMemberType
    MidCenter = 5  # TableCellStyleBuilderTextAlignmentTypeMemberType
    MidRight = 6  # TableCellStyleBuilderTextAlignmentTypeMemberType
    BottomLeft = 7  # TableCellStyleBuilderTextAlignmentTypeMemberType
    BottomCenter = 8  # TableCellStyleBuilderTextAlignmentTypeMemberType
    BottomRight = 9  # TableCellStyleBuilderTextAlignmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderDateFormatTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderDateFormatTypes():
    """
    the date format types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ddmmmyyyy", " - "
       "Ddmmm", " - "
       "Mmmyyyy", " - "
       "Mmddyyyy", " - "
       "Yymmmdd", " - "
       "Yyyymmdd", " - "
       "Ddmmyyyy", " - "
    """
    Ddmmmyyyy = 0  # TableCellStyleBuilderDateFormatTypesMemberType
    Ddmmm = 1  # TableCellStyleBuilderDateFormatTypesMemberType
    Mmmyyyy = 2  # TableCellStyleBuilderDateFormatTypesMemberType
    Mmddyyyy = 3  # TableCellStyleBuilderDateFormatTypesMemberType
    Yymmmdd = 4  # TableCellStyleBuilderDateFormatTypesMemberType
    Yyyymmdd = 5  # TableCellStyleBuilderDateFormatTypesMemberType
    Ddmmyyyy = 6  # TableCellStyleBuilderDateFormatTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderTimeFormatTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderTimeFormatTypes():
    """
    the time format types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hhmm24", "24 hh:mm"
       "Hhmm12", "12 hh:mm AM/PM"
       "Hhmmss24", "24 hh:mm:ss"
       "Hhmmss12", "12 hh:mm:ss AM/PM"
    """
    Hhmm24 = 0  # TableCellStyleBuilderTimeFormatTypesMemberType
    Hhmm12 = 1  # TableCellStyleBuilderTimeFormatTypesMemberType
    Hhmmss24 = 2  # TableCellStyleBuilderTimeFormatTypesMemberType
    Hhmmss12 = 3  # TableCellStyleBuilderTimeFormatTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderCellFormatTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderCellFormatTypes():
    """
    the cell format types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Text", "Text"
       "Float", "Float"
       "Fixed", "Fixed"
       "General", "General"
       "Monetary", "Monetary"
       "Comma", "Comma"
       "FractionHalfSize", "Fraction half size"
       "FractionThreeQuarterSize", "Fraction three quarter size"
       "FractionFullSize", "Fraction full size"
       "DegreesDegreeUnits", "Degrees"
       "DegreesRadianUnits", "Radians"
       "Percent", "Percent"
       "Degrees", "Radians"
       "Hex", "Hex"
       "Logic", "Logic"
       "Hidden", "Hidden"
       "Custom", "Custom"
       "Date", "Date"
       "Time", "Time"
       "DateTime", "Date-Time"
    """
    Text = 1  # TableCellStyleBuilderCellFormatTypesMemberType
    Float = 2  # TableCellStyleBuilderCellFormatTypesMemberType
    Fixed = 3  # TableCellStyleBuilderCellFormatTypesMemberType
    General = 4  # TableCellStyleBuilderCellFormatTypesMemberType
    Monetary = 5  # TableCellStyleBuilderCellFormatTypesMemberType
    Comma = 6  # TableCellStyleBuilderCellFormatTypesMemberType
    FractionHalfSize = 7  # TableCellStyleBuilderCellFormatTypesMemberType
    FractionThreeQuarterSize = 8  # TableCellStyleBuilderCellFormatTypesMemberType
    FractionFullSize = 9  # TableCellStyleBuilderCellFormatTypesMemberType
    DegreesDegreeUnits = 10  # TableCellStyleBuilderCellFormatTypesMemberType
    DegreesRadianUnits = 11  # TableCellStyleBuilderCellFormatTypesMemberType
    Percent = 12  # TableCellStyleBuilderCellFormatTypesMemberType
    Degrees = 13  # TableCellStyleBuilderCellFormatTypesMemberType
    Hex = 14  # TableCellStyleBuilderCellFormatTypesMemberType
    Logic = 15  # TableCellStyleBuilderCellFormatTypesMemberType
    Hidden = 16  # TableCellStyleBuilderCellFormatTypesMemberType
    Custom = 17  # TableCellStyleBuilderCellFormatTypesMemberType
    Date = 18  # TableCellStyleBuilderCellFormatTypesMemberType
    Time = 19  # TableCellStyleBuilderCellFormatTypesMemberType
    DateTime = 20  # TableCellStyleBuilderCellFormatTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderFormatTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderFormatType():
    """
    the valid cell format types   
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Text", " - "
       "Float", " - "
       "Fixed", " - "
       "General", " - "
       "Monetary", " - "
       "Comma", " - "
       "FractionHalfSize", " - "
       "FractionThreeQuarterSize", " - "
       "FractionFullSize", " - "
       "DegreesDegreeUnits", "Degrees"
       "DegreesRadianUnits", "Radians"
       "Percent", " - "
       "Degrees", "Radians"
       "Hex", " - "
       "Logic", " - "
       "DateDmy", " - "
       "DateDm", " - "
       "DateMy", " - "
       "DateMdy", " - "
       "DateYmd", " - "
       "DateY4md", " - "
       "DateDmyDot", " - "
       "TimeHm", " - "
       "TimeHms", " - "
       "Hidden", " - "
       "Custom", " - "
    """
    Text = 1  # TableCellStyleBuilderFormatTypeMemberType
    Float = 2  # TableCellStyleBuilderFormatTypeMemberType
    Fixed = 3  # TableCellStyleBuilderFormatTypeMemberType
    General = 4  # TableCellStyleBuilderFormatTypeMemberType
    Monetary = 5  # TableCellStyleBuilderFormatTypeMemberType
    Comma = 6  # TableCellStyleBuilderFormatTypeMemberType
    FractionHalfSize = 7  # TableCellStyleBuilderFormatTypeMemberType
    FractionThreeQuarterSize = 8  # TableCellStyleBuilderFormatTypeMemberType
    FractionFullSize = 9  # TableCellStyleBuilderFormatTypeMemberType
    DegreesDegreeUnits = 10  # TableCellStyleBuilderFormatTypeMemberType
    DegreesRadianUnits = 11  # TableCellStyleBuilderFormatTypeMemberType
    Percent = 12  # TableCellStyleBuilderFormatTypeMemberType
    Degrees = 13  # TableCellStyleBuilderFormatTypeMemberType
    Hex = 14  # TableCellStyleBuilderFormatTypeMemberType
    Logic = 15  # TableCellStyleBuilderFormatTypeMemberType
    DateDmy = 16  # TableCellStyleBuilderFormatTypeMemberType
    DateDm = 17  # TableCellStyleBuilderFormatTypeMemberType
    DateMy = 18  # TableCellStyleBuilderFormatTypeMemberType
    DateMdy = 19  # TableCellStyleBuilderFormatTypeMemberType
    DateYmd = 20  # TableCellStyleBuilderFormatTypeMemberType
    DateY4md = 21  # TableCellStyleBuilderFormatTypeMemberType
    DateDmyDot = 22  # TableCellStyleBuilderFormatTypeMemberType
    TimeHm = 23  # TableCellStyleBuilderFormatTypeMemberType
    TimeHms = 24  # TableCellStyleBuilderFormatTypeMemberType
    Hidden = 25  # TableCellStyleBuilderFormatTypeMemberType
    Custom = 26  # TableCellStyleBuilderFormatTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderBorderLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderBorderLocationType():
    """
    the valid border location types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", " - "
       "Left", " - "
       "Top", " - "
       "Right", " - "
       "Bottom", " - "
       "Middle", " - "
       "Center", " - "
    """
    All = 0  # TableCellStyleBuilderBorderLocationTypeMemberType
    Left = 1  # TableCellStyleBuilderBorderLocationTypeMemberType
    Top = 2  # TableCellStyleBuilderBorderLocationTypeMemberType
    Right = 3  # TableCellStyleBuilderBorderLocationTypeMemberType
    Bottom = 4  # TableCellStyleBuilderBorderLocationTypeMemberType
    Middle = 5  # TableCellStyleBuilderBorderLocationTypeMemberType
    Center = 6  # TableCellStyleBuilderBorderLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderTabDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderTabDirectionType():
    """
    the valid tab direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Right", " - "
       "Left", " - "
       "Up", " - "
       "Down", " - "
    """
    Right = 0  # TableCellStyleBuilderTabDirectionTypeMemberType
    Left = 1  # TableCellStyleBuilderTabDirectionTypeMemberType
    Up = 2  # TableCellStyleBuilderTabDirectionTypeMemberType
    Down = 3  # TableCellStyleBuilderTabDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilderFitMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableCellStyleBuilderFitMethodType():
    """
    the fit method types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OverwriteBorder", " - "
       "AutoSizeText", " - "
       "Wrap", " - "
       "Abbreviate", " - "
       "RemoveSpaces", " - "
       "AutoSizeRow", " - "
       "AutoSizeCol", " - "
       "Truncate", " - "
    """
    OverwriteBorder = 1  # TableCellStyleBuilderFitMethodTypeMemberType
    AutoSizeText = 2  # TableCellStyleBuilderFitMethodTypeMemberType
    Wrap = 3  # TableCellStyleBuilderFitMethodTypeMemberType
    Abbreviate = 4  # TableCellStyleBuilderFitMethodTypeMemberType
    RemoveSpaces = 5  # TableCellStyleBuilderFitMethodTypeMemberType
    AutoSizeRow = 6  # TableCellStyleBuilderFitMethodTypeMemberType
    AutoSizeCol = 7  # TableCellStyleBuilderFitMethodTypeMemberType
    Truncate = 8  # TableCellStyleBuilderFitMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableCellStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TableCellStyleBuilder`.  
    
    This class queries and sets preferences for table cells.
    
    .. versionadded:: NX8.0.0
    """
    
    class ZeroDisplayType():
        """
        the valid zero display types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Zero", " - "
           "Dash", " - "
           "Empty", " - "
        """
        Zero = 0  # TableCellStyleBuilderZeroDisplayTypeMemberType
        Dash = 1  # TableCellStyleBuilderZeroDisplayTypeMemberType
        Empty = 2  # TableCellStyleBuilderZeroDisplayTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TextAlignmentType():
        """
        the valid text alignment types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopLeft", "Top left"
           "TopCenter", "Top center"
           "TopRight", "Top right"
           "MidLeft", "Mid left"
           "MidCenter", "Mid center"
           "MidRight", "Mid right"
           "BottomLeft", "Bottom left"
           "BottomCenter", "Bottom center"
           "BottomRight", "Bottom right"
        """
        TopLeft = 1  # TableCellStyleBuilderTextAlignmentTypeMemberType
        TopCenter = 2  # TableCellStyleBuilderTextAlignmentTypeMemberType
        TopRight = 3  # TableCellStyleBuilderTextAlignmentTypeMemberType
        MidLeft = 4  # TableCellStyleBuilderTextAlignmentTypeMemberType
        MidCenter = 5  # TableCellStyleBuilderTextAlignmentTypeMemberType
        MidRight = 6  # TableCellStyleBuilderTextAlignmentTypeMemberType
        BottomLeft = 7  # TableCellStyleBuilderTextAlignmentTypeMemberType
        BottomCenter = 8  # TableCellStyleBuilderTextAlignmentTypeMemberType
        BottomRight = 9  # TableCellStyleBuilderTextAlignmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DateFormatTypes():
        """
        the date format types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ddmmmyyyy", " - "
           "Ddmmm", " - "
           "Mmmyyyy", " - "
           "Mmddyyyy", " - "
           "Yymmmdd", " - "
           "Yyyymmdd", " - "
           "Ddmmyyyy", " - "
        """
        Ddmmmyyyy = 0  # TableCellStyleBuilderDateFormatTypesMemberType
        Ddmmm = 1  # TableCellStyleBuilderDateFormatTypesMemberType
        Mmmyyyy = 2  # TableCellStyleBuilderDateFormatTypesMemberType
        Mmddyyyy = 3  # TableCellStyleBuilderDateFormatTypesMemberType
        Yymmmdd = 4  # TableCellStyleBuilderDateFormatTypesMemberType
        Yyyymmdd = 5  # TableCellStyleBuilderDateFormatTypesMemberType
        Ddmmyyyy = 6  # TableCellStyleBuilderDateFormatTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TimeFormatTypes():
        """
        the time format types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hhmm24", "24 hh:mm"
           "Hhmm12", "12 hh:mm AM/PM"
           "Hhmmss24", "24 hh:mm:ss"
           "Hhmmss12", "12 hh:mm:ss AM/PM"
        """
        Hhmm24 = 0  # TableCellStyleBuilderTimeFormatTypesMemberType
        Hhmm12 = 1  # TableCellStyleBuilderTimeFormatTypesMemberType
        Hhmmss24 = 2  # TableCellStyleBuilderTimeFormatTypesMemberType
        Hhmmss12 = 3  # TableCellStyleBuilderTimeFormatTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CellFormatTypes():
        """
        the cell format types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Text", "Text"
           "Float", "Float"
           "Fixed", "Fixed"
           "General", "General"
           "Monetary", "Monetary"
           "Comma", "Comma"
           "FractionHalfSize", "Fraction half size"
           "FractionThreeQuarterSize", "Fraction three quarter size"
           "FractionFullSize", "Fraction full size"
           "DegreesDegreeUnits", "Degrees"
           "DegreesRadianUnits", "Radians"
           "Percent", "Percent"
           "Degrees", "Radians"
           "Hex", "Hex"
           "Logic", "Logic"
           "Hidden", "Hidden"
           "Custom", "Custom"
           "Date", "Date"
           "Time", "Time"
           "DateTime", "Date-Time"
        """
        Text = 1  # TableCellStyleBuilderCellFormatTypesMemberType
        Float = 2  # TableCellStyleBuilderCellFormatTypesMemberType
        Fixed = 3  # TableCellStyleBuilderCellFormatTypesMemberType
        General = 4  # TableCellStyleBuilderCellFormatTypesMemberType
        Monetary = 5  # TableCellStyleBuilderCellFormatTypesMemberType
        Comma = 6  # TableCellStyleBuilderCellFormatTypesMemberType
        FractionHalfSize = 7  # TableCellStyleBuilderCellFormatTypesMemberType
        FractionThreeQuarterSize = 8  # TableCellStyleBuilderCellFormatTypesMemberType
        FractionFullSize = 9  # TableCellStyleBuilderCellFormatTypesMemberType
        DegreesDegreeUnits = 10  # TableCellStyleBuilderCellFormatTypesMemberType
        DegreesRadianUnits = 11  # TableCellStyleBuilderCellFormatTypesMemberType
        Percent = 12  # TableCellStyleBuilderCellFormatTypesMemberType
        Degrees = 13  # TableCellStyleBuilderCellFormatTypesMemberType
        Hex = 14  # TableCellStyleBuilderCellFormatTypesMemberType
        Logic = 15  # TableCellStyleBuilderCellFormatTypesMemberType
        Hidden = 16  # TableCellStyleBuilderCellFormatTypesMemberType
        Custom = 17  # TableCellStyleBuilderCellFormatTypesMemberType
        Date = 18  # TableCellStyleBuilderCellFormatTypesMemberType
        Time = 19  # TableCellStyleBuilderCellFormatTypesMemberType
        DateTime = 20  # TableCellStyleBuilderCellFormatTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FormatType():
        """
        the valid cell format types   
        
        .. deprecated::  NX10.0.0
           Use :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Text", " - "
           "Float", " - "
           "Fixed", " - "
           "General", " - "
           "Monetary", " - "
           "Comma", " - "
           "FractionHalfSize", " - "
           "FractionThreeQuarterSize", " - "
           "FractionFullSize", " - "
           "DegreesDegreeUnits", "Degrees"
           "DegreesRadianUnits", "Radians"
           "Percent", " - "
           "Degrees", "Radians"
           "Hex", " - "
           "Logic", " - "
           "DateDmy", " - "
           "DateDm", " - "
           "DateMy", " - "
           "DateMdy", " - "
           "DateYmd", " - "
           "DateY4md", " - "
           "DateDmyDot", " - "
           "TimeHm", " - "
           "TimeHms", " - "
           "Hidden", " - "
           "Custom", " - "
        """
        Text = 1  # TableCellStyleBuilderFormatTypeMemberType
        Float = 2  # TableCellStyleBuilderFormatTypeMemberType
        Fixed = 3  # TableCellStyleBuilderFormatTypeMemberType
        General = 4  # TableCellStyleBuilderFormatTypeMemberType
        Monetary = 5  # TableCellStyleBuilderFormatTypeMemberType
        Comma = 6  # TableCellStyleBuilderFormatTypeMemberType
        FractionHalfSize = 7  # TableCellStyleBuilderFormatTypeMemberType
        FractionThreeQuarterSize = 8  # TableCellStyleBuilderFormatTypeMemberType
        FractionFullSize = 9  # TableCellStyleBuilderFormatTypeMemberType
        DegreesDegreeUnits = 10  # TableCellStyleBuilderFormatTypeMemberType
        DegreesRadianUnits = 11  # TableCellStyleBuilderFormatTypeMemberType
        Percent = 12  # TableCellStyleBuilderFormatTypeMemberType
        Degrees = 13  # TableCellStyleBuilderFormatTypeMemberType
        Hex = 14  # TableCellStyleBuilderFormatTypeMemberType
        Logic = 15  # TableCellStyleBuilderFormatTypeMemberType
        DateDmy = 16  # TableCellStyleBuilderFormatTypeMemberType
        DateDm = 17  # TableCellStyleBuilderFormatTypeMemberType
        DateMy = 18  # TableCellStyleBuilderFormatTypeMemberType
        DateMdy = 19  # TableCellStyleBuilderFormatTypeMemberType
        DateYmd = 20  # TableCellStyleBuilderFormatTypeMemberType
        DateY4md = 21  # TableCellStyleBuilderFormatTypeMemberType
        DateDmyDot = 22  # TableCellStyleBuilderFormatTypeMemberType
        TimeHm = 23  # TableCellStyleBuilderFormatTypeMemberType
        TimeHms = 24  # TableCellStyleBuilderFormatTypeMemberType
        Hidden = 25  # TableCellStyleBuilderFormatTypeMemberType
        Custom = 26  # TableCellStyleBuilderFormatTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BorderLocationType():
        """
        the valid border location types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", " - "
           "Left", " - "
           "Top", " - "
           "Right", " - "
           "Bottom", " - "
           "Middle", " - "
           "Center", " - "
        """
        All = 0  # TableCellStyleBuilderBorderLocationTypeMemberType
        Left = 1  # TableCellStyleBuilderBorderLocationTypeMemberType
        Top = 2  # TableCellStyleBuilderBorderLocationTypeMemberType
        Right = 3  # TableCellStyleBuilderBorderLocationTypeMemberType
        Bottom = 4  # TableCellStyleBuilderBorderLocationTypeMemberType
        Middle = 5  # TableCellStyleBuilderBorderLocationTypeMemberType
        Center = 6  # TableCellStyleBuilderBorderLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TabDirectionType():
        """
        the valid tab direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Right", " - "
           "Left", " - "
           "Up", " - "
           "Down", " - "
        """
        Right = 0  # TableCellStyleBuilderTabDirectionTypeMemberType
        Left = 1  # TableCellStyleBuilderTabDirectionTypeMemberType
        Up = 2  # TableCellStyleBuilderTabDirectionTypeMemberType
        Down = 3  # TableCellStyleBuilderTabDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FitMethodType():
        """
        the fit method types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OverwriteBorder", " - "
           "AutoSizeText", " - "
           "Wrap", " - "
           "Abbreviate", " - "
           "RemoveSpaces", " - "
           "AutoSizeRow", " - "
           "AutoSizeCol", " - "
           "Truncate", " - "
        """
        OverwriteBorder = 1  # TableCellStyleBuilderFitMethodTypeMemberType
        AutoSizeText = 2  # TableCellStyleBuilderFitMethodTypeMemberType
        Wrap = 3  # TableCellStyleBuilderFitMethodTypeMemberType
        Abbreviate = 4  # TableCellStyleBuilderFitMethodTypeMemberType
        RemoveSpaces = 5  # TableCellStyleBuilderFitMethodTypeMemberType
        AutoSizeRow = 6  # TableCellStyleBuilderFitMethodTypeMemberType
        AutoSizeCol = 7  # TableCellStyleBuilderFitMethodTypeMemberType
        Truncate = 8  # TableCellStyleBuilderFitMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetFitMethods(self) -> 'list[TableCellStyleBuilderFitMethodType]':
        """
        Returns the fit methods  
        
        Signature ``GetFitMethods()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.TableCellStyleBuilderFitMethodType` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFitMethods(self, fitMethods: 'list[TableCellStyleBuilderFitMethodType]') -> None:
        """
        Set fit methods 
        
        Signature ``SetFitMethods(fitMethods)`` 
        
        :param fitMethods: 
        :type fitMethods: list of :py:class:`NXOpen.Annotations.TableCellStyleBuilderFitMethodType` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BorderColor: int = ...
    """
    Returns or sets  the border color
    
    <hr>
    
    Getter Method
    
    Signature ``BorderColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderColor`` 
    
    :param borderColor: 
    :type borderColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    BorderFont: int = ...
    """
    Returns or sets  the border font
    
    <hr>
    
    Getter Method
    
    Signature ``BorderFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderFont`` 
    
    :param borderFont: 
    :type borderFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    BorderLocation: TableCellStyleBuilderBorderLocationType = ...
    """
    Returns or sets  the border location 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderBorderLocationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderLocation`` 
    
    :param borderLocation: 
    :type borderLocation: :py:class:`NXOpen.Annotations.TableCellStyleBuilderBorderLocationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    BorderWidth: int = ...
    """
    Returns or sets  the border width
    
    <hr>
    
    Getter Method
    
    Signature ``BorderWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderWidth`` 
    
    :param borderWidth: 
    :type borderWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    CellFormatType: TableCellStyleBuilderCellFormatTypes = ...
    """
    Returns or sets  the cell format 
    
    <hr>
    
    Getter Method
    
    Signature ``CellFormatType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CellFormatType`` 
    
    :param format: 
    :type format: :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DateFormatType: TableCellStyleBuilderDateFormatTypes = ...
    """
    Returns or sets  the cell date format.  
    
    It is valid to use this when the 
    :py:meth:`NXOpen.Annotations.TableCellStyleBuilder.CellFormatType` 
    is either :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes.Date <NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes>` or
    :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes.DateTime <NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DateFormatType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderDateFormatTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DateFormatType`` 
    
    :param dateFormat: 
    :type dateFormat: :py:class:`NXOpen.Annotations.TableCellStyleBuilderDateFormatTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Format: TableCellStyleBuilderFormatType = ...
    """
    Returns or sets  the cell format 
    
    <hr>
    
    Getter Method
    
    Signature ``Format`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderFormatType` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.TableCellStyleBuilder.CellFormatType` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Format`` 
    
    :param format: 
    :type format: :py:class:`NXOpen.Annotations.TableCellStyleBuilderFormatType` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Annotations.TableCellStyleBuilder.CellFormatType` instead.
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IncrementIsPercentage: bool = ...
    """
    Returns or sets  the increment as percent flag 
    
    <hr>
    
    Getter Method
    
    Signature ``IncrementIsPercentage`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncrementIsPercentage`` 
    
    :param incrementValue: 
    :type incrementValue: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IncrementValue: float = ...
    """
    Returns or sets  the increment value 
    
    <hr>
    
    Getter Method
    
    Signature ``IncrementValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncrementValue`` 
    
    :param incrementValue: 
    :type incrementValue: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IsAFormula: bool = ...
    """
    Returns or sets  the is a formula 
    
    <hr>
    
    Getter Method
    
    Signature ``IsAFormula`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsAFormula`` 
    
    :param isAFormula: 
    :type isAFormula: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Precision: int = ...
    """
    Returns or sets  the precision 
    
    <hr>
    
    Getter Method
    
    Signature ``Precision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Precision`` 
    
    :param precision: 
    :type precision: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Prefix: str = ...
    """
    Returns or sets  the prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``Prefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Prefix`` 
    
    :param prefix: 
    :type prefix: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ProtectCell: bool = ...
    """
    Returns or sets  the protect cell 
    
    <hr>
    
    Getter Method
    
    Signature ``ProtectCell`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProtectCell`` 
    
    :param protectCell: 
    :type protectCell: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SlantAngle: float = ...
    """
    Returns or sets  the slant angle in degrees 
    
    <hr>
    
    Getter Method
    
    Signature ``SlantAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SlantAngle`` 
    
    :param slantAngle: 
    :type slantAngle: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Suffix: str = ...
    """
    Returns or sets  the suffix 
    
    <hr>
    
    Getter Method
    
    Signature ``Suffix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Suffix`` 
    
    :param suffix: 
    :type suffix: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TabDirection: TableCellStyleBuilderTabDirectionType = ...
    """
    Returns or sets  the tab direction 
    
    <hr>
    
    Getter Method
    
    Signature ``TabDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderTabDirectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TabDirection`` 
    
    :param tabDirection: 
    :type tabDirection: :py:class:`NXOpen.Annotations.TableCellStyleBuilderTabDirectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextAlignment: TableCellStyleBuilderTextAlignmentType = ...
    """
    Returns or sets  the text alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``TextAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderTextAlignmentType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextAlignment`` 
    
    :param textAlignment: 
    :type textAlignment: :py:class:`NXOpen.Annotations.TableCellStyleBuilderTextAlignmentType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TimeFormatType: TableCellStyleBuilderTimeFormatTypes = ...
    """
    Returns or sets  the cell time format.  
    
    It is valid to use this when the 
    :py:meth:`NXOpen.Annotations.TableCellStyleBuilder.CellFormatType`` 
    is either :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes.Time <NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes>` or
    :py:class:`NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes.DateTime <NXOpen.Annotations.TableCellStyleBuilderCellFormatTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``TimeFormatType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderTimeFormatTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TimeFormatType`` 
    
    :param timeFormat: 
    :type timeFormat: :py:class:`NXOpen.Annotations.TableCellStyleBuilderTimeFormatTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Url: str = ...
    """
    Returns or sets  the url 
    
    <hr>
    
    Getter Method
    
    Signature ``Url`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Url`` 
    
    :param url: 
    :type url: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ZeroDisplay: TableCellStyleBuilderZeroDisplayType = ...
    """
    Returns or sets  the zero display 
    
    <hr>
    
    Getter Method
    
    Signature ``ZeroDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableCellStyleBuilderZeroDisplayType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZeroDisplay`` 
    
    :param zeroDisplay: 
    :type zeroDisplay: :py:class:`NXOpen.Annotations.TableCellStyleBuilderZeroDisplayType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: TableCellStyleBuilder = ...  # unknown typename


class ImportSymbolBuilderFileFolderMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ImportSymbolBuilderFileFolder():
    """
    the Selection mode Enum 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "File", "File Selection mode"
       "Folder", "Folder Selection mode"
    """
    File = 0  # ImportSymbolBuilderFileFolderMemberType
    Folder = 1  # ImportSymbolBuilderFileFolderMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ImportSymbolBuilder(NXOpen.Builder):
    """
    Represents a builder allowing import of one or many foreign symbols.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.DraftingManager.CreateImportSymbolBuilder`
    
    Default values.
    
    ========================  =====
    Property                  Value
    ========================  =====
    IncludeSubfolders         0 
    ------------------------  -----
    PreserveFolderStructure   0 
    ------------------------  -----
    SelectMode                File 
    ========================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    class FileFolder():
        """
        the Selection mode Enum 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "File", "File Selection mode"
           "Folder", "Folder Selection mode"
        """
        File = 0  # ImportSymbolBuilderFileFolderMemberType
        Folder = 1  # ImportSymbolBuilderFileFolderMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def StartImport(self) -> None:
        """
        Starts the Import process 
        
        Signature ``StartImport()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def GetFilesToProcess(self) -> 'list[str]':
        """
        Returns the names of the selected files 
        
        Signature ``GetFilesToProcess()`` 
        
        :returns: the list of selected files 
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def SetFilesToProcess(self, files: 'list[str]') -> None:
        """
        Sets the names of the selected files 
        
        Signature ``SetFilesToProcess(files)`` 
        
        :param files: the list of the selected files 
        :type files: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def GetExpandedFiles(self) -> 'list[str]':
        """
        Returns the names of the expanded files 
        
        Signature ``GetExpandedFiles()`` 
        
        :returns: the list of selected files 
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def SetExpandedFiles(self, files: 'list[str]') -> None:
        """
        Sets the names of the expanded files 
        
        Signature ``SetExpandedFiles(files)`` 
        
        :param files: the list of the selected files 
        :type files: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    IncludeSubfolders: bool = ...
    """
    Returns or sets  the subfolders toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeSubfolders`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeSubfolders`` 
    
    :param includeSubfolders: 
    :type includeSubfolders: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    InputFolder: str = ...
    """
    Returns or sets  the name of the input folder 
    
    <hr>
    
    Getter Method
    
    Signature ``InputFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``InputFolder`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    IsPartSymbol: bool = ...
    """
    Returns or sets  the Is Part Symbol status 
    
    <hr>
    
    Getter Method
    
    Signature ``IsPartSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``IsPartSymbol`` 
    
    :param isPartSymbol: 
    :type isPartSymbol: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    IsTeamcenter: bool = ...
    """
    Returns or sets  the Teamcwenter mode status 
    
    <hr>
    
    Getter Method
    
    Signature ``IsTeamcenter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``IsTeamcenter`` 
    
    :param isTeamcenter: 
    :type isTeamcenter: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    LibraryPath: str = ...
    """
    Returns or sets  the Reuse library path selection 
    
    <hr>
    
    Getter Method
    
    Signature ``LibraryPath`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``LibraryPath`` 
    
    :param path: 
    :type path: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    PreserveFolderStructure: bool = ...
    """
    Returns or sets  the folder structure toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``PreserveFolderStructure`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``PreserveFolderStructure`` 
    
    :param preserveFolderStructure: 
    :type preserveFolderStructure: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    SelectMode: ImportSymbolBuilderFileFolder = ...
    """
    Returns or sets  the selection mode 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ImportSymbolBuilderFileFolder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectMode`` 
    
    :param selectMode: 
    :type selectMode: :py:class:`NXOpen.Annotations.ImportSymbolBuilderFileFolder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: ImportSymbolBuilder = ...  # unknown typename


class DiameterRadiusLeaderStubMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DiameterRadiusLeaderStub():
    """
    Specifies the leader stub relative to diameter/radius dimension text 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Before", "Specifies leader stub before the dimension text"
       "Below", "Specfies leader stub below the dimension text"
       "Last", "Last enum value. Should not be used."
    """
    Before = 0  # DiameterRadiusLeaderStubMemberType
    Below = 1  # DiameterRadiusLeaderStubMemberType
    Last = 2  # DiameterRadiusLeaderStubMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiAttributeValueNumber(PmiAttributeValue):
    """
    Represents a PMI Attribute Number Value   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiAttributeValueNumberBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttributeValueNumber = ...  # unknown typename


class GeometricCharacteristicMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeometricCharacteristic():
    """
    Specifies the geometric characteristic for an FCF 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Straightness", "Specifies straightnesss characteristics"
       "Flatness", "Specifies flatness characteristics"
       "Circular", "Specifies cirular characteristics"
       "Cylindrical", "Specifies cylindrical characteristics"
       "LineProfile", "Specifies line profile characteristics"
       "SurfaceProfile", "Specifies surface profile characteristics"
       "Angular", "Specifies angular characteristics"
       "Perpendicular", "Specifies perpendicular characteristics"
       "Parallel", "Specifies parallel characteristics"
       "Position", "Specifies position characteristics"
       "Concentric", "Specifies concentric characteristics"
       "Symmetric", "Specifies symmetric characteristics"
       "CircularRunout", "Specifies cirular runout characteristics"
       "TotalRunout", "Specifies total runout characteristics"
       "Last", "Last enum value. Should not be used."
    """
    Straightness = 0  # GeometricCharacteristicMemberType
    Flatness = 1  # GeometricCharacteristicMemberType
    Circular = 2  # GeometricCharacteristicMemberType
    Cylindrical = 3  # GeometricCharacteristicMemberType
    LineProfile = 4  # GeometricCharacteristicMemberType
    SurfaceProfile = 5  # GeometricCharacteristicMemberType
    Angular = 6  # GeometricCharacteristicMemberType
    Perpendicular = 7  # GeometricCharacteristicMemberType
    Parallel = 8  # GeometricCharacteristicMemberType
    Position = 9  # GeometricCharacteristicMemberType
    Concentric = 10  # GeometricCharacteristicMemberType
    Symmetric = 11  # GeometricCharacteristicMemberType
    CircularRunout = 12  # GeometricCharacteristicMemberType
    TotalRunout = 13  # GeometricCharacteristicMemberType
    Last = 14  # GeometricCharacteristicMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UrlBusinessModifierBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.UrlBusinessModifier` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.BusinessModifierCollection.CreateUrlBusinessModifierBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Url: str = ...
    """
    Returns or sets  the url 
    
    <hr>
    
    Getter Method
    
    Signature ``Url`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Url`` 
    
    :param url: 
    :type url: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: UrlBusinessModifierBuilder = ...  # unknown typename


class LeaderDataList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[LeaderData]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: LeaderData) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: LeaderData) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.LeaderData` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> LeaderData:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: LeaderData) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: LeaderData, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.LeaderData` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[LeaderData]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[LeaderData]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: LeaderData, object2: LeaderData) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.LeaderData` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: LeaderData) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.LeaderData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: LeaderDataList = ...  # unknown typename


class TrueLengthTextPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrueLengthTextPosition():
    """
    Specifies the True Length Text position 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Do not display True Length Text"
       "Prefix", "Display True Length Text before dimension value"
       "Suffix", "Display True Length Text after dimension value"
    """
    NotSet = 0  # TrueLengthTextPositionMemberType
    Prefix = 1  # TrueLengthTextPositionMemberType
    Suffix = 2  # TrueLengthTextPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomSymbolTextData(NXOpen.TransientObject):
    """
    Represents custom symbol text data   
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` instead. Use :py:meth:`NXOpen.Annotations.BaseCustomSymbolBuilder.Texts` to query list of custom symbol texts.
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetText(self) -> 'list[str]':
        """
        Returns the text.  
        
        Valid for the text type
        :py:class:`NXOpen.Annotations.TextType.Arbitrary <NXOpen.Annotations.TextType>` and            
        :py:class:`NXOpen.Annotations.TextType.PartiallyControlled <NXOpen.Annotations.TextType>`.  
        
        Signature ``GetText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetText(self, lines: 'list[str]') -> None:
        """
        Sets the text.  
        
        Valid for the text type
        :py:class:`NXOpen.Annotations.TextType.Arbitrary <NXOpen.Annotations.TextType>` and        
        :py:class:`NXOpen.Annotations.TextType.PartiallyControlled <NXOpen.Annotations.TextType>`. 
        
        Signature ``SetText(lines)`` 
        
        :param lines:  List of lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    ControlTextIndex: int = ...
    """
    Returns or sets  the control text index.  
    
    Valid for the text type
    :py:class:`NXOpen.Annotations.TextType.Controlled <NXOpen.Annotations.TextType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ControlTextIndex`` 
    
    :returns:  Control text index  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ControlTextIndex`` 
    
    :param index:  New control text index  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    IntegerValue: int = ...
    """
    Returns or sets  the integer value.  
    
    Valid for the text type
    :py:class:`NXOpen.Annotations.TextType.Integer <NXOpen.Annotations.TextType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegerValue`` 
    
    :returns:  Integer value  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegerValue`` 
    
    :param intValue:  New integer value  
    :type intValue: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    RealValue: float = ...
    """
    Returns or sets  the real value.  
    
    Valid for the text type
    :py:class:`NXOpen.Annotations.TextType.Real <NXOpen.Annotations.TextType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``RealValue`` 
    
    :returns:  Real value  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RealValue`` 
    
    :param realValue:  New real value  
    :type realValue: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    StringValue: str = ...
    """
    Returns  the string value.  
    
    Valid for the text type
    :py:class:`NXOpen.Annotations.TextType.Controlled <NXOpen.Annotations.TextType>` and  
    :py:class:`NXOpen.Annotations.TextType.PartiallyControlled <NXOpen.Annotations.TextType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``StringValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TextType: TextType = ...
    """
    Returns  the text type 
    
    <hr>
    
    Getter Method
    
    Signature ``TextType`` 
    
    :returns:  Text type  
    :rtype: :py:class:`NXOpen.Annotations.TextType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class IntersectionSymbol(DraftingAid):
    """
    Represents a intersection symbol   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.IntersectionSymbolBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: IntersectionSymbol = ...  # unknown typename


class SymbolStyleBuilderFcfTextUnderlineOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SymbolStyleBuilderFcfTextUnderlineOption():
    """
    Represents the option to underline the additional FCF text 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Top", " - "
       "All", " - "
    """
    NotSet = 0  # SymbolStyleBuilderFcfTextUnderlineOptionMemberType
    Top = 1  # SymbolStyleBuilderFcfTextUnderlineOptionMemberType
    All = 2  # SymbolStyleBuilderFcfTextUnderlineOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SymbolStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.SymbolStyleBuilder`.  
    
    This class queries and sets preferences for various symbol type annotations when creating or editing.
    
    .. versionadded:: NX6.0.0
    """
    
    class FcfTextUnderlineOption():
        """
        Represents the option to underline the additional FCF text 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Top", " - "
           "All", " - "
        """
        NotSet = 0  # SymbolStyleBuilderFcfTextUnderlineOptionMemberType
        Top = 1  # SymbolStyleBuilderFcfTextUnderlineOptionMemberType
        All = 2  # SymbolStyleBuilderFcfTextUnderlineOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AttachToIdSymbolVertex: bool = ...
    """
    Returns or sets  the id symbol attachment method 
    
    <hr>
    
    Getter Method
    
    Signature ``AttachToIdSymbolVertex`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttachToIdSymbolVertex`` 
    
    :param attachToIdSymbolVertex: 
    :type attachToIdSymbolVertex: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CenterlineSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the centerline symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineSymbolColor`` 
    
    :param centerlineSymbolColor: 
    :type centerlineSymbolColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    CenterlineSymbolWidth: LineWidth = ...
    """
    Returns or sets  the centerline symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineSymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineSymbolWidth`` 
    
    :param centerlineSymbolWidth: 
    :type centerlineSymbolWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DraftingSurfaceFinishStandard: SurfaceFinishStandard = ...
    """
    Returns or sets  the standard 
    
    <hr>
    
    Getter Method
    
    Signature ``DraftingSurfaceFinishStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SurfaceFinishStandard` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DraftingSurfaceFinishStandard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Annotations.SurfaceFinishStandard` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FcfAdditionalTextUnderline: SymbolStyleBuilderFcfTextUnderlineOption = ...
    """
    Returns or sets  the option to underline the additional FCF text 
    
    <hr>
    
    Getter Method
    
    Signature ``FcfAdditionalTextUnderline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SymbolStyleBuilderFcfTextUnderlineOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FcfAdditionalTextUnderline`` 
    
    :param underlineTextOption: 
    :type underlineTextOption: :py:class:`NXOpen.Annotations.SymbolStyleBuilderFcfTextUnderlineOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GdtSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the GD and T symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``GdtSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GdtSymbolColor`` 
    
    :param gdtSymbolColor: 
    :type gdtSymbolColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GdtSymbolFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the GD and T symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``GdtSymbolFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GdtSymbolFont`` 
    
    :param gdtSymbolFont: 
    :type gdtSymbolFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    GdtSymbolWidth: LineWidth = ...
    """
    Returns or sets  the GD and T symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``GdtSymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GdtSymbolWidth`` 
    
    :param gdtSymbolWidth: 
    :type gdtSymbolWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IdSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the ID symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``IdSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IdSymbolColor`` 
    
    :param idSymbolColor: 
    :type idSymbolColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IdSymbolFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the ID symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``IdSymbolFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IdSymbolFont`` 
    
    :param idSymbolFont: 
    :type idSymbolFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IdSymbolSize: float = ...
    """
    Returns or sets  the ID symbol size 
    
    <hr>
    
    Getter Method
    
    Signature ``IdSymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IdSymbolSize`` 
    
    :param idSymbolSize: 
    :type idSymbolSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IdSymbolWidth: LineWidth = ...
    """
    Returns or sets  the ID symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``IdSymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IdSymbolWidth`` 
    
    :param idSymbolWidth: 
    :type idSymbolWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IntersectionSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the intersection symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntersectionSymbolColor`` 
    
    :param intersectionSymbolColor: 
    :type intersectionSymbolColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IntersectionSymbolFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the intersection symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionSymbolFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntersectionSymbolFont`` 
    
    :param intersectionSymbolFont: 
    :type intersectionSymbolFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IntersectionSymbolWidth: LineWidth = ...
    """
    Returns or sets  the intersection symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionSymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntersectionSymbolWidth`` 
    
    :param intersectionSymbolWidth: 
    :type intersectionSymbolWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SurfaceFinishColor: NXOpen.NXColor = ...
    """
    Returns or sets  the surface finish symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceFinishColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceFinishColor`` 
    
    :param surfaceFinishColor: 
    :type surfaceFinishColor: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SurfaceFinishFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the surface finish symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceFinishFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceFinishFont`` 
    
    :param surfaceFinishFont: 
    :type surfaceFinishFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SurfaceFinishWidth: LineWidth = ...
    """
    Returns or sets  the surface finish symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceFinishWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceFinishWidth`` 
    
    :param surfaceFinishWidth: 
    :type surfaceFinishWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TargetSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the target symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetSymbolColor`` 
    
    :param targetSymbolColor: 
    :type targetSymbolColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TargetSymbolFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the target symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetSymbolFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetSymbolFont`` 
    
    :param targetSymbolFont: 
    :type targetSymbolFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TargetSymbolWidth: LineWidth = ...
    """
    Returns or sets  the target symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetSymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetSymbolWidth`` 
    
    :param targetSymbolWidth: 
    :type targetSymbolWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UserDefinedSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the user defined symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedSymbolColor`` 
    
    :param userDefinedSymbolColor: 
    :type userDefinedSymbolColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UserDefinedSymbolFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the user defined symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedSymbolFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedSymbolFont`` 
    
    :param userDefinedSymbolFont: 
    :type userDefinedSymbolFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UserDefinedSymbolWidth: LineWidth = ...
    """
    Returns or sets  the user defined symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedSymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedSymbolWidth`` 
    
    :param userDefinedSymbolWidth: 
    :type userDefinedSymbolWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    WeldLineGap: float = ...
    """
    Returns or sets  the gap between the weld line and weld type symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldLineGap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldLineGap`` 
    
    :param gap: 
    :type gap: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    WeldSpaceFactor: float = ...
    """
    Returns or sets  the weld space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSpaceFactor`` 
    
    :param factor: 
    :type factor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    WeldSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the Weld symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSymbolColor`` 
    
    :param weldSymbolColor: 
    :type weldSymbolColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    WeldSymbolFont: NXOpen.DisplayableObjectObjectFont = ...
    """
    Returns or sets  the Weld symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSymbolFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSymbolFont`` 
    
    :param weldSymbolFont: 
    :type weldSymbolFont: :py:class:`NXOpen.DisplayableObjectObjectFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    WeldSymbolSizeFactor: float = ...
    """
    Returns or sets  the character size factor that controls the weld symbol size.  
    
    The value is greater than zero. 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSymbolSizeFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSymbolSizeFactor`` 
    
    :param factor: 
    :type factor: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    WeldSymbolStandard: WeldStandard = ...
    """
    Returns or sets  the weld symbol standard 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSymbolStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.WeldStandard` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSymbolStandard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Annotations.WeldStandard` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WeldSymbolWidth: LineWidth = ...
    """
    Returns or sets  the Weld symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldSymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldSymbolWidth`` 
    
    :param weldSymbolWidth: 
    :type weldSymbolWidth: :py:class:`NXOpen.Annotations.LineWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: SymbolStyleBuilder = ...  # unknown typename


class FitAnsiHoleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FitAnsiHoleType():
    """
    Specifies the limit and fit ANSI hole 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hole", "Use hole values for the ANSI limit and fit tolerance"
       "Shaft", "Use shaft values for the ANSI limit and fit tolerance"
       "Fit", "Use fit values for the ANSI limit and fit tolerance"
    """
    Hole = 0  # FitAnsiHoleTypeMemberType
    Shaft = 1  # FitAnsiHoleTypeMemberType
    Fit = 2  # FitAnsiHoleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DecimalPointCharacterMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DecimalPointCharacter():
    """
    Specifies the decimal point character 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Period", "Specifies period decimal point character"
       "Comma", "Specifies comma decimal point character"
       "Last", "Last enum value. Should not be used."
    """
    Period = 0  # DecimalPointCharacterMemberType
    Comma = 1  # DecimalPointCharacterMemberType
    Last = 2  # DecimalPointCharacterMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Note(BaseNote):
    """
    Represents a Note   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingNoteBuilder`
    
    .. versionadded:: NX3.0.0
    """
    Null: Note = ...  # unknown typename


class SymbolWorkflowBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.SymbolWorkflowBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    SymbolAutoUpdate: bool = ...
    """
    Returns or sets  the symbol auto update determines whether or not unlocked, associative custom symbol instances update automatically
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolAutoUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolAutoUpdate`` 
    
    :param symbolAutoUpdate: 
    :type symbolAutoUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolSmashToSketch: bool = ...
    """
    Returns or sets  the symbol smash to sketch specifies if curve objects in symbols are added to a sketch on custom symbol smash 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolSmashToSketch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolSmashToSketch`` 
    
    :param symbolSmashToSketch: 
    :type symbolSmashToSketch: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SymbolWorkflowBuilder = ...  # unknown typename


class BalloonNote(PmiAttribute):
    """
    Represents a Balloon Note   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.BalloonNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: BalloonNote = ...  # unknown typename


class DimensionWorkflowBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Annotations WorkFlowBuilder.  
    
    This class queries and sets general dimension attributes while creating or editing a dimension.
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AutomaticCreationIntersectionSymbol: bool = ...
    """
    Returns or sets  the automatic creation of Intersection Symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticCreationIntersectionSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticCreationIntersectionSymbol`` 
    
    :param automaticCreationIntersectionSymbol: 
    :type automaticCreationIntersectionSymbol: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    EnableDirectedDimension: bool = ...
    """
    Returns or sets  the directed dimension.  
    
    This specifies whether to create directed dimension or not 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableDirectedDimension`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableDirectedDimension`` 
    
    :param directedDimension: 
    :type directedDimension: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    HoverSceneDialogDelay: int = ...
    """
    Returns or sets  the hover scene dialog delay time 
    
    <hr>
    
    Getter Method
    
    Signature ``HoverSceneDialogDelay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoverSceneDialogDelay`` 
    
    :param hoverSceneDialogDelay: 
    :type hoverSceneDialogDelay: int 
    
    .. versionadded:: NX10.0.2
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: DimensionWorkflowBuilder = ...  # unknown typename


class DraftingSurfaceFinishCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.DraftingSurfaceFinish` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDraftingSurfaceFinishBuilder(self, draftingSurfaceFinish: DraftingSurfaceFinish) -> DraftingSurfaceFinishBuilder:
        """
        If None create a new Drafting Surface Finish, otherwise edit existing Drafting Surface Annotatation 
        
        Signature ``CreateDraftingSurfaceFinishBuilder(draftingSurfaceFinish)`` 
        
        :param draftingSurfaceFinish:  surface finish 
        :type draftingSurfaceFinish: :py:class:`NXOpen.Annotations.DraftingSurfaceFinish` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DraftingSurfaceFinishBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingSurfaceFinish:
        """
        Finds the drafting surface finish with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the drafting surface finish to be found  
        :type journalIdentifier: str 
        :returns:  drafting surface finish with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.DraftingSurfaceFinish` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class CenterlineCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Centerline` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSymmetricalCenterlineBuilder(self, centerline: SymmetricalCenterline) -> SymmetricalCenterlineBuilder:
        """
        Creates the Symmetrical Centerline builder  
        
        Signature ``CreateSymmetricalCenterlineBuilder(centerline)`` 
        
        :param centerline:  :py:class:`NXOpen.Annotations.SymmetricalCenterline` to be edited, if None then create a new one  
        :type centerline: :py:class:`NXOpen.Annotations.SymmetricalCenterline` 
        :returns:  SymmetricalCenterlineBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.SymmetricalCenterlineBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateBoltCircleCenterlineBuilder(self, centerline: BoltCircleCenterline) -> BoltCircleCenterlineBuilder:
        """
        Creates the BoltCircleCenterline builder  
        
        Signature ``CreateBoltCircleCenterlineBuilder(centerline)`` 
        
        :param centerline:  :py:class:`NXOpen.Annotations.BoltCircleCenterline` to be edited, if None then create a new one  
        :type centerline: :py:class:`NXOpen.Annotations.BoltCircleCenterline` 
        :returns:  BoltCircleCenterlineBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.BoltCircleCenterlineBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCircularCenterlineBuilder(self, centerline: CircularCenterline) -> CircularCenterlineBuilder:
        """
        Creates the CircularCenterline builder  
        
        Signature ``CreateCircularCenterlineBuilder(centerline)`` 
        
        :param centerline:  :py:class:`NXOpen.Annotations.CircularCenterline` to be edited, if None then create a new one   
        :type centerline: :py:class:`NXOpen.Annotations.CircularCenterline` 
        :returns:  CircularCenterlineBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.CircularCenterlineBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCenterMarkBuilder(self, centerline: CenterMark) -> CenterMarkBuilder:
        """
        Creates the CenterMark Builder  
        
        Signature ``CreateCenterMarkBuilder(centerline)`` 
        
        :param centerline:  :py:class:`NXOpen.Annotations.CenterMark` to be edited, if None then create a new one  
        :type centerline: :py:class:`NXOpen.Annotations.CenterMark` 
        :returns:  CenterMarkBuilder Object  
        :rtype: :py:class:`NXOpen.Annotations.CenterMarkBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiCenterMarkBuilder(self, centerline: PmiCenterMark) -> PmiCenterMarkBuilder:
        """
        Creates the Pmi CenterMark Builder  
        
        Signature ``CreatePmiCenterMarkBuilder(centerline)`` 
        
        :param centerline:  :py:class:`NXOpen.Annotations.PmiCenterMark` to be edited, if None then create a new one  
        :type centerline: :py:class:`NXOpen.Annotations.PmiCenterMark` 
        :returns:  PmiCenterMarkBuilder Object  
        :rtype: :py:class:`NXOpen.Annotations.PmiCenterMarkBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCenterline2dBuilder(self, cline: Centerline2d) -> Centerline2dBuilder:
        """
        Creates the 2D Centerline builder  
        
        Signature ``CreateCenterline2dBuilder(cline)`` 
        
        :param cline:  :py:class:`NXOpen.Annotations.Centerline2d` to be edited  
        :type cline: :py:class:`NXOpen.Annotations.Centerline2d` 
        :returns:  Centerline2dBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.Centerline2dBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> Centerline:
        """
        Finds the Centerline with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the centerline to be found  
        :type journalIdentifier: str 
        :returns:  Centerline with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.Centerline` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateAutomaticCenterlineBuilder(self) -> AutomaticCenterlineBuilder:
        """
        Creates the AutomaticCenterlineBuilder  
        
        Signature ``CreateAutomaticCenterlineBuilder()`` 
        
        :returns:  AutomaticCenterlineBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.AutomaticCenterlineBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCenterline3dBuilder(self, cline: Centerline3d) -> Centerline3dBuilder:
        """
        Creates the 3D Centerline builder  
        
        Signature ``CreateCenterline3dBuilder(cline)`` 
        
        :param cline:  :py:class:`NXOpen.Annotations.Centerline3d` to be edited  
        :type cline: :py:class:`NXOpen.Annotations.Centerline3d` 
        :returns:  Annotations.Centerline3dBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.Centerline3dBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiCenterline3dBuilder(self, cline: PmiCenterline3d) -> PmiCenterline3dBuilder:
        """
        Creates the Pmi 3D Centerline builder  
        
        Signature ``CreatePmiCenterline3dBuilder(cline)`` 
        
        :param cline:  :py:class:`NXOpen.Annotations.PmiCenterline3d` to be edited  
        :type cline: :py:class:`NXOpen.Annotations.PmiCenterline3d` 
        :returns:  PmiCenterline3dBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.PmiCenterline3dBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiBoltCircleCenterlineBuilder(self, centerline: PmiBoltCircleCenterline) -> PmiBoltCircleCenterlineBuilder:
        """
        Creates the PMI BoltCircleCenterline builder  
        
        Signature ``CreatePmiBoltCircleCenterlineBuilder(centerline)`` 
        
        :param centerline:  :py:class:`NXOpen.Annotations.PmiBoltCircleCenterline` to be edited, if None then create a new one  
        :type centerline: :py:class:`NXOpen.Annotations.PmiBoltCircleCenterline` 
        :returns:  PmiBoltCircleCenterlineBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.PmiBoltCircleCenterlineBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    


class FrameBarCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.FrameBar` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFrameBarBuilder(self, framebar: FrameBar) -> FrameBarBuilder:
        """
        If None create a new Frame bar, otherwise edit existing Frame bar Annotatation 
        
        Signature ``CreateFrameBarBuilder(framebar)`` 
        
        :param framebar:  frame bar 
        :type framebar: :py:class:`NXOpen.Annotations.FrameBar` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.FrameBarBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def CreateAddTicBuilder(self, framebar: FrameBar) -> AddTicBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.AddTicBuilder`  
        
        Signature ``CreateAddTicBuilder(framebar)`` 
        
        :param framebar:  frame bar 
        :type framebar: :py:class:`NXOpen.Annotations.FrameBar` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.AddTicBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> FrameBar:
        """
        Finds the frame bar with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the frame bar to be found  
        :type journalIdentifier: str 
        :returns:  frame bar with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.FrameBar` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingFormatTitleBuilderTitleBlockPositionType():
    """
    Represent the option of TitleBlockPosition that specifies Type display 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", " - "
       "TopRight", " - "
       "BottomLeft", " - "
       "BottomRight", " - "
    """
    TopLeft = 0  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
    TopRight = 1  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
    BottomLeft = 2  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
    BottomRight = 3  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingFormatTitleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DrawingFormatTitleBuilder`  
    
    .. versionadded:: NX9.0.0
    """
    
    class TitleBlockPositionType():
        """
        Represent the option of TitleBlockPosition that specifies Type display 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopLeft", " - "
           "TopRight", " - "
           "BottomLeft", " - "
           "BottomRight", " - "
        """
        TopLeft = 0  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
        TopRight = 1  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
        BottomLeft = 2  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
        BottomRight = 3  # DrawingFormatTitleBuilderTitleBlockPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Automatic: bool = ...
    """
    Returns or sets  the flag that determines whether or not the title block updates automatically whenever a change occurs to a referenced object in the model 
    
    <hr>
    
    Getter Method
    
    Signature ``Automatic`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Automatic`` 
    
    :param automatic: 
    :type automatic: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TitleBlockAlignmentPosition: DrawingFormatTitleBuilderTitleBlockPositionType = ...
    """
    Returns or sets  the option that specifies how the title block aligns relative to the cursor during placement 
    
    <hr>
    
    Getter Method
    
    Signature ``TitleBlockAlignmentPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrawingFormatTitleBuilderTitleBlockPositionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TitleBlockAlignmentPosition`` 
    
    :param titleBlockAlignmentPosition: 
    :type titleBlockAlignmentPosition: :py:class:`NXOpen.Annotations.DrawingFormatTitleBuilderTitleBlockPositionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: DrawingFormatTitleBuilder = ...  # unknown typename


class ChainDimension(DimensionSet):
    """
    Represents a chain dimension.  
    
    It is a set of horizontal or vertical
    dimensions. 
    There is no KF creator for this class.
    
    .. versionadded:: NX4.0.0
    """
    Null: ChainDimension = ...  # unknown typename


class PmiChainDimension(ChainDimension):
    """
    Represents a PMI chain dimension.  
    
    It is a set of horizontal or vertical
    dimensions. 
    There is no KF creator for this class.
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiChainDimension = ...  # unknown typename


class LineAndArrowPreferences(NXOpen.TransientObject):
    """
    Represents line and arrow preferences   
    
    .. versionadded:: NX3.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFirstExtensionLineCfw(self) -> LineCfw:
        """
        Returns the first extension line color, font, and width  
        
        Signature ``GetFirstExtensionLineCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFirstExtensionLineCfw(self, firstExtensionLineCfw: LineCfw) -> None:
        """
        Sets the first extension line color, font, and width 
        
        Signature ``SetFirstExtensionLineCfw(firstExtensionLineCfw)`` 
        
        :param firstExtensionLineCfw: 
        :type firstExtensionLineCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFirstArrowheadCfw(self) -> LineCfw:
        """
        Returns the first arrowhead color, font, and width  
        
        Signature ``GetFirstArrowheadCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFirstArrowheadCfw(self, firstArrowheadCfw: LineCfw) -> None:
        """
        Sets the first arrowhead color, font, and width 
        
        Signature ``SetFirstArrowheadCfw(firstArrowheadCfw)`` 
        
        :param firstArrowheadCfw: 
        :type firstArrowheadCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFirstArrowLineCfw(self) -> LineCfw:
        """
        Returns the first arrow line color, font, and width  
        
        Signature ``GetFirstArrowLineCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFirstArrowLineCfw(self, firstArrowLineCfw: LineCfw) -> None:
        """
        Sets the first arrow line color, font, and width 
        
        Signature ``SetFirstArrowLineCfw(firstArrowLineCfw)`` 
        
        :param firstArrowLineCfw: 
        :type firstArrowLineCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondExtensionLineCfw(self) -> LineCfw:
        """
        Returns the second extension line color, font, and width  
        
        Signature ``GetSecondExtensionLineCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSecondExtensionLineCfw(self, secondExtensionLineCfw: LineCfw) -> None:
        """
        Sets the second extension line color, font, and width 
        
        Signature ``SetSecondExtensionLineCfw(secondExtensionLineCfw)`` 
        
        :param secondExtensionLineCfw: 
        :type secondExtensionLineCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondArrowheadCfw(self) -> LineCfw:
        """
        Returns the second arrowhead color, font, and width  
        
        Signature ``GetSecondArrowheadCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSecondArrowheadCfw(self, secondArrowheadCfw: LineCfw) -> None:
        """
        Sets the second arrowhead color, font, and width 
        
        Signature ``SetSecondArrowheadCfw(secondArrowheadCfw)`` 
        
        :param secondArrowheadCfw: 
        :type secondArrowheadCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondArrowLineCfw(self) -> LineCfw:
        """
        Returns the second arrow line color, font, and width  
        
        Signature ``GetSecondArrowLineCfw()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSecondArrowLineCfw(self, secondArrowLineCfw: LineCfw) -> None:
        """
        Sets the second arrow line color, font, and width 
        
        Signature ``SetSecondArrowLineCfw(secondArrowLineCfw)`` 
        
        :param secondArrowLineCfw: 
        :type secondArrowLineCfw: :py:class:`NXOpen.Annotations.LineCfw` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    AllAroundSymbol: float = ...
    """
    Returns or sets  the size of all around symbol.  
    
    This is also used for inner diameter of all over symbol   
    
    <hr>
    
    Getter Method
    
    Signature ``AllAroundSymbol`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllAroundSymbol`` 
    
    :param allAroundSymbolSize: 
    :type allAroundSymbolSize: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ArrowheadIncludedAngle: float = ...
    """
    Returns or sets  the arrowhead included angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadIncludedAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadIncludedAngle`` 
    
    :param arrowheadIncludedAngle: 
    :type arrowheadIncludedAngle: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ArrowheadLength: float = ...
    """
    Returns or sets  the arrowhead length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadLength`` 
    
    :param arrowheadLength: 
    :type arrowheadLength: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ClipOrdinateDimensionLine: bool = ...
    """
    Returns or sets  the clipping of the dimension line to the ordinate origin at the view border 
    
    <hr>
    
    Getter Method
    
    Signature ``ClipOrdinateDimensionLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClipOrdinateDimensionLine`` 
    
    :param clipOrdinateDimLine: 
    :type clipOrdinateDimLine: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DatumLengthPastArrow: float = ...
    """
    Returns or sets  the datum extension line past the arrow distance 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumLengthPastArrow`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumLengthPastArrow`` 
    
    :param datumLengthPastArrow: 
    :type datumLengthPastArrow: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DotArrowheadDiameter: float = ...
    """
    Returns or sets  the dot arrowhead diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``DotArrowheadDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DotArrowheadDiameter`` 
    
    :param dotArrowheadDiameter: 
    :type dotArrowheadDiameter: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FirstArrowType: ArrowheadType = ...
    """
    Returns or sets  the first arrow type 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstArrowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstArrowType`` 
    
    :param firstArrowType: 
    :type firstArrowType: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FirstPosToExtLineDist: float = ...
    """
    Returns or sets  the first position to extension line distance 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstPosToExtLineDist`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstPosToExtLineDist`` 
    
    :param firstPosToExtensionLineDistance: 
    :type firstPosToExtensionLineDistance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LeaderLocation: VerticalTextJustification = ...
    """
    Returns or sets  the leader location 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.VerticalTextJustification` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderLocation`` 
    
    :param leaderLocation: 
    :type leaderLocation: :py:class:`NXOpen.Annotations.VerticalTextJustification` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LinePastArrowDistance: float = ...
    """
    Returns or sets  the line past arrow distance 
    
    <hr>
    
    Getter Method
    
    Signature ``LinePastArrowDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinePastArrowDistance`` 
    
    :param linePastArrowDistance: 
    :type linePastArrowDistance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LinePastArrowDistance2: float = ...
    """
    Returns or sets  the 2nd line past arrow distance 
    
    <hr>
    
    Getter Method
    
    Signature ``LinePastArrowDistance2`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinePastArrowDistance2`` 
    
    :param linePastArrowDistance: 
    :type linePastArrowDistance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ObliqueExtensionLineAngle: float = ...
    """
    Returns or sets  the oblique extension line angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ObliqueExtensionLineAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObliqueExtensionLineAngle`` 
    
    :param obliqueExtensionLineAngle: 
    :type obliqueExtensionLineAngle: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SecondArrowType: ArrowheadType = ...
    """
    Returns or sets  the second arrow type 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondArrowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondArrowType`` 
    
    :param secondArrowType: 
    :type secondArrowType: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SecondPosToExtLineDist: float = ...
    """
    Returns or sets  the second position to extension line distance 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondPosToExtLineDist`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondPosToExtLineDist`` 
    
    :param secondPosToExtensionLineDistance: 
    :type secondPosToExtensionLineDistance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    StubLength: float = ...
    """
    Returns or sets  the stub length 
    
    <hr>
    
    Getter Method
    
    Signature ``StubLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StubLength`` 
    
    :param stubLength: 
    :type stubLength: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    TextOverLeaderGapFactor: float = ...
    """
    Returns or sets  the character size factor that controls the gap between text and the leader 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOverLeaderGapFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOverLeaderGapFactor`` 
    
    :param textOverLeaderGapFactor: 
    :type textOverLeaderGapFactor: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TextOverStubSpaceFactor: float = ...
    """
    Returns or sets  the text to stub spacing factor 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOverStubSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOverStubSpaceFactor`` 
    
    :param textOverStubSpaceFactor: 
    :type textOverStubSpaceFactor: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TextToLineDistance: float = ...
    """
    Returns or sets  the text to line distance 
    
    <hr>
    
    Getter Method
    
    Signature ``TextToLineDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextToLineDistance`` 
    
    :param textToLineDistance: 
    :type textToLineDistance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class TextComponentTextTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextComponentTextType():
    """
    the text type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Text", "primary dimension text or main text for draft aids"
       "DualDimension", "dual dimension text"
       "Tolerance", "tolerance text"
       "DualTolerance", "dual tolerance text"
       "DiameterRadius", "diameter or radius or arc length symbol text"
       "AppendedAbove", "appended text above"
       "AppendedBelow", "appended text below"
       "AppendedBefore", "appended text before"
       "AppendedAfter", "appended text after"
       "ChamferBefore", "chamfer text before"
       "ChamferAfter", "chamfer text after"
       "ChamferSize", "chamfer size text"
       "ChamferXSymbol", "chamfer x symbol text"
       "ChamferAngle", "chamfer angle symbol text"
    """
    Text = 0  # TextComponentTextTypeMemberType
    DualDimension = 1  # TextComponentTextTypeMemberType
    Tolerance = 2  # TextComponentTextTypeMemberType
    DualTolerance = 3  # TextComponentTextTypeMemberType
    DiameterRadius = 4  # TextComponentTextTypeMemberType
    AppendedAbove = 5  # TextComponentTextTypeMemberType
    AppendedBelow = 6  # TextComponentTextTypeMemberType
    AppendedBefore = 7  # TextComponentTextTypeMemberType
    AppendedAfter = 8  # TextComponentTextTypeMemberType
    ChamferBefore = 9  # TextComponentTextTypeMemberType
    ChamferAfter = 10  # TextComponentTextTypeMemberType
    ChamferSize = 11  # TextComponentTextTypeMemberType
    ChamferXSymbol = 12  # TextComponentTextTypeMemberType
    ChamferAngle = 13  # TextComponentTextTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TextComponent(NXOpen.TransientObject):
    """
    Represents a single text in an annotation and can be queried for 
    information about that text.  
    
    This information includes the type of text, the number 
    of lines of text, the lines of text, and the origin in absolute coordinates. 
    
    .. versionadded:: NX6.0.0
    """
    
    class TextType():
        """
        the text type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Text", "primary dimension text or main text for draft aids"
           "DualDimension", "dual dimension text"
           "Tolerance", "tolerance text"
           "DualTolerance", "dual tolerance text"
           "DiameterRadius", "diameter or radius or arc length symbol text"
           "AppendedAbove", "appended text above"
           "AppendedBelow", "appended text below"
           "AppendedBefore", "appended text before"
           "AppendedAfter", "appended text after"
           "ChamferBefore", "chamfer text before"
           "ChamferAfter", "chamfer text after"
           "ChamferSize", "chamfer size text"
           "ChamferXSymbol", "chamfer x symbol text"
           "ChamferAngle", "chamfer angle symbol text"
        """
        Text = 0  # TextComponentTextTypeMemberType
        DualDimension = 1  # TextComponentTextTypeMemberType
        Tolerance = 2  # TextComponentTextTypeMemberType
        DualTolerance = 3  # TextComponentTextTypeMemberType
        DiameterRadius = 4  # TextComponentTextTypeMemberType
        AppendedAbove = 5  # TextComponentTextTypeMemberType
        AppendedBelow = 6  # TextComponentTextTypeMemberType
        AppendedBefore = 7  # TextComponentTextTypeMemberType
        AppendedAfter = 8  # TextComponentTextTypeMemberType
        ChamferBefore = 9  # TextComponentTextTypeMemberType
        ChamferAfter = 10  # TextComponentTextTypeMemberType
        ChamferSize = 11  # TextComponentTextTypeMemberType
        ChamferXSymbol = 12  # TextComponentTextTypeMemberType
        ChamferAngle = 13  # TextComponentTextTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Free resources associated with the text component.  
        
        After this method
        is called, it is illegal to use the object.  In .NET, this method
        is automatically called when the object is deleted by the garbage
        collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetText(self) -> 'list[str]':
        """
        Gets all of the text for the text component.  
        
        Signature ``GetText()`` 
        
        :returns:  the lines of text  
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDistanceToTop(self) -> float:
        """
        The distance from the origin to the top of text.  
        
        Signature ``GetDistanceToTop()`` 
        
        :returns:  the distance from the origin to the top of text  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIntegerizedLength(self, nth: int) -> int:
        """
        The text integerized length.  
        
        Signature ``GetIntegerizedLength(nth)`` 
        
        :param nth:  the nth text. nth starts with 0.  
        :type nth: int 
        :returns:  the text integerized length  
        :rtype: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAngle(self) -> float:
        """
        The text angle.  
        
        Signature ``GetAngle()`` 
        
        :returns:  the text angle  
        :rtype: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    AdjustedOrigin: NXOpen.Point3d = ...
    """
    Returns  the adjusted text origin in absolute coordinates.  
    
    If the annotation is on a drawing, origin is returned 
    in drawing space. If the annotation is on the model,
    origin is returned in model space. Text origin and adjusted
    text origin should be equivalent except for underline notes  
    The adjusted origin is used for display 
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustedOrigin`` 
    
    :returns:  the adjusted text origin in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: None.
    """
    Height: float = ...
    """
    Returns  the text height.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns:  the text height  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Length: float = ...
    """
    Returns  the text length.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns:  the text length  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NumberLines: int = ...
    """
    Returns  the number of lines of text.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberLines`` 
    
    :returns:  the number of lines of text  
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: NXOpen.Point3d = ...
    """
    Returns  the text origin in absolute coordinates.  
    
    If the annotation is on a drawing, origin is returned 
    in drawing space. If the annotation is on the model,
    origin is returned in model space. 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns:  the text origin in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: TextComponentTextType = ...
    """
    Returns  the text type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  the text type  
    :rtype: :py:class:`NXOpen.Annotations.TextComponentTextType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """


class LeaderAttachmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderAttachment():
    """
    Specifies what a leader is attached to 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Null", "Should not be used"
       "OnObject", " - "
       "Screen", " - "
       "Last", "Last enum value. Should not be used."
    """
    Null = -1  # LeaderAttachmentMemberType
    OnObject = 0  # LeaderAttachmentMemberType
    Screen = 1  # LeaderAttachmentMemberType
    Last = 2  # LeaderAttachmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DatumData(NXOpen.TransientObject):
    """
    Represents datum data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSimpleDraftingAidPreferences(self) -> SimpleDraftingAidPreferences:
        """
        Returns the SimpleDraftingAidPreferences object  
        
        Signature ``GetSimpleDraftingAidPreferences()`` 
        
        :returns:  Datum preferences  
        :rtype: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSimpleDraftingAidPreferences(self, preferences: SimpleDraftingAidPreferences) -> None:
        """
        Sets the SimpleDraftingAidPreferences object 
        
        Signature ``SetSimpleDraftingAidPreferences(preferences)`` 
        
        :param preferences:  New datum preferences  
        :type preferences: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    AlwaysVertical: bool = ...
    """
    Returns or sets  the flag indicating whether the datum is always vertical (without the stub)  
    
    <hr>
    
    Getter Method
    
    Signature ``AlwaysVertical`` 
    
    :returns:  Flag indicating whether the datum is always vertical  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlwaysVertical`` 
    
    :param alwaysVertical:  Flag indicating whether the datum is always vertical  
    :type alwaysVertical: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DrawX: bool = ...
    """
    Returns or sets  the flag indicating whether to draw X, where the leader terminates 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawX`` 
    
    :returns:  Flag indicating whether to draw X where leader termiantes  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawX`` 
    
    :param drawX:  Flag indicating whether to draw X where leader termiantes  
    :type drawX: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Label: str = ...
    """
    Returns or sets  the label 
    
    <hr>
    
    Getter Method
    
    Signature ``Label`` 
    
    :returns:  Datum label  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Label`` 
    
    :param label:  Datum label  
    :type label: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class CustomerValueBusinessModifierBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.CustomerValueBusinessModifier` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.BusinessModifierCollection.CreateCustomerValueBusinessModifierBuilder`
    
    .. versionadded:: NX6.0.0
    """
    CustomerValue: str = ...
    """
    Returns or sets  the customer value 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomerValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomerValue`` 
    
    :param customerValue: 
    :type customerValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: CustomerValueBusinessModifierBuilder = ...  # unknown typename


class SearchCriteriaFeatureControlFrameBuilderFrameStyleOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderFrameStyleOptions():
    """
    Lists the search pmi feature control frame style
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleFrame", "single frame"
       "CompositeFrame", "composite frame"
    """
    SingleFrame = 0  # SearchCriteriaFeatureControlFrameBuilderFrameStyleOptionsMemberType
    CompositeFrame = 1  # SearchCriteriaFeatureControlFrameBuilderFrameStyleOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderCharacteristicOptions():
    """
    Lists the search pmi feature control frame type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Straightness", "strainhtness"
       "Flatness", "flatness"
       "Circularity", "circularity"
       "Cylindricity", "cylindricity"
       "ProfileOfALine", "Profile Of A Line"
       "ProfileOfASurface", "profile Of A Surface"
       "Angularity", "angularity"
       "Perpendicularity", "perpendicularity"
       "Parallelism", "parallelism"
       "Position", "position"
       "Concentricity", "concentricity"
       "Symmetry", "symmetry"
       "CircularRunout", "circular runout"
       "TotalRunout", "total runout"
       "AxisIntersection", "axis intersection"
    """
    Straightness = 0  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Flatness = 1  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Circularity = 2  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Cylindricity = 3  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    ProfileOfALine = 4  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    ProfileOfASurface = 5  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Angularity = 6  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Perpendicularity = 7  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Parallelism = 8  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Position = 9  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Concentricity = 10  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    Symmetry = 11  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    CircularRunout = 12  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    TotalRunout = 13  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    AxisIntersection = 14  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptions():
    """
    Lists the type of pmi feature control frame tolerance MCM
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessofFeatureSize", "regardless of feature size"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
    LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
    MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
    RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderZoneShapeOptions():
    """
    Lists the type of pmi feature control frame zone shape
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "Diameter", "diameter"
       "SphericalDiameter", "spherical diameter"
       "Square", "square"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
    Diameter = 1  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
    SphericalDiameter = 2  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
    Square = 3  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderStatisticalOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderStatisticalOptions():
    """
    Lists the status of pmi feature control frame statistical
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have statistical"
       "No", "have no statistical"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderStatisticalOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderStatisticalOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptions():
    """
    Lists the status of pmi feature control frame tangent plane
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have tangent plane"
       "No", "have no tangent plane"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderFreeStateOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderFreeStateOptions():
    """
    Lists the status of pmi feature control frame free state
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have free state"
       "No", "have no free state"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderFreeStateOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderFreeStateOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderCircleUOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderCircleUOptions():
    """
    Lists the status of pmi feature control frame circleU
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have circle U"
       "No", "have no circle U"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderCircleUOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderCircleUOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderProjectedOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderProjectedOptions():
    """
    Lists the status of pmi feature control frame projected
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have projected"
       "No", "have no projected"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderProjectedOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderProjectedOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptions():
    """
    Lists the type of pmi feature control frame primary datum MCM
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessofFeatureSize", "regardless of feature size"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
    LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
    MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
    RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptions():
    """
    Lists the type of pmi feature control frame primary datum dual MCM
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessofFeatureSize", "regardless of feature size"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
    LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
    MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
    RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptions():
    """
    Lists the type of pmi feature control frame secondary datum MCM
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessofFeatureSize", "regardless of feature size"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
    LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
    MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
    RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptions():
    """
    Lists the type of pmi feature control frame secondary datum dual MCM
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessofFeatureSize", "regardless of feature size"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
    LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
    MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
    RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptions():
    """
    Lists the type of pmi feature control frame tertiary datum MCM
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessofFeatureSize", "regardless of feature size"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
    LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
    MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
    RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptions():
    """
    Lists the type of pmi feature control frame tertiary datum dual MCM
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "LeastMaterialCondition", "least material condition"
       "MaximumMaterialCondition", "maximum material condition"
       "RegardlessofFeatureSize", "regardless of feature size"
    """
    NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
    LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
    MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
    RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderIndicatorOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderIndicatorOptions():
    """
    Lists the status of pmi feature control frame indicator
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have indicator"
       "No", "have no indicator"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderIndicatorOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderIndicatorOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptions():
    """
    Lists the status of pmi feature control frame collection plane indicator
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have collection plane indicator"
       "No", "have no collection plane indicator"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptions():
    """
    Lists the status of pmi feature control frame direction feature indicator
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have direction feature indicator"
       "No", "have no direction feature indicator"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptions():
    """
    Lists the status of pmi feature control frame intersection plane indicator
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have intersection plane indicator"
       "No", "have no intersection plane indicator"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptions():
    """
    Lists the status of pmi feature control frame orientation plane indicator
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "have orientation plane indicator"
       "No", "have no orientation plane indicator"
    """
    Yes = 0  # SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptionsMemberType
    No = 1  # SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaFeatureControlFrameBuilder(NXOpen.Builder):
    """
    Represents SearchCriteriaFeatureControlFrameBuilder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SearchModelViewCollection.CreateSearchCriteriaFeatureControlFrameBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class FrameStyleOptions():
        """
        Lists the search pmi feature control frame style
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SingleFrame", "single frame"
           "CompositeFrame", "composite frame"
        """
        SingleFrame = 0  # SearchCriteriaFeatureControlFrameBuilderFrameStyleOptionsMemberType
        CompositeFrame = 1  # SearchCriteriaFeatureControlFrameBuilderFrameStyleOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CharacteristicOptions():
        """
        Lists the search pmi feature control frame type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Straightness", "strainhtness"
           "Flatness", "flatness"
           "Circularity", "circularity"
           "Cylindricity", "cylindricity"
           "ProfileOfALine", "Profile Of A Line"
           "ProfileOfASurface", "profile Of A Surface"
           "Angularity", "angularity"
           "Perpendicularity", "perpendicularity"
           "Parallelism", "parallelism"
           "Position", "position"
           "Concentricity", "concentricity"
           "Symmetry", "symmetry"
           "CircularRunout", "circular runout"
           "TotalRunout", "total runout"
           "AxisIntersection", "axis intersection"
        """
        Straightness = 0  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Flatness = 1  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Circularity = 2  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Cylindricity = 3  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        ProfileOfALine = 4  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        ProfileOfASurface = 5  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Angularity = 6  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Perpendicularity = 7  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Parallelism = 8  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Position = 9  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Concentricity = 10  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        Symmetry = 11  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        CircularRunout = 12  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        TotalRunout = 13  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        AxisIntersection = 14  # SearchCriteriaFeatureControlFrameBuilderCharacteristicOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToleranceMCMOptions():
        """
        Lists the type of pmi feature control frame tolerance MCM
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessofFeatureSize", "regardless of feature size"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
        LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
        MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
        RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ZoneShapeOptions():
        """
        Lists the type of pmi feature control frame zone shape
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "Diameter", "diameter"
           "SphericalDiameter", "spherical diameter"
           "Square", "square"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
        Diameter = 1  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
        SphericalDiameter = 2  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
        Square = 3  # SearchCriteriaFeatureControlFrameBuilderZoneShapeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StatisticalOptions():
        """
        Lists the status of pmi feature control frame statistical
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have statistical"
           "No", "have no statistical"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderStatisticalOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderStatisticalOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TangentPlaneOptions():
        """
        Lists the status of pmi feature control frame tangent plane
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have tangent plane"
           "No", "have no tangent plane"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FreeStateOptions():
        """
        Lists the status of pmi feature control frame free state
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have free state"
           "No", "have no free state"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderFreeStateOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderFreeStateOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CircleUOptions():
        """
        Lists the status of pmi feature control frame circleU
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have circle U"
           "No", "have no circle U"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderCircleUOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderCircleUOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProjectedOptions():
        """
        Lists the status of pmi feature control frame projected
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have projected"
           "No", "have no projected"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderProjectedOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderProjectedOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PrimaryDatumMCMOptions():
        """
        Lists the type of pmi feature control frame primary datum MCM
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessofFeatureSize", "regardless of feature size"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
        LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
        MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
        RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PrimaryDatumDualMCMOptions():
        """
        Lists the type of pmi feature control frame primary datum dual MCM
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessofFeatureSize", "regardless of feature size"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
        LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
        MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
        RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SecondaryDatumMCMOptions():
        """
        Lists the type of pmi feature control frame secondary datum MCM
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessofFeatureSize", "regardless of feature size"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
        LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
        MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
        RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SecondaryDatumDualMCMOptions():
        """
        Lists the type of pmi feature control frame secondary datum dual MCM
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessofFeatureSize", "regardless of feature size"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
        LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
        MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
        RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TertiaryDatumMCMOptions():
        """
        Lists the type of pmi feature control frame tertiary datum MCM
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessofFeatureSize", "regardless of feature size"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
        LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
        MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
        RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TertiaryDatumDualMCMOptions():
        """
        Lists the type of pmi feature control frame tertiary datum dual MCM
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "LeastMaterialCondition", "least material condition"
           "MaximumMaterialCondition", "maximum material condition"
           "RegardlessofFeatureSize", "regardless of feature size"
        """
        NotSet = 0  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
        LeastMaterialCondition = 1  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
        MaximumMaterialCondition = 2  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
        RegardlessofFeatureSize = 3  # SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class IndicatorOptions():
        """
        Lists the status of pmi feature control frame indicator
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have indicator"
           "No", "have no indicator"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderIndicatorOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderIndicatorOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CollectionPlaneOptions():
        """
        Lists the status of pmi feature control frame collection plane indicator
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have collection plane indicator"
           "No", "have no collection plane indicator"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DirectionFeatureOptions():
        """
        Lists the status of pmi feature control frame direction feature indicator
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have direction feature indicator"
           "No", "have no direction feature indicator"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class IntersectionPlaneOptions():
        """
        Lists the status of pmi feature control frame intersection plane indicator
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have intersection plane indicator"
           "No", "have no intersection plane indicator"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationPlaneOptions():
        """
        Lists the status of pmi feature control frame orientation plane indicator
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "have orientation plane indicator"
           "No", "have no orientation plane indicator"
        """
        Yes = 0  # SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptionsMemberType
        No = 1  # SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ByCharacteristic: bool = ...
    """
    Returns or sets  the characteristic toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCharacteristic`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCharacteristic`` 
    
    :param characteristic: 
    :type characteristic: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByCircleU: bool = ...
    """
    Returns or sets  the circle utoggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCircleU`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCircleU`` 
    
    :param circleU: 
    :type circleU: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByCircleUValue: bool = ...
    """
    Returns or sets  the circle uvalue toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCircleUValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCircleUValue`` 
    
    :param circleUValue: 
    :type circleUValue: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByCollectionPlane: bool = ...
    """
    Returns or sets  the collection plane indicator toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCollectionPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCollectionPlane`` 
    
    :param byCollectionPlane: 
    :type byCollectionPlane: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ByDirectionFeature: bool = ...
    """
    Returns or sets  the direction feature indicator toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDirectionFeature`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDirectionFeature`` 
    
    :param byDirectionFeature: 
    :type byDirectionFeature: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ByFreeState: bool = ...
    """
    Returns or sets  the free state toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByFreeState`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByFreeState`` 
    
    :param freeState: 
    :type freeState: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByIndicator: bool = ...
    """
    Returns or sets  the indicator toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByIndicator`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByIndicator`` 
    
    :param byIndicator: 
    :type byIndicator: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ByIntersectionPlane: bool = ...
    """
    Returns or sets  the intersection plane indicator toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByIntersectionPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByIntersectionPlane`` 
    
    :param byIntersectionPlane: 
    :type byIntersectionPlane: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ByMaximum: bool = ...
    """
    Returns or sets  the maximum toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByMaximum`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByMaximum`` 
    
    :param maximum: 
    :type maximum: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByOrientationPlane: bool = ...
    """
    Returns or sets  the orientation plane indicator toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByOrientationPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByOrientationPlane`` 
    
    :param byOrientationPlane: 
    :type byOrientationPlane: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ByPrimaryDatum: bool = ...
    """
    Returns or sets  the primary datum toggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByPrimaryDatum`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByPrimaryDatum`` 
    
    :param primaryDatum: 
    :type primaryDatum: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    """
    ByPrimaryDatumDual: bool = ...
    """
    Returns or sets  the primary datum dual toggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByPrimaryDatumDual`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByPrimaryDatumDual`` 
    
    :param primaryDatumDual: 
    :type primaryDatumDual: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    """
    ByPrimaryDatumDualMCM: bool = ...
    """
    Returns or sets  the primary datum dual mcmtoggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByPrimaryDatumDualMCM`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByPrimaryDatumDualMCM`` 
    
    :param primaryDatumDualMCM: 
    :type primaryDatumDualMCM: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    """
    ByPrimaryDatumMCM: bool = ...
    """
    Returns or sets  the primary datum mcmtoggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByPrimaryDatumMCM`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByPrimaryDatumMCM`` 
    
    :param primaryDatumMCM: 
    :type primaryDatumMCM: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    """
    ByProjected: bool = ...
    """
    Returns or sets  the projected toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByProjected`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByProjected`` 
    
    :param projected: 
    :type projected: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByProjectedValue: bool = ...
    """
    Returns or sets  the projected value toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByProjectedValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByProjectedValue`` 
    
    :param projectedValue: 
    :type projectedValue: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BySecondaryDatum: bool = ...
    """
    Returns or sets  the secondary datum toggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``BySecondaryDatum`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BySecondaryDatum`` 
    
    :param secondaryDatum: 
    :type secondaryDatum: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    """
    BySecondaryDatumDual: bool = ...
    """
    Returns or sets  the secondary datum dual toggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``BySecondaryDatumDual`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BySecondaryDatumDual`` 
    
    :param secondaryDatumDual: 
    :type secondaryDatumDual: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    """
    BySecondaryDatumDualMCM: bool = ...
    """
    Returns or sets  the secondary datum dual mcmtoggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``BySecondaryDatumDualMCM`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BySecondaryDatumDualMCM`` 
    
    :param secondaryDatumDualMCM: 
    :type secondaryDatumDualMCM: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    """
    BySecondaryDatumMCM: bool = ...
    """
    Returns or sets  the secondary datum mcmtoggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``BySecondaryDatumMCM`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BySecondaryDatumMCM`` 
    
    :param secondaryDatumMCM: 
    :type secondaryDatumMCM: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    """
    ByStatistical: bool = ...
    """
    Returns or sets  the statistical toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByStatistical`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByStatistical`` 
    
    :param statistical: 
    :type statistical: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByTangentPlane: bool = ...
    """
    Returns or sets  the tangent plane toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTangentPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTangentPlane`` 
    
    :param tangentPlane: 
    :type tangentPlane: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByTertiaryDatum: bool = ...
    """
    Returns or sets  the tertiary datum toggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTertiaryDatum`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTertiaryDatum`` 
    
    :param tertiaryDatum: 
    :type tertiaryDatum: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    """
    ByTertiaryDatumDual: bool = ...
    """
    Returns or sets  the tertiary datum dual toggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTertiaryDatumDual`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTertiaryDatumDual`` 
    
    :param tertiaryDatumDual: 
    :type tertiaryDatumDual: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumToggle`` instead.
    
    License requirements: None.
    """
    ByTertiaryDatumDualMCM: bool = ...
    """
    Returns or sets  the tertiary datum dual mcmtoggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTertiaryDatumDualMCM`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTertiaryDatumDualMCM`` 
    
    :param tertiaryDatumDualMCM: 
    :type tertiaryDatumDualMCM: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    """
    ByTertiaryDatumMCM: bool = ...
    """
    Returns or sets  the tertiary datum mcmtoggle.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTertiaryDatumMCM`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTertiaryDatumMCM`` 
    
    :param tertiaryDatumMCM: 
    :type tertiaryDatumMCM: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMToggle`` instead.
    
    License requirements: None.
    """
    ByTolerance: bool = ...
    """
    Returns or sets  the tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTolerance`` 
    
    :param tolerance: 
    :type tolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByToleranceMCM: bool = ...
    """
    Returns or sets  the tolerance mcmtoggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByToleranceMCM`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByToleranceMCM`` 
    
    :param toleranceMCM: 
    :type toleranceMCM: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByZoneShape: bool = ...
    """
    Returns or sets  the zone shape toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByZoneShape`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByZoneShape`` 
    
    :param zoneShape: 
    :type zoneShape: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CharacteristicType: SearchCriteriaFeatureControlFrameBuilderCharacteristicOptions = ...
    """
    Returns or sets  the characteristic enum 
    
    <hr>
    
    Getter Method
    
    Signature ``CharacteristicType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderCharacteristicOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CharacteristicType`` 
    
    :param characteristicType: 
    :type characteristicType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderCharacteristicOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircleUType: SearchCriteriaFeatureControlFrameBuilderCircleUOptions = ...
    """
    Returns or sets  the circle uenum 
    
    <hr>
    
    Getter Method
    
    Signature ``CircleUType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderCircleUOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircleUType`` 
    
    :param circleUType: 
    :type circleUType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderCircleUOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircleUValue: float = ...
    """
    Returns or sets  the circle uvalue 
    
    <hr>
    
    Getter Method
    
    Signature ``CircleUValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircleUValue`` 
    
    :param circleUValue: 
    :type circleUValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircleUValueType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the circle uvalue enum 
    
    <hr>
    
    Getter Method
    
    Signature ``CircleUValueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircleUValueType`` 
    
    :param circleUValueType: 
    :type circleUValueType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CollectionPlaneType: SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptions = ...
    """
    Returns or sets  the collection plane indicator enum 
    
    <hr>
    
    Getter Method
    
    Signature ``CollectionPlaneType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CollectionPlaneType`` 
    
    :param collectionPlaneType: 
    :type collectionPlaneType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderCollectionPlaneOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DatumExtendedText: str = ...
    """
    Returns or sets  the datum extended text 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumExtendedText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumExtendedText`` 
    
    :param datumExtendedText: 
    :type datumExtendedText: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DatumExtendedTextToggle: bool = ...
    """
    Returns or sets  the datum extended text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumExtendedTextToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumExtendedTextToggle`` 
    
    :param datumExtendedTextToggle: 
    :type datumExtendedTextToggle: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DatumExtendedTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the datum extended text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumExtendedTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumExtendedTextType`` 
    
    :param datumExtendedTextType: 
    :type datumExtendedTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DatumMCMToggle: bool = ...
    """
    Returns or sets  the datum mcm toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumMCMToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumMCMToggle`` 
    
    :param datumMCM: 
    :type datumMCM: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DatumMCMType: SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptions = ...
    """
    Returns or sets  the datum mcm enum 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumMCMType`` 
    
    :param datumMCMType: 
    :type datumMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DatumText: str = ...
    """
    Returns or sets  the datum text 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumText`` 
    
    :param datumText: 
    :type datumText: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DatumToggle: bool = ...
    """
    Returns or sets  the datum toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumToggle`` 
    
    :param datumToggle: 
    :type datumToggle: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DirectionFeatureType: SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptions = ...
    """
    Returns or sets  the direction feature indicator enum 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionFeatureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionFeatureType`` 
    
    :param directionFeatureType: 
    :type directionFeatureType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderDirectionFeatureOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    FrameStyleType: SearchCriteriaFeatureControlFrameBuilderFrameStyleOptions = ...
    """
    Returns or sets  the frame style enum 
    
    <hr>
    
    Getter Method
    
    Signature ``FrameStyleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderFrameStyleOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrameStyleType`` 
    
    :param frameStyleType: 
    :type frameStyleType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderFrameStyleOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FreeStateType: SearchCriteriaFeatureControlFrameBuilderFreeStateOptions = ...
    """
    Returns or sets  the free state enum 
    
    <hr>
    
    Getter Method
    
    Signature ``FreeStateType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderFreeStateOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FreeStateType`` 
    
    :param freeStateType: 
    :type freeStateType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderFreeStateOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    IndicatorType: SearchCriteriaFeatureControlFrameBuilderIndicatorOptions = ...
    """
    Returns or sets  the indicator type 
    
    <hr>
    
    Getter Method
    
    Signature ``IndicatorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderIndicatorOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndicatorType`` 
    
    :param indicatorType: 
    :type indicatorType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderIndicatorOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    IntersectionPlaneType: SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptions = ...
    """
    Returns or sets  the intersection plane indicator enum 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionPlaneType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntersectionPlaneType`` 
    
    :param inteersectionPlaneType: 
    :type inteersectionPlaneType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderIntersectionPlaneOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    MaximumText: str = ...
    """
    Returns or sets  the maximum value 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumText`` 
    
    :param maximumText: 
    :type maximumText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaximumTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the maximum text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumTextType`` 
    
    :param maximumTextType: 
    :type maximumTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OrientationPlaneType: SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptions = ...
    """
    Returns or sets  the orientation plane indicator enum 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationPlaneType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationPlaneType`` 
    
    :param orientationPlaneType: 
    :type orientationPlaneType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderOrientationPlaneOptions` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    PrimaryDatumDualMCMType: SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptions = ...
    """
    Returns or sets  the primary datum dual mcmenum.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDatumDualMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDatumDualMCMType`` 
    
    :param primaryDatumDualMCMType: 
    :type primaryDatumDualMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderPrimaryDatumDualMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    """
    PrimaryDatumDualText: str = ...
    """
    Returns or sets  the primary datum dual text.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDatumDualText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDatumDualText`` 
    
    :param primaryDatumDualText: 
    :type primaryDatumDualText: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    """
    PrimaryDatumMCMType: SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptions = ...
    """
    Returns or sets  the primary datum mcmenum.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDatumMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDatumMCMType`` 
    
    :param primaryDatumMCMType: 
    :type primaryDatumMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderPrimaryDatumMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    """
    PrimaryDatumText: str = ...
    """
    Returns or sets  the primary datum text This property is deprecated.  
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDatumText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDatumText`` 
    
    :param primaryDatumText: 
    :type primaryDatumText: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    """
    ProjectedType: SearchCriteriaFeatureControlFrameBuilderProjectedOptions = ...
    """
    Returns or sets  the projected enum 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectedType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderProjectedOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectedType`` 
    
    :param projectedType: 
    :type projectedType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderProjectedOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProjectedValue: float = ...
    """
    Returns or sets  the projected value 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectedValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectedValue`` 
    
    :param projectedValue: 
    :type projectedValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProjectedValueType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the projected value enum 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectedValueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectedValueType`` 
    
    :param projectedValueType: 
    :type projectedValueType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SecondaryDatumDualMCMType: SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptions = ...
    """
    Returns or sets  the secondary datum dual mcmenum.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryDatumDualMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryDatumDualMCMType`` 
    
    :param secondaryDatumDualMCMType: 
    :type secondaryDatumDualMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderSecondaryDatumDualMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    """
    SecondaryDatumDualText: str = ...
    """
    Returns or sets  the secondary datum dual text.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryDatumDualText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryDatumDualText`` 
    
    :param secondaryDatumDualText: 
    :type secondaryDatumDualText: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    """
    SecondaryDatumMCMType: SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptions = ...
    """
    Returns or sets  the secondary datum mcmenum.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryDatumMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryDatumMCMType`` 
    
    :param secondaryDatumMCMType: 
    :type secondaryDatumMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderSecondaryDatumMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    """
    SecondaryDatumText: str = ...
    """
    Returns or sets  the secondary datum text.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryDatumText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryDatumText`` 
    
    :param secondaryDatumText: 
    :type secondaryDatumText: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    """
    StatisticalType: SearchCriteriaFeatureControlFrameBuilderStatisticalOptions = ...
    """
    Returns or sets  the statistical enum 
    
    <hr>
    
    Getter Method
    
    Signature ``StatisticalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderStatisticalOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StatisticalType`` 
    
    :param statisticalType: 
    :type statisticalType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderStatisticalOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TangentPlaneType: SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptions = ...
    """
    Returns or sets  the tangent plane enum 
    
    <hr>
    
    Getter Method
    
    Signature ``TangentPlaneType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TangentPlaneType`` 
    
    :param tangentPlaneType: 
    :type tangentPlaneType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderTangentPlaneOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TertiaryDatumDualMCMType: SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptions = ...
    """
    Returns or sets  the tertiary datum dual mcmenum.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryDatumDualMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TertiaryDatumDualMCMType`` 
    
    :param tertiaryDatumDualMCMType: 
    :type tertiaryDatumDualMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderTertiaryDatumDualMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    """
    TertiaryDatumDualText: str = ...
    """
    Returns or sets  the tertiary datum dual text.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryDatumDualText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TertiaryDatumDualText`` 
    
    :param tertiaryDatumDualText: 
    :type tertiaryDatumDualText: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    """
    TertiaryDatumMCMType: SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptions = ...
    """
    Returns or sets  the tertiary datum mcmenum.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryDatumMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TertiaryDatumMCMType`` 
    
    :param tertiaryDatumMCMType: 
    :type tertiaryDatumMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderTertiaryDatumMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumMCMType`` instead.
    
    License requirements: None.
    """
    TertiaryDatumText: str = ...
    """
    Returns or sets  the tertiary datum text.  
    
    This property is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryDatumText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TertiaryDatumText`` 
    
    :param tertiaryDatumText: 
    :type tertiaryDatumText: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Annotations.SearchCriteriaFeatureControlFrameBuilder.DatumText`` instead.
    
    License requirements: None.
    """
    ToleranceMCMType: SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptions = ...
    """
    Returns or sets  the tolerance mcmenum 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceMCMType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceMCMType`` 
    
    :param toleranceMCMType: 
    :type toleranceMCMType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderToleranceMCMOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToleranceText: str = ...
    """
    Returns or sets  the tolerance text 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceText`` 
    
    :param toleranceText: 
    :type toleranceText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToleranceTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the tolerance text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceTextType`` 
    
    :param toleranceTextType: 
    :type toleranceTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ZoneShapeType: SearchCriteriaFeatureControlFrameBuilderZoneShapeOptions = ...
    """
    Returns or sets  the zone shape enum 
    
    <hr>
    
    Getter Method
    
    Signature ``ZoneShapeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderZoneShapeOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZoneShapeType`` 
    
    :param zoneShapeType: 
    :type zoneShapeType: :py:class:`NXOpen.Annotations.SearchCriteriaFeatureControlFrameBuilderZoneShapeOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SearchCriteriaFeatureControlFrameBuilder = ...  # unknown typename


class CompoundDatumReferenceBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.CompoundDatumReferenceBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateCompoundDatumReferenceBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DatumReferenceList: DatumReferenceBuilderList = ...
    """
    Returns  the list of datum references 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumReferenceList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilderList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ExtendedText: TextWithSymbolsBuilder = ...
    """
    Returns  the compound datum reference extended text builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: CompoundDatumReferenceBuilder = ...  # unknown typename


class RadialStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.RadialStyleBuilder`.  
    
    This class queries and sets preferences specific to radial dimensions when creating or
    editing a radial type dimension.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DiameterRadiusPlacement: DiameterRadiusSymbolPlacement = ...
    """
    Returns or sets  the diameter radius symbol placement with respect to the dimension text.  
    
    One of the options specifies that no symbol be displayed  
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterRadiusPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DiameterRadiusSymbolPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterRadiusPlacement`` 
    
    :param diameterRadiusPlacement: 
    :type diameterRadiusPlacement: :py:class:`NXOpen.Annotations.DiameterRadiusSymbolPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DiameterSymbol: str = ...
    """
    Returns or sets  the text for a user-defined diameter symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterSymbol`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterSymbol`` 
    
    :param diameterSymbol: 
    :type diameterSymbol: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DiameterSymbolType: DiameterSymbol = ...
    """
    Returns or sets  the diameter symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DiameterSymbol` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterSymbolType`` 
    
    :param diameterSymbolType: 
    :type diameterSymbolType: :py:class:`NXOpen.Annotations.DiameterSymbol` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FoldedRadiusAngle: float = ...
    """
    Returns or sets  the folded radius angle 
    
    <hr>
    
    Getter Method
    
    Signature ``FoldedRadiusAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FoldedRadiusAngle`` 
    
    :param foldedRadiusAngle: 
    :type foldedRadiusAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    RadiusSymbol: str = ...
    """
    Returns or sets  the text for a user-defined radius symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusSymbol`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadiusSymbol`` 
    
    :param radiusSymbol: 
    :type radiusSymbol: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    RadiusSymbolType: RadiusSymbol = ...
    """
    Returns or sets  the radius symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.RadiusSymbol` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadiusSymbolType`` 
    
    :param radiusSymbolType: 
    :type radiusSymbolType: :py:class:`NXOpen.Annotations.RadiusSymbol` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    SymbolToDimensionTextDistance: float = ...
    """
    Returns or sets  the symbol to dimension text distance in character spaces 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolToDimensionTextDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolToDimensionTextDistance`` 
    
    :param symbolToDimensionTextDistance: 
    :type symbolToDimensionTextDistance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextAboveLeader: DiameterRadiusLeaderStub = ...
    """
    Returns or sets  the location of the dimension text relative to the leader stub 
    
    <hr>
    
    Getter Method
    
    Signature ``TextAboveLeader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DiameterRadiusLeaderStub` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionStyleBuilder.TextPosition` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextAboveLeader`` 
    
    :param textAboveLeader: 
    :type textAboveLeader: :py:class:`NXOpen.Annotations.DiameterRadiusLeaderStub` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionStyleBuilder.TextPosition` instead.
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: RadialStyleBuilder = ...  # unknown typename


class GeneralVerticalDimension(BaseVerticalDimension):
    """
    Represents a horizontal dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralVerticalDimension = ...  # unknown typename


class EditSettingsBuilder(NXOpen.Drafting.BaseEditSettingsBuilder):
    """
    the edit settings builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drafting.SettingsManager.CreateAnnotationEditSettingsBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: NXOpen.DisplayableObject) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected annotation or table instance object.                                                                         None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    AnnotationStyle: StyleBuilder = ...
    """
    Returns  the annotation style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DrawingFormatTitle: DrawingFormatTitleBuilder = ...
    """
    Returns  the drawing format title block builder 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingFormatTitle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrawingFormatTitleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewProjectedArrowSettings: NXOpen.Drawings.ViewProjectedArrowSettingsBuilder = ...
    """
    Returns  the projected view arrow Settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewProjectedArrowSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedArrowSettingsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: EditSettingsBuilder = ...  # unknown typename


class ExtensionLineDisplayMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExtensionLineDisplay():
    """
    Specifies the extension line display option 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "Displays both the extension lines"
       "First", "Displays extension line attached to the first object selected to create the dimension"
       "Second", "Displays extension line attached to the second object selected to create the dimension"
       "NotSet", "Doesn't display extension lines"
       "Last", "Last enum value. Should not be used."
    """
    Two = 0  # ExtensionLineDisplayMemberType
    First = 1  # ExtensionLineDisplayMemberType
    Second = 2  # ExtensionLineDisplayMemberType
    NotSet = 3  # ExtensionLineDisplayMemberType
    Last = 4  # ExtensionLineDisplayMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SymmetricalCenterlineSettingsBuilder(CenterlineSettingsBuilder):
    """
    Represents a Builder for Symmetrical Centerline Settings   
    
    .. versionadded:: NX6.0.0
    """
    Extension: float = ...
    """
    Returns or sets  the extension parameter for centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Extension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IndividualDistance: bool = ...
    """
    Returns or sets  the individual extension distance On/Off parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``IndividualDistance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndividualDistance`` 
    
    :param individualDistance: 
    :type individualDistance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Size: float = ...
    """
    Returns or sets  the offset size parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SymmetricalCenterlineSettingsBuilder = ...  # unknown typename


class FrameBarPreferences(NXOpen.TransientObject):
    """
    Represents frame bar preferences.  
    
    When setting the property, changes are not applied to object until
    the set method is called
    
    .. versionadded:: NX8.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    AftPerpendicularLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularTicDisplay: int = ...
    """
    Returns or sets  the aft perpendicular tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    AftPerpendicularTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``AftPerpendicularTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AftPerpendicularTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineTicDisplay: int = ...
    """
    Returns or sets  the baseline tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BaselineTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsLabelName: int = ...
    """
    Returns or sets  the bulk heads label name 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsLabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsLabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsTicDisplay: int = ...
    """
    Returns or sets  the bulk heads tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    BulkHeadsTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``BulkHeadsTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BulkHeadsTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYTicDisplay: int = ...
    """
    Returns or sets  the _centerline y tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    CenterlineYTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineYTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineYTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksLabelName: int = ...
    """
    Returns or sets  the label name 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksLabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksLabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksTicDisplay: int = ...
    """
    Returns or sets  the decks tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    DecksTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``DecksTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecksTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularTicDisplay: int = ...
    """
    Returns or sets  the forward perpendicular tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ForwardPerpendicularTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardPerpendicularTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardPerpendicularTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesExtendBegin: int = ...
    """
    Returns or sets  the extended tic from which display to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesExtendBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesExtendBegin`` 
    
    :param displayExtendBegin: 
    :type displayExtendBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesExtendColor: int = ...
    """
    Returns or sets  the extended tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesExtendColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesExtendColor`` 
    
    :param extendColor: 
    :type extendColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesExtendFont: int = ...
    """
    Returns or sets  the extended tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesExtendFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesExtendFont`` 
    
    :param extendFont: 
    :type extendFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesExtendFrequency: int = ...
    """
    Returns or sets  the extended tic display frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesExtendFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesExtendFrequency`` 
    
    :param displayExtendFrequency: 
    :type displayExtendFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesExtendLength: float = ...
    """
    Returns or sets  the extended tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesExtendLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesExtendLength`` 
    
    :param extendlength: 
    :type extendlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesExtendWidth: int = ...
    """
    Returns or sets  the extended tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesExtendWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesExtendWidth`` 
    
    :param extendWidth: 
    :type extendWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesLabelName: int = ...
    """
    Returns or sets  the label name 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesLabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesLabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesSkipLabelBegin: int = ...
    """
    Returns or sets  the label from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesSkipLabelBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesSkipLabelBegin`` 
    
    :param skipLabelBegin: 
    :type skipLabelBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesSkipLabelFrequency: int = ...
    """
    Returns or sets  the label skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesSkipLabelFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesSkipLabelFrequency`` 
    
    :param skipLabelFrequency: 
    :type skipLabelFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesSkipTicBegin: int = ...
    """
    Returns or sets  the tic from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesSkipTicBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesSkipTicBegin`` 
    
    :param skipTicBegin: 
    :type skipTicBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesSkipTicFrequency: int = ...
    """
    Returns or sets  the tic skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesSkipTicFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesSkipTicFrequency`` 
    
    :param skipTicFrequency: 
    :type skipTicFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesTicDisplay: int = ...
    """
    Returns or sets  the inter transverse frames tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    InterTransverseFramesTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``InterTransverseFramesTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterTransverseFramesTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesExtendBegin: int = ...
    """
    Returns or sets  the extended tic from which display to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesExtendBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesExtendBegin`` 
    
    :param displayExtendBegin: 
    :type displayExtendBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesExtendColor: int = ...
    """
    Returns or sets  the extended tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesExtendColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesExtendColor`` 
    
    :param extendColor: 
    :type extendColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesExtendFont: int = ...
    """
    Returns or sets  the extended tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesExtendFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesExtendFont`` 
    
    :param extendFont: 
    :type extendFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesExtendFrequency: int = ...
    """
    Returns or sets  the extended tic display frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesExtendFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesExtendFrequency`` 
    
    :param displayExtendFrequency: 
    :type displayExtendFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesExtendLength: float = ...
    """
    Returns or sets  the extended tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesExtendLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesExtendLength`` 
    
    :param extendlength: 
    :type extendlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesExtendWidth: int = ...
    """
    Returns or sets  the extended tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesExtendWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesExtendWidth`` 
    
    :param extendWidth: 
    :type extendWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesLabelName: int = ...
    """
    Returns or sets  the label name 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesLabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesLabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesSkipLabelBegin: int = ...
    """
    Returns or sets  the label from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesSkipLabelBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesSkipLabelBegin`` 
    
    :param skipLabelBegin: 
    :type skipLabelBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesSkipLabelFrequency: int = ...
    """
    Returns or sets  the label skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesSkipLabelFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesSkipLabelFrequency`` 
    
    :param skipLabelFrequency: 
    :type skipLabelFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesSkipTicBegin: int = ...
    """
    Returns or sets  the tic from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesSkipTicBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesSkipTicBegin`` 
    
    :param skipTicBegin: 
    :type skipTicBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesSkipTicFrequency: int = ...
    """
    Returns or sets  the tic skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesSkipTicFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesSkipTicFrequency`` 
    
    :param skipTicFrequency: 
    :type skipTicFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesTicDisplay: int = ...
    """
    Returns or sets  the longitudinal y frames tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalYFramesTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalYFramesTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalYFramesTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesExtendBegin: int = ...
    """
    Returns or sets  the extended tic from which display to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesExtendBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesExtendBegin`` 
    
    :param displayExtendBegin: 
    :type displayExtendBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesExtendColor: int = ...
    """
    Returns or sets  the extended tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesExtendColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesExtendColor`` 
    
    :param extendColor: 
    :type extendColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesExtendFont: int = ...
    """
    Returns or sets  the extended tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesExtendFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesExtendFont`` 
    
    :param extendFont: 
    :type extendFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesExtendFrequency: int = ...
    """
    Returns or sets  the extended tic display frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesExtendFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesExtendFrequency`` 
    
    :param displayExtendFrequency: 
    :type displayExtendFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesExtendLength: float = ...
    """
    Returns or sets  the extended tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesExtendLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesExtendLength`` 
    
    :param extendlength: 
    :type extendlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesExtendWidth: int = ...
    """
    Returns or sets  the extended tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesExtendWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesExtendWidth`` 
    
    :param extendWidth: 
    :type extendWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesLabelName: int = ...
    """
    Returns or sets  the label name 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesLabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesLabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesSkipLabelBegin: int = ...
    """
    Returns or sets  the label from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesSkipLabelBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesSkipLabelBegin`` 
    
    :param skipLabelBegin: 
    :type skipLabelBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesSkipLabelFrequency: int = ...
    """
    Returns or sets  the label skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesSkipLabelFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesSkipLabelFrequency`` 
    
    :param skipLabelFrequency: 
    :type skipLabelFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesSkipTicBegin: int = ...
    """
    Returns or sets  the tic from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesSkipTicBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesSkipTicBegin`` 
    
    :param skipTicBegin: 
    :type skipTicBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesSkipTicFrequency: int = ...
    """
    Returns or sets  the tic skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesSkipTicFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesSkipTicFrequency`` 
    
    :param skipTicFrequency: 
    :type skipTicFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesTicDisplay: int = ...
    """
    Returns or sets  the _ongitudinal z framestic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    LongitudinalZFramesTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalZFramesTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalZFramesTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaLabelName: int = ...
    """
    Returns or sets  the transversal insert area label name 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaLabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaLabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaTicDisplay: int = ...
    """
    Returns or sets  the transversal insert area tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransversalInsertAreaTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``TransversalInsertAreaTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransversalInsertAreaTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesExtendBegin: int = ...
    """
    Returns or sets  the extended tic from which display to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesExtendBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesExtendBegin`` 
    
    :param displayExtendBegin: 
    :type displayExtendBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesExtendColor: int = ...
    """
    Returns or sets  the extended tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesExtendColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesExtendColor`` 
    
    :param extendColor: 
    :type extendColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesExtendFont: int = ...
    """
    Returns or sets  the extended tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesExtendFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesExtendFont`` 
    
    :param extendFont: 
    :type extendFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesExtendFrequency: int = ...
    """
    Returns or sets  the extended tic display frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesExtendFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesExtendFrequency`` 
    
    :param displayExtendFrequency: 
    :type displayExtendFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesExtendLength: float = ...
    """
    Returns or sets  the extended tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesExtendLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesExtendLength`` 
    
    :param extendlength: 
    :type extendlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesExtendWidth: int = ...
    """
    Returns or sets  the extended tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesExtendWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesExtendWidth`` 
    
    :param extendWidth: 
    :type extendWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesLabelName: int = ...
    """
    Returns or sets  the label name 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesLabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesLabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesSkipLabelBegin: int = ...
    """
    Returns or sets  the label from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesSkipLabelBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesSkipLabelBegin`` 
    
    :param skipLabelBegin: 
    :type skipLabelBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesSkipLabelFrequency: int = ...
    """
    Returns or sets  the label skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesSkipLabelFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesSkipLabelFrequency`` 
    
    :param skipLabelFrequency: 
    :type skipLabelFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesSkipTicBegin: int = ...
    """
    Returns or sets  the tic from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesSkipTicBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesSkipTicBegin`` 
    
    :param skipTicBegin: 
    :type skipTicBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesSkipTicFrequency: int = ...
    """
    Returns or sets  the tic skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesSkipTicFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesSkipTicFrequency`` 
    
    :param skipTicFrequency: 
    :type skipTicFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesTicDisplay: int = ...
    """
    Returns or sets  the transverse frames tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    TransverseFramesTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``TransverseFramesTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransverseFramesTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineLabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineLabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineLabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineLabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineLabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineLabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineLabelItalicized: bool = ...
    """
    Returns or sets  the label italicized 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineLabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineLabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineLabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineLabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineLabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineTicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineTicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineTicDisplay: int = ...
    """
    Returns or sets  the waterline tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineTicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineTicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineTicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineTicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineTicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineTicLength`` 
    
    :param ticlength: 
    :type ticlength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    WaterlineTicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``WaterlineTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaterlineTicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """


class SymbolFileBuilder(NXOpen.Builder):
    """
    Represents builder for drafting  Symbol file builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SymbolFileCollection.CreateSymbolFileBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: SymbolFileBuilder = ...  # unknown typename


class PmiMajorAngularDimension(PmiAngularDimension, IPmi):
    """
    Represents a PMI major angular dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiMajorAngularDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiMajorAngularDimension = ...  # unknown typename


class PmiDefaultPlaneMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PmiDefaultPlane():
    """
    Specifies the options for the default PMI annotation plane
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "XyOfWcs", " - "
       "ModelView", " - "
       "XzOfWcs", " - "
       "YzOfWcs", " - "
       "Last", "Placeholder, do not use"
    """
    XyOfWcs = 1  # PmiDefaultPlaneMemberType
    ModelView = 2  # PmiDefaultPlaneMemberType
    XzOfWcs = 3  # PmiDefaultPlaneMemberType
    YzOfWcs = 4  # PmiDefaultPlaneMemberType
    Last = 1000  # PmiDefaultPlaneMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiCustomSymbol(BaseCustomSymbol):
    """
    Represents a PMI custom symbol   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiCustomSymbol = ...  # unknown typename


class ArrowheadTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ArrowheadType():
    """
    Specifies the arrowhead type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FilledDatumArrow", " - "
       "FilledDot", " - "
       "FilledArrow", " - "
       "ClosedArrow", " - "
       "OpenArrow", " - "
       "CrossArrow", " - "
       "DotArrow", " - "
       "OriginSymbolArrow", " - "
       "NoArrow", " - "
       "UnfilledDatumArrow", " - "
       "ClosedSolidArrow", " - "
       "ClosedDoubleArrow", " - "
       "ClosedDoubleSolidArrow", " - "
       "OpenDoubleArrow", " - "
       "IntegralArrow", " - "
       "BoxArrow", " - "
       "FilledBox", " - "
       "FilledDoubleArrow", " - "
       "TopOpenArrow", " - "
       "BottomOpenArrow", " - "
       "TopFilledArrow", " - "
       "BottomFilledArrow", " - "
    """
    FilledDatumArrow = -2  # ArrowheadTypeMemberType
    FilledDot = -1  # ArrowheadTypeMemberType
    FilledArrow = 0  # ArrowheadTypeMemberType
    ClosedArrow = 1  # ArrowheadTypeMemberType
    OpenArrow = 2  # ArrowheadTypeMemberType
    CrossArrow = 3  # ArrowheadTypeMemberType
    DotArrow = 4  # ArrowheadTypeMemberType
    OriginSymbolArrow = 5  # ArrowheadTypeMemberType
    NoArrow = 6  # ArrowheadTypeMemberType
    UnfilledDatumArrow = 7  # ArrowheadTypeMemberType
    ClosedSolidArrow = 8  # ArrowheadTypeMemberType
    ClosedDoubleArrow = 9  # ArrowheadTypeMemberType
    ClosedDoubleSolidArrow = 10  # ArrowheadTypeMemberType
    OpenDoubleArrow = 11  # ArrowheadTypeMemberType
    IntegralArrow = 12  # ArrowheadTypeMemberType
    BoxArrow = 13  # ArrowheadTypeMemberType
    FilledBox = 14  # ArrowheadTypeMemberType
    FilledDoubleArrow = 15  # ArrowheadTypeMemberType
    TopOpenArrow = 16  # ArrowheadTypeMemberType
    BottomOpenArrow = 17  # ArrowheadTypeMemberType
    TopFilledArrow = 18  # ArrowheadTypeMemberType
    BottomFilledArrow = 19  # ArrowheadTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiLabel(Label, IPmi):
    """
    Represents a PMI label 
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiLabel = ...  # unknown typename


class PmiCustomSymbolBuilder(BaseCustomSymbolBuilder):
    """
    Represents builder for PMI Custom Symbol   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.CreatePmiCustomSymbolBuilder`
    
    .. versionadded:: NX7.5.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the select associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PmiCustomSymbolBuilder = ...  # unknown typename


class PmiLinearDimensionBuilder(BaseLinearDimensionBuilder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiLinearDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AssociatedObjectsSets: AssociatedObjectsSetsBuilder = ...
    """
    Returns  the associated objects sets 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjectsSets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsSetsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: PmiLinearDimensionBuilder = ...  # unknown typename


class PmiAngularDimensionBuilder(BaseAngularDimensionBuilder):
    """
    Represents a :py:class:`Annotations.AngularDimension` builder   
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AssociatedObjectsSets: AssociatedObjectsSetsBuilder = ...
    """
    Returns  the associated objects sets 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjectsSets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsSetsBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: PmiAngularDimensionBuilder = ...  # unknown typename


class DimensionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.Dimension` objects   
    
    This is an collection class.
    
    .. versionadded:: NX3.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMajorAngularDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> MajorAngularDimension:
        """
        Overloaded method CreateMajorAngularDimension
        
        * ``CreateMajorAngularDimension(dimensionData, origin)`` 
        * ``CreateMajorAngularDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a major angular dimension  
        
        Signature ``CreateMajorAngularDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New major angular dimension  
        :rtype: :py:class:`NXOpen.Annotations.MajorAngularDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiMajorAngularDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiMajorAngularDimension:
        """
        Overloaded method CreatePmiMajorAngularDimension
        
        * ``CreatePmiMajorAngularDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiMajorAngularDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI major angular dimension  
        
        Signature ``CreatePmiMajorAngularDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI major angular dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiMajorAngularDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateMinorAngularDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> MinorAngularDimension:
        """
        Overloaded method CreateMinorAngularDimension
        
        * ``CreateMinorAngularDimension(dimensionData, origin)`` 
        * ``CreateMinorAngularDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a minor angular dimension  
        
        Signature ``CreateMinorAngularDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New minor angular dimension  
        :rtype: :py:class:`NXOpen.Annotations.MinorAngularDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiMinorAngularDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiMinorAngularDimension:
        """
        Overloaded method CreatePmiMinorAngularDimension
        
        * ``CreatePmiMinorAngularDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiMinorAngularDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI minor angular dimension  
        
        Signature ``CreatePmiMinorAngularDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI minor angular dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiMinorAngularDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateArcLengthDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> ArcLengthDimension:
        """
        Overloaded method CreateArcLengthDimension
        
        * ``CreateArcLengthDimension(dimensionData, origin)`` 
        * ``CreateArcLengthDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates an arc length dimension  
        
        Signature ``CreateArcLengthDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New arc length dimension  
        :rtype: :py:class:`NXOpen.Annotations.ArcLengthDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiArcLengthDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiArcLengthDimension:
        """
        Overloaded method CreatePmiArcLengthDimension
        
        * ``CreatePmiArcLengthDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiArcLengthDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI arc length dimension  
        
        Signature ``CreatePmiArcLengthDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI arc length dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiArcLengthDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateChamferDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> ChamferDimension:
        """
        Overloaded method CreateChamferDimension
        
        * ``CreateChamferDimension(dimensionData, origin)`` 
        * ``CreateChamferDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a chamfer dimension  
        
        Signature ``CreateChamferDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New chamfer dimension  
        :rtype: :py:class:`NXOpen.Annotations.ChamferDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiChamferDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiChamferDimension:
        """
        Overloaded method CreatePmiChamferDimension
        
        * ``CreatePmiChamferDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiChamferDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI chamfer dimnension  
        
        Signature ``CreatePmiChamferDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:   Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI chamfer dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiChamferDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateConcentricCircleDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> ConcentricCircleDimension:
        """
        Overloaded method CreateConcentricCircleDimension
        
        * ``CreateConcentricCircleDimension(dimensionData, origin)`` 
        * ``CreateConcentricCircleDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a concentric circle dimension  
        
        Signature ``CreateConcentricCircleDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New concentric circle dimension  
        :rtype: :py:class:`NXOpen.Annotations.ConcentricCircleDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiConcentricCircleDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiConcentricCircleDimension:
        """
        Overloaded method CreatePmiConcentricCircleDimension
        
        * ``CreatePmiConcentricCircleDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiConcentricCircleDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI concentric circle dimension  
        
        Signature ``CreatePmiConcentricCircleDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI concentric circle dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiConcentricCircleDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateCylindricalDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> CylindricalDimension:
        """
        Overloaded method CreateCylindricalDimension
        
        * ``CreateCylindricalDimension(dimensionData, origin)`` 
        * ``CreateCylindricalDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a cylindrical dimension  
        
        Signature ``CreateCylindricalDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New cylindrical dimension  
        :rtype: :py:class:`NXOpen.Annotations.CylindricalDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiCylindricalDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiCylindricalDimension:
        """
        Overloaded method CreatePmiCylindricalDimension
        
        * ``CreatePmiCylindricalDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiCylindricalDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI cylindrical dimension  
        
        Signature ``CreatePmiCylindricalDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI cylindrical dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiCylindricalDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateDiameterDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> DiameterDimension:
        """
        Overloaded method CreateDiameterDimension
        
        * ``CreateDiameterDimension(dimensionData, origin)`` 
        * ``CreateDiameterDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a diameter dimension  
        
        Signature ``CreateDiameterDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New diameter dimension  
        :rtype: :py:class:`NXOpen.Annotations.DiameterDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiDiameterDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiDiameterDimension:
        """
        Overloaded method CreatePmiDiameterDimension
        
        * ``CreatePmiDiameterDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiDiameterDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI diameter dimension  
        
        Signature ``CreatePmiDiameterDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI diameter dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiDiameterDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateFoldedRadiusDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> FoldedRadiusDimension:
        """
        Overloaded method CreateFoldedRadiusDimension
        
        * ``CreateFoldedRadiusDimension(dimensionData, origin)`` 
        * ``CreateFoldedRadiusDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a folded radius dimension  
        
        Signature ``CreateFoldedRadiusDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New folded radius dimension  
        :rtype: :py:class:`NXOpen.Annotations.FoldedRadiusDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiFoldedRadiusDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiFoldedRadiusDimension:
        """
        Overloaded method CreatePmiFoldedRadiusDimension
        
        * ``CreatePmiFoldedRadiusDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiFoldedRadiusDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI folded radius dimension  
        
        Signature ``CreatePmiFoldedRadiusDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI folded radius dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiFoldedRadiusDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateHoleDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> HoleDimension:
        """
        Overloaded method CreateHoleDimension
        
        * ``CreateHoleDimension(dimensionData, origin)`` 
        * ``CreateHoleDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a hole dimension  
        
        Signature ``CreateHoleDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New hole dimension  
        :rtype: :py:class:`NXOpen.Annotations.HoleDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiHoleDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiHoleDimension:
        """
        Overloaded method CreatePmiHoleDimension
        
        * ``CreatePmiHoleDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiHoleDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI hole dimension  
        
        Signature ``CreatePmiHoleDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI hole dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiHoleDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateHorizontalDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> HorizontalDimension:
        """
        Overloaded method CreateHorizontalDimension
        
        * ``CreateHorizontalDimension(dimensionData, origin)`` 
        * ``CreateHorizontalDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a horizontal dimension  
        
        Signature ``CreateHorizontalDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New horizontal dimension  
        :rtype: :py:class:`NXOpen.Annotations.HorizontalDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiHorizontalDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiHorizontalDimension:
        """
        Overloaded method CreatePmiHorizontalDimension
        
        * ``CreatePmiHorizontalDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiHorizontalDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI horizontal dimension  
        
        Signature ``CreatePmiHorizontalDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI horizontal dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiHorizontalDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateHorizontalOrdinateDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> HorizontalOrdinateDimension:
        """
        Overloaded method CreateHorizontalOrdinateDimension
        
        * ``CreateHorizontalOrdinateDimension(dimensionData, origin)`` 
        * ``CreateHorizontalOrdinateDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a horizontal ordinate dimension  
        
        Signature ``CreateHorizontalOrdinateDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New horizontal ordinate dimension  
        :rtype: :py:class:`NXOpen.Annotations.HorizontalOrdinateDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiHorizontalOrdinateDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiHorizontalOrdinateDimension:
        """
        Overloaded method CreatePmiHorizontalOrdinateDimension
        
        * ``CreatePmiHorizontalOrdinateDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiHorizontalOrdinateDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI horizontal ordinate dimension  
        
        Signature ``CreatePmiHorizontalOrdinateDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI horizontal ordinate dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiHorizontalOrdinateDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateParallelDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> ParallelDimension:
        """
        Overloaded method CreateParallelDimension
        
        * ``CreateParallelDimension(dimensionData, origin)`` 
        * ``CreateParallelDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a parallel dimension  
        
        Signature ``CreateParallelDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New parallel dimension  
        :rtype: :py:class:`NXOpen.Annotations.ParallelDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiParallelDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiParallelDimension:
        """
        Overloaded method CreatePmiParallelDimension
        
        * ``CreatePmiParallelDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiParallelDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI parallel dimension  
        
        Signature ``CreatePmiParallelDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI parallel dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiParallelDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreatePerpendicularDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> PerpendicularDimension:
        """
        Overloaded method CreatePerpendicularDimension
        
        * ``CreatePerpendicularDimension(dimensionData, origin)`` 
        * ``CreatePerpendicularDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a perpendicular dimension  
        
        Signature ``CreatePerpendicularDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New perpendicular dimension  
        :rtype: :py:class:`NXOpen.Annotations.PerpendicularDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiPerpendicularDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiPerpendicularDimension:
        """
        Overloaded method CreatePmiPerpendicularDimension
        
        * ``CreatePmiPerpendicularDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiPerpendicularDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI perpendicular dimension  
        
        Signature ``CreatePmiPerpendicularDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI perpendicular dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiPerpendicularDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateRadiusDimension(self, dimensionData: DimensionData, radiusType: RadiusDimensionType, origin: NXOpen.Point3d) -> RadiusDimension:
        """
        Overloaded method CreateRadiusDimension
        
        * ``CreateRadiusDimension(dimensionData, radiusType, origin)`` 
        * ``CreateRadiusDimension(firstAssociativity, secondAssociativity, radiusDimensionType, annotationOrigin)`` 
        
        <hr>
        
        Creates a radius dimension  
        
        Signature ``CreateRadiusDimension(dimensionData, radiusType, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param radiusType:  Radius type  
        :type radiusType: :py:class:`NXOpen.Annotations.RadiusDimensionType` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New radius dimension  
        :rtype: :py:class:`NXOpen.Annotations.RadiusDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiRadiusDimension(self, dimensionData: DimensionData, radiusType: RadiusDimensionType, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiRadiusDimension:
        """
        Overloaded method CreatePmiRadiusDimension
        
        * ``CreatePmiRadiusDimension(dimensionData, radiusType, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiRadiusDimension(firstAssociativity, secondAssociativity, radiusDimensionType, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI radius dimension  
        
        Signature ``CreatePmiRadiusDimension(dimensionData, radiusType, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param radiusType:  Radius type  
        :type radiusType: :py:class:`NXOpen.Annotations.RadiusDimensionType` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI radius dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiRadiusDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateVerticalDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> VerticalDimension:
        """
        Overloaded method CreateVerticalDimension
        
        * ``CreateVerticalDimension(dimensionData, origin)`` 
        * ``CreateVerticalDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a vertical dimension  
        
        Signature ``CreateVerticalDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New vertical dimension  
        :rtype: :py:class:`NXOpen.Annotations.VerticalDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiVerticalDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiVerticalDimension:
        """
        Overloaded method CreatePmiVerticalDimension
        
        * ``CreatePmiVerticalDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiVerticalDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI vertical dimension  
        
        Signature ``CreatePmiVerticalDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI vertical dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiVerticalDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateVerticalOrdinateDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> VerticalOrdinateDimension:
        """
        Overloaded method CreateVerticalOrdinateDimension
        
        * ``CreateVerticalOrdinateDimension(dimensionData, origin)`` 
        * ``CreateVerticalOrdinateDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates a vertical ordinate dimension  
        
        Signature ``CreateVerticalOrdinateDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New vertical ordinate dimension  
        :rtype: :py:class:`NXOpen.Annotations.VerticalOrdinateDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiVerticalOrdinateDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiVerticalOrdinateDimension:
        """
        Overloaded method CreatePmiVerticalOrdinateDimension
        
        * ``CreatePmiVerticalOrdinateDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiVerticalOrdinateDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI vertical ordinate dimension  
        
        Signature ``CreatePmiVerticalOrdinateDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI vertical ordinate dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiVerticalOrdinateDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateOrdinateOriginDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d) -> OrdinateOriginDimension:
        """
        Overloaded method CreateOrdinateOriginDimension
        
        * ``CreateOrdinateOriginDimension(dimensionData, origin)`` 
        * ``CreateOrdinateOriginDimension(firstAssociativity, secondAssociativity, annotationOrigin)`` 
        
        <hr>
        
        Creates an ordinate origin dimension  
        
        Signature ``CreateOrdinateOriginDimension(dimensionData, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New ordinate origin dimension  
        :rtype: :py:class:`NXOpen.Annotations.OrdinateOriginDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: drafting ("DRAFTING")
        
        <hr>
        """
        ...
    
    
    def CreatePmiOrdinateOriginDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d) -> PmiOrdinateOriginDimension:
        """
        Overloaded method CreatePmiOrdinateOriginDimension
        
        * ``CreatePmiOrdinateOriginDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        * ``CreatePmiOrdinateOriginDimension(firstAssociativity, secondAssociativity, annotationPlane, annotationOrigin)`` 
        
        <hr>
        
        Creates a PMI ordinate origin dimension  
        
        Signature ``CreatePmiOrdinateOriginDimension(dimensionData, pmiData, annotationPlane, origin)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  New PMI ordinate origin dimension  
        :rtype: :py:class:`NXOpen.Annotations.PmiOrdinateOriginDimension` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        
        <hr>
        """
        ...
    
    
    def CreateHorizontalOrdinateAutoDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d, allowDuplicate: bool, repositionDim: bool) -> None:
        """
        Creates a horizontal ordinate automatic dimension 
        
        Signature ``CreateHorizontalOrdinateAutoDimension(dimensionData, origin, allowDuplicate, repositionDim)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param allowDuplicate:  TRUE - Allow dimensions with duplicate values  
        :type allowDuplicate: bool 
        :param repositionDim:  TRUE - Reposition existing dimensions  
        :type repositionDim: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiHorizontalOrdinateAutoDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, allowDuplicate: bool, repositionDim: bool) -> None:
        """
        Creates a PMI horizontal ordinate automatic dimension 
        
        Signature ``CreatePmiHorizontalOrdinateAutoDimension(dimensionData, pmiData, annotationPlane, origin, allowDuplicate, repositionDim)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param allowDuplicate:  TRUE - Allow dimensions with duplicate values  
        :type allowDuplicate: bool 
        :param repositionDim:  TRUE - Reposition existing dimensions  
        :type repositionDim: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateVerticalOrdinateAutoDimension(self, dimensionData: DimensionData, origin: NXOpen.Point3d, allowDuplicate: bool, repositionDim: bool) -> None:
        """
        Creates a vertical ordinate automatic dimension 
        
        Signature ``CreateVerticalOrdinateAutoDimension(dimensionData, origin, allowDuplicate, repositionDim)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param allowDuplicate:  TRUE - Allow dimensions with duplicate values  
        :type allowDuplicate: bool 
        :param repositionDim:  TRUE - Reposition existing dimensions  
        :type repositionDim: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiVerticalOrdinateAutoDimension(self, dimensionData: DimensionData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, allowDuplicate: bool, repositionDim: bool) -> None:
        """
        Creates a PMI vertical ordinate automatic dimension 
        
        Signature ``CreatePmiVerticalOrdinateAutoDimension(dimensionData, pmiData, annotationPlane, origin, allowDuplicate, repositionDim)`` 
        
        :param dimensionData:  Dimension data  
        :type dimensionData: :py:class:`NXOpen.Annotations.DimensionData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the dimension lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the dimension  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param allowDuplicate:  TRUE - Allow dimensions with duplicate values  
        :type allowDuplicate: bool 
        :param repositionDim:  TRUE - Reposition existing dimensions  
        :type repositionDim: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateThicknessDimensionBuilder(self, thicknessDimension: BaseConcentricCircleDimension) -> ThicknessDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.ThicknessDimensionBuilder`  
        
        Signature ``CreateThicknessDimensionBuilder(thicknessDimension)`` 
        
        :param thicknessDimension:  the Drafting or Inherited PMI thickness dimension to be edited,                                                                                                                                if None,  then create an thickness dimension   
        :type thicknessDimension: :py:class:`NXOpen.Annotations.BaseConcentricCircleDimension` 
        :returns:  the thickness dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.ThicknessDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiThicknessDimensionBuilder(self, thicknessDimension: PmiConcentricCircleDimension) -> PmiThicknessDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiThicknessDimensionBuilder`  
        
        Signature ``CreatePmiThicknessDimensionBuilder(thicknessDimension)`` 
        
        :param thicknessDimension:  the PMI thickness dimension to be edited,                                                                                                                                if None,  then create an thickness dimension   
        :type thicknessDimension: :py:class:`NXOpen.Annotations.PmiConcentricCircleDimension` 
        :returns:  the thickness dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiThicknessDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateCurveLengthDimensionBuilder(self, curveLengthDimension: BaseArcLengthDimension) -> CurveLengthDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.CurveLengthDimensionBuilder`  
        
        Signature ``CreateCurveLengthDimensionBuilder(curveLengthDimension)`` 
        
        :param curveLengthDimension:  the Drafting or Inherited PMI curve length dimension to be edited,                                                                                                                                if None,  then create an curve length dimension   
        :type curveLengthDimension: :py:class:`NXOpen.Annotations.BaseArcLengthDimension` 
        :returns:  the curve length dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.CurveLengthDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiCurveLengthDimensionBuilder(self, curveLengthDimension: PmiArcLengthDimension) -> PmiCurveLengthDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiCurveLengthDimensionBuilder`  
        
        Signature ``CreatePmiCurveLengthDimensionBuilder(curveLengthDimension)`` 
        
        :param curveLengthDimension:  the PMI curve length dimension to be edited,                                                                                                                                 if None,  then create an curve length dimension   
        :type curveLengthDimension: :py:class:`NXOpen.Annotations.PmiArcLengthDimension` 
        :returns:  the curve length dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiCurveLengthDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateChamferDimensionBuilder(self, chamferDimension: BaseChamferDimension) -> ChamferDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.ChamferDimensionBuilder`  
        
        Signature ``CreateChamferDimensionBuilder(chamferDimension)`` 
        
        :param chamferDimension:  the Drafting or PMI Inherited PMI chamfer dimension to be edited,                                                                                                                            if None,  then create an chamfer dimension   
        :type chamferDimension: :py:class:`NXOpen.Annotations.BaseChamferDimension` 
        :returns:  the chamfer dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.ChamferDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiChamferDimensionBuilder(self, chamferDimension: PmiChamferDimension) -> PmiChamferDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiChamferDimensionBuilder`  
        
        Signature ``CreatePmiChamferDimensionBuilder(chamferDimension)`` 
        
        :param chamferDimension:  the PMI chamfer dimension to be edited,                                                                                                                            if None,  then create an chamfer dimension   
        :type chamferDimension: :py:class:`NXOpen.Annotations.PmiChamferDimension` 
        :returns:  the chamfer dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiChamferDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateLinearDimensionBuilder(self, linearDimension: Dimension) -> LinearDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.LinearDimensionBuilder`  
        
        Signature ``CreateLinearDimensionBuilder(linearDimension)`` 
        
        :param linearDimension:  the Drafting or PMI linear dimension to be edited,                                                                                                                            if None,  then create an linear dimension   
        :type linearDimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the linear dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.LinearDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiLinearDimensionBuilder(self, linearDimension: Dimension) -> PmiLinearDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiLinearDimensionBuilder`  
        
        Signature ``CreatePmiLinearDimensionBuilder(linearDimension)`` 
        
        :param linearDimension:  the PMI linear dimension to be edited,                                                                                                                          if None,  then create an linear dimension   
        :type linearDimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the linear dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiLinearDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateRadialDimensionBuilder(self, radialDimension: Dimension) -> RadialDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.RadialDimensionBuilder`  
        
        Signature ``CreateRadialDimensionBuilder(radialDimension)`` 
        
        :param radialDimension:  the Drafting or PMI inherited radial dimension to be edited,                                                                                                                          if None,  then create an radial dimension   
        :type radialDimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the radial dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.RadialDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiRadialDimensionBuilder(self, radialDimension: Dimension) -> PmiRadialDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiRadialDimensionBuilder`  
        
        Signature ``CreatePmiRadialDimensionBuilder(radialDimension)`` 
        
        :param radialDimension:  the PMI radial dimension to be edited,                                                                                                                          if None,  then create an radial dimension   
        :type radialDimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the radial dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiRadialDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateRapidDimensionBuilder(self, rapidDimension: Dimension) -> RapidDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.RapidDimensionBuilder`  
        
        Signature ``CreateRapidDimensionBuilder(rapidDimension)`` 
        
        :param rapidDimension:  None.  
        
        Create only.  
        :type rapidDimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the Rapid dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.RapidDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiRapidDimensionBuilder(self, rapidDimension: Dimension) -> PmiRapidDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiRapidDimensionBuilder`  
        
        Signature ``CreatePmiRapidDimensionBuilder(rapidDimension)`` 
        
        :param rapidDimension:  None.  
        
        Create only.  
        :type rapidDimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the Rapid dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiRapidDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateAngularDimensionBuilder(self, angularDimension: BaseAngularDimension) -> AngularDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.AngularDimensionBuilder`  
        
        Signature ``CreateAngularDimensionBuilder(angularDimension)`` 
        
        :param angularDimension:  the Drafting or PMI inherited angular dimension to be edited,                                                                                                                        if None, then create an angular dimension   
        :type angularDimension: :py:class:`NXOpen.Annotations.BaseAngularDimension` 
        :returns:  the Angular dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.AngularDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateMajorAngularDimensionBuilder(self, angularDimension: MajorAngularDimension) -> MajorAngularDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.AngularDimensionBuilder`  
        
        Signature ``CreateMajorAngularDimensionBuilder(angularDimension)`` 
        
        :param angularDimension:  the Drafting or PMI inherited angular dimension to be edited,                                                                                                                        if None, then create an angular dimension   
        :type angularDimension: :py:class:`NXOpen.Annotations.MajorAngularDimension` 
        :returns:  the Angular dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.MajorAngularDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateMinorAngularDimensionBuilder(self, angularDimension: MinorAngularDimension) -> MinorAngularDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.AngularDimensionBuilder`  
        
        Signature ``CreateMinorAngularDimensionBuilder(angularDimension)`` 
        
        :param angularDimension:  the Drafting or PMI inherited angular dimension to be edited,                                                                                                                        if None, then create an angular dimension   
        :type angularDimension: :py:class:`NXOpen.Annotations.MinorAngularDimension` 
        :returns:  the Angular dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.MinorAngularDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiAngularDimensionBuilder(self, angularDimension: Dimension) -> PmiAngularDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiAngularDimensionBuilder`  
        
        Signature ``CreatePmiAngularDimensionBuilder(angularDimension)`` 
        
        :param angularDimension:  the PMI angular dimension to be edited,                                                                                                                         if None, then create an angular dimension   
        :type angularDimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the Angular dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiAngularDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreatePmiMajorAngularDimensionBuilder(self, angularDimension: BaseAngularDimension) -> PmiMajorAngularDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiMajorAngularDimensionBuilder`  
        
        Signature ``CreatePmiMajorAngularDimensionBuilder(angularDimension)`` 
        
        :param angularDimension:  the Drafting or PMI inherited angular dimension to be edited,                                                                                                                        if None, then create an angular dimension   
        :type angularDimension: :py:class:`NXOpen.Annotations.BaseAngularDimension` 
        :returns:  the Angular dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiMajorAngularDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreatePmiMinorAngularDimensionBuilder(self, angularDimension: BaseAngularDimension) -> PmiMinorAngularDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiMinorAngularDimensionBuilder`  
        
        Signature ``CreatePmiMinorAngularDimensionBuilder(angularDimension)`` 
        
        :param angularDimension:  the Drafting or PMI inherited angular dimension to be edited,                                                                                                                        if None, then create an angular dimension   
        :type angularDimension: :py:class:`NXOpen.Annotations.BaseAngularDimension` 
        :returns:  the Angular dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiMinorAngularDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateOrdinateDimensionBuilder(self, ordinateDimension: OrdinateDimension) -> OrdinateDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.OrdinateDimensionBuilder`  
        
        Signature ``CreateOrdinateDimensionBuilder(ordinateDimension)`` 
        
        :param ordinateDimension:  the Drafting or PMI inherited ordinate dimension to be edited,                                                                                                                          if None, then create an ordinate dimension   
        :type ordinateDimension: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :returns:  the ordinate dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.OrdinateDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiOrdinateDimensionBuilder(self, ordinateDimension: OrdinateDimension) -> PmiOrdinateDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.PmiOrdinateDimensionBuilder`  
        
        Signature ``CreatePmiOrdinateDimensionBuilder(ordinateDimension)`` 
        
        :param ordinateDimension:  the PMI ordinate dimension to be edited,                                                                                                                           if None, then create an ordinate dimension   
        :type ordinateDimension: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :returns:  the ordinate dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.PmiOrdinateDimensionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateAppendedTextEditorBuilder(self, dimension: Dimension) -> AppendedTextEditorBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.AppendedTextEditorBuilder`  
        
        Signature ``CreateAppendedTextEditorBuilder(dimension)`` 
        
        :param dimension:  :py:class:`NXOpen.Annotations.Dimension` to be edited  
        :type dimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.AppendedTextEditorBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateGeodesicDimensionBuilder(self, dimension: Dimension) -> GeodesicDimensionBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.GeodesicDimensionBuilder`  
        
        Signature ``CreateGeodesicDimensionBuilder(dimension)`` 
        
        :param dimension:  :py:class:`NXOpen.Annotations.Dimension` to be edited  
        :type dimension: :py:class:`NXOpen.Annotations.Dimension` 
        :returns:  the geodesic dimension builder  
        :rtype: :py:class:`NXOpen.Annotations.GeodesicDimensionBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class HoleTableBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleTableBuilder`.  
    
    This class queries and sets settings specific to holes when creating or
    editing hole table.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.HoleTableCollection.CreateHoleTableBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def ResetHoletableOrdinateOrigin(self) -> None:
        """
        Reset the Ordinate Origin of the hole table 
        
        Signature ``ResetHoletableOrdinateOrigin()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetLabelPosition(self) -> None:
        """
        Reset all the hole label's position of hole table 
        
        Signature ``ResetLabelPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Baseline: OrdinateBaselineBuilder = ...
    """
    Returns  the ordinate baseline 
    
    <hr>
    
    Getter Method
    
    Signature ``Baseline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OrdinateBaselineBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Inherit: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the inherit hole table 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OrdinateOrigin: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the Ordinate Origin of the hole table 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the hole table origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectedObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the list of selected objects.  
    
    These object can be of type view, solid_body and/or holes 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: TableStyleBuilder = ...
    """
    Returns  the hole table style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HoleTableBuilder = ...  # unknown typename


class AssociativeTextPropertyTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssociativeTextPropertyType():
    """
    the associative text property type to be used with the object 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DrawingNumberOfSheets", "Drawing sheet number of sheets"
       "DrawingNumberOfPrimarySheets", "Drawing sheet number of primary sheets"
       "DrawingSheetName", "Drawing sheet name"
       "DrawingSheetNumber", "Drawing sheet number"
       "DrawingSheetRevision", "Drawing sheet revision"
       "DrawingSheetScaleNumerator", "Drawing sheet scale numerator"
       "DrawingSheetScaleDenominator", "Drawing sheet scale denominator"
       "DrawingSheetSize", "Drawing sheet size"
       "DrawingSheetUnits", "Drawing sheet units"
       "DrawingSheetZone", "Drawing sheet zone"
       "DrawingSheetProjectionAngle", "Drawing sheet projection angle"
       "DrawingMasterPartName", "Drawing master part name"
       "DrawingPartName", "Drawing part name"
       "DrawingViewPrefix", "Drawing view prefix"
       "DrawingViewRotationAngle", "View rotation angle"
    """
    DrawingNumberOfSheets = 0  # AssociativeTextPropertyTypeMemberType
    DrawingNumberOfPrimarySheets = 1  # AssociativeTextPropertyTypeMemberType
    DrawingSheetName = 2  # AssociativeTextPropertyTypeMemberType
    DrawingSheetNumber = 3  # AssociativeTextPropertyTypeMemberType
    DrawingSheetRevision = 4  # AssociativeTextPropertyTypeMemberType
    DrawingSheetScaleNumerator = 5  # AssociativeTextPropertyTypeMemberType
    DrawingSheetScaleDenominator = 6  # AssociativeTextPropertyTypeMemberType
    DrawingSheetSize = 7  # AssociativeTextPropertyTypeMemberType
    DrawingSheetUnits = 8  # AssociativeTextPropertyTypeMemberType
    DrawingSheetZone = 9  # AssociativeTextPropertyTypeMemberType
    DrawingSheetProjectionAngle = 10  # AssociativeTextPropertyTypeMemberType
    DrawingMasterPartName = 11  # AssociativeTextPropertyTypeMemberType
    DrawingPartName = 12  # AssociativeTextPropertyTypeMemberType
    DrawingViewPrefix = 13  # AssociativeTextPropertyTypeMemberType
    DrawingViewRotationAngle = 14  # AssociativeTextPropertyTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssociativeText(NXOpen.TransientObject):
    """
    Associative text class creates text associated to object and part attributes as well as
    object properties such as a drawing sheet name.  
    
    The associative text is constructed using special
    NX text control sequences.         
    
    The text created using this class can be added to a table cell, note text, dimension appended text etc...
    
    Use functions in this class to query/extract information from text and create associative text.
    
    The client shouldn't parse NX text control sequences to extract informtation.
    The text control sequences can change from release to release.
    
    .. versionadded:: NX8.0.0
    """
    
    class PropertyType():
        """
        the associative text property type to be used with the object 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DrawingNumberOfSheets", "Drawing sheet number of sheets"
           "DrawingNumberOfPrimarySheets", "Drawing sheet number of primary sheets"
           "DrawingSheetName", "Drawing sheet name"
           "DrawingSheetNumber", "Drawing sheet number"
           "DrawingSheetRevision", "Drawing sheet revision"
           "DrawingSheetScaleNumerator", "Drawing sheet scale numerator"
           "DrawingSheetScaleDenominator", "Drawing sheet scale denominator"
           "DrawingSheetSize", "Drawing sheet size"
           "DrawingSheetUnits", "Drawing sheet units"
           "DrawingSheetZone", "Drawing sheet zone"
           "DrawingSheetProjectionAngle", "Drawing sheet projection angle"
           "DrawingMasterPartName", "Drawing master part name"
           "DrawingPartName", "Drawing part name"
           "DrawingViewPrefix", "Drawing view prefix"
           "DrawingViewRotationAngle", "View rotation angle"
        """
        DrawingNumberOfSheets = 0  # AssociativeTextPropertyTypeMemberType
        DrawingNumberOfPrimarySheets = 1  # AssociativeTextPropertyTypeMemberType
        DrawingSheetName = 2  # AssociativeTextPropertyTypeMemberType
        DrawingSheetNumber = 3  # AssociativeTextPropertyTypeMemberType
        DrawingSheetRevision = 4  # AssociativeTextPropertyTypeMemberType
        DrawingSheetScaleNumerator = 5  # AssociativeTextPropertyTypeMemberType
        DrawingSheetScaleDenominator = 6  # AssociativeTextPropertyTypeMemberType
        DrawingSheetSize = 7  # AssociativeTextPropertyTypeMemberType
        DrawingSheetUnits = 8  # AssociativeTextPropertyTypeMemberType
        DrawingSheetZone = 9  # AssociativeTextPropertyTypeMemberType
        DrawingSheetProjectionAngle = 10  # AssociativeTextPropertyTypeMemberType
        DrawingMasterPartName = 11  # AssociativeTextPropertyTypeMemberType
        DrawingPartName = 12  # AssociativeTextPropertyTypeMemberType
        DrawingViewPrefix = 13  # AssociativeTextPropertyTypeMemberType
        DrawingViewRotationAngle = 14  # AssociativeTextPropertyTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetObjectPropertyText(self, object: NXOpen.NXObject, type: AssociativeTextPropertyType) -> str:
        """
        Returns the associative text for the input object and its property.  
        
        For example, to obtain a reference to a drawing name, the object is the :py:class:`NXOpen.Drawings.DraftingView` of the :py:class:`NXOpen.Drawings.DrawingSheet`.
        It is not the :py:class:`NXOpen.Drawings.DrawingSheet` itself, but rather the type is :py:class:`NXOpen.Annotations.AssociativeTextPropertyType.DrawingSheetName <NXOpen.Annotations.AssociativeTextPropertyType>`.
        
        Signature ``GetObjectPropertyText(object, type)`` 
        
        :param object:  the object  
        :type object: :py:class:`NXOpen.NXObject` 
        :param type:  the object property  
        :type type: :py:class:`NXOpen.Annotations.AssociativeTextPropertyType` 
        :returns:  the associative text  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetObjectAttributeText(self, object: NXOpen.NXObject, attributeTitle: str) -> str:
        """
        Returns the associative text for the input object and attribute title.  
        
        Signature ``GetObjectAttributeText(object, attributeTitle)`` 
        
        :param object:  the object  
        :type object: :py:class:`NXOpen.NXObject` 
        :param attributeTitle:  the object attribute title  
        :type attributeTitle: str 
        :returns:  the associative text  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetObjectAttribute(self, text: str) -> tuple:
        """
        Returns the title and owning object of the object attribute referenced in the associative text.  
        
        The reference is considered found if the syntax of the text control sequence reflects an object attribute reference.
        
        **Example 1:</b>  "<WRef2*0@PartAttTitle>" is an existing reference to part attribute "PartAttTitle" so the reference
        will be considered a part attribute reference.  No object or title will be returned.
        
        **Example 2:</b>  "<W@AttTitle>" uses the part attribute syntax so the reference will be considered
        a part attribute reference.  No object or title will be returned.
        
        **Example 3:</b>  "<WRef1*0@ObjAttTitle>" is an existing reference to object attribute "ObjAttTitle" so the reference
        will be considered an object attribute reference.  The object containing the attribute and
        "ObjAttTitle" will be returned as the attribute title.  Note that the object that contains the attribute will reside
        in the part that owns the associative text object.
        
        **Example 4:</b>  "<WRef10*0@AttTitle>" where "Ref10*0" reference does not exist will be considered an object attribute reference.
        No object will be returned but "AttTitle" will be returned as the attribute title.  Note that the existance of "Ref10*0" is
        only checked for in the part that owns the associative text object.
        
        Signature ``GetObjectAttribute(text)`` 
        
        :param text:  the associative text to query  
        :type text: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (found, object, attributeTitle). found is a bool.   the object attribute reference was found. object is a :py:class:`NXOpen.NXObject`.   the object attributeTitle is a str.   the object attribute title 
        
        .. versionadded:: NX8.5.3
        
        License requirements: None.
        """
        ...
    
    
    def GetPartAttributeText(self, attributeTitle: str) -> str:
        """
        Returns the associative text for the part attribute title.  
        
        Signature ``GetPartAttributeText(attributeTitle)`` 
        
        :param attributeTitle:  the part attribute title  
        :type attributeTitle: str 
        :returns:  the associative text  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPartAttribute(self, text: str) -> tuple:
        """
        Returns the title of the part attribute referenced in the associative text.  
        
        Text references such as "Ref2*0" "<WRef2*0<@>title>" must exist as a part attribute reference
        in the part that owns the associative text object in order to be considered part attributes.
        The reference is considered found if the syntax of the text control sequence reflects a part attribute reference.
        
        **Example 1:</b>  "<WRef2*0<@>PartAttTitle>" is an existing reference to part attribute "PartAttTitle" so the reference
        will be considered a part attribute reference.  "PartAttTitle" will be returned as the title.
        Note that "Ref2*0" must exist as a part attribute reference in the part that owns the associative text.
        
        **Example 2:</b>  "<W<@>AttTitle>" uses the part attribute syntax so the reference will be considered
        a part attribute reference.  "AttTitle" will be returned as the title.
        
        **Example 3:</b>  "<WRef1*0<@>ObjAttTitle>" is an existing reference to object attribute "ObjAttTitle" so the reference
        will be considered an object attribute reference.  No title will be returned.
        
        **Example 4:</b>  "<WRef10*0<@>AttTitle>" where "Ref10*0" reference does not exist will be considered an object attribute reference.
        No title will be returned.
        
        Signature ``GetPartAttribute(text)`` 
        
        :param text:  the text containing associative text to query  
        :type text: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (found, attributeTitle). found is a bool.   the part attribute reference was found attributeTitle is a str.   the part attribute title 
        
        .. versionadded:: NX8.5.3
        
        License requirements: None.
        """
        ...
    
    
    def GetEvaluatedText(self, ann: Annotation, text: str) -> str:
        """
        Evaluate the associative text specified.  
        
        Convert associative text
        to the string that it represents.  The following associative text
        control sequences will be evaluated: part attribute references,
        object attribute references, expression references, and object
        property references.  Example:
        The value of part attribute "ATT1" is "Value1".  The text that
        represents the reference to part attribute "ATT1" is "<W<@>ATT1>"
        The value of expression "p1" is "3.00".  The text that represents the
        reference to expression "p1" is "<X0.2<@>p1>".
        The value of object property "<WRef1*0<@>$SH_SHEET_NAME>" is "Sheet 1".
        Given the input text "<WRef1*0<@>$SH_SHEET_NAME> <X0.2<@>p1> <W<@>ATT1>"
        the evaluated text returned will be "Sheet 1 3.00 Value1"  
        
        Signature ``GetEvaluatedText(ann, text)`` 
        
        :param ann:  Annotation used to determine                the object property value when the object is not specified.  For example, given                annotation 123 and 456 where 123 resides in "Sheet 1" and 456 resides in "Sheet 2"                then the evaluated text returned for the input text "<W<@>$SH_SHEET_NAME>" for                annotation 123 is "Sheet 1" and for annotation 456 is "Sheet 2"  
        :type ann: :py:class:`NXOpen.Annotations.Annotation` 
        :param text:  the text containing associative text to evaluate  
        :type text: str 
        :returns:  the text with the evaluated associative text  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class FeatureIdBusinessModifierBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.FeatureIdBusinessModifier` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.BusinessModifierCollection.CreateFeatureIdBusinessModifierBuilder`
    
    .. versionadded:: NX6.0.0
    """
    FeatureId: str = ...
    """
    Returns or sets  the feature ID 
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureId`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FeatureId`` 
    
    :param featureId: 
    :type featureId: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: FeatureIdBusinessModifierBuilder = ...  # unknown typename


class IdSymbolCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.IdSymbol` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateIdSymbolBuilder(self, idsymbol: IdSymbol) -> IdSymbolBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.IdSymbolBuilder`  
        
        Signature ``CreateIdSymbolBuilder(idsymbol)`` 
        
        :param idsymbol:  the id symbol to be edited,                                                                            if None,  then create an id symbol  
        :type idsymbol: :py:class:`NXOpen.Annotations.IdSymbol` 
        :returns:  the id symbol builder  
        :rtype: :py:class:`NXOpen.Annotations.IdSymbolBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateCalloutGroupBuilder(self) -> CalloutGroupBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.CalloutGroupBuilder`  
        
        Signature ``CreateCalloutGroupBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.CalloutGroupBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class TableSectionStyleBuilderLocationOfHeaderMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableSectionStyleBuilderLocationOfHeader():
    """
    Represents the section header location choices 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Above", "Above"
       "Below", "Below"
       "NotSet", "None"
    """
    Above = 0  # TableSectionStyleBuilderLocationOfHeaderMemberType
    Below = 1  # TableSectionStyleBuilderLocationOfHeaderMemberType
    NotSet = 2  # TableSectionStyleBuilderLocationOfHeaderMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableSectionStyleBuilderContinuationPropertyTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableSectionStyleBuilderContinuationPropertyType():
    """
    Represents the section continuation property 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", "Left"
       "Right", "Right"
       "Up", "Up"
       "Down", "Down"
       "NextSheet", "Next Sheet"
    """
    Left = 0  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
    Right = 1  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
    Up = 2  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
    Down = 3  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
    NextSheet = 4  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableSectionStyleBuilderAlignmentPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableSectionStyleBuilderAlignmentPositionType():
    """
    Represents the alignment position type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", "Top Left"
       "TopRight", "Top Right"
       "BottomLeft", "Bottom Left"
       "BottomRight", "Bottom right"
    """
    TopLeft = 0  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
    TopRight = 1  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
    BottomLeft = 2  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
    BottomRight = 3  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableSectionStyleBuilderDisplayContinuationNoteTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TableSectionStyleBuilderDisplayContinuationNoteType():
    """
    Represents the display continuation note choices 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Above", "Above"
       "Below", "Below"
    """
    NotSet = 0  # TableSectionStyleBuilderDisplayContinuationNoteTypeMemberType
    Above = 1  # TableSectionStyleBuilderDisplayContinuationNoteTypeMemberType
    Below = 2  # TableSectionStyleBuilderDisplayContinuationNoteTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableSectionStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TableSectionStyleBuilder`.  
    
    This class queries and sets preferences for various symbol type annotations when creating or editing.
    
    .. versionadded:: NX8.0.0
    """
    
    class LocationOfHeader():
        """
        Represents the section header location choices 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Above", "Above"
           "Below", "Below"
           "NotSet", "None"
        """
        Above = 0  # TableSectionStyleBuilderLocationOfHeaderMemberType
        Below = 1  # TableSectionStyleBuilderLocationOfHeaderMemberType
        NotSet = 2  # TableSectionStyleBuilderLocationOfHeaderMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContinuationPropertyType():
        """
        Represents the section continuation property 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", "Left"
           "Right", "Right"
           "Up", "Up"
           "Down", "Down"
           "NextSheet", "Next Sheet"
        """
        Left = 0  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
        Right = 1  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
        Up = 2  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
        Down = 3  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
        NextSheet = 4  # TableSectionStyleBuilderContinuationPropertyTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AlignmentPositionType():
        """
        Represents the alignment position type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopLeft", "Top Left"
           "TopRight", "Top Right"
           "BottomLeft", "Bottom Left"
           "BottomRight", "Bottom right"
        """
        TopLeft = 0  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
        TopRight = 1  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
        BottomLeft = 2  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
        BottomRight = 3  # TableSectionStyleBuilderAlignmentPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DisplayContinuationNoteType():
        """
        Represents the display continuation note choices 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Above", "Above"
           "Below", "Below"
        """
        NotSet = 0  # TableSectionStyleBuilderDisplayContinuationNoteTypeMemberType
        Above = 1  # TableSectionStyleBuilderDisplayContinuationNoteTypeMemberType
        Below = 2  # TableSectionStyleBuilderDisplayContinuationNoteTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlignmentPosition: TableSectionStyleBuilderAlignmentPositionType = ...
    """
    Returns or sets  the alignment Position settings of the section 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderAlignmentPositionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentPosition`` 
    
    :param alignmentPosition: 
    :type alignmentPosition: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderAlignmentPositionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ApplyToAllSections: bool = ...
    """
    Returns or sets  the apply to all sections flag that when set applies settings to all sections 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyToAllSections`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyToAllSections`` 
    
    :param applyToAllSections: 
    :type applyToAllSections: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    BorderOffset: float = ...
    """
    Returns or sets  the border offset value 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderOffset`` 
    
    :param borderOffset: 
    :type borderOffset: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ContinuationNote: str = ...
    """
    Returns or sets  the continuation note flag setting 
    
    <hr>
    
    Getter Method
    
    Signature ``ContinuationNote`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContinuationNote`` 
    
    :param continuationNote: 
    :type continuationNote: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ContinuationProperty: TableSectionStyleBuilderContinuationPropertyType = ...
    """
    Returns or sets  the continuation property type 
    
    <hr>
    
    Getter Method
    
    Signature ``ContinuationProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderContinuationPropertyType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContinuationProperty`` 
    
    :param continuationProperty: 
    :type continuationProperty: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderContinuationPropertyType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ContinuationSpacing: float = ...
    """
    Returns or sets  the continuation spacing value between sections 
    
    <hr>
    
    Getter Method
    
    Signature ``ContinuationSpacing`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContinuationSpacing`` 
    
    :param spacing: 
    :type spacing: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayContinuationNote: TableSectionStyleBuilderDisplayContinuationNoteType = ...
    """
    Returns or sets  the display continuation note type 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayContinuationNote`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderDisplayContinuationNoteType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayContinuationNote`` 
    
    :param displayContinuationNote: 
    :type displayContinuationNote: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderDisplayContinuationNoteType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DoubleBorder: bool = ...
    """
    Returns or sets  the double border flag setting 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleBorder`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleBorder`` 
    
    :param doubleBorder: 
    :type doubleBorder: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    HeaderLocation: TableSectionStyleBuilderLocationOfHeader = ...
    """
    Returns or sets  the value that represents the location of header on a section 
    
    <hr>
    
    Getter Method
    
    Signature ``HeaderLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderLocationOfHeader` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeaderLocation`` 
    
    :param headerLocation: 
    :type headerLocation: :py:class:`NXOpen.Annotations.TableSectionStyleBuilderLocationOfHeader` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    MaximumHeight: float = ...
    """
    Returns or sets  the value that represents the maximum height of the section 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumHeight`` 
    
    :param maximumHeight: 
    :type maximumHeight: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: TableSectionStyleBuilder = ...  # unknown typename


class PmiDiameterDimension(BaseDiameterDimension):
    """
    Represents a PMI diameter dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiRadialDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiDiameterDimension = ...  # unknown typename


class FeatureControlFrameBuilderFcfCharacteristicMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameBuilderFcfCharacteristic():
    """
    Specifies the characteristitic of the feature control frame 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Straightness", "straightness"
       "Flatness", "flatness"
       "Circularity", "circularity"
       "Cylindricity", "cylindricity"
       "ProfileOfALine", "profile of a line"
       "ProfileOfASurface", "profile of a sufrace"
       "Angularity", "angularity"
       "Perpendicularity", "perpendicularity"
       "Parallelism", "parallelism"
       "Position", "position"
       "Concentricity", "concentricity"
       "Symmetry", "symmetry"
       "CircularRunout", "circular runout"
       "TotalRunout", "total runout"
       "AxisIntersection", "axis intersection"
    """
    Straightness = 0  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Flatness = 1  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Circularity = 2  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Cylindricity = 3  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    ProfileOfALine = 4  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    ProfileOfASurface = 5  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Angularity = 6  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Perpendicularity = 7  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Parallelism = 8  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Position = 9  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Concentricity = 10  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    Symmetry = 11  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    CircularRunout = 12  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    TotalRunout = 13  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    AxisIntersection = 14  # FeatureControlFrameBuilderFcfCharacteristicMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameBuilderFcfFrameStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameBuilderFcfFrameStyle():
    """
    Specifies whether the feature control frame is a single frame or composite 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleFrame", "single frame"
       "CompositeFrame", "composite frame"
    """
    SingleFrame = 0  # FeatureControlFrameBuilderFcfFrameStyleMemberType
    CompositeFrame = 1  # FeatureControlFrameBuilderFcfFrameStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.FeatureControlFrameBuilder`
    
    This is an abstract class, and cannot be instantiated.
    
    Default values.
    
    =======================  ===========================================
    Property                 Value
    =======================  ===========================================
    Text.CustomSymbolScale   1.0 
    -----------------------  -------------------------------------------
    Text.SymbolAspectRatio   1.0 
    -----------------------  -------------------------------------------
    Text.SymbolHeight        25.4 (millimeters part), 1.0 (inches part) 
    -----------------------  -------------------------------------------
    Text.SymbolLength        25.4 (millimeters part), 1.0 (inches part) 
    -----------------------  -------------------------------------------
    Text.SymbolPreferences   UseCurrent 
    -----------------------  -------------------------------------------
    Text.SymbolScale         1.0 
    -----------------------  -------------------------------------------
    Text.SymbolSizeMethod    ScaleAndAspectRatio 
    =======================  ===========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class FcfCharacteristic():
        """
        Specifies the characteristitic of the feature control frame 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Straightness", "straightness"
           "Flatness", "flatness"
           "Circularity", "circularity"
           "Cylindricity", "cylindricity"
           "ProfileOfALine", "profile of a line"
           "ProfileOfASurface", "profile of a sufrace"
           "Angularity", "angularity"
           "Perpendicularity", "perpendicularity"
           "Parallelism", "parallelism"
           "Position", "position"
           "Concentricity", "concentricity"
           "Symmetry", "symmetry"
           "CircularRunout", "circular runout"
           "TotalRunout", "total runout"
           "AxisIntersection", "axis intersection"
        """
        Straightness = 0  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Flatness = 1  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Circularity = 2  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Cylindricity = 3  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        ProfileOfALine = 4  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        ProfileOfASurface = 5  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Angularity = 6  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Perpendicularity = 7  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Parallelism = 8  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Position = 9  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Concentricity = 10  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        Symmetry = 11  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        CircularRunout = 12  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        TotalRunout = 13  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        AxisIntersection = 14  # FeatureControlFrameBuilderFcfCharacteristicMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FcfFrameStyle():
        """
        Specifies whether the feature control frame is a single frame or composite 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SingleFrame", "single frame"
           "CompositeFrame", "composite frame"
        """
        SingleFrame = 0  # FeatureControlFrameBuilderFcfFrameStyleMemberType
        CompositeFrame = 1  # FeatureControlFrameBuilderFcfFrameStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def FeatureControlFrameData(self) -> 'list[FeatureControlFrameDataBuilder]':
        """
        The feature control frame data list.  
        
        this method will always return at least two frames. for single feature control frames
        (frame type is single frame type) only the first frame is used. 
        
        Signature ``FeatureControlFrameData()`` 
        
        :returns:  feature control frame data builders  
        :rtype: list of :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def InheritFrom(self, inheritTag: BaseFcf) -> None:
        """
        The feature control frame is inherited form existing feature control frame.  
        
        Signature ``InheritFrom(inheritTag)`` 
        
        :param inheritTag: 
        :type inheritTag: :py:class:`NXOpen.Annotations.BaseFcf` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    Characteristic: FeatureControlFrameBuilderFcfCharacteristic = ...
    """
    Returns or sets  the characteristic 
    
    <hr>
    
    Getter Method
    
    Signature ``Characteristic`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameBuilderFcfCharacteristic` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Characteristic`` 
    
    :param characteristic: 
    :type characteristic: :py:class:`NXOpen.Annotations.FeatureControlFrameBuilderFcfCharacteristic` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    FeatureControlFrameDataList: FeatureControlFrameDataBuilderList = ...
    """
    Returns  the feature control frame data list.  
    
    this method will always return at least two frames. for single feature control frames
    (frame type is single frame type) only the first frame is used. 
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureControlFrameDataList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FrameStyle: FeatureControlFrameBuilderFcfFrameStyle = ...
    """
    Returns or sets  the frame style 
    
    <hr>
    
    Getter Method
    
    Signature ``FrameStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameBuilderFcfFrameStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrameStyle`` 
    
    :param frameStyle: 
    :type frameStyle: :py:class:`NXOpen.Annotations.FeatureControlFrameBuilderFcfFrameStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.OriginBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Text: TextWithSymbolsBuilder = ...
    """
    Returns  the text 
    
    <hr>
    
    Getter Method
    
    Signature ``Text`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: FeatureControlFrameBuilder = ...  # unknown typename


class PmiFeatureControlFrameBuilder(FeatureControlFrameBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiFeatureControlFrameBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreatePmiFeatureControlFrameBuilder`
    
    .. versionadded:: NX6.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects builder for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiFeatureControlFrameBuilder = ...  # unknown typename


class TextPlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextPlacement():
    """
    Specifies the dimension text placement 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "Specifies automatic text placement"
       "ManualArrowsIn", "Specifies manual text placement with arrows inside the extension lines"
       "ManualArrowsOut", "Specifies manual text placement with arrows outside the extension lines"
       "ManualArrowsInSameDirection", "Specifies manual text placement with arrows in the same direction"
       "Last", "Last enum value. Should not be used."
    """
    Automatic = 0  # TextPlacementMemberType
    ManualArrowsIn = 1  # TextPlacementMemberType
    ManualArrowsOut = 2  # TextPlacementMemberType
    ManualArrowsInSameDirection = 3  # TextPlacementMemberType
    Last = 4  # TextPlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SafetyClassBusinessModifier(ListBusinessModifier):
    """
    Represents buiness modifier that applies safety classification such as Critical, Major 
    to a PMI.  
    
    please see ug_safety_class_busmod.dfa for attribute details. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.SafetyClassBusinessModifierBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: SafetyClassBusinessModifier = ...  # unknown typename


class PmiAttributeValueListBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiAttributeValueList` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiAttributeValueListBuilder`
    
    .. versionadded:: NX6.0.0
    """
    ListValue: str = ...
    """
    Returns or sets  the list_value 
    
    <hr>
    
    Getter Method
    
    Signature ``ListValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ListValue`` 
    
    :param listValue: 
    :type listValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiAttributeValueListBuilder = ...  # unknown typename


class FeatureControlFrameDataBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[FeatureControlFrameDataBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: FeatureControlFrameDataBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: FeatureControlFrameDataBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> FeatureControlFrameDataBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FeatureControlFrameDataBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FeatureControlFrameDataBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[FeatureControlFrameDataBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[FeatureControlFrameDataBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: FeatureControlFrameDataBuilder, object2: FeatureControlFrameDataBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: FeatureControlFrameDataBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.FeatureControlFrameDataBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: FeatureControlFrameDataBuilderList = ...  # unknown typename


class PmiAttributeValueStringBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiAttributeValueString` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiAttributeValueStringBuilder`
    
    .. versionadded:: NX6.0.0
    """
    StringValue: str = ...
    """
    Returns or sets  the string_value 
    
    <hr>
    
    Getter Method
    
    Signature ``StringValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringValue`` 
    
    :param stringValue: 
    :type stringValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiAttributeValueStringBuilder = ...  # unknown typename


class SimpleDraftingAidPreferences(NXOpen.TransientObject):
    """
    Represents simple drafting aid preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLetteringPreferences(self) -> LetteringPreferences:
        """
        Returns the lettering preferences  
        
        Signature ``GetLetteringPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLetteringPreferences(self, preferences: LetteringPreferences) -> None:
        """
        Sets the lettering preferences 
        
        Signature ``SetLetteringPreferences(preferences)`` 
        
        :param preferences: 
        :type preferences: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLineAndArrowPreferences(self) -> LineAndArrowPreferences:
        """
        Returns the line and arrow preferences  
        
        Signature ``GetLineAndArrowPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLineAndArrowPreferences(self, preferences: LineAndArrowPreferences) -> None:
        """
        Sets the line and arrow preferences 
        
        Signature ``SetLineAndArrowPreferences(preferences)`` 
        
        :param preferences: 
        :type preferences: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSymbolPreferences(self) -> SymbolPreferences:
        """
        Returns the symbol preferences  
        
        Signature ``GetSymbolPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SymbolPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSymbolPreferences(self, preferences: SymbolPreferences) -> None:
        """
        Sets the symbol preferences 
        
        Signature ``SetSymbolPreferences(preferences)`` 
        
        :param preferences: 
        :type preferences: :py:class:`NXOpen.Annotations.SymbolPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUserSymbolPreferences(self) -> UserSymbolPreferences:
        """
        Returns the user symbol preferences  
        
        Signature ``GetUserSymbolPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUserSymbolPreferences(self, preferences: UserSymbolPreferences) -> None:
        """
        Sets the user symbol preferences 
        
        Signature ``SetUserSymbolPreferences(preferences)`` 
        
        :param preferences: 
        :type preferences: :py:class:`NXOpen.Annotations.UserSymbolPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class TailMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Tail():
    """
    Specifies the weld tail for the reference line 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Specifies no tail"
       "Fork", "Specifies fork tail"
       "Box", "Specifies box tail"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # TailMemberType
    Fork = 1  # TailMemberType
    Box = 2  # TailMemberType
    Last = 3  # TailMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LightweightSectionView(NXOpen.ModelingView):
    """
    Represents a PMI Lightweight Section View   
    
    Created with LightweightSection
    
    .. versionadded:: NX7.5.0
    """
    
    def GetSectionCurvesVisibility(self) -> bool:
        """
        Returns the lightweight section view curves visiblity  
        
        Signature ``GetSectionCurvesVisibility()`` 
        
        :returns:  false = Hide lightweight section curves, true = Show lightweight section curves  
        :rtype: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSectionCurvesVisibility(self, optionHideShow: bool) -> None:
        """
        Sets the lightweight section view curves visiblity 
        
        Signature ``SetSectionCurvesVisibility(optionHideShow)`` 
        
        :param optionHideShow:  false = Hide lightweight section curves, true = Show lightweight section curves  
        :type optionHideShow: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Null: LightweightSectionView = ...  # unknown typename


class RetainedAnnotationsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.RetainedAnnotationsBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    LineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the line color font width of retained drafting objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``LineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ShowRetainedAnnotations: bool = ...
    """
    Returns or sets  the flag indicating to show the retained annotations.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowRetainedAnnotations`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowRetainedAnnotations`` 
    
    :param showRetainedAnnotations: 
    :type showRetainedAnnotations: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: RetainedAnnotationsBuilder = ...  # unknown typename


class DimensionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DimensionType():
    """
    Specifies the type of dimension being created 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AngularMajor", "Major Angular dimension"
       "AngularMinor", "Minor Angular dimension"
       "ArcLength", "Arc Length dimension"
       "Baseline", "Baseline dimension"
       "Chain", "Chain dimension"
       "Chamfer", "Chamfer dimension"
       "ConcentricCircle", "Concentric Circle dimension"
       "Cylindrical", "Cylindrical dimension"
       "Diameter", "Diameter dimension"
       "FoldedRadius", "Folded Radius dimension"
       "Hole", "Hole dimension"
       "Horizontal", "Horizontal dimension"
       "OrdinateHorizontal", "Horizontal Ordinate dimension"
       "OrdinateOrigin", "Ordinate Origin dimension"
       "OrdinateVertical", "Vertical Ordinate dimension"
       "Parallel", "Parallel dimension"
       "Perpendicular", "Perpendicular dimension"
       "Radius", "Radius dimension"
       "Vertical", "Vertical dimension"
       "Last", "Last enum value. Should not be used."
    """
    AngularMajor = 0  # DimensionTypeMemberType
    AngularMinor = 1  # DimensionTypeMemberType
    ArcLength = 2  # DimensionTypeMemberType
    Baseline = 3  # DimensionTypeMemberType
    Chain = 4  # DimensionTypeMemberType
    Chamfer = 5  # DimensionTypeMemberType
    ConcentricCircle = 6  # DimensionTypeMemberType
    Cylindrical = 7  # DimensionTypeMemberType
    Diameter = 8  # DimensionTypeMemberType
    FoldedRadius = 9  # DimensionTypeMemberType
    Hole = 10  # DimensionTypeMemberType
    Horizontal = 11  # DimensionTypeMemberType
    OrdinateHorizontal = 12  # DimensionTypeMemberType
    OrdinateOrigin = 13  # DimensionTypeMemberType
    OrdinateVertical = 14  # DimensionTypeMemberType
    Parallel = 15  # DimensionTypeMemberType
    Perpendicular = 16  # DimensionTypeMemberType
    Radius = 17  # DimensionTypeMemberType
    Vertical = 18  # DimensionTypeMemberType
    Last = 19  # DimensionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendTableCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.BendTable` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBendTableBuilder(self, bendTable: BendTable) -> BendTableBuilder:
        """
        If None create a new bend table, otherwise edit existing bend table  
        
        Signature ``CreateBendTableBuilder(bendTable)`` 
        
        :param bendTable:  bend table  
        :type bendTable: :py:class:`NXOpen.Annotations.BendTable` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.BendTableBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> BendTable:
        """
        Finds the bend table with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the bend table to be found  
        :type journalIdentifier: str 
        :returns:  bend table with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.BendTable` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class PmiLineWeldBuilder(LineWeldBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiLineWeld` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.WeldCollection.CreatePmiLineWeldBuilder`
    
    Default values.
    
    =================  ==================
    Property           Value
    =================  ==================
    FieldWeld          Plain 
    -----------------  ------------------
    FlipDirection      False 
    -----------------  ------------------
    FlipHorizontal     False 
    -----------------  ------------------
    FlipVertical       False 
    -----------------  ------------------
    IdLine             Plain 
    -----------------  ------------------
    Scale              1 
    -----------------  ------------------
    StaggeredWeld      NoStaggeredSymbol 
    -----------------  ------------------
    Tail               NoTail 
    -----------------  ------------------
    WeldAlongContour   None 
    =================  ==================
    
    .. versionadded:: NX6.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder`  for weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiLineWeldBuilder = ...  # unknown typename


class DiameterRadiusSymbolPlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DiameterRadiusSymbolPlacement():
    """
    Specifies the diameter/radius symbol placement relative to the dimension text 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Below", "Specifies diameter/radius symbol is placed below dimension text"
       "Above", "Specifies diameter/radius symbol is placed above dimension text"
       "After", "Specifies diameter/radius symbol is placed after dimension text"
       "Before", "Specifies diameter/radius symbol is placed before dimension text"
       "Omit", "Specifies diameter/radius symbol is omitted"
       "Last", "Last enum value. Should not be used."
    """
    Below = 0  # DiameterRadiusSymbolPlacementMemberType
    Above = 1  # DiameterRadiusSymbolPlacementMemberType
    After = 2  # DiameterRadiusSymbolPlacementMemberType
    Before = 3  # DiameterRadiusSymbolPlacementMemberType
    Omit = 4  # DiameterRadiusSymbolPlacementMemberType
    Last = 5  # DiameterRadiusSymbolPlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TableSection(Annotation):
    """
    Represents a :py:class:`NXOpen.Annotations.TableSection`.  
    
    This class represents a table section.
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.TableSectionBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: TableSection = ...  # unknown typename


class AssociatedObjectsSetsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    The associated objects sets builder is used to store lists of objects which annotations are associated to   
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ObjectsSet1: AssociatedObjectsBuilder = ...
    """
    Returns  the objects of set1 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectsSet1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ObjectsSet2: AssociatedObjectsBuilder = ...
    """
    Returns  the objects of set2 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectsSet2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: AssociatedObjectsSetsBuilder = ...  # unknown typename


class DrivingValueBuilderDrivingValueMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrivingValueBuilderDrivingValueMethod():
    """
    the driving value method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inferred", " - "
       "Driving", " - "
       "Reference", " - "
    """
    Inferred = 0  # DrivingValueBuilderDrivingValueMethodMemberType
    Driving = 1  # DrivingValueBuilderDrivingValueMethodMemberType
    Reference = 2  # DrivingValueBuilderDrivingValueMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrivingValueBuilderDrivingExpressionModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrivingValueBuilderDrivingExpressionMode():
    """
    the driving expression mode 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MeasureGeometry", " - "
       "KeepExpression", " - "
    """
    MeasureGeometry = 0  # DrivingValueBuilderDrivingExpressionModeMemberType
    KeepExpression = 1  # DrivingValueBuilderDrivingExpressionModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrivingValueBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """.. versionadded:: NX9.0.0"""
    
    class DrivingValueMethod():
        """
        the driving value method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inferred", " - "
           "Driving", " - "
           "Reference", " - "
        """
        Inferred = 0  # DrivingValueBuilderDrivingValueMethodMemberType
        Driving = 1  # DrivingValueBuilderDrivingValueMethodMemberType
        Reference = 2  # DrivingValueBuilderDrivingValueMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DrivingExpressionMode():
        """
        the driving expression mode 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MeasureGeometry", " - "
           "KeepExpression", " - "
        """
        MeasureGeometry = 0  # DrivingValueBuilderDrivingExpressionModeMemberType
        KeepExpression = 1  # DrivingValueBuilderDrivingExpressionModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DrivingMethod: DrivingValueBuilderDrivingValueMethod = ...
    """
    Returns or sets  the driving method 
    
    <hr>
    
    Getter Method
    
    Signature ``DrivingMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilderDrivingValueMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrivingMethod`` 
    
    :param drivingMethod: 
    :type drivingMethod: :py:class:`NXOpen.Annotations.DrivingValueBuilderDrivingValueMethod` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ExpressionMode: DrivingValueBuilderDrivingExpressionMode = ...
    """
    Returns or sets  the expression mode 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilderDrivingExpressionMode` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExpressionMode`` 
    
    :param expressionMode: 
    :type expressionMode: :py:class:`NXOpen.Annotations.DrivingValueBuilderDrivingExpressionMode` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ExpressionName: str = ...
    """
    Returns or sets  the expression name 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExpressionName`` 
    
    :param expressionName: 
    :type expressionName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ExpressionValue: NXOpen.Expression = ...
    """
    Returns  the expression value 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Reference: bool = ...
    """
    Returns or sets  the reference dimension toggle used to create the dimension as reference instead of driving.  
    
    <hr>
    
    Getter Method
    
    Signature ``Reference`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reference`` 
    
    :param reference: 
    :type reference: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: DrivingValueBuilder = ...  # unknown typename


class AssociatedObjectsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    The associated objects builder is used to store objects which annotations are associated to   
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Nxobjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the associated NX objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Nxobjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Objects: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Objects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Annotations.AssociatedObjectsBuilder.Nxobjects` instead.
    
    License requirements: None.
    """
    Null: AssociatedObjectsBuilder = ...  # unknown typename


class RadiusDimension(BaseRadiusDimension):
    """
    Represents a radius dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.RadialDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: RadiusDimension = ...  # unknown typename


class SymmetricalCenterlineBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SymmetricalCenterlineBuilderTypes():
    """
    the valid types of Symmetrical Centerline 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromFace", "Centerline from face"
       "StartAndEnd", "Centerline from start and end point"
    """
    FromFace = 0  # SymmetricalCenterlineBuilderTypesMemberType
    StartAndEnd = 1  # SymmetricalCenterlineBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SymmetricalCenterlineBuilder(CenterlineBuilder):
    """
    Builder for creating Symmetrical Centerline.  
    
    It creates or edits Symmetrical Centerline 
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreateSymmetricalCenterlineBuilder`
    
    Default values.
    
    ============================  ================================================
    Property                      Value
    ============================  ================================================
    Settings.Extension            6.35 (millimeters part), 0.25 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Gap                  1.5875 (millimeters part), 0.0625 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.IndividualDistance   0 
    ----------------------------  ------------------------------------------------
    Settings.Size                 3.175 (millimeters part), 0.125 (inches part) 
    ----------------------------  ------------------------------------------------
    Settings.Width                Thin 
    ----------------------------  ------------------------------------------------
    Type                          FromFace 
    ============================  ================================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        the valid types of Symmetrical Centerline 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromFace", "Centerline from face"
           "StartAndEnd", "Centerline from start and end point"
        """
        FromFace = 0  # SymmetricalCenterlineBuilderTypesMemberType
        StartAndEnd = 1  # SymmetricalCenterlineBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    End: NXOpen.SelectNXObject = ...
    """
    Returns  the end object of Symmetrical Centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``End`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Face: NXOpen.SelectNXObject = ...
    """
    Returns  the face object of Symmetrical Centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit object
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Settings: SymmetricalCenterlineSettingsBuilder = ...
    """
    Returns  the settings builder object for Symmetrical Centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Settings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SymmetricalCenterlineSettingsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Start: NXOpen.SelectNXObject = ...
    """
    Returns  the start object of Symmetrical Centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Start`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: SymmetricalCenterlineBuilderTypes = ...
    """
    Returns or sets  the type of Symmetrical Centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SymmetricalCenterlineBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.SymmetricalCenterlineBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SymmetricalCenterlineBuilder = ...  # unknown typename


class AlignmentPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlignmentPosition():
    """
    Specifies the site location in the text box which
    can be used to locate a drafting object 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", " - "
       "TopCenter", " - "
       "TopRight", " - "
       "MidLeft", " - "
       "MidCenter", " - "
       "MidRight", " - "
       "BottomLeft", " - "
       "BottomCeneter", "Use :py:class:`NXOpen.Annotations.AlignmentPosition.BottomCenter <NXOpen.Annotations.AlignmentPosition>` instead"
       "BottomCenter", " - "
       "BottomRight", " - "
    """
    TopLeft = 1  # AlignmentPositionMemberType
    TopCenter = 2  # AlignmentPositionMemberType
    TopRight = 3  # AlignmentPositionMemberType
    MidLeft = 4  # AlignmentPositionMemberType
    MidCenter = 5  # AlignmentPositionMemberType
    MidRight = 6  # AlignmentPositionMemberType
    BottomLeft = 7  # AlignmentPositionMemberType
    BottomCeneter = 8  # AlignmentPositionMemberType
    BottomCenter = 8  # AlignmentPositionMemberType
    BottomRight = 9  # AlignmentPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineComponentLineTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineComponentLineType():
    """
    the line type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Extension", "extension line"
       "Leader", "leader line"
       "NarrowLeader", "narrow leader line"
       "Stub", "stub line"
       "DualBracket", "dual bracket"
       "Annotation", "annotation line"
       "Inspection", "inspection line"
       "SecondaryExtension", "secondary extension"
       "Tolerance", "tolerance line"
       "Jog", "jog line"
    """
    Extension = 0  # LineComponentLineTypeMemberType
    Leader = 1  # LineComponentLineTypeMemberType
    NarrowLeader = 2  # LineComponentLineTypeMemberType
    Stub = 3  # LineComponentLineTypeMemberType
    DualBracket = 4  # LineComponentLineTypeMemberType
    Annotation = 5  # LineComponentLineTypeMemberType
    Inspection = 6  # LineComponentLineTypeMemberType
    SecondaryExtension = 7  # LineComponentLineTypeMemberType
    Tolerance = 8  # LineComponentLineTypeMemberType
    Jog = 9  # LineComponentLineTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LineComponent(NXOpen.TransientObject):
    """
    Represents a single line in an annotation and can be queried 
    for information about that line.  
    
    This information includes the
    line type, the start point in absolute coordinates, and
    the end point in absolute coordinates.
    
    .. versionadded:: NX6.0.2
    """
    
    class LineType():
        """
        the line type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Extension", "extension line"
           "Leader", "leader line"
           "NarrowLeader", "narrow leader line"
           "Stub", "stub line"
           "DualBracket", "dual bracket"
           "Annotation", "annotation line"
           "Inspection", "inspection line"
           "SecondaryExtension", "secondary extension"
           "Tolerance", "tolerance line"
           "Jog", "jog line"
        """
        Extension = 0  # LineComponentLineTypeMemberType
        Leader = 1  # LineComponentLineTypeMemberType
        NarrowLeader = 2  # LineComponentLineTypeMemberType
        Stub = 3  # LineComponentLineTypeMemberType
        DualBracket = 4  # LineComponentLineTypeMemberType
        Annotation = 5  # LineComponentLineTypeMemberType
        Inspection = 6  # LineComponentLineTypeMemberType
        SecondaryExtension = 7  # LineComponentLineTypeMemberType
        Tolerance = 8  # LineComponentLineTypeMemberType
        Jog = 9  # LineComponentLineTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Free resources associated with the line component.  
        
        After this method
        is called, it is illegal to use the object.  In .NET, this method
        is automatically called when the object is deleted by the garbage
        collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    EndPoint: NXOpen.Point3d = ...
    """
    Returns  the line end point in absolute coordinates.  
    
    If the annotation is on a drawing, the end point is returned 
    in drawing space. If the annotation is on the model,
    the end point is returned in model space. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns:  the line end point in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Index: int = ...
    """
    Returns  the line index.  
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  the line index 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StartPoint: NXOpen.Point3d = ...
    """
    Returns  the line start point in absolute coordinates.  
    
    If the annotation is on a drawing, the start point is returned 
    in drawing space. If the annotation is on the model,
    the start point is returned in model space. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns:  the line start point in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Type: LineComponentLineType = ...
    """
    Returns  the line type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  the line type  
    :rtype: :py:class:`NXOpen.Annotations.LineComponentLineType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """


class PmiCenterMark(BaseCenterMark, IPmi):
    """
    Represents a PMI Center Mark class   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiCenterMarkBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiCenterMark = ...  # unknown typename


class AssociativityLineOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssociativityLineOption():
    """
    Specifies the associativity line option 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No line"
       "ExistingLine", "Existing line"
       "PointVector", "Vector from two points"
       "ExtensionLine", "Extension line"
       "Centerline", "Centerline -   
    
    Linear
    
    Bolt circle
    
    Circular
    
    "
       "Angle", "At angle"
       "HorizontalRight", "Horizontal right"
       "VerticalUp", "Vertical up"
       "HorizontalLeft", "Horizontal left"
       "VerticalDown", "Vertical down"
       "BaseLine", "Base line"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # AssociativityLineOptionMemberType
    ExistingLine = 1  # AssociativityLineOptionMemberType
    PointVector = 2  # AssociativityLineOptionMemberType
    ExtensionLine = 3  # AssociativityLineOptionMemberType
    Centerline = 4  # AssociativityLineOptionMemberType
    Angle = 5  # AssociativityLineOptionMemberType
    HorizontalRight = 6  # AssociativityLineOptionMemberType
    VerticalUp = 7  # AssociativityLineOptionMemberType
    HorizontalLeft = 8  # AssociativityLineOptionMemberType
    VerticalDown = 9  # AssociativityLineOptionMemberType
    BaseLine = 10  # AssociativityLineOptionMemberType
    Last = 11  # AssociativityLineOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SmashCustomSymbolBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.SmashCustomSymbolBuilder`.  
    
    This class allows selecting a custom symbol object to be smashed.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.CreateSmashCustomSymbolBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Symbol: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the selected symbol instance 
    
    <hr>
    
    Getter Method
    
    Signature ``Symbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: SmashCustomSymbolBuilder = ...  # unknown typename


class ExportControlBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ExportControl` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateExportControlBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetStringText(self) -> 'list[str]':
        """
        Returns the str text  
        
        Signature ``GetStringText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetStringText(self, stringText: 'list[str]') -> None:
        """
        Sets the str text 
        
        Signature ``SetStringText(stringText)`` 
        
        :param stringText: 
        :type stringText: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ExportControlBuilder = ...  # unknown typename


class TitleBlockCellBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TitleBlockCellBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.TitleBlockCollection.CreateCellBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def EditCell(self, lockStatus: bool, contentType: int, value: str, label: str, canChangeLockStatus: bool) -> None:
        """
        Edits the title block cell attributes such as lock status, content type, value, label etc.  
        
        Signature ``EditCell(lockStatus, contentType, value, label, canChangeLockStatus)`` 
        
        :param lockStatus:  cell lock status  
        :type lockStatus: bool 
        :param contentType:  cell content type  
        :type contentType: int 
        :param value:  cell value  
        :type value: str 
        :param label:  cell label  
        :type label: str 
        :param canChangeLockStatus:  can change lock status of cell  
        :type canChangeLockStatus: bool 
        
        .. versionadded:: NX10.0.2
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Cell: NXOpen.DisplayableObject = ...
    """
    Returns  the tabular note cell corresponding to this title block cell 
    
    <hr>
    
    Getter Method
    
    Signature ``Cell`` 
    
    :returns:  The tabular note cell corresponding to this title block cell  
    :rtype: :py:class:`NXOpen.DisplayableObject` 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    """
    EditableText: str = ...
    """
    Returns or sets  the editable text of the cell 
    
    <hr>
    
    Getter Method
    
    Signature ``EditableText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditableText`` 
    
    :param text: 
    :type text: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Label: str = ...
    """
    Returns or sets  the cell label 
    
    <hr>
    
    Getter Method
    
    Signature ``Label`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Label`` 
    
    :param label: 
    :type label: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Lock: bool = ...
    """
    Returns or sets  the lock status 
    
    <hr>
    
    Getter Method
    
    Signature ``Lock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Lock`` 
    
    :param lockStatus: 
    :type lockStatus: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Text: str = ...
    """
    Returns  the evaluated text of the cell.  
    
    If the cell cannot be evaluated then its raw text is returned. 
    
    <hr>
    
    Getter Method
    
    Signature ``Text`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    """
    Null: TitleBlockCellBuilder = ...  # unknown typename


class TitleBlock(Annotation):
    """
    Represents a :py:class:`NXOpen.Annotations.TitleBlock`   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DefineTitleBlockBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def DoUpdate(self) -> None:
        """
        Update Title Block 
        
        Signature ``DoUpdate()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetPreferences(self) -> TitleBlockPreferences:
        """
        Returns the lettering preferences for the title block  
        
        Signature ``GetPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.TitleBlockPreferences` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPreferences(self, prefs: TitleBlockPreferences) -> None:
        """
        Sets the preferences for the title block 
        
        Signature ``SetPreferences(prefs)`` 
        
        :param prefs: 
        :type prefs: :py:class:`NXOpen.Annotations.TitleBlockPreferences` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Null: TitleBlock = ...  # unknown typename


class PmiInteger(PmiAttribute):
    """
    Represents a Pmi Integer   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiIntegerBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiInteger = ...  # unknown typename


class BaseSurfaceFinishBuilderToleranceOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseSurfaceFinishBuilderToleranceOption():
    """
    the valid surface finish tolerance types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No tolerance"
       "EqualBilateral", "Equal bilateral"
       "Bilateral", "Bilateral"
       "UnilateralPlus", "Unilateral plus"
       "UnilateralMinus", "Unilateral minus"
       "PlusLimitTwoLines", "Plus limit two lines"
       "MinusLimitTwoLines", "Minus limit two lines"
       "PlusLimitOneLine", "Plus limit one line"
       "MinusLimitOneLine", "Minus limit one line"
    """
    NotSet = 0  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    EqualBilateral = 1  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    Bilateral = 2  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    UnilateralPlus = 3  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    UnilateralMinus = 4  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    PlusLimitTwoLines = 5  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    MinusLimitTwoLines = 6  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    PlusLimitOneLine = 7  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    MinusLimitOneLine = 8  # BaseSurfaceFinishBuilderToleranceOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseSurfaceFinishBuilderParanthesesTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseSurfaceFinishBuilderParanthesesType():
    """
    the valid parantheses types. This enum is deprecated.   
    
    .. deprecated::  NX8.0.0
       Use :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParenthesesType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Left", "Left"
       "Right", "Right"
       "Both", "Both"
    """
    NotSet = 0  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
    Left = 1  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
    Right = 2  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
    Both = 3  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseSurfaceFinishBuilderParenthesesTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseSurfaceFinishBuilderParenthesesType():
    """
    the valid parentheses types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Left", "Left"
       "Right", "Right"
       "Both", "Both"
    """
    NotSet = 0  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
    Left = 1  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
    Right = 2  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
    Both = 3  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseSurfaceFinishBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.BaseSurfaceFinish` builder   
    
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX7.5.0
    """
    
    class ToleranceOption():
        """
        the valid surface finish tolerance types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No tolerance"
           "EqualBilateral", "Equal bilateral"
           "Bilateral", "Bilateral"
           "UnilateralPlus", "Unilateral plus"
           "UnilateralMinus", "Unilateral minus"
           "PlusLimitTwoLines", "Plus limit two lines"
           "MinusLimitTwoLines", "Minus limit two lines"
           "PlusLimitOneLine", "Plus limit one line"
           "MinusLimitOneLine", "Minus limit one line"
        """
        NotSet = 0  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        EqualBilateral = 1  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        Bilateral = 2  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        UnilateralPlus = 3  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        UnilateralMinus = 4  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        PlusLimitTwoLines = 5  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        MinusLimitTwoLines = 6  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        PlusLimitOneLine = 7  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        MinusLimitOneLine = 8  # BaseSurfaceFinishBuilderToleranceOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParanthesesType():
        """
        the valid parantheses types. This enum is deprecated.   
        
        .. deprecated::  NX8.0.0
           Use :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParenthesesType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Left", "Left"
           "Right", "Right"
           "Both", "Both"
        """
        NotSet = 0  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
        Left = 1  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
        Right = 2  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
        Both = 3  # BaseSurfaceFinishBuilderParanthesesTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParenthesesType():
        """
        the valid parentheses types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Left", "Left"
           "Right", "Right"
           "Both", "Both"
        """
        NotSet = 0  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
        Left = 1  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
        Right = 2  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
        Both = 3  # BaseSurfaceFinishBuilderParenthesesTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Null: BaseSurfaceFinishBuilder = ...  # unknown typename


class SurfaceFinishBuilderStandardTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SurfaceFinishBuilderStandardType():
    """
    the valid types for pmi surface finish standards 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ansi", "ANSI"
       "Iso", "ISO"
       "Jis", "JIS"
       "Din", "DIN"
       "Iso2002", "ISO 2002"
       "Din2002", "DIN 2002"
       "Gb", "GB131-93"
       "Eskd", "ESKD"
    """
    Ansi = 0  # SurfaceFinishBuilderStandardTypeMemberType
    Iso = 1  # SurfaceFinishBuilderStandardTypeMemberType
    Jis = 2  # SurfaceFinishBuilderStandardTypeMemberType
    Din = 3  # SurfaceFinishBuilderStandardTypeMemberType
    Iso2002 = 4  # SurfaceFinishBuilderStandardTypeMemberType
    Din2002 = 5  # SurfaceFinishBuilderStandardTypeMemberType
    Gb = 6  # SurfaceFinishBuilderStandardTypeMemberType
    Eskd = 7  # SurfaceFinishBuilderStandardTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SurfaceFinishBuilderFinishTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SurfaceFinishBuilderFinishType():
    """
    the valid types for pmi finish type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Basic", "Basic"
       "Modifier", "Modifier"
       "ModifierAllAround", "Modifier, All Around"
       "MaterialRemovalRequired", "Material Removal Required"
       "ModifierMaterialRemovalRequired", "Modifier, Material Removal Required"
       "ModifierMaterialRemovalRequiredAllAround", "Modifier, Material Removal Required, All Around"
       "MaterialRemovalProhibited", "Material Removal Prohibited"
       "ModifierMaterialRemovalProhibited", "Modifier, Material Removal Prohibited"
       "ModifierMaterialRemovalProhibitedAllAround", "Modifier, Material Removal Prohibited, All Around"
    """
    Basic = 0  # SurfaceFinishBuilderFinishTypeMemberType
    Modifier = 1  # SurfaceFinishBuilderFinishTypeMemberType
    ModifierAllAround = 2  # SurfaceFinishBuilderFinishTypeMemberType
    MaterialRemovalRequired = 3  # SurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalRequired = 4  # SurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalRequiredAllAround = 5  # SurfaceFinishBuilderFinishTypeMemberType
    MaterialRemovalProhibited = 6  # SurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalProhibited = 7  # SurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalProhibitedAllAround = 8  # SurfaceFinishBuilderFinishTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SurfaceFinishBuilder(BaseSurfaceFinishBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.SurfaceFinish` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateSurfaceFinishBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class StandardType():
        """
        the valid types for pmi surface finish standards 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ansi", "ANSI"
           "Iso", "ISO"
           "Jis", "JIS"
           "Din", "DIN"
           "Iso2002", "ISO 2002"
           "Din2002", "DIN 2002"
           "Gb", "GB131-93"
           "Eskd", "ESKD"
        """
        Ansi = 0  # SurfaceFinishBuilderStandardTypeMemberType
        Iso = 1  # SurfaceFinishBuilderStandardTypeMemberType
        Jis = 2  # SurfaceFinishBuilderStandardTypeMemberType
        Din = 3  # SurfaceFinishBuilderStandardTypeMemberType
        Iso2002 = 4  # SurfaceFinishBuilderStandardTypeMemberType
        Din2002 = 5  # SurfaceFinishBuilderStandardTypeMemberType
        Gb = 6  # SurfaceFinishBuilderStandardTypeMemberType
        Eskd = 7  # SurfaceFinishBuilderStandardTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FinishType():
        """
        the valid types for pmi finish type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Basic", "Basic"
           "Modifier", "Modifier"
           "ModifierAllAround", "Modifier, All Around"
           "MaterialRemovalRequired", "Material Removal Required"
           "ModifierMaterialRemovalRequired", "Modifier, Material Removal Required"
           "ModifierMaterialRemovalRequiredAllAround", "Modifier, Material Removal Required, All Around"
           "MaterialRemovalProhibited", "Material Removal Prohibited"
           "ModifierMaterialRemovalProhibited", "Modifier, Material Removal Prohibited"
           "ModifierMaterialRemovalProhibitedAllAround", "Modifier, Material Removal Prohibited, All Around"
        """
        Basic = 0  # SurfaceFinishBuilderFinishTypeMemberType
        Modifier = 1  # SurfaceFinishBuilderFinishTypeMemberType
        ModifierAllAround = 2  # SurfaceFinishBuilderFinishTypeMemberType
        MaterialRemovalRequired = 3  # SurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalRequired = 4  # SurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalRequiredAllAround = 5  # SurfaceFinishBuilderFinishTypeMemberType
        MaterialRemovalProhibited = 6  # SurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalProhibited = 7  # SurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalProhibitedAllAround = 8  # SurfaceFinishBuilderFinishTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InheritFrom(self, inheritTag: SurfaceFinish) -> None:
        """
        The surface finish is inherited form existing surface finish.  
        
        Signature ``InheritFrom(inheritTag)`` 
        
        :param inheritTag: 
        :type inheritTag: :py:class:`NXOpen.Annotations.SurfaceFinish` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    A1: str = ...
    """
    Returns or sets  the a1 
    
    <hr>
    
    Getter Method
    
    Signature ``A1`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``A1`` 
    
    :param a1: 
    :type a1: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    A2: str = ...
    """
    Returns or sets  the a2 
    
    <hr>
    
    Getter Method
    
    Signature ``A2`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``A2`` 
    
    :param a2: 
    :type a2: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Angle: float = ...
    """
    Returns or sets  the angle
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    B: str = ...
    """
    Returns or sets  the b 
    
    <hr>
    
    Getter Method
    
    Signature ``B`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``B`` 
    
    :param b: 
    :type b: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    C: str = ...
    """
    Returns or sets  the c 
    
    <hr>
    
    Getter Method
    
    Signature ``C`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C`` 
    
    :param c: 
    :type c: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    D: str = ...
    """
    Returns or sets  the d 
    
    <hr>
    
    Getter Method
    
    Signature ``D`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``D`` 
    
    :param d: 
    :type d: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    E: str = ...
    """
    Returns or sets  the e 
    
    <hr>
    
    Getter Method
    
    Signature ``E`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``E`` 
    
    :param e: 
    :type e: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    F1: str = ...
    """
    Returns or sets  the f1 
    
    <hr>
    
    Getter Method
    
    Signature ``F1`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``F1`` 
    
    :param f1: 
    :type f1: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    F2: str = ...
    """
    Returns or sets  the f2 
    
    <hr>
    
    Getter Method
    
    Signature ``F2`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``F2`` 
    
    :param f2: 
    :type f2: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Finish: SurfaceFinishBuilderFinishType = ...
    """
    Returns or sets  the finish 
    
    <hr>
    
    Getter Method
    
    Signature ``Finish`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SurfaceFinishBuilderFinishType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Finish`` 
    
    :param finish: 
    :type finish: :py:class:`NXOpen.Annotations.SurfaceFinishBuilderFinishType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InvertSymbol: bool = ...
    """
    Returns or sets  the invert symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``InvertSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InvertSymbol`` 
    
    :param invertSymbol: 
    :type invertSymbol: bool 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """
    InvertText: bool = ...
    """
    Returns or sets  the invert text flag
    
    <hr>
    
    Getter Method
    
    Signature ``InvertText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InvertText`` 
    
    :param invertText: 
    :type invertText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerTolerance: float = ...
    """
    Returns or sets  the lower tolerance applicable for all the tolerance types other than Bilateral
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerTolerance`` 
    
    :param lowerTolerance: 
    :type lowerTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Parantheses: BaseSurfaceFinishBuilderParanthesesType = ...
    """
    Returns or sets  the parantheses.  
    
    This method is deprecated.
    
    <hr>
    
    Getter Method
    
    Signature ``Parantheses`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParanthesesType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`NXOpen.Annotations.SurfaceFinishBuilder.Parentheses`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parantheses`` 
    
    :param paranthesesType: 
    :type paranthesesType: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParanthesesType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`NXOpen.Annotations.SurfaceFinishBuilder.Parentheses`` instead.
    
    License requirements: None.
    """
    Parentheses: BaseSurfaceFinishBuilderParenthesesType = ...
    """
    Returns or sets  the parentheses
    
    <hr>
    
    Getter Method
    
    Signature ``Parentheses`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParenthesesType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parentheses`` 
    
    :param parenthesesType: 
    :type parenthesesType: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParenthesesType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SingleRoughnessValue: bool = ...
    """
    Returns or sets  the single roughness value
    
    <hr>
    
    Getter Method
    
    Signature ``SingleRoughnessValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SingleRoughnessValue`` 
    
    :param singleRoughnessValue: 
    :type singleRoughnessValue: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Standard: SurfaceFinishBuilderStandardType = ...
    """
    Returns or sets  the standard 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SurfaceFinishBuilderStandardType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Annotations.SurfaceFinishBuilderStandardType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance in case of bilateral tolerance type otherwise upper tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToleranceType: BaseSurfaceFinishBuilderToleranceOption = ...
    """
    Returns or sets  the tolerance type is applicable only where Material Removal is required
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderToleranceOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param toleranceType: 
    :type toleranceType: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderToleranceOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SurfaceFinishBuilder = ...  # unknown typename


class DualDimensionPlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DualDimensionPlacement():
    """
    Specifies the dual dimension placement relative to the primary dimension 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Below", "Specifies dual dimension below primary dimension"
       "After", "Specifies dual dimension after primary dimension"
       "Above", "Specifies dual dimension above primary dimension"
       "Before", "Specifies dual dimension before primary dimension"
       "NotSet", "Specifies no dual dimension"
       "Last", "Last enum value. Should not be used."
    """
    Below = 0  # DualDimensionPlacementMemberType
    After = 1  # DualDimensionPlacementMemberType
    Above = 2  # DualDimensionPlacementMemberType
    Before = 3  # DualDimensionPlacementMemberType
    NotSet = 4  # DualDimensionPlacementMemberType
    Last = 5  # DualDimensionPlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiDatumTargetBuilder(DatumTargetBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreatePmiDatumTargetBuilder`
    
    Default values.
    
    ====================  =======================================
    Property              Value
    ====================  =======================================
    Height.Value          10 (millimeters part), 1 (inches part) 
    --------------------  ---------------------------------------
    InnerDiameter.Value   1 (millimeters part), .1 (inches part) 
    --------------------  ---------------------------------------
    OuterDiameter.Value   10 (millimeters part), 1 (inches part) 
    --------------------  ---------------------------------------
    Width.Value           10 (millimeters part), 1 (inches part) 
    ====================  =======================================
    
    .. versionadded:: NX6.0.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RegionSelection: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the region selection 
    
    <hr>
    
    Getter Method
    
    Signature ``RegionSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiDatumTargetBuilder = ...  # unknown typename


class LineWeldSideData(NXOpen.TransientObject):
    """
    Represents line weld side data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    DepthRootOpeningNumberOfWelds: str = ...
    """
    Returns or sets  the depth or root opening or number of welds as the case may be 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthRootOpeningNumberOfWelds`` 
    
    :returns:  Depth or root opening or number of welds  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DepthRootOpeningNumberOfWelds`` 
    
    :param depthRootOpeningNumWeld:  New depth or root opening or number of welds  
    :type depthRootOpeningNumWeld: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FinishMethod: FinishMethod = ...
    """
    Returns or sets  the weld finish method 
    
    <hr>
    
    Getter Method
    
    Signature ``FinishMethod`` 
    
    :returns:  Finish method  
    :rtype: :py:class:`NXOpen.Annotations.FinishMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FinishMethod`` 
    
    :param finishMethod:  New finish method  
    :type finishMethod: :py:class:`NXOpen.Annotations.FinishMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    GrooveAngle: str = ...
    """
    Returns or sets  the groove angle 
    
    <hr>
    
    Getter Method
    
    Signature ``GrooveAngle`` 
    
    :returns:  Groove angle  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GrooveAngle`` 
    
    :param grooveAngle:  New groove angle  
    :type grooveAngle: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LengthPitch: str = ...
    """
    Returns or sets  the weld length and pitch  
    
    <hr>
    
    Getter Method
    
    Signature ``LengthPitch`` 
    
    :returns:  Weld length and pitch  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LengthPitch`` 
    
    :param lengthPitch:  New weld length and pitch  
    :type lengthPitch: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Size: str = ...
    """
    Returns or sets  the weld size 
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  Weld size  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size:  New weld size  
    :type size: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SizeLetterCode: SizeLetterCode = ...
    """
    Returns or sets  the weld size letter code (ISO and DIN only) 
    
    <hr>
    
    Getter Method
    
    Signature ``SizeLetterCode`` 
    
    :returns:  Size letter code  
    :rtype: :py:class:`NXOpen.Annotations.SizeLetterCode` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SizeLetterCode`` 
    
    :param sizeLetterCode:  New size letter code  
    :type sizeLetterCode: :py:class:`NXOpen.Annotations.SizeLetterCode` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SupplementarySymbol: SupplementarySymbol = ...
    """
    Returns or sets  the weld supplementary symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``SupplementarySymbol`` 
    
    :returns:  Supplementary weld symbol  
    :rtype: :py:class:`NXOpen.Annotations.SupplementarySymbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SupplementarySymbol`` 
    
    :param supplementarySymbol:  New supplementary weld symbol  
    :type supplementarySymbol: :py:class:`NXOpen.Annotations.SupplementarySymbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Symbol: Symbol = ...
    """
    Returns or sets  the elementary weld symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``Symbol`` 
    
    :returns:  Weld symbol  
    :rtype: :py:class:`NXOpen.Annotations.Symbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Symbol`` 
    
    :param symbol:  New weld symbol  
    :type symbol: :py:class:`NXOpen.Annotations.Symbol` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class FcfData(NXOpen.TransientObject):
    """
    Represents FCF data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFrameData(self) -> FcfFrameData:
        """
        Returns the FCF frames data.  
        
        Signature ``GetFrameData()`` 
        
        :returns:  FCF frame data  
        :rtype: :py:class:`NXOpen.Annotations.FcfFrameData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFrameData(self, frameData: FcfFrameData) -> None:
        """
        Sets the FCF frames data.  
        
        Signature ``SetFrameData(frameData)`` 
        
        :param frameData:  New FCF frame data  
        :type frameData: :py:class:`NXOpen.Annotations.FcfFrameData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSimpleDraftingAidPreferences(self) -> SimpleDraftingAidPreferences:
        """
        Returns the FCF preferences.  
        
        Signature ``GetSimpleDraftingAidPreferences()`` 
        
        :returns:  FCF preferences  
        :rtype: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSimpleDraftingAidPreferences(self, preferences: SimpleDraftingAidPreferences) -> None:
        """
        Sets the FCF preferences.  
        
        Signature ``SetSimpleDraftingAidPreferences(preferences)`` 
        
        :param preferences:  New FCF preferences  
        :type preferences: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class DiameterDimension(BaseDiameterDimension):
    """
    Represents a diameter dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.RadialDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: DiameterDimension = ...  # unknown typename


class HoleTableSettingsHoleFiltersBuilderScopeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsHoleFiltersBuilderScopeType():
    """
    the Scope enum 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OneSidedHoles", "One-sided Holes"
       "TwoSidedHoles", "Two-sided Holes"
    """
    OneSidedHoles = 0  # HoleTableSettingsHoleFiltersBuilderScopeTypeMemberType
    TwoSidedHoles = 1  # HoleTableSettingsHoleFiltersBuilderScopeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsHoleFiltersBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleTableSettingsHoleFiltersBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class ScopeType():
        """
        the Scope enum 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OneSidedHoles", "One-sided Holes"
           "TwoSidedHoles", "Two-sided Holes"
        """
        OneSidedHoles = 0  # HoleTableSettingsHoleFiltersBuilderScopeTypeMemberType
        TwoSidedHoles = 1  # HoleTableSettingsHoleFiltersBuilderScopeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BlindHoles: bool = ...
    """
    Returns or sets  the blind holes 
    
    <hr>
    
    Getter Method
    
    Signature ``BlindHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlindHoles`` 
    
    :param blindHoles: 
    :type blindHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CombinationHoles: bool = ...
    """
    Returns or sets  the combination holes 
    
    <hr>
    
    Getter Method
    
    Signature ``CombinationHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CombinationHoles`` 
    
    :param combinationHoles: 
    :type combinationHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CounterboredHoles: bool = ...
    """
    Returns or sets  the counterbored holes 
    
    <hr>
    
    Getter Method
    
    Signature ``CounterboredHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CounterboredHoles`` 
    
    :param counterboredHoles: 
    :type counterboredHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CountersinkAngle: float = ...
    """
    Returns or sets  the countersink angle 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersinkAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CountersinkAngle`` 
    
    :param countersinkAngle: 
    :type countersinkAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CountersunkHoles: bool = ...
    """
    Returns or sets  the countersunk holes 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersunkHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CountersunkHoles`` 
    
    :param countersunkHoles: 
    :type countersunkHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DraftingSketchCircles: bool = ...
    """
    Returns or sets  the drafting sketch circles 
    
    <hr>
    
    Getter Method
    
    Signature ``DraftingSketchCircles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DraftingSketchCircles`` 
    
    :param draftingSketchCircles: 
    :type draftingSketchCircles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludePartialHoles: bool = ...
    """
    Returns or sets  the include partial holes 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludePartialHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludePartialHoles`` 
    
    :param includePartialHoles: 
    :type includePartialHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ModelingSketchCircles: bool = ...
    """
    Returns or sets  the modeling sketch circles 
    
    <hr>
    
    Getter Method
    
    Signature ``ModelingSketchCircles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelingSketchCircles`` 
    
    :param modelingSketchCircles: 
    :type modelingSketchCircles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    NoseAngle: float = ...
    """
    Returns or sets  the nose angle 
    
    <hr>
    
    Getter Method
    
    Signature ``NoseAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoseAngle`` 
    
    :param noseAngle: 
    :type noseAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PartialHoleAngle: float = ...
    """
    Returns or sets  the partial hole angle 
    
    <hr>
    
    Getter Method
    
    Signature ``PartialHoleAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartialHoleAngle`` 
    
    :param partialHoleAngle: 
    :type partialHoleAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scope: HoleTableSettingsHoleFiltersBuilderScopeType = ...
    """
    Returns or sets  the scope 
    
    <hr>
    
    Getter Method
    
    Signature ``Scope`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsHoleFiltersBuilderScopeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scope`` 
    
    :param scope: 
    :type scope: :py:class:`NXOpen.Annotations.HoleTableSettingsHoleFiltersBuilderScopeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ThreadedHoles: bool = ...
    """
    Returns or sets  the threaded holes 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadedHoles`` 
    
    :param threadedHoles: 
    :type threadedHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ThroughHoles: bool = ...
    """
    Returns or sets  the through holes 
    
    <hr>
    
    Getter Method
    
    Signature ``ThroughHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThroughHoles`` 
    
    :param throughHoles: 
    :type throughHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    WireEDMStartHoles: bool = ...
    """
    Returns or sets  the wire EDM start holes 
    
    <hr>
    
    Getter Method
    
    Signature ``WireEDMStartHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WireEDMStartHoles`` 
    
    :param wireEDMStartHoles: 
    :type wireEDMStartHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: HoleTableSettingsHoleFiltersBuilder = ...  # unknown typename


class ArbitraryTarget(DatumTarget, IArbitraryTarget):
    """
    Represents an arbitrary datum target.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    UpperText: str = ...
    """
    Returns or sets  the target upper text.  
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperText`` 
    
    :returns:  Upper text  
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperText`` 
    
    :param upperText:  Upper text  
    :type upperText: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: ArbitraryTarget = ...  # unknown typename


class EditLeaderBuilder(NXOpen.Builder):
    """
    Represents a builder that provides an interface to adding and editing leaders
    to table entities   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateEditLeaderBuilder`
    
    .. versionadded:: NX6.0.1
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    """
    Origin: OriginBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.OriginBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    """
    Null: EditLeaderBuilder = ...  # unknown typename


class DraftingPointTarget(DraftingDatumTarget, IPointTarget):
    """
    Represents drafting point datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    PointCoordinates: NXOpen.Point3d = ...
    """
    Returns  the target point coordinates 
    
    <hr>
    
    Getter Method
    
    Signature ``PointCoordinates`` 
    
    :returns:  Point coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Null: DraftingPointTarget = ...  # unknown typename


class Centerline2d(Centerline):
    """
    Represents a 2D centerline   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.Centerline2dBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Centerline2d = ...  # unknown typename


class HoleTableSettingsContentBuilderContentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsContentBuilderContent():
    """
    Represents Content options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Diameter", "Diameter"
       "DiameterFit", "DiameterFit"
       "Depth", "Depth"
       "DepthFit", "DepthFit"
       "DrillType", "DrillType"
       "DrillDirection", "DrillDirection"
    """
    Diameter = 0  # HoleTableSettingsContentBuilderContentMemberType
    DiameterFit = 1  # HoleTableSettingsContentBuilderContentMemberType
    Depth = 2  # HoleTableSettingsContentBuilderContentMemberType
    DepthFit = 3  # HoleTableSettingsContentBuilderContentMemberType
    DrillType = 4  # HoleTableSettingsContentBuilderContentMemberType
    DrillDirection = 5  # HoleTableSettingsContentBuilderContentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsContentBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleTableSettingsContentBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class Content():
        """
        Represents Content options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Diameter", "Diameter"
           "DiameterFit", "DiameterFit"
           "Depth", "Depth"
           "DepthFit", "DepthFit"
           "DrillType", "DrillType"
           "DrillDirection", "DrillDirection"
        """
        Diameter = 0  # HoleTableSettingsContentBuilderContentMemberType
        DiameterFit = 1  # HoleTableSettingsContentBuilderContentMemberType
        Depth = 2  # HoleTableSettingsContentBuilderContentMemberType
        DepthFit = 3  # HoleTableSettingsContentBuilderContentMemberType
        DrillType = 4  # HoleTableSettingsContentBuilderContentMemberType
        DrillDirection = 5  # HoleTableSettingsContentBuilderContentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetContentOrder(self) -> 'list[HoleTableSettingsContentBuilderContent]':
        """
        Returns content order  
        
        Signature ``GetContentOrder()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.HoleTableSettingsContentBuilderContent` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContentOrder(self, contentOrder: 'list[HoleTableSettingsContentBuilderContent]') -> None:
        """
        Sets content order 
        
        Signature ``SetContentOrder(contentOrder)`` 
        
        :param contentOrder: 
        :type contentOrder: list of :py:class:`NXOpen.Annotations.HoleTableSettingsContentBuilderContent` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: HoleTableSettingsContentBuilder = ...  # unknown typename


class DraftingLineTarget(DraftingDatumTarget, ILineTarget):
    """
    Represents a drafting line datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.DraftingDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    StartPointCoordinates: NXOpen.Point3d = ...
    """
    Returns  the target start point coordinates 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPointCoordinates`` 
    
    :returns:  Start point coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    EndPointCoordinates: NXOpen.Point3d = ...
    """
    Returns  the target end point coordinates 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPointCoordinates`` 
    
    :returns:  End point coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Null: DraftingLineTarget = ...  # unknown typename


class ChamferFormMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChamferForm():
    """
    Specifies the chamfer dimension form 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Symbol", "C5"
       "Size", "5 x 5"
       "SizeAngle", "5 x 45"
       "AngleSize", "45 x 5"
       "Last", "Last enum value. Should not be used."
    """
    Symbol = 0  # ChamferFormMemberType
    Size = 1  # ChamferFormMemberType
    SizeAngle = 2  # ChamferFormMemberType
    AngleSize = 3  # ChamferFormMemberType
    Last = 4  # ChamferFormMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypes():
    """
    Lists the search pmi surface finish type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Open", "open"
       "OpenAndModifier", "open and modifier"
       "OpenAndModifierAndAllAround", "opem and modifier and all around"
       "Required", "required"
       "RequiredAndModifier", "required and modifier"
       "RequiredAndModifierAndAllAround", "required and modifier and all around"
       "Prohibited", "prohibited"
       "ProhibitedAndModifier", "prohibiter and modifier"
       "ProhibitedAndModifierAndAllAround", "prohibiter and modifier and all around"
    """
    Open = 0  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    OpenAndModifier = 1  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    OpenAndModifierAndAllAround = 2  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    Required = 3  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    RequiredAndModifier = 4  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    RequiredAndModifierAndAllAround = 5  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    Prohibited = 6  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    ProhibitedAndModifier = 7  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    ProhibitedAndModifierAndAllAround = 8  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaSurfaceFinishBuilderToleranceTypeOptions():
    """
    Lists the Tolerance type of surface finish value
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoTolerance", "no tolerance"
       "EqualBilateral", "equal bilateral"
       "Bilateral", "bilateral"
       "UnilateralPlus", "unilateral +"
       "UnilateralMinus", "unilateral -"
       "PlusLimit2Lines", "+ limit 2 lines"
       "MinusLimit2Lines", "- limit 2 lines"
       "PlusLimit1Line", "+ limit 1 line"
       "NegposlimitMinusLimit1Line", "negposlimit- limit 1 line"
    """
    NoTolerance = 0  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    EqualBilateral = 1  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    Bilateral = 2  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    UnilateralPlus = 3  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    UnilateralMinus = 4  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    PlusLimit2Lines = 5  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    MinusLimit2Lines = 6  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    PlusLimit1Line = 7  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    NegposlimitMinusLimit1Line = 8  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaSurfaceFinishBuilder(NXOpen.Builder):
    """
    Represents SearchCriteriaSurfaceFinishBuilder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SearchModelViewCollection.CreateSearchCriteriaSurfaceFinishBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class SurfaceFinishTypes():
        """
        Lists the search pmi surface finish type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Open", "open"
           "OpenAndModifier", "open and modifier"
           "OpenAndModifierAndAllAround", "opem and modifier and all around"
           "Required", "required"
           "RequiredAndModifier", "required and modifier"
           "RequiredAndModifierAndAllAround", "required and modifier and all around"
           "Prohibited", "prohibited"
           "ProhibitedAndModifier", "prohibiter and modifier"
           "ProhibitedAndModifierAndAllAround", "prohibiter and modifier and all around"
        """
        Open = 0  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        OpenAndModifier = 1  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        OpenAndModifierAndAllAround = 2  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        Required = 3  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        RequiredAndModifier = 4  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        RequiredAndModifierAndAllAround = 5  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        Prohibited = 6  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        ProhibitedAndModifier = 7  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        ProhibitedAndModifierAndAllAround = 8  # SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToleranceTypeOptions():
        """
        Lists the Tolerance type of surface finish value
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoTolerance", "no tolerance"
           "EqualBilateral", "equal bilateral"
           "Bilateral", "bilateral"
           "UnilateralPlus", "unilateral +"
           "UnilateralMinus", "unilateral -"
           "PlusLimit2Lines", "+ limit 2 lines"
           "MinusLimit2Lines", "- limit 2 lines"
           "PlusLimit1Line", "+ limit 1 line"
           "NegposlimitMinusLimit1Line", "negposlimit- limit 1 line"
        """
        NoTolerance = 0  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        EqualBilateral = 1  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        Bilateral = 2  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        UnilateralPlus = 3  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        UnilateralMinus = 4  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        PlusLimit2Lines = 5  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        MinusLimit2Lines = 6  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        PlusLimit1Line = 7  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        NegposlimitMinusLimit1Line = 8  # SearchCriteriaSurfaceFinishBuilderToleranceTypeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ByCutoff: bool = ...
    """
    Returns or sets  the cutoff toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByCutoff`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByCutoff`` 
    
    :param cutoff: 
    :type cutoff: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByLaySymbol: bool = ...
    """
    Returns or sets  the lay symbol toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByLaySymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByLaySymbol`` 
    
    :param laySymbol: 
    :type laySymbol: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByLowerText: bool = ...
    """
    Returns or sets  the lower text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByLowerText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByLowerText`` 
    
    :param lowerText: 
    :type lowerText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByLowerTolerance: bool = ...
    """
    Returns or sets  the lower tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByLowerTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByLowerTolerance`` 
    
    :param lowerTolerance: 
    :type lowerTolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByMachining: bool = ...
    """
    Returns or sets  the machining toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByMachining`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByMachining`` 
    
    :param machining: 
    :type machining: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByMachiningToleranceType: bool = ...
    """
    Returns or sets  the tolerance type toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByMachiningToleranceType`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByMachiningToleranceType`` 
    
    :param byMachiningToleranceType: 
    :type byMachiningToleranceType: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByProductionProcess: bool = ...
    """
    Returns or sets  the production process toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByProductionProcess`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByProductionProcess`` 
    
    :param productionProcess: 
    :type productionProcess: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByRoughness: bool = ...
    """
    Returns or sets  the roughness toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByRoughness`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByRoughness`` 
    
    :param roughness: 
    :type roughness: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BySecondaryRoughness: bool = ...
    """
    Returns or sets  the secondary roughness toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``BySecondaryRoughness`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BySecondaryRoughness`` 
    
    :param secondaryRoughness: 
    :type secondaryRoughness: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BySurfaceFinishType: bool = ...
    """
    Returns or sets  the surface finish type toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``BySurfaceFinishType`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BySurfaceFinishType`` 
    
    :param surfaceFinishType: 
    :type surfaceFinishType: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByTertiaryRoughness: bool = ...
    """
    Returns or sets  the option to decide if searching the surface finish by the tertiary roughness 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTertiaryRoughness`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTertiaryRoughness`` 
    
    :param tertiaryRoughness: 
    :type tertiaryRoughness: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ByTolerance: bool = ...
    """
    Returns or sets  the tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByTolerance`` 
    
    :param tolerance: 
    :type tolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByUpperText: bool = ...
    """
    Returns or sets  the upper text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByUpperText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByUpperText`` 
    
    :param upperText: 
    :type upperText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByUpperTolerance: bool = ...
    """
    Returns or sets  the upper tolerance toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByUpperTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByUpperTolerance`` 
    
    :param upperTolerance: 
    :type upperTolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByWavinessText: bool = ...
    """
    Returns or sets  the waviness text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByWavinessText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByWavinessText`` 
    
    :param wavinessText: 
    :type wavinessText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CutoffText: str = ...
    """
    Returns or sets  the cutoff text 
    
    <hr>
    
    Getter Method
    
    Signature ``CutoffText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutoffText`` 
    
    :param cutoffText: 
    :type cutoffText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CutoffType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the cutoff enum 
    
    <hr>
    
    Getter Method
    
    Signature ``CutoffType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutoffType`` 
    
    :param cutoffType: 
    :type cutoffType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LaySymbolText: str = ...
    """
    Returns or sets  the lay symbol text 
    
    <hr>
    
    Getter Method
    
    Signature ``LaySymbolText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LaySymbolText`` 
    
    :param laySymbolText: 
    :type laySymbolText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LaySymbolType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the lay symbol enum 
    
    <hr>
    
    Getter Method
    
    Signature ``LaySymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LaySymbolType`` 
    
    :param laySymbolType: 
    :type laySymbolType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerTextText: str = ...
    """
    Returns or sets  the lower text text 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTextText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerTextText`` 
    
    :param lowerTextText: 
    :type lowerTextText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the lower text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerTextType`` 
    
    :param lowerTextType: 
    :type lowerTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerToleranceType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the lower tolerance enum 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceType`` 
    
    :param lowerToleranceType: 
    :type lowerToleranceType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerToleranceValue: float = ...
    """
    Returns or sets  the lower tolerance value 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceValue`` 
    
    :param lowerToleranceValue: 
    :type lowerToleranceValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MachiningText: str = ...
    """
    Returns or sets  the machining text 
    
    <hr>
    
    Getter Method
    
    Signature ``MachiningText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MachiningText`` 
    
    :param machiningText: 
    :type machiningText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MachiningToleranceType: SearchCriteriaSurfaceFinishBuilderToleranceTypeOptions = ...
    """
    Returns or sets  the tolerance type enum 
    
    <hr>
    
    Getter Method
    
    Signature ``MachiningToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaSurfaceFinishBuilderToleranceTypeOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MachiningToleranceType`` 
    
    :param machiningToleranceType: 
    :type machiningToleranceType: :py:class:`NXOpen.Annotations.SearchCriteriaSurfaceFinishBuilderToleranceTypeOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MachiningType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the machining enum 
    
    <hr>
    
    Getter Method
    
    Signature ``MachiningType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MachiningType`` 
    
    :param machiningType: 
    :type machiningType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProductionProcessText: str = ...
    """
    Returns or sets  the production process text 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductionProcessText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProductionProcessText`` 
    
    :param productionProcessText: 
    :type productionProcessText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProductionProcessType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the production process enum 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductionProcessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProductionProcessType`` 
    
    :param productionProcessType: 
    :type productionProcessType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RoughnessText: str = ...
    """
    Returns or sets  the roughness text 
    
    <hr>
    
    Getter Method
    
    Signature ``RoughnessText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoughnessText`` 
    
    :param roughnessText: 
    :type roughnessText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RoughnessType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the roughness enum 
    
    <hr>
    
    Getter Method
    
    Signature ``RoughnessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoughnessType`` 
    
    :param roughnessType: 
    :type roughnessType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SecondaryRoughnessText: str = ...
    """
    Returns or sets  the secondary roughness text 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryRoughnessText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryRoughnessText`` 
    
    :param secondaryRoughnessText: 
    :type secondaryRoughnessText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SecondaryRoughnessType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the secondary roughness enum 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryRoughnessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryRoughnessType`` 
    
    :param secondaryRoughnessType: 
    :type secondaryRoughnessType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SurfaceFinishType: SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypes = ...
    """
    Returns or sets  the surface finish type 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceFinishType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceFinishType`` 
    
    :param surfaceFinishType: 
    :type surfaceFinishType: :py:class:`NXOpen.Annotations.SearchCriteriaSurfaceFinishBuilderSurfaceFinishTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TertiaryRoughnessText: str = ...
    """
    Returns or sets  the tertiary roughness text 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryRoughnessText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TertiaryRoughnessText`` 
    
    :param tertiaryRoughnessText: 
    :type tertiaryRoughnessText: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TertiaryRoughnessType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the tertiary roughness enum 
    
    <hr>
    
    Getter Method
    
    Signature ``TertiaryRoughnessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TertiaryRoughnessType`` 
    
    :param tertiaryRoughnessType: 
    :type tertiaryRoughnessType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ToleranceType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the tolerance enum 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param toleranceType: 
    :type toleranceType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToleranceValue: float = ...
    """
    Returns or sets  the tolerance value 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceValue`` 
    
    :param toleranceValue: 
    :type toleranceValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperTextText: str = ...
    """
    Returns or sets  the upper text text 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperTextText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperTextText`` 
    
    :param upperTextText: 
    :type upperTextText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the upper text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperTextType`` 
    
    :param upperTextType: 
    :type upperTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperToleranceType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the upper tolerance enum 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceType`` 
    
    :param upperToleranceType: 
    :type upperToleranceType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperToleranceValue: float = ...
    """
    Returns or sets  the upper tolerance value 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceValue`` 
    
    :param upperToleranceValue: 
    :type upperToleranceValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WavinessText: str = ...
    """
    Returns or sets  the waviness text 
    
    <hr>
    
    Getter Method
    
    Signature ``WavinessText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WavinessText`` 
    
    :param wavinessText: 
    :type wavinessText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WavinessTextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the waviness text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``WavinessTextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WavinessTextType`` 
    
    :param wavinessTextType: 
    :type wavinessTextType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SearchCriteriaSurfaceFinishBuilder = ...  # unknown typename


class TextWithEditControlsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.TextWithEditControlsBuilder` which collects
    internationalized text strings from the user for processing on an annotation object.  
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX6.0.0
    """
    
    def GetEditorText(self) -> 'list[str]':
        """
        Text from the editor text  
        
        Signature ``GetEditorText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetEditorText(self, text: 'list[str]') -> None:
        """
        Text into the editor text 
        
        Signature ``SetEditorText(text)`` 
        
        :param text: 
        :type text: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    TextBlock: TextWithSymbolsBuilder = ...
    """
    Returns  the text with symbols builder 
    
    <hr>
    
    Getter Method
    
    Signature ``TextBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextWithSymbolsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: TextWithEditControlsBuilder = ...  # unknown typename


class FitDisplayStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FitDisplayStyle():
    """
    Specifies the limit and fit display style 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FitSymbols", "Display only the grade and deviation"
       "FitSymbolsAndLimits", "Display grade, deviation, and limit values"
       "FitSymbolsAndTolerances", "Display grade, deviation, and tolerance values"
       "TolerancesOnly", "Display the tolerance values only"
    """
    FitSymbols = 0  # FitDisplayStyleMemberType
    FitSymbolsAndLimits = 1  # FitDisplayStyleMemberType
    FitSymbolsAndTolerances = 2  # FitDisplayStyleMemberType
    TolerancesOnly = 3  # FitDisplayStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class NarrowDimensionPreferences(NXOpen.TransientObject):
    """
    Represents narrow dimension preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    DimensionArrowheadType: ArrowheadType = ...
    """
    Returns or sets  the dimension arrowhead type when no space for normal arrowheads  
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionArrowheadType`` 
    
    :returns:  Arrowhead type  
    :rtype: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionArrowheadType`` 
    
    :param type:  New arrowhead type  
    :type type: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DimensionDisplayOption: NarrowDisplayOption = ...
    """
    Returns or sets  the dimension display option 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionDisplayOption`` 
    
    :returns:  Display option  
    :rtype: :py:class:`NXOpen.Annotations.NarrowDisplayOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionDisplayOption`` 
    
    :param option:  New display option  
    :type option: :py:class:`NXOpen.Annotations.NarrowDisplayOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DimensionLeaderAngle: float = ...
    """
    Returns or sets  the dimension leader angle 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionLeaderAngle`` 
    
    :returns:  Leader angle  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionLeaderAngle`` 
    
    :param leaderAngle:  New leader angle  
    :type leaderAngle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DimensionTextOffset: float = ...
    """
    Returns or sets  the dimension text offset 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextOffset`` 
    
    :returns:  Text offset  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextOffset`` 
    
    :param textOffset:  New text offset  
    :type textOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DimensionTextOrientation: NarrowTextOrientation = ...
    """
    Returns or sets  the dimension text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionTextOrientation`` 
    
    :returns:  Text orientation  
    :rtype: :py:class:`NXOpen.Annotations.NarrowTextOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionTextOrientation`` 
    
    :param textOrientation:  New text orientation  
    :type textOrientation: :py:class:`NXOpen.Annotations.NarrowTextOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class PmiTableSectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.PmiTableSection` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePmiTableBuilder(self, section: PmiTableSection) -> PmiTableBuilder:
        """
        If None create a new PMI table section, otherwise edit existing PMI table section 
        
        Signature ``CreatePmiTableBuilder(section)`` 
        
        :param section:  PMI table section  
        :type section: :py:class:`NXOpen.Annotations.PmiTableSection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiTableBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> PmiTableSection:
        """
        Finds the PMI table section with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the PMI table section to be found  
        :type journalIdentifier: str 
        :returns:  PMI table section with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.PmiTableSection` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    


class LeaderAlignmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderAlignment():
    """
    Specifies the leader's alignment.
    For more information, see the Leader Text Alignment section of Drafting Help. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Null", "Should not be used"
       "Top", " - "
       "Middle", " - "
       "Bottom", " - "
       "TextBottomMax", "extend leader to maximum"
       "TextBottomMaxUnderline", "extend leader to maximum, underline all lines"
       "TextBottom", " - "
       "TextBottomUnderline", "underline all lines"
       "TextTopMax", "extend leader to maximum"
       "TextTopMaxUnderline", "extend leader to maximum, underline all lines"
       "TextTop", " - "
       "TextTopUnderline", "underline all lines"
       "Last", "Last enum value. Should not be used."
    """
    Null = -1  # LeaderAlignmentMemberType
    Top = 0  # LeaderAlignmentMemberType
    Middle = 1  # LeaderAlignmentMemberType
    Bottom = 2  # LeaderAlignmentMemberType
    TextBottomMax = 3  # LeaderAlignmentMemberType
    TextBottomMaxUnderline = 4  # LeaderAlignmentMemberType
    TextBottom = 5  # LeaderAlignmentMemberType
    TextBottomUnderline = 6  # LeaderAlignmentMemberType
    TextTopMax = 7  # LeaderAlignmentMemberType
    TextTopMaxUnderline = 8  # LeaderAlignmentMemberType
    TextTop = 9  # LeaderAlignmentMemberType
    TextTopUnderline = 10  # LeaderAlignmentMemberType
    Last = 11  # LeaderAlignmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Fcf(BaseFcf, IPmi, IAppendedText):
    """
    Represents an FCF   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiFeatureControlFrameBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAppendedText(self) -> AppendedText:
        """
        Returns the appended text  
        
        Signature ``GetAppendedText()`` 
        
        :returns:  Appended text  
        :rtype: :py:class:`NXOpen.Annotations.AppendedText` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAppendedText(self, appendedText: AppendedText) -> None:
        """
        Sets the appended text 
        
        Signature ``SetAppendedText(appendedText)`` 
        
        :param appendedText:  Appended text  
        :type appendedText: :py:class:`NXOpen.Annotations.AppendedText` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: Fcf = ...  # unknown typename


class Centerline3d(BaseCenterline3d):
    """
    Represents a 3D centerline   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.Centerline3dBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Centerline3d = ...  # unknown typename


class RegionBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RegionBuilderTypes():
    """
    Specifies the region type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RectangularRegion", "rectangular"
       "CircularRegion", "circular"
       "AnnularRegion", "annular"
       "CylindricalRegion", "cylindrical"
       "ArbitraryRegion", "arbitrary"
    """
    RectangularRegion = 0  # RegionBuilderTypesMemberType
    CircularRegion = 1  # RegionBuilderTypesMemberType
    AnnularRegion = 2  # RegionBuilderTypesMemberType
    CylindricalRegion = 3  # RegionBuilderTypesMemberType
    ArbitraryRegion = 4  # RegionBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RegionBuilderAlignmentPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RegionBuilderAlignmentPosition():
    """
    Specifies the anchor location of the region 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", "top left"
       "TopCenter", "top center"
       "TopRight", "top right"
       "MiddleLeft", "middle left"
       "MiddleCenter", "middle center"
       "MiddleRight", "middle right"
       "BottomLeft", "bottom left"
       "BottomCenter", "bottom center"
       "BottomRight", "bottom right"
    """
    TopLeft = 0  # RegionBuilderAlignmentPositionMemberType
    TopCenter = 1  # RegionBuilderAlignmentPositionMemberType
    TopRight = 2  # RegionBuilderAlignmentPositionMemberType
    MiddleLeft = 3  # RegionBuilderAlignmentPositionMemberType
    MiddleCenter = 4  # RegionBuilderAlignmentPositionMemberType
    MiddleRight = 5  # RegionBuilderAlignmentPositionMemberType
    BottomLeft = 6  # RegionBuilderAlignmentPositionMemberType
    BottomCenter = 7  # RegionBuilderAlignmentPositionMemberType
    BottomRight = 8  # RegionBuilderAlignmentPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RegionBuilderCrosshatchPatternsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RegionBuilderCrosshatchPatterns():
    """
    Specifies the crosshatch pattern 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "none"
       "GeneralUse", "general use"
    """
    NotSet = 0  # RegionBuilderCrosshatchPatternsMemberType
    GeneralUse = 1  # RegionBuilderCrosshatchPatternsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RegionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.RegionBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiRegionCollection.CreateRegionBuilder`
    
    Default values.
    
    =================  =====
    Property           Value
    =================  =====
    ConformToSurface   0 
    =================  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Specifies the region type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RectangularRegion", "rectangular"
           "CircularRegion", "circular"
           "AnnularRegion", "annular"
           "CylindricalRegion", "cylindrical"
           "ArbitraryRegion", "arbitrary"
        """
        RectangularRegion = 0  # RegionBuilderTypesMemberType
        CircularRegion = 1  # RegionBuilderTypesMemberType
        AnnularRegion = 2  # RegionBuilderTypesMemberType
        CylindricalRegion = 3  # RegionBuilderTypesMemberType
        ArbitraryRegion = 4  # RegionBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AlignmentPosition():
        """
        Specifies the anchor location of the region 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopLeft", "top left"
           "TopCenter", "top center"
           "TopRight", "top right"
           "MiddleLeft", "middle left"
           "MiddleCenter", "middle center"
           "MiddleRight", "middle right"
           "BottomLeft", "bottom left"
           "BottomCenter", "bottom center"
           "BottomRight", "bottom right"
        """
        TopLeft = 0  # RegionBuilderAlignmentPositionMemberType
        TopCenter = 1  # RegionBuilderAlignmentPositionMemberType
        TopRight = 2  # RegionBuilderAlignmentPositionMemberType
        MiddleLeft = 3  # RegionBuilderAlignmentPositionMemberType
        MiddleCenter = 4  # RegionBuilderAlignmentPositionMemberType
        MiddleRight = 5  # RegionBuilderAlignmentPositionMemberType
        BottomLeft = 6  # RegionBuilderAlignmentPositionMemberType
        BottomCenter = 7  # RegionBuilderAlignmentPositionMemberType
        BottomRight = 8  # RegionBuilderAlignmentPositionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CrosshatchPatterns():
        """
        Specifies the crosshatch pattern 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "none"
           "GeneralUse", "general use"
        """
        NotSet = 0  # RegionBuilderCrosshatchPatternsMemberType
        GeneralUse = 1  # RegionBuilderCrosshatchPatternsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Anchor: RegionBuilderAlignmentPosition = ...
    """
    Returns or sets  the anchor
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.RectangularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CircularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.AnnularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Anchor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.RegionBuilderAlignmentPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Anchor`` 
    
    :param anchor: 
    :type anchor: :py:class:`NXOpen.Annotations.RegionBuilderAlignmentPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    ArbitraryAreaList: ArbitraryAreaSeedBuilderList = ...
    """
    Returns  the arbitrary area list
    Only available when the region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.ArbitraryRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ArbitraryAreaList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ArbitraryAreaSeedBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BoundaryColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the boundary curve settings block 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ConformToSurface: bool = ...
    """
    Returns or sets  the conform to surface toggle 
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.RectangularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CircularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.AnnularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ConformToSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConformToSurface`` 
    
    :param conformToSurfaceToggle: 
    :type conformToSurfaceToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    CrosshatchAngle: NXOpen.Expression = ...
    """
    Returns  the crosshatch angle.  
    
    Use :py:meth:`NXOpen.Annotations.RegionBuilder.CrosshatchSettings` instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`NXOpen.Annotations.RegionBuilder.CrosshatchSettings` instead.
    
    License requirements: None.
    """
    CrosshatchColor: NXOpen.NXColor = ...
    """
    Returns or sets  the crosshatch color 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchColor`` 
    
    :param crosshatchColor: 
    :type crosshatchColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    CrosshatchDistance: NXOpen.Expression = ...
    """
    Returns  the crosshatch distance.  
    
    Use :py:meth:`NXOpen.Annotations.RegionBuilder.CrosshatchSettings` instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`NXOpen.Annotations.RegionBuilder.CrosshatchSettings` instead.
    
    License requirements: None.
    """
    CrosshatchPattern: RegionBuilderCrosshatchPatterns = ...
    """
    Returns or sets  the crosshatch pattern enum.  
    
    Use :py:meth:`NXOpen.Annotations.RegionBuilder.CrosshatchSettings` instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchPattern`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.RegionBuilderCrosshatchPatterns` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`NXOpen.Annotations.RegionBuilder.CrosshatchSettings` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchPattern`` 
    
    :param crosshatchPattern: 
    :type crosshatchPattern: :py:class:`NXOpen.Annotations.RegionBuilderCrosshatchPatterns` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.0
       Use the sublock of  :py:meth:`NXOpen.Annotations.RegionBuilder.CrosshatchSettings` called Pattern instead.
    
    License requirements: geometric_tol ("GDT")
    """
    CrosshatchSettings: HatchFillSettingsBuilder = ...
    """
    Returns  the crosshatch settings block 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DisplayCrosshatch: bool = ...
    """
    Returns or sets  the display crosshatch toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayCrosshatch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayCrosshatch`` 
    
    :param displayCrosshatch: 
    :type displayCrosshatch: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: geometric_tol ("GDT")
    """
    EndPoint: NXOpen.Point = ...
    """
    Returns or sets  the end point
    Only available when the region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CylindricalRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPoint`` 
    
    :param endPoint: 
    :type endPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.RectangularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InnerDiameter: NXOpen.Expression = ...
    """
    Returns  the inner diameter
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.AnnularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: NXOpen.Point = ...
    """
    Returns or sets  the origin
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.RectangularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CircularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.AnnularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    OuterDiameter: NXOpen.Expression = ...
    """
    Returns  the outer diameter
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CircularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.AnnularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Plane: PlaneBuilder = ...
    """
    Returns  the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectCylindricalFace: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the select cylindrical face 
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CylindricalRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCylindricalFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the select face 
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.RectangularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CircularRegion <NXOpen.Annotations.RegionBuilderTypes>`,
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.AnnularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StartPoint: NXOpen.Point = ...
    """
    Returns or sets  the start point
    Only available when the region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.CylindricalRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPoint`` 
    
    :param startPoint: 
    :type startPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Type: RegionBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.RegionBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.RegionBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width
    Only available when region type is
    :py:class:`NXOpen.Annotations.RegionBuilderTypes.RectangularRegion <NXOpen.Annotations.RegionBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: RegionBuilder = ...  # unknown typename


class GeneralConcentricCircleDimension(BaseConcentricCircleDimension):
    """
    Represents a concentric circle dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralConcentricCircleDimension = ...  # unknown typename


class LineCfw():
    """
    Specifies color, font, and width .  
    
    Constructor: 
    NXOpen.Annotations.LineCfw()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Color: int = ...
    """
    Field Value
    Type:int
    """
    Font: NXOpen.DisplayableObjectObjectFont = ...
    """
    Line font (solid, dashed, etc) 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectFont`
    """
    Width: LineWidth = ...
    """
    Field Value
    Type::py:class:`NXOpen.Annotations.LineWidth`
    """


class MasterSymbolBuilderLeaderAttachmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MasterSymbolBuilderLeaderAttachmentType():
    """
    The Enum for Attachment options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", "Left Attachment"
       "Right", "Right Attachment"
    """
    Left = 0  # MasterSymbolBuilderLeaderAttachmentTypeMemberType
    Right = 1  # MasterSymbolBuilderLeaderAttachmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MasterSymbolBuilder(NXOpen.Builder):
    """
    Represents a Builder for MasterSymbol functionality  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.CreateMasterSymbolBuilder`
    
    Default values.
    
    ===========================  =============
    Property                     Value
    ===========================  =============
    ImageCapture.CaptureMethod   GraphicsArea 
    ---------------------------  -------------
    ImageCapture.Format          Bmp 
    ---------------------------  -------------
    ImageCapture.Size            Pixels64 
    ===========================  =============
    
    .. versionadded:: NX7.5.0
    """
    
    class LeaderAttachmentType():
        """
        The Enum for Attachment options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", "Left Attachment"
           "Right", "Right Attachment"
        """
        Left = 0  # MasterSymbolBuilderLeaderAttachmentTypeMemberType
        Right = 1  # MasterSymbolBuilderLeaderAttachmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateNewListItem(self, noteTag: Annotation, notes: 'list[str]') -> MasterSymbolListItemBuilder:
        """
        Create Master Symbol list item  builder 
        
        Signature ``CreateNewListItem(noteTag, notes)`` 
        
        :param noteTag: 
        :type noteTag: :py:class:`NXOpen.Annotations.Annotation` 
        :param notes:  name of the solution  
        :type notes: list of str 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GenerateItemNumber(self) -> None:
        """
        Item number assign button.  
        
        This will generate the item number, valid in team center 
        
        Signature ``GenerateItemNumber()`` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.MasterSymbolBuilder.ItemNumber` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GenerateRevision(self) -> None:
        """
        Revision assign button, This will generate the revision number, valid in team center 
        
        Signature ``GenerateRevision()`` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.MasterSymbolBuilder.Revision` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetLeaderAttachmentPoint(self, attachmentType: MasterSymbolBuilderLeaderAttachmentType) -> NXOpen.Point:
        """
        Getting Leader attachment point from builder side 
        
        Signature ``GetLeaderAttachmentPoint(attachmentType)`` 
        
        :param attachmentType:  Attachment type either of left or right 
        :type attachmentType: :py:class:`NXOpen.Annotations.MasterSymbolBuilderLeaderAttachmentType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLeaderAttachmentPoint(self, attachmentType: MasterSymbolBuilderLeaderAttachmentType, leaderAttachmentPoint: NXOpen.Point) -> None:
        """
        Setting Leader attachment point on builder side
        
        Signature ``SetLeaderAttachmentPoint(attachmentType, leaderAttachmentPoint)`` 
        
        :param attachmentType:  Attachment type either of left or right  
        :type attachmentType: :py:class:`NXOpen.Annotations.MasterSymbolBuilderLeaderAttachmentType` 
        :param leaderAttachmentPoint:  Attachment point  
        :type leaderAttachmentPoint: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetMultilineString(self) -> 'list[str]':
        """
        Returns the  multiple notes for a given Text Type.  
        
        This property is valid if 
        :py:meth:`NXOpen.Annotations.MasterSymbolListItemBuilder.TextType` is either of controlled, partially controlled or arbitory  
        
        Signature ``GetMultilineString()`` 
        
        :returns:  Multiple notes as Output 
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPath(self, path: str) -> None:
        """
        Setting Path retrieved from Global method at builder side 
        
        Signature ``SetPath(path)`` 
        
        :param path:  location of symbol  
        :type path: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetIsPartSymbol(self, isPartSymbol: bool) -> None:
        """
        Sets if it is part symbol 
        
        Signature ``SetIsPartSymbol(isPartSymbol)`` 
        
        :param isPartSymbol:  True If it is part symbol 
        :type isPartSymbol: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Rename(self, currentSymbolTag: MasterSymbol, newSymbolName: str) -> None:
        """
        Renames symbol 
        
        Signature ``Rename(currentSymbolTag, newSymbolName)`` 
        
        :param currentSymbolTag:  symbol Tag 
        :type currentSymbolTag: :py:class:`NXOpen.Annotations.MasterSymbol` 
        :param newSymbolName:  New symbol name  
        :type newSymbolName: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def EditImage(self, currentSymbolTag: MasterSymbol, newImageName: str) -> None:
        """
        Changes symbol image
        
        Signature ``EditImage(currentSymbolTag, newImageName)`` 
        
        :param currentSymbolTag:  symbol Tag 
        :type currentSymbolTag: :py:class:`NXOpen.Annotations.MasterSymbol` 
        :param newImageName:  New image name  
        :type newImageName: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetPartOperationCreateBuilder(self, partOperationBuilder: NXOpen.PDM.PartOperationCreateBuilder) -> None:
        """
        Sets :py:class:`NXOpen.PDM.PartOperationBuilder` 
        
        Signature ``SetPartOperationCreateBuilder(partOperationBuilder)`` 
        
        :param partOperationBuilder: 
        :type partOperationBuilder: :py:class:`NXOpen.PDM.PartOperationCreateBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetPartOperationCreateBuilder(self) -> NXOpen.PDM.PartOperationCreateBuilder:
        """
        Gets :py:class:`NXOpen.PDM.PartOperationBuilder`  
        
        Signature ``GetPartOperationCreateBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.PDM.PartOperationCreateBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    AnchorPoint: NXOpen.Point = ...
    """
    Returns or sets  the anchor point 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPoint`` 
    
    :param anchorPoint: 
    :type anchorPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Contents: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select object 
    
    <hr>
    
    Getter Method
    
    Signature ``Contents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ImageCapture: NXOpen.Gateway.ImageCaptureBuilder = ...
    """
    Returns  the image capture builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ImageCapture`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Gateway.ImageCaptureBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ImageName: str = ...
    """
    Returns or sets  the symbol image name 
    
    <hr>
    
    Getter Method
    
    Signature ``ImageName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ImageName`` 
    
    :param imageName: 
    :type imageName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ItemName: str = ...
    """
    Returns or sets  the Item Name, valid in team center
    
    <hr>
    
    Getter Method
    
    Signature ``ItemName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemName`` 
    
    :param itemName: 
    :type itemName: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    ItemNumber: str = ...
    """
    Returns or sets  the item number, valid in team center 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemNumber`` 
    
    :param itemNumber: 
    :type itemNumber: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    NoteList: NXOpen.NXObjectList = ...
    """
    Returns  the note list 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PartFileName: str = ...
    """
    Returns or sets  the part file name 
    
    <hr>
    
    Getter Method
    
    Signature ``PartFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartFileName`` 
    
    :param partFileName: 
    :type partFileName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Revision: str = ...
    """
    Returns or sets  the revision, valid in team center 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolName: str = ...
    """
    Returns or sets  the JA method support for accessing and setting Symbol Name value 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolName`` 
    
    :param symbolName: 
    :type symbolName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: MasterSymbolBuilder = ...  # unknown typename


class SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaDatumTargetBuilderDatumTargetTypes():
    """
    Lists the search pmi datum target type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Point", "point type"
       "Line", "line type"
       "Rectangular", "rectangular type"
       "Circular", "circular type"
       "Annular", "annular type"
       "Spherical", "spherical type"
       "Cylindrical", "cylindrical type"
       "Arbitrary", "arbitray type"
    """
    Point = 0  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    Line = 1  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    Rectangular = 2  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    Circular = 3  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    Annular = 4  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    Spherical = 5  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    Cylindrical = 6  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    Arbitrary = 7  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDatumTargetBuilderDatumTargetMovableOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SearchCriteriaDatumTargetBuilderDatumTargetMovableOptions():
    """
    Represents the search pmi movable datum target type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", "Datum Target"
       "Yes", "Movable Datum Target"
    """
    No = 0  # SearchCriteriaDatumTargetBuilderDatumTargetMovableOptionsMemberType
    Yes = 1  # SearchCriteriaDatumTargetBuilderDatumTargetMovableOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaDatumTargetBuilder(NXOpen.Builder):
    """
    Represents SearchCriteriaDatumTargetBuilder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SearchModelViewCollection.CreateSearchCriteriaDatumTargetBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class DatumTargetTypes():
        """
        Lists the search pmi datum target type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Point", "point type"
           "Line", "line type"
           "Rectangular", "rectangular type"
           "Circular", "circular type"
           "Annular", "annular type"
           "Spherical", "spherical type"
           "Cylindrical", "cylindrical type"
           "Arbitrary", "arbitray type"
        """
        Point = 0  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        Line = 1  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        Rectangular = 2  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        Circular = 3  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        Annular = 4  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        Spherical = 5  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        Cylindrical = 6  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        Arbitrary = 7  # SearchCriteriaDatumTargetBuilderDatumTargetTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DatumTargetMovableOptions():
        """
        Represents the search pmi movable datum target type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", "Datum Target"
           "Yes", "Movable Datum Target"
        """
        No = 0  # SearchCriteriaDatumTargetBuilderDatumTargetMovableOptionsMemberType
        Yes = 1  # SearchCriteriaDatumTargetBuilderDatumTargetMovableOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ByDatumMovable: bool = ...
    """
    Returns or sets  the movable datum target option 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDatumMovable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDatumMovable`` 
    
    :param datumMovable: 
    :type datumMovable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ByDatumTargetLabel: bool = ...
    """
    Returns or sets  the datum target label toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDatumTargetLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDatumTargetLabel`` 
    
    :param datumTargetLabel: 
    :type datumTargetLabel: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByDatumTargetType: bool = ...
    """
    Returns or sets  the datum target type toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByDatumTargetType`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByDatumTargetType`` 
    
    :param datumTargetType: 
    :type datumTargetType: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByHeight: bool = ...
    """
    Returns or sets  the height toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByHeight`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByHeight`` 
    
    :param height: 
    :type height: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByInnerDiameter: bool = ...
    """
    Returns or sets  the inner diameter toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByInnerDiameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByInnerDiameter`` 
    
    :param innerDiameter: 
    :type innerDiameter: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByOuterDiameter: bool = ...
    """
    Returns or sets  the outer diameter toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByOuterDiameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByOuterDiameter`` 
    
    :param outerDiameter: 
    :type outerDiameter: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByText: bool = ...
    """
    Returns or sets  the text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByText`` 
    
    :param text: 
    :type text: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByWidth: bool = ...
    """
    Returns or sets  the width toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByWidth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByWidth`` 
    
    :param width: 
    :type width: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DatumMovable: SearchCriteriaDatumTargetBuilderDatumTargetMovableOptions = ...
    """
    Returns or sets  the movable datum target type 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumMovable`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDatumTargetBuilderDatumTargetMovableOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumMovable`` 
    
    :param datumTargetMovable: 
    :type datumTargetMovable: :py:class:`NXOpen.Annotations.SearchCriteriaDatumTargetBuilderDatumTargetMovableOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DatumTargetLabelText: str = ...
    """
    Returns or sets  the datum target label text 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetLabelText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetLabelText`` 
    
    :param datumTargetLabelText: 
    :type datumTargetLabelText: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DatumTargetType: SearchCriteriaDatumTargetBuilderDatumTargetTypes = ...
    """
    Returns or sets  the datum target type enum 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchCriteriaDatumTargetBuilderDatumTargetTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetType`` 
    
    :param datumTargetType: 
    :type datumTargetType: :py:class:`NXOpen.Annotations.SearchCriteriaDatumTargetBuilderDatumTargetTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeightType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the height enum 
    
    <hr>
    
    Getter Method
    
    Signature ``HeightType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeightType`` 
    
    :param heightType: 
    :type heightType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeightValue: float = ...
    """
    Returns or sets  the height value 
    
    <hr>
    
    Getter Method
    
    Signature ``HeightValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeightValue`` 
    
    :param heightValue: 
    :type heightValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InnerDiameterType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the inner diameter enum 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerDiameterType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InnerDiameterType`` 
    
    :param innerDiameterType: 
    :type innerDiameterType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InnerDiameterValue: float = ...
    """
    Returns or sets  the inner diameter value 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerDiameterValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InnerDiameterValue`` 
    
    :param innerDiameterValue: 
    :type innerDiameterValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OuterDiameterType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the outer diameter enum 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterDiameterType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OuterDiameterType`` 
    
    :param outerDiameterType: 
    :type outerDiameterType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OuterDiameterValue: float = ...
    """
    Returns or sets  the outer diameter value 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterDiameterValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OuterDiameterValue`` 
    
    :param outerDiameterValue: 
    :type outerDiameterValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Text: str = ...
    """
    Returns or sets  the text 
    
    <hr>
    
    Getter Method
    
    Signature ``Text`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Text`` 
    
    :param text: 
    :type text: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``TextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextType`` 
    
    :param textType: 
    :type textType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WidthType: SearchModelViewBuilderValueComparisionOptions = ...
    """
    Returns or sets  the width enum 
    
    <hr>
    
    Getter Method
    
    Signature ``WidthType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WidthType`` 
    
    :param widthType: 
    :type widthType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderValueComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WidthValue: float = ...
    """
    Returns or sets  the width value 
    
    <hr>
    
    Getter Method
    
    Signature ``WidthValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WidthValue`` 
    
    :param widthValue: 
    :type widthValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SearchCriteriaDatumTargetBuilder = ...  # unknown typename


class CustomSymbolCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.BaseCustomSymbol` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def NewCustomSymbolData(self, masterFileName: str) -> CustomSymbolData:
        """
        Creates new CustomSymbolData object  
        
        Signature ``NewCustomSymbolData(masterFileName)`` 
        
        :param masterFileName:  Absolute path of the master symbol(with .sym.prt extension)  
        :type masterFileName: str 
        :returns:  New CustomSymbolData  
        :rtype: :py:class:`NXOpen.Annotations.CustomSymbolData` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           Use :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder` for Drafting Custom Symbol and :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder` for PMI Custom Symbol objects.
        
        License requirements: None.
        """
        ...
    
    
    def NewPartSymbolData(self, partSymbolName: str) -> CustomSymbolData:
        """
        Creates new CustomSymbolData object to create a part symbol instance.  
        
        Signature ``NewPartSymbolData(partSymbolName)`` 
        
        :param partSymbolName:  Part symbol name. Part symbol is a master symbol that is                                                      created and instantiated in the same part.  
        :type partSymbolName: str 
        :returns:  New CustomSymbolData  
        :rtype: :py:class:`NXOpen.Annotations.CustomSymbolData` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           Use :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder` for Drafting Custom Symbol and :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder` for PMI Custom Symbol objects.
        
        License requirements: None.
        """
        ...
    
    
    def CreateCustomSymbol(self, customSymbolData: CustomSymbolData, origin: NXOpen.Point3d, leader: LeaderBundle) -> CustomSymbol:
        """
        Creates a custom symbol  
        
        Signature ``CreateCustomSymbol(customSymbolData, origin, leader)`` 
        
        :param customSymbolData: 
        :type customSymbolData: :py:class:`NXOpen.Annotations.CustomSymbolData` 
        :param origin:  Origin for the custom symbol  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the custom symbol  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New custom symbol  
        :rtype: :py:class:`NXOpen.Annotations.CustomSymbol` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           Use :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreatePmiCustomSymbol(self, customSymbolData: CustomSymbolData, pmiData: PmiData, annotationPlane: NXOpen.Xform, origin: NXOpen.Point3d, leader: LeaderBundle) -> PmiCustomSymbol:
        """
        Creates a PMI custom symbol  
        
        Signature ``CreatePmiCustomSymbol(customSymbolData, pmiData, annotationPlane, origin, leader)`` 
        
        :param customSymbolData: 
        :type customSymbolData: :py:class:`NXOpen.Annotations.CustomSymbolData` 
        :param pmiData:  PMI data  
        :type pmiData: :py:class:`NXOpen.Annotations.PmiData` 
        :param annotationPlane:  Annotation plane on which the custom symbol lies  
        :type annotationPlane: :py:class:`NXOpen.Xform` 
        :param origin:  Origin for the custom symbol  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param leader:  Specifies the leaders for the custom symbol  
        :type leader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        :returns:  New PMI custom symbol  
        :rtype: :py:class:`NXOpen.Annotations.PmiCustomSymbol` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           Use :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder` instead.
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def CreateSmashCustomSymbolBuilder(self) -> SmashCustomSymbolBuilder:
        """
        Smashes a custom symbol  
        
        Signature ``CreateSmashCustomSymbolBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SmashCustomSymbolBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateMasterSymbolBuilder(self, masterSymbolTag: MasterSymbol) -> MasterSymbolBuilder:
        """
        Creates the Master Symbol builder  
        
        Signature ``CreateMasterSymbolBuilder(masterSymbolTag)`` 
        
        :param masterSymbolTag:  :py:class:`NXOpen.Annotations.MasterSymbol` to be set as master symbol  
        :type masterSymbolTag: :py:class:`NXOpen.Annotations.MasterSymbol` 
        :returns:  MasterSymbolBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.MasterSymbolBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateMasterSymbolListItemBuilder(self) -> MasterSymbolListItemBuilder:
        """
        Creates the Master Symbol List Item builder  
        
        Signature ``CreateMasterSymbolListItemBuilder()`` 
        
        :returns:  CustomSymbolListItemBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDraftingCustomSymbolBuilder(self, symbolTag: CustomSymbol) -> DraftingCustomSymbolBuilder:
        """
        Creates the Drafting Symbol placement builder  
        
        Signature ``CreateDraftingCustomSymbolBuilder(symbolTag)`` 
        
        :param symbolTag:  Symbol as input  
        :type symbolTag: :py:class:`NXOpen.Annotations.CustomSymbol` 
        :returns:  DraftingCustomSymbolBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePmiCustomSymbolBuilder(self, symbolTag: PmiCustomSymbol) -> PmiCustomSymbolBuilder:
        """
        Creates the PMI Symbol Placement builder  
        
        Signature ``CreatePmiCustomSymbolBuilder(symbolTag)`` 
        
        :param symbolTag:  Symbol as input  
        :type symbolTag: :py:class:`NXOpen.Annotations.PmiCustomSymbol` 
        :returns:  PMICustomSymbolBuilder object  
        :rtype: :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def EditSymbolDisplayBuilder(self, symbolTag: BaseCustomSymbol) -> EditSymbolDisplayBuilder:
        """
        Creates a edit custom symbol dialog builder 
        
        Signature ``EditSymbolDisplayBuilder(symbolTag)`` 
        
        :param symbolTag:  Symbol as input  
        :type symbolTag: :py:class:`NXOpen.Annotations.BaseCustomSymbol` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.EditSymbolDisplayBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, name: str) -> MasterSymbol:
        """
        Finds the :py:class:`NXOpen.Annotations.MasterSymbol` with the given name.  
        
        An exception will be thrown if no object can be found with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Master custom symbol name  
        :type name: str 
        :returns:  Master custom symbol object  
        :rtype: :py:class:`NXOpen.Annotations.MasterSymbol` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSymbolCatalogBuilder(self) -> SymbolCatalogBuilder:
        """
        Creates a symbol catalog dialog builder  
        
        Signature ``CreateSymbolCatalogBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SymbolCatalogBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def CreateReplaceSymbolBuilder(self) -> ReplaceSymbolBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.ReplaceSymbolBuilder`  
        
        Signature ``CreateReplaceSymbolBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.ReplaceSymbolBuilder` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class DimensionStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DimensionStyleBuilder`.  
    
    This class queries and sets dimension preferences when creating or editing a dimension.
    
    .. versionadded:: NX6.0.0
    """
    
    def GetOverriddenDimensionText(self) -> 'list[str]':
        """
        Returns the overridden dimension text value 
        
        Signature ``GetOverriddenDimensionText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOverriddenDimensionText(self, customizedText: 'list[str]') -> None:
        """
        Sets the overridden dimension text value 
        
        Signature ``SetOverriddenDimensionText(customizedText)`` 
        
        :param customizedText: 
        :type customizedText: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngularDimensionValuePrecision: int = ...
    """
    Returns or sets  the angular dimension value precision 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDimensionValuePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularDimensionValuePrecision`` 
    
    :param angularDimensionValuePrecision: 
    :type angularDimensionValuePrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    AngularToleranceValuePrecision: int = ...
    """
    Returns or sets  the angular tolerance value precision 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularToleranceValuePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularToleranceValuePrecision`` 
    
    :param angularToleranceValuePrecision: 
    :type angularToleranceValuePrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    BaselineOffset: float = ...
    """
    Returns or sets  the offset between dimension lines of baseline dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineOffset`` 
    
    :param baselineOffset: 
    :type baselineOffset: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChainOffset: float = ...
    """
    Returns or sets  the offset between dimension lines of chain dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``ChainOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChainOffset`` 
    
    :param chainOffset: 
    :type chainOffset: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChamferForm: ChamferForm = ...
    """
    Returns or sets  the chamfer dimension form 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferForm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ChamferForm` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferForm`` 
    
    :param chamferForm: 
    :type chamferForm: :py:class:`NXOpen.Annotations.ChamferForm` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChamferLeaderType: ChamferLeaderPlacement = ...
    """
    Returns or sets  the chamfer dimension leader type 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferLeaderType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ChamferLeaderPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferLeaderType`` 
    
    :param chamferLeaderType: 
    :type chamferLeaderType: :py:class:`NXOpen.Annotations.ChamferLeaderPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChamferSeparator: ChamferSeparatorType = ...
    """
    Returns or sets  the chamfer separator type 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferSeparator`` 
    
    :returns:  Separator type  
    :rtype: :py:class:`NXOpen.Annotations.ChamferSeparatorType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferSeparator`` 
    
    :param separator:  New separator type  
    :type separator: :py:class:`NXOpen.Annotations.ChamferSeparatorType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChamferSpaceFactor: float = ...
    """
    Returns or sets  the chamfer dimension space factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferSpaceFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferSpaceFactor`` 
    
    :param chamferSpaceFactor: 
    :type chamferSpaceFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChamferStubType: ChamferStubType = ...
    """
    Returns or sets  the chamfer dimension stub type 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferStubType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ChamferStubType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferStubType`` 
    
    :param chamferStubType: 
    :type chamferStubType: :py:class:`NXOpen.Annotations.ChamferStubType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChamferSymbolName: str = ...
    """
    Returns or sets  the chamfer dimension symbol name 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferSymbolName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferSymbolName`` 
    
    :param chamferSymbolName: 
    :type chamferSymbolName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ChamferSymbolType: ChamferSymbolPlacement = ...
    """
    Returns or sets  the chamfer dimension symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ChamferSymbolPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferSymbolType`` 
    
    :param chamferSymbolType: 
    :type chamferSymbolType: :py:class:`NXOpen.Annotations.ChamferSymbolPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimArrowDisplay: ArrowDisplay = ...
    """
    Returns or sets  the dimension arrow display option 
    
    <hr>
    
    Getter Method
    
    Signature ``DimArrowDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ArrowDisplay` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimArrowDisplay`` 
    
    :param dimArrowDisplay: 
    :type dimArrowDisplay: :py:class:`NXOpen.Annotations.ArrowDisplay` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimZeroToleranceDisplayStyle: ZeroToleranceDisplayStyle = ...
    """
    Returns or sets  the dimension zero tolerance display style 
    
    <hr>
    
    Getter Method
    
    Signature ``DimZeroToleranceDisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimZeroToleranceDisplayStyle`` 
    
    :param dimZeroToleranceDisplayStyle: 
    :type dimZeroToleranceDisplayStyle: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DimensionValuePrecision: int = ...
    """
    Returns or sets  the dimension value precision 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionValuePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionValuePrecision`` 
    
    :param dimensionValuePrecision: 
    :type dimensionValuePrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DualDimensionFractionDenominator: FractionDenominatorFormat = ...
    """
    Returns or sets  the dual dimension fractional denominator 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionFractionDenominator`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionFractionDenominator`` 
    
    :param dualDimensionFractionDenominator: 
    :type dualDimensionFractionDenominator: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DualDimensionValuePrecision: int = ...
    """
    Returns or sets  the dual dimension value precision 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionValuePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionValuePrecision`` 
    
    :param dualDimensionValuePrecision: 
    :type dualDimensionValuePrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DualToleranceValuePrecision: int = ...
    """
    Returns or sets  the dual tolerance value precision 
    
    <hr>
    
    Getter Method
    
    Signature ``DualToleranceValuePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualToleranceValuePrecision`` 
    
    :param dualToleranceValuePrecision: 
    :type dualToleranceValuePrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ExtensionLineDisplay: ExtensionLineDisplay = ...
    """
    Returns or sets  the extension line display option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionLineDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ExtensionLineDisplay` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionLineDisplay`` 
    
    :param extensionLineDisplay: 
    :type extensionLineDisplay: :py:class:`NXOpen.Annotations.ExtensionLineDisplay` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FitToleranceParentheses: bool = ...
    """
    Returns or sets  the fit tolerance parentheses option.  
    
    When the value is true, parentheses will be shown on 
    the fit tolerance text.  Otherwise, a blank space will be used. 
    
    <hr>
    
    Getter Method
    
    Signature ``FitToleranceParentheses`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitToleranceParentheses`` 
    
    :param showFitParentheses: 
    :type showFitParentheses: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    FitToleranceSeparator: bool = ...
    """
    Returns or sets  the fit tolerance separator option.  
    
    When the limit fit type is FIT and the value true,
    a line will be drawn to separate the hole and shaft tolerance texts. 
    
    <hr>
    
    Getter Method
    
    Signature ``FitToleranceSeparator`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitToleranceSeparator`` 
    
    :param showFitSeparator: 
    :type showFitSeparator: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    InspectionDimension: bool = ...
    """
    Returns or sets  the inspection dimension flag 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionDimension`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionDimension`` 
    
    :param inspectionDimension: 
    :type inspectionDimension: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    InspectionSymbolAroundAppendedText: InspectionSymbolAroundAppendedText = ...
    """
    Returns or sets  the inspection symbol around appended text option 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionSymbolAroundAppendedText`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.InspectionSymbolAroundAppendedText` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionSymbolAroundAppendedText`` 
    
    :param inspectionSymbolAroundAppendedText: 
    :type inspectionSymbolAroundAppendedText: :py:class:`NXOpen.Annotations.InspectionSymbolAroundAppendedText` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitAnsiHoleType: FitAnsiHoleType = ...
    """
    Returns or sets  the dimension limit fit ANSI hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :param fitHoleType: 
    :type fitHoleType: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitAssemblyDisplayStyle: FitAssemblyDisplayStyle = ...
    """
    Returns or sets  the display style of fit tolerance for assembly dimensions.  
    
    When the limit fit type is FIT,
    the display can be on a single line, or two lines centered with the dimension text or
    two lines with the shaft text in line with the dimension text.
    This property is obsolete.
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAssemblyDisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FitAssemblyDisplayStyle` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionStyleBuilder.LimitFitAssemblyNewDisplayStyle` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAssemblyDisplayStyle`` 
    
    :param fitAssemblyDisplayStyle: 
    :type fitAssemblyDisplayStyle: :py:class:`NXOpen.Annotations.FitAssemblyDisplayStyle` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionStyleBuilder.LimitFitAssemblyNewDisplayStyle` instead.
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitAssemblyNewDisplayStyle: FitAssemblyNewDisplayStyle = ...
    """
    Returns or sets  the new display style of fit tolerance for assembly dimensions.  
    
    When the limit fit type is FIT,
    the display can be on a single line or double line 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAssemblyNewDisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FitAssemblyNewDisplayStyle` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAssemblyNewDisplayStyle`` 
    
    :param fitAssemblyDisplayStyle: 
    :type fitAssemblyDisplayStyle: :py:class:`NXOpen.Annotations.FitAssemblyNewDisplayStyle` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDeviation: str = ...
    """
    Returns or sets  the dimension limit fit deviation 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDeviation`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDeviation`` 
    
    :param fitDeviation: 
    :type fitDeviation: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplayAlignment: FitDisplayAlignment = ...
    """
    Returns or sets  the dimension limit fit display alignment.  
    
    When the limit fit type is FIT, the hole and shaft tolerances
    can be aligned as centered value, centered value and fit or bottom
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplayAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FitDisplayAlignment` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplayAlignment`` 
    
    :param fitDisplayAlignment: 
    :type fitDisplayAlignment: :py:class:`NXOpen.Annotations.FitDisplayAlignment` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplaySplitByDimline: FitDisplaySplitByDimline = ...
    """
    Returns or sets  the dimension limit fit assembly display when split by dimension line.  
    
    When the limit fit type is FIT or layout is SINGLE LINE, the hole and shaft tolerances can be shown 
    without any split, splitting tolerance by the dimension line or splitting tolerance and value by the dimension line 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplaySplitByDimline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FitDisplaySplitByDimline` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplaySplitByDimline`` 
    
    :param fitDisplaySplitByDimline: 
    :type fitDisplaySplitByDimline: :py:class:`NXOpen.Annotations.FitDisplaySplitByDimline` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplayStyle: FitDisplayStyle = ...
    """
    Returns or sets  the dimension limit fit display style 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :param fitDisplayStyle: 
    :type fitDisplayStyle: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitGrade: int = ...
    """
    Returns or sets  the dimension limit fit grade 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitGrade`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitGrade`` 
    
    :param fitGrade: 
    :type fitGrade: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitShaftDeviation: str = ...
    """
    Returns or sets  the shaft deviation for fit tolerance of a dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitShaftDeviation`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitShaftDeviation`` 
    
    :param fitShaftDeviation: 
    :type fitShaftDeviation: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitShaftGrade: int = ...
    """
    Returns or sets  the shaft grade for fit tolerance of a dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitShaftGrade`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitShaftGrade`` 
    
    :param fitShaftGrade: 
    :type fitShaftGrade: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LineBetweenArrows: bool = ...
    """
    Returns or sets  the line between arrows.  
    
    A value of True means a line is to be displayed between the arrows 
    
    <hr>
    
    Getter Method
    
    Signature ``LineBetweenArrows`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineBetweenArrows`` 
    
    :param lineBetweenArrows: 
    :type lineBetweenArrows: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LowerToleranceDegrees: float = ...
    """
    Returns or sets  the lower angular tolerance in degrees 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceDegrees`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceDegrees`` 
    
    :param lowerToleranceDegrees: 
    :type lowerToleranceDegrees: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LowerToleranceEnglish: float = ...
    """
    Returns or sets  the lower english tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceEnglish`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceEnglish`` 
    
    :param lowerToleranceEnglish: 
    :type lowerToleranceEnglish: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LowerToleranceMetric: float = ...
    """
    Returns or sets  the lower metric tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerToleranceMetric`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerToleranceMetric`` 
    
    :param lowerToleranceMetric: 
    :type lowerToleranceMetric: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NarrowArrowType: ArrowheadType = ...
    """
    Returns or sets  the narrow dimension arrowhead type which is used when there is no space for normal arrowheads 
    
    <hr>
    
    Getter Method
    
    Signature ``NarrowArrowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NarrowArrowType`` 
    
    :param narrowArrowType: 
    :type narrowArrowType: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NarrowDisplayType: NarrowDisplayOption = ...
    """
    Returns or sets  the display type for narrow dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``NarrowDisplayType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.NarrowDisplayOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NarrowDisplayType`` 
    
    :param displayType: 
    :type displayType: :py:class:`NXOpen.Annotations.NarrowDisplayOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NarrowLeaderAngle: float = ...
    """
    Returns or sets  the narrow dimension leader angle 
    
    <hr>
    
    Getter Method
    
    Signature ``NarrowLeaderAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NarrowLeaderAngle`` 
    
    :param narrowLeaderAngle: 
    :type narrowLeaderAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NarrowTextOffset: float = ...
    """
    Returns or sets  the narrow dimension text offset 
    
    <hr>
    
    Getter Method
    
    Signature ``NarrowTextOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NarrowTextOffset`` 
    
    :param narrowTextOffset: 
    :type narrowTextOffset: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    NarrowTextOrientation: NarrowTextOrientation = ...
    """
    Returns or sets  the narrow dimension text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``NarrowTextOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.NarrowTextOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NarrowTextOrientation`` 
    
    :param narrowTextOrientation: 
    :type narrowTextOrientation: :py:class:`NXOpen.Annotations.NarrowTextOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Orientation: TextOrientation = ...
    """
    Returns or sets  the dimension text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    OverrideDimensionText: bool = ...
    """
    Returns or sets  the override dimension text 
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideDimensionText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideDimensionText`` 
    
    :param overrideDimensionText: 
    :type overrideDimensionText: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PrefixSuffixReference: bool = ...
    """
    Returns or sets  the flag indicating whether prefix suffix reference toggle is turned on or not 
    
    <hr>
    
    Getter Method
    
    Signature ``PrefixSuffixReference`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrefixSuffixReference`` 
    
    :param prefixSuffixReference: 
    :type prefixSuffixReference: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PrimaryDimensionFractionDenominator: FractionDenominatorFormat = ...
    """
    Returns or sets  the primary dimension fractional denominator 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDimensionFractionDenominator`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDimensionFractionDenominator`` 
    
    :param primaryDimensionFractionDenominator: 
    :type primaryDimensionFractionDenominator: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ReferenceDimension: bool = ...
    """
    Returns or sets  the reference dimension flag 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDimension`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDimension`` 
    
    :param referenceDimension: 
    :type referenceDimension: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ReferenceDimensionPrefix: str = ...
    """
    Returns or sets  the prefix characters for reference dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDimensionPrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDimensionPrefix`` 
    
    :param prefix: 
    :type prefix: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReferenceDimensionSuffix: str = ...
    """
    Returns or sets  the suffix characters for reference dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDimensionSuffix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDimensionSuffix`` 
    
    :param suffix: 
    :type suffix: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReverseArrowDirection: bool = ...
    """
    Returns or sets  the reverse arrow direction flag 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseArrowDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseArrowDirection`` 
    
    :param reverseArrowDirection: 
    :type reverseArrowDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TextAngle: float = ...
    """
    Returns or sets  the dimension text angle 
    
    <hr>
    
    Getter Method
    
    Signature ``TextAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextAngle`` 
    
    :param textAngle: 
    :type textAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextArrowPlacement: TextPlacement = ...
    """
    Returns or sets  the text arrow placement.  
    
    This specifies manual or automatic placement and
    display of arrows in or out 
    
    <hr>
    
    Getter Method
    
    Signature ``TextArrowPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextArrowPlacement`` 
    
    :param textArrowPlacement: 
    :type textArrowPlacement: :py:class:`NXOpen.Annotations.TextPlacement` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextCentered: bool = ...
    """
    Returns or sets  the dimension text centered option 
    
    <hr>
    
    Getter Method
    
    Signature ``TextCentered`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextCentered`` 
    
    :param textCentered: 
    :type textCentered: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TextPosition: TextPosition = ...
    """
    Returns or sets  the dimension text position representing above or after stub 
    
    <hr>
    
    Getter Method
    
    Signature ``TextPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TextPosition` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextPosition`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Annotations.TextPosition` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ToleranceType: ToleranceType = ...
    """
    Returns or sets  the dimension tolerance type 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param dimToleranceType: 
    :type dimToleranceType: :py:class:`NXOpen.Annotations.ToleranceType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ToleranceValuePrecision: int = ...
    """
    Returns or sets  the tolerance value precision 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceValuePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceValuePrecision`` 
    
    :param toleranceValuePrecision: 
    :type toleranceValuePrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TrimDimLine: TrimDimensionLineStyle = ...
    """
    Returns or sets  the trim dimension line flag.  
    
    A value of True means the dimension line will be trimmed when
    the text crosses both extension lines 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimDimLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TrimDimensionLineStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimDimLine`` 
    
    :param trimDimLine: 
    :type trimDimLine: :py:class:`NXOpen.Annotations.TrimDimensionLineStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TrueLengthText: str = ...
    """
    Returns or sets  the true length dimension text 
    
    <hr>
    
    Getter Method
    
    Signature ``TrueLengthText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrueLengthText`` 
    
    :param trueLengthText: 
    :type trueLengthText: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TrueLengthTextPosition: TrueLengthTextPosition = ...
    """
    Returns or sets  the true length text position 
    
    <hr>
    
    Getter Method
    
    Signature ``TrueLengthTextPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.TrueLengthTextPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrueLengthTextPosition`` 
    
    :param trueLengthTextPosition: 
    :type trueLengthTextPosition: :py:class:`NXOpen.Annotations.TrueLengthTextPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    UpperToleranceDegrees: float = ...
    """
    Returns or sets  the upper angular tolerance in degrees 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceDegrees`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceDegrees`` 
    
    :param upperToleranceDegrees: 
    :type upperToleranceDegrees: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UpperToleranceEnglish: float = ...
    """
    Returns or sets  the upper english tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceEnglish`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceEnglish`` 
    
    :param upperToleranceEnglish: 
    :type upperToleranceEnglish: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    UpperToleranceMetric: float = ...
    """
    Returns or sets  the upper metric tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperToleranceMetric`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperToleranceMetric`` 
    
    :param upperToleranceMetric: 
    :type upperToleranceMetric: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: DimensionStyleBuilder = ...  # unknown typename


class ChamferDimension(BaseChamferDimension):
    """
    Represents a chamfer dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.ChamferDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: ChamferDimension = ...  # unknown typename


class OffsetCenterPoint(DraftingAid):
    """
    Represents a offset center point   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.OffsetCenterPointBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: OffsetCenterPoint = ...  # unknown typename


class PerpendicularDimension(BasePerpendicularDimension):
    """
    Represents a perpendicular dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PerpendicularDimension = ...  # unknown typename


class PmiPreferencesPreferenceSymbolTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PmiPreferencesPreferenceSymbolTypes():
    """
    Specifies the allowable symbol types for Parallel To Screen and Lock Pan/Zoom 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Note", "note"
       "GeneralNote", "general note"
       "SpecificNote", "specific note"
       "EnterpriseId", "enterprise id"
       "MaterialSpecification", "material specification"
       "PartId", "part id"
       "ProcessSpecification", "process specification"
       "UrlNote", "url note"
       "StringNote", "string note"
       "NumberNote", "number note"
       "IntegerNote", "integer note"
       "BalloonNote", "balloon note"
       "CustomSymbol", "custom symbol"
       "GovernmentSecurityInfo", "government security info"
       "CompanySpecificProprietaryInfo", "company specific proprietary info"
       "ExportControl", "export control"
       "Table", "table"
       "CoordinateNote", "coordinate note"
    """
    Note = 0  # PmiPreferencesPreferenceSymbolTypesMemberType
    GeneralNote = 1  # PmiPreferencesPreferenceSymbolTypesMemberType
    SpecificNote = 2  # PmiPreferencesPreferenceSymbolTypesMemberType
    EnterpriseId = 3  # PmiPreferencesPreferenceSymbolTypesMemberType
    MaterialSpecification = 4  # PmiPreferencesPreferenceSymbolTypesMemberType
    PartId = 5  # PmiPreferencesPreferenceSymbolTypesMemberType
    ProcessSpecification = 6  # PmiPreferencesPreferenceSymbolTypesMemberType
    UrlNote = 7  # PmiPreferencesPreferenceSymbolTypesMemberType
    StringNote = 8  # PmiPreferencesPreferenceSymbolTypesMemberType
    NumberNote = 9  # PmiPreferencesPreferenceSymbolTypesMemberType
    IntegerNote = 10  # PmiPreferencesPreferenceSymbolTypesMemberType
    BalloonNote = 11  # PmiPreferencesPreferenceSymbolTypesMemberType
    CustomSymbol = 12  # PmiPreferencesPreferenceSymbolTypesMemberType
    GovernmentSecurityInfo = 13  # PmiPreferencesPreferenceSymbolTypesMemberType
    CompanySpecificProprietaryInfo = 14  # PmiPreferencesPreferenceSymbolTypesMemberType
    ExportControl = 15  # PmiPreferencesPreferenceSymbolTypesMemberType
    Table = 16  # PmiPreferencesPreferenceSymbolTypesMemberType
    CoordinateNote = 17  # PmiPreferencesPreferenceSymbolTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiPreferences(NXOpen.TransientObject):
    """
    Represents line and arrow preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    class PreferenceSymbolTypes():
        """
        Specifies the allowable symbol types for Parallel To Screen and Lock Pan/Zoom 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Note", "note"
           "GeneralNote", "general note"
           "SpecificNote", "specific note"
           "EnterpriseId", "enterprise id"
           "MaterialSpecification", "material specification"
           "PartId", "part id"
           "ProcessSpecification", "process specification"
           "UrlNote", "url note"
           "StringNote", "string note"
           "NumberNote", "number note"
           "IntegerNote", "integer note"
           "BalloonNote", "balloon note"
           "CustomSymbol", "custom symbol"
           "GovernmentSecurityInfo", "government security info"
           "CompanySpecificProprietaryInfo", "company specific proprietary info"
           "ExportControl", "export control"
           "Table", "table"
           "CoordinateNote", "coordinate note"
        """
        Note = 0  # PmiPreferencesPreferenceSymbolTypesMemberType
        GeneralNote = 1  # PmiPreferencesPreferenceSymbolTypesMemberType
        SpecificNote = 2  # PmiPreferencesPreferenceSymbolTypesMemberType
        EnterpriseId = 3  # PmiPreferencesPreferenceSymbolTypesMemberType
        MaterialSpecification = 4  # PmiPreferencesPreferenceSymbolTypesMemberType
        PartId = 5  # PmiPreferencesPreferenceSymbolTypesMemberType
        ProcessSpecification = 6  # PmiPreferencesPreferenceSymbolTypesMemberType
        UrlNote = 7  # PmiPreferencesPreferenceSymbolTypesMemberType
        StringNote = 8  # PmiPreferencesPreferenceSymbolTypesMemberType
        NumberNote = 9  # PmiPreferencesPreferenceSymbolTypesMemberType
        IntegerNote = 10  # PmiPreferencesPreferenceSymbolTypesMemberType
        BalloonNote = 11  # PmiPreferencesPreferenceSymbolTypesMemberType
        CustomSymbol = 12  # PmiPreferencesPreferenceSymbolTypesMemberType
        GovernmentSecurityInfo = 13  # PmiPreferencesPreferenceSymbolTypesMemberType
        CompanySpecificProprietaryInfo = 14  # PmiPreferencesPreferenceSymbolTypesMemberType
        ExportControl = 15  # PmiPreferencesPreferenceSymbolTypesMemberType
        Table = 16  # PmiPreferencesPreferenceSymbolTypesMemberType
        CoordinateNote = 17  # PmiPreferencesPreferenceSymbolTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetShadedDisplay(self, shadedDisplay: bool) -> None:
        """
        Signature ``SetShadedDisplay(shadedDisplay)`` 
        
        :param shadedDisplay: 
        :type shadedDisplay: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetEnableResize(self, enableResize: bool) -> None:
        """
        Signature ``SetEnableResize(enableResize)`` 
        
        :param enableResize: 
        :type enableResize: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetResizeOnCreate(self, resizeOnCreate: bool) -> None:
        """
        Signature ``SetResizeOnCreate(resizeOnCreate)`` 
        
        :param resizeOnCreate: 
        :type resizeOnCreate: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetResizeOnViewSave(self, resizeOnViewSave: bool) -> None:
        """
        Signature ``SetResizeOnViewSave(resizeOnViewSave)`` 
        
        :param resizeOnViewSave: 
        :type resizeOnViewSave: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetResizeMethod(self, resizeMethod: PmiResizeMethod) -> None:
        """
        Signature ``SetResizeMethod(resizeMethod)`` 
        
        :param resizeMethod: 
        :type resizeMethod: :py:class:`NXOpen.Annotations.PmiResizeMethod` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPmiSupportForGeometrySharing(self, pmiSupportForGeomSharing: bool) -> None:
        """
        Signature ``SetPmiSupportForGeometrySharing(pmiSupportForGeomSharing)`` 
        
        :param pmiSupportForGeomSharing: 
        :type pmiSupportForGeomSharing: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDisplayPmiEffectivityMethod(self, displayPmiEffectivityMethod: DisplayPmiEffectivityMethod) -> None:
        """
        Signature ``SetDisplayPmiEffectivityMethod(displayPmiEffectivityMethod)`` 
        
        :param displayPmiEffectivityMethod: 
        :type displayPmiEffectivityMethod: :py:class:`NXOpen.Annotations.DisplayPmiEffectivityMethod` 
        
        .. versionadded:: NX8.5.1
        
        License requirements: nx_pmi_effectivity ("NX PMI EFFECTIVITY")
        """
        ...
    
    
    def SetDisplayPmiEffectivityReferenceMethod(self, displayPmiEffectivityReferenceMethod: DisplayPmiEffectivityMethod) -> None:
        """
        Signature ``SetDisplayPmiEffectivityReferenceMethod(displayPmiEffectivityReferenceMethod)`` 
        
        :param displayPmiEffectivityReferenceMethod: 
        :type displayPmiEffectivityReferenceMethod: :py:class:`NXOpen.Annotations.DisplayPmiEffectivityMethod` 
        
        .. versionadded:: NX8.5.1
        
        License requirements: nx_pmi_effectivity ("NX PMI EFFECTIVITY")
        """
        ...
    
    
    def SetDisplayPmiAssociatedComponentsLoadedForReference(self, displayPmiAssociatedComponentsLoadedForReference: bool) -> None:
        """
        Signature ``SetDisplayPmiAssociatedComponentsLoadedForReference(displayPmiAssociatedComponentsLoadedForReference)`` 
        
        :param displayPmiAssociatedComponentsLoadedForReference: 
        :type displayPmiAssociatedComponentsLoadedForReference: bool 
        
        .. versionadded:: NX8.5.1
        
        License requirements: nx_pmi_effectivity ("NX PMI EFFECTIVITY")
        """
        ...
    
    
    def SetDisplayEffectivityFilterNodesInPartNavigator(self, displayEffectivityFilterNodesInPartNavigator: bool) -> None:
        """
        Signature ``SetDisplayEffectivityFilterNodesInPartNavigator(displayEffectivityFilterNodesInPartNavigator)`` 
        
        :param displayEffectivityFilterNodesInPartNavigator: 
        :type displayEffectivityFilterNodesInPartNavigator: bool 
        
        .. versionadded:: NX8.5.1
        
        License requirements: nx_pmi_effectivity ("NX PMI EFFECTIVITY")
        """
        ...
    
    
    def SetAssemblyCrosshatching(self, assemblyCrosshatching: bool) -> None:
        """
        Signature ``SetAssemblyCrosshatching(assemblyCrosshatching)`` 
        
        :param assemblyCrosshatching: 
        :type assemblyCrosshatching: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRestrictCrosshatchAngle(self, restrictCrosshatchAngle: bool) -> None:
        """
        Signature ``SetRestrictCrosshatchAngle(restrictCrosshatchAngle)`` 
        
        :param restrictCrosshatchAngle: 
        :type restrictCrosshatchAngle: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCrosshatchAdjacencyTolerance(self, crosshatchAdjacencyTolerance: float) -> None:
        """
        Signature ``SetCrosshatchAdjacencyTolerance(crosshatchAdjacencyTolerance)`` 
        
        :param crosshatchAdjacencyTolerance: 
        :type crosshatchAdjacencyTolerance: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociativityForLightweightSectionViews(self, associativityOptionForLightweightSectionViews: bool) -> None:
        """
        Signature ``SetAssociativityForLightweightSectionViews(associativityOptionForLightweightSectionViews)`` 
        
        :param associativityOptionForLightweightSectionViews: 
        :type associativityOptionForLightweightSectionViews: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParallelToScreenEnabledPmiTypes(self) -> 'list[PmiPreferencesPreferenceSymbolTypes]':
        """
        The parallel to screen enabled pmi type  
        
        Signature ``GetParallelToScreenEnabledPmiTypes()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.PmiPreferencesPreferenceSymbolTypes` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetParallelToScreenEnabledPmiTypes(self, parallelToScreenEnabledPmiTypes: 'list[PmiPreferencesPreferenceSymbolTypes]') -> None:
        """
        Signature ``SetParallelToScreenEnabledPmiTypes(parallelToScreenEnabledPmiTypes)`` 
        
        :param parallelToScreenEnabledPmiTypes: 
        :type parallelToScreenEnabledPmiTypes: list of :py:class:`NXOpen.Annotations.PmiPreferencesPreferenceSymbolTypes` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    AssemblyCrosshatching: bool = ...
    """
    Returns  the flag indicating whether PMI support for lightweight section view assembly crosshatching option is available
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyCrosshatching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AssociativityForLightweightSectionViews: bool = ...
    """
    Returns  the option indicating whether plane is associative for Lightweight Section Views
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativityForLightweightSectionViews`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ClipCoplanarObjectsForLightweightSectionViews: bool = ...
    """
    Returns or sets  the option indicating clip coplanar objects
    
    <hr>
    
    Getter Method
    
    Signature ``ClipCoplanarObjectsForLightweightSectionViews`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClipCoplanarObjectsForLightweightSectionViews`` 
    
    :param clipCoplanarObjectsOptionForLightweightSectionViews: 
    :type clipCoplanarObjectsOptionForLightweightSectionViews: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ClipWireframeObjects: bool = ...
    """
    Returns or sets  the option indicating clip wireframe objects
    
    <hr>
    
    Getter Method
    
    Signature ``ClipWireframeObjects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClipWireframeObjects`` 
    
    :param clipWireframeObjectsOption: 
    :type clipWireframeObjectsOption: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    CreateViewIndependent: bool = ...
    """
    Returns or sets  the flag indicating whether the PMI would be created view independent 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateViewIndependent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateViewIndependent`` 
    
    :param createViewIndependent: 
    :type createViewIndependent: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    CrosshatchAdjacencyTolerance: float = ...
    """
    Returns  the flag indicating whether PMI support for lightweight section view crosshatch adjacency tolerance is available
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchAdjacencyTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbolArrowDirection: CuttingPlaneSymbolBuilderArrowDirectionOption = ...
    """
    Returns or sets  the cutting plane symbol arrow direction related to plane
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolArrowDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderArrowDirectionOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolArrowDirection`` 
    
    :param arrowDirection: 
    :type arrowDirection: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderArrowDirectionOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbolArrowLength: float = ...
    """
    Returns or sets  the cutting plane symbol arrow length 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolArrowLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolArrowLength`` 
    
    :param arrowLength: 
    :type arrowLength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbolColor: NXOpen.NXColor = ...
    """
    Returns or sets  the cutting plane symbol color 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbolSectionPrefix: str = ...
    """
    Returns or sets  the section prefix for cutting plane symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolSectionPrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolSectionPrefix`` 
    
    :param sectionPrefix: 
    :type sectionPrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbolShadedPlane: bool = ...
    """
    Returns or sets  the cutting plane symbol shaded plane option
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolShadedPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolShadedPlane`` 
    
    :param shadedPlane: 
    :type shadedPlane: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbolStartingLetter: str = ...
    """
    Returns or sets  the starting letter for cutting plane symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolStartingLetter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolStartingLetter`` 
    
    :param startingLetter: 
    :type startingLetter: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbolTextPlaneRelativeToArrow: CuttingPlaneSymbolBuilderTextPlaneRelativeArrow = ...
    """
    Returns or sets  the orientation of the cutting plane symbol text plane with respect to arrow plane
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbolTextPlaneRelativeToArrow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderTextPlaneRelativeArrow` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPlaneSymbolTextPlaneRelativeToArrow`` 
    
    :param textPlaneRelativeArrow: 
    :type textPlaneRelativeArrow: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilderTextPlaneRelativeArrow` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DatumLabel: str = ...
    """
    Returns or sets  the initial letter for datum labels 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumLabel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumLabel`` 
    
    :param datumLabel: 
    :type datumLabel: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DefaultPlane: PmiDefaultPlane = ...
    """
    Returns or sets  the default annotation plane for PMI symbols 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiDefaultPlane` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultPlane`` 
    
    :param defaultPlane: 
    :type defaultPlane: :py:class:`NXOpen.Annotations.PmiDefaultPlane` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DeleteEmptyUserDefinedModelViews: bool = ...
    """
    Returns or sets  the option to delete Empty User Defined Model Views in Part
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteEmptyUserDefinedModelViews`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteEmptyUserDefinedModelViews`` 
    
    :param deleteEmptyUserDefinedModelViews: 
    :type deleteEmptyUserDefinedModelViews: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DisplayEffectivityFilterNodesInPartNavigator: bool = ...
    """
    Returns  the flag indicating the display of Effectivity Filtered PMI node in Part Navigator
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayEffectivityFilterNodesInPartNavigator`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    DisplayPmiAssociatedComponentsLoadedForReference: bool = ...
    """
    Returns  the flag indicating PMI associated objects components loaded for reference
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPmiAssociatedComponentsLoadedForReference`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    DisplayPmiEffectivityMethod: DisplayPmiEffectivityMethod = ...
    """
    Returns  the value indicating precise option of PMI Effectivity for prime geometry
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPmiEffectivityMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DisplayPmiEffectivityMethod` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    DisplayPmiEffectivityReferenceMethod: DisplayPmiEffectivityMethod = ...
    """
    Returns  the value indicating precise option of PMI Effectivity for reference geometry
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPmiEffectivityReferenceMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DisplayPmiEffectivityMethod` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    DisplayPmiModelViewDisclosurePurpose: str = ...
    """
    Returns or sets  the Model View Disclosure Purpose 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPmiModelViewDisclosurePurpose`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayPmiModelViewDisclosurePurpose`` 
    
    :param purpose: 
    :type purpose: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DisplayPmiQueryDialogFromMb3: bool = ...
    """
    Returns or sets  the PMI query dialog visibility from mb3 option 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPmiQueryDialogFromMb3`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayPmiQueryDialogFromMb3`` 
    
    :param withDialog: 
    :type withDialog: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DisplayPmiUserDefinedModelViewDisclosure: bool = ...
    """
    Returns or sets  the User Defined Model View Disclosure 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPmiUserDefinedModelViewDisclosure`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayPmiUserDefinedModelViewDisclosure`` 
    
    :param withDialog: 
    :type withDialog: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    EnableResize: bool = ...
    """
    Returns  the flag indicating whether to enable resize.  
    
    If true the resize command is enabled. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableResize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LockSizeAndPosition: bool = ...
    """
    Returns or sets  the lock pan/zoom option 
    
    <hr>
    
    Getter Method
    
    Signature ``LockSizeAndPosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockSizeAndPosition`` 
    
    :param lockSizeAndPosition: 
    :type lockSizeAndPosition: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    ParallelToScreen: bool = ...
    """
    Returns or sets  the parallel to screen option 
    
    <hr>
    
    Getter Method
    
    Signature ``ParallelToScreen`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParallelToScreen`` 
    
    :param parallelToScreen: 
    :type parallelToScreen: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    PmiRegionHeight: float = ...
    """
    Returns or sets  the rectangular region height 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiRegionHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiRegionHeight`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PmiRegionInnerDiameter: float = ...
    """
    Returns or sets  the circular/annular region inner diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiRegionInnerDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiRegionInnerDiameter`` 
    
    :param innerDiameter: 
    :type innerDiameter: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PmiRegionOuterDiameter: float = ...
    """
    Returns or sets  the circular/annular region outer diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiRegionOuterDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiRegionOuterDiameter`` 
    
    :param outerDiameter: 
    :type outerDiameter: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PmiRegionWidth: float = ...
    """
    Returns or sets  the rectangular region width 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiRegionWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiRegionWidth`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PmiSupportForGeometrySharing: bool = ...
    """
    Returns  the flag indicating whether PMI support for geometry  sharing is available
    
    <hr>
    
    Getter Method
    
    Signature ``PmiSupportForGeometrySharing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RegionBoundaryColor: NXOpen.NXColor = ...
    """
    Returns or sets  the region boundary color 
    
    <hr>
    
    Getter Method
    
    Signature ``RegionBoundaryColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionBoundaryColor`` 
    
    :param boundaryColor: 
    :type boundaryColor: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RegionBoundaryFont: int = ...
    """
    Returns or sets  the region boundary font 
    
    <hr>
    
    Getter Method
    
    Signature ``RegionBoundaryFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionBoundaryFont`` 
    
    :param boundaryFont: 
    :type boundaryFont: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RegionBoundaryWidth: int = ...
    """
    Returns or sets  the region boundary width 
    
    <hr>
    
    Getter Method
    
    Signature ``RegionBoundaryWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionBoundaryWidth`` 
    
    :param boundaryWidth: 
    :type boundaryWidth: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ResizeMethod: PmiResizeMethod = ...
    """
    Returns  the resize method 
    
    <hr>
    
    Getter Method
    
    Signature ``ResizeMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PmiResizeMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ResizeOnCreate: bool = ...
    """
    Returns  the flag indicating whether to resize on create 
    
    <hr>
    
    Getter Method
    
    Signature ``ResizeOnCreate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ResizeOnViewSave: bool = ...
    """
    Returns  the flag indicating whether to resize on view save 
    
    <hr>
    
    Getter Method
    
    Signature ``ResizeOnViewSave`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RestrictCrosshatchAngle: bool = ...
    """
    Returns  the flag indicating whether PMI support for lightweight section view restrict crosshatch angle option is available
    
    <hr>
    
    Getter Method
    
    Signature ``RestrictCrosshatchAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SectionViewNamePrefix: str = ...
    """
    Returns or sets  the Section View name prefix
    
    <hr>
    
    Getter Method
    
    Signature ``SectionViewNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionViewNamePrefix`` 
    
    :param sectionViewNamePrefix: 
    :type sectionViewNamePrefix: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ShadedDisplay: bool = ...
    """
    Returns  the toggle for display through shaded models 
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SuppressRetainedPmis: bool = ...
    """
    Returns or sets  the option to suppress retained PMIs in part
    
    <hr>
    
    Getter Method
    
    Signature ``SuppressRetainedPmis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SuppressRetainedPmis`` 
    
    :param suppressRetainedPmis: 
    :type suppressRetainedPmis: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """


class SearchModelView(NXOpen.ModelingView):
    """
    Represents a search model view   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.SearchModelViewBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: SearchModelView = ...  # unknown typename


class ArrowComponent(NXOpen.TransientObject):
    """
    Represents a single arrow in an annotation and can be 
    queried for information about that arrow.  
    
    This information 
    includes  the type of arrow, the origin in absolute coordinates, 
    and the arrow angle
    
    .. versionadded:: NX6.0.2
    """
    
    def Dispose(self) -> None:
        """
        Free resources associated with the arrow component.  
        
        After this method
        is called, it is illegal to use the object.  In .NET, this method
        is automatically called when the object is deleted by the garbage
        collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    ArrowAngle: float = ...
    """
    Returns  the arrow angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowAngle`` 
    
    :returns:  the arrow angle 
    :rtype: float 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    IncludedArrowAngle: float = ...
    """
    Returns  the included arrow angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludedArrowAngle`` 
    
    :returns:  the included arrow angle 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Index: int = ...
    """
    Returns  the arrow index.  
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  the arrow index 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Origin: NXOpen.Point3d = ...
    """
    Returns  the arrow origin in absolute coordinates.  
    
    If the annotation is on a drawing, origin is returned 
    in drawing space. If the annotation is on the model,
    origin is returned in model space. 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns:  the arrow origin in absolute coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Type: ArrowheadType = ...
    """
    Returns  the arrow type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  the arrow type  
    :rtype: :py:class:`NXOpen.Annotations.ArrowheadType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """


class HoleCalloutSettingsBuilderFeaturetypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleCalloutSettingsBuilderFeaturetype():
    """
    This reprensent the option that indicates a type of hole features.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "GeneralHole", " - "
       "DrillSizeHole", " - "
       "ScrewClearanceHole", " - "
       "ThreadedHole", " - "
       "SymbolicThread", " - "
       "NotSet", " - "
    """
    GeneralHole = 0  # HoleCalloutSettingsBuilderFeaturetypeMemberType
    DrillSizeHole = 1  # HoleCalloutSettingsBuilderFeaturetypeMemberType
    ScrewClearanceHole = 2  # HoleCalloutSettingsBuilderFeaturetypeMemberType
    ThreadedHole = 3  # HoleCalloutSettingsBuilderFeaturetypeMemberType
    SymbolicThread = 4  # HoleCalloutSettingsBuilderFeaturetypeMemberType
    NotSet = 5  # HoleCalloutSettingsBuilderFeaturetypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleCalloutSettingsBuilderParametertypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleCalloutSettingsBuilderParametertype():
    """
    This reprensent the option that indicates a type of hole feature parameters.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Diameter", " - "
       "Depth", " - "
       "CounterBoreDiameter", " - "
       "CounterBoreDepth", " - "
       "CounterSinkDiameter", " - "
       "CounterSinkAngle", " - "
       "TaperAngle", " - "
       "PatternFeatureCount", " - "
       "ScrewSize", " - "
       "Fit", " - "
       "LineBreak", " - "
       "ThreadSize", " - "
       "ThreadDepth", " - "
       "Pitch", " - "
       "Angle", " - "
       "MinorDiameter", " - "
       "MajorDiameter", " - "
       "TapDrillDiameter", " - "
       "Callout", " - "
       "Length", " - "
       "ShaftSize", " - "
       "NotSet", " - "
    """
    Diameter = 0  # HoleCalloutSettingsBuilderParametertypeMemberType
    Depth = 1  # HoleCalloutSettingsBuilderParametertypeMemberType
    CounterBoreDiameter = 2  # HoleCalloutSettingsBuilderParametertypeMemberType
    CounterBoreDepth = 3  # HoleCalloutSettingsBuilderParametertypeMemberType
    CounterSinkDiameter = 4  # HoleCalloutSettingsBuilderParametertypeMemberType
    CounterSinkAngle = 5  # HoleCalloutSettingsBuilderParametertypeMemberType
    TaperAngle = 6  # HoleCalloutSettingsBuilderParametertypeMemberType
    PatternFeatureCount = 7  # HoleCalloutSettingsBuilderParametertypeMemberType
    ScrewSize = 8  # HoleCalloutSettingsBuilderParametertypeMemberType
    Fit = 9  # HoleCalloutSettingsBuilderParametertypeMemberType
    LineBreak = 10  # HoleCalloutSettingsBuilderParametertypeMemberType
    ThreadSize = 11  # HoleCalloutSettingsBuilderParametertypeMemberType
    ThreadDepth = 12  # HoleCalloutSettingsBuilderParametertypeMemberType
    Pitch = 13  # HoleCalloutSettingsBuilderParametertypeMemberType
    Angle = 14  # HoleCalloutSettingsBuilderParametertypeMemberType
    MinorDiameter = 15  # HoleCalloutSettingsBuilderParametertypeMemberType
    MajorDiameter = 16  # HoleCalloutSettingsBuilderParametertypeMemberType
    TapDrillDiameter = 17  # HoleCalloutSettingsBuilderParametertypeMemberType
    Callout = 18  # HoleCalloutSettingsBuilderParametertypeMemberType
    Length = 19  # HoleCalloutSettingsBuilderParametertypeMemberType
    ShaftSize = 20  # HoleCalloutSettingsBuilderParametertypeMemberType
    NotSet = 21  # HoleCalloutSettingsBuilderParametertypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleCalloutSettingsBuilderLeaderAttachmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleCalloutSettingsBuilderLeaderAttachment():
    """
    This reprensent the option that indicates the position for the leader to attach to.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", " - "
       "BelowBottomExtendedToMaximum", " - "
       "BelowTopExtendedToMaximum", " - "
    """
    Top = 0  # HoleCalloutSettingsBuilderLeaderAttachmentMemberType
    BelowBottomExtendedToMaximum = 1  # HoleCalloutSettingsBuilderLeaderAttachmentMemberType
    BelowTopExtendedToMaximum = 2  # HoleCalloutSettingsBuilderLeaderAttachmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleCalloutSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilder`, this builder contains list(s) of parameter(s) for feature(s).  
    
    Each feature is categorized under a feature type, indicated by :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype`.
    For each feature, parameter(s) are arranged in an array, with a starting index of zero.
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class Featuretype():
        """
        This reprensent the option that indicates a type of hole features.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "GeneralHole", " - "
           "DrillSizeHole", " - "
           "ScrewClearanceHole", " - "
           "ThreadedHole", " - "
           "SymbolicThread", " - "
           "NotSet", " - "
        """
        GeneralHole = 0  # HoleCalloutSettingsBuilderFeaturetypeMemberType
        DrillSizeHole = 1  # HoleCalloutSettingsBuilderFeaturetypeMemberType
        ScrewClearanceHole = 2  # HoleCalloutSettingsBuilderFeaturetypeMemberType
        ThreadedHole = 3  # HoleCalloutSettingsBuilderFeaturetypeMemberType
        SymbolicThread = 4  # HoleCalloutSettingsBuilderFeaturetypeMemberType
        NotSet = 5  # HoleCalloutSettingsBuilderFeaturetypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Parametertype():
        """
        This reprensent the option that indicates a type of hole feature parameters.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Diameter", " - "
           "Depth", " - "
           "CounterBoreDiameter", " - "
           "CounterBoreDepth", " - "
           "CounterSinkDiameter", " - "
           "CounterSinkAngle", " - "
           "TaperAngle", " - "
           "PatternFeatureCount", " - "
           "ScrewSize", " - "
           "Fit", " - "
           "LineBreak", " - "
           "ThreadSize", " - "
           "ThreadDepth", " - "
           "Pitch", " - "
           "Angle", " - "
           "MinorDiameter", " - "
           "MajorDiameter", " - "
           "TapDrillDiameter", " - "
           "Callout", " - "
           "Length", " - "
           "ShaftSize", " - "
           "NotSet", " - "
        """
        Diameter = 0  # HoleCalloutSettingsBuilderParametertypeMemberType
        Depth = 1  # HoleCalloutSettingsBuilderParametertypeMemberType
        CounterBoreDiameter = 2  # HoleCalloutSettingsBuilderParametertypeMemberType
        CounterBoreDepth = 3  # HoleCalloutSettingsBuilderParametertypeMemberType
        CounterSinkDiameter = 4  # HoleCalloutSettingsBuilderParametertypeMemberType
        CounterSinkAngle = 5  # HoleCalloutSettingsBuilderParametertypeMemberType
        TaperAngle = 6  # HoleCalloutSettingsBuilderParametertypeMemberType
        PatternFeatureCount = 7  # HoleCalloutSettingsBuilderParametertypeMemberType
        ScrewSize = 8  # HoleCalloutSettingsBuilderParametertypeMemberType
        Fit = 9  # HoleCalloutSettingsBuilderParametertypeMemberType
        LineBreak = 10  # HoleCalloutSettingsBuilderParametertypeMemberType
        ThreadSize = 11  # HoleCalloutSettingsBuilderParametertypeMemberType
        ThreadDepth = 12  # HoleCalloutSettingsBuilderParametertypeMemberType
        Pitch = 13  # HoleCalloutSettingsBuilderParametertypeMemberType
        Angle = 14  # HoleCalloutSettingsBuilderParametertypeMemberType
        MinorDiameter = 15  # HoleCalloutSettingsBuilderParametertypeMemberType
        MajorDiameter = 16  # HoleCalloutSettingsBuilderParametertypeMemberType
        TapDrillDiameter = 17  # HoleCalloutSettingsBuilderParametertypeMemberType
        Callout = 18  # HoleCalloutSettingsBuilderParametertypeMemberType
        Length = 19  # HoleCalloutSettingsBuilderParametertypeMemberType
        ShaftSize = 20  # HoleCalloutSettingsBuilderParametertypeMemberType
        NotSet = 21  # HoleCalloutSettingsBuilderParametertypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LeaderAttachment():
        """
        This reprensent the option that indicates the position for the leader to attach to.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", " - "
           "BelowBottomExtendedToMaximum", " - "
           "BelowTopExtendedToMaximum", " - "
        """
        Top = 0  # HoleCalloutSettingsBuilderLeaderAttachmentMemberType
        BelowBottomExtendedToMaximum = 1  # HoleCalloutSettingsBuilderLeaderAttachmentMemberType
        BelowTopExtendedToMaximum = 2  # HoleCalloutSettingsBuilderLeaderAttachmentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetListOfFeatures(self) -> 'list[HoleCalloutSettingsBuilderFeaturetype]':
        """
        Gets the list of features.  
        
        Signature ``GetListOfFeatures()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetListOfParameters(self, featureType: HoleCalloutSettingsBuilderFeaturetype) -> 'list[HoleCalloutSettingsBuilderParametertype]':
        """
        Gets the list of parameters for feature type.  
        
        Signature ``GetListOfParameters(featureType)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderParametertype` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ReorderParameters(self, featureType: HoleCalloutSettingsBuilderFeaturetype, parameters: 'list[HoleCalloutSettingsBuilderParametertype]') -> bool:
        """
        Reorder the parameters based on the input.  
        
        This function only works if all input parameters exist in the builder and all builder parameters exist in the input. 
        
        Signature ``ReorderParameters(featureType, parameters)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param parameters: 
        :type parameters: list of :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderParametertype` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ShiftUp(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> None:
        """
        If the position of the nth hole feature parameter of feature type can be shifted up, shifts it up by one.  
        
        To shift up the third parameter of feature type :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, for instance, use the API:
        :py:meth:`NXOpen.Annotations.HoleCalloutSettingsBuilder.ShiftUp`(:py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, 2)
        
        Signature ``ShiftUp(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ShiftDown(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> None:
        """
        If the position of the nth hole feature parameter of feature type can be shifted down, shifts it down by one.  
        
        To shift down the first parameter of feature type :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, for instance, use the API:
        :py:meth:`NXOpen.Annotations.HoleCalloutSettingsBuilder.ShiftDown`(:py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, 0)
        
        Signature ``ShiftDown(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InsertLineBreak(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> None:
        """
        If a line break can be inserted immediately after the nth hole feature parameter of feature type, inserts a line break at that position.  
        
        To insert a line break after the fourth parameter of feature type :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, for instance, use the API:
        :py:meth:`NXOpen.Annotations.HoleCalloutSettingsBuilder.InsertLineBreak`(:py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, 3)
        
        Signature ``InsertLineBreak(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def DeleteLineBreak(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> None:
        """
        If the nth hole feature parameter of feature type is a line break and it can be deleted, deletes it.  
        
        To delete the second parameter of feature type :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, for instance, use the API:
        :py:meth:`NXOpen.Annotations.HoleCalloutSettingsBuilder.DeleteLineBreak`(:py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype.GeneralHole <NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype>`, 1)
        
        Signature ``DeleteLineBreak(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetNthParameterDisplay(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> bool:
        """
        Gets the display status of the nth hole feature parameter of feature type.  
        
        Signature ``GetNthParameterDisplay(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNthParameterDisplay(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int, parameterDisplay: bool) -> None:
        """
        Sets the display status of the nth hole feature parameter of feature type.  
        
        Signature ``SetNthParameterDisplay(featureType, nth, parameterDisplay)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :param parameterDisplay: 
        :type parameterDisplay: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetNthParameterValue(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int, value: str) -> None:
        """
        Sets the parameter expression of the nth hole feature parameter of feature type.  
        
        Signature ``SetNthParameterValue(featureType, nth, value)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNthParameterValue(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> str:
        """
        Gets the parameter expression of the nth hole feature parameter of feature type.  
        
        Signature ``GetNthParameterValue(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNthParameterValueString(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> str:
        """
        Gets the parameter string representation of the nth hole feature parameter of feature type.  
        
        Differs from :py:meth:`NXOpen.Annotations.HoleCalloutSettingsBuilder.GetNthParameterValue` in that certain parameters which do not have a parameter value still have
        a string representation. This API will return that string representation instead of an empty string. 
        
        Signature ``GetNthParameterValueString(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetNthParameterPrefix(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int, lines: 'list[str]') -> None:
        """
        If the prefix of the nth hole feature parameter of feature type can be edited, sets its prefix.  
        
        Signature ``SetNthParameterPrefix(featureType, nth, lines)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetNthParameterPrefix(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> 'list[str]':
        """
        If the nth hole feature parameter of feature type can have prefix, gets its prefix.  
        
        Signature ``GetNthParameterPrefix(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNthParameterSuffix(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int, lines: 'list[str]') -> None:
        """
        If the suffix of the nth hole feature parameter of feature type can be edited, sets its suffix.  
        
        Signature ``SetNthParameterSuffix(featureType, nth, lines)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetNthParameterSuffix(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> 'list[str]':
        """
        If the nth hole feature parameter of feature type can have suffix, gets its suffix.  
        
        Signature ``GetNthParameterSuffix(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNthParameterStyle(self, featureType: HoleCalloutSettingsBuilderFeaturetype, nth: int) -> StyleBuilder:
        """
        Gets the parameter style of the nth hole feature parameter of feature type.  
        
        Signature ``GetNthParameterStyle(featureType, nth)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetFromFeature(self, feature: NXOpen.Features.Feature, partOccurrence: NXOpen.Assemblies.Component, view: NXOpen.View, pickPoint: NXOpen.Point3d) -> None:
        """
        Reset the builder data based on a feature if the feature is a hole feature.  
        
        Signature ``ResetFromFeature(feature, partOccurrence, view, pickPoint)`` 
        
        :param feature: 
        :type feature: :py:class:`NXOpen.Features.Feature` 
        :param partOccurrence: 
        :type partOccurrence: :py:class:`NXOpen.Assemblies.Component` 
        :param view: 
        :type view: :py:class:`NXOpen.View` 
        :param pickPoint:  selected object point 
        :type pickPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetParameterSpaceFactor(self) -> float:
        """
        Gets the parameter space factor, which defines the horizontal space between parameters.  
        
        Signature ``GetParameterSpaceFactor()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetParameterSpaceFactor(self, parameterSpaceFactor: float) -> None:
        """
        Sets the parameter space factor, which defines the horizontal space between parameters.  
        
        The parameter space factor cannot be less than zero.
        
        Signature ``SetParameterSpaceFactor(parameterSpaceFactor)`` 
        
        :param parameterSpaceFactor: 
        :type parameterSpaceFactor: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetLineSpaceFactor(self) -> float:
        """
        Gets the line space factor, which defines the vertical space between parameters.  
        
        Signature ``GetLineSpaceFactor()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLineSpaceFactor(self, lineSpaceFactor: float) -> None:
        """
        Sets the line space factor, which defines the vertical space between parameters.  
        
        The line space factor cannot be less than zero.
        
        Signature ``SetLineSpaceFactor(lineSpaceFactor)`` 
        
        :param lineSpaceFactor: 
        :type lineSpaceFactor: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetLeaderAttachment(self) -> HoleCalloutSettingsBuilderLeaderAttachment:
        """
        Gets the leader attachment, which decides where the leader is attached to the call out.  
        
        Signature ``GetLeaderAttachment()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderLeaderAttachment` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLeaderAttachment(self, leaderAttachment: HoleCalloutSettingsBuilderLeaderAttachment) -> None:
        """
        Sets the leader attachment, which decides where the leader is attached to the call out.  
        
        Signature ``SetLeaderAttachment(leaderAttachment)`` 
        
        :param leaderAttachment: 
        :type leaderAttachment: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderLeaderAttachment` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetThroughHoleTextOfType(self, featureType: HoleCalloutSettingsBuilderFeaturetype) -> str:
        """
        Get Through Hole Text String.  
        
        Signature ``GetThroughHoleTextOfType(featureType)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetThroughHoleTextOfType(self, featureType: HoleCalloutSettingsBuilderFeaturetype, throughHoleTextString: str) -> None:
        """
        Set Through Hole Text String.  
        
        Signature ``SetThroughHoleTextOfType(featureType, throughHoleTextString)`` 
        
        :param featureType: 
        :type featureType: :py:class:`NXOpen.Annotations.HoleCalloutSettingsBuilderFeaturetype` 
        :param throughHoleTextString: 
        :type throughHoleTextString: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: HoleCalloutSettingsBuilder = ...  # unknown typename


class SelectAnnotation(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Annotation) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Annotation) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Annotation, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Annotation` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Annotation, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Annotation, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.Annotation` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.Annotation` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Annotation, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Annotation` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Annotation:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Annotation) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Annotations.Annotation`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Annotations.Annotation`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Annotations.Annotation`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Annotations.Annotation`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Annotation = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Annotations.Annotation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Annotations.Annotation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectAnnotation = ...  # unknown typename


class SymbolMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Symbol():
    """
    Specifies the elementary weld symbol 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Speifies no weld symbol"
       "ButtWithRaisedEdges", "Specifies butt weld with raised edges"
       "SingleFlange", "Specifiies single flange weld symbol (JIS only)"
       "SquareButt", "Specifies square butt weld symbol"
       "VButt", "Specifies V butt weld symbol"
       "VButtBroadRootFace", "Specifies V butt with broad root face weld symbol (ISO and DIN only)"
       "BevelButt", "Specifies bevel butt weld symbol"
       "BevelButtBroadRootFace", "Specifies bevel butt with broad root face weld symbol (ISO and DIN only)"
       "UButt", "Specifies U butt weld symbol"
       "JButt", "Specifies J buttt weld symbol"
       "FlareV", "Specifies flare V weld symbol"
       "FlareBevel", "Specifies flare bevel weld symbol"
       "KGroove", "Specifies K-Groove weld symbol"
       "Fillet", "Specifies fillet weld symbol"
       "Stake", "Specifies fillet weld symbol"
       "PlugSlot", "Specifies plug/slot weld symbol"
       "Edge", "Specifies edge weld symbol"
       "Edge2", "Specifies edge2 weld symbol"
       "Spot", "Specifies spot weld symbol"
       "Spot2", "Specifies spot2 weld symbol"
       "Seam", "Specfies seam weld symbol"
       "Seam2", "Specfies seam2 weld symbol"
       "SteepFlankedV", "Specifies steep flanked V butt weld symbol (ISO and DIN only)"
       "SteepFlankedBevel", "Specifies steeep flanked bevel butt weld symbol ( ISO and DIN only)"
       "Backing", "Specifies backing weld symbol (only one side of reference line )"
       "SurfaceJoint", "Specifies surface joint weld symbol (ISO and DIN only )"
       "SolderedJoint", "Specifies soldered joint weld symbol"
       "InclinedJoint", "Specifies inclined joint weld symbol"
       "FoldJoint", "Specifies fold joint weld symbol (ISO and DIN only, only on one side of reference line)"
       "Stud", "Specifies stud weld symbol (Arrow side only )"
       "Surfacing", "Specifies surfacing weld symbol (ISO and DIN only)"
       "Intermittent", "Specifies intermittent weld symbol (ESKD only)"
       "BackingPlate", "Specifies backing plate weld symbol (GB only)"
       "NotSpecified", "Specifies weld symbol not specified"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # SymbolMemberType
    ButtWithRaisedEdges = 1  # SymbolMemberType
    SingleFlange = 2  # SymbolMemberType
    SquareButt = 3  # SymbolMemberType
    VButt = 4  # SymbolMemberType
    VButtBroadRootFace = 5  # SymbolMemberType
    BevelButt = 6  # SymbolMemberType
    BevelButtBroadRootFace = 7  # SymbolMemberType
    UButt = 8  # SymbolMemberType
    JButt = 9  # SymbolMemberType
    FlareV = 10  # SymbolMemberType
    FlareBevel = 11  # SymbolMemberType
    KGroove = 12  # SymbolMemberType
    Fillet = 13  # SymbolMemberType
    Stake = 14  # SymbolMemberType
    PlugSlot = 15  # SymbolMemberType
    Edge = 16  # SymbolMemberType
    Edge2 = 17  # SymbolMemberType
    Spot = 18  # SymbolMemberType
    Spot2 = 19  # SymbolMemberType
    Seam = 20  # SymbolMemberType
    Seam2 = 21  # SymbolMemberType
    SteepFlankedV = 22  # SymbolMemberType
    SteepFlankedBevel = 23  # SymbolMemberType
    Backing = 24  # SymbolMemberType
    SurfaceJoint = 25  # SymbolMemberType
    SolderedJoint = 26  # SymbolMemberType
    InclinedJoint = 27  # SymbolMemberType
    FoldJoint = 28  # SymbolMemberType
    Stud = 29  # SymbolMemberType
    Surfacing = 30  # SymbolMemberType
    Intermittent = 31  # SymbolMemberType
    BackingPlate = 32  # SymbolMemberType
    NotSpecified = 33  # SymbolMemberType
    Last = 34  # SymbolMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiFilterByView(PmiFilter):
    """
    Represents a PMI filter defined by a set of views.  
    
    .. versionadded:: NX4.0.0
    """
    
    def GetPmiViews(self) -> 'list[str]':
        """
        Gets the model views defined by the PMI filter.  
        
        Signature ``GetPmiViews()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPmiViews(self, views: 'list[str]') -> None:
        """
        Sets the model views on the PMI filter.  
        
        Signature ``SetPmiViews(views)`` 
        
        :param views: 
        :type views: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddPmiView(self, view: str) -> None:
        """
        Add a model view to the filter.  
        
        Signature ``AddPmiView(view)`` 
        
        :param view: 
        :type view: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    Null: PmiFilterByView = ...  # unknown typename


class DimensionPreferences(NXOpen.TransientObject):
    """
    Represents dimension preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUnitsFormatPreferences(self) -> UnitsFormatPreferences:
        """
        Returns the units and format preferences  
        
        Signature ``GetUnitsFormatPreferences()`` 
        
        :returns:  Units and Format preferences  
        :rtype: :py:class:`NXOpen.Annotations.UnitsFormatPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUnitsFormatPreferences(self, preferences: UnitsFormatPreferences) -> None:
        """
        Sets the units and format preferences 
        
        Signature ``SetUnitsFormatPreferences(preferences)`` 
        
        :param preferences:  New Units and Format preferences  
        :type preferences: :py:class:`NXOpen.Annotations.UnitsFormatPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNarrowDimensionPreferences(self) -> NarrowDimensionPreferences:
        """
        Returns the narrow dimension preferences  
        
        Signature ``GetNarrowDimensionPreferences()`` 
        
        :returns:  Narrow dimension preferences  
        :rtype: :py:class:`NXOpen.Annotations.NarrowDimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNarrowDimensionPreferences(self, preferences: NarrowDimensionPreferences) -> None:
        """
        Sets the narrow dimension preferences 
        
        Signature ``SetNarrowDimensionPreferences(preferences)`` 
        
        :param preferences:  New narrow dimension preferences  
        :type preferences: :py:class:`NXOpen.Annotations.NarrowDimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDiameterRadiusPreferences(self) -> DiameterRadiusPreferences:
        """
        Returns the diameter and radius preferences  
        
        Signature ``GetDiameterRadiusPreferences()`` 
        
        :returns:  Diameter and Radius preferences  
        :rtype: :py:class:`NXOpen.Annotations.DiameterRadiusPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDiameterRadiusPreferences(self, preferences: DiameterRadiusPreferences) -> None:
        """
        Sets the diameter and radius preferences 
        
        Signature ``SetDiameterRadiusPreferences(preferences)`` 
        
        :param preferences:  New diameter and radius preferences  
        :type preferences: :py:class:`NXOpen.Annotations.DiameterRadiusPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetChamferDimensionPreferences(self) -> ChamferDimensionPreferences:
        """
        Returns the chamfer dimension preferences  
        
        Signature ``GetChamferDimensionPreferences()`` 
        
        :returns:  Chamfer dimension preferences  
        :rtype: :py:class:`NXOpen.Annotations.ChamferDimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetChamferDimensionPreferences(self, preferences: ChamferDimensionPreferences) -> None:
        """
        Sets the chamfer dimension preferences 
        
        Signature ``SetChamferDimensionPreferences(preferences)`` 
        
        :param preferences:  New chamfer dimension preferences  
        :type preferences: :py:class:`NXOpen.Annotations.ChamferDimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOrdinateDimensionPreferences(self) -> OrdinateDimensionPreferences:
        """
        Returns the ordinate dimension preferences  
        
        Signature ``GetOrdinateDimensionPreferences()`` 
        
        :returns:  Ordinate dimension preferences  
        :rtype: :py:class:`NXOpen.Annotations.OrdinateDimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOrdinateDimensionPreferences(self, preferences: OrdinateDimensionPreferences) -> None:
        """
        Sets the ordinate dimension preferences 
        
        Signature ``SetOrdinateDimensionPreferences(preferences)`` 
        
        :param preferences:  New ordinate dimension preferences  
        :type preferences: :py:class:`NXOpen.Annotations.OrdinateDimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    ArrowDisplay: ArrowDisplay = ...
    """
    Returns or sets  the arrow display 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowDisplay`` 
    
    :returns:  Arrow display  
    :rtype: :py:class:`NXOpen.Annotations.ArrowDisplay` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowDisplay`` 
    
    :param display:  New arrow display  
    :type display: :py:class:`NXOpen.Annotations.ArrowDisplay` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    BaselineOffset: float = ...
    """
    Returns or sets  the offset between dimension lines of baseline dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineOffset`` 
    
    :returns:  Baseline offset  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineOffset`` 
    
    :param baselineOffset:  New baseline offset  
    :type baselineOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ChainOffset: float = ...
    """
    Returns or sets  the offset between dimension lines of chain dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``ChainOffset`` 
    
    :returns:  Chain offset  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChainOffset`` 
    
    :param chainOffset:  New chain offset  
    :type chainOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DisplayFitParentheses: bool = ...
    """
    Returns or sets  the flag indicating whether to display parentheses for fit tolerance.  
    
    If the value is true, the tolerance
    text will have parentheses shown on text render.  Otherwise, a blank space will be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayFitParentheses`` 
    
    :returns:  Flag indicating whether to display assembly tolerance parentheses  
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayFitParentheses`` 
    
    :param displayFitParentheses:  Flag indicating whether to display assembly tolerance parentheses  
    :type displayFitParentheses: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayFitSeparator: bool = ...
    """
    Returns or sets  the flag indicating whether to display separator for fit tolerance of assembly dimensions.  
    
    When the
    limit fit type is FIT and the value is true, a line will be drawn to separate the hole and shaft tolerance texts. 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayFitSeparator`` 
    
    :returns:  Flag indicating whether to display assembly tolerance separator  
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayFitSeparator`` 
    
    :param displayFitSeparator:  Flag indicating whether to display assembly tolerance separator  
    :type displayFitSeparator: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DisplayLineBetweenArrows: bool = ...
    """
    Returns or sets  the flag indicating whether to display line between arrows 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayLineBetweenArrows`` 
    
    :returns:  Flag indicating whether to display line between arrows  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayLineBetweenArrows`` 
    
    :param displayLineBetweenArrows:  Flag indicating whether to display line between arrows  
    :type displayLineBetweenArrows: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DualDimensionFractionDenominator: FractionDenominatorFormat = ...
    """
    Returns or sets  the dual dimension and tolerance fraction denominator 
    
    <hr>
    
    Getter Method
    
    Signature ``DualDimensionFractionDenominator`` 
    
    :returns:  Dual dimension and tolerance fraction denominator  
    :rtype: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DualDimensionFractionDenominator`` 
    
    :param fractionDenominator:  New dual dimension and tolerance fraction denominator  
    :type fractionDenominator: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ExtensionLineDisplay: ExtensionLineDisplay = ...
    """
    Returns or sets  the extension line display  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionLineDisplay`` 
    
    :returns:  Extension line display  
    :rtype: :py:class:`NXOpen.Annotations.ExtensionLineDisplay` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionLineDisplay`` 
    
    :param display:  New extension line display  
    :type display: :py:class:`NXOpen.Annotations.ExtensionLineDisplay` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    IsInspectionDimension: bool = ...
    """
    Returns or sets  the flag indicating whether the dimension is an inspection dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``IsInspectionDimension`` 
    
    :returns:  Flag indicating whether dimension is inspection dimension  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsInspectionDimension`` 
    
    :param inspectionDimension:  Flag indicating whether dimension is inspection dimension  
    :type inspectionDimension: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    IsReferenceDimension: bool = ...
    """
    Returns or sets  the flag indicating whether the dimension is a reference dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``IsReferenceDimension`` 
    
    :returns:  Flag indicating whether dimension is reference dimension  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsReferenceDimension`` 
    
    :param referenceDimension:  Flag indicating whether dimension is reference dimension  
    :type referenceDimension: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LimitFitAnsiHoleType: FitAnsiHoleType = ...
    """
    Returns or sets  the tolerance limit fit ANSI hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :returns:  Limit fit tolerance ANSI hole type  
    :rtype: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAnsiHoleType`` 
    
    :param fitHoleType:  New limit tolerance ANSI hole type  
    :type fitHoleType: :py:class:`NXOpen.Annotations.FitAnsiHoleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitAssemblyDisplayStyle: FitAssemblyDisplayStyle = ...
    """
    Returns or sets  the display style of fit tolerance for assembly dimensions.  
    
    When the limit fit type is FIT,
    the display can be on a single line, or two lines centered with the dimension text or
    two lines with the shaft text in line with the dimension text.
    This property is obsolete.
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAssemblyDisplayStyle`` 
    
    :returns:  Limit fit assembly display style  
    :rtype: :py:class:`NXOpen.Annotations.FitAssemblyDisplayStyle` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionPreferences.LimitFitAssemblyNewDisplayStyle` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAssemblyDisplayStyle`` 
    
    :param fitAssemblyDisplayStyle:  New limit assembly display style  
    :type fitAssemblyDisplayStyle: :py:class:`NXOpen.Annotations.FitAssemblyDisplayStyle` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Annotations.DimensionPreferences.LimitFitAssemblyNewDisplayStyle` instead.
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitAssemblyNewDisplayStyle: FitAssemblyNewDisplayStyle = ...
    """
    Returns or sets  the new display style of fit tolerance for assembly dimensions.  
    
    When the limit fit type is FIT,
    the display can be on a single line or double line 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitAssemblyNewDisplayStyle`` 
    
    :returns:  Limit fit assembly display style  
    :rtype: :py:class:`NXOpen.Annotations.FitAssemblyNewDisplayStyle` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitAssemblyNewDisplayStyle`` 
    
    :param fitAssemblyDisplayStyle:  New limit assembly display style  
    :type fitAssemblyDisplayStyle: :py:class:`NXOpen.Annotations.FitAssemblyNewDisplayStyle` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDeviation: str = ...
    """
    Returns or sets  the tolerance limit fit deviation 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDeviation`` 
    
    :returns:  Limit fit deviation  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDeviation`` 
    
    :param fitDeviation:  New limit fit deviation  
    :type fitDeviation: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplayAlignment: FitDisplayAlignment = ...
    """
    Returns or sets  the dimension limit fit display alignment.  
    
    When the limit fit type is FIT, the hole and shaft tolerances
    can be aligned as centered value, centered value and fit or bottom
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplayAlignment`` 
    
    :returns:  Limit fit display alignment  
    :rtype: :py:class:`NXOpen.Annotations.FitDisplayAlignment` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplayAlignment`` 
    
    :param fitDisplayAlignment:  New limit fit display alignment  
    :type fitDisplayAlignment: :py:class:`NXOpen.Annotations.FitDisplayAlignment` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplaySplitByDimline: FitDisplaySplitByDimline = ...
    """
    Returns or sets  the dimension limit fit assembly display when split by dimension line.  
    
    When the limit fit type is FIT or layout is SINGLE LINE, the hole and shaft tolerances can be shown 
    without any split, splitting tolerance by the dimension line or splitting tolerance and value by the dimension line 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplaySplitByDimline`` 
    
    :returns:  Limit fit display when split by dimension line  
    :rtype: :py:class:`NXOpen.Annotations.FitDisplaySplitByDimline` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplaySplitByDimline`` 
    
    :param fitDisplaySplitByDimline:  New limit fit display when split by dimension line  
    :type fitDisplaySplitByDimline: :py:class:`NXOpen.Annotations.FitDisplaySplitByDimline` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitDisplayStyle: FitDisplayStyle = ...
    """
    Returns or sets  the tolerance limit fit display style 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :returns:  Limit fit tolerance display style  
    :rtype: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitDisplayStyle`` 
    
    :param fitDisplayStyle:  New limit tolerance display style  
    :type fitDisplayStyle: :py:class:`NXOpen.Annotations.FitDisplayStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitGrade: int = ...
    """
    Returns or sets  the tolerance limit fit grade 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitGrade`` 
    
    :returns:  Limit fit grade  
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitGrade`` 
    
    :param fitGrade:  New Limit fit grade  
    :type fitGrade: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitShaftDeviation: str = ...
    """
    Returns or sets  the shaft deviation for fit tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitShaftDeviation`` 
    
    :returns:  Shaft deviation for fit tolerance  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitShaftDeviation`` 
    
    :param fitShaftDeviation:  New shaft deviation for fit tolerance 
    :type fitShaftDeviation: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    LimitFitShaftGrade: int = ...
    """
    Returns or sets  the shaft grade for fit tolerance
    
    <hr>
    
    Getter Method
    
    Signature ``LimitFitShaftGrade`` 
    
    :returns:  Shaft grade for fit tolerance  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitFitShaftGrade`` 
    
    :param fitShaftGrade:  New shaft grade for fit tolerance  
    :type fitShaftGrade: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    PrefixSuffixReference: bool = ...
    """
    Returns or sets  the flag indicating whether prefix suffix reference toggle is turned on or not 
    
    <hr>
    
    Getter Method
    
    Signature ``PrefixSuffixReference`` 
    
    :returns:  flag for prefix suffix reference  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrefixSuffixReference`` 
    
    :param prefixSuffixReference:  flag for prefix suffix reference  
    :type prefixSuffixReference: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PrimaryDimensionFractionDenominator: FractionDenominatorFormat = ...
    """
    Returns or sets  the primary dimension and tolerance fraction denominator 
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryDimensionFractionDenominator`` 
    
    :returns:  Primary dimension and tolerance fraction denominator  
    :rtype: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryDimensionFractionDenominator`` 
    
    :param fractionDenominator:  New primary dimension and tolerance fraction denominator  
    :type fractionDenominator: :py:class:`NXOpen.Annotations.FractionDenominatorFormat` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ReferenceDimensionPrefix: str = ...
    """
    Returns or sets  the prefix characters for reference dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDimensionPrefix`` 
    
    :returns:  String indicating prefix characters for reference dimension  
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDimensionPrefix`` 
    
    :param prefix:  New prefix characters for reference dimension  
    :type prefix: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReferenceDimensionSuffix: str = ...
    """
    Returns or sets  the suffix characters for reference dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDimensionSuffix`` 
    
    :returns:  String indicating suffix characters for reference dimension  
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDimensionSuffix`` 
    
    :param suffix:  New suffix characters for reference dimension  
    :type suffix: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReverseArrowDirection: bool = ...
    """
    Returns or sets  the flag indicating whether the Reverse Arrow Direction is set on dimension or not
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseArrowDirection`` 
    
    :returns:  Flag for reverse arrow direction   
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseArrowDirection`` 
    
    :param reverseArrowDirection:  New flag for reverse arrow direction  
    :type reverseArrowDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TextOrienationAngle: float = ...
    """
    Returns or sets  the angle if text orientation is 
    :py:class:`NXOpen.Annotations.TextOrientation.ByAngle <NXOpen.Annotations.TextOrientation>` 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOrienationAngle`` 
    
    :returns:  Dimension text orientation angle  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOrienationAngle`` 
    
    :param textOrientationAngle:  New dimension text orienation angle  
    :type textOrientationAngle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TextOrientation: TextOrientation = ...
    """
    Returns or sets  the text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOrientation`` 
    
    :returns:  Dimension text orientation  
    :rtype: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOrientation`` 
    
    :param orientation:  New dimension text orientation  
    :type orientation: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TextPlacement: TextPlacement = ...
    """
    Returns or sets  the dimension text placement 
    
    <hr>
    
    Getter Method
    
    Signature ``TextPlacement`` 
    
    :returns:  Dimension text placement  
    :rtype: :py:class:`NXOpen.Annotations.TextPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextPlacement`` 
    
    :param placement:  New dimension text placement  
    :type placement: :py:class:`NXOpen.Annotations.TextPlacement` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TextPosition: TextPosition = ...
    """
    Returns or sets  the text position representing above or after stub 
    
    <hr>
    
    Getter Method
    
    Signature ``TextPosition`` 
    
    :returns:  Dimension text position  
    :rtype: :py:class:`NXOpen.Annotations.TextPosition` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextPosition`` 
    
    :param textPosition:  New dimension text position  
    :type textPosition: :py:class:`NXOpen.Annotations.TextPosition` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TrimDimensionLineStyle: TrimDimensionLineStyle = ...
    """
    Returns or sets  the trim dimension line style 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimDimensionLineStyle`` 
    
    :returns:  Whether Dimension line will be trimmed when text crosses both extension lines  
    :rtype: :py:class:`NXOpen.Annotations.TrimDimensionLineStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimDimensionLineStyle`` 
    
    :param trimDimLine:  Whether Dimension line will be trimmed when text crosses both extension lines  
    :type trimDimLine: :py:class:`NXOpen.Annotations.TrimDimensionLineStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TrueLengthText: str = ...
    """
    Returns or sets  the flag indicating true-length text for the dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``TrueLengthText`` 
    
    :returns:  String indicating true length text for dimension  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrueLengthText`` 
    
    :param trueLengthText:  String indicating true length text for dimension  
    :type trueLengthText: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TrueLengthTextPosition: TrueLengthTextPosition = ...
    """
    Returns or sets  the True Length Text Position 
    
    <hr>
    
    Getter Method
    
    Signature ``TrueLengthTextPosition`` 
    
    :returns:  True length Text position  
    :rtype: :py:class:`NXOpen.Annotations.TrueLengthTextPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrueLengthTextPosition`` 
    
    :param trueLengthTextPosition:  New True length Text position  
    :type trueLengthTextPosition: :py:class:`NXOpen.Annotations.TrueLengthTextPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ZeroToleranceDisplayStyle: ZeroToleranceDisplayStyle = ...
    """
    Returns or sets  the zero tolerance display style 
    
    <hr>
    
    Getter Method
    
    Signature ``ZeroToleranceDisplayStyle`` 
    
    :returns:  Zero tolerance display style  
    :rtype: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Annotations.LinearTolerance.ZeroToleranceDisplayStyle` for linear dimensions and :py:meth:`NXOpen.Annotations.AngularTolerance.ZeroToleranceDisplayStyle` for angular dimensions instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZeroToleranceDisplayStyle`` 
    
    :param zeroDisplayStyle: 
    :type zeroDisplayStyle: :py:class:`NXOpen.Annotations.ZeroToleranceDisplayStyle` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Annotations.LinearTolerance.SetZeroToleranceDisplayStyle` for linear dimensions and :py:meth:`NXOpen.Annotations.AngularTolerance.SetZeroToleranceDisplayStyle` for angular dimensions instead.
    
    License requirements: None.
    """


class CircleCenterline(Centerline):
    """
    Represents a CircleCenterline centerline   
    
    This is an abstract class.
    
    .. versionadded:: NX6.0.0
    """
    Null: CircleCenterline = ...  # unknown typename


class BaseBoltCircleCenterline(CircleCenterline):
    """
    Represents a base bolt centerline class   
    
    This is an abstract class.
    
    .. versionadded:: NX12.0.0
    """
    Null: BaseBoltCircleCenterline = ...  # unknown typename


class BoltCircleCenterline(BaseBoltCircleCenterline):
    """
    Represents a BoltCircleCenterline centerline   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.BoltCircleCenterlineBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: BoltCircleCenterline = ...  # unknown typename


class PmiAttributeValueList(PmiAttributeValue):
    """
    Represents a PMI Attribute List Value   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiAttributeValueListBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttributeValueList = ...  # unknown typename


class PmiVerticalDimension(BaseVerticalDimension):
    """
    Represents a PMI vertical dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiLinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiVerticalDimension = ...  # unknown typename


class ICircularTarget(NXOpen.INXObject):
    """
    Represents interface class for a circular datum target   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class CircularCenterline(CircleCenterline):
    """
    Represents a CircularCenterline centerline   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.CircularCenterlineBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CircularCenterline = ...  # unknown typename


class PmiCenterMarkBuilder(BaseCenterMarkBuilder):
    """
    Builder for creating PMI Center Mark.  
    
    It creates or edits PMI Center Marks 
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreatePmiCenterMarkBuilder`
    
    Default values.
    
    ====================  ======
    Property              Value
    ====================  ======
    MultipleCenterMarks   false 
    ====================  ======
    
    .. versionadded:: NX7.5.0
    """
    AssociatedObjects: AssociatedObjectsBuilder = ...
    """
    Returns  the associated objects for the center mark
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AssociatedObjectsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Plane: PlaneBuilder = ...
    """
    Returns  the plane for the creation of center mark 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.PlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PmiCenterMarkBuilder = ...  # unknown typename


class SymbolCatalogBuilder(NXOpen.Builder):
    """
    Represents a builder to instantiate a symbol from a parameterized family of standard 
    symbols defined in catalogs, e.g. for standard fasteners. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CustomSymbolCollection.CreateSymbolCatalogBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def GenerateItemNumber(self) -> None:
        """
        Generates the item number, valid in team center 
        
        Signature ``GenerateItemNumber()`` 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.SymbolCatalogBuilder.ItemNumber` instead.
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def GenerateRevision(self) -> None:
        """
        Generates the revision number, valid in team center 
        
        Signature ``GenerateRevision()`` 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Annotations.SymbolCatalogBuilder.Revision` instead.
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def NewParameter(self) -> SymbolCatalogParameterBuilder:
        """
        Creates a :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` object.  
        
        Signature ``NewParameter()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def SetPartOperationCreateBuilder(self, partOperationBuilder: NXOpen.PDM.PartOperationCreateBuilder) -> None:
        """
        Sets :py:class:`NXOpen.PDM.PartOperationBuilder` 
        
        Signature ``SetPartOperationCreateBuilder(partOperationBuilder)`` 
        
        :param partOperationBuilder: 
        :type partOperationBuilder: :py:class:`NXOpen.PDM.PartOperationCreateBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetPartOperationCreateBuilder(self) -> NXOpen.PDM.PartOperationCreateBuilder:
        """
        Gets :py:class:`NXOpen.PDM.PartOperationBuilder`  
        
        Signature ``GetPartOperationCreateBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.PDM.PartOperationCreateBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    IsPartSymbol: bool = ...
    """
    Returns or sets  the variable of is part symbol or not, get it from the reuse library
    
    <hr>
    
    Getter Method
    
    Signature ``IsPartSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsPartSymbol`` 
    
    :param isPartSymbol:  True If it is part symbol 
    :type isPartSymbol: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    ItemName: str = ...
    """
    Returns or sets  the Item Name, valid in team center 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemName`` 
    
    :param itemName: 
    :type itemName: str 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: nx_layout ("NX Layout")
    """
    ItemNumber: str = ...
    """
    Returns or sets  the item number, valid in team center 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemNumber`` 
    
    :param itemNumber: 
    :type itemNumber: str 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: nx_layout ("NX Layout")
    """
    NodeString: str = ...
    """
    Returns or sets  the node string of the fastener symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``NodeString`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NodeString`` 
    
    :param nodeString: 
    :type nodeString: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    ParameterList: SymbolCatalogParameterBuilderList = ...
    """
    Returns  the list containing the parameters used to create the symbol.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SymbolCatalogParameterBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PartFileName: str = ...
    """
    Returns or sets  the part file name 
    
    <hr>
    
    Getter Method
    
    Signature ``PartFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartFileName`` 
    
    :param partFileName: 
    :type partFileName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Path: str = ...
    """
    Returns or sets  the path, get it from the reuse library 
    
    <hr>
    
    Getter Method
    
    Signature ``Path`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Path`` 
    
    :param path:  location of symbol  
    :type path: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Revision: str = ...
    """
    Returns or sets  the revision, valid in team center 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.PDM.PartOperationCreateBuilder` instead.
    
    License requirements: nx_layout ("NX Layout")
    """
    SymbolName: str = ...
    """
    Returns or sets  the name of the symbol.  
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolName`` 
    
    :param symbolName: 
    :type symbolName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: SymbolCatalogBuilder = ...  # unknown typename


class EnterpriseIdentificationBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.EnterpriseIdentification` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateEnterpriseIdentificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetCompanyAddress(self) -> 'list[str]':
        """
        Returns the company address  
        
        Signature ``GetCompanyAddress()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCompanyAddress(self, companyAddress: 'list[str]') -> None:
        """
        Sets the company address 
        
        Signature ``SetCompanyAddress(companyAddress)`` 
        
        :param companyAddress: 
        :type companyAddress: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    CageCode: str = ...
    """
    Returns or sets  the cage code 
    
    <hr>
    
    Getter Method
    
    Signature ``CageCode`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CageCode`` 
    
    :param cageCode: 
    :type cageCode: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CompanyName: str = ...
    """
    Returns or sets  the company name 
    
    <hr>
    
    Getter Method
    
    Signature ``CompanyName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompanyName`` 
    
    :param companyName: 
    :type companyName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Division: str = ...
    """
    Returns or sets  the division 
    
    <hr>
    
    Getter Method
    
    Signature ``Division`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Division`` 
    
    :param division: 
    :type division: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: EnterpriseIdentificationBuilder = ...  # unknown typename


class FitAssemblyNewDisplayStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FitAssemblyNewDisplayStyle():
    """
    Specifies the limit and fit assembly new display style 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleLine", "Display single line"
       "DoubleLine", "Display double line"
    """
    SingleLine = 0  # FitAssemblyNewDisplayStyleMemberType
    DoubleLine = 1  # FitAssemblyNewDisplayStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AppendedTextEditorBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.AppendedTextEditorBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateAppendedTextEditorBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def SetDimensions(self, dimensions: 'list[Dimension]') -> None:
        """
        Sets all the dimensions to the builder 
        
        Signature ``SetDimensions(dimensions)`` 
        
        :param dimensions:  Dimensions Array  
        :type dimensions: list of :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    AppendedTextBuilder: AppendedTextBuilder = ...
    """
    Returns  the appended text builder 
    
    <hr>
    
    Getter Method
    
    Signature ``AppendedTextBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AppendedTextBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: AppendedTextEditorBuilder = ...  # unknown typename


class SymbolFileCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.SymbolFile` objects   
    
    Use :py:meth:`NXOpen.Annotations.SymbolFile` to get the instance of this class.
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> SymbolFile:
        """
        Finds the :py:class:`NXOpen.Annotations.SymbolFile` with the given name.  
        
        An exception will be thrown if no object can be found with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Region name:Associated object index  
        :type name: str 
        :returns:   Symbol file object  
        :rtype: :py:class:`NXOpen.Annotations.SymbolFile` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSymbolFileBuilder(self, object: SymbolFile) -> SymbolFileBuilder:
        """
        Creates a drafting symbol file builder  
        
        Signature ``CreateSymbolFileBuilder(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.Annotations.SymbolFile` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SymbolFileBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    


class TitleBlockPreferences(NXOpen.TransientObject):
    """
    Represents title_block preferences.  
    
    When setting the property, changes are not applied to object until
    the set method is called
    
    .. versionadded:: NX8.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    AlignmentPosition: AlignmentPosition = ...
    """
    Returns or sets  the alignment position 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentPosition`` 
    
    :returns:  the alignment position 
    :rtype: :py:class:`NXOpen.Annotations.AlignmentPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentPosition`` 
    
    :param alignPosition:  the alignment position  
    :type alignPosition: :py:class:`NXOpen.Annotations.AlignmentPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticUpdate: bool = ...
    """
    Returns or sets  the automatic update preference 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticUpdate`` 
    
    :returns:  automatic update  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticUpdate`` 
    
    :param autoUpdate:  automatic update  
    :type autoUpdate: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class SelectOrdinateDimensionList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: OrdinateDimension) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[OrdinateDimension]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: OrdinateDimension, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: OrdinateDimension, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: OrdinateDimension, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: OrdinateDimension, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: OrdinateDimension) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: OrdinateDimension, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: OrdinateDimension, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: OrdinateDimension, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[OrdinateDimension]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: OrdinateDimension) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Annotations.OrdinateDimension` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[OrdinateDimension]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Annotations.OrdinateDimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[OrdinateDimension]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Annotations.OrdinateDimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectOrdinateDimensionList = ...  # unknown typename


class AssociatedObject(NXOpen.TransientObject):
    """
    Represents the objects to which the PMI applies.  
    
    Examples are size tolerance applied to a set of cylindrical faces, GD and T datum applied to
    a planar face, and so on. 
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the objects.  
        
        Signature ``GetObjects()`` 
        
        :returns:  List of objects  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetObjects(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the objects.  
        
        Following objects are allowed -
        
        :py:class:`NXOpen.Point`
        
        :py:class:`NXOpen.Edge`
        
        :py:class:`NXOpen.Face`
        
        :py:class:`NXOpen.Body`
        
        :py:class:`NXOpen.Assemblies.Component`
        
        :py:class:`NXOpen.Curve`
        
        Signature ``SetObjects(objects)`` 
        
        :param objects:  List of new objects  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetObjectIndex(self, object: NXOpen.DisplayableObject) -> int:
        """
        Returns the associated object index  
        
        Signature ``GetObjectIndex(object)`` 
        
        :param object:  Object for which index is to be returned  
        :type object: :py:class:`NXOpen.DisplayableObject` 
        :returns:  Unique integer assigned to the associated object  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class PmiAttributeValueIntegerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiAttributeValueInteger` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiAttributeValueIntegerBuilder`
    
    .. versionadded:: NX6.0.0
    """
    IntegerValue: int = ...
    """
    Returns or sets  the integer_value 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegerValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegerValue`` 
    
    :param integerValue: 
    :type integerValue: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiAttributeValueIntegerBuilder = ...  # unknown typename


class DraftingSurfaceFinishBuilderFinishTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingSurfaceFinishBuilderFinishType():
    """
    the valid types of finish type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Basic", "Basic"
       "Modifier", "Modifier"
       "ModifierAllAround", "Modifier, All Around"
       "MaterialRemovalRequired", "Material Removal Required"
       "ModifierMaterialRemovalRequired", "Modifier, Material Removal Required"
       "ModifierMaterialRemovalRequiredAllAround", "Modifier, Material Removal Required, All Around"
       "MaterialRemovalProhibited", "Material Removal Prohibited"
       "ModifierMaterialRemovalProhibited", "Modifier, Material Removal Prohibited"
       "ModifierMaterialRemovalProhibitedAllAround", "Modifier, Material Removal Prohibited, All Around"
    """
    Basic = 0  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    Modifier = 1  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    ModifierAllAround = 2  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    MaterialRemovalRequired = 3  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalRequired = 4  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalRequiredAllAround = 5  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    MaterialRemovalProhibited = 6  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalProhibited = 7  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    ModifierMaterialRemovalProhibitedAllAround = 8  # DraftingSurfaceFinishBuilderFinishTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingSurfaceFinishBuilder(BaseSurfaceFinishBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DraftingSurfaceFinish` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DraftingSurfaceFinishCollection.CreateDraftingSurfaceFinishBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class FinishType():
        """
        the valid types of finish type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Basic", "Basic"
           "Modifier", "Modifier"
           "ModifierAllAround", "Modifier, All Around"
           "MaterialRemovalRequired", "Material Removal Required"
           "ModifierMaterialRemovalRequired", "Modifier, Material Removal Required"
           "ModifierMaterialRemovalRequiredAllAround", "Modifier, Material Removal Required, All Around"
           "MaterialRemovalProhibited", "Material Removal Prohibited"
           "ModifierMaterialRemovalProhibited", "Modifier, Material Removal Prohibited"
           "ModifierMaterialRemovalProhibitedAllAround", "Modifier, Material Removal Prohibited, All Around"
        """
        Basic = 0  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        Modifier = 1  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        ModifierAllAround = 2  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        MaterialRemovalRequired = 3  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalRequired = 4  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalRequiredAllAround = 5  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        MaterialRemovalProhibited = 6  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalProhibited = 7  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        ModifierMaterialRemovalProhibitedAllAround = 8  # DraftingSurfaceFinishBuilderFinishTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InheritFrom(self, inheritTag: BaseSurfaceFinish) -> None:
        """
        The drafting surface finish is inherited form existing drafting surface finish.  
        
        Signature ``InheritFrom(inheritTag)`` 
        
        :param inheritTag: 
        :type inheritTag: :py:class:`NXOpen.Annotations.BaseSurfaceFinish` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    A1: str = ...
    """
    Returns or sets  the a1 
    
    <hr>
    
    Getter Method
    
    Signature ``A1`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``A1`` 
    
    :param a1: 
    :type a1: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    A2: str = ...
    """
    Returns or sets  the a2 
    
    <hr>
    
    Getter Method
    
    Signature ``A2`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``A2`` 
    
    :param a2: 
    :type a2: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Angle: float = ...
    """
    Returns or sets  the angle
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    B: str = ...
    """
    Returns or sets  the b 
    
    <hr>
    
    Getter Method
    
    Signature ``B`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``B`` 
    
    :param b: 
    :type b: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    C: str = ...
    """
    Returns or sets  the c 
    
    <hr>
    
    Getter Method
    
    Signature ``C`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C`` 
    
    :param c: 
    :type c: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    D: str = ...
    """
    Returns or sets  the d 
    
    <hr>
    
    Getter Method
    
    Signature ``D`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``D`` 
    
    :param d: 
    :type d: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    E: str = ...
    """
    Returns or sets  the e 
    
    <hr>
    
    Getter Method
    
    Signature ``E`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``E`` 
    
    :param e: 
    :type e: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    F1: str = ...
    """
    Returns or sets  the f1 
    
    <hr>
    
    Getter Method
    
    Signature ``F1`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``F1`` 
    
    :param f1: 
    :type f1: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    F2: str = ...
    """
    Returns or sets  the f2 
    
    <hr>
    
    Getter Method
    
    Signature ``F2`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``F2`` 
    
    :param f2: 
    :type f2: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Finish: DraftingSurfaceFinishBuilderFinishType = ...
    """
    Returns or sets  the finish 
    
    <hr>
    
    Getter Method
    
    Signature ``Finish`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DraftingSurfaceFinishBuilderFinishType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Finish`` 
    
    :param finish: 
    :type finish: :py:class:`NXOpen.Annotations.DraftingSurfaceFinishBuilderFinishType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    InvertSymbol: bool = ...
    """
    Returns or sets  the invert symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``InvertSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InvertSymbol`` 
    
    :param invertSymbol: 
    :type invertSymbol: bool 
    
    .. versionadded:: NX7.5.2
    
    License requirements: drafting ("DRAFTING")
    """
    InvertText: bool = ...
    """
    Returns or sets  the invert Text 
    
    <hr>
    
    Getter Method
    
    Signature ``InvertText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InvertText`` 
    
    :param invertText: 
    :type invertText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    LowerTolerance: float = ...
    """
    Returns or sets  the lower tolerance applicable for all the tolerance types other than Bilateral
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerTolerance`` 
    
    :param lowerTolerance: 
    :type lowerTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Parantheses: BaseSurfaceFinishBuilderParanthesesType = ...
    """
    Returns or sets  the parantheses.  
    
    This method is deprecated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Parantheses`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParanthesesType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`NXOpen.Annotations.DraftingSurfaceFinishBuilder.Parentheses`` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parantheses`` 
    
    :param paranthesesType: 
    :type paranthesesType: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParanthesesType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`NXOpen.Annotations.DraftingSurfaceFinishBuilder.Parentheses`` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Parentheses: BaseSurfaceFinishBuilderParenthesesType = ...
    """
    Returns or sets  the parentheses 
    
    <hr>
    
    Getter Method
    
    Signature ``Parentheses`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParenthesesType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parentheses`` 
    
    :param parenthesesType: 
    :type parenthesesType: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderParenthesesType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SingleRoughnessValue: bool = ...
    """
    Returns or sets  the single roughness value
    
    <hr>
    
    Getter Method
    
    Signature ``SingleRoughnessValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SingleRoughnessValue`` 
    
    :param singleRoughnessValue: 
    :type singleRoughnessValue: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance in case of bilateral tolerance type otherwise upper tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ToleranceType: BaseSurfaceFinishBuilderToleranceOption = ...
    """
    Returns or sets  the tolerance type applicable only for all the 3 cases of finish type where Material Removal Required
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderToleranceOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceType`` 
    
    :param toleranceType: 
    :type toleranceType: :py:class:`NXOpen.Annotations.BaseSurfaceFinishBuilderToleranceOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: DraftingSurfaceFinishBuilder = ...  # unknown typename


class DraftingFeatureControlFrameBuilder(FeatureControlFrameBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.DraftingFeatureControlFrameBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateDraftingFeatureControlFrameBuilder`
    
    Default values.
    
    ===============  =============
    Property         Value
    ===============  =============
    Characteristic   Straightness 
    ---------------  -------------
    FrameStyle       SingleFrame 
    ===============  =============
    
    .. versionadded:: NX6.0.0
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DraftingFeatureControlFrameBuilder = ...  # unknown typename


class SelectDimension(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Dimension) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Dimension) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Dimension, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Dimension` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Dimension, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Dimension, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.Dimension` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.Dimension` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Dimension, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Dimension` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Dimension:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Dimension) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Annotations.Dimension`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Annotations.Dimension`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Annotations.Dimension`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Annotations.Dimension`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Dimension = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Annotations.Dimension` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Annotations.Dimension` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectDimension = ...  # unknown typename


class ComponentData(NXOpen.TransientObject):
    """
    A ComponentData object can be used to query the components of an annotation.  
    
    These components include line components, arrow components, arc components,
    and text components.  These components can then be queried for type
    specific information about the object.  
    
    .. versionadded:: NX6.0.2
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetLineComponents(self) -> 'list[LineComponent]':
        """
        Queries the line components, (:py:class:`NXOpen.Annotations.LineComponent`), in an annotation.  
        
        Each line component can be queried for line specific information.  
        
        Signature ``GetLineComponents()`` 
        
        :returns:  All of the lines components that exist in the annotation  
        :rtype: list of :py:class:`NXOpen.Annotations.LineComponent` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetArrowComponents(self) -> 'list[ArrowComponent]':
        """
        Queries the arrow components, (:py:class:`NXOpen.Annotations.ArrowComponent`), in an annotation.  
        
        Each arrow component can be queried for arrow specific information.  
        
        Signature ``GetArrowComponents()`` 
        
        :returns:  All of the arrow components that exist in the annotation  
        :rtype: list of :py:class:`NXOpen.Annotations.ArrowComponent` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetArcComponents(self) -> 'list[ArcComponent]':
        """
        Queries the arc components, (:py:class:`NXOpen.Annotations.ArcComponent`), in an annotation.  
        
        Each arc component can be queried for arc specific information.  
        
        Signature ``GetArcComponents()`` 
        
        :returns:  All of the arc components that exist in the annotation  
        :rtype: list of :py:class:`NXOpen.Annotations.ArcComponent` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetTextComponents(self) -> 'list[TextComponent]':
        """
        Queries the text components, (:py:class:`NXOpen.Annotations.ArcComponent`), in an annotation.  
        
        Each text component can be queried for text specific information.  
        
        Signature ``GetTextComponents()`` 
        
        :returns:  All of the text components that exist in the annotation  
        :rtype: list of :py:class:`NXOpen.Annotations.TextComponent` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetEntities(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns the entities that display the annotation.  
        
        Each entity can be queried to get 
        the line, arc and text information. Note that entities could be line, arc, spline and annotation
        objects.  
        
        Signature ``GetEntities()`` 
        
        :returns:  List of entities that display the annotation.
        It is the caller's responsibility to delete these objects.  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def GetEntitiesAutodelete(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns the entities that display the annotation.  
        
        These entites will be deleted
        when this object is deleted.  Each entity can be queried to get 
        the line, arc and text information. Note that entities could be line, arc, spline and annotation
        objects.  
        
        Signature ``GetEntitiesAutodelete()`` 
        
        :returns:  List of entities that display the annotation.
        These entities will be deleted when the ComponentData object is deleted.  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    


class NarrowTextOrientationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class NarrowTextOrientation():
    """
    Specifies the narrow dimension text orientation 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", "Specifies horizontal text orientation"
       "Parallel", "Specifies parallel text orientation"
       "Last", "Last enum value. Should not be used."
    """
    Horizontal = 0  # NarrowTextOrientationMemberType
    Parallel = 1  # NarrowTextOrientationMemberType
    Last = 2  # NarrowTextOrientationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiResizeMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PmiResizeMethod():
    """
    Specifies the options for the resize method 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ViewScale", " - "
       "ZoomFactor", " - "
       "Independent", " - "
       "PartPreferences", "Resize using part settings"
    """
    ViewScale = 1  # PmiResizeMethodMemberType
    ZoomFactor = 2  # PmiResizeMethodMemberType
    Independent = 3  # PmiResizeMethodMemberType
    PartPreferences = 4  # PmiResizeMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiBoltCircleCenterline(BaseBoltCircleCenterline, IPmi):
    """
    Represents a PMI Bolt Circle Centerline class   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiBoltCircleCenterlineBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PmiBoltCircleCenterline = ...  # unknown typename


class LineWidthMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LineWidth():
    """
    Specifies the line width. 
    When using a standard font in the :py:class:`NXOpen.Annotations.LetteringStyleBuilder` the values for :py:class:`NXOpen.Annotations.LineWidth` will be interpreted as follows:
    A value of :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` is equivalent to a font style value of "Regular" or "Italic" (if italic is set).
    Any value other than :py:class:`NXOpen.Annotations.LineWidth.Thin <NXOpen.Annotations.LineWidth>` is equivalent to a font style value of "Bold" or "Bold Italic" (if italic is set).
    This applies to:
    :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.DimensionTextLineWidth`` with respect to :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.DimensionTextItalicized``
    :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.AppendedTextLineWidth`` with respect to :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.AppendedTextItalicized``
    :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.ToleranceTextLineWidth`` with respect to :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.ToleranceTextItalicized``
    :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.GeneralTextLineWidth`` with respect to :py:meth:`NXOpen.Annotations.LetteringStyleBuilder.GeneralTextItalicized`` 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", " - "
       "Thick", " - "
       "Thin", " - "
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Normal = 1  # LineWidthMemberType
    Thick = 2  # LineWidthMemberType
    Thin = 3  # LineWidthMemberType
    One = 6  # LineWidthMemberType
    Two = 7  # LineWidthMemberType
    Three = 8  # LineWidthMemberType
    Four = 9  # LineWidthMemberType
    Five = 10  # LineWidthMemberType
    Six = 11  # LineWidthMemberType
    Seven = 12  # LineWidthMemberType
    Eight = 13  # LineWidthMemberType
    Nine = 14  # LineWidthMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FractionDenominatorFormatMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FractionDenominatorFormat():
    """
    Specifies the fraction denominator format 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", " - "
       "Two", " - "
       "Four", " - "
       "Eight", " - "
       "Sixteen", " - "
       "ThirtyTwo", " - "
       "SixtyFour", " - "
       "Last", "Last enum value. Should not be used."
    """
    One = 0  # FractionDenominatorFormatMemberType
    Two = 1  # FractionDenominatorFormatMemberType
    Four = 2  # FractionDenominatorFormatMemberType
    Eight = 3  # FractionDenominatorFormatMemberType
    Sixteen = 4  # FractionDenominatorFormatMemberType
    ThirtyTwo = 5  # FractionDenominatorFormatMemberType
    SixtyFour = 6  # FractionDenominatorFormatMemberType
    Last = 7  # FractionDenominatorFormatMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExportControl(PmiAttribute):
    """
    Represents a Export Control   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.ExportControlBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: ExportControl = ...  # unknown typename


class BreakSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.BreakSettingsBuilder` builder   
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BreakSize: float = ...
    """
    Returns or sets  the break size 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakSize`` 
    
    :param breakSize: 
    :type breakSize: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateBreaks: bool = ...
    """
    Returns or sets  the create breaks option 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateBreaks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateBreaks`` 
    
    :param creatsBreak: 
    :type creatsBreak: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BreakSettingsBuilder = ...  # unknown typename


class DraftingImageCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.DraftingImage` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingImage:
        """
        Finds the drafting image with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the drafting image to be found  
        :type journalIdentifier: str 
        :returns:  drafting image with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.DraftingImage` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class GeneralRadiusDimension(BaseRadiusDimension):
    """
    Represents a radius dimension   
    
    To obtain an instance of this class use :py:class:`Annotations.DimensionCollection`
    
    .. versionadded:: NX6.0.0
    """
    Null: GeneralRadiusDimension = ...  # unknown typename


class IntersectionSymbolBuilderThicknessMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IntersectionSymbolBuilderThickness():
    """
    the types of intersection symbol thickness 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Thin = 0  # IntersectionSymbolBuilderThicknessMemberType
    Normal = 1  # IntersectionSymbolBuilderThicknessMemberType
    Thick = 2  # IntersectionSymbolBuilderThicknessMemberType
    One = 6  # IntersectionSymbolBuilderThicknessMemberType
    Two = 7  # IntersectionSymbolBuilderThicknessMemberType
    Three = 8  # IntersectionSymbolBuilderThicknessMemberType
    Four = 9  # IntersectionSymbolBuilderThicknessMemberType
    Five = 10  # IntersectionSymbolBuilderThicknessMemberType
    Six = 11  # IntersectionSymbolBuilderThicknessMemberType
    Seven = 12  # IntersectionSymbolBuilderThicknessMemberType
    Eight = 13  # IntersectionSymbolBuilderThicknessMemberType
    Nine = 14  # IntersectionSymbolBuilderThicknessMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IntersectionSymbolBuilder(BaseSymbolBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.IntersectionSymbol` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.IntersectionSymbolCollection.CreateIntersectionSymbolBuilder`
    
    Default values.
    
    ==========  =====
    Property    Value
    ==========  =====
    Extension   3 
    ----------  -----
    Width       Thin 
    ==========  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class Thickness():
        """
        the types of intersection symbol thickness 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "Thin"
           "Normal", "Normal"
           "Thick", "Thick"
           "One", "Width One"
           "Two", "Width Two"
           "Three", "Width Three"
           "Four", "Width Four"
           "Five", "Width Five"
           "Six", "Width Six"
           "Seven", "Width Seven"
           "Eight", "Width Eight"
           "Nine", "Width Nine"
        """
        Thin = 0  # IntersectionSymbolBuilderThicknessMemberType
        Normal = 1  # IntersectionSymbolBuilderThicknessMemberType
        Thick = 2  # IntersectionSymbolBuilderThicknessMemberType
        One = 6  # IntersectionSymbolBuilderThicknessMemberType
        Two = 7  # IntersectionSymbolBuilderThicknessMemberType
        Three = 8  # IntersectionSymbolBuilderThicknessMemberType
        Four = 9  # IntersectionSymbolBuilderThicknessMemberType
        Five = 10  # IntersectionSymbolBuilderThicknessMemberType
        Six = 11  # IntersectionSymbolBuilderThicknessMemberType
        Seven = 12  # IntersectionSymbolBuilderThicknessMemberType
        Eight = 13  # IntersectionSymbolBuilderThicknessMemberType
        Nine = 14  # IntersectionSymbolBuilderThicknessMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Extension: float = ...
    """
    Returns or sets  the extension 
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Extension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    IntersectionObject1: NXOpen.SelectNXObject = ...
    """
    Returns  the intersection object1 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionObject1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    IntersectionObject2: NXOpen.SelectNXObject = ...
    """
    Returns  the intersection object2 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionObject2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Width: IntersectionSymbolBuilderThickness = ...
    """
    Returns or sets  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.IntersectionSymbolBuilderThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Annotations.IntersectionSymbolBuilderThickness` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: IntersectionSymbolBuilder = ...  # unknown typename


class Centerline2dSettingsBuilder(CenterlineSettingsBuilder):
    """
    Represents a Builder for Centerline2dSettings.  
    
    .. versionadded:: NX6.0.0
    """
    Extension: float = ...
    """
    Returns or sets  the extension parameter for 2D Centerline
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Extension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IndividualDistance: bool = ...
    """
    Returns or sets  the individual extension distance On/Off parameter for 2D Centerline
    
    <hr>
    
    Getter Method
    
    Signature ``IndividualDistance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndividualDistance`` 
    
    :param individualDistance: 
    :type individualDistance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Size: float = ...
    """
    Returns or sets  the short dash size parameter for 2D Centerline 
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: Centerline2dSettingsBuilder = ...  # unknown typename


class PartSymbolFolderCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.PartSymbolFolder` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePartSymbolFolderBuilder(self, currentFolder: PartSymbolFolder) -> PartSymbolFolderBuilder:
        """
        Creates part symbol folder builder instance  
        
        Signature ``CreatePartSymbolFolderBuilder(currentFolder)`` 
        
        :param currentFolder:  :py:class:`NXOpen.Annotations.PartSymbolFolder` to be set as current folder  
        :type currentFolder: :py:class:`NXOpen.Annotations.PartSymbolFolder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PartSymbolFolderBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, name: str) -> PartSymbolFolder:
        """
        Finds the :py:class:`NXOpen.Annotations.PartSymbolFolder` with the given name.  
        
        An exception will be thrown if no object can be found with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Part symbol folder name  
        :type name: str 
        :returns:  Part symbol folder object  
        :rtype: :py:class:`NXOpen.Annotations.PartSymbolFolder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class SelectAnnotationList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: Annotation) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[Annotation]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: Annotation, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Annotation` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Annotation, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Annotation, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.Annotation` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.Annotation` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: Annotation, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Annotations.Annotation` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: Annotation) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: Annotation, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Annotations.Annotation` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Annotation, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Annotation, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Annotations.Annotation` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Annotations.Annotation` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[Annotation]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: Annotation) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Annotations.Annotation` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[Annotation]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[Annotation]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Annotations.Annotation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectAnnotationList = ...  # unknown typename


class GeneralCustomSymbol(BaseCustomSymbol):
    """
    Represents a general custom symbol   
    
    .. versionadded:: NX7.0.0
    """
    Null: GeneralCustomSymbol = ...  # unknown typename


class OrdinateDimensionPreferences(NXOpen.TransientObject):
    """
    Represents ordinate dimension preferences   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    AlignSymbolWithBaseline: bool = ...
    """
    Returns or sets  the flag indicating whether to align the user defined symbol with the
    base line 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignSymbolWithBaseline`` 
    
    :returns:  Flag to align user defined symbol with base line  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignSymbolWithBaseline`` 
    
    :param alignSymbolWithBaseline:  Flag to align user defined symbol with base line  
    :type alignSymbolWithBaseline: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DisplayZeroAtBaseline: bool = ...
    """
    Returns or sets  the display zero at baseline flag.  
    
    If this is true, then ordinate set will have zero text displayed at 
    extension lines. 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayZeroAtBaseline`` 
    
    :returns:  Display Zero at Baseline flag  
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayZeroAtBaseline`` 
    
    :param zeroTextsDisplay:  New Display Zero at Baseline flag  
    :type zeroTextsDisplay: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DoglegAngle: float = ...
    """
    Returns or sets  the dogleg angle 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegAngle`` 
    
    :returns:  Dogleg angle  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegAngle`` 
    
    :param doglegAngle:  New dogleg angle  
    :type doglegAngle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DoglegCreationOption: OrdinateDoglegCreationOption = ...
    """
    Returns or sets  the dogleg creation option 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegCreationOption`` 
    
    :returns:  Dogleg creation option  
    :rtype: :py:class:`NXOpen.Annotations.OrdinateDoglegCreationOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegCreationOption`` 
    
    :param option:  New dogleg creation option  
    :type option: :py:class:`NXOpen.Annotations.OrdinateDoglegCreationOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DoglegDefinition: OrdinateDoglegDefinition = ...
    """
    Returns or sets  the dogleg definition 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegDefinition`` 
    
    :returns:  Dogleg definition  
    :rtype: :py:class:`NXOpen.Annotations.OrdinateDoglegDefinition` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegDefinition`` 
    
    :param definition:  New dogleg definition  
    :type definition: :py:class:`NXOpen.Annotations.OrdinateDoglegDefinition` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DoglegEndOffset: float = ...
    """
    Returns or sets  the dogleg end offset 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegEndOffset`` 
    
    :returns:  Dogleg end offset  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegEndOffset`` 
    
    :param doglegEndOffset:  New dogleg end offset  
    :type doglegEndOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DoglegStartOffset: float = ...
    """
    Returns or sets  the dogleg start offset 
    
    <hr>
    
    Getter Method
    
    Signature ``DoglegStartOffset`` 
    
    :returns:  Dogleg start offset  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoglegStartOffset`` 
    
    :param doglegStartOffset:  New dogleg start offset  
    :type doglegStartOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FirstMarginOffset: float = ...
    """
    Returns or sets  the first margin offset 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstMarginOffset`` 
    
    :returns:  First margin offset  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstMarginOffset`` 
    
    :param firstMarginOffset:  New first margin offeset  
    :type firstMarginOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LineArrowDisplayOption: OrdinateLineArrowDisplayOption = ...
    """
    Returns or sets  the dimension line and arrow display option 
    
    <hr>
    
    Getter Method
    
    Signature ``LineArrowDisplayOption`` 
    
    :returns:  Dimension line and arrow display option  
    :rtype: :py:class:`NXOpen.Annotations.OrdinateLineArrowDisplayOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineArrowDisplayOption`` 
    
    :param option:  New dimension line and arrow display option  
    :type option: :py:class:`NXOpen.Annotations.OrdinateLineArrowDisplayOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    MarginSpacing: float = ...
    """
    Returns or sets  the spacing, the distance between margins 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginSpacing`` 
    
    :returns:  Margin spacing  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginSpacing`` 
    
    :param marginSpacing:  New margin spacing  
    :type marginSpacing: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    NumberOfMargins: float = ...
    """
    Returns or sets  the number of margins 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfMargins`` 
    
    :returns:  Number of margins  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfMargins`` 
    
    :param nMargins:  New number of margins  
    :type nMargins: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    OriginDisplay: OrdinateOriginDisplayOption = ...
    """
    Returns or sets  the origin display option 
    
    <hr>
    
    Getter Method
    
    Signature ``OriginDisplay`` 
    
    :returns:  Origin display option  
    :rtype: :py:class:`NXOpen.Annotations.OrdinateOriginDisplayOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OriginDisplay`` 
    
    :param option:  New origin display option  
    :type option: :py:class:`NXOpen.Annotations.OrdinateOriginDisplayOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    PositiveDirection: OrdinatePositiveDirection = ...
    """
    Returns or sets  the positive direction 
    
    <hr>
    
    Getter Method
    
    Signature ``PositiveDirection`` 
    
    :returns:  Postive direction  
    :rtype: :py:class:`NXOpen.Annotations.OrdinatePositiveDirection` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositiveDirection`` 
    
    :param option:  New postive direction  
    :type option: :py:class:`NXOpen.Annotations.OrdinatePositiveDirection` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolAngle: float = ...
    """
    Returns or sets  the user defined symbol angle with baseline, if the symbol is not aligned with 
    the baseline 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolAngle`` 
    
    :returns:  User defined ymbol angle  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolAngle`` 
    
    :param symbolAngle:  New user defined symbol angle  
    :type symbolAngle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolAspectRatio: float = ...
    """
    Returns or sets  the user defined symbol aspect ratio 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolAspectRatio`` 
    
    :returns:  User defined symbol aspect ratio  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolAspectRatio`` 
    
    :param symbolAspectRatio:  New user defined symbol aspect ratio  
    :type symbolAspectRatio: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolHeight: float = ...
    """
    Returns or sets  the user defined symbol height 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolHeight`` 
    
    :returns:  User defined symbol height  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolHeight`` 
    
    :param symbolHeight:  New user defined symbol height  
    :type symbolHeight: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolLength: float = ...
    """
    Returns or sets  the user defined symbol length 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolLength`` 
    
    :returns:  User defined symbol length  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolLength`` 
    
    :param symbolLength:  New user defined symbol length  
    :type symbolLength: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolScale: float = ...
    """
    Returns or sets  the user defined symbol scale 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolScale`` 
    
    :returns:  User defined symbol scale  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolScale`` 
    
    :param symbolScale:  New user defiend symbol scale  
    :type symbolScale: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TextOrientation: TextOrientation = ...
    """
    Returns or sets  the text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOrientation`` 
    
    :returns:  Dimension text orientation  
    :rtype: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOrientation`` 
    
    :param orientation:  New dimension text orientation  
    :type orientation: :py:class:`NXOpen.Annotations.TextOrientation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    TextOrientationAngle: float = ...
    """
    Returns or sets  the angle if text orientation is 
    :py:class:`AnnotationsTextOrientation.ByAngle <AnnotationsTextOrientation>` 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOrientationAngle`` 
    
    :returns:  Dimension text orientation angle  
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOrientationAngle`` 
    
    :param textOrientationAngle:  New dimension text orienation angle  
    :type textOrientationAngle: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    UserDefinedText: str = ...
    """
    Returns or sets  the user defined text, if the user defined symbol option is used to display the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedText`` 
    
    :returns:  User defined text  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedText`` 
    
    :param userDefinedText:  New user defined text  
    :type userDefinedText: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class PmiNumberBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiNumber` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiNumberBuilder`
    
    Default values.
    
    ============  =====
    Property      Value
    ============  =====
    NumberValue   0 
    ============  =====
    
    .. versionadded:: NX6.0.0
    """
    NumberValue: float = ...
    """
    Returns or sets  the num value 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberValue`` 
    
    :param numberValue: 
    :type numberValue: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiNumberBuilder = ...  # unknown typename


class StackAlignmentPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StackAlignmentPosition():
    """
    Specifies the site location of a stack 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Above", " - "
       "Below", " - "
       "Left", " - "
       "Right", " - "
    """
    Above = 0  # StackAlignmentPositionMemberType
    Below = 1  # StackAlignmentPositionMemberType
    Left = 2  # StackAlignmentPositionMemberType
    Right = 3  # StackAlignmentPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CircularTargetData(DatumTargetData):
    """
    Represents circular datum target data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDiameter(self) -> Value:
        """
        Returns the diameter  
        
        Signature ``GetDiameter()`` 
        
        :returns:  Diameter data   
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDiameter(self, diameter: Value) -> None:
        """
        Sets the diameter 
        
        Signature ``SetDiameter(diameter)`` 
        
        :param diameter:  New diameter data  
        :type diameter: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class SymbolPreferencesOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SymbolPreferencesOption():
    """
    Specifies the custom symbol preferences for the following - 
    
    Crosshatch
    
    Area fill
    
    Color, font and line width
    
    This option is only available when creating. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PartSymbol", "Specifies part's symbol preferences will be used"
       "MasterSymbol", "Specifies master symbol's preferences will be used"
       "Last", "Last enum value. Should not be used."
    """
    PartSymbol = 0  # SymbolPreferencesOptionMemberType
    MasterSymbol = 1  # SymbolPreferencesOptionMemberType
    Last = 2  # SymbolPreferencesOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UrlBusinessModifier(BusinessModifier):
    """
    Represents business modifier that applies an URL to a PMI.  
    
    Please see ug_url_busmod.dfa for attribute details. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.UrlBusinessModifierBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: UrlBusinessModifier = ...  # unknown typename


class PmiMinorAngularDimensionBuilder(PmiAngularDimensionBuilder):
    """
    Represents a :py:class:`Annotations.AngularDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiMinorAngularDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: PmiMinorAngularDimensionBuilder = ...  # unknown typename


class QueryPmiBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.QueryPmiBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateQueryPmiBuilder`
    
    Default values.
    
    =======================  =====
    Property                 Value
    =======================  =====
    CreateQueryResultsView   true 
    =======================  =====
    
    .. versionadded:: NX5.0.0
    """
    AreAllOccurrencesIncluded: bool = ...
    """
    Returns or sets  an all occurrences of selected component to be included toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``AreAllOccurrencesIncluded`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreAllOccurrencesIncluded`` 
    
    :param areOccurrencesIncluded: 
    :type areOccurrencesIncluded: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    AreAttachedPmiIncluded: bool = ...
    """
    Returns or sets  an attached pmi to selected geometry to be included toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``AreAttachedPmiIncluded`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreAttachedPmiIncluded`` 
    
    :param areAttachedPMIIncluded: 
    :type areAttachedPMIIncluded: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    AreReferencingMemberObjectsIncluded: bool = ...
    """
    Returns or sets  a referencing member objects of selected geometry to be included toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``AreReferencingMemberObjectsIncluded`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AreReferencingMemberObjectsIncluded`` 
    
    :param areReferencingMemberObjectsIncluded: 
    :type areReferencingMemberObjectsIncluded: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: None.
    """
    CreateQueryResultsView: bool = ...
    """
    Returns or sets  the create query results view.  
    
    A value of false results in a temporary display that is
    not supported through NXOpen. 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateQueryResultsView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateQueryResultsView`` 
    
    :param createQueryResultsView: 
    :type createQueryResultsView: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Geometry: NXOpen.SelectObjectList = ...
    """
    Returns  the geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: QueryPmiBuilder = ...  # unknown typename


class VerticalDimension(BaseVerticalDimension):
    """
    Represents a vertical dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: VerticalDimension = ...  # unknown typename


class LeaderDataLeaderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderDataLeaderType():
    """
    the set of datatypes used to define the types of leaders that can
    be applied to an annotation 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plain", "Plain leader style"
       "AllAround", "Plain leader style with all around symbol"
       "PlainWithoutStub", "Plain leader style with no stub"
       "Flag", "Flag style"
       "Datum", "Datum feature symbol style"
       "DotTerminated", "Datum feature on stub of dot terminated style"
       "Extension", "Id symbol extension style leader"
       "AllOver", " - "
    """
    Plain = 0  # LeaderDataLeaderTypeMemberType
    AllAround = 1  # LeaderDataLeaderTypeMemberType
    PlainWithoutStub = 2  # LeaderDataLeaderTypeMemberType
    Flag = 3  # LeaderDataLeaderTypeMemberType
    Datum = 4  # LeaderDataLeaderTypeMemberType
    DotTerminated = 5  # LeaderDataLeaderTypeMemberType
    Extension = 6  # LeaderDataLeaderTypeMemberType
    AllOver = 7  # LeaderDataLeaderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LeaderDataArrowheadTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderDataArrowheadType():
    """
    the set of arrowhead types used to define a leader arrowhead 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ClosedArrow", "Closed arrowhead type"
       "ClosedSolidArrow", "Closed solid arrowhead type"
       "OpenArrow", "Open arrowhead type"
       "FilledArrow", "Filled arrowhead type"
       "ClosedDoubleArrow", "Closed double arrowhead type"
       "ClosedDoubleSolidArrow", "Closed double solid arrowhead type"
       "OpenDoubleArrow", "Open double arrowhead type"
       "FilledDoubleArrow", "Filled double arrowhead type"
       "NotSet", "No terminating symbol"
       "Origin", "Origin symbol"
       "Cross", "Cross symbol"
       "Integral", "Integral symbol"
       "Dot", "Dot symbol"
       "FilledDot", "Filled dot symbol"
       "Square", "Square symbol"
       "FilledSquare", "Filled square symbol"
       "Datum", "Datum symbol"
       "FilledDatum", "Filled datum symbol"
       "TopOpenArrow", "Top open arrowhead"
       "BottomOpenArrow", "bottom open arrowhead"
       "TopFilledArrow", "top filled arrowhead"
       "BottomFilledArrow", "bottom filled arrowhead"
    """
    ClosedArrow = 0  # LeaderDataArrowheadTypeMemberType
    ClosedSolidArrow = 1  # LeaderDataArrowheadTypeMemberType
    OpenArrow = 2  # LeaderDataArrowheadTypeMemberType
    FilledArrow = 3  # LeaderDataArrowheadTypeMemberType
    ClosedDoubleArrow = 4  # LeaderDataArrowheadTypeMemberType
    ClosedDoubleSolidArrow = 5  # LeaderDataArrowheadTypeMemberType
    OpenDoubleArrow = 6  # LeaderDataArrowheadTypeMemberType
    FilledDoubleArrow = 7  # LeaderDataArrowheadTypeMemberType
    NotSet = 8  # LeaderDataArrowheadTypeMemberType
    Origin = 9  # LeaderDataArrowheadTypeMemberType
    Cross = 10  # LeaderDataArrowheadTypeMemberType
    Integral = 11  # LeaderDataArrowheadTypeMemberType
    Dot = 12  # LeaderDataArrowheadTypeMemberType
    FilledDot = 13  # LeaderDataArrowheadTypeMemberType
    Square = 14  # LeaderDataArrowheadTypeMemberType
    FilledSquare = 15  # LeaderDataArrowheadTypeMemberType
    Datum = 16  # LeaderDataArrowheadTypeMemberType
    FilledDatum = 17  # LeaderDataArrowheadTypeMemberType
    TopOpenArrow = 18  # LeaderDataArrowheadTypeMemberType
    BottomOpenArrow = 19  # LeaderDataArrowheadTypeMemberType
    TopFilledArrow = 20  # LeaderDataArrowheadTypeMemberType
    BottomFilledArrow = 21  # LeaderDataArrowheadTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LeaderData(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.LeaderData`.  
    
    This class is
    used to construct the definition for a single leader object.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateLeaderData`
    
    .. versionadded:: NX6.0.0
    """
    
    class LeaderType():
        """
        the set of datatypes used to define the types of leaders that can
        be applied to an annotation 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plain", "Plain leader style"
           "AllAround", "Plain leader style with all around symbol"
           "PlainWithoutStub", "Plain leader style with no stub"
           "Flag", "Flag style"
           "Datum", "Datum feature symbol style"
           "DotTerminated", "Datum feature on stub of dot terminated style"
           "Extension", "Id symbol extension style leader"
           "AllOver", " - "
        """
        Plain = 0  # LeaderDataLeaderTypeMemberType
        AllAround = 1  # LeaderDataLeaderTypeMemberType
        PlainWithoutStub = 2  # LeaderDataLeaderTypeMemberType
        Flag = 3  # LeaderDataLeaderTypeMemberType
        Datum = 4  # LeaderDataLeaderTypeMemberType
        DotTerminated = 5  # LeaderDataLeaderTypeMemberType
        Extension = 6  # LeaderDataLeaderTypeMemberType
        AllOver = 7  # LeaderDataLeaderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ArrowheadType():
        """
        the set of arrowhead types used to define a leader arrowhead 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ClosedArrow", "Closed arrowhead type"
           "ClosedSolidArrow", "Closed solid arrowhead type"
           "OpenArrow", "Open arrowhead type"
           "FilledArrow", "Filled arrowhead type"
           "ClosedDoubleArrow", "Closed double arrowhead type"
           "ClosedDoubleSolidArrow", "Closed double solid arrowhead type"
           "OpenDoubleArrow", "Open double arrowhead type"
           "FilledDoubleArrow", "Filled double arrowhead type"
           "NotSet", "No terminating symbol"
           "Origin", "Origin symbol"
           "Cross", "Cross symbol"
           "Integral", "Integral symbol"
           "Dot", "Dot symbol"
           "FilledDot", "Filled dot symbol"
           "Square", "Square symbol"
           "FilledSquare", "Filled square symbol"
           "Datum", "Datum symbol"
           "FilledDatum", "Filled datum symbol"
           "TopOpenArrow", "Top open arrowhead"
           "BottomOpenArrow", "bottom open arrowhead"
           "TopFilledArrow", "top filled arrowhead"
           "BottomFilledArrow", "bottom filled arrowhead"
        """
        ClosedArrow = 0  # LeaderDataArrowheadTypeMemberType
        ClosedSolidArrow = 1  # LeaderDataArrowheadTypeMemberType
        OpenArrow = 2  # LeaderDataArrowheadTypeMemberType
        FilledArrow = 3  # LeaderDataArrowheadTypeMemberType
        ClosedDoubleArrow = 4  # LeaderDataArrowheadTypeMemberType
        ClosedDoubleSolidArrow = 5  # LeaderDataArrowheadTypeMemberType
        OpenDoubleArrow = 6  # LeaderDataArrowheadTypeMemberType
        FilledDoubleArrow = 7  # LeaderDataArrowheadTypeMemberType
        NotSet = 8  # LeaderDataArrowheadTypeMemberType
        Origin = 9  # LeaderDataArrowheadTypeMemberType
        Cross = 10  # LeaderDataArrowheadTypeMemberType
        Integral = 11  # LeaderDataArrowheadTypeMemberType
        Dot = 12  # LeaderDataArrowheadTypeMemberType
        FilledDot = 13  # LeaderDataArrowheadTypeMemberType
        Square = 14  # LeaderDataArrowheadTypeMemberType
        FilledSquare = 15  # LeaderDataArrowheadTypeMemberType
        Datum = 16  # LeaderDataArrowheadTypeMemberType
        FilledDatum = 17  # LeaderDataArrowheadTypeMemberType
        TopOpenArrow = 18  # LeaderDataArrowheadTypeMemberType
        BottomOpenArrow = 19  # LeaderDataArrowheadTypeMemberType
        TopFilledArrow = 20  # LeaderDataArrowheadTypeMemberType
        BottomFilledArrow = 21  # LeaderDataArrowheadTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def HasStub(self) -> bool:
        """
        Returns the stub status of the defined leader.  
        
        Signature ``HasStub()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetStubStartPoint(self) -> NXOpen.Point3d:
        """
        Returns the start point of the leader.  
        
        Signature ``GetStubStartPoint()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetStubEndPoint(self) -> NXOpen.Point3d:
        """
        Returns the end point of the leader.  
        
        Signature ``GetStubEndPoint()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Arrowhead: LeaderDataArrowheadType = ...
    """
    Returns or sets  the arrowhead 
    
    <hr>
    
    Getter Method
    
    Signature ``Arrowhead`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderDataArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Arrowhead`` 
    
    :param arrowhead: 
    :type arrowhead: :py:class:`NXOpen.Annotations.LeaderDataArrowheadType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DatumOnDotTerminatedArrowhead: LeaderDataArrowheadType = ...
    """
    Returns or sets  the datum arrowhead type for the datum portion of a datum on dot terminated leader 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumOnDotTerminatedArrowhead`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderDataArrowheadType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumOnDotTerminatedArrowhead`` 
    
    :param arrowhead: 
    :type arrowhead: :py:class:`NXOpen.Annotations.LeaderDataArrowheadType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DatumOnDotTerminatedEndPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the datum end point for the leader segment of the datum portion of a datum on dot terminated leadet 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumOnDotTerminatedEndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumOnDotTerminatedEndPoint`` 
    
    :param endpoint: 
    :type endpoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    DatumOnDotTerminatedStartPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the datum start point for the leader segment of the datum portion of a datum on dot terminated leader 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumOnDotTerminatedStartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumOnDotTerminatedStartPoint`` 
    
    :param startpoint: 
    :type startpoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Jogs: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the jogs 
    
    <hr>
    
    Getter Method
    
    Signature ``Jogs`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Leader: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the leader 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LeaderPerpendicular: bool = ...
    """
    Returns or sets  the perpendicular relationship between the first segment and attachement object 
    
    <hr>
    
    Getter Method
    
    Signature ``LeaderPerpendicular`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeaderPerpendicular`` 
    
    :param isLeaderPerpendicular: 
    :type isLeaderPerpendicular: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Perpendicular: bool = ...
    """
    Returns or sets  the perpendicular relationship between the first segment and stub 
    
    <hr>
    
    Getter Method
    
    Signature ``Perpendicular`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Perpendicular`` 
    
    :param isPerpendicular: 
    :type isPerpendicular: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StubSide: LeaderSide = ...
    """
    Returns or sets  the stub side 
    
    <hr>
    
    Getter Method
    
    Signature ``StubSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderSide` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StubSide`` 
    
    :param stubSide: 
    :type stubSide: :py:class:`NXOpen.Annotations.LeaderSide` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    StubSize: float = ...
    """
    Returns or sets  the stub size 
    
    <hr>
    
    Getter Method
    
    Signature ``StubSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StubSize`` 
    
    :param stubSize: 
    :type stubSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    TerminatorType: LeaderDataLeaderType = ...
    """
    Returns or sets  the terminator type 
    
    <hr>
    
    Getter Method
    
    Signature ``TerminatorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderDataLeaderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TerminatorType`` 
    
    :param terminatorType: 
    :type terminatorType: :py:class:`NXOpen.Annotations.LeaderDataLeaderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    VerticalAttachment: LeaderVerticalAttachment = ...
    """
    Returns or sets  the vertical attachment 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderVerticalAttachment` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalAttachment`` 
    
    :param verticalAttachment: 
    :type verticalAttachment: :py:class:`NXOpen.Annotations.LeaderVerticalAttachment` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: LeaderData = ...  # unknown typename


class CalloutGroupBuilderLayoutMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CalloutGroupBuilderLayout():
    """
    Represents group layout 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", "Horizontal"
       "Vertical", "Vertical"
    """
    Horizontal = 0  # CalloutGroupBuilderLayoutMemberType
    Vertical = 1  # CalloutGroupBuilderLayoutMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CalloutGroupBuilderModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CalloutGroupBuilderMode():
    """
    Represents Group or Ungroup mode. Use the correct mode before builder commit operation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Group", "Group"
       "Ungroup", "Ungroup"
    """
    Group = 0  # CalloutGroupBuilderModeMemberType
    Ungroup = 1  # CalloutGroupBuilderModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CalloutGroupBuilderVerticalGroupLeaderAttachmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CalloutGroupBuilderVerticalGroupLeaderAttachment():
    """
    Represents leader attachment for vertical callout groups. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "Top"
       "Bottom", "Bottom"
    """
    Top = 0  # CalloutGroupBuilderVerticalGroupLeaderAttachmentMemberType
    Bottom = 1  # CalloutGroupBuilderVerticalGroupLeaderAttachmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CalloutGroupBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.CalloutGroupBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.IdSymbolCollection.CreateCalloutGroupBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class Layout():
        """
        Represents group layout 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Horizontal", "Horizontal"
           "Vertical", "Vertical"
        """
        Horizontal = 0  # CalloutGroupBuilderLayoutMemberType
        Vertical = 1  # CalloutGroupBuilderLayoutMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Mode():
        """
        Represents Group or Ungroup mode. Use the correct mode before builder commit operation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Group", "Group"
           "Ungroup", "Ungroup"
        """
        Group = 0  # CalloutGroupBuilderModeMemberType
        Ungroup = 1  # CalloutGroupBuilderModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VerticalGroupLeaderAttachment():
        """
        Represents leader attachment for vertical callout groups. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "Top"
           "Bottom", "Bottom"
        """
        Top = 0  # CalloutGroupBuilderVerticalGroupLeaderAttachmentMemberType
        Bottom = 1  # CalloutGroupBuilderVerticalGroupLeaderAttachmentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetGroupSymbols(self) -> 'list[IdSymbol]':
        """
        Gets the symbols which are grouped 
        
        Signature ``GetGroupSymbols()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.IdSymbol` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetGroupSymbols(self, symbols: 'list[IdSymbol]') -> None:
        """
        Groups or UnGroups the symbols based on :py:class:`NXOpen.Annotations.CalloutGroupBuilderMode`.  
        
        Signature ``SetGroupSymbols(symbols)`` 
        
        :param symbols: 
        :type symbols: list of :py:class:`NXOpen.Annotations.IdSymbol` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    CalloutModeType: CalloutGroupBuilderMode = ...
    """
    Returns or sets  the mode 
    
    <hr>
    
    Getter Method
    
    Signature ``CalloutModeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CalloutGroupBuilderMode` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalloutModeType`` 
    
    :param mode: 
    :type mode: :py:class:`NXOpen.Annotations.CalloutGroupBuilderMode` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    LayoutType: CalloutGroupBuilderLayout = ...
    """
    Returns or sets  the layout type 
    
    <hr>
    
    Getter Method
    
    Signature ``LayoutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CalloutGroupBuilderLayout` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LayoutType`` 
    
    :param layout: 
    :type layout: :py:class:`NXOpen.Annotations.CalloutGroupBuilderLayout` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectCallout: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the selected callout 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCallout`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    VerticalLeaderAttachment: CalloutGroupBuilderVerticalGroupLeaderAttachment = ...
    """
    Returns or sets  the leader attachment to vertical callout groups 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalLeaderAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CalloutGroupBuilderVerticalGroupLeaderAttachment` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalLeaderAttachment`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Annotations.CalloutGroupBuilderVerticalGroupLeaderAttachment` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: CalloutGroupBuilder = ...  # unknown typename


class CenterMarkBuilder(BaseCenterMarkBuilder):
    """
    Builder for creating Center Mark.  
    
    It creates or edits Center Marks 
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.CenterlineCollection.CreateCenterMarkBuilder`
    
    Default values.
    
    ====================  ======
    Property              Value
    ====================  ======
    MultipleCenterMarks   false 
    ====================  ======
    
    .. versionadded:: NX6.0.0
    """
    Inherit: NXOpen.SelectNXObject = ...
    """
    Returns  the inherit object
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CenterMarkBuilder = ...  # unknown typename


class FitAssemblyDisplayStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FitAssemblyDisplayStyle():
    """
    Specifies the limit and fit assembly display style 
    This enum type is obsolete.
    
    .. deprecated::  NX11.0.0
       Use :py:class:`NXOpen.Annotations.FitAssemblyNewDisplayStyle` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleLine", "Display single line"
       "TwoLinesCentered", "Display hole and shaft with dimension text centered"
       "TwoLinesAligned", "Display hole and shaft with dimension text aligned"
    """
    SingleLine = 0  # FitAssemblyDisplayStyleMemberType
    TwoLinesCentered = 1  # FitAssemblyDisplayStyleMemberType
    TwoLinesAligned = 2  # FitAssemblyDisplayStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GovernmentSecurityInformationBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.GovernmentSecurityInformation` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateGovernmentSecurityInformationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetStringText(self) -> 'list[str]':
        """
        Returns the str text  
        
        Signature ``GetStringText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetStringText(self, stringText: 'list[str]') -> None:
        """
        Sets the str text 
        
        Signature ``SetStringText(stringText)`` 
        
        :param stringText: 
        :type stringText: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: GovernmentSecurityInformationBuilder = ...  # unknown typename


class TextPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextPosition():
    """
    Specifies the dimension text position 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AfterStub", "Specifies text position after stub"
       "AboveStub", "Specifies text position above stub"
       "Last", "Last enum value. Should not be used."
    """
    AfterStub = 0  # TextPositionMemberType
    AboveStub = 1  # TextPositionMemberType
    Last = 2  # TextPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ChamferLeaderPlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChamferLeaderPlacement():
    """
    Specifies the chamfer dimension leader placement relative to the chamfer 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Perpendicular", "Specifies leader perpendicular to the chamfer"
       "Parallel", "Specifies leader parallel to the chamfer"
       "Linear", "Specifies leader inline with the chamfer"
       "Last", "Last enum value. Should not be used."
    """
    Perpendicular = 0  # ChamferLeaderPlacementMemberType
    Parallel = 1  # ChamferLeaderPlacementMemberType
    Linear = 2  # ChamferLeaderPlacementMemberType
    Last = 3  # ChamferLeaderPlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DisplayStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Annotations.DisplayStyleBuilder`.  
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX11.0.1
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    LockSizeAndPosition: bool = ...
    """
    Returns or sets  the PMI lock pan and zoom setting 
    
    <hr>
    
    Getter Method
    
    Signature ``LockSizeAndPosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockSizeAndPosition`` 
    
    :param lockSizeAndPosition: 
    :type lockSizeAndPosition: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: geometric_tol ("GDT")
    """
    ParallelToScreen: bool = ...
    """
    Returns or sets  the PMI parallel to screen setting
    
    <hr>
    
    Getter Method
    
    Signature ``ParallelToScreen`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParallelToScreen`` 
    
    :param parallelToScreen: 
    :type parallelToScreen: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: geometric_tol ("GDT")
    """
    Null: DisplayStyleBuilder = ...  # unknown typename


class DimensionUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DimensionUnit():
    """
    Specifies the dimension unit 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Millimeters", "Specifies millimeters units"
       "Meters", "Specified meters units"
       "Inches", "Specifies inches units"
       "ArchitecturalFeetInches", "Specified architectural units - converts inches to feet for measurements larger than 12 inches"
       "EngineeringFeetInches", "Specified engineering units - converts inches to feet for measurements larger than 72 inches"
       "Last", "Last enum value. Should not be used."
    """
    Millimeters = 0  # DimensionUnitMemberType
    Meters = 1  # DimensionUnitMemberType
    Inches = 2  # DimensionUnitMemberType
    ArchitecturalFeetInches = 3  # DimensionUnitMemberType
    EngineeringFeetInches = 4  # DimensionUnitMemberType
    Last = 5  # DimensionUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CuttingPlaneSymbol(Annotation, IPmi):
    """
    Represents a Cutting Plane Symbol   
    
    Created with LightweightSection
    
    .. versionadded:: NX9.0.0
    """
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def AddBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Adds the business modifiers.  
        
        Signature ``AddBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated object  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSharedAssociatedObject(self) -> AssociatedObject:
        """
        Returns the shared associated objects  
        
        Signature ``GetSharedAssociatedObject()`` 
        
        :returns:  Shared associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  New associated object  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Index: int = ...
    """
    Returns or sets  the index.  
    
    It is a unique integer assigned to a PMI object.
    
    NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
    If it is, the changes will be overridden when the part is updated. 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns:  Unique integer assigned to the PMI object  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param index:  New integer for PMI object  
    :type index: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    IsMirrored: bool = ...
    """
    Returns  a flag indicating whether the annotation is mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMirrored`` 
    
    :returns:  Mirrored flag  
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: CuttingPlaneSymbol = ...  # unknown typename


class CircleCenterlineSettingsBuilder(CenterlineSettingsBuilder):
    """
    Represents a Builder for Circle Centerline Settings   
    
    .. versionadded:: NX6.0.0
    """
    Extension: float = ...
    """
    Returns or sets  the extension parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``Extension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Extension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    IndividualDistance: bool = ...
    """
    Returns or sets  the individual extension distance On/Off parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``IndividualDistance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndividualDistance`` 
    
    :param individualDistance: 
    :type individualDistance: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Size: float = ...
    """
    Returns or sets  the Center Cross Size parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: CircleCenterlineSettingsBuilder = ...  # unknown typename


class CylindricalDimension(BaseCylindricalDimension):
    """
    Represents a cylindrical dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: CylindricalDimension = ...  # unknown typename


class PmiString(PmiAttribute):
    """
    Represents a Pmi String   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiStringBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiString = ...  # unknown typename


class LeaderVerticalAttachmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LeaderVerticalAttachment():
    """
    Specifies on what a leader is attached to 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Null", "Should not be used"
       "Top", "Attach vertically to the top of the annotation"
       "Center", "Attach vertically to the center of the annotation"
       "Bottom", "Attach vertically to the bottom of the annotation"
       "Last", "Last enum value. Should not be used."
    """
    Null = -1  # LeaderVerticalAttachmentMemberType
    Top = 0  # LeaderVerticalAttachmentMemberType
    Center = 1  # LeaderVerticalAttachmentMemberType
    Bottom = 2  # LeaderVerticalAttachmentMemberType
    Last = 3  # LeaderVerticalAttachmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SearchCriteriaPMINotesBuilder(NXOpen.Builder):
    """
    Represents SearchCriteriaPMINotesBuilder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.SearchModelViewCollection.CreateSearchCriteriaPminotesBuilder`
    
    .. versionadded:: NX7.5.0
    """
    ByText: bool = ...
    """
    Returns or sets  the text toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ByText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByText`` 
    
    :param textChecke: 
    :type textChecke: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Text: str = ...
    """
    Returns or sets  the text 
    
    <hr>
    
    Getter Method
    
    Signature ``Text`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Text`` 
    
    :param text: 
    :type text: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TextType: SearchModelViewBuilderTextComparisionOptions = ...
    """
    Returns or sets  the text enum 
    
    <hr>
    
    Getter Method
    
    Signature ``TextType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextType`` 
    
    :param textType: 
    :type textType: :py:class:`NXOpen.Annotations.SearchModelViewBuilderTextComparisionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SearchCriteriaPMINotesBuilder = ...  # unknown typename


class Hatch(Annotation):
    """
    Represents a crosshatch or area fill   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.HatchBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Hatch = ...  # unknown typename


class SingleSidedDisplayBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.SingleSidedDisplayBuilder`.  
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX10.0.0
    """
    
    def Flip(self) -> None:
        """
        Flips the side of single sided dimension 
        
        Signature ``Flip()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DisplayAsSingleSided: bool = ...
    """
    Returns or sets  the display as single sided 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayAsSingleSided`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayAsSingleSided`` 
    
    :param displayAsSingleSided: 
    :type displayAsSingleSided: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SingleSidedArrowLineLength: float = ...
    """
    Returns or sets  the arrow line length on the open side of single sided dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``SingleSidedArrowLineLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SingleSidedArrowLineLength`` 
    
    :param singleSidedArrowLineLength: 
    :type singleSidedArrowLineLength: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SingleSidedDisplayBuilder = ...  # unknown typename


class FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameIndicatorBuilderFcfIndicatorType():
    """
    Specifies the type of FCF indicator 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "IntersectionPlane", " - "
       "OrientationPlane", " - "
       "CollectionPlane", " - "
       "DirectionFeature", " - "
    """
    IntersectionPlane = 0  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
    OrientationPlane = 1  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
    CollectionPlane = 2  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
    DirectionFeature = 3  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristic():
    """
    Specifies the characteristic of the FCF indicator 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Parallel", " - "
       "Perpendicular", " - "
       "Angular", " - "
       "Including", " - "
    """
    Parallel = 0  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
    Perpendicular = 1  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
    Angular = 2  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
    Including = 3  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameIndicatorBuilderFcfIndicatorDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureControlFrameIndicatorBuilderFcfIndicatorDirection():
    """
    Specifies the direction of the FCF indicator 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "After", " - "
       "Before", " - "
    """
    After = 0  # FeatureControlFrameIndicatorBuilderFcfIndicatorDirectionMemberType
    Before = 1  # FeatureControlFrameIndicatorBuilderFcfIndicatorDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureControlFrameIndicatorBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a FcfIndicatorBuilder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreateFeatureControlFrameIndicatorBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class FcfIndicatorType():
        """
        Specifies the type of FCF indicator 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "IntersectionPlane", " - "
           "OrientationPlane", " - "
           "CollectionPlane", " - "
           "DirectionFeature", " - "
        """
        IntersectionPlane = 0  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
        OrientationPlane = 1  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
        CollectionPlane = 2  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
        DirectionFeature = 3  # FeatureControlFrameIndicatorBuilderFcfIndicatorTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FcfIndicatorCharacteristic():
        """
        Specifies the characteristic of the FCF indicator 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Parallel", " - "
           "Perpendicular", " - "
           "Angular", " - "
           "Including", " - "
        """
        Parallel = 0  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
        Perpendicular = 1  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
        Angular = 2  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
        Including = 3  # FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristicMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FcfIndicatorDirection():
        """
        Specifies the direction of the FCF indicator 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "After", " - "
           "Before", " - "
        """
        After = 0  # FeatureControlFrameIndicatorBuilderFcfIndicatorDirectionMemberType
        Before = 1  # FeatureControlFrameIndicatorBuilderFcfIndicatorDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Direction: FeatureControlFrameIndicatorBuilderFcfIndicatorDirection = ...
    """
    Returns or sets  the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilderFcfIndicatorDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilderFcfIndicatorDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    IndicatorType: FeatureControlFrameIndicatorBuilderFcfIndicatorType = ...
    """
    Returns or sets  the indicator type 
    
    <hr>
    
    Getter Method
    
    Signature ``IndicatorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilderFcfIndicatorType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndicatorType`` 
    
    :param indicatorType: 
    :type indicatorType: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilderFcfIndicatorType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Label: DatumReferenceBuilder = ...
    """
    Returns  the label 
    
    <hr>
    
    Getter Method
    
    Signature ``Label`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DatumReferenceBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Symbol: FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristic = ...
    """
    Returns or sets  the charactersitic 
    
    <hr>
    
    Getter Method
    
    Signature ``Symbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristic` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Symbol`` 
    
    :param symbol: 
    :type symbol: :py:class:`NXOpen.Annotations.FeatureControlFrameIndicatorBuilderFcfIndicatorCharacteristic` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: FeatureControlFrameIndicatorBuilder = ...  # unknown typename


class PartIdentificationBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PartIdentification` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePartIdentificationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    DescriptiveModifier: str = ...
    """
    Returns or sets  the descriptive modifier 
    
    <hr>
    
    Getter Method
    
    Signature ``DescriptiveModifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DescriptiveModifier`` 
    
    :param descriptiveModifier: 
    :type descriptiveModifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ItemName: str = ...
    """
    Returns or sets  the item name 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemName`` 
    
    :param itemName: 
    :type itemName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ItemNameModifier: str = ...
    """
    Returns or sets  the item name modifier 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemNameModifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemNameModifier`` 
    
    :param itemNameModifier: 
    :type itemNameModifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PartIdentifier: str = ...
    """
    Returns or sets  the part identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``PartIdentifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartIdentifier`` 
    
    :param partIdentifier: 
    :type partIdentifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PartIdentificationBuilder = ...  # unknown typename


class RadialDimensionBuilder(BaseRadialDimensionBuilder):
    """
    Represents a :py:class:`Annotations.Dimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreateRadialDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def SetNthSecondaryOrigin(self, nth: int, secondaryOrigin: NXOpen.Point3d) -> None:
        """
        The origins for secondary dimensions 
        
        Signature ``SetNthSecondaryOrigin(nth, secondaryOrigin)`` 
        
        :param nth: 
        :type nth: int 
        :param secondaryOrigin: 
        :type secondaryOrigin: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetNthSecondaryOrigin(self, nth: int) -> NXOpen.Point3d:
        """
        The origins for secondary dimensions  
        
        Signature ``GetNthSecondaryOrigin(nth)`` 
        
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNthSecondaryArrowheadOrientation(self, nth: int, secondaryArrowheadOrientation: TextPlacement) -> None:
        """
        The arrowhead orientation for nth secondary dimensions 
        
        Signature ``SetNthSecondaryArrowheadOrientation(nth, secondaryArrowheadOrientation)`` 
        
        :param nth: 
        :type nth: int 
        :param secondaryArrowheadOrientation: 
        :type secondaryArrowheadOrientation: :py:class:`NXOpen.Annotations.TextPlacement` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetNthSecondaryArrowheadOrientation(self, nth: int) -> TextPlacement:
        """
        The arrowhead orientation for nth secondary dimensions  
        
        Signature ``GetNthSecondaryArrowheadOrientation(nth)`` 
        
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.TextPlacement` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSecondaryCallouts(self) -> 'list[Dimension]':
        """
        The secondary callouts  
        
        Signature ``GetSecondaryCallouts()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Annotations.Dimension` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    Driving: DrivingValueBuilder = ...
    """
    Returns  the driving 
    
    <hr>
    
    Getter Method
    
    Signature ``Driving`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.DrivingValueBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    IsAutoplaced: bool = ...
    """
    Returns or sets  a flag to indicate if auto placement turned on.  
    
    This is used to compute origins for secondary dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``IsAutoplaced`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsAutoplaced`` 
    
    :param isAutoplaced: 
    :type isAutoplaced: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: RadialDimensionBuilder = ...  # unknown typename


class LineTarget(DatumTarget, ILineTarget):
    """
    Represents a line datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    StartPointCoordinates: NXOpen.Point3d = ...
    """
    Returns  the target start point coordinates 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPointCoordinates`` 
    
    :returns:  Start point coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    EndPointCoordinates: NXOpen.Point3d = ...
    """
    Returns  the target end point coordinates 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPointCoordinates`` 
    
    :returns:  End point coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Null: LineTarget = ...  # unknown typename


class SurfaceFinishStandardMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SurfaceFinishStandard():
    """
    Specifies the drafting surface finish standard type
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ansi", "ANSI"
       "Iso", "ISO"
       "Jis", "JIS"
       "Din", "DIN"
       "Iso2002", "ISO 2002"
       "Din2002", "DIN 2002"
       "Gb", "GB131-93"
       "Eskd", "ESKD"
    """
    Ansi = 0  # SurfaceFinishStandardMemberType
    Iso = 1  # SurfaceFinishStandardMemberType
    Jis = 2  # SurfaceFinishStandardMemberType
    Din = 3  # SurfaceFinishStandardMemberType
    Iso2002 = 4  # SurfaceFinishStandardMemberType
    Din2002 = 5  # SurfaceFinishStandardMemberType
    Gb = 6  # SurfaceFinishStandardMemberType
    Eskd = 7  # SurfaceFinishStandardMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FrameBarElementStyleBuilderLabelTextOrientationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FrameBarElementStyleBuilderLabelTextOrientation():
    """
    the Label text orientation 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AlongTic", "Along Tic"
       "PerpendicularToTic", "Perpendicular To Tic"
    """
    AlongTic = 0  # FrameBarElementStyleBuilderLabelTextOrientationMemberType
    PerpendicularToTic = 1  # FrameBarElementStyleBuilderLabelTextOrientationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FrameBarElementStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilder`.  
    
    This class queries and sets FrameBar preferences when creating and editing
    FrameBar drafting annotations.
    
    .. versionadded:: NX6.0.0
    """
    
    class LabelTextOrientation():
        """
        the Label text orientation 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AlongTic", "Along Tic"
           "PerpendicularToTic", "Perpendicular To Tic"
        """
        AlongTic = 0  # FrameBarElementStyleBuilderLabelTextOrientationMemberType
        PerpendicularToTic = 1  # FrameBarElementStyleBuilderLabelTextOrientationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ExtendedTicBegin: int = ...
    """
    Returns or sets  the extended tic from which display to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendedTicBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendedTicBegin`` 
    
    :param displayExtendBegin: 
    :type displayExtendBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    ExtendedTicColor: int = ...
    """
    Returns or sets  the extended tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendedTicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendedTicColor`` 
    
    :param extendColor: 
    :type extendColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    ExtendedTicFont: int = ...
    """
    Returns or sets  the extended tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendedTicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendedTicFont`` 
    
    :param extendFont: 
    :type extendFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    ExtendedTicFrequency: int = ...
    """
    Returns or sets  the extended tic display frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendedTicFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendedTicFrequency`` 
    
    :param displayExtendFrequency: 
    :type displayExtendFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    ExtendedTicLength: float = ...
    """
    Returns or sets  the extended tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendedTicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendedTicLength`` 
    
    :param extendLength: 
    :type extendLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    ExtendedTicWidth: int = ...
    """
    Returns or sets  the extended tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendedTicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendedTicWidth`` 
    
    :param extendWidth: 
    :type extendWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    LabelColor: int = ...
    """
    Returns or sets  the label color 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    LabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    LabelItalicized: bool = ...
    """
    Returns or sets  the label font style 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    LabelName: int = ...
    """
    Returns or sets  the label name 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelName`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelName`` 
    
    :param labelName: 
    :type labelName: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    LabelWidth: int = ...
    """
    Returns or sets  the label width 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    SkipLabelBegin: int = ...
    """
    Returns or sets  the label from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``SkipLabelBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SkipLabelBegin`` 
    
    :param skipLabelBegin: 
    :type skipLabelBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    SkipLabelFrequency: int = ...
    """
    Returns or sets  the label skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``SkipLabelFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SkipLabelFrequency`` 
    
    :param skipLabelFrequency: 
    :type skipLabelFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    SkipTicBegin: int = ...
    """
    Returns or sets  the tic from which skip to be started 
    
    <hr>
    
    Getter Method
    
    Signature ``SkipTicBegin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SkipTicBegin`` 
    
    :param skipTicBegin: 
    :type skipTicBegin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    SkipTicFrequency: int = ...
    """
    Returns or sets  the tic skip frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``SkipTicFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SkipTicFrequency`` 
    
    :param skipTicFrequency: 
    :type skipTicFrequency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TicColor: int = ...
    """
    Returns or sets  the tic color 
    
    <hr>
    
    Getter Method
    
    Signature ``TicColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TicColor`` 
    
    :param ticColor: 
    :type ticColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TicDisplay: int = ...
    """
    Returns or sets  the transverse frames tic display type 
    
    <hr>
    
    Getter Method
    
    Signature ``TicDisplay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TicDisplay`` 
    
    :param ticDisplay: 
    :type ticDisplay: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TicFont: int = ...
    """
    Returns or sets  the tic font 
    
    <hr>
    
    Getter Method
    
    Signature ``TicFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TicFont`` 
    
    :param ticFont: 
    :type ticFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TicLabelTextOrientation: FrameBarElementStyleBuilderLabelTextOrientation = ...
    """
    Returns or sets  the tic label text orientation type 
    
    <hr>
    
    Getter Method
    
    Signature ``TicLabelTextOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilderLabelTextOrientation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TicLabelTextOrientation`` 
    
    :param ticLabelTextOrientation: 
    :type ticLabelTextOrientation: :py:class:`NXOpen.Annotations.FrameBarElementStyleBuilderLabelTextOrientation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TicLength: float = ...
    """
    Returns or sets  the tic length 
    
    <hr>
    
    Getter Method
    
    Signature ``TicLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TicLength`` 
    
    :param ticLength: 
    :type ticLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    TicWidth: int = ...
    """
    Returns or sets  the tic width 
    
    <hr>
    
    Getter Method
    
    Signature ``TicWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TicWidth`` 
    
    :param ticWidth: 
    :type ticWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting") OR drafting ("DRAFTING")
    """
    Null: FrameBarElementStyleBuilder = ...  # unknown typename


class NarrowDisplayOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class NarrowDisplayOption():
    """
    Specifies the narrow dimension display option 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Doesn't display narrow dimension"
       "NoLeader", "Displays narrow dimension without leader"
       "WithLeaderNoStub", "Displays narrow dimension with leader, but without stub"
       "AboveStub", "Displays narrow dimension above stub"
       "AfterStub", "Displays narrow dimension after stub"
       "Last", "Last enum value. Should not be used."
    """
    NotSet = 0  # NarrowDisplayOptionMemberType
    NoLeader = 1  # NarrowDisplayOptionMemberType
    WithLeaderNoStub = 2  # NarrowDisplayOptionMemberType
    AboveStub = 3  # NarrowDisplayOptionMemberType
    AfterStub = 4  # NarrowDisplayOptionMemberType
    Last = 5  # NarrowDisplayOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Annotations.HoleTable` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHoleTableBuilder(self, holeTable: Table) -> HoleTableBuilder:
        """
        If None create a new hole table, otherwise edit existing new hole table  
        
        Signature ``CreateHoleTableBuilder(holeTable)`` 
        
        :param holeTable:  hole table  
        :type holeTable: :py:class:`NXOpen.Annotations.Table` 
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.HoleTableBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> HoleTable:
        """
        Finds the hole table with the given name.  
        
        An exception will be 
        thrown if no object can be found with given name  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the hole table to be found  
        :type journalIdentifier: str 
        :returns:  hole table with this identifier  
        :rtype: :py:class:`NXOpen.Annotations.HoleTable` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class PmiAttributeValueString(PmiAttributeValue):
    """
    Represents a PMI Attribute String Value   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiAttributeValueStringBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiAttributeValueString = ...  # unknown typename


class IdSymbolBuilderSymbolTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IdSymbolBuilderSymbolTypes():
    """
    the valid types for an id symbol 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circle", "Circle"
       "DividedCircle", "Divided circle"
       "Triangle", "Triangle with point down"
       "TriangleUp", "Triangle with point up"
       "Square", "Square"
       "DividedSquare", "Divided square"
       "Hexagon", "Hexagon"
       "DividedHexagon", "Divided hexagon"
       "QuadrantCircle", "Quadrant circle"
       "RoundedBox", "Rounded box"
       "Underline", "Underline"
    """
    Circle = 0  # IdSymbolBuilderSymbolTypesMemberType
    DividedCircle = 1  # IdSymbolBuilderSymbolTypesMemberType
    Triangle = 2  # IdSymbolBuilderSymbolTypesMemberType
    TriangleUp = 3  # IdSymbolBuilderSymbolTypesMemberType
    Square = 4  # IdSymbolBuilderSymbolTypesMemberType
    DividedSquare = 5  # IdSymbolBuilderSymbolTypesMemberType
    Hexagon = 6  # IdSymbolBuilderSymbolTypesMemberType
    DividedHexagon = 7  # IdSymbolBuilderSymbolTypesMemberType
    QuadrantCircle = 8  # IdSymbolBuilderSymbolTypesMemberType
    RoundedBox = 9  # IdSymbolBuilderSymbolTypesMemberType
    Underline = 10  # IdSymbolBuilderSymbolTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IdSymbolBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.IdSymbol` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.IdSymbolCollection.CreateIdSymbolBuilder`
    
    Default values.
    
    ========  =====
    Property  Value
    ========  =====
    Size      0 
    ========  =====
    
    .. versionadded:: NX5.0.0
    """
    
    class SymbolTypes():
        """
        the valid types for an id symbol 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circle", "Circle"
           "DividedCircle", "Divided circle"
           "Triangle", "Triangle with point down"
           "TriangleUp", "Triangle with point up"
           "Square", "Square"
           "DividedSquare", "Divided square"
           "Hexagon", "Hexagon"
           "DividedHexagon", "Divided hexagon"
           "QuadrantCircle", "Quadrant circle"
           "RoundedBox", "Rounded box"
           "Underline", "Underline"
        """
        Circle = 0  # IdSymbolBuilderSymbolTypesMemberType
        DividedCircle = 1  # IdSymbolBuilderSymbolTypesMemberType
        Triangle = 2  # IdSymbolBuilderSymbolTypesMemberType
        TriangleUp = 3  # IdSymbolBuilderSymbolTypesMemberType
        Square = 4  # IdSymbolBuilderSymbolTypesMemberType
        DividedSquare = 5  # IdSymbolBuilderSymbolTypesMemberType
        Hexagon = 6  # IdSymbolBuilderSymbolTypesMemberType
        DividedHexagon = 7  # IdSymbolBuilderSymbolTypesMemberType
        QuadrantCircle = 8  # IdSymbolBuilderSymbolTypesMemberType
        RoundedBox = 9  # IdSymbolBuilderSymbolTypesMemberType
        Underline = 10  # IdSymbolBuilderSymbolTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetPreviewObject(self, symbol: IdSymbol) -> None:
        """
        Sets the preview object for dialog creation of id symbols 
        
        Signature ``SetPreviewObject(symbol)`` 
        
        :param symbol:  rubberbanding symbol  
        :type symbol: :py:class:`NXOpen.Annotations.IdSymbol` 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX6.0.0
           This functionality is no longer supported.
        
        License requirements: None.
        """
        ...
    
    ForeshorteningSymbol: ForeshorteningSymbolBuilder = ...
    """
    Returns  the foreshortening symbol builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ForeshorteningSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Inherit: NXOpen.SelectObject = ...
    """
    Returns  the inherit 
    The id symbol from which the style properties are inherited 
    
    <hr>
    
    Getter Method
    
    Signature ``Inherit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Leader: LeaderBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Annotations.LeaderBuilder` for the annotation 
    
    <hr>
    
    Getter Method
    
    Signature ``Leader`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.LeaderBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LowerText: str = ...
    """
    Returns or sets  the lower text 
    The text displayed in the lower portion of the divided symbol    
    In case Quadrant Circle symbol, the lower text is placed in      
    the lower right quadrant just above the horizontal dividing line.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerText`` 
    
    :param lowerText: 
    :type lowerText: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Origin: OriginBuilder = ...
    """
    Returns  the origin, where the symbol is going to be displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Placement: AnnotationPlacement = ...
    """
    Returns  an annotation placement object 
    
    <hr>
    
    Getter Method
    
    Signature ``Placement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.AnnotationPlacement` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    Size: float = ...
    """
    Returns or sets  the size 
    The circle symbols are measured by diameter, the rounded box   
    is measured by length, and all other symbols are measured by a 
    circumscribed circle                                           
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Size`` 
    
    :param size: 
    :type size: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Style: StyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SymbolType: IdSymbolBuilderSymbolTypes = ...
    """
    Returns or sets  the symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.IdSymbolBuilderSymbolTypes` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`NXOpen.Annotations.IdSymbolBuilder.Type` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolType`` 
    
    :param symbolType: 
    :type symbolType: :py:class:`NXOpen.Annotations.IdSymbolBuilderSymbolTypes` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`NXOpen.Annotations.IdSymbolBuilder.Type` instead.
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Type: IdSymbolBuilderSymbolTypes = ...
    """
    Returns or sets  the symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.IdSymbolBuilderSymbolTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Annotations.IdSymbolBuilderSymbolTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UpperText: str = ...
    """
    Returns or sets  the upper text 
    The text displayed in the upper portion of the divided symbol    
    In case Quadrant Circle symbol, the upper text is placed in      
    the upper left quadrant just above the horizontal dividing line.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperText`` 
    
    :param upperText: 
    :type upperText: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    Null: IdSymbolBuilder = ...  # unknown typename


class LightweightSectionBuilder(NXOpen.Display.DynamicSectionBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.LightweightSection` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiLightweightSectionCollection.CreateLightweightSectionBuilder`
    
    Default values.
    
    =============================================  ============
    Property                                       Value
    =============================================  ============
    BoxExtentDelayUpdate                           false 
    ---------------------------------------------  ------------
    CapColorOption                                 Any 
    ---------------------------------------------  ------------
    ClipType                                       Section 
    ---------------------------------------------  ------------
    CurveColorOption                               Any 
    ---------------------------------------------  ------------
    CuttingPlaneSymbol.DisplayCuttingPlaneSymbol   0 
    ---------------------------------------------  ------------
    CuttingPlaneSymbol.UseTwoArrows                0 
    ---------------------------------------------  ------------
    CuttingPlaneSymbol.ViewNameFormat              UserDefined 
    ---------------------------------------------  ------------
    LockPlanes                                     true 
    ---------------------------------------------  ------------
    ShowCap                                        true 
    ---------------------------------------------  ------------
    ShowClip                                       true 
    ---------------------------------------------  ------------
    ShowCurves (deprecated)                        false 
    ---------------------------------------------  ------------
    ShowGrid                                       false 
    ---------------------------------------------  ------------
    ShowInterference                               false 
    ---------------------------------------------  ------------
    ShowViewer                                     false 
    ---------------------------------------------  ------------
    Type                                           OnePlane 
    =============================================  ============
    
    .. versionadded:: NX7.5.0
    """
    
    def GetSectionCurves(self) -> 'list[NXOpen.Curve]':
        """
        Returns the lightweight section view curves 
        
        Signature ``GetSectionCurves()`` 
        
        :returns:  Array of lightweight section view curves  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AssemblyCrosshatching: bool = ...
    """
    Returns or sets  the assembly crosshatch option 
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyCrosshatching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssemblyCrosshatching`` 
    
    :param assemblyCrosshatchingOption: 
    :type assemblyCrosshatchingOption: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    BoundingBoxComponents: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the objects to define the box section type bounding extents
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingBoxComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ClipCoplanarObjects: bool = ...
    """
    Returns or sets  the clip coplanar objects 
    
    <hr>
    
    Getter Method
    
    Signature ``ClipCoplanarObjects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClipCoplanarObjects`` 
    
    :param clipCoplanarObjectsOption: 
    :type clipCoplanarObjectsOption: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    ClipWireframeObjects: bool = ...
    """
    Returns or sets  the clip wireframe objects 
    
    <hr>
    
    Getter Method
    
    Signature ``ClipWireframeObjects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClipWireframeObjects`` 
    
    :param clipWireframeObjectsOption: 
    :type clipWireframeObjectsOption: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: geometric_tol ("GDT")
    """
    CrosshatchSettings: HatchFillSettingsBuilder = ...
    """
    Returns  the crosshatch settings 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CuttingPlaneSymbol: CuttingPlaneSymbolBuilder = ...
    """
    Returns  the cutting plane symbol
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPlaneSymbol`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.CuttingPlaneSymbolBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DisplayCrosshatch: bool = ...
    """
    Returns or sets  the display crosshatch option 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayCrosshatch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayCrosshatch`` 
    
    :param displayCrosshatchOption: 
    :type displayCrosshatchOption: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    ObjectsToSection: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the objects to section
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectsToSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PatternDefinedBy: int = ...
    """
    Returns or sets  the crosshatch pattern defined by  
    
    <hr>
    
    Getter Method
    
    Signature ``PatternDefinedBy`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PatternDefinedBy`` 
    
    :param patternDefinedBy: 
    :type patternDefinedBy: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    RestrictCrosshatch: bool = ...
    """
    Returns or sets  the restrict crosshatch angle to 45 degree option 
    
    <hr>
    
    Getter Method
    
    Signature ``RestrictCrosshatch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestrictCrosshatch`` 
    
    :param restrictCrosshatchOption: 
    :type restrictCrosshatchOption: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    SaveAssociativeCurves: bool = ...
    """
    Returns or sets  the save associative curves toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveAssociativeCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveAssociativeCurves`` 
    
    :param saveAssociativeCurvesToggle: 
    :type saveAssociativeCurvesToggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT")
    """
    ToleranceCrosshatch: float = ...
    """
    Returns or sets  the crosshatch adjacency tolerance  
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceCrosshatch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceCrosshatch`` 
    
    :param crosshatchAdjacencyTolerance: 
    :type crosshatchAdjacencyTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT")
    """
    ViewName: str = ...
    """
    Returns or sets  the name of the lightweight section view 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewName`` 
    
    :param viewName:  Section name  
    :type viewName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: geometric_tol ("GDT")
    """
    Null: LightweightSectionBuilder = ...  # unknown typename


class PmiTrackingPropertiesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Annotations.AngularDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.AnnotationManager.CreatePmiTrackingPropertiesBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    def LoadDefaultSettings(self) -> None:
        """
        It load default settings for all properties as defined in inherit.  
        
        xml file
        
        Signature ``LoadDefaultSettings()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def UpdateTrackingProperties(self) -> None:
        """
        Updates the Inherit PMI properties tracking list 
        
        Signature ``UpdateTrackingProperties()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetPmiTrackingPropertyStatus(self, propertyName: str, propertyStatus: bool) -> None:
        """
        Set the modified tracking status of Inherit PMI properties 
        
        Signature ``SetPmiTrackingPropertyStatus(propertyName, propertyStatus)`` 
        
        :param propertyName: 
        :type propertyName: str 
        :param propertyStatus: 
        :type propertyStatus: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetPmiTrackingPropertyStatus(self, propertyName: str) -> bool:
        """
        Get the modified tracking status of Inherit PMI properties  
        
        Signature ``GetPmiTrackingPropertyStatus(propertyName)`` 
        
        :param propertyName: 
        :type propertyName: str 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Null: PmiTrackingPropertiesBuilder = ...  # unknown typename


class HorizontalOrdinateMargin(OrdinateMargin):
    """
    Represents a horizontal ordinate margin   
    
    .. versionadded:: NX4.0.0
    """
    Null: HorizontalOrdinateMargin = ...  # unknown typename


class MasterSymbolListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[MasterSymbolListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: MasterSymbolListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: MasterSymbolListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> MasterSymbolListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: MasterSymbolListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: MasterSymbolListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[MasterSymbolListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[MasterSymbolListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: MasterSymbolListItemBuilder, object2: MasterSymbolListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: MasterSymbolListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Annotations.MasterSymbolListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: MasterSymbolListItemBuilderList = ...  # unknown typename


class LabelData(NXOpen.TransientObject):
    """
    Represents label data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetText(self) -> 'list[str]':
        """
        Returns the text  
        
        Signature ``GetText()`` 
        
        :returns:  List of lines  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetText(self, lines: 'list[str]') -> None:
        """
        Sets the text 
        
        Signature ``SetText(lines)`` 
        
        :param lines:  List of new lines  
        :type lines: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSimpleDraftingAidPreferences(self) -> SimpleDraftingAidPreferences:
        """
        Returns the SimpleDraftingAidPreferences object  
        
        Signature ``GetSimpleDraftingAidPreferences()`` 
        
        :returns:  Label preferences  
        :rtype: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSimpleDraftingAidPreferences(self, preferences: SimpleDraftingAidPreferences) -> None:
        """
        Sets the SimpleDraftingAidPreferences object 
        
        Signature ``SetSimpleDraftingAidPreferences(preferences)`` 
        
        :param preferences:  New label preferences  
        :type preferences: :py:class:`NXOpen.Annotations.SimpleDraftingAidPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    


class PmiCylindricalDimension(BaseCylindricalDimension):
    """
    Represents a PMI cylindrical dimension   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiLinearDimensionBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PmiCylindricalDimension = ...  # unknown typename


class PmiData(NXOpen.TransientObject):
    """
    Represents PMI(Product and Manufacturing Information) data   
    
    .. versionadded:: NX4.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBusinessModifiers(self) -> 'list[BusinessModifier]':
        """
        Returns the business modifiers  
        
        Signature ``GetBusinessModifiers()`` 
        
        :returns:  List of business modifiers  
        :rtype: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBusinessModifiers(self, businessModifiers: 'list[BusinessModifier]') -> None:
        """
        Sets the business modifiers 
        
        Signature ``SetBusinessModifiers(businessModifiers)`` 
        
        :param businessModifiers:  List of new business modifiers  
        :type businessModifiers: list of :py:class:`NXOpen.Annotations.BusinessModifier` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAssociatedObject(self) -> AssociatedObject:
        """
        Returns the associated object  
        
        Signature ``GetAssociatedObject()`` 
        
        :returns:  Associated objects  
        :rtype: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssociatedObject(self, assocObj: AssociatedObject) -> None:
        """
        Sets the associated object 
        
        Signature ``SetAssociatedObject(assocObj)`` 
        
        :param assocObj:  List of new associated objects  
        :type assocObj: :py:class:`NXOpen.Annotations.AssociatedObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIndex(self) -> int:
        """
        Returns the index  
        
        Signature ``GetIndex()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetIndex(self, index: int) -> None:
        """
        Sets the index 
        
        Signature ``SetIndex(index)`` 
        
        :param index: 
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNumAssociatedObjectsSets(self) -> int:
        """
        Returns the numbers of associated objects list  
        
        Signature ``GetNumAssociatedObjectsSets()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNumAssociatedObjectsSets(self, numAssocObjectsSets: int) -> None:
        """
        Sets the number of associated objects list 
        
        Signature ``SetNumAssociatedObjectsSets(numAssocObjectsSets)`` 
        
        :param numAssocObjectsSets: 
        :type numAssocObjectsSets: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    


class TargetPoint(DraftingAid):
    """
    Represents a target point   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.TargetPointBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: TargetPoint = ...  # unknown typename


class ImportAutocadBlockBuilderFileFolderMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ImportAutocadBlockBuilderFileFolder():
    """
    the Selection mode Enum 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "File", "File Selection mode"
       "Folder", "Folder Selection mode"
    """
    File = 0  # ImportAutocadBlockBuilderFileFolderMemberType
    Folder = 1  # ImportAutocadBlockBuilderFileFolderMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ImportAutocadBlockBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ImportAutocadBlockBuilderType():
    """
    Symbol Type Enum. This option is used to differentiate OS, Teamcenter and Part symbols 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Teamcenter", "Teamcenter Symbol"
       "Part", "Part Symbol"
       "Native", "OS Symbol"
    """
    Teamcenter = 0  # ImportAutocadBlockBuilderTypeMemberType
    Part = 1  # ImportAutocadBlockBuilderTypeMemberType
    Native = 2  # ImportAutocadBlockBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ImportAutocadBlockBuilderEntityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ImportAutocadBlockBuilderEntityType():
    """
    Represents the Import Entity Type. This option is used to differentiate Custom Symbols and 2D Components 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Symbol", "Custom Symbol"
       "Component", "2D Component"
    """
    Symbol = 0  # ImportAutocadBlockBuilderEntityTypeMemberType
    Component = 1  # ImportAutocadBlockBuilderEntityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ImportAutocadBlockBuilder(NXOpen.Builder):
    """
    Represents a builder allowing import of AutoCAD blocks.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.DraftingManager.CreateImportAutocadBlockBuilder`
    
    Default values.
    
    ========================  =====
    Property                  Value
    ========================  =====
    IncludeSubfolders         0 
    ------------------------  -----
    PreserveFolderStructure   0 
    ------------------------  -----
    SelectMode                File 
    ========================  =====
    
    .. versionadded:: NX8.0.0
    """
    
    class FileFolder():
        """
        the Selection mode Enum 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "File", "File Selection mode"
           "Folder", "Folder Selection mode"
        """
        File = 0  # ImportAutocadBlockBuilderFileFolderMemberType
        Folder = 1  # ImportAutocadBlockBuilderFileFolderMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Type():
        """
        Symbol Type Enum. This option is used to differentiate OS, Teamcenter and Part symbols 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Teamcenter", "Teamcenter Symbol"
           "Part", "Part Symbol"
           "Native", "OS Symbol"
        """
        Teamcenter = 0  # ImportAutocadBlockBuilderTypeMemberType
        Part = 1  # ImportAutocadBlockBuilderTypeMemberType
        Native = 2  # ImportAutocadBlockBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EntityType():
        """
        Represents the Import Entity Type. This option is used to differentiate Custom Symbols and 2D Components 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Symbol", "Custom Symbol"
           "Component", "2D Component"
        """
        Symbol = 0  # ImportAutocadBlockBuilderEntityTypeMemberType
        Component = 1  # ImportAutocadBlockBuilderEntityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddFolder(self, folderName: str) -> None:
        """
        Adds a folder to import list 
        
        Signature ``AddFolder(folderName)`` 
        
        :param folderName: 
        :type folderName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def AddFile(self, fileName: str) -> None:
        """
        Adds a file to import list 
        
        Signature ``AddFile(fileName)`` 
        
        :param fileName: 
        :type fileName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def RemoveFolder(self, folderName: str) -> None:
        """
        Removes a folder from import list 
        
        Signature ``RemoveFolder(folderName)`` 
        
        :param folderName: 
        :type folderName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def RemoveFile(self, fileName: str) -> None:
        """
        Removes a file from import list 
        
        Signature ``RemoveFile(fileName)`` 
        
        :param fileName: 
        :type fileName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def SelectFolder(self, folderName: str, isSelected: bool) -> None:
        """
        Selects or deselects a folder 
        
        Signature ``SelectFolder(folderName, isSelected)`` 
        
        :param folderName: 
        :type folderName: str 
        :param isSelected: 
        :type isSelected: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def SelectFile(self, fileName: str, isSelected: bool) -> None:
        """
        Selects or deselects a file 
        
        Signature ``SelectFile(fileName, isSelected)`` 
        
        :param fileName: 
        :type fileName: str 
        :param isSelected: 
        :type isSelected: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def SelectBlock(self, fileName: str, blockName: str, isSelected: bool) -> None:
        """
        Selects or deselects a block.  
        
        Both file and block names need to be specified 
        
        Signature ``SelectBlock(fileName, blockName, isSelected)`` 
        
        :param fileName: 
        :type fileName: str 
        :param blockName: 
        :type blockName: str 
        :param isSelected: 
        :type isSelected: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    ImportEntityType: ImportAutocadBlockBuilderEntityType = ...
    """
    Returns or sets  the Import Entity type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ImportEntityType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ImportAutocadBlockBuilderEntityType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``ImportEntityType`` 
    
    :param entityType: 
    :type entityType: :py:class:`NXOpen.Annotations.ImportAutocadBlockBuilderEntityType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    ImportPolylineTo: int = ...
    """
    Returns or sets  the Import polyline option 
    
    <hr>
    
    Getter Method
    
    Signature ``ImportPolylineTo`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``ImportPolylineTo`` 
    
    :param type: 
    :type type: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    IncludeModelSpace: bool = ...
    """
    Returns or sets  the model space toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeModelSpace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeModelSpace`` 
    
    :param includeModelSpace: 
    :type includeModelSpace: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    IncludeSubfolders: bool = ...
    """
    Returns or sets  the subfolders toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeSubfolders`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeSubfolders`` 
    
    :param includeSubfolders: 
    :type includeSubfolders: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    InputFolder: str = ...
    """
    Returns or sets  the name of the input folder 
    
    <hr>
    
    Getter Method
    
    Signature ``InputFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``InputFolder`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    LibraryPathName: str = ...
    """
    Returns or sets  the Reuse library path name.  
    
    <hr>
    
    Getter Method
    
    Signature ``LibraryPathName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``LibraryPathName`` 
    
    :param pathName: 
    :type pathName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    PreserveFolderStructure: bool = ...
    """
    Returns or sets  the folder structure toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``PreserveFolderStructure`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``PreserveFolderStructure`` 
    
    :param preserveFolderStructure: 
    :type preserveFolderStructure: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    SelectMode: ImportAutocadBlockBuilderFileFolder = ...
    """
    Returns or sets  the selection mode 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ImportAutocadBlockBuilderFileFolder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectMode`` 
    
    :param selectMode: 
    :type selectMode: :py:class:`NXOpen.Annotations.ImportAutocadBlockBuilderFileFolder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    SettingsFile: str = ...
    """
    Returns or sets  the AutoCAD setting file
    
    <hr>
    
    Getter Method
    
    Signature ``SettingsFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``SettingsFile`` 
    
    :param settingsFile: 
    :type settingsFile: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    SymbolType: ImportAutocadBlockBuilderType = ...
    """
    Returns or sets  the Symbol type.  
    
    Used to differentiate native, teamcenter and part folder modes 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.ImportAutocadBlockBuilderType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolType`` 
    
    :param symbolType: 
    :type symbolType: :py:class:`NXOpen.Annotations.ImportAutocadBlockBuilderType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Unit: int = ...
    """
    Returns or sets  the symbol part unit 
    
    <hr>
    
    Getter Method
    
    Signature ``Unit`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``Unit`` 
    
    :param unit: 
    :type unit: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: ImportAutocadBlockBuilder = ...  # unknown typename


class ForeshorteningSymbolBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.ForeshorteningSymbolBuilder` builder   
    
    There is no KF creator for this class.
    
    .. versionadded:: NX10.0.0
    """
    
    def GetSymbols(self) -> tuple:
        """
        Get the foreshortening symbol  
        
        Signature ``GetSymbols()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (locations, indices). locations is a list of :py:class:`NXOpen.Point3d`. indices is a list of int. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddSymbol(self, locations: NXOpen.Point3d) -> None:
        """
        Add the foreshortening symbol 
        
        Signature ``AddSymbol(locations)`` 
        
        :param locations: 
        :type locations: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ModifySymbol(self, symbolIndex: int, locations: NXOpen.Point3d) -> None:
        """
        Modify the foreshortening symbol 
        
        Signature ``ModifySymbol(symbolIndex, locations)`` 
        
        :param symbolIndex: 
        :type symbolIndex: int 
        :param locations: 
        :type locations: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteSymbol(self, symbolIndex: int) -> None:
        """
        Delete the foreshortening symbol 
        
        Signature ``DeleteSymbol(symbolIndex)`` 
        
        :param symbolIndex: 
        :type symbolIndex: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: ForeshorteningSymbolBuilder = ...  # unknown typename


class AnnotationPlacement(NXOpen.TaggedObject):
    """
    Represents an object that journals the adding of a leader and setting of the origin
    for dialogs that use a builder   
    
    .. versionadded:: NX5.0.0
    """
    
    def SetLeaderBundle(self, jaLeader: LeaderBundle) -> None:
        """
        Sets the leader bundle for the current annotation in the builder 
        
        Signature ``SetLeaderBundle(jaLeader)`` 
        
        :param jaLeader:  The leader bundle to set  
        :type jaLeader: :py:class:`NXOpen.Annotations.LeaderBundle` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetOrigin(self, originData: AnnotationAssociativeOriginData_Struct, origin: NXOpen.Point3d) -> None:
        """
        Sets the origin of the current annotation 
        
        Signature ``SetOrigin(originData, origin)`` 
        
        :param originData:  The origin data  
        :type originData: :py:class:`NXOpen.Annotations.AnnotationAssociativeOriginData_Struct` 
        :param origin:  The new origin  
        :type origin: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetOrigin(self) -> tuple:
        """
        Gets the origin of the current annotation 
        
        Signature ``GetOrigin()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (originData, origin). originData is a :py:class:`NXOpen.Annotations.AnnotationAssociativeOriginData_Struct`.   The origin data origin is a :py:class:`NXOpen.Point3d`.   The origin stored on the annotation 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    Null: AnnotationPlacement = ...  # unknown typename


class ChamferStubTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChamferStubType():
    """
    Specifies the chamfer dimension stub type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoneTextAboveLeader", "Specifies no stub and text above leader"
       "NoneTextAfterLeader", "Specifies no stub and text after leader"
       "TextAbove", "Specifies text above stub"
       "TextAfter", "Specifies text after stub"
       "Last", "Last enum value. Should not be used."
    """
    NoneTextAboveLeader = 0  # ChamferStubTypeMemberType
    NoneTextAfterLeader = 1  # ChamferStubTypeMemberType
    TextAbove = 2  # ChamferStubTypeMemberType
    TextAfter = 3  # ChamferStubTypeMemberType
    Last = 4  # ChamferStubTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PmiMajorAngularDimensionBuilder(PmiAngularDimensionBuilder):
    """
    Represents a :py:class:`Annotations.AngularDimension` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.DimensionCollection.CreatePmiMajorAngularDimensionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: PmiMajorAngularDimensionBuilder = ...  # unknown typename


class OrdinateBaselineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a builder for an ordinate baseline   
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ActivateBaseline: bool = ...
    """
    Returns or sets  the activate baseline 
    
    <hr>
    
    Getter Method
    
    Signature ``ActivateBaseline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActivateBaseline`` 
    
    :param active: 
    :type active: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    ActivatePerpendicular: bool = ...
    """
    Returns or sets  the activate perpendicular 
    
    <hr>
    
    Getter Method
    
    Signature ``ActivatePerpendicular`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActivatePerpendicular`` 
    
    :param active: 
    :type active: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    BaselineVector: NXOpen.Direction = ...
    """
    Returns or sets  the baseline vector 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineVector`` 
    
    :param baselineVector: 
    :type baselineVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IsBaselineDirectionReversed: bool = ...
    """
    Returns or sets  a flag indicating if the positive measurement direction for the baseline is reversed 
    
    <hr>
    
    Getter Method
    
    Signature ``IsBaselineDirectionReversed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsBaselineDirectionReversed`` 
    
    :param isReversed: 
    :type isReversed: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    IsPerpendicularBaselineDirectionReversed: bool = ...
    """
    Returns or sets  a flag indicating if the positive measurement direction for the perpendicular baseline is reversed 
    
    <hr>
    
    Getter Method
    
    Signature ``IsPerpendicularBaselineDirectionReversed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsPerpendicularBaselineDirectionReversed`` 
    
    :param isReversed: 
    :type isReversed: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
    """
    Null: OrdinateBaselineBuilder = ...  # unknown typename


class PmiUserDefined(PmiAttribute):
    """
    Represents a User Defined Attribute   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiUserDefinedBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PmiUserDefined = ...  # unknown typename


class PmiUrlNoteBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiUrlNote` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiUrlNoteBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UrlValue: str = ...
    """
    Returns or sets  the url value 
    
    <hr>
    
    Getter Method
    
    Signature ``UrlValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UrlValue`` 
    
    :param urlValue: 
    :type urlValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PmiUrlNoteBuilder = ...  # unknown typename


class CircularTarget(AreaTarget, ICircularTarget):
    """
    Represents a circular datum target   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiDatumTargetBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetDiameter(self) -> Value:
        """
        Returns the target diameter  
        
        Signature ``GetDiameter()`` 
        
        :returns:  Diameter data  
        :rtype: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDiameter(self, diameter: Value) -> None:
        """
        Sets the target diameter.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetDiameter(diameter)`` 
        
        :param diameter:  New diameter data  
        :type diameter: :py:class:`NXOpen.Annotations.Value` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT")
        """
        ...
    
    Null: CircularTarget = ...  # unknown typename


class CoordinateNoteBuilder(PmiAttributeBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.CoordinateNote` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreateCoordinateNoteBuilder`
    
    Default values.
    
    ============  =====
    Property      Value
    ============  =====
    ToggleI       0 
    ------------  -----
    ToggleJ       0 
    ------------  -----
    ToggleK       0 
    ------------  -----
    ToggleLabel   0 
    ------------  -----
    ToggleLevel   0 
    ------------  -----
    ToggleX       0 
    ------------  -----
    ToggleY       0 
    ------------  -----
    ToggleZ       0 
    ============  =====
    
    .. versionadded:: NX6.0.0
    """
    Category: str = ...
    """
    Returns or sets  the category 
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DecimalPlace: int = ...
    """
    Returns or sets  the decimal place for coordinate note display 
    
    <hr>
    
    Getter Method
    
    Signature ``DecimalPlace`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecimalPlace`` 
    
    :param decimalPlace: 
    :type decimalPlace: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Identifier: str = ...
    """
    Returns or sets  the identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``Identifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Identifier`` 
    
    :param identifier: 
    :type identifier: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Revision: str = ...
    """
    Returns or sets  the revision 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision: 
    :type revision: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixI: str = ...
    """
    Returns or sets  the string prefix i 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixI`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixI`` 
    
    :param stringPrefixI: 
    :type stringPrefixI: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixJ: str = ...
    """
    Returns or sets  the string prefix j 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixJ`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixJ`` 
    
    :param stringPrefixJ: 
    :type stringPrefixJ: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixK: str = ...
    """
    Returns or sets  the string prefix k 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixK`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixK`` 
    
    :param stringPrefixK: 
    :type stringPrefixK: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixLabel: str = ...
    """
    Returns or sets  the string prefix label 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixLabel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixLabel`` 
    
    :param stringPrefixLabel: 
    :type stringPrefixLabel: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixLevel: str = ...
    """
    Returns or sets  the string prefix level 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixLevel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixLevel`` 
    
    :param stringPrefixLevel: 
    :type stringPrefixLevel: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixX: str = ...
    """
    Returns or sets  the string prefix x 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixX`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixX`` 
    
    :param stringPrefixX: 
    :type stringPrefixX: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixY: str = ...
    """
    Returns or sets  the string prefix y 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixY`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixY`` 
    
    :param stringPrefixY: 
    :type stringPrefixY: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringPrefixZ: str = ...
    """
    Returns or sets  the string prefix z 
    
    <hr>
    
    Getter Method
    
    Signature ``StringPrefixZ`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringPrefixZ`` 
    
    :param stringPrefixZ: 
    :type stringPrefixZ: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixI: str = ...
    """
    Returns or sets  the string suffix i 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixI`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixI`` 
    
    :param stringSuffixI: 
    :type stringSuffixI: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixJ: str = ...
    """
    Returns or sets  the string suffix j 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixJ`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixJ`` 
    
    :param stringSuffixJ: 
    :type stringSuffixJ: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixK: str = ...
    """
    Returns or sets  the string suffix k 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixK`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixK`` 
    
    :param stringSuffixK: 
    :type stringSuffixK: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixLabel: str = ...
    """
    Returns or sets  the string suffix label 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixLabel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixLabel`` 
    
    :param stringSuffixLabel: 
    :type stringSuffixLabel: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixLevel: str = ...
    """
    Returns or sets  the string suffix level 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixLevel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixLevel`` 
    
    :param stringSuffixLevel: 
    :type stringSuffixLevel: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixX: str = ...
    """
    Returns or sets  the string suffix x 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixX`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixX`` 
    
    :param stringSuffixX: 
    :type stringSuffixX: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixY: str = ...
    """
    Returns or sets  the string suffix y 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixY`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixY`` 
    
    :param stringSuffixY: 
    :type stringSuffixY: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StringSuffixZ: str = ...
    """
    Returns or sets  the string suffix z 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSuffixZ`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSuffixZ`` 
    
    :param stringSuffixZ: 
    :type stringSuffixZ: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Title: str = ...
    """
    Returns or sets  the str title 
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleI: bool = ...
    """
    Returns or sets  the toggle i 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleI`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleI`` 
    
    :param toggleI: 
    :type toggleI: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleJ: bool = ...
    """
    Returns or sets  the toggle j 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleJ`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleJ`` 
    
    :param toggleJ: 
    :type toggleJ: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleK: bool = ...
    """
    Returns or sets  the toggle k 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleK`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleK`` 
    
    :param toggleK: 
    :type toggleK: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleLabel: bool = ...
    """
    Returns or sets  the toggle label 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleLabel`` 
    
    :param toggleLabel: 
    :type toggleLabel: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleLevel: bool = ...
    """
    Returns or sets  the toggle level 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleLevel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleLevel`` 
    
    :param toggleLevel: 
    :type toggleLevel: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleX: bool = ...
    """
    Returns or sets  the toggle x 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleX`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleX`` 
    
    :param toggleX: 
    :type toggleX: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleY: bool = ...
    """
    Returns or sets  the toggle y 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleY`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleY`` 
    
    :param toggleY: 
    :type toggleY: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToggleZ: bool = ...
    """
    Returns or sets  the toggle z 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleZ`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleZ`` 
    
    :param toggleZ: 
    :type toggleZ: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TrackingCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the tracking csys 
    
    <hr>
    
    Getter Method
    
    Signature ``TrackingCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrackingCsys`` 
    
    :param trackingCsys: 
    :type trackingCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TrackingPoint: NXOpen.Point = ...
    """
    Returns or sets  the tracking point 
    
    <hr>
    
    Getter Method
    
    Signature ``TrackingPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrackingPoint`` 
    
    :param trackingPoint: 
    :type trackingPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CoordinateNoteBuilder = ...  # unknown typename


class OrdinateDoglegCreationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrdinateDoglegCreationOption():
    """
    Specifies the dogleg creation option when creating/editing the ordinate dimension 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Infer", "Software infers whether the dogleg would be created"
       "Yes", "Dogleg will always be created"
       "No", "Dogleg will not be created"
       "Last", "Last enum value. Should not be used."
    """
    Infer = 0  # OrdinateDoglegCreationOptionMemberType
    Yes = 1  # OrdinateDoglegCreationOptionMemberType
    No = 2  # OrdinateDoglegCreationOptionMemberType
    Last = 3  # OrdinateDoglegCreationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsFormatBuilderShowColumnsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsFormatBuilderShowColumnsType():
    """
    Represents Show Columns options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Xy", "X and Y"
       "Xyz", "X, Y and Z"
       "All", "All"
    """
    Xy = 0  # HoleTableSettingsFormatBuilderShowColumnsTypeMemberType
    Xyz = 1  # HoleTableSettingsFormatBuilderShowColumnsTypeMemberType
    All = 2  # HoleTableSettingsFormatBuilderShowColumnsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsFormatBuilderSizeFormatTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsFormatBuilderSizeFormatType():
    """
    Represents Size Format options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DisplayInSummaryRows", "Display in Summary Rows"
       "DisplayInColumn", "Display in Column"
    """
    DisplayInSummaryRows = 0  # HoleTableSettingsFormatBuilderSizeFormatTypeMemberType
    DisplayInColumn = 1  # HoleTableSettingsFormatBuilderSizeFormatTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsFormatBuilderDeletedHolesDisplayTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsFormatBuilderDeletedHolesDisplayType():
    """
    Represents Deleted Holes Display options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Strikethrough", "Strikethrough"
       "HideText", "HideText"
       "Remove", "Remove"
    """
    Strikethrough = 0  # HoleTableSettingsFormatBuilderDeletedHolesDisplayTypeMemberType
    HideText = 1  # HoleTableSettingsFormatBuilderDeletedHolesDisplayTypeMemberType
    Remove = 2  # HoleTableSettingsFormatBuilderDeletedHolesDisplayTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsFormatBuilderDepthMeasurementDatumTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleTableSettingsFormatBuilderDepthMeasurementDatumType():
    """
    Represents Depth Measurement Datum options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopBottomFace", " - "
       "BaseFace", " - "
       "StepFace", " - "
    """
    TopBottomFace = 0  # HoleTableSettingsFormatBuilderDepthMeasurementDatumTypeMemberType
    BaseFace = 1  # HoleTableSettingsFormatBuilderDepthMeasurementDatumTypeMemberType
    StepFace = 2  # HoleTableSettingsFormatBuilderDepthMeasurementDatumTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleTableSettingsFormatBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class ShowColumnsType():
        """
        Represents Show Columns options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Xy", "X and Y"
           "Xyz", "X, Y and Z"
           "All", "All"
        """
        Xy = 0  # HoleTableSettingsFormatBuilderShowColumnsTypeMemberType
        Xyz = 1  # HoleTableSettingsFormatBuilderShowColumnsTypeMemberType
        All = 2  # HoleTableSettingsFormatBuilderShowColumnsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SizeFormatType():
        """
        Represents Size Format options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DisplayInSummaryRows", "Display in Summary Rows"
           "DisplayInColumn", "Display in Column"
        """
        DisplayInSummaryRows = 0  # HoleTableSettingsFormatBuilderSizeFormatTypeMemberType
        DisplayInColumn = 1  # HoleTableSettingsFormatBuilderSizeFormatTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DeletedHolesDisplayType():
        """
        Represents Deleted Holes Display options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Strikethrough", "Strikethrough"
           "HideText", "HideText"
           "Remove", "Remove"
        """
        Strikethrough = 0  # HoleTableSettingsFormatBuilderDeletedHolesDisplayTypeMemberType
        HideText = 1  # HoleTableSettingsFormatBuilderDeletedHolesDisplayTypeMemberType
        Remove = 2  # HoleTableSettingsFormatBuilderDeletedHolesDisplayTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DepthMeasurementDatumType():
        """
        Represents Depth Measurement Datum options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopBottomFace", " - "
           "BaseFace", " - "
           "StepFace", " - "
        """
        TopBottomFace = 0  # HoleTableSettingsFormatBuilderDepthMeasurementDatumTypeMemberType
        BaseFace = 1  # HoleTableSettingsFormatBuilderDepthMeasurementDatumTypeMemberType
        StepFace = 2  # HoleTableSettingsFormatBuilderDepthMeasurementDatumTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DecimalPlaces: int = ...
    """
    Returns or sets  the decimal places 
    
    <hr>
    
    Getter Method
    
    Signature ``DecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecimalPlaces`` 
    
    :param decimalPlaces: 
    :type decimalPlaces: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DeletedHolesDisplay: HoleTableSettingsFormatBuilderDeletedHolesDisplayType = ...
    """
    Returns or sets  the deleted holes display 
    
    <hr>
    
    Getter Method
    
    Signature ``DeletedHolesDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderDeletedHolesDisplayType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeletedHolesDisplay`` 
    
    :param deletedHolesDisplay: 
    :type deletedHolesDisplay: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderDeletedHolesDisplayType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DepthMeasurementDatum: HoleTableSettingsFormatBuilderDepthMeasurementDatumType = ...
    """
    Returns or sets  the depth measurement datum 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthMeasurementDatum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderDepthMeasurementDatumType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DepthMeasurementDatum`` 
    
    :param depthMeasurementDatum: 
    :type depthMeasurementDatum: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderDepthMeasurementDatumType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayAllTextInUpperCase: bool = ...
    """
    Returns or sets  the display all text in upper case 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayAllTextInUpperCase`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayAllTextInUpperCase`` 
    
    :param displayAllTextInUpperCase: 
    :type displayAllTextInUpperCase: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayPartBodyName: bool = ...
    """
    Returns or sets  the display part and body name 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPartBodyName`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayPartBodyName`` 
    
    :param displayPartBodyName: 
    :type displayPartBodyName: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MergeCellsWithSameSize: bool = ...
    """
    Returns or sets  the merge cells with same size 
    
    <hr>
    
    Getter Method
    
    Signature ``MergeCellsWithSameSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MergeCellsWithSameSize`` 
    
    :param mergeCellsWithSameSize: 
    :type mergeCellsWithSameSize: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReportTapHoleSizeForThreadedHoles: bool = ...
    """
    Returns or sets  the report tap hole size for threaded holes 
    
    <hr>
    
    Getter Method
    
    Signature ``ReportTapHoleSizeForThreadedHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReportTapHoleSizeForThreadedHoles`` 
    
    :param reportTapHoleSizeForThreadedHoles: 
    :type reportTapHoleSizeForThreadedHoles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowColumns: HoleTableSettingsFormatBuilderShowColumnsType = ...
    """
    Returns or sets  the show columns 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowColumns`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderShowColumnsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowColumns`` 
    
    :param showColumns: 
    :type showColumns: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderShowColumnsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SizeFormat: HoleTableSettingsFormatBuilderSizeFormatType = ...
    """
    Returns or sets  the size format 
    
    <hr>
    
    Getter Method
    
    Signature ``SizeFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderSizeFormatType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SizeFormat`` 
    
    :param sizeFormat: 
    :type sizeFormat: :py:class:`NXOpen.Annotations.HoleTableSettingsFormatBuilderSizeFormatType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: HoleTableSettingsFormatBuilder = ...  # unknown typename


class FeatureControlFrameData(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Annotations.FeatureControlFrameData`   
    
    .. versionadded:: NX6.0.0
    """
    Null: FeatureControlFrameData = ...  # unknown typename


class BendTable(Table):
    """
    This class represents a bend table.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.BendTableBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Update(self) -> None:
        """
        Update bend table 
        
        Signature ``Update()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Null: BendTable = ...  # unknown typename


class PmiAttributeValueMultipleStringBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Annotations.PmiAttributeValueMultipleString` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Annotations.PmiAttributeCollection.CreatePmiAttributeValueMultipleStringBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetMultipleStringValue(self) -> 'list[str]':
        """
        Returns the text  
        
        Signature ``GetMultipleStringValue()`` 
        
        :returns:  multiple string value 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMultipleStringValue(self, multipleStringValue: 'list[str]') -> None:
        """
        Sets the multiple string 
        
        Signature ``SetMultipleStringValue(multipleStringValue)`` 
        
        :param multipleStringValue:  multiple string value 
        :type multipleStringValue: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Null: PmiAttributeValueMultipleStringBuilder = ...  # unknown typename


class PmiTableSection(TableSection):
    """
    Represents a PMI table section   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.PmiTableBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: PmiTableSection = ...  # unknown typename


class CustomSymbolData(NXOpen.TransientObject):
    """
    Represents custom symbol data   
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX9.0.0
       Use :py:class:`NXOpen.Annotations.DraftingCustomSymbolBuilder` for Drafting Custom Symbol and :py:class:`NXOpen.Annotations.PmiCustomSymbolBuilder` for PMI Custom Symbol objects.
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetTextData(self) -> 'list[CustomSymbolTextData]':
        """
        Return the text data  
        
        Signature ``GetTextData()`` 
        
        :returns:  List of text data objects  
        :rtype: list of :py:class:`NXOpen.Annotations.CustomSymbolTextData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTextData(self, data: 'list[CustomSymbolTextData]') -> None:
        """
        Sets the text data 
        
        Signature ``SetTextData(data)`` 
        
        :param data:  List of text data objects  
        :type data: list of :py:class:`NXOpen.Annotations.CustomSymbolTextData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    Angle: float = ...
    """
    Returns or sets  the angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns:   Angle at which custom symbol is oriented  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle:  New angle at which custom symbol will be oriented  
    :type angle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Scale: float = ...
    """
    Returns or sets  the scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns:  Scale  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scale:  New scale  
    :type scale: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ScaleExpression: NXOpen.Expression = ...
    """
    Returns or sets  the scale expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleExpression`` 
    
    :returns:  Scale expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleExpression`` 
    
    :param scaleExpression:  New scale expression  
    :type scaleExpression: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SymbolPreferencesOption: SymbolPreferencesOption = ...
    """
    Returns or sets  the symbol preferences option.  
    
    This option is only available when creating. 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolPreferencesOption`` 
    
    :returns:  Symbol preferences option  
    :rtype: :py:class:`NXOpen.Annotations.SymbolPreferencesOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolPreferencesOption`` 
    
    :param option:  New symbol preferences option  
    :type option: :py:class:`NXOpen.Annotations.SymbolPreferencesOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TextPreferencesOption: TextPreferencesOption = ...
    """
    Returns or sets  the text preferences option.  
    
    This option is only available when creating. 
    
    <hr>
    
    Getter Method
    
    Signature ``TextPreferencesOption`` 
    
    :returns:  Text preferences option  
    :rtype: :py:class:`NXOpen.Annotations.TextPreferencesOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextPreferencesOption`` 
    
    :param option:  New text preferences option  
    :type option: :py:class:`NXOpen.Annotations.TextPreferencesOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class IdSymbol(DraftingAid):
    """
    Represents an ID symbol   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.IdSymbolBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: IdSymbol = ...  # unknown typename


class LightweightSection(NXOpen.Display.DynamicSection):
    """
    Represents a PMI Lightweight Section   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Annotations.LightweightSectionBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: LightweightSection = ...  # unknown typename


