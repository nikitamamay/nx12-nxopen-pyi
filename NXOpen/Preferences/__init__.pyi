# module 'NXOpen.Preferences'
#
# Automatically generated 2025-06-09T14:38:47.234733
#
"""Default documentation for NXOpen.Preferences."""

import typing

import NXOpen
import NXOpen.Annotations
import NXOpen.Features.SheetMetal
import NXOpen.Routing
import NXOpen.SheetMetal



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class SessionNXGateway():
    """
    Represents the set of NXGateway Preferences applicable to entire session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    """
    AngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance.  
    
    One of the heal geometry option for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularTolerance`` 
    
    :param angularTolerance: 
    :type angularTolerance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    AttachFidelityCheckData: bool = ...
    """
    Returns or sets  the attach FC data flag for I-DEAS gateway 
    
    <hr>
    
    Getter Method
    
    Signature ``AttachFidelityCheckData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttachFidelityCheckData`` 
    
    :param attachFidelityCheckData: 
    :type attachFidelityCheckData: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    AutomaticallyCheckItemRevisions: bool = ...
    """
    Returns or sets  the automatically checking of items revision flag for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticallyCheckItemRevisions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticallyCheckItemRevisions`` 
    
    :param automaticallyCheckItemRevisions: 
    :type automaticallyCheckItemRevisions: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    HealGeometryOnImport: bool = ...
    """
    Returns or sets  the heal geometry on import flag for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``HealGeometryOnImport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HealGeometryOnImport`` 
    
    :param healGeometryOnImport: 
    :type healGeometryOnImport: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    IgnoreUpdateOfIdenticalVersions: bool = ...
    """
    Returns or sets  the ignore update of identical versions flag for I-DEAS 
    
    <hr>
    
    Getter Method
    
    Signature ``IgnoreUpdateOfIdenticalVersions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IgnoreUpdateOfIdenticalVersions`` 
    
    :param ignoreUpdateOfIdenticalVersions: 
    :type ignoreUpdateOfIdenticalVersions: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LoadConstructionGeometry: bool = ...
    """
    Returns or sets  the load construction geometry flag for I-DEAS 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadConstructionGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadConstructionGeometry`` 
    
    :param loadConstructionGeometry: 
    :type loadConstructionGeometry: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LoadProductManufacturingInformation: bool = ...
    """
    Returns or sets  the load product manufacturing information flag for I-DEAS 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadProductManufacturingInformation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadProductManufacturingInformation`` 
    
    :param loadProductManufacturingInformation: 
    :type loadProductManufacturingInformation: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LoadSolidEdgeAssemblyFeatures: bool = ...
    """
    Returns or sets  the Assembly-level features flag for Solid Edge 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadSolidEdgeAssemblyFeatures`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadSolidEdgeAssemblyFeatures`` 
    
    :param loadAssemblyFeatures: 
    :type loadAssemblyFeatures: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LoadSolidEdgeConstructionGeometry: bool = ...
    """
    Returns or sets  the load construction geometry flag for Solid Edge 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadSolidEdgeConstructionGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadSolidEdgeConstructionGeometry`` 
    
    :param loadConstructionGeometry: 
    :type loadConstructionGeometry: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    LoadSolidEdgeProductManufacturingInformation: bool = ...
    """
    Returns or sets  the load product manufacturing information flag for Solid Edge 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadSolidEdgeProductManufacturingInformation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadSolidEdgeProductManufacturingInformation`` 
    
    :param loadProductManufacturingInformation: 
    :type loadProductManufacturingInformation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    MinimumSmallEdgeLength: float = ...
    """
    Returns or sets  the minimum small edge length.  
    
    One of the heal geometry option for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumSmallEdgeLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumSmallEdgeLength`` 
    
    :param minimumSmallEdgeLength: 
    :type minimumSmallEdgeLength: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OnlyImportDesignParts: bool = ...
    """
    Returns or sets  the only import design parts flag for Solid Edge.  
    
    It is under Solid Edge Gateway preferences 
    
    <hr>
    
    Getter Method
    
    Signature ``OnlyImportDesignParts`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OnlyImportDesignParts`` 
    
    :param onlyImportDesignParts: 
    :type onlyImportDesignParts: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PerformFidelityCheckOnImport: bool = ...
    """
    Returns or sets  the perform fidelity check on import flag for I-DEAS 
    
    <hr>
    
    Getter Method
    
    Signature ``PerformFidelityCheckOnImport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PerformFidelityCheckOnImport`` 
    
    :param performFidelityCheckOnImport: 
    :type performFidelityCheckOnImport: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PreserveNominalGeometry: bool = ...
    """
    Returns or sets  the preserve nominal geometry flag.  
    
    One of the heal geometry option for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``PreserveNominalGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreserveNominalGeometry`` 
    
    :param preserveNominalGeometry: 
    :type preserveNominalGeometry: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ReferenceGeometryImportColor: int = ...
    """
    Returns or sets  the reference geometry import color for I-DEAS 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceGeometryImportColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceGeometryImportColor`` 
    
    :param referenceGeometryImportColor: 
    :type referenceGeometryImportColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ReferenceGeometryImportLayer: int = ...
    """
    Returns or sets  the reference geometry import layer for I-DEAS  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceGeometryImportLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceGeometryImportLayer`` 
    
    :param referenceGeometryImportLayer: 
    :type referenceGeometryImportLayer: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RemoveDiscontinuity: bool = ...
    """
    Returns or sets  the remove discontinuity flag.  
    
    One of the heal geometry option for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveDiscontinuity`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveDiscontinuity`` 
    
    :param removeDiscontinuity: 
    :type removeDiscontinuity: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RemoveSelfIntersections: bool = ...
    """
    Returns or sets  the remove self intersection flag.  
    
    One of the heal geometry option for I-DEAS import  
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveSelfIntersections`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveSelfIntersections`` 
    
    :param removeSelfIntersections: 
    :type removeSelfIntersections: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RemoveSmallEdges: bool = ...
    """
    Returns or sets  the remove small edges flag.  
    
    One of the heal geometry option for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveSmallEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveSmallEdges`` 
    
    :param removeSmallEdges: 
    :type removeSmallEdges: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RepairTolerance: float = ...
    """
    Returns or sets  the repair tolerance.  
    
    One of the heal geometry option for I-DEAS import  
    
    <hr>
    
    Getter Method
    
    Signature ``RepairTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RepairTolerance`` 
    
    :param repairTolerance: 
    :type repairTolerance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RetainFidelityCheckingInformation: bool = ...
    """
    Returns or sets  the retain fidelity checking information flag for I-DEAS 
    
    <hr>
    
    Getter Method
    
    Signature ``RetainFidelityCheckingInformation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RetainFidelityCheckingInformation`` 
    
    :param retainFidelityCheckingInformation: 
    :type retainFidelityCheckingInformation: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SaveComponentPartFilesDuringLoad: bool = ...
    """
    Returns or sets  the save component part files flag during load for I-DEAS 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveComponentPartFilesDuringLoad`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveComponentPartFilesDuringLoad`` 
    
    :param saveComponentPartFilesDuringLoad: 
    :type saveComponentPartFilesDuringLoad: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SuppressSurfaceModification: bool = ...
    """
    Returns or sets  the suppress surface modification flag.  
    
    One of the heal geometry option for I-DEAS import 
    
    <hr>
    
    Getter Method
    
    Signature ``SuppressSurfaceModification`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SuppressSurfaceModification`` 
    
    :param suppressSurfaceModification: 
    :type suppressSurfaceModification: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance.  
    
    One of the heal geometry option for I-DEAS import  
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    UseRepairTolerance: bool = ...
    """
    Returns or sets  the use repair tolerance flag.  
    
    One of the heal geometry option for I-DEAS import  
    
    <hr>
    
    Getter Method
    
    Signature ``UseRepairTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseRepairTolerance`` 
    
    :param useRepairTolerance: 
    :type useRepairTolerance: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WireframeGeometryImportColor: int = ...
    """
    Returns or sets  the wireframe geometry import color for I-DEAS  
    
    <hr>
    
    Getter Method
    
    Signature ``WireframeGeometryImportColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WireframeGeometryImportColor`` 
    
    :param wireframeGeometryImportColor: 
    :type wireframeGeometryImportColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WireframeGeometryImportLayer: int = ...
    """
    Returns or sets  the wireframe geometry import layer for I-DEAS  
    
    <hr>
    
    Getter Method
    
    Signature ``WireframeGeometryImportLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WireframeGeometryImportLayer`` 
    
    :param wireframeGeometryImportLayer: 
    :type wireframeGeometryImportLayer: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class GeneralToleranceOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralToleranceOption():
    """
    Represents the General tolerance options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", "Coarse"
       "Medium", "Medium"
       "Standard", "Standard"
       "Fine", "Fine"
       "ExtraFine", "Extra Fine"
       "Customize", "Customize"
    """
    Coarse = 0  # GeneralToleranceOptionMemberType
    Medium = 1  # GeneralToleranceOptionMemberType
    Standard = 2  # GeneralToleranceOptionMemberType
    Fine = 3  # GeneralToleranceOptionMemberType
    ExtraFine = 4  # GeneralToleranceOptionMemberType
    Customize = 5  # GeneralToleranceOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IVisibleLinesViewPreferences():
    """
    Represents set of VisibleLinesViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class VisualizationLine():
    """
    This class is for UI related preferences changes   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.UI`
    
    .. versionadded:: NX3.0.0
    """
    
    def RegenerateFromToleranceChange(self, updateModeChange: bool, studio: bool) -> None:
        """
        Regenerates after changing tolerance 
        
        Signature ``RegenerateFromToleranceChange(updateModeChange, studio)`` 
        
        :param updateModeChange:  whether update_mode has changed  
        :type updateModeChange: bool 
        :param studio:  studio or non studio  
        :type studio: bool 
        
        .. versionadded:: NX3.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Preferences.PartVisualizationLine.RegenerateFromToleranceChange` instead.
        
        License requirements: None.
        """
        ...
    
    
    def UpdateLineFontObjects(self, doSoftwareUpdate: bool) -> None:
        """
        Updates the UI after line font is changed 
        
        Signature ``UpdateLineFontObjects(doSoftwareUpdate)`` 
        
        :param doSoftwareUpdate:  The do_software_update flag should be set to TRUE when changing                                                    from software fonts to hardware fonts or when changing dash  
        :type doSoftwareUpdate: bool 
        
        .. versionadded:: NX3.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Preferences.PartVisualizationLine.UpdateLineFontObjects` instead.
        
        License requirements: None.
        """
        ...
    
    DepthSortedWireframe: bool = ...
    """
    Returns or sets  the depth sorted wireframe.  
    
    Specifies whether the graphics driver should sort objects by depth in wireframe views. 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthSortedWireframe`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DepthSortedWireframe`` 
    
    :param depthSortedWireframe: 
    :type depthSortedWireframe: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WireframeContrast: bool = ...
    """
    Returns or sets  whether colors applied to wireframe geometry are automatically adjusted as necessary to produce a minimum contrast relative to the view background.  
    
    The option affects onscreen displays only, so it affects interactive displays and raster images captured from interactive displays. It does not affect vector output produced by Plot, Print, CGM Export and similar functions. 
    
    <hr>
    
    Getter Method
    
    Signature ``WireframeContrast`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WireframeContrast`` 
    
    :param wireframeContrast: 
    :type wireframeContrast: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """


class PmiOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PmiOption():
    """
    Represents the Inherit PMI options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Does not inherit PMI."
       "FromModelView", "Inherit PMI from the parent model view."
       "InDrawingPlaneFromView", "Inherit PMI that are parallel to the drawing plane from the model view."
       "InDrawingPlaneFromPart", "Inherit PMI that are parallel to the drawing plane from the entire part."
    """
    NotSet = 0  # PmiOptionMemberType
    FromModelView = 1  # PmiOptionMemberType
    InDrawingPlaneFromView = 2  # PmiOptionMemberType
    InDrawingPlaneFromPart = 3  # PmiOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationPerformance():
    """
    Represents the set of visualization performance preferences 
    applicable to entire part.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX10.0.0
    """
    SaveAdvancedDisplayFacets: bool = ...
    """
    Returns or sets  the save advanced facets.  
    
    Enable saving of advanced display facets in the part file.
    
    <hr>
    
    Getter Method
    
    Signature ``SaveAdvancedDisplayFacets`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveAdvancedDisplayFacets`` 
    
    :param saveAdvancedDisplayFacets: 
    :type saveAdvancedDisplayFacets: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """


class VirtualIntersectionsViewPreferences(IVirtualIntersectionsViewPreferences):
    """
    Represents set of Virtual Intersections View Preferences applicable to drafting views.  
    
    Allows to display imaginary intersection curves.
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.VirtualIntersections`
    
    .. versionadded:: NX5.0.0
    """
    AdjacentBlends: bool = ...
    """
    Returns or sets  the status of adjacent blends.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlends`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlends`` 
    
    :param adjacentBlends: 
    :type adjacentBlends: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsColor: int = ...
    """
    Returns or sets  the color of adjacent blends.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsColor`` 
    
    :param adjacentBlendsColor: 
    :type adjacentBlendsColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsEndGaps: bool = ...
    """
    Returns or sets  the status of adjacent blends end gaps.  
    
    It controls the display of visible ends. If True, the 
    visible ends are suppressed from the display. The length of the suppressed end is in drawing 
    units and is controlled by the value set in the End Gap field. If False, the visible ends are 
    not suppressed from the display.
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsEndGaps`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsEndGaps`` 
    
    :param adjacentBlendsEndGaps: 
    :type adjacentBlendsEndGaps: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsEndGapsData: float = ...
    """
    Returns or sets  the value of adjacent blends end gaps.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsEndGapsData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsEndGapsData`` 
    
    :param adjacentBlendsEndGapsData: 
    :type adjacentBlendsEndGapsData: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsFont: Font = ...
    """
    Returns or sets  the font of adjacent blends.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsFont`` 
    
    :param adjacentBlendsFont: 
    :type adjacentBlendsFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsWidth: Width = ...
    """
    Returns or sets  the width of adjacent blends.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsWidth`` 
    
    :param adjacentBlendsWidth: 
    :type adjacentBlendsWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VirtualIntersection: bool = ...
    """
    Returns or sets  the status of virtual intersection.  
    
    <hr>
    
    Getter Method
    
    Signature ``VirtualIntersection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VirtualIntersection`` 
    
    :param virtualIntersection: 
    :type virtualIntersection: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class IThreadsViewPreferences():
    """
    Represents set of ThreadsViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class IProjectedViewPreferences():
    """
    Represents set of ProjectedViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class TraceLinesViewPreferences(ITraceLinesViewPreferences):
    """
    Represents set of Trace Lines View Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.TraceLines`
    
    .. versionadded:: NX5.0.0
    """
    CreateGapsStatus: bool = ...
    """
    Returns or sets  the status of create gaps 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGapsStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGapsStatus`` 
    
    :param createGaps: 
    :type createGaps: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    GapSize: float = ...
    """
    Returns or sets  the gap size.  
    
    <hr>
    
    Getter Method
    
    Signature ``GapSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GapSize`` 
    
    :param gapSize: 
    :type gapSize: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenColor: int = ...
    """
    Returns or sets  the hidden color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenColor`` 
    
    :param hiddenColor: 
    :type hiddenColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenFont: Font = ...
    """
    Returns or sets  the hidden font 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenFont`` 
    
    :param hiddenFont: 
    :type hiddenFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenWidth: Width = ...
    """
    Returns or sets  the hidden width 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenWidth`` 
    
    :param hiddenWidth: 
    :type hiddenWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleColor: int = ...
    """
    Returns or sets  the visible color.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param visibleColor: 
    :type visibleColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleFont: Font = ...
    """
    Returns or sets  the visible font 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleFont`` 
    
    :param visibleFont: 
    :type visibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleWidth: Width = ...
    """
    Returns or sets  the visible width 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWidth`` 
    
    :param visibleWidth: 
    :type visibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class WorkPlanePolarGridSize_Struct():
    """
    Polar grid size parameters .  
    
    Constructor: 
    NXOpen.Preferences.WorkPlane.PolarGridSize()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    RadialGridSize: WorkPlaneGridSize_Struct = ...
    """
    Radial grid circle parameters 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
    """
    AngularGridSize: WorkPlaneGridSize_Struct = ...
    """
    Angular grid line parameters
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
    """


class HiddenLinesViewPreferences(IHiddenLinesViewPreferences):
    """
    Represents set of Hidden Lines View Preferences applicable to drafting views.  
    
    Hidden Lines allows access to the hidden line display preferences for all 
    views added to the drawing.
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.HiddenLines`
    
    .. versionadded:: NX5.0.0
    """
    EdgesHiddenByEdges: bool = ...
    """
    Returns or sets  the staus of edges hidden by edges.  
    
    This allows to control the display of edges 
    which are hidden by other overlapping edges.
    
    <hr>
    
    Getter Method
    
    Signature ``EdgesHiddenByEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgesHiddenByEdges`` 
    
    :param edgesHiddenByEdges: 
    :type edgesHiddenByEdges: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Hiddenline: bool = ...
    """
    Returns or sets  the status of hiddenline.  
    
    The status affects the appearance of lines in a member view.
    
    <hr>
    
    Getter Method
    
    Signature ``Hiddenline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Hiddenline`` 
    
    :param hiddenline: 
    :type hiddenline: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenlineColor: int = ...
    """
    Returns or sets  the color of hidden line.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenlineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenlineColor`` 
    
    :param color: 
    :type color: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenlineFont: Font = ...
    """
    Returns or sets  the font type of hidden line.  
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenlineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenlineFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenlineWidth: Width = ...
    """
    Returns or sets  the width of hidden line or edges.  
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenlineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenlineWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeModelCurves: bool = ...
    """
    Returns or sets  the status of include model curves.  
    
    This allows the modeling curves 
    in drawing views to participate in hidden line processing. Most useful where 
    drawing are produced with wireframe curves or 2D sketch curves.
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeModelCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeModelCurves`` 
    
    :param includeModelCurves: 
    :type includeModelCurves: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InterferingSolids: bool = ...
    """
    Returns or sets  the status of interfering solids.  
    
    This allows the correct rendering of hidden lines 
    in a drawing member view with interfering solids.
    
    <hr>
    
    Getter Method
    
    Signature ``InterferingSolids`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`Preferences.HiddenLinesViewPreferences.InterferingSolidsOption` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferingSolids`` 
    
    :param interferingSolids: 
    :type interferingSolids: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`Preferences.HiddenLinesViewPreferences.InterferingSolidsOption` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    InterferingSolidsOption: HiddenLineInterferingSolidsOption = ...
    """
    Returns or sets  the status of interfering solids.  
    
    This allows the correct rendering of hidden lines 
    in a drawing member view with interfering solids.
    
    <hr>
    
    Getter Method
    
    Signature ``InterferingSolidsOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.HiddenLineInterferingSolidsOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferingSolidsOption`` 
    
    :param interferingSolids: 
    :type interferingSolids: :py:class:`NXOpen.Preferences.HiddenLineInterferingSolidsOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReferenceEdgesOnly: bool = ...
    """
    Returns or sets  the status of reference edges only.  
    
    This controls the rendering of hidden edges with 
    annotation. If True, only hidden edges referencing annotations are rendered.
    Hidden edges not referenced by annotation are not rendered.
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceEdgesOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceEdgesOnly`` 
    
    :param referenceEdgesOnly: 
    :type referenceEdgesOnly: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelfHidden: bool = ...
    """
    Returns or sets  the status of self hidden.  
    
    This allows the rendering of edges hidden by 
    their own solid in the selected hidden line color, font, and width settings. If False, 
    the hidden line processing only processes the lines hidden by other solids.
    
    <hr>
    
    Getter Method
    
    Signature ``SelfHidden`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelfHidden`` 
    
    :param selfHidden: 
    :type selfHidden: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmallFeature: HiddenLineSmallFeatureOption = ...
    """
    Returns or sets  the small feature option.  
    
    This allows the simplification or removal of rendering of small features 
    in large scale assembly drawings. Not all small features are considered for simplified rendering. 
    Only if the boundary of a small feature lies completely within a face of the model is the small 
    feature's display modified.
    
    <hr>
    
    Getter Method
    
    Signature ``SmallFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.HiddenLineSmallFeatureOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmallFeature`` 
    
    :param smallFeature: 
    :type smallFeature: :py:class:`NXOpen.Preferences.HiddenLineSmallFeatureOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmallFeaturesTolerance: float = ...
    """
    Returns or sets  the value of small features tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmallFeaturesTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmallFeaturesTolerance`` 
    
    :param smallFeaturesTolerance: 
    :type smallFeaturesTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class ViewVisualizationVisualRenderingStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualRenderingStyle():
    """
    Describes the rendering style for geometry displayed in the view. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Shaded", " - "
       "Wireframe", " - "
       "Studio", " - "
       "FaceAnalysis", " - "
       "PartiallyShaded", " - "
       "StaticWireframe", " - "
    """
    Shaded = 0  # ViewVisualizationVisualRenderingStyleMemberType
    Wireframe = 1  # ViewVisualizationVisualRenderingStyleMemberType
    Studio = 2  # ViewVisualizationVisualRenderingStyleMemberType
    FaceAnalysis = 3  # ViewVisualizationVisualRenderingStyleMemberType
    PartiallyShaded = 4  # ViewVisualizationVisualRenderingStyleMemberType
    StaticWireframe = 5  # ViewVisualizationVisualRenderingStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualDisplayModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualDisplayModeType():
    """
    Describes the available display mode types. Specifies shading parameters for the selected view.   
    
    .. deprecated::  NX4.0.0
       Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualRenderingStyle` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Wireframe", "View is displayed as a wireframe-model"
       "PartiallyShaded", "Shade only selected object"
       "FullyShaded", "Shading is applicable to all objects in view"
       "FaceAnalysis", "Display faces using the color analysis data"
       "Studio", "In Studio mode, objects are realistically rendered according to material and texture characteristics assigned to them"
    """
    Wireframe = 0  # ViewVisualizationVisualDisplayModeTypeMemberType
    PartiallyShaded = 1  # ViewVisualizationVisualDisplayModeTypeMemberType
    FullyShaded = 2  # ViewVisualizationVisualDisplayModeTypeMemberType
    FaceAnalysis = 3  # ViewVisualizationVisualDisplayModeTypeMemberType
    Studio = 4  # ViewVisualizationVisualDisplayModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualHiddenEdgesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualHiddenEdges():
    """
    Describes the appearance of hidden edges displayed in the view.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Visible", " - "
       "Invisible", " - "
       "GrayThin", " - "
       "Dashed", " - "
    """
    Visible = 0  # ViewVisualizationVisualHiddenEdgesMemberType
    Invisible = 1  # ViewVisualizationVisualHiddenEdgesMemberType
    GrayThin = 2  # ViewVisualizationVisualHiddenEdgesMemberType
    Dashed = 3  # ViewVisualizationVisualHiddenEdgesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualHiddenEdgesTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualHiddenEdgesType():
    """
    Describes the available hidden edges types. Determines how hidden edges are displayed in the selected view.   
    
    .. deprecated::  NX4.0.0
       Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdges` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Visible", "All edges in a solid body that are hidden appear as solid lines"
       "Invisible", "grid line display of all existing and subsequently created solid bodies in the selected view, except that portions of geometry and text that appear behind solid bodies are erased"
       "Dashed", "grid line display of all existing and subsequently created solid bodies in the selected view, except that all portions of the geometry and text that appear behind solid bodies are displayed as dashed lines"
       "GrayThin", "All hidden edges in the color gray, with solid font and thin width."
       "HiddenSurface", "Faceted display of all existing and subsequently created bodies in the selected view"
    """
    Visible = 0  # ViewVisualizationVisualHiddenEdgesTypeMemberType
    Invisible = 1  # ViewVisualizationVisualHiddenEdgesTypeMemberType
    Dashed = 2  # ViewVisualizationVisualHiddenEdgesTypeMemberType
    GrayThin = 3  # ViewVisualizationVisualHiddenEdgesTypeMemberType
    HiddenSurface = 4  # ViewVisualizationVisualHiddenEdgesTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualSmoothEdgeWidthMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualSmoothEdgeWidth():
    """
    Describes all possible width selection for visible smooth edges 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", " - "
       "Thin", " - "
       "Normal", " - "
       "Thick", " - "
       "One", " - "
       "Two", " - "
       "Three", " - "
       "Four", " - "
       "Five", " - "
       "Six", " - "
       "Seven", " - "
       "Eight", " - "
       "Nine", " - "
    """
    Original = 0  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Thin = 1  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Normal = 2  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Thick = 3  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    One = 5  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Two = 6  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Three = 7  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Four = 8  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Five = 9  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Six = 10  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Seven = 11  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Eight = 12  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    Nine = 13  # ViewVisualizationVisualSmoothEdgeWidthMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualSmoothEdgeFontMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualSmoothEdgeFont():
    """
    Describes all possible font selection for visible smooth edges 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", " - "
       "Solid", " - "
       "Dashed", " - "
       "Phantom", " - "
       "CenterLine", " - "
       "Dotted", " - "
       "LongDashed", " - "
       "DottedDashed", " - "
    """
    Original = 0  # ViewVisualizationVisualSmoothEdgeFontMemberType
    Solid = 1  # ViewVisualizationVisualSmoothEdgeFontMemberType
    Dashed = 2  # ViewVisualizationVisualSmoothEdgeFontMemberType
    Phantom = 3  # ViewVisualizationVisualSmoothEdgeFontMemberType
    CenterLine = 4  # ViewVisualizationVisualSmoothEdgeFontMemberType
    Dotted = 5  # ViewVisualizationVisualSmoothEdgeFontMemberType
    LongDashed = 6  # ViewVisualizationVisualSmoothEdgeFontMemberType
    DottedDashed = 7  # ViewVisualizationVisualSmoothEdgeFontMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualShadedEdgeStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualShadedEdgeStyleType():
    """
    Describes how edges are displayed for shaded faces in the view. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ShadedEdgeColor", " - "
       "BodyColor", " - "
       "NotSet", " - "
    """
    ShadedEdgeColor = 0  # ViewVisualizationVisualShadedEdgeStyleTypeMemberType
    BodyColor = 1  # ViewVisualizationVisualShadedEdgeStyleTypeMemberType
    NotSet = 2  # ViewVisualizationVisualShadedEdgeStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualHiddenEdgeStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationVisualHiddenEdgeStyleType():
    """
    Describes how hidden edges are displayed for shaded faces in the view. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Invisible", " - "
       "HiddenGeometryColor", " - "
       "Dashed", " - "
    """
    Invisible = 0  # ViewVisualizationVisualHiddenEdgeStyleTypeMemberType
    HiddenGeometryColor = 1  # ViewVisualizationVisualHiddenEdgeStyleTypeMemberType
    Dashed = 2  # ViewVisualizationVisualHiddenEdgeStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationVisualDisplayAppearanceOptions_Struct():
    """
    Describes the rendering style and the appearance of edges and silhouettes in the view.  
    
    .
    Constructor: 
    NXOpen.Preferences.ViewVisualizationVisual.DisplayAppearanceOptions()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    RenderingStyle: ViewVisualizationVisualRenderingStyle = ...
    """
    Rendering style for geometry.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualRenderingStyle`
    """
    HiddenEdges: ViewVisualizationVisualHiddenEdges = ...
    """
    Appearance of hidden edges 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdges`
    """
    Silhouettes: bool = ...
    """
    Allows to control whether the silhouettes 
    (or outlines) on cones, cylinders, spheres, 
    and Tori solid bodies display.  
    
    true for visible false for invisible. 
    <hr>
    
    Field Value
    Type:bool
    """
    SmoothEdges: bool = ...
    """
    Allows to control whether edges shared by 
    tangent faces display or not.  
    
    True for visible
    and False for invisible.
    <hr>
    
    Field Value
    Type:bool
    """
    SmoothEdgeColor: int = ...
    """
    Color attribute for visible smooth edges 
    <hr>
    
    Field Value
    Type:int
    """
    SmoothEdgeFont: ViewVisualizationVisualSmoothEdgeFont = ...
    """
    Font attribute for visible smooth edges 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeFont`
    """
    SmoothEdgeWidth: ViewVisualizationVisualSmoothEdgeWidth = ...
    """
    Width attribute for visible smooth edges
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeWidth`
    """
    SmoothEdgeAngleTolerance: float = ...
    """
    Angle tolerance (in degrees) 
    attribute for visible smooth edges.  
    
    It has a range from 0.00001 to 30.0.
    <hr>
    
    Field Value
    Type:float
    """


class ViewVisualizationVisualSurfaceDisplayOptions_Struct():
    """
    Describes the appearance of edges and silhouettes in the view.  
    
    .. deprecated::  NX8.5.0
       Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayAppearanceOptions_Struct` instead.
    
    .
    Constructor: 
    NXOpen.Preferences.ViewVisualizationVisual.SurfaceDisplayOptions()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    RenderingStyle: ViewVisualizationVisualRenderingStyle = ...
    """
    Rendering style for geometry.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualRenderingStyle`
    """
    HiddenEdges: ViewVisualizationVisualHiddenEdges = ...
    """
    Appearance of hidden edges 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdges`
    """
    Silhouettes: bool = ...
    """
    Allows to control whether the silhouettes 
    (or outlines) on cones, cylinders, spheres, 
    and Tori solid bodies display.  
    
    true for visible false for invisible. 
    <hr>
    
    Field Value
    Type:bool
    """
    SmoothEdges: bool = ...
    """
    Allows to control whether edges shared by 
    tangent faces display or not.  
    
    True for visible
    and False for invisible.
    <hr>
    
    Field Value
    Type:bool
    """
    SmoothEdgeColor: int = ...
    """
    Color attribute for visible smooth edges 
    <hr>
    
    Field Value
    Type:int
    """
    SmoothEdgeFont: ViewVisualizationVisualSmoothEdgeFont = ...
    """
    Font attribute for visible smooth edges 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeFont`
    """
    SmoothEdgeWidth: ViewVisualizationVisualSmoothEdgeWidth = ...
    """
    Width attribute for visible smooth edges
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeWidth`
    """


class ViewVisualizationVisualTrueSurfaceDisplayPref_Struct():
    """
    Represents the various surface display parameters.  
    
    .. deprecated::  NX4.0.0
       Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayAppearanceOptions_Struct` instead.
    
    .
    Constructor: 
    NXOpen.Preferences.ViewVisualizationVisual.TrueSurfaceDisplayPref()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    HiddenEdgesType: ViewVisualizationVisualHiddenEdgesType = ...
    """
    Hidden Edge Type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdgesType`
    """
    Silhouettes: bool = ...
    """
    Allows to control whether the silhouettes 
    (or outlines) on cones, cylinders, spheres, 
    and Tori solid bodies display.  
    
    true for visible false for invisible. 
    <hr>
    
    Field Value
    Type:bool
    """
    SmoothEdges: bool = ...
    """
    Allows to control whether edges shared by 
    tangent faces display or not.  
    
    True for visible
    and False for invisible.
    <hr>
    
    Field Value
    Type:bool
    """
    SmoothEdgesColor: int = ...
    """
    Color attribute for visible smooth edges 
    <hr>
    
    Field Value
    Type:int
    """
    SmoothEdgesFont: ViewVisualizationVisualSmoothEdgeFont = ...
    """
    Font attribute for visible smooth edges 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeFont`
    """
    SmoothEdgesWidth: ViewVisualizationVisualSmoothEdgeWidth = ...
    """
    Width attribute for visible smooth edges
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeWidth`
    """
    DisplayMode: ViewVisualizationVisualDisplayModeType = ...
    """
    Display Mode 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayModeType`
    """


class ViewVisualizationVisual():
    """
    Represents the set of View related Visualization visual preferences   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.View`
    
    .. versionadded:: NX3.0.0
    """
    
    class RenderingStyle():
        """
        Describes the rendering style for geometry displayed in the view. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Shaded", " - "
           "Wireframe", " - "
           "Studio", " - "
           "FaceAnalysis", " - "
           "PartiallyShaded", " - "
           "StaticWireframe", " - "
        """
        Shaded = 0  # ViewVisualizationVisualRenderingStyleMemberType
        Wireframe = 1  # ViewVisualizationVisualRenderingStyleMemberType
        Studio = 2  # ViewVisualizationVisualRenderingStyleMemberType
        FaceAnalysis = 3  # ViewVisualizationVisualRenderingStyleMemberType
        PartiallyShaded = 4  # ViewVisualizationVisualRenderingStyleMemberType
        StaticWireframe = 5  # ViewVisualizationVisualRenderingStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DisplayModeType():
        """
        Describes the available display mode types. Specifies shading parameters for the selected view.   
        
        .. deprecated::  NX4.0.0
           Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualRenderingStyle` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Wireframe", "View is displayed as a wireframe-model"
           "PartiallyShaded", "Shade only selected object"
           "FullyShaded", "Shading is applicable to all objects in view"
           "FaceAnalysis", "Display faces using the color analysis data"
           "Studio", "In Studio mode, objects are realistically rendered according to material and texture characteristics assigned to them"
        """
        Wireframe = 0  # ViewVisualizationVisualDisplayModeTypeMemberType
        PartiallyShaded = 1  # ViewVisualizationVisualDisplayModeTypeMemberType
        FullyShaded = 2  # ViewVisualizationVisualDisplayModeTypeMemberType
        FaceAnalysis = 3  # ViewVisualizationVisualDisplayModeTypeMemberType
        Studio = 4  # ViewVisualizationVisualDisplayModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HiddenEdges():
        """
        Describes the appearance of hidden edges displayed in the view.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Visible", " - "
           "Invisible", " - "
           "GrayThin", " - "
           "Dashed", " - "
        """
        Visible = 0  # ViewVisualizationVisualHiddenEdgesMemberType
        Invisible = 1  # ViewVisualizationVisualHiddenEdgesMemberType
        GrayThin = 2  # ViewVisualizationVisualHiddenEdgesMemberType
        Dashed = 3  # ViewVisualizationVisualHiddenEdgesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HiddenEdgesType():
        """
        Describes the available hidden edges types. Determines how hidden edges are displayed in the selected view.   
        
        .. deprecated::  NX4.0.0
           Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdges` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Visible", "All edges in a solid body that are hidden appear as solid lines"
           "Invisible", "grid line display of all existing and subsequently created solid bodies in the selected view, except that portions of geometry and text that appear behind solid bodies are erased"
           "Dashed", "grid line display of all existing and subsequently created solid bodies in the selected view, except that all portions of the geometry and text that appear behind solid bodies are displayed as dashed lines"
           "GrayThin", "All hidden edges in the color gray, with solid font and thin width."
           "HiddenSurface", "Faceted display of all existing and subsequently created bodies in the selected view"
        """
        Visible = 0  # ViewVisualizationVisualHiddenEdgesTypeMemberType
        Invisible = 1  # ViewVisualizationVisualHiddenEdgesTypeMemberType
        Dashed = 2  # ViewVisualizationVisualHiddenEdgesTypeMemberType
        GrayThin = 3  # ViewVisualizationVisualHiddenEdgesTypeMemberType
        HiddenSurface = 4  # ViewVisualizationVisualHiddenEdgesTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SmoothEdgeWidth():
        """
        Describes all possible width selection for visible smooth edges 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", " - "
           "Thin", " - "
           "Normal", " - "
           "Thick", " - "
           "One", " - "
           "Two", " - "
           "Three", " - "
           "Four", " - "
           "Five", " - "
           "Six", " - "
           "Seven", " - "
           "Eight", " - "
           "Nine", " - "
        """
        Original = 0  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Thin = 1  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Normal = 2  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Thick = 3  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        One = 5  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Two = 6  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Three = 7  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Four = 8  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Five = 9  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Six = 10  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Seven = 11  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Eight = 12  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        Nine = 13  # ViewVisualizationVisualSmoothEdgeWidthMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SmoothEdgeFont():
        """
        Describes all possible font selection for visible smooth edges 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", " - "
           "Solid", " - "
           "Dashed", " - "
           "Phantom", " - "
           "CenterLine", " - "
           "Dotted", " - "
           "LongDashed", " - "
           "DottedDashed", " - "
        """
        Original = 0  # ViewVisualizationVisualSmoothEdgeFontMemberType
        Solid = 1  # ViewVisualizationVisualSmoothEdgeFontMemberType
        Dashed = 2  # ViewVisualizationVisualSmoothEdgeFontMemberType
        Phantom = 3  # ViewVisualizationVisualSmoothEdgeFontMemberType
        CenterLine = 4  # ViewVisualizationVisualSmoothEdgeFontMemberType
        Dotted = 5  # ViewVisualizationVisualSmoothEdgeFontMemberType
        LongDashed = 6  # ViewVisualizationVisualSmoothEdgeFontMemberType
        DottedDashed = 7  # ViewVisualizationVisualSmoothEdgeFontMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShadedEdgeStyleType():
        """
        Describes how edges are displayed for shaded faces in the view. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ShadedEdgeColor", " - "
           "BodyColor", " - "
           "NotSet", " - "
        """
        ShadedEdgeColor = 0  # ViewVisualizationVisualShadedEdgeStyleTypeMemberType
        BodyColor = 1  # ViewVisualizationVisualShadedEdgeStyleTypeMemberType
        NotSet = 2  # ViewVisualizationVisualShadedEdgeStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HiddenEdgeStyleType():
        """
        Describes how hidden edges are displayed for shaded faces in the view. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Invisible", " - "
           "HiddenGeometryColor", " - "
           "Dashed", " - "
        """
        Invisible = 0  # ViewVisualizationVisualHiddenEdgeStyleTypeMemberType
        HiddenGeometryColor = 1  # ViewVisualizationVisualHiddenEdgeStyleTypeMemberType
        Dashed = 2  # ViewVisualizationVisualHiddenEdgeStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DisplayAppearanceOptions():
        """
        Describes the rendering style and the appearance of edges and silhouettes in the view.  
        
        .
        Constructor: 
        NXOpen.Preferences.ViewVisualizationVisual.DisplayAppearanceOptions()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        RenderingStyle: ViewVisualizationVisualRenderingStyle = ...
        """
        Rendering style for geometry.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualRenderingStyle`
        """
        HiddenEdges: ViewVisualizationVisualHiddenEdges = ...
        """
        Appearance of hidden edges 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdges`
        """
        Silhouettes: bool = ...
        """
        Allows to control whether the silhouettes 
        (or outlines) on cones, cylinders, spheres, 
        and Tori solid bodies display.  
        
        true for visible false for invisible. 
        <hr>
        
        Field Value
        Type:bool
        """
        SmoothEdges: bool = ...
        """
        Allows to control whether edges shared by 
        tangent faces display or not.  
        
        True for visible
        and False for invisible.
        <hr>
        
        Field Value
        Type:bool
        """
        SmoothEdgeColor: int = ...
        """
        Color attribute for visible smooth edges 
        <hr>
        
        Field Value
        Type:int
        """
        SmoothEdgeFont: ViewVisualizationVisualSmoothEdgeFont = ...
        """
        Font attribute for visible smooth edges 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeFont`
        """
        SmoothEdgeWidth: ViewVisualizationVisualSmoothEdgeWidth = ...
        """
        Width attribute for visible smooth edges
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeWidth`
        """
        SmoothEdgeAngleTolerance: float = ...
        """
        Angle tolerance (in degrees) 
        attribute for visible smooth edges.  
        
        It has a range from 0.00001 to 30.0.
        <hr>
        
        Field Value
        Type:float
        """
    
    
    class SurfaceDisplayOptions():
        """
        Describes the appearance of edges and silhouettes in the view.  
        
        .. deprecated::  NX8.5.0
           Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayAppearanceOptions_Struct` instead.
        
        .
        Constructor: 
        NXOpen.Preferences.ViewVisualizationVisual.SurfaceDisplayOptions()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        RenderingStyle: ViewVisualizationVisualRenderingStyle = ...
        """
        Rendering style for geometry.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualRenderingStyle`
        """
        HiddenEdges: ViewVisualizationVisualHiddenEdges = ...
        """
        Appearance of hidden edges 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdges`
        """
        Silhouettes: bool = ...
        """
        Allows to control whether the silhouettes 
        (or outlines) on cones, cylinders, spheres, 
        and Tori solid bodies display.  
        
        true for visible false for invisible. 
        <hr>
        
        Field Value
        Type:bool
        """
        SmoothEdges: bool = ...
        """
        Allows to control whether edges shared by 
        tangent faces display or not.  
        
        True for visible
        and False for invisible.
        <hr>
        
        Field Value
        Type:bool
        """
        SmoothEdgeColor: int = ...
        """
        Color attribute for visible smooth edges 
        <hr>
        
        Field Value
        Type:int
        """
        SmoothEdgeFont: ViewVisualizationVisualSmoothEdgeFont = ...
        """
        Font attribute for visible smooth edges 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeFont`
        """
        SmoothEdgeWidth: ViewVisualizationVisualSmoothEdgeWidth = ...
        """
        Width attribute for visible smooth edges
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeWidth`
        """
    
    
    class TrueSurfaceDisplayPref():
        """
        Represents the various surface display parameters.  
        
        .. deprecated::  NX4.0.0
           Use :py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayAppearanceOptions_Struct` instead.
        
        .
        Constructor: 
        NXOpen.Preferences.ViewVisualizationVisual.TrueSurfaceDisplayPref()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        HiddenEdgesType: ViewVisualizationVisualHiddenEdgesType = ...
        """
        Hidden Edge Type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdgesType`
        """
        Silhouettes: bool = ...
        """
        Allows to control whether the silhouettes 
        (or outlines) on cones, cylinders, spheres, 
        and Tori solid bodies display.  
        
        true for visible false for invisible. 
        <hr>
        
        Field Value
        Type:bool
        """
        SmoothEdges: bool = ...
        """
        Allows to control whether edges shared by 
        tangent faces display or not.  
        
        True for visible
        and False for invisible.
        <hr>
        
        Field Value
        Type:bool
        """
        SmoothEdgesColor: int = ...
        """
        Color attribute for visible smooth edges 
        <hr>
        
        Field Value
        Type:int
        """
        SmoothEdgesFont: ViewVisualizationVisualSmoothEdgeFont = ...
        """
        Font attribute for visible smooth edges 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeFont`
        """
        SmoothEdgesWidth: ViewVisualizationVisualSmoothEdgeWidth = ...
        """
        Width attribute for visible smooth edges
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeWidth`
        """
        DisplayMode: ViewVisualizationVisualDisplayModeType = ...
        """
        Display Mode 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayModeType`
        """
    
    DisplayAppearance: ViewVisualizationVisualDisplayAppearanceOptions_Struct = ...
    """
    Returns or sets  the rendering style and the edge display options of the view.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayAppearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayAppearanceOptions_Struct` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayAppearance`` 
    
    :param displayAppearanceOptions: 
    :type displayAppearanceOptions: :py:class:`NXOpen.Preferences.ViewVisualizationVisualDisplayAppearanceOptions_Struct` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    HiddenEdgeStyle: ViewVisualizationVisualHiddenEdgeStyleType = ...
    """
    Returns or sets  the hidden edge display style for shaded faces in the view.  
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenEdgeStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdgeStyleType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenEdgeStyle`` 
    
    :param hiddenEdgeStyle: 
    :type hiddenEdgeStyle: :py:class:`NXOpen.Preferences.ViewVisualizationVisualHiddenEdgeStyleType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ShadedEdgeColor: int = ...
    """
    Returns or sets  the edge color for shaded faces in the view.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedEdgeColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadedEdgeColor`` 
    
    :param shadedEdgeColor: 
    :type shadedEdgeColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ShadedEdgeStyle: ViewVisualizationVisualShadedEdgeStyleType = ...
    """
    Returns or sets  the edge display style for shaded faces in the view.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedEdgeStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationVisualShadedEdgeStyleType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadedEdgeStyle`` 
    
    :param shadedEdgeStyle: 
    :type shadedEdgeStyle: :py:class:`NXOpen.Preferences.ViewVisualizationVisualShadedEdgeStyleType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ShininessData: float = ...
    """
    Returns or sets  the shininess value.  
    
    Specifies the intensity of the graphics driver addition of highlights to shaded surfaces, 
    making them appear shiny. The value 0.0 adds no shininess, and 1.0 adds the maximum amount of shininess. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShininessData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShininessData`` 
    
    :param shininessData: 
    :type shininessData: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SurfaceDisplay: ViewVisualizationVisualSurfaceDisplayOptions_Struct = ...
    """
    Returns or sets  the rendering style and the edge display options of the view.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationVisualSurfaceDisplayOptions_Struct` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`NXOpen.Preferences.ViewVisualizationVisual.DisplayAppearance` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceDisplay`` 
    
    :param surfaceDisplay: 
    :type surfaceDisplay: :py:class:`NXOpen.Preferences.ViewVisualizationVisualSurfaceDisplayOptions_Struct` 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`NXOpen.Preferences.ViewVisualizationVisual.DisplayAppearance` instead.
    
    License requirements: None.
    """
    TrueSurfaceDisplay: ViewVisualizationVisualTrueSurfaceDisplayPref_Struct = ...
    """
    Returns or sets  the true surface display parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrueSurfaceDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationVisualTrueSurfaceDisplayPref_Struct` 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX4.0.0
       Use :py:meth:`NXOpen.Preferences.ViewVisualizationVisual.DisplayAppearance` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrueSurfaceDisplay`` 
    
    :param trueSurfaceDisplay: 
    :type trueSurfaceDisplay: :py:class:`NXOpen.Preferences.ViewVisualizationVisualTrueSurfaceDisplayPref_Struct` 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX4.0.0
       Use :py:meth:`NXOpen.Preferences.ViewVisualizationVisual.DisplayAppearance` instead.
    
    License requirements: None.
    """
    TwoSidedLight: bool = ...
    """
    Returns or sets  the two sided light flag.  
    
    Specifies whether lighting should be applied to both the front and backsides of faces. 
    If it is true, then lighting from a light source is applied to the front or the back face, depending on which side is 
    exposed to the light source. If this is false, then lighting is not applied to the back of a face even if the back is 
    exposed to the light source. 
    
    <hr>
    
    Getter Method
    
    Signature ``TwoSidedLight`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwoSidedLight`` 
    
    :param twoSidedLight: 
    :type twoSidedLight: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class ShadingViewPreferences(IShadingViewPreferences):
    """
    Represents set of Shading View Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.Shading`
    
    .. versionadded:: NX5.0.0
    """
    CustomAngleTolerance: float = ...
    """
    Returns or sets  the custom angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomAngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomAngleTolerance`` 
    
    :param customAngleTolerance: 
    :type customAngleTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomEdgeTolerance: float = ...
    """
    Returns or sets  the custom edge tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomEdgeTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomEdgeTolerance`` 
    
    :param customEdgeTolerance: 
    :type customEdgeTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomFaceTolerance: float = ...
    """
    Returns or sets  the custom face tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomFaceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomFaceTolerance`` 
    
    :param customFaceTolerance: 
    :type customFaceTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverrideHiddenWireframeColor: int = ...
    """
    Returns or sets  the hidden wireframe override color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideHiddenWireframeColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideHiddenWireframeColor`` 
    
    :param overrideHiddenWireframeColor: 
    :type overrideHiddenWireframeColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverrideVisibleWireframeColor: int = ...
    """
    Returns or sets  the visible wireframe override color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideVisibleWireframeColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideVisibleWireframeColor`` 
    
    :param overrideVisibleWireframeColor: 
    :type overrideVisibleWireframeColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderingStyle: ShadingRenderingStyleOption = ...
    """
    Returns or sets  the rendering style.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenderingStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ShadingRenderingStyleOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderingStyle`` 
    
    :param renderingStyleOption: 
    :type renderingStyleOption: :py:class:`NXOpen.Preferences.ShadingRenderingStyleOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShadedCutFaceColor: int = ...
    """
    Returns or sets  the shaded cut face color.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedCutFaceColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadedCutFaceColor`` 
    
    :param shadedCutFaceColor: 
    :type shadedCutFaceColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShadingTolerance: ShadingToleranceOption = ...
    """
    Returns or sets  the shading tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShadingTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ShadingToleranceOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadingTolerance`` 
    
    :param shadingTolerance: 
    :type shadingTolerance: :py:class:`NXOpen.Preferences.ShadingToleranceOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Shininess: float = ...
    """
    Returns or sets  the shininess tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Shininess`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Shininess`` 
    
    :param shininessTolerance: 
    :type shininessTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TwoSidedLight: bool = ...
    """
    Returns or sets  the two sided light toggle data.  
    
    <hr>
    
    Getter Method
    
    Signature ``TwoSidedLight`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwoSidedLight`` 
    
    :param twoSidedLight: 
    :type twoSidedLight: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class ProjectedViewPreferences(IProjectedViewPreferences):
    """
    Represents set of Projected View Preferences applicable to drafting views.  
    
    It applies to any newly created projected view.
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.Projected`
    
    .. versionadded:: NX5.0.0
    """


class LoadDraftingStandardBuilderLoadLevelMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LoadDraftingStandardBuilderLoadLevel():
    """
    This enum is for the load level 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Shipped", "the shipped level"
       "Package", "the package level"
       "Site", "the site level"
       "Group", "the group level"
       "User", "the user level"
    """
    Shipped = 0  # LoadDraftingStandardBuilderLoadLevelMemberType
    Package = 1  # LoadDraftingStandardBuilderLoadLevelMemberType
    Site = 2  # LoadDraftingStandardBuilderLoadLevelMemberType
    Group = 3  # LoadDraftingStandardBuilderLoadLevelMemberType
    User = 4  # LoadDraftingStandardBuilderLoadLevelMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LoadDraftingStandardBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Preferences.LoadDraftingStandardBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Preferences.DraftingPreferenceManager.CreateLoadDraftingStandardBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class LoadLevel():
        """
        This enum is for the load level 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Shipped", "the shipped level"
           "Package", "the package level"
           "Site", "the site level"
           "Group", "the group level"
           "User", "the user level"
        """
        Shipped = 0  # LoadDraftingStandardBuilderLoadLevelMemberType
        Package = 1  # LoadDraftingStandardBuilderLoadLevelMemberType
        Site = 2  # LoadDraftingStandardBuilderLoadLevelMemberType
        Group = 3  # LoadDraftingStandardBuilderLoadLevelMemberType
        User = 4  # LoadDraftingStandardBuilderLoadLevelMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Level: LoadDraftingStandardBuilderLoadLevel = ...
    """
    Returns or sets  the standard level 
    
    <hr>
    
    Getter Method
    
    Signature ``Level`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.LoadDraftingStandardBuilderLoadLevel` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Level`` 
    
    :param level: 
    :type level: :py:class:`NXOpen.Preferences.LoadDraftingStandardBuilderLoadLevel` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the standard name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    WelcomeMode: bool = ...
    """
    Returns or sets  the welcome mode 
    
    <hr>
    
    Getter Method
    
    Signature ``WelcomeMode`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WelcomeMode`` 
    
    :param welcomeMode: 
    :type welcomeMode: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: LoadDraftingStandardBuilder = ...  # unknown typename


class SessionModelingNewFacePropertiesInheritanceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingNewFacePropertiesInheritance():
    """
    Describes whether the display of New Face properties inherits from body or part default 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Body", "Indicates that display of new face properties inherits from body"
       "PartDefault", "Indicates that display of new face properties inherits from part default"
    """
    Body = 0  # SessionModelingNewFacePropertiesInheritanceMemberType
    PartDefault = 1  # SessionModelingNewFacePropertiesInheritanceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingBooleanFacePropertiesInheritanceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingBooleanFacePropertiesInheritance():
    """
    Describes whether the display of Boolean Face properties inherits from target body or tool body 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TargetBody", "Indicates that display of boolean face properties inherits from target body"
       "ToolBody", "Indicates that display of boolean face properties inherits from tool body"
    """
    TargetBody = 0  # SessionModelingBooleanFacePropertiesInheritanceMemberType
    ToolBody = 1  # SessionModelingBooleanFacePropertiesInheritanceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingLinkedAndExtractedGeometryPropertiesInheritanceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingLinkedAndExtractedGeometryPropertiesInheritance():
    """
    Describes whether the display of linked and extracted geometry properties inherits from parent object or part default 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ParentObject", "Indicates that display of linked and extracted geometry properties inherits from parent object"
       "PartDefault", "Indicates that display of linked and extracted geometry properties inherits from part default"
    """
    ParentObject = 0  # SessionModelingLinkedAndExtractedGeometryPropertiesInheritanceMemberType
    PartDefault = 1  # SessionModelingLinkedAndExtractedGeometryPropertiesInheritanceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingDynamicUpdateTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingDynamicUpdateType():
    """
    Describes whether the Dynamic Update type is not selected or selected as incremental or continuous 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Indicates that Dynamic Update type is not selected, this option is deprecated from NX12.0"
       "Incremental", "Indicates that Dynamic Update type is incremental"
       "Continuous", "Indicates that Dynamic Update type is continuous"
    """
    NotSet = 0  # SessionModelingDynamicUpdateTypeMemberType
    Incremental = 1  # SessionModelingDynamicUpdateTypeMemberType
    Continuous = 2  # SessionModelingDynamicUpdateTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingImmediateChildrenTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingImmediateChildrenType():
    """
    Describes whether the Immediate Children type is selected for first level or for all 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstLevel", "Indicates that Immediate Children type is at first level"
       "All", "Indicates that Immediate Children type is at all level"
    """
    FirstLevel = 0  # SessionModelingImmediateChildrenTypeMemberType
    All = 1  # SessionModelingImmediateChildrenTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingBodyTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingBodyTypeOption():
    """
    Describes whether the body type is solid or sheet 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Solid", "Indicates Body Type is solid"
       "Sheet", "Indicates Body Type is solid"
    """
    Solid = 0  # SessionModelingBodyTypeOptionMemberType
    Sheet = 1  # SessionModelingBodyTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingFreeFormConstructionResultTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingFreeFormConstructionResultType():
    """
    Describes whether the Free Form Construction Result is plane or B Surface  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plane", "Indicates the construction result option is plane"
       "BSurface", "Indicates the construction result option is B Surface"
    """
    Plane = 0  # SessionModelingFreeFormConstructionResultTypeMemberType
    BSurface = 1  # SessionModelingFreeFormConstructionResultTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingSplineDefaultActionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingSplineDefaultActionTypes():
    """
    Specifies the command that should be invoked when double-clicking on a spline. 
    The option applies to non-associative splines and Studio Spline features in the Shape Studio application only.   
    
    .. versionadded:: NX7.0.0
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StudioSpline", "Specifies Studio Spline for editing a spline"
       "Xform", "Specifies X-form for editing a spline"
    """
    StudioSpline = 0  # SessionModelingSplineDefaultActionTypesMemberType
    Xform = 1  # SessionModelingSplineDefaultActionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingCurveFitMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingCurveFitMethodType():
    """
    Describes whether the Curve Fit Method type is selected as cubic or quintic or advanced 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cubic", "Indicates the Curve Fit Method type is cubic"
       "Quintic", "Indicates the Curve Fit Method type is quintic"
       "Advanced", "Indicates the Curve Fit Method type is advanced"
    """
    Cubic = 0  # SessionModelingCurveFitMethodTypeMemberType
    Quintic = 1  # SessionModelingCurveFitMethodTypeMemberType
    Advanced = 2  # SessionModelingCurveFitMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingPreviewResolutionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingPreviewResolutionType():
    """
    Freeform preview resolutions 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Coarse", " - "
       "Standard", " - "
       "Fine", " - "
       "ExtraFine", " - "
       "SuperFine", " - "
       "UltraFine", " - "
    """
    NotSet = 0  # SessionModelingPreviewResolutionTypeMemberType
    Coarse = 1  # SessionModelingPreviewResolutionTypeMemberType
    Standard = 2  # SessionModelingPreviewResolutionTypeMemberType
    Fine = 3  # SessionModelingPreviewResolutionTypeMemberType
    ExtraFine = 4  # SessionModelingPreviewResolutionTypeMemberType
    SuperFine = 5  # SessionModelingPreviewResolutionTypeMemberType
    UltraFine = 6  # SessionModelingPreviewResolutionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingSketchDefaultActionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingSketchDefaultActionType():
    """
    Double click action for sketches 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EditWithRollback", "Edit sketch with rollback on double click"
       "Edit", "Edit sketch without rollback on double click"
    """
    EditWithRollback = 0  # SessionModelingSketchDefaultActionTypeMemberType
    Edit = 1  # SessionModelingSketchDefaultActionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingSketchEditTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingSketchEditType():
    """
    Edit option for sketches 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InTaskEnvironment", "Edit sketch in task environment"
       "Direct", "Edit sketch without entering task environment"
    """
    InTaskEnvironment = 0  # SessionModelingSketchEditTypeMemberType
    Direct = 1  # SessionModelingSketchEditTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingPolylineStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingPolylineStyleType():
    """
    Styles for polylines of B curves and B surfaces  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Solid", " - "
       "Dashed", " - "
       "Phantom", " - "
       "Centerline", " - "
       "Dotted", " - "
       "Longdashed", " - "
       "Dotteddashed", " - "
    """
    Solid = 1  # SessionModelingPolylineStyleTypeMemberType
    Dashed = 2  # SessionModelingPolylineStyleTypeMemberType
    Phantom = 3  # SessionModelingPolylineStyleTypeMemberType
    Centerline = 4  # SessionModelingPolylineStyleTypeMemberType
    Dotted = 5  # SessionModelingPolylineStyleTypeMemberType
    Longdashed = 6  # SessionModelingPolylineStyleTypeMemberType
    Dotteddashed = 7  # SessionModelingPolylineStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingPoleDisplayStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingPoleDisplayStyleType():
    """
    Styles for display poles of B curves and B surfaces  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "OpenCircle", " - "
       "FilledCircle", " - "
       "PlusSign", " - "
       "Cross", " - "
    """
    NotSet = 0  # SessionModelingPoleDisplayStyleTypeMemberType
    OpenCircle = 1  # SessionModelingPoleDisplayStyleTypeMemberType
    FilledCircle = 2  # SessionModelingPoleDisplayStyleTypeMemberType
    PlusSign = 3  # SessionModelingPoleDisplayStyleTypeMemberType
    Cross = 4  # SessionModelingPoleDisplayStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingPoleEditStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingPoleEditStyleType():
    """
    Styles for edit poles of B curves and B surfaces  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sphere3d", " - "
       "OpenCircle", " - "
       "FilledCircle", " - "
       "PlusSign", " - "
       "Cross", " - "
    """
    Sphere3d = 0  # SessionModelingPoleEditStyleTypeMemberType
    OpenCircle = 1  # SessionModelingPoleEditStyleTypeMemberType
    FilledCircle = 2  # SessionModelingPoleEditStyleTypeMemberType
    PlusSign = 3  # SessionModelingPoleEditStyleTypeMemberType
    Cross = 4  # SessionModelingPoleEditStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingEndpointDisplayStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingEndpointDisplayStyleType():
    """
    Styles for display endpoints of curves  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OpenCircle", " - "
       "FilledCircle", " - "
       "PlusSign", " - "
       "Cross", " - "
    """
    OpenCircle = 0  # SessionModelingEndpointDisplayStyleTypeMemberType
    FilledCircle = 1  # SessionModelingEndpointDisplayStyleTypeMemberType
    PlusSign = 2  # SessionModelingEndpointDisplayStyleTypeMemberType
    Cross = 3  # SessionModelingEndpointDisplayStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingShareGeometriesOnSaveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingShareGeometriesOnSaveType():
    """
    Options for saving a part file with sharing of geometry data to reduce file size  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DontShare", " - "
       "Share", " - "
    """
    DontShare = 0  # SessionModelingShareGeometriesOnSaveTypeMemberType
    Share = 1  # SessionModelingShareGeometriesOnSaveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingSurfaceExtensionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingSurfaceExtensionOption():
    """
    Options for controling how surfaces will be extended while moving geometry 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", " - "
       "Soft", " - "
       "Reflective", " - "
       "Natural", " - "
       "Arc", " - "
    """
    Linear = 0  # SessionModelingSurfaceExtensionOptionMemberType
    Soft = 1  # SessionModelingSurfaceExtensionOptionMemberType
    Reflective = 2  # SessionModelingSurfaceExtensionOptionMemberType
    Natural = 3  # SessionModelingSurfaceExtensionOptionMemberType
    Arc = 4  # SessionModelingSurfaceExtensionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingSaveDataForFeatureEditOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingSaveDataForFeatureEditOption():
    """
    Options for controling what additional data needs to be saved in part file to enhance the feature edit 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Indicates the no additional data is saved"
       "FastRollback", "Indicates the additional parasolid data is saved for faster rollback"
       "FastRollbackAndPreviousStateOfFailedFeature", "Indicates the additional parasolid data is saved for faster rollback and to show the previous state of failed feature"
    """
    NotSet = 0  # SessionModelingSaveDataForFeatureEditOptionMemberType
    FastRollback = 1  # SessionModelingSaveDataForFeatureEditOptionMemberType
    FastRollbackAndPreviousStateOfFailedFeature = 2  # SessionModelingSaveDataForFeatureEditOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModelingDeleteChildFeaturesOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionModelingDeleteChildFeaturesOptionType():
    """
    Options for controling delete child features, including recipe curves, of a feature being deleted 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "Delete child features including recipe curves, of a feature being deleted"
       "No", "Do not delete child features of feature being deleted"
       "Ask", "Ask user "Do you want to delete child features?""
    """
    Yes = 1  # SessionModelingDeleteChildFeaturesOptionTypeMemberType
    No = 2  # SessionModelingDeleteChildFeaturesOptionTypeMemberType
    Ask = 3  # SessionModelingDeleteChildFeaturesOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionModeling():
    """
    Represents the set of Modeling preferences applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class NewFacePropertiesInheritance():
        """
        Describes whether the display of New Face properties inherits from body or part default 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Body", "Indicates that display of new face properties inherits from body"
           "PartDefault", "Indicates that display of new face properties inherits from part default"
        """
        Body = 0  # SessionModelingNewFacePropertiesInheritanceMemberType
        PartDefault = 1  # SessionModelingNewFacePropertiesInheritanceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BooleanFacePropertiesInheritance():
        """
        Describes whether the display of Boolean Face properties inherits from target body or tool body 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TargetBody", "Indicates that display of boolean face properties inherits from target body"
           "ToolBody", "Indicates that display of boolean face properties inherits from tool body"
        """
        TargetBody = 0  # SessionModelingBooleanFacePropertiesInheritanceMemberType
        ToolBody = 1  # SessionModelingBooleanFacePropertiesInheritanceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LinkedAndExtractedGeometryPropertiesInheritance():
        """
        Describes whether the display of linked and extracted geometry properties inherits from parent object or part default 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ParentObject", "Indicates that display of linked and extracted geometry properties inherits from parent object"
           "PartDefault", "Indicates that display of linked and extracted geometry properties inherits from part default"
        """
        ParentObject = 0  # SessionModelingLinkedAndExtractedGeometryPropertiesInheritanceMemberType
        PartDefault = 1  # SessionModelingLinkedAndExtractedGeometryPropertiesInheritanceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DynamicUpdateType():
        """
        Describes whether the Dynamic Update type is not selected or selected as incremental or continuous 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Indicates that Dynamic Update type is not selected, this option is deprecated from NX12.0"
           "Incremental", "Indicates that Dynamic Update type is incremental"
           "Continuous", "Indicates that Dynamic Update type is continuous"
        """
        NotSet = 0  # SessionModelingDynamicUpdateTypeMemberType
        Incremental = 1  # SessionModelingDynamicUpdateTypeMemberType
        Continuous = 2  # SessionModelingDynamicUpdateTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ImmediateChildrenType():
        """
        Describes whether the Immediate Children type is selected for first level or for all 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstLevel", "Indicates that Immediate Children type is at first level"
           "All", "Indicates that Immediate Children type is at all level"
        """
        FirstLevel = 0  # SessionModelingImmediateChildrenTypeMemberType
        All = 1  # SessionModelingImmediateChildrenTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BodyTypeOption():
        """
        Describes whether the body type is solid or sheet 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Solid", "Indicates Body Type is solid"
           "Sheet", "Indicates Body Type is solid"
        """
        Solid = 0  # SessionModelingBodyTypeOptionMemberType
        Sheet = 1  # SessionModelingBodyTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FreeFormConstructionResultType():
        """
        Describes whether the Free Form Construction Result is plane or B Surface  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plane", "Indicates the construction result option is plane"
           "BSurface", "Indicates the construction result option is B Surface"
        """
        Plane = 0  # SessionModelingFreeFormConstructionResultTypeMemberType
        BSurface = 1  # SessionModelingFreeFormConstructionResultTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplineDefaultActionTypes():
        """
        Specifies the command that should be invoked when double-clicking on a spline. 
        The option applies to non-associative splines and Studio Spline features in the Shape Studio application only.   
        
        .. versionadded:: NX7.0.0
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StudioSpline", "Specifies Studio Spline for editing a spline"
           "Xform", "Specifies X-form for editing a spline"
        """
        StudioSpline = 0  # SessionModelingSplineDefaultActionTypesMemberType
        Xform = 1  # SessionModelingSplineDefaultActionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CurveFitMethodType():
        """
        Describes whether the Curve Fit Method type is selected as cubic or quintic or advanced 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cubic", "Indicates the Curve Fit Method type is cubic"
           "Quintic", "Indicates the Curve Fit Method type is quintic"
           "Advanced", "Indicates the Curve Fit Method type is advanced"
        """
        Cubic = 0  # SessionModelingCurveFitMethodTypeMemberType
        Quintic = 1  # SessionModelingCurveFitMethodTypeMemberType
        Advanced = 2  # SessionModelingCurveFitMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PreviewResolutionType():
        """
        Freeform preview resolutions 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Coarse", " - "
           "Standard", " - "
           "Fine", " - "
           "ExtraFine", " - "
           "SuperFine", " - "
           "UltraFine", " - "
        """
        NotSet = 0  # SessionModelingPreviewResolutionTypeMemberType
        Coarse = 1  # SessionModelingPreviewResolutionTypeMemberType
        Standard = 2  # SessionModelingPreviewResolutionTypeMemberType
        Fine = 3  # SessionModelingPreviewResolutionTypeMemberType
        ExtraFine = 4  # SessionModelingPreviewResolutionTypeMemberType
        SuperFine = 5  # SessionModelingPreviewResolutionTypeMemberType
        UltraFine = 6  # SessionModelingPreviewResolutionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SketchDefaultActionType():
        """
        Double click action for sketches 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EditWithRollback", "Edit sketch with rollback on double click"
           "Edit", "Edit sketch without rollback on double click"
        """
        EditWithRollback = 0  # SessionModelingSketchDefaultActionTypeMemberType
        Edit = 1  # SessionModelingSketchDefaultActionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SketchEditType():
        """
        Edit option for sketches 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "InTaskEnvironment", "Edit sketch in task environment"
           "Direct", "Edit sketch without entering task environment"
        """
        InTaskEnvironment = 0  # SessionModelingSketchEditTypeMemberType
        Direct = 1  # SessionModelingSketchEditTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PolylineStyleType():
        """
        Styles for polylines of B curves and B surfaces  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Solid", " - "
           "Dashed", " - "
           "Phantom", " - "
           "Centerline", " - "
           "Dotted", " - "
           "Longdashed", " - "
           "Dotteddashed", " - "
        """
        Solid = 1  # SessionModelingPolylineStyleTypeMemberType
        Dashed = 2  # SessionModelingPolylineStyleTypeMemberType
        Phantom = 3  # SessionModelingPolylineStyleTypeMemberType
        Centerline = 4  # SessionModelingPolylineStyleTypeMemberType
        Dotted = 5  # SessionModelingPolylineStyleTypeMemberType
        Longdashed = 6  # SessionModelingPolylineStyleTypeMemberType
        Dotteddashed = 7  # SessionModelingPolylineStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PoleDisplayStyleType():
        """
        Styles for display poles of B curves and B surfaces  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "OpenCircle", " - "
           "FilledCircle", " - "
           "PlusSign", " - "
           "Cross", " - "
        """
        NotSet = 0  # SessionModelingPoleDisplayStyleTypeMemberType
        OpenCircle = 1  # SessionModelingPoleDisplayStyleTypeMemberType
        FilledCircle = 2  # SessionModelingPoleDisplayStyleTypeMemberType
        PlusSign = 3  # SessionModelingPoleDisplayStyleTypeMemberType
        Cross = 4  # SessionModelingPoleDisplayStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PoleEditStyleType():
        """
        Styles for edit poles of B curves and B surfaces  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sphere3d", " - "
           "OpenCircle", " - "
           "FilledCircle", " - "
           "PlusSign", " - "
           "Cross", " - "
        """
        Sphere3d = 0  # SessionModelingPoleEditStyleTypeMemberType
        OpenCircle = 1  # SessionModelingPoleEditStyleTypeMemberType
        FilledCircle = 2  # SessionModelingPoleEditStyleTypeMemberType
        PlusSign = 3  # SessionModelingPoleEditStyleTypeMemberType
        Cross = 4  # SessionModelingPoleEditStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndpointDisplayStyleType():
        """
        Styles for display endpoints of curves  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OpenCircle", " - "
           "FilledCircle", " - "
           "PlusSign", " - "
           "Cross", " - "
        """
        OpenCircle = 0  # SessionModelingEndpointDisplayStyleTypeMemberType
        FilledCircle = 1  # SessionModelingEndpointDisplayStyleTypeMemberType
        PlusSign = 2  # SessionModelingEndpointDisplayStyleTypeMemberType
        Cross = 3  # SessionModelingEndpointDisplayStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShareGeometriesOnSaveType():
        """
        Options for saving a part file with sharing of geometry data to reduce file size  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DontShare", " - "
           "Share", " - "
        """
        DontShare = 0  # SessionModelingShareGeometriesOnSaveTypeMemberType
        Share = 1  # SessionModelingShareGeometriesOnSaveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfaceExtensionOption():
        """
        Options for controling how surfaces will be extended while moving geometry 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", " - "
           "Soft", " - "
           "Reflective", " - "
           "Natural", " - "
           "Arc", " - "
        """
        Linear = 0  # SessionModelingSurfaceExtensionOptionMemberType
        Soft = 1  # SessionModelingSurfaceExtensionOptionMemberType
        Reflective = 2  # SessionModelingSurfaceExtensionOptionMemberType
        Natural = 3  # SessionModelingSurfaceExtensionOptionMemberType
        Arc = 4  # SessionModelingSurfaceExtensionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SaveDataForFeatureEditOption():
        """
        Options for controling what additional data needs to be saved in part file to enhance the feature edit 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Indicates the no additional data is saved"
           "FastRollback", "Indicates the additional parasolid data is saved for faster rollback"
           "FastRollbackAndPreviousStateOfFailedFeature", "Indicates the additional parasolid data is saved for faster rollback and to show the previous state of failed feature"
        """
        NotSet = 0  # SessionModelingSaveDataForFeatureEditOptionMemberType
        FastRollback = 1  # SessionModelingSaveDataForFeatureEditOptionMemberType
        FastRollbackAndPreviousStateOfFailedFeature = 2  # SessionModelingSaveDataForFeatureEditOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DeleteChildFeaturesOptionType():
        """
        Options for controling delete child features, including recipe curves, of a feature being deleted 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "Delete child features including recipe curves, of a feature being deleted"
           "No", "Do not delete child features of feature being deleted"
           "Ask", "Ask user "Do you want to delete child features?""
        """
        Yes = 1  # SessionModelingDeleteChildFeaturesOptionTypeMemberType
        No = 2  # SessionModelingDeleteChildFeaturesOptionTypeMemberType
        Ask = 3  # SessionModelingDeleteChildFeaturesOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AccelerationColor: int = ...
    """
    Returns or sets  the acceleration color 
    
    <hr>
    
    Getter Method
    
    Signature ``AccelerationColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AccelerationColor`` 
    
    :param accelerationColor: 
    :type accelerationColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ActivateFeatureGroupWithRollback: bool = ...
    """
    Returns or sets  the flag to activate the feature group with rollback or not, if the flag is true, the highest member feature will be made as current feature
    
    <hr>
    
    Getter Method
    
    Signature ``ActivateFeatureGroupWithRollback`` 
    
    :returns:  Flag indicating whether the highest member feature will be made as current feature when activate the feature group 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActivateFeatureGroupWithRollback`` 
    
    :param activateFeatureGroupWithRollback: 
    :type activateFeatureGroupWithRollback: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AllowEditingOfDimensionOfInternalSketch: bool = ...
    """
    Returns or sets  the option "allow_editing_of_dimension_of_internal_sketch" gives choice, 
    whether or not the sketch dimensions will display and be possible to select and edit directly, 
    without entering the Sketch task environment when a dialog (e.  
    
    g. Extrude, Revolve, Hole etc.) is active 
    which allows editing on an internal sketch.
    
    <hr>
    
    Getter Method
    
    Signature ``AllowEditingOfDimensionOfInternalSketch`` 
    
    :returns:  allow sketch dim edit of internal sketch preference  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowEditingOfDimensionOfInternalSketch`` 
    
    :param allowEditingOfDimensionOfInternalSketch:  allow sketch dim edit of internal sketch preference  
    :type allowEditingOfDimensionOfInternalSketch: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AssociativeEditFreeForm: bool = ...
    """
    Returns or sets  the associative edit free form option.  
    
    Specify whether the output of editing certain free form features remain 
    as free form features or as unparameterized features. 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeEditFreeForm`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativeEditFreeForm`` 
    
    :param associativeEditFreeForm: 
    :type associativeEditFreeForm: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    BodyType: SessionModelingBodyTypeOption = ...
    """
    Returns or sets  the body type.  
    
    Toggles between Solid and Sheet. When creating bodies through curves, the Body Type option provides
    control to the type of body (for example, solid body vs. sheet body) that is created. 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingBodyTypeOption` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodyType`` 
    
    :param bodyType: 
    :type bodyType: :py:class:`NXOpen.Preferences.SessionModelingBodyTypeOption` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    BooleanFaceProperties: SessionModelingBooleanFacePropertiesInheritance = ...
    """
    Returns or sets  the boolean face properties inheritance.  
    
    Specifies whether the boolean face properties inherit from target body or tool body 
    
    <hr>
    
    Getter Method
    
    Signature ``BooleanFaceProperties`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingBooleanFacePropertiesInheritance` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BooleanFaceProperties`` 
    
    :param booleanFaceProperties: 
    :type booleanFaceProperties: :py:class:`NXOpen.Preferences.SessionModelingBooleanFacePropertiesInheritance` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ConvertAnalyticToConvergentAngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance for converting analytic body to Convergent body 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertAnalyticToConvergentAngularTolerance`` 
    
    :returns:  angular tolerance for converting analytic body to Convergent body  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartModeling.ConvertAnalyticToConvergentAngularTolerance` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertAnalyticToConvergentAngularTolerance`` 
    
    :param dAnalyticToConvergentAngTol:  angular tolerance for converting analytic body to Convergent body  
    :type dAnalyticToConvergentAngTol: float 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartModeling.ConvertAnalyticToConvergentAngularTolerance` instead.
    
    License requirements: None.
    """
    ConvertAnalyticToConvergentDistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance for converting analytic body to Convergent body 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertAnalyticToConvergentDistanceTolerance`` 
    
    :returns:  distance tolerance for converting analytic body to Convergent body  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartModeling.ConvertAnalyticToConvergentDistanceTolerance` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertAnalyticToConvergentDistanceTolerance`` 
    
    :param dAnalyticToConvergentDistTol:  distance tolerance for converting analytic body to Convergent body  
    :type dAnalyticToConvergentDistTol: float 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartModeling.ConvertAnalyticToConvergentDistanceTolerance` instead.
    
    License requirements: None.
    """
    CurvatureColor: int = ...
    """
    Returns or sets  the curvature color 
    
    <hr>
    
    Getter Method
    
    Signature ``CurvatureColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurvatureColor`` 
    
    :param curvatureColor: 
    :type curvatureColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    CurveFitMethod: SessionModelingCurveFitMethodType = ...
    """
    Returns or sets  the curve fit method.  
    
    Controls the fitting method used when curves must be approximated by splines. 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveFitMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingCurveFitMethodType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveFitMethod`` 
    
    :param bodyType: 
    :type bodyType: :py:class:`NXOpen.Preferences.SessionModelingCurveFitMethodType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DeleteChildFeaturesOption: SessionModelingDeleteChildFeaturesOptionType = ...
    """
    Returns or sets  the delete child features options   
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteChildFeaturesOption`` 
    
    :returns:  delete child features option  
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingDeleteChildFeaturesOptionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteChildFeaturesOption`` 
    
    :param deleteChildFeatureOption:  delete child features option  
    :type deleteChildFeatureOption: :py:class:`NXOpen.Preferences.SessionModelingDeleteChildFeaturesOptionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DisplayLegacyFeatureName: bool = ...
    """
    Returns or sets  the toggle "Display Legacy Feature names" gives choice, how user wants feature name in "Name" Coulmn in Partnav
    checked toggled(True) will show old feature names in "Name" column in Partnav, while
    unchecked toggled(False) will show new translatable feature names in "Name" column in Partnav
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayLegacyFeatureName`` 
    
    :returns:  preference to display_legacy_feature_name  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayLegacyFeatureName`` 
    
    :param displayLegacyFeatureName:  preference to display_legacy_feature_name  
    :type displayLegacyFeatureName: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DynamicUpdate: SessionModelingDynamicUpdateType = ...
    """
    Returns or sets  the dynamic update.  
    
    Specifies that the system dynamically displays in real time with each 
    updation of parent curves, splines, bridge curves, lines or arcs 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicUpdate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingDynamicUpdateType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicUpdate`` 
    
    :param dynamicUpdate: 
    :type dynamicUpdate: :py:class:`NXOpen.Preferences.SessionModelingDynamicUpdateType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    EditWithRollbackUponDoubleClick: bool = ...
    """
    Returns or sets  the option "Edit with Rollback upon Double-Click" gives choice of what action to 
    be taken on feature upon Double clicking, either in partnavigator or in Graphics widow.  
    
    if the option is true then edit with rollback will be happen upon Double-click.
    if the option is false then the previous default action will be executed 
    
    <hr>
    
    Getter Method
    
    Signature ``EditWithRollbackUponDoubleClick`` 
    
    :returns:  preference to Edit with Rollback upon Double-Click  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditWithRollbackUponDoubleClick`` 
    
    :param defaultEditOption:  preference to Edit with Rollback upon Double-Click  
    :type defaultEditOption: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    EnableTrimmedAnimation: bool = ...
    """
    Returns or sets  the enable trimmed animation setting.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableTrimmedAnimation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableTrimmedAnimation`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    EndpointDisplayColor: int = ...
    """
    Returns or sets  the color for display endpoints for curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndpointDisplayColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndpointDisplayColor`` 
    
    :param endpointDisplayColor: 
    :type endpointDisplayColor: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndpointDisplayInheritColor: bool = ...
    """
    Returns or sets  the endpoint color inherit option, for display with curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndpointDisplayInheritColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndpointDisplayInheritColor`` 
    
    :param endpointDisplayInheritColor: 
    :type endpointDisplayInheritColor: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    EndpointDisplayStyle: SessionModelingEndpointDisplayStyleType = ...
    """
    Returns or sets  the style (2D disk, mark, etc.  
    
    ) of the endpoints for display of curves. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndpointDisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingEndpointDisplayStyleType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndpointDisplayStyle`` 
    
    :param endpointDisplayStyle: 
    :type endpointDisplayStyle: :py:class:`NXOpen.Preferences.SessionModelingEndpointDisplayStyleType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FreeFormConstructionResult: SessionModelingFreeFormConstructionResultType = ...
    """
    Returns or sets  the free form construction result.  
    
    Controls free form feature creation when using the Through Curves, Through 
    Curve Mesh, Swept, and Ruled options. 
    
    <hr>
    
    Getter Method
    
    Signature ``FreeFormConstructionResult`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingFreeFormConstructionResultType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FreeFormConstructionResult`` 
    
    :param freeFormConstrResult: 
    :type freeFormConstrResult: :py:class:`NXOpen.Preferences.SessionModelingFreeFormConstructionResultType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ImmediateChildren: SessionModelingImmediateChildrenType = ...
    """
    Returns or sets  the immediate children.  
    
    Specifies to which level the dynamic updation is applicable. 
    
    <hr>
    
    Getter Method
    
    Signature ``ImmediateChildren`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingImmediateChildrenType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ImmediateChildren`` 
    
    :param immediateChildren: 
    :type immediateChildren: :py:class:`NXOpen.Preferences.SessionModelingImmediateChildrenType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    InterruptUpdateOnError: bool = ...
    """
    Returns or sets  the option "Interrupt Update on Error" gives choice, whether the user 
    wants the "Edit During Update" dialog to appear when features contain 
    errors during feature update/playback.  
    
    if the option is true then the dialog will appear.
    if the option is false then dialog will not appear during feature update.
    
    <hr>
    
    Getter Method
    
    Signature ``InterruptUpdateOnError`` 
    
    :returns:  preference to Interrupt Update on Error  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterruptUpdateOnError`` 
    
    :param interruptOnError:  preference to Interrupt Update on Error  
    :type interruptOnError: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    InterruptUpdateOnMissingReferences: bool = ...
    """
    Returns or sets  the option "Interrupt Update on Missing References" gives choice, whether the
    user wants the "Edit During Update" dialog to appear when features contain 
    missing references during feature update/playback.  
    
    if the option is true then the dialog will appear.
    if the option is false then dialog will not appear during feature update.
    
    <hr>
    
    Getter Method
    
    Signature ``InterruptUpdateOnMissingReferences`` 
    
    :returns:  preference to Interrupt Update on Missing References  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterruptUpdateOnMissingReferences`` 
    
    :param interruptOnMissingReferences:  preference to Interrupt Update on Missing References  
    :type interruptOnMissingReferences: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InterruptUpdateOnWarning: bool = ...
    """
    Returns or sets  the option "Interrupt Update on Warning" gives choice, whether the
    user wants the "Edit During Update" dialog to appear when features contain 
    warnings during feature update/playback.  
    
    if the option is true then the dialog will appear.
    if the option is false then dialog will not appear during feature update.
    
    <hr>
    
    Getter Method
    
    Signature ``InterruptUpdateOnWarning`` 
    
    :returns:  preference to Interrupt Update on Warning  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterruptUpdateOnWarning`` 
    
    :param interruptOnWarning:  preference to Interrupt Update on Warning  
    :type interruptOnWarning: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    LinkedAndExtractedGeometryProperties: SessionModelingLinkedAndExtractedGeometryPropertiesInheritance = ...
    """
    Returns or sets  the linked and extracted geometry properties inheritance.  
    
    Specifies whether linked and extracted geometry properties inherits from parent object or part default 
    
    <hr>
    
    Getter Method
    
    Signature ``LinkedAndExtractedGeometryProperties`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingLinkedAndExtractedGeometryPropertiesInheritance` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinkedAndExtractedGeometryProperties`` 
    
    :param linkedAndExtractedGeometryProperties: 
    :type linkedAndExtractedGeometryProperties: :py:class:`NXOpen.Preferences.SessionModelingLinkedAndExtractedGeometryPropertiesInheritance` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MakeCurrentOnError: bool = ...
    """
    Returns or sets  the option "Make Current on Error" gives choice, whether the user 
    wants to make error feature current when features contain 
    errors during feature update/playback.  
    
    If the option is true then the error feature will be made
    current.
    If the option is false then the error feature will not be made current feature
    during feature update.
    
    <hr>
    
    Getter Method
    
    Signature ``MakeCurrentOnError`` 
    
    :returns:  preference to Make Error Feature Current on Error  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MakeCurrentOnError`` 
    
    :param currentOnError:  preference to Make Error Feature Current on Error  
    :type currentOnError: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MakeDatumsInternal: bool = ...
    """
    Returns or sets  the option specifying whether to automatically make the datums internal during  
    the sketch creation.  
    
    If the option is true then datums are automatically made internal to child sketches, else
    datums are not automatically made internal to child sketches. 
    
    <hr>
    
    Getter Method
    
    Signature ``MakeDatumsInternal`` 
    
    :returns:  Flag indicating whether to make datums internal  
    :rtype: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MakeDatumsInternal`` 
    
    :param makeDatumsInternal:  Flag indicating whether to make datums internal  
    :type makeDatumsInternal: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    MakeSketchesInternal: bool = ...
    """
    Returns or sets  the option specifying whether to automatically make sketch internal during  
    feature creation.  
    
    If the option is true then external sketches are automatically made internal to child features, else
    external sketches are not automatically made internal to child features. 
    
    <hr>
    
    Getter Method
    
    Signature ``MakeSketchesInternal`` 
    
    :returns:  Flag indicating whether to make sketches internal  
    :rtype: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MakeSketchesInternal`` 
    
    :param makeSketchesInternal:  Flag indicating whether to make sketches internal  
    :type makeSketchesInternal: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    NewFaceProperties: SessionModelingNewFacePropertiesInheritance = ...
    """
    Returns or sets  the new face properties inheritance.  
    
    Specifies whether new face properties inherits from body or part default 
    
    <hr>
    
    Getter Method
    
    Signature ``NewFaceProperties`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingNewFacePropertiesInheritance` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewFaceProperties`` 
    
    :param newFaceProperties: 
    :type newFaceProperties: :py:class:`NXOpen.Preferences.SessionModelingNewFacePropertiesInheritance` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    NotifyOnDelete: bool = ...
    """
    Returns or sets  the option " Notify on Delete " gives choice, whether the user wants a 
    notification message when a feature is being deleted will effect other features.  
    
    if the option is true then it popup a notification message.
    if the option is false then it will not popup any notification message 
    
    <hr>
    
    Getter Method
    
    Signature ``NotifyOnDelete`` 
    
    :returns:  preference to Notify on Delete  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NotifyOnDelete`` 
    
    :param notifyOnDelete:  preference to Notify on Delete  
    :type notifyOnDelete: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    PmarkFrequency: int = ...
    """
    Returns or sets  the features/mark.  
    
    Controls how often, during feature creation and editing, the system sets internal marks 
    used in updating. A Features/Mark value of 5, for example, means that one mark will be set after five features 
    are created or edited. 
    
    <hr>
    
    Getter Method
    
    Signature ``PmarkFrequency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX12.0.0
       No replacement. One pmark will be set after each feature.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmarkFrequency`` 
    
    :param pmarkFrequency: 
    :type pmarkFrequency: int 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX12.0.0
       No replacement. One pmark will be set after each feature.
    
    License requirements: None.
    """
    PoleDisplayColor: int = ...
    """
    Returns or sets  the color for display poles for B curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``PoleDisplayColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PoleDisplayColor`` 
    
    :param poleDisplayColor: 
    :type poleDisplayColor: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PoleDisplayInheritColor: bool = ...
    """
    Returns or sets  the pole color inherit option, for display with B curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``PoleDisplayInheritColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PoleDisplayInheritColor`` 
    
    :param poleDisplayInheritColor: 
    :type poleDisplayInheritColor: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PoleDisplayStyle: SessionModelingPoleDisplayStyleType = ...
    """
    Returns or sets  the style (3D ball, 2D disk, mark, etc.  
    
    ) of the poles for display of B curves. 
    
    <hr>
    
    Getter Method
    
    Signature ``PoleDisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingPoleDisplayStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PoleDisplayStyle`` 
    
    :param poleDisplayStyle: 
    :type poleDisplayStyle: :py:class:`NXOpen.Preferences.SessionModelingPoleDisplayStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PoleEditColor: int = ...
    """
    Returns or sets  the color for editing poles for B curves and B surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``PoleEditColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PoleEditColor`` 
    
    :param poleEditColor: 
    :type poleEditColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PoleEditInheritColor: bool = ...
    """
    Returns or sets  the pole color inherit option, for editing B curves and B surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``PoleEditInheritColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PoleEditInheritColor`` 
    
    :param poleEditInheritColor: 
    :type poleEditInheritColor: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PoleEditStyle: SessionModelingPoleEditStyleType = ...
    """
    Returns or sets  the style (3D ball, 2D disk, mark, etc.  
    
    ) of the poles for editing B curves and B surfaces. 
    
    <hr>
    
    Getter Method
    
    Signature ``PoleEditStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingPoleEditStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PoleEditStyle`` 
    
    :param poleEditStyle: 
    :type poleEditStyle: :py:class:`NXOpen.Preferences.SessionModelingPoleEditStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PolylineDisplayColor: int = ...
    """
    Returns or sets  the color for display polylines for B curves and B surfaces 
    
    <hr>
    
    Getter Method
    
    Signature ``PolylineDisplayColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolylineDisplayColor`` 
    
    :param polylineDisplayColor: 
    :type polylineDisplayColor: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PolylineDisplayInheritColor: bool = ...
    """
    Returns or sets  the polyline color inherit option, for display with B curves and B surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``PolylineDisplayInheritColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolylineDisplayInheritColor`` 
    
    :param polylineDisplayInheritColor: 
    :type polylineDisplayInheritColor: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PolylineDisplayStyle: SessionModelingPolylineStyleType = ...
    """
    Returns or sets  the style (solid, dashed, etc.  
    
    ) of the polylines display for B curves and B surfaces. 
    
    <hr>
    
    Getter Method
    
    Signature ``PolylineDisplayStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingPolylineStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolylineDisplayStyle`` 
    
    :param polylineDisplayStyle: 
    :type polylineDisplayStyle: :py:class:`NXOpen.Preferences.SessionModelingPolylineStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PolylineEditColor: int = ...
    """
    Returns or sets  the color for editing polylines for B curves and B surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``PolylineEditColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolylineEditColor`` 
    
    :param polylineEditColor: 
    :type polylineEditColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PolylineEditInheritColor: bool = ...
    """
    Returns or sets  the polyline color inherit option, for editing B curves and B surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``PolylineEditInheritColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolylineEditInheritColor`` 
    
    :param polylineEditInheritColor: 
    :type polylineEditInheritColor: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PolylineEditStyle: SessionModelingPolylineStyleType = ...
    """
    Returns or sets  the style (solid, dashed, etc.  
    
    ) of the polylines for editing B curves and B surfaces. 
    
    <hr>
    
    Getter Method
    
    Signature ``PolylineEditStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingPolylineStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolylineEditStyle`` 
    
    :param polylineEditStyle: 
    :type polylineEditStyle: :py:class:`NXOpen.Preferences.SessionModelingPolylineStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PositionColor: int = ...
    """
    Returns or sets  the position color 
    
    <hr>
    
    Getter Method
    
    Signature ``PositionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionColor`` 
    
    :param positionColor: 
    :type positionColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PreviewResolution: SessionModelingPreviewResolutionType = ...
    """
    Returns or sets  the preview resolution setting.  
    
    <hr>
    
    Getter Method
    
    Signature ``PreviewResolution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingPreviewResolutionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreviewResolution`` 
    
    :param resolution: 
    :type resolution: :py:class:`NXOpen.Preferences.SessionModelingPreviewResolutionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SaveDataForFeatureEdit: SessionModelingSaveDataForFeatureEditOption = ...
    """
    Returns or sets  the option "Save Data for Feature Edit" specifies what additional data will 
    be saved in the part to enhance feature edit.  
    
    Rollback data improves feature 
    edit performance. Previous state data is a copy of a face or body input to a 
    feature for visual reference while editing a failed feature. 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveDataForFeatureEdit`` 
    
    :returns:  preference to save data for feature edit  
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingSaveDataForFeatureEditOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveDataForFeatureEdit`` 
    
    :param saveDataForFeatureEdit:  preference to save data for feature edit  
    :type saveDataForFeatureEdit: :py:class:`NXOpen.Preferences.SessionModelingSaveDataForFeatureEditOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SaveRollbackData: bool = ...
    """
    Returns or sets  the option " Save Rollback Data " saves extra data with the part file 
    for faster edits.  
    
    This option has been deprecated. Use "Save Data for Feature Edit" instead
    of it. 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveRollbackData`` 
    
    :returns:  preference to retain rollback data  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Preferences.SessionModeling.SaveDataForFeatureEdit` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveRollbackData`` 
    
    :param retainRollbackData:  preference to retain rollback data  
    :type retainRollbackData: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Preferences.SessionModeling.SetSaveDataForFeatureEdit` instead.
    
    License requirements: None.
    """
    ShareGeometriesOption: SessionModelingShareGeometriesOnSaveType = ...
    """
    Returns or sets  the option " Share Geometry on Save " gives choice of whether to share geometries among Parasolid solid entities on save or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShareGeometriesOption`` 
    
    :returns:  preference to share geometries on save  
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingShareGeometriesOnSaveType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShareGeometriesOption`` 
    
    :param shareGeometryOnSave:  preference to share geometries on save  
    :type shareGeometryOnSave: :py:class:`NXOpen.Preferences.SessionModelingShareGeometriesOnSaveType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ShowSimuationUiInModeling: bool = ...
    """
    Returns or sets  the option to specify whether simulation specific UI should show up in modeling 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSimuationUiInModeling`` 
    
    :returns:  allow simulation specific UI in modeling  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSimuationUiInModeling`` 
    
    :param showSimuationUiInModeling:  allow simulation specific UI in modeling  
    :type showSimuationUiInModeling: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SketchDefaultAction: SessionModelingSketchDefaultActionType = ...
    """
    Returns or sets  the sketch default action 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchDefaultAction`` 
    
    :returns:  default action on sketches  
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingSketchDefaultActionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SketchDefaultAction`` 
    
    :param sketchAction:  default action on sketches  
    :type sketchAction: :py:class:`NXOpen.Preferences.SessionModelingSketchDefaultActionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SketchEditOption: SessionModelingSketchEditType = ...
    """
    Returns or sets  the option that determines whether or not task environment is used to edit the sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchEditOption`` 
    
    :returns:  edit option on sketches  
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingSketchEditType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SketchEditOption`` 
    
    :param sketchEditOption:  edit option on sketches  
    :type sketchEditOption: :py:class:`NXOpen.Preferences.SessionModelingSketchEditType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SplineDefaultActionType: SessionModelingSplineDefaultActionTypes = ...
    """
    Returns or sets  the value indicating the default action for a spline.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplineDefaultActionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingSplineDefaultActionTypes` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SplineDefaultActionType`` 
    
    :param action: 
    :type action: :py:class:`NXOpen.Preferences.SessionModelingSplineDefaultActionTypes` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    SurfaceExtension: SessionModelingSurfaceExtensionOption = ...
    """
    Returns or sets  the surface extension option.  
    
    Controls how surfaces will be extended while moving geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceExtension`` 
    
    :returns:  Surface extension option  
    :rtype: :py:class:`NXOpen.Preferences.SessionModelingSurfaceExtensionOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceExtension`` 
    
    :param surfaceExtensionOption:  Surface extension option  
    :type surfaceExtensionOption: :py:class:`NXOpen.Preferences.SessionModelingSurfaceExtensionOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TangentColor: int = ...
    """
    Returns or sets  the tangent color 
    
    <hr>
    
    Getter Method
    
    Signature ``TangentColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TangentColor`` 
    
    :param tangentColor: 
    :type tangentColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    TreatOneDegreeBsplineAsPolyline: bool = ...
    """
    Returns or sets  the option to treat single degree bspline as polyline 
    
    <hr>
    
    Getter Method
    
    Signature ``TreatOneDegreeBsplineAsPolyline`` 
    
    :returns:  Flag if set to true will allow treatment of single degree bspline as polyline  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TreatOneDegreeBsplineAsPolyline`` 
    
    :param preference:  Flag if set to true will allow treatment of single degree bspline as polyline  
    :type preference: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    UpdateDelayed: bool = ...
    """
    Returns or sets  the update delayed option.  
    
    If the option is true, then an edited
    feature does not update until :py:meth:`NXOpen.Update.DoUpdate` is
    explicitly called.  If the option is false, then the edited feature
    updates immediately.  The default is false. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateDelayed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT")
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateDelayed`` 
    
    :param option: 
    :type option: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT")
    """
    UpdateFailureReportPreference: bool = ...
    """
    Returns or sets  the option "Update Failure Report" gives choice, whether the
    user wants the update failure report to be generated for the features that 
    failed during current update cycle.  
    
    If the option is true then the update failure report will be launched at the end
    of every update cycle. It will list only those features that failed in that update 
    cycle. If the option is false then no such report will be launched.
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateFailureReportPreference`` 
    
    :returns:  update failure report preference  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateFailureReportPreference`` 
    
    :param updateFailureReport:  update failure report preference  
    :type updateFailureReport: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    UpdatePending: bool = ...
    """
    Returns or sets  the update pending option.  
    
    If the option only works when update delayed option is true, 
    if the option is true, there is an edited feature to be updated till :py:meth:`NXOpen.Update.DoUpdate` is
    explicitly called.  If the option is false, there is not an edited feature to be updated. The default is false. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdatePending`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT")
    
    <hr>
    
    Setter Method
    
    Signature ``UpdatePending`` 
    
    :param option: 
    :type option: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT")
    """
    UseTriangularMesh: bool = ...
    """
    Returns or sets  the use triangular mesh setting setting.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseTriangularMesh`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseTriangularMesh`` 
    
    :param use: 
    :type use: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class PartSheetmetalFlatPatternCalloutTypeDisplay_Struct():
    """
    The members of the following structure are the display data for a
    callout in a flat pattern drawing member view.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartSheetmetal.FlatPatternCalloutTypeDisplay()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Type: str = ...
    """
    The name of the callout type.  
    
    The string is one returned by the 
    get_callout_data method, or can
    be hand-coded as the application name 'dot' the callout
    name, like this:
    "FlatPatternView.BendRadius". Neither name is
    case sensitive and blanks are not significant. This type
    of hand-coded callout type is usable as long as the
    callout type name is unique within the application name. 
    Beware of changing the defaults and loading old parts. 
    <hr>
    
    Field Value
    Type:str
    """
    IsEnabled: int = ...
    """
    Enabled status for the callout type.  
    
    <hr>
    
    Field Value
    Type:int
    """
    Name: str = ...
    """
    dialog name for the callout type.  
    
    <hr>
    
    Field Value
    Type:str
    """


class PartVisualizationVisual():
    """
    Represents the set of visualization preferences applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    UpdateHiddenEdge: bool = ...
    """
    Returns or sets  the update hidden edges flag for working part.  
    
    Controls whether or not hidden edges are updated 
    whenever a solid body is edited. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateHiddenEdge`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateHiddenEdge`` 
    
    :param updateHiddenEdge: 
    :type updateHiddenEdge: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class WorkPlaneGridSize_Struct():
    """
    Grid size parameters .  
    
    Constructor: 
    NXOpen.Preferences.WorkPlane.GridSize()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    MajorGridSpacing: float = ...
    """
    Distance between major grid lines 
    <hr>
    
    Field Value
    Type:float
    """
    MinorLinesPerMajor: int = ...
    """
    Number of minor lines between major grid lines 
    <hr>
    
    Field Value
    Type:int
    """
    SnapPointsPerMinor: int = ...
    """
    Number of snap points between minor grid lines 
    <hr>
    
    Field Value
    Type:int
    """


class ShadingRenderingStyleOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShadingRenderingStyleOption():
    """
    Represents the rendering style options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FullyShaded", "Fully shaded"
       "PartiallyShaded", "Partially Shaded"
       "Wireframe", "Wireframe"
    """
    FullyShaded = 0  # ShadingRenderingStyleOptionMemberType
    PartiallyShaded = 1  # ShadingRenderingStyleOptionMemberType
    Wireframe = 2  # ShadingRenderingStyleOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionPmi():
    """
    Represents the set of PMI preferences applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX4.0.0
    """
    
    def UpdateTrackingPropertiesFromXml(self) -> None:
        """
        Update tracking properties
        
        Signature ``UpdateTrackingPropertiesFromXml()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    AssocHighlightColor: int = ...
    """
    Returns or sets  the associated highlight color 
    
    <hr>
    
    Getter Method
    
    Signature ``AssocHighlightColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssocHighlightColor`` 
    
    :param assocHighlightColor: 
    :type assocHighlightColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ReadingDirection: bool = ...
    """
    Returns or sets  the reading direction preference 
    
    <hr>
    
    Getter Method
    
    Signature ``ReadingDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReadingDirection`` 
    
    :param readingDirection: 
    :type readingDirection: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class SessionVisualizationPerformance():
    """
    Represents visualization performance preferences that are applicable
    to the entire session.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX11.0.0
    """
    RenderSolidsUsingStoredFacets: bool = ...
    """
    Returns or sets  the rendering of solids using stored facets during interactive mode.  
    
    When a solid is rendered in non-lightweight mode, this
    preference can be enabled to use facets stored in the part if 
    valid facets exist for the solid, even if those facets do not meet
    the current rendering parameters. This improves performance of 
    certain shaded displays by avoiding need to tessellate the solid, 
    though the visual quality may be impacted. E.g. when this preference 
    is enabled, smooth edge settings (e.g. see use of 
    :py:class:`NXOpen.Preferences.ViewVisualizationVisualSmoothEdgeWidth`)
    are implicitly ignored to improve the performance.
    
    This setting is ignored by :py:meth:`NXOpen.ViewCollection.UpdateDisplay`.
    
    The display is not immediately regenerated when this setting is changed.
    Use :py:meth:`NXOpen.ViewCollection.Regenerate` to update display.
    
    <hr>
    
    Getter Method
    
    Signature ``RenderSolidsUsingStoredFacets`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderSolidsUsingStoredFacets`` 
    
    :param useStoredFacets: 
    :type useStoredFacets: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """


class SubdivisionModelingPreferencesVertexStyleTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubdivisionModelingPreferencesVertexStyleTypes():
    """
    Vertex display style. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Square", " - "
       "Triangle", " - "
       "Circle", " - "
       "Plus", " - "
       "Cross", " - "
    """
    Square = 0  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
    Triangle = 1  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
    Circle = 2  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
    Plus = 3  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
    Cross = 4  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubdivisionModelingPreferencesVertexSizeTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubdivisionModelingPreferencesVertexSizeTypes():
    """
    Vertex size type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Small", " - "
       "Medium", " - "
       "Large", " - "
    """
    Small = 0  # SubdivisionModelingPreferencesVertexSizeTypesMemberType
    Medium = 1  # SubdivisionModelingPreferencesVertexSizeTypesMemberType
    Large = 2  # SubdivisionModelingPreferencesVertexSizeTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubdivisionModelingPreferencesDisplayModesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubdivisionModelingPreferencesDisplayModes():
    """
    Display modes of subdivision cage and resulting body. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CageAndBody", "Display both cage and body"
       "CageOnly", "Display cage only"
       "BodyOnly", "Display body only"
    """
    CageAndBody = 0  # SubdivisionModelingPreferencesDisplayModesMemberType
    CageOnly = 1  # SubdivisionModelingPreferencesDisplayModesMemberType
    BodyOnly = 2  # SubdivisionModelingPreferencesDisplayModesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubdivisionModelingPreferencesCagePolylineVertexStyles():
    """
    Cage polyline vertex style. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Square", " - "
       "Triangle", " - "
       "Circle", " - "
       "Plus", " - "
       "Cross", " - "
    """
    NotSet = 0  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
    Square = 1  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
    Triangle = 2  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
    Circle = 3  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
    Plus = 4  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
    Cross = 5  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubdivisionModelingPreferencesCagePolylineVertexSizesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubdivisionModelingPreferencesCagePolylineVertexSizes():
    """
    Cage polyline vertex size type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Small", " - "
       "Medium", " - "
       "Large", " - "
    """
    Small = 0  # SubdivisionModelingPreferencesCagePolylineVertexSizesMemberType
    Medium = 1  # SubdivisionModelingPreferencesCagePolylineVertexSizesMemberType
    Large = 2  # SubdivisionModelingPreferencesCagePolylineVertexSizesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubdivisionModelingPreferences():
    """
    Represents the set of Modeling preferences applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX9.0.0
    """
    
    class VertexStyleTypes():
        """
        Vertex display style. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Square", " - "
           "Triangle", " - "
           "Circle", " - "
           "Plus", " - "
           "Cross", " - "
        """
        Square = 0  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
        Triangle = 1  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
        Circle = 2  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
        Plus = 3  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
        Cross = 4  # SubdivisionModelingPreferencesVertexStyleTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VertexSizeTypes():
        """
        Vertex size type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Small", " - "
           "Medium", " - "
           "Large", " - "
        """
        Small = 0  # SubdivisionModelingPreferencesVertexSizeTypesMemberType
        Medium = 1  # SubdivisionModelingPreferencesVertexSizeTypesMemberType
        Large = 2  # SubdivisionModelingPreferencesVertexSizeTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DisplayModes():
        """
        Display modes of subdivision cage and resulting body. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CageAndBody", "Display both cage and body"
           "CageOnly", "Display cage only"
           "BodyOnly", "Display body only"
        """
        CageAndBody = 0  # SubdivisionModelingPreferencesDisplayModesMemberType
        CageOnly = 1  # SubdivisionModelingPreferencesDisplayModesMemberType
        BodyOnly = 2  # SubdivisionModelingPreferencesDisplayModesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CagePolylineVertexStyles():
        """
        Cage polyline vertex style. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Square", " - "
           "Triangle", " - "
           "Circle", " - "
           "Plus", " - "
           "Cross", " - "
        """
        NotSet = 0  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
        Square = 1  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
        Triangle = 2  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
        Circle = 3  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
        Plus = 4  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
        Cross = 5  # SubdivisionModelingPreferencesCagePolylineVertexStylesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CagePolylineVertexSizes():
        """
        Cage polyline vertex size type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Small", " - "
           "Medium", " - "
           "Large", " - "
        """
        Small = 0  # SubdivisionModelingPreferencesCagePolylineVertexSizesMemberType
        Medium = 1  # SubdivisionModelingPreferencesCagePolylineVertexSizesMemberType
        Large = 2  # SubdivisionModelingPreferencesCagePolylineVertexSizesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CagePolylineColor: int = ...
    """
    Returns or sets  the cage polyline color.  
    
    <hr>
    
    Getter Method
    
    Signature ``CagePolylineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CagePolylineColor`` 
    
    :param lineColor: 
    :type lineColor: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    CagePolylineFont: int = ...
    """
    Returns or sets  the cage polyline font.  
    
    <hr>
    
    Getter Method
    
    Signature ``CagePolylineFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CagePolylineFont`` 
    
    :param lineFont: 
    :type lineFont: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    CagePolylineVertexColor: int = ...
    """
    Returns or sets  the cage polyline vertex color.  
    
    <hr>
    
    Getter Method
    
    Signature ``CagePolylineVertexColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CagePolylineVertexColor`` 
    
    :param vertexColor: 
    :type vertexColor: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    CagePolylineVertexSize: SubdivisionModelingPreferencesCagePolylineVertexSizes = ...
    """
    Returns or sets  the cage polyline vertex size.  
    
    <hr>
    
    Getter Method
    
    Signature ``CagePolylineVertexSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesCagePolylineVertexSizes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CagePolylineVertexSize`` 
    
    :param vertexSize: 
    :type vertexSize: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesCagePolylineVertexSizes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    CagePolylineVertexStyle: SubdivisionModelingPreferencesCagePolylineVertexStyles = ...
    """
    Returns or sets  the cage polyline vertex style.  
    
    <hr>
    
    Getter Method
    
    Signature ``CagePolylineVertexStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesCagePolylineVertexStyles` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CagePolylineVertexStyle`` 
    
    :param vertexStyle: 
    :type vertexStyle: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesCagePolylineVertexStyles` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    CagePolylineWidth: int = ...
    """
    Returns or sets  the cage polyline width.  
    
    <hr>
    
    Getter Method
    
    Signature ``CagePolylineWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CagePolylineWidth`` 
    
    :param lineWidth: 
    :type lineWidth: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    CanAllowBackSideSelection: bool = ...
    """
    Returns or sets  the flag indicating if the hidden topology selection is allowed or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CanAllowBackSideSelection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CanAllowBackSideSelection`` 
    
    :param allow: 
    :type allow: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    CanShowWeight: bool = ...
    """
    Returns or sets  the flag indicating if the edge weights are displayed or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CanShowWeight`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CanShowWeight`` 
    
    :param showWeight: 
    :type showWeight: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    ConstraintColor: int = ...
    """
    Returns or sets  the constrained entity color.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstraintColor`` 
    
    :param color: 
    :type color: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    DisplayMode: SubdivisionModelingPreferencesDisplayModes = ...
    """
    Returns or sets  the mesh and solid body display option 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesDisplayModes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayMode`` 
    
    :param displayOption: 
    :type displayOption: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesDisplayModes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    HighlightFaceTranslucency: int = ...
    """
    Returns or sets  the percentage translucency of the highlighted face.  
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightFaceTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightFaceTranslucency`` 
    
    :param highlightLineTranslucency: 
    :type highlightLineTranslucency: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    IsXRayCage: bool = ...
    """
    Returns or sets  the flag indicating if the hidden edge of the cage are visible or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsXRayCage`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsXRayCage`` 
    
    :param isXRayCage: 
    :type isXRayCage: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    LineColor: int = ...
    """
    Returns or sets  the line color.  
    
    <hr>
    
    Getter Method
    
    Signature ``LineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineColor`` 
    
    :param lineColor: 
    :type lineColor: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    LineFont: int = ...
    """
    Returns or sets  the smooth edge line font.  
    
    <hr>
    
    Getter Method
    
    Signature ``LineFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineFont`` 
    
    :param lineFont: 
    :type lineFont: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    LineWidth: int = ...
    """
    Returns or sets  the line width.  
    
    <hr>
    
    Getter Method
    
    Signature ``LineWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineWidth`` 
    
    :param lineWidth: 
    :type lineWidth: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    SharpEdgeLineFont: int = ...
    """
    Returns or sets  the sharp edge line font.  
    
    <hr>
    
    Getter Method
    
    Signature ``SharpEdgeLineFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SharpEdgeLineFont`` 
    
    :param lineFont: 
    :type lineFont: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    VertexColor: int = ...
    """
    Returns or sets  the vertex color.  
    
    <hr>
    
    Getter Method
    
    Signature ``VertexColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VertexColor`` 
    
    :param vertexColor: 
    :type vertexColor: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    VertexSize: SubdivisionModelingPreferencesVertexSizeTypes = ...
    """
    Returns or sets  the vertex size.  
    
    <hr>
    
    Getter Method
    
    Signature ``VertexSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesVertexSizeTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VertexSize`` 
    
    :param vertexSize: 
    :type vertexSize: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesVertexSizeTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    VertexStyle: SubdivisionModelingPreferencesVertexStyleTypes = ...
    """
    Returns or sets  the vertex style.  
    
    <hr>
    
    Getter Method
    
    Signature ``VertexStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesVertexStyleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VertexStyle`` 
    
    :param vertexStyle: 
    :type vertexStyle: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferencesVertexStyleTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """


class RoutingStockStockModeFlagMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingStockStockModeFlag():
    """
    Describes the valid value for stock mode.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LegacyStock", "solid body in the work part, no component"
       "StockAsComponent", "component created with solid body in the component"
    """
    LegacyStock = 0  # RoutingStockStockModeFlagMemberType
    StockAsComponent = 1  # RoutingStockStockModeFlagMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingStockSpaceReservationModeFlagMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingStockSpaceReservationModeFlag():
    """
    Describes the valid value for space reservation mode.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LegacySpaceReservation", "solid body in the work part, no component"
       "SpaceReservationAsComponent", "component created with solid body in the component"
    """
    LegacySpaceReservation = 0  # RoutingStockSpaceReservationModeFlagMemberType
    SpaceReservationAsComponent = 1  # RoutingStockSpaceReservationModeFlagMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingStock():
    """
    The Preferences for Routing Stock objects.  
    
    These correspond to
    the values represented on the Preferences->Routing dialog, Stock
    property page. 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX4.0.0
    """
    
    class StockModeFlag():
        """
        Describes the valid value for stock mode.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LegacyStock", "solid body in the work part, no component"
           "StockAsComponent", "component created with solid body in the component"
        """
        LegacyStock = 0  # RoutingStockStockModeFlagMemberType
        StockAsComponent = 1  # RoutingStockStockModeFlagMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SpaceReservationModeFlag():
        """
        Describes the valid value for space reservation mode.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LegacySpaceReservation", "solid body in the work part, no component"
           "SpaceReservationAsComponent", "component created with solid body in the component"
        """
        LegacySpaceReservation = 0  # RoutingStockSpaceReservationModeFlagMemberType
        SpaceReservationAsComponent = 1  # RoutingStockSpaceReservationModeFlagMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetDefaultStock(self, stockPart: NXOpen.Routing.CharacteristicList, dataCharx: NXOpen.Routing.CharacteristicList) -> None:
        """
        Sets the current default stock to assign when creating paths.  
        
        Signature ``SetDefaultStock(stockPart, dataCharx)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDefaultStock(self) -> tuple:
        """
        Returns the current default stock to assign when creating paths.  
        
        Signature ``GetDefaultStock()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (stockPart, dataCharx). stockPart is a :py:class:`NXOpen.Routing.CharacteristicList`.   Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`. dataCharx is a :py:class:`NXOpen.Routing.CharacteristicList`.   The list of optional and required characteristics to apply to the new stock. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPreferredFillerStock(self, stockPart: NXOpen.Routing.CharacteristicList, dataCharx: NXOpen.Routing.CharacteristicList) -> None:
        """
        Sets the preferred stock for creating filler stock 
        
        Signature ``SetPreferredFillerStock(stockPart, dataCharx)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPreferredFillerStock(self) -> tuple:
        """
        Returns the preferred for creating filler stock.  
        
        Signature ``GetPreferredFillerStock()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (stockPart, dataCharx). stockPart is a :py:class:`NXOpen.Routing.CharacteristicList`.   Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`. dataCharx is a :py:class:`NXOpen.Routing.CharacteristicList`.   The list of optional and required characteristics to apply to the new stock. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPreferredSpaceReservation(self, stockPart: NXOpen.Routing.CharacteristicList, dataCharx: NXOpen.Routing.CharacteristicList) -> None:
        """
        Sets the preferred stock for creating space Reservation 
        
        Signature ``SetPreferredSpaceReservation(stockPart, dataCharx)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPreferredSpaceReservation(self) -> tuple:
        """
        Returns the preferred stock for creating space reservation  
        
        Signature ``GetPreferredSpaceReservation()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (stockPart, dataCharx). stockPart is a :py:class:`NXOpen.Routing.CharacteristicList`.   Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`. dataCharx is a :py:class:`NXOpen.Routing.CharacteristicList`.   The list of optional and required characteristics to apply to the new stock. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPreferredOverstock(self, stockPart: NXOpen.Routing.CharacteristicList, dataCharx: NXOpen.Routing.CharacteristicList) -> None:
        """
        Sets the preferred stock for creating overstock 
        
        Signature ``SetPreferredOverstock(stockPart, dataCharx)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPreferredOverstock(self) -> tuple:
        """
        Returns the preferred stock for creating overstock.  
        
        Signature ``GetPreferredOverstock()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (stockPart, dataCharx). stockPart is a :py:class:`NXOpen.Routing.CharacteristicList`.   Characteristic list used to find the appropriate               :py:class:`NXOpen.Routing.StockData` for building the stock.                See :py:meth:`Routing.StockDataCollection.CreateStockData`. dataCharx is a :py:class:`NXOpen.Routing.CharacteristicList`.   The list of optional and required characteristics to apply to the new stock. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    CurrentTile: str = ...
    """
    Returns or sets  the current routing level/tile 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentTile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentTile`` 
    
    :param tile: 
    :type tile: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    DefaultStockStyle: NXOpen.Routing.StockStyle = ...
    """
    Returns or sets  the default stock style 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultStockStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultStockStyle`` 
    
    :param defaultStockStyle: 
    :type defaultStockStyle: :py:class:`NXOpen.Routing.StockStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    DeleteOverstock: bool = ...
    """
    Returns or sets  the delete overstock flag during deletion of last stock covered by
    the overstock 
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteOverstock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteOverstock`` 
    
    :param deleteOverstock: 
    :type deleteOverstock: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SpaceReservationMode: RoutingStockSpaceReservationModeFlag = ...
    """
    Returns or sets  the space reservation creation mode 
    
    <hr>
    
    Getter Method
    
    Signature ``SpaceReservationMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingStockSpaceReservationModeFlag` 
    
    .. versionadded:: NX7.5.2
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SpaceReservationMode`` 
    
    :param spaceReservationMode: 
    :type spaceReservationMode: :py:class:`NXOpen.Preferences.RoutingStockSpaceReservationModeFlag` 
    
    .. versionadded:: NX7.5.2
    
    License requirements: routing_base ("Routing Basic")
    """
    SpaceReservationTranslucency: int = ...
    """
    Returns or sets  the desired translucnecy of the newly created Space Reservation Stock 
    
    <hr>
    
    Getter Method
    
    Signature ``SpaceReservationTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SpaceReservationTranslucency`` 
    
    :param spaceReservationTranslucency: 
    :type spaceReservationTranslucency: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockAnchor: str = ...
    """
    Returns or sets  the :py:class:`NXOpen.Routing.Anchor` name associated with the stock preferences.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockAnchor`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockAnchor`` 
    
    :param anchorName: 
    :type anchorName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockFolder: str = ...
    """
    Returns or sets  the default folder for stock components 
    
    <hr>
    
    Getter Method
    
    Signature ``StockFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockFolder`` 
    
    :param stockFolder: 
    :type stockFolder: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockMode: RoutingStockStockModeFlag = ...
    """
    Returns or sets  the stock creation mode 
    
    <hr>
    
    Getter Method
    
    Signature ``StockMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingStockStockModeFlag` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockMode`` 
    
    :param stockMode: 
    :type stockMode: :py:class:`NXOpen.Preferences.RoutingStockStockModeFlag` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """


class AnnotationPreferences():
    """
    Represents the global preferences for annotations   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Annotations.AnnotationManager`
    
    .. versionadded:: NX3.0.0
    """
    
    def GetLetteringPreferences(self) -> NXOpen.Annotations.LetteringPreferences:
        """
        Returns the global lettering preferences for the part  
        
        Signature ``GetLetteringPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLineAndArrowPreferences(self) -> NXOpen.Annotations.LineAndArrowPreferences:
        """
        Returns the global line and arrow preferences for the part  
        
        Signature ``GetLineAndArrowPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSymbolPreferences(self) -> NXOpen.Annotations.SymbolPreferences:
        """
        Returns the global symbol preferences for the part  
        
        Signature ``GetSymbolPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.SymbolPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDimensionPreferences(self) -> NXOpen.Annotations.DimensionPreferences:
        """
        Returns the global dimension preferences for the part  
        
        Signature ``GetDimensionPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.DimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAngularTolerances(self) -> NXOpen.Annotations.AngularTolerance:
        """
        Returns the global angular tolerances for the part  
        
        Signature ``GetAngularTolerances()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.AngularTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLinearTolerances(self) -> NXOpen.Annotations.LinearTolerance:
        """
        Returns the global linear tolerances for the part  
        
        Signature ``GetLinearTolerances()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPmiPreferences(self) -> NXOpen.Annotations.PmiPreferences:
        """
        Returns the global PMI preferences for the part  
        
        Signature ``GetPmiPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.PmiPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNxFontCharacterSpaceFactor(self) -> NXOpen.Annotations.CharacterSpaceFactor:
        """
        Returns the NX font text space factor for each text type (dimension,general,appended,tolerance) for the part  
        
        Signature ``GetNxFontCharacterSpaceFactor()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.CharacterSpaceFactor` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetStandardFontCharacterSpaceFactor(self) -> NXOpen.Annotations.CharacterSpaceFactor:
        """
        Returns the standard font text space factor for each text type (dimension,general,appended,tolerance) for the part  
        
        Signature ``GetStandardFontCharacterSpaceFactor()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.CharacterSpaceFactor` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFrameBarPreferences(self) -> NXOpen.Annotations.FrameBarPreferences:
        """
        Returns the global frame bar preferences for the part  
        
        Signature ``GetFrameBarPreferences()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Annotations.FrameBarPreferences` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLetteringPreferences(self, letteringPrefs: NXOpen.Annotations.LetteringPreferences) -> None:
        """
        Sets the global lettering preferences for the part 
        
        Signature ``SetLetteringPreferences(letteringPrefs)`` 
        
        :param letteringPrefs: 
        :type letteringPrefs: :py:class:`NXOpen.Annotations.LetteringPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetLineAndArrowPreferences(self, prefs: NXOpen.Annotations.LineAndArrowPreferences) -> None:
        """
        Sets the global line and arrow preferences for the part 
        
        Signature ``SetLineAndArrowPreferences(prefs)`` 
        
        :param prefs: 
        :type prefs: :py:class:`NXOpen.Annotations.LineAndArrowPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetSymbolPreferences(self, prefs: NXOpen.Annotations.SymbolPreferences) -> None:
        """
        Sets the global symbol preferences for the part 
        
        Signature ``SetSymbolPreferences(prefs)`` 
        
        :param prefs: 
        :type prefs: :py:class:`NXOpen.Annotations.SymbolPreferences` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetDimensionPreferences(self, prefs: NXOpen.Annotations.DimensionPreferences) -> None:
        """
        Sets the global dimension preferences for the part 
        
        Signature ``SetDimensionPreferences(prefs)`` 
        
        :param prefs: 
        :type prefs: :py:class:`NXOpen.Annotations.DimensionPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetAngularTolerances(self, prefs: NXOpen.Annotations.AngularTolerance) -> None:
        """
        Sets the global angular tolerances for the part 
        
        Signature ``SetAngularTolerances(prefs)`` 
        
        :param prefs: 
        :type prefs: :py:class:`NXOpen.Annotations.AngularTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetLinearTolerances(self, prefs: NXOpen.Annotations.LinearTolerance) -> None:
        """
        Sets the global linear tolerances for the part 
        
        Signature ``SetLinearTolerances(prefs)`` 
        
        :param prefs: 
        :type prefs: :py:class:`NXOpen.Annotations.LinearTolerance` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetPmiPreferences(self, pmiPrefs: NXOpen.Annotations.PmiPreferences) -> None:
        """
        Sets the global PMI preferences for the part 
        
        Signature ``SetPmiPreferences(pmiPrefs)`` 
        
        :param pmiPrefs: 
        :type pmiPrefs: :py:class:`NXOpen.Annotations.PmiPreferences` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetNxFontCharacterSpaceFactor(self, nxFontCharacterSpaceFactor: NXOpen.Annotations.CharacterSpaceFactor) -> None:
        """
        Sets the NX font text space factor for each text type (dimension,general,appended,tolerance) for the part 
        
        Signature ``SetNxFontCharacterSpaceFactor(nxFontCharacterSpaceFactor)`` 
        
        :param nxFontCharacterSpaceFactor: 
        :type nxFontCharacterSpaceFactor: :py:class:`NXOpen.Annotations.CharacterSpaceFactor` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetStandardFontCharacterSpaceFactor(self, standardFontCharacterSpaceFactor: NXOpen.Annotations.CharacterSpaceFactor) -> None:
        """
        Sets the standard font text space factor for each text type (dimension,general,appended,tolerance) for the part 
        
        Signature ``SetStandardFontCharacterSpaceFactor(standardFontCharacterSpaceFactor)`` 
        
        :param standardFontCharacterSpaceFactor: 
        :type standardFontCharacterSpaceFactor: :py:class:`NXOpen.Annotations.CharacterSpaceFactor` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: geometric_tol ("GDT") OR drafting ("DRAFTING")
        """
        ...
    
    
    def SetFrameBarPreferences(self, frameBarPrefs: NXOpen.Annotations.FrameBarPreferences) -> None:
        """
        Sets the global frame bar preferences for the part 
        
        Signature ``SetFrameBarPreferences(frameBarPrefs)`` 
        
        :param frameBarPrefs: 
        :type frameBarPrefs: :py:class:`NXOpen.Annotations.FrameBarPreferences` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    


class PartObjectColorSelectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartObjectColorSelection():
    """
    Describes whether color of object is not changed or it is default color or it is defined by user 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoChange", "No Change"
       "DefaultColor", "Default Color"
       "Color", "User Defined Color"
    """
    NoChange = 0  # PartObjectColorSelectionMemberType
    DefaultColor = 1  # PartObjectColorSelectionMemberType
    Color = 2  # PartObjectColorSelectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartObjectObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartObjectObjectType():
    """
    Describes all available Types for object selection 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "General", "Default Type Value"
       "Line", "Line"
       "Arc", "Arc"
       "Conic", "Conic"
       "Spline", "Spline"
       "Solidbody", "Solid Body"
       "Sheetbody", "Sheet Body"
       "Datum", "Datum"
       "Point", "Point"
       "CoordinateSystem", "Coordinate System"
       "AllButDefault", "All But Default"
       "DatumCsys", "Datum CSYS Feature"
       "Traceline", "Traceline"
       "InfiniteLine", "Infinite Line"
       "PointCloud", "Point Cloud"
    """
    General = 0  # PartObjectObjectTypeMemberType
    Line = 1  # PartObjectObjectTypeMemberType
    Arc = 2  # PartObjectObjectTypeMemberType
    Conic = 3  # PartObjectObjectTypeMemberType
    Spline = 4  # PartObjectObjectTypeMemberType
    Solidbody = 5  # PartObjectObjectTypeMemberType
    Sheetbody = 6  # PartObjectObjectTypeMemberType
    Datum = 7  # PartObjectObjectTypeMemberType
    Point = 8  # PartObjectObjectTypeMemberType
    CoordinateSystem = 9  # PartObjectObjectTypeMemberType
    AllButDefault = 10  # PartObjectObjectTypeMemberType
    DatumCsys = 11  # PartObjectObjectTypeMemberType
    Traceline = 12  # PartObjectObjectTypeMemberType
    InfiniteLine = 13  # PartObjectObjectTypeMemberType
    PointCloud = 14  # PartObjectObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartObjectLineFontTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartObjectLineFontType():
    """
    Represents the available types for font 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PartDefault", "Default Value from Part"
       "Solid", "Solid"
       "Dashed", "Dashed"
       "Phantom", "Phantom"
       "Centerline", "Centerline"
       "Dotted", "Dotted"
       "LongDashed", "Long Dashed"
       "DottedDashed", "Dotted Dashed"
    """
    PartDefault = 1  # PartObjectLineFontTypeMemberType
    Solid = 2  # PartObjectLineFontTypeMemberType
    Dashed = 3  # PartObjectLineFontTypeMemberType
    Phantom = 4  # PartObjectLineFontTypeMemberType
    Centerline = 5  # PartObjectLineFontTypeMemberType
    Dotted = 6  # PartObjectLineFontTypeMemberType
    LongDashed = 7  # PartObjectLineFontTypeMemberType
    DottedDashed = 8  # PartObjectLineFontTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartObjectWidthTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartObjectWidthType():
    """
    Describes the available types for width 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PartDefault", "Default Value from Part"
       "ThinWidth", "Thin Width"
       "NormalWidth", "Normal Width"
       "ThickWidth", "Thick Width"
       "WidthOne", " - "
       "WidthTwo", " - "
       "WidthThree", " - "
       "WidthFour", " - "
       "WidthFive", " - "
       "WidthSix", " - "
       "WidthSeven", " - "
       "WidthEight", " - "
       "WidthNine", " - "
    """
    PartDefault = 1  # PartObjectWidthTypeMemberType
    ThinWidth = 2  # PartObjectWidthTypeMemberType
    NormalWidth = 3  # PartObjectWidthTypeMemberType
    ThickWidth = 4  # PartObjectWidthTypeMemberType
    WidthOne = 5  # PartObjectWidthTypeMemberType
    WidthTwo = 6  # PartObjectWidthTypeMemberType
    WidthThree = 7  # PartObjectWidthTypeMemberType
    WidthFour = 8  # PartObjectWidthTypeMemberType
    WidthFive = 9  # PartObjectWidthTypeMemberType
    WidthSix = 10  # PartObjectWidthTypeMemberType
    WidthSeven = 11  # PartObjectWidthTypeMemberType
    WidthEight = 12  # PartObjectWidthTypeMemberType
    WidthNine = 13  # PartObjectWidthTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartObject():
    """
    Represents the set of object preferences applicable to entire part.  
    
    All the preferences available at 
    UG GUI for object can be set by using this class except work layer. Work Layer should be set by using 
    :py:class:`NXOpen.Layer.LayerManager` class which holds a work layer property. 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class ColorSelection():
        """
        Describes whether color of object is not changed or it is default color or it is defined by user 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoChange", "No Change"
           "DefaultColor", "Default Color"
           "Color", "User Defined Color"
        """
        NoChange = 0  # PartObjectColorSelectionMemberType
        DefaultColor = 1  # PartObjectColorSelectionMemberType
        Color = 2  # PartObjectColorSelectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ObjectType():
        """
        Describes all available Types for object selection 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "General", "Default Type Value"
           "Line", "Line"
           "Arc", "Arc"
           "Conic", "Conic"
           "Spline", "Spline"
           "Solidbody", "Solid Body"
           "Sheetbody", "Sheet Body"
           "Datum", "Datum"
           "Point", "Point"
           "CoordinateSystem", "Coordinate System"
           "AllButDefault", "All But Default"
           "DatumCsys", "Datum CSYS Feature"
           "Traceline", "Traceline"
           "InfiniteLine", "Infinite Line"
           "PointCloud", "Point Cloud"
        """
        General = 0  # PartObjectObjectTypeMemberType
        Line = 1  # PartObjectObjectTypeMemberType
        Arc = 2  # PartObjectObjectTypeMemberType
        Conic = 3  # PartObjectObjectTypeMemberType
        Spline = 4  # PartObjectObjectTypeMemberType
        Solidbody = 5  # PartObjectObjectTypeMemberType
        Sheetbody = 6  # PartObjectObjectTypeMemberType
        Datum = 7  # PartObjectObjectTypeMemberType
        Point = 8  # PartObjectObjectTypeMemberType
        CoordinateSystem = 9  # PartObjectObjectTypeMemberType
        AllButDefault = 10  # PartObjectObjectTypeMemberType
        DatumCsys = 11  # PartObjectObjectTypeMemberType
        Traceline = 12  # PartObjectObjectTypeMemberType
        InfiniteLine = 13  # PartObjectObjectTypeMemberType
        PointCloud = 14  # PartObjectObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LineFontType():
        """
        Represents the available types for font 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PartDefault", "Default Value from Part"
           "Solid", "Solid"
           "Dashed", "Dashed"
           "Phantom", "Phantom"
           "Centerline", "Centerline"
           "Dotted", "Dotted"
           "LongDashed", "Long Dashed"
           "DottedDashed", "Dotted Dashed"
        """
        PartDefault = 1  # PartObjectLineFontTypeMemberType
        Solid = 2  # PartObjectLineFontTypeMemberType
        Dashed = 3  # PartObjectLineFontTypeMemberType
        Phantom = 4  # PartObjectLineFontTypeMemberType
        Centerline = 5  # PartObjectLineFontTypeMemberType
        Dotted = 6  # PartObjectLineFontTypeMemberType
        LongDashed = 7  # PartObjectLineFontTypeMemberType
        DottedDashed = 8  # PartObjectLineFontTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WidthType():
        """
        Describes the available types for width 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PartDefault", "Default Value from Part"
           "ThinWidth", "Thin Width"
           "NormalWidth", "Normal Width"
           "ThickWidth", "Thick Width"
           "WidthOne", " - "
           "WidthTwo", " - "
           "WidthThree", " - "
           "WidthFour", " - "
           "WidthFive", " - "
           "WidthSix", " - "
           "WidthSeven", " - "
           "WidthEight", " - "
           "WidthNine", " - "
        """
        PartDefault = 1  # PartObjectWidthTypeMemberType
        ThinWidth = 2  # PartObjectWidthTypeMemberType
        NormalWidth = 3  # PartObjectWidthTypeMemberType
        ThickWidth = 4  # PartObjectWidthTypeMemberType
        WidthOne = 5  # PartObjectWidthTypeMemberType
        WidthTwo = 6  # PartObjectWidthTypeMemberType
        WidthThree = 7  # PartObjectWidthTypeMemberType
        WidthFour = 8  # PartObjectWidthTypeMemberType
        WidthFive = 9  # PartObjectWidthTypeMemberType
        WidthSix = 10  # PartObjectWidthTypeMemberType
        WidthSeven = 11  # PartObjectWidthTypeMemberType
        WidthEight = 12  # PartObjectWidthTypeMemberType
        WidthNine = 13  # PartObjectWidthTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetColor(self, type: PartObjectObjectType) -> int:
        """
        Returns the current color value for specified type.  
        
        The equivalent RGB values can be found by calling 
        :py:meth:`ConvertColorNumberToRGBValue`
        
        Red Component is ((((216 - color_number) % 36)/6)* 51)
        Green component is (((216 - color_number)/36) * 51)
        Blue is (((216 - color_number) % 6)* 51). 
        So for example if returned color value is 47 then 
        Red is ((((216 - 47) % 36)/6)* 51) = (((169 % 36)/6)* 51) = ((25/6)* 51) = 4*51 = 204
        Green is (((216 - 47)/36) * 51) = ((169/36) * 51) = 4*51 = 204
        Blue is (((216 - 47) % 6)* 51) = ((169 % 6)* 51) = 1*51 = 51
        
        Signature ``GetColor(type)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Preferences.PartObjectObjectType` 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetColor(self, type: PartObjectObjectType, color: int) -> None:
        """
        Sets the color.  
        
        For Default color pass -2 as color value and for no change pass -1. 
        For other color calculate the color in RGB format.  
        If you pass R value of Red component G value of Green and B value of Blue the color will be:
        color = (((255-R)/51)*6 + ((255-G)/51)*36 + ((255-B)/51)*1) + 1 ;
        Where R G and B values are between 0 and 255 . So for Green (0,255,0)we will pass
        color = (((255-0)/51)*6 + ((255-255)/51)*36 + ((255-0)/51)*1) + 1 = 30+0+5+1 = 36
        The equivalent color number value can be found by calling 
        :py:meth:`ConvertRGBValueToColorNumber`
        
        Signature ``SetColor(type, color)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Preferences.PartObjectObjectType` 
        :param color:  Specified Color  
        :type color: int 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLineFont(self, type: PartObjectObjectType) -> PartObjectLineFontType:
        """
        Returns the current line font for specified object type  
        
        Signature ``GetLineFont(type)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Preferences.PartObjectObjectType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.PartObjectLineFontType` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLineFont(self, type: PartObjectObjectType, lineFont: PartObjectLineFontType) -> None:
        """
        Sets line font for specified object type 
        
        Signature ``SetLineFont(type, lineFont)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Preferences.PartObjectObjectType` 
        :param lineFont: 
        :type lineFont: :py:class:`NXOpen.Preferences.PartObjectLineFontType` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetWidth(self, type: PartObjectObjectType) -> PartObjectWidthType:
        """
        Returns the current width for specified object type  
        
        Signature ``GetWidth(type)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Preferences.PartObjectObjectType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.PartObjectWidthType` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidth(self, type: PartObjectObjectType, width: PartObjectWidthType) -> None:
        """
        Sets width for specified object type  
        
        Signature ``SetWidth(type, width)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Preferences.PartObjectObjectType` 
        :param width: 
        :type width: :py:class:`NXOpen.Preferences.PartObjectWidthType` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ConvertColorNumberToRGBValue(self, colorNumber: int) -> ViewVisualizationSpecialEffectsColorRGB_Struct:
        """
        Converts color number to RGB constituents.  
        
        The color number passed should be between 1 to 216  
        
        Signature ``ConvertColorNumberToRGBValue(colorNumber)`` 
        
        :param colorNumber:  Color value 
        :type colorNumber: int 
        :returns:  Equivalent RGB constituents  
        :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorRGB_Struct` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ConvertRGBValueToColorNumber(self, fogColorRgbValue: ViewVisualizationSpecialEffectsColorRGB_Struct) -> int:
        """
        Converts RGB color constituents to color number.  
        
        The Red, Green and Blue color constituents
        should be between 0 to 255.  
        
        Signature ``ConvertRGBValueToColorNumber(fogColorRgbValue)`` 
        
        :param fogColorRgbValue: 
        :type fogColorRgbValue: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorRGB_Struct` 
        :returns:  Equivalent color value  
        :rtype: int 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLegacyLineWidthMap(self) -> 'list[PartObjectWidthType]':
        """
        Gets line width map that is used to convert legacy line widths to
        new line widths.  
        
        Following widths are considered as legacy line widths.
        :py:class:`Preferences.PartObjectWidthType.ThinWidth <Preferences.PartObjectWidthType>`
        :py:class:`Preferences.PartObjectWidthType.NormalWidth <Preferences.PartObjectWidthType>`
        :py:class:`Preferences.PartObjectWidthType.ThickWidth <Preferences.PartObjectWidthType>`
        
        New line widths contain corresponding line widths for above three
        legacy line widths respectively. New line widths start at
        :py:class:`Preferences.PartObjectWidthType.WidthOne <Preferences.PartObjectWidthType>`.
        
        Signature ``GetLegacyLineWidthMap()`` 
        
        :returns:  
        Array of 3 new widths each corresponding to a legacy width.
        First element corresponds to Thin width
        Second element corresponds to Normal width
        Third element corresponds to Thick width.  
        :rtype: list of :py:class:`NXOpen.Preferences.PartObjectWidthType` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLegacyLineWidthMap(self, newLineWidths: 'list[PartObjectWidthType]') -> None:
        """
        Sets line width map that is used to convert legacy line widths to
        new line widths.  
        
        See :py:meth:`Preferences.PartObject.GetLegacyLineWidthMap` 
        
        The new line widths used to map legacy line width are in logical order; 
        i.e.; :py:class:`Preferences.PartObjectWidthType.ThinWidth <Preferences.PartObjectWidthType>`
        maps to a smaller width value compared to 
        :py:class:`Preferences.PartObjectWidthType.NormalWidth <Preferences.PartObjectWidthType>` and
        so on. Otherwise, the legacy line width map will be rejected.
        
        Signature ``SetLegacyLineWidthMap(newLineWidths)`` 
        
        :param newLineWidths:                  Array of 3 new widths each corresponding to a legacy width.                First element corresponds to Thin width                Second element corresponds to Normal width                Third element corresponds to Thick width.  
        :type newLineWidths: list of :py:class:`NXOpen.Preferences.PartObjectWidthType` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MigrateLegacyLineWidths(self) -> bool:
        """
        Migrates line width attributes stored in the part file to 
        corresponding new line widths.  
        
        The migration is performed
        based on the legacy line width map stored in the part file.
        
        See :py:meth:`Preferences.PartObject.GetLegacyLineWidthMap` 
        
        Line widths of various displayable objects such as solids,
        wireframe, drawing views etc. will be updated to new line widths.
        Display is regenerated if necessary to reflect the changes.
        A displayable object, that already has new line width assigned to
        it, is not affected.
        
        Signature ``MigrateLegacyLineWidths()`` 
        
        :returns:  At least one legacy line width 
        attribute has been migrated.  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    FaceAnalysis: bool = ...
    """
    Returns or sets  the face analysis flag for Solid and Sheets 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceAnalysis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceAnalysis`` 
    
    :param faceAnalysis: 
    :type faceAnalysis: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PartiallyShaded: bool = ...
    """
    Returns or sets  the partially shaded flag for Solid and Sheets 
    
    <hr>
    
    Getter Method
    
    Signature ``PartiallyShaded`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartiallyShaded`` 
    
    :param partiallyShaded: 
    :type partiallyShaded: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Translucency: int = ...
    """
    Returns or sets  the translucency value 
    
    <hr>
    
    Getter Method
    
    Signature ``Translucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Translucency`` 
    
    :param translucency: 
    :type translucency: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class PartVisualizationScreenViewTriadLocationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationScreenViewTriadLocation():
    """
    The view triad location types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BottomLeft", "View triad display on the bottom left of the view"
       "BottomRight", "View triad display on the bottom right of the view"
    """
    BottomLeft = 0  # PartVisualizationScreenViewTriadLocationMemberType
    BottomRight = 1  # PartVisualizationScreenViewTriadLocationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationScreen():
    """
    Represents the set of visualization preferences under screen tab applicable to part   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX12.0.0
    """
    
    class ViewTriadLocation():
        """
        The view triad location types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BottomLeft", "View triad display on the bottom left of the view"
           "BottomRight", "View triad display on the bottom right of the view"
        """
        BottomLeft = 0  # PartVisualizationScreenViewTriadLocationMemberType
        BottomRight = 1  # PartVisualizationScreenViewTriadLocationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CsysFixedSizeOnScreen: bool = ...
    """
    Returns or sets   whether the CSYS display in fixed size on screen.  
    
    <hr>
    
    Getter Method
    
    Signature ``CsysFixedSizeOnScreen`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CsysFixedSizeOnScreen`` 
    
    :param fixedSizeOnScreen: 
    :type fixedSizeOnScreen: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    CsysShowThrough: bool = ...
    """
    Returns or sets   whether the CSYS display in show through mode 
    
    <hr>
    
    Getter Method
    
    Signature ``CsysShowThrough`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CsysShowThrough`` 
    
    :param showThrough: 
    :type showThrough: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    TriadLocation: PartVisualizationScreenViewTriadLocation = ...
    """
    Returns or sets  the view triad location 
    
    <hr>
    
    Getter Method
    
    Signature ``TriadLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationScreenViewTriadLocation` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TriadLocation`` 
    
    :param triadLocation: 
    :type triadLocation: :py:class:`NXOpen.Preferences.PartVisualizationScreenViewTriadLocation` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    TriadVisibility: bool = ...
    """
    Returns or sets  the show view triad flag.  
    
    Allows to turn on and off the display of view triad. 
    
    <hr>
    
    Getter Method
    
    Signature ``TriadVisibility`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TriadVisibility`` 
    
    :param triadVisibility: 
    :type triadVisibility: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """


class PartVisualizationLineLineFontDisplayTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationLineLineFontDisplayType():
    """
    Describes whether Line Font Display type is hardware or software. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Software", " - "
       "Hardware", " - "
    """
    Software = 0  # PartVisualizationLineLineFontDisplayTypeMemberType
    Hardware = 1  # PartVisualizationLineLineFontDisplayTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationLine():
    """
    Represents the set of visualization preferences under Line tab applicable to part   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class LineFontDisplayType():
        """
        Describes whether Line Font Display type is hardware or software. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Software", " - "
           "Hardware", " - "
        """
        Software = 0  # PartVisualizationLineLineFontDisplayTypeMemberType
        Hardware = 1  # PartVisualizationLineLineFontDisplayTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetWidthOptions(self) -> tuple:
        """
        Returns the show widths and width scale options.  
        
        Signature ``GetWidthOptions()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (showWidths, widthScale). showWidths is a bool.                the show widths option, which controls whether or not the              object width attribute determines the displayed width of              lines and curves. widthScale is a float.                 the width scale option, which controls scaling of the width              of lines and curves displayed in the graphics window.  
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidthOptions(self, showWidths: bool, widthScale: float) -> None:
        """
        Modifies the show widths and width scale options.  
        
        Signature ``SetWidthOptions(showWidths, widthScale)`` 
        
        :param showWidths:              the show widths option, which controls whether or not the             object width attribute determines the displayed width of             lines and curves.  
        :type showWidths: bool 
        :param widthScale:               the width scale option, which controls scaling of the width             of lines and curves displayed in the graphics window.   
        :type widthScale: float 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPixelWidths(self) -> 'list[int]':
        """
        Returns options that control width appearance in the graphics window.  
        
        Signature ``GetPixelWidths()`` 
        
        :returns: 
        Array of 9 pixel widths, one for each of the 9 width settings,
        that defines the appearance of widths in the graphics window.
        Valid pixel widths range from 1 to 9.  
        :rtype: list of int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPixelWidths(self, pixelWidths: 'list[int]') -> None:
        """
        Modifies pixel widths used in the graphics window.  
        
        Signature ``SetPixelWidths(pixelWidths)`` 
        
        :param pixelWidths:                Array of 9 pixel widths, one for each of the 9 width settings,               that defines the appearance of widths in the graphics window.               Valid pixel widths range from 1 to 9.  
        :type pixelWidths: list of int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPixelWidthOptions(self) -> tuple:
        """
        Returns pixel widths used in the graphics window.  
        
        Signature ``GetPixelWidthOptions()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (useWidthScale, widthScale, pixelWidths). useWidthScale is a bool.               If true, width appearance in the graphics window is controlled             by width scale. If false, width appearance is controlled by             pixel widths. widthScale is a float.               the width scale option, which controls scaling of widths in the             graphics window when useWidthScale is true. If set to 0.0 (the             minimum value), widths range from 1 to 3 pixels. If set to 1.0             (the maximum value), widths range from 1 to 9 pixels. pixelWidths is a list of int.               Array of 9 pixel widths, one for each of the 9 width settings,             that defines the appearance of widths in the graphics window             when useWidthScale is false. Valid pixel widths range from             1 to 9. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPixelWidthOptions(self, useWidthScale: bool, widthScale: float, pixelWidths: 'list[int]') -> None:
        """
        Modifies options that control width appearance in the graphics window.  
        
        Signature ``SetPixelWidthOptions(useWidthScale, widthScale, pixelWidths)`` 
        
        :param useWidthScale:                If true, width appearance in the graphics window is controlled               by width scale. If false, width appearance is controlled by               pixel widths.  
        :type useWidthScale: bool 
        :param widthScale:                the width scale option, which controls scaling of widths in the               graphics window when useWidthScale is true. If set to 0.0 (the               minimum value), widths range from 1 to 3 pixels. If set to 1.0               (the maximum value), widths range from 1 to 9 pixels.  
        :type widthScale: float 
        :param pixelWidths:                Array of 9 pixel widths, one for each of the 9 width settings,               that defines the appearance of widths in the graphics window               when useWidthScale is false. Valid pixel widths range from               1 to 9.  
        :type pixelWidths: list of int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetPixelWidthOptions(self) -> None:
        """
        Resets all pixel width options to settings specified by customer
        defaults.  
        
        Signature ``ResetPixelWidthOptions()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RegenerateFromToleranceChange(self, updateModeChanged: bool, studio: bool) -> None:
        """
        Regenerates after changing tolerance.  
        
        Signature ``RegenerateFromToleranceChange(updateModeChanged, studio)`` 
        
        :param updateModeChanged:  True if update mode changed  
        :type updateModeChanged: bool 
        :param studio:  studio or non-studio  
        :type studio: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateLineFontObjects(self, softwareUpdate: bool) -> None:
        """
        Regenerates after changing line-font settings.  
        
        Signature ``UpdateLineFontObjects(softwareUpdate)`` 
        
        :param softwareUpdate:  True when changing from software fonts                                       to hardware fonts, or when changing                                       dash patterns  
        :type softwareUpdate: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    CurveTolerance: float = ...
    """
    Returns or sets  the curve tolerance.  
    
    Specifies the level of detail for the current Display Mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveTolerance`` 
    
    :param lineCurveTolerance: 
    :type lineCurveTolerance: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DashSize: float = ...
    """
    Returns or sets  the dash size.  
    
    Sets the length of a segment of a dashed curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``DashSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DashSize`` 
    
    :param lineDashSize: 
    :type lineDashSize: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LineFontDisplay: PartVisualizationLineLineFontDisplayType = ...
    """
    Returns or sets  the line font display.  
    
    Controls the line font. The Hardware option uses the system graphics library to generate the 
    seven standard line fonts. Selecting hardware line fonts can improve drawing performance and reduce memory consumption. 
    The Software option generates non-solid curves with the values entered for the Dash, Space, and Symbol size. 
    
    <hr>
    
    Getter Method
    
    Signature ``LineFontDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationLineLineFontDisplayType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineFontDisplay`` 
    
    :param lineFontDisplay: 
    :type lineFontDisplay: :py:class:`NXOpen.Preferences.PartVisualizationLineLineFontDisplayType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShowWidths: bool = ...
    """
    Returns or sets  the show widths option.  
    
    If true, the object width attribute determines the displayed width of lines or curves used 
    to represent an object.If false, all curves are drawn thin, regardless of object width settings. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowWidths`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowWidths`` 
    
    :param isShowWidthOn: 
    :type isShowWidthOn: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SpaceSize: float = ...
    """
    Returns or sets  the space size.  
    
    Sets the distance between two segments of a dashed curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``SpaceSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpaceSize`` 
    
    :param lineSpaceSize: 
    :type lineSpaceSize: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SymbolSize: float = ...
    """
    Returns or sets  the symbol size.  
    
    Controls the displayed size of symbols used in software line fonts. 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolSize`` 
    
    :param lineSymbolSize: 
    :type lineSymbolSize: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WidthScale: float = ...
    """
    Returns or sets  the width scale option.  
    
    Controls scaling of the width of lines and curves displayed in the graphics window. If set to 0.0 (the minimum value), 
    widths range from 1 to 3 pixels. If set to 1.0 (the maximum value), widths range from 1 to the maximum supported pixel width. 
    
    <hr>
    
    Getter Method
    
    Signature ``WidthScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WidthScale`` 
    
    :param widthScale: 
    :type widthScale: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """


class ThreadsViewPreferences(IThreadsViewPreferences):
    """
    Represents set of Threads View Preferences applicable to drafting views.  
    
    Allows to create ANSI and ISO thread representations for both internal 
    and external threads in drawing member views.  
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.Threads`
    
    .. versionadded:: NX5.0.0
    """
    MinimumPitchField: float = ...
    """
    Returns or sets  the minimum pitch field.  
    
    Allows to control the minimum distance (in drawing coordinates) 
    to which two points which represent crests of a thread are drawn. It is also used to control 
    the minimum distance between a thread and it's defining geometry such as edges, silhouettes or 
    section edges of the cylindrical face or chamfered face. This can be used to help prevent lines 
    from running together, when threads with a small pitch are plotted at a small scale.
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumPitchField`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumPitchField`` 
    
    :param minimumPitchField: 
    :type minimumPitchField: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverrideVisibleThreadColor: int = ...
    """
    Returns or sets  the visible thread override color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideVisibleThreadColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideVisibleThreadColor`` 
    
    :param overrideVisibleThreadColor: 
    :type overrideVisibleThreadColor: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderTrueHiddenLine: bool = ...
    """
    Returns or sets  the status of render true hidden line 
    
    <hr>
    
    Getter Method
    
    Signature ``RenderTrueHiddenLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderTrueHiddenLine`` 
    
    :param renderTrueHiddenLine: 
    :type renderTrueHiddenLine: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ThreadsStandardOptionData: int = ...
    """
    Returns or sets  the threads standard option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadsStandardOptionData`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadsStandardOptionData`` 
    
    :param threadsStandardOptionData: 
    :type threadsStandardOptionData: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class PartModelingDensityUnitTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartModelingDensityUnitType():
    """
    Describes the units available for representing density 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LbPerCuInch", "Unit is pound per cubic inch"
       "LbPerCuFeet", "Unit is pound per cubic feet"
       "GmPerCuCm", "Unit is gram per cubic centimeter"
       "KgPerCuMeter", "Unit is kg per cubic meter"
    """
    LbPerCuInch = 0  # PartModelingDensityUnitTypeMemberType
    LbPerCuFeet = 1  # PartModelingDensityUnitTypeMemberType
    GmPerCuCm = 2  # PartModelingDensityUnitTypeMemberType
    KgPerCuMeter = 3  # PartModelingDensityUnitTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartModelingCurveCurvatureDisplayTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartModelingCurveCurvatureDisplayType():
    """
    Describes whether the curve curvature display is Curvature Comb or radius of Curvature Comb  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Comb", "Curve curvature display is Curvature Comb"
       "RadiusOfComb", "Curve curvature display is radius of Curvature Comb"
    """
    Comb = 0  # PartModelingCurveCurvatureDisplayTypeMemberType
    RadiusOfComb = 1  # PartModelingCurveCurvatureDisplayTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartModelingGridResolutionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartModelingGridResolutionType():
    """
    Describes all available grid resolutions for selection 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No specific selection for grid resolution"
       "Coarse", "Coarse grid resolution"
       "Standard", "Standard grid resolution"
       "Fine", "Fine grid resolution"
       "ExtraFine", "Extra Fine grid resolution"
       "UltraFine", "Ultra Fine grid resolution"
    """
    NotSet = 0  # PartModelingGridResolutionTypeMemberType
    Coarse = 1  # PartModelingGridResolutionTypeMemberType
    Standard = 2  # PartModelingGridResolutionTypeMemberType
    Fine = 3  # PartModelingGridResolutionTypeMemberType
    ExtraFine = 4  # PartModelingGridResolutionTypeMemberType
    UltraFine = 5  # PartModelingGridResolutionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartModelingGridKnotLineFontTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartModelingGridKnotLineFontType():
    """
    the available font for grid/knot line  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Solid", " - "
       "Dashed", " - "
       "Phantom", " - "
       "Centerline", " - "
       "Dotted", " - "
       "LongDashed", " - "
       "DottedDashed", " - "
    """
    Solid = 1  # PartModelingGridKnotLineFontTypeMemberType
    Dashed = 2  # PartModelingGridKnotLineFontTypeMemberType
    Phantom = 3  # PartModelingGridKnotLineFontTypeMemberType
    Centerline = 4  # PartModelingGridKnotLineFontTypeMemberType
    Dotted = 5  # PartModelingGridKnotLineFontTypeMemberType
    LongDashed = 6  # PartModelingGridKnotLineFontTypeMemberType
    DottedDashed = 7  # PartModelingGridKnotLineFontTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartModeling():
    """
    Represents the set of Modeling preferences applicable to part   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class DensityUnitType():
        """
        Describes the units available for representing density 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LbPerCuInch", "Unit is pound per cubic inch"
           "LbPerCuFeet", "Unit is pound per cubic feet"
           "GmPerCuCm", "Unit is gram per cubic centimeter"
           "KgPerCuMeter", "Unit is kg per cubic meter"
        """
        LbPerCuInch = 0  # PartModelingDensityUnitTypeMemberType
        LbPerCuFeet = 1  # PartModelingDensityUnitTypeMemberType
        GmPerCuCm = 2  # PartModelingDensityUnitTypeMemberType
        KgPerCuMeter = 3  # PartModelingDensityUnitTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CurveCurvatureDisplayType():
        """
        Describes whether the curve curvature display is Curvature Comb or radius of Curvature Comb  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Comb", "Curve curvature display is Curvature Comb"
           "RadiusOfComb", "Curve curvature display is radius of Curvature Comb"
        """
        Comb = 0  # PartModelingCurveCurvatureDisplayTypeMemberType
        RadiusOfComb = 1  # PartModelingCurveCurvatureDisplayTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GridResolutionType():
        """
        Describes all available grid resolutions for selection 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No specific selection for grid resolution"
           "Coarse", "Coarse grid resolution"
           "Standard", "Standard grid resolution"
           "Fine", "Fine grid resolution"
           "ExtraFine", "Extra Fine grid resolution"
           "UltraFine", "Ultra Fine grid resolution"
        """
        NotSet = 0  # PartModelingGridResolutionTypeMemberType
        Coarse = 1  # PartModelingGridResolutionTypeMemberType
        Standard = 2  # PartModelingGridResolutionTypeMemberType
        Fine = 3  # PartModelingGridResolutionTypeMemberType
        ExtraFine = 4  # PartModelingGridResolutionTypeMemberType
        UltraFine = 5  # PartModelingGridResolutionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GridKnotLineFontType():
        """
        the available font for grid/knot line  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Solid", " - "
           "Dashed", " - "
           "Phantom", " - "
           "Centerline", " - "
           "Dotted", " - "
           "LongDashed", " - "
           "DottedDashed", " - "
        """
        Solid = 1  # PartModelingGridKnotLineFontTypeMemberType
        Dashed = 2  # PartModelingGridKnotLineFontTypeMemberType
        Phantom = 3  # PartModelingGridKnotLineFontTypeMemberType
        Centerline = 4  # PartModelingGridKnotLineFontTypeMemberType
        Dotted = 5  # PartModelingGridKnotLineFontTypeMemberType
        LongDashed = 6  # PartModelingGridKnotLineFontTypeMemberType
        DottedDashed = 7  # PartModelingGridKnotLineFontTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetHistoryMode(self) -> bool:
        """
        Returns whether the part is in History or History-Free mode.  
        
        Return true for History mode or false for History-Free mode.   
        
        Signature ``GetHistoryMode()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX11.0.0
           History-free mode will be retired in NX11.
        
        License requirements: None.
        """
        ...
    
    
    def SetHistoryMode(self) -> None:
        """
        Changes the modeling mode to History Modeling.  
        
        This will remove Local feature from the model.
        
        Signature ``SetHistoryMode()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHistoryFreeMode(self) -> None:
        """
        Changes the modeling mode to History-Free Modeling.  
        
        This will remove parameters from features in the model. Feature edit will not be available and the model will not update.
        
        Signature ``SetHistoryFreeMode()`` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX11.0.0
           History-free mode will be retired in NX11.
        
        License requirements: None.
        """
        ...
    
    AngleToleranceData: float = ...
    """
    Returns or sets  the angle tolerance data.  
    
    Angle tolerance is the maximum allowable angle between the surface normals at 
    corresponding points, or the maximum allowable angle between curve tangent vectors at corresponding points. 
    This value can be read from any part but can only be set when the part owning these preferences is the work part. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleToleranceData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleToleranceData`` 
    
    :param angleTolData: 
    :type angleTolData: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    C0KnotLineColor: int = ...
    """
    Returns or sets  the C0 knot line color 
    
    <hr>
    
    Getter Method
    
    Signature ``C0KnotLineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C0KnotLineColor`` 
    
    :param knotLineColor: 
    :type knotLineColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C0KnotLineFont: PartModelingGridKnotLineFontType = ...
    """
    Returns or sets  the C0 knot line font 
    
    <hr>
    
    Getter Method
    
    Signature ``C0KnotLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C0KnotLineFont`` 
    
    :param knotLineFont: 
    :type knotLineFont: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C0KnotUseBodyColor: bool = ...
    """
    Returns or sets  whether c0 knot line use body color
    
    <hr>
    
    Getter Method
    
    Signature ``C0KnotUseBodyColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C0KnotUseBodyColor`` 
    
    :param useBodyColor: 
    :type useBodyColor: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C0KnotUseBodyFont: bool = ...
    """
    Returns or sets  whether C0_knot use body font
    
    <hr>
    
    Getter Method
    
    Signature ``C0KnotUseBodyFont`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C0KnotUseBodyFont`` 
    
    :param useBodyFont: 
    :type useBodyFont: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C1KnotLineColor: int = ...
    """
    Returns or sets  the C1 knot line color 
    
    <hr>
    
    Getter Method
    
    Signature ``C1KnotLineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C1KnotLineColor`` 
    
    :param knotLineColor: 
    :type knotLineColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C1KnotLineFont: PartModelingGridKnotLineFontType = ...
    """
    Returns or sets  the C1 knot line font 
    
    <hr>
    
    Getter Method
    
    Signature ``C1KnotLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C1KnotLineFont`` 
    
    :param knotLineFont: 
    :type knotLineFont: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C1KnotUseBodyColor: bool = ...
    """
    Returns or sets  whether c1 knot line use body color
    
    <hr>
    
    Getter Method
    
    Signature ``C1KnotUseBodyColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C1KnotUseBodyColor`` 
    
    :param useBodyColor: 
    :type useBodyColor: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C1KnotUseBodyFont: bool = ...
    """
    Returns or sets  whether C1_knot use body font
    
    <hr>
    
    Getter Method
    
    Signature ``C1KnotUseBodyFont`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C1KnotUseBodyFont`` 
    
    :param useBodyFont: 
    :type useBodyFont: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C2KnotLineColor: int = ...
    """
    Returns or sets  the C2 knot line color 
    
    <hr>
    
    Getter Method
    
    Signature ``C2KnotLineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C2KnotLineColor`` 
    
    :param knotLineColor: 
    :type knotLineColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C2KnotLineFont: PartModelingGridKnotLineFontType = ...
    """
    Returns or sets  the C2 knot line font 
    
    <hr>
    
    Getter Method
    
    Signature ``C2KnotLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C2KnotLineFont`` 
    
    :param knotLineFont: 
    :type knotLineFont: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C2KnotUseBodyColor: bool = ...
    """
    Returns or sets  whether c2 knot line use body color
    
    <hr>
    
    Getter Method
    
    Signature ``C2KnotUseBodyColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C2KnotUseBodyColor`` 
    
    :param useBodyColor: 
    :type useBodyColor: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    C2KnotUseBodyFont: bool = ...
    """
    Returns or sets  whether C2_knot use body font
    
    <hr>
    
    Getter Method
    
    Signature ``C2KnotUseBodyFont`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``C2KnotUseBodyFont`` 
    
    :param useBodyFont: 
    :type useBodyFont: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ConvertAnalyticToConvergentAngularTolerance: float = ...
    """
    Returns or sets  the angular tolerance for converting analytic body to Convergent body 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertAnalyticToConvergentAngularTolerance`` 
    
    :returns:  angular tolerance for converting analytic body to Convergent body  
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertAnalyticToConvergentAngularTolerance`` 
    
    :param dAnalyticToConvergentAngTol:  angular tolerance for converting analytic body to Convergent body  
    :type dAnalyticToConvergentAngTol: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ConvertAnalyticToConvergentDistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance for converting analytic body to Convergent body 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertAnalyticToConvergentDistanceTolerance`` 
    
    :returns:  distance tolerance for converting analytic body to Convergent body  
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertAnalyticToConvergentDistanceTolerance`` 
    
    :param dAnalyticToConvergentDistTol:  distance tolerance for converting analytic body to Convergent body  
    :type dAnalyticToConvergentDistTol: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    CurveCurvatureDisplay: PartModelingCurveCurvatureDisplayType = ...
    """
    Returns or sets  the curve curvature display.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveCurvatureDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModelingCurveCurvatureDisplayType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveCurvatureDisplay`` 
    
    :param curveCurvatureDisplay: 
    :type curveCurvatureDisplay: :py:class:`NXOpen.Preferences.PartModelingCurveCurvatureDisplayType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    CurveCurvatureShowCap: bool = ...
    """
    Returns or sets  the curve curvature display show cap line 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveCurvatureShowCap`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveCurvatureShowCap`` 
    
    :param newShowCap: 
    :type newShowCap: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    CurveCurvatureStyle: int = ...
    """
    Returns or sets  the curve curvature display style 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveCurvatureStyle`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveCurvatureStyle`` 
    
    :param newStyle: 
    :type newStyle: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    CutViewUpdateDelayed: bool = ...
    """
    Returns or sets  the state of the cut view delay update flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CutViewUpdateDelayed`` 
    
    :returns:  The current state of the delay update flag.  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutViewUpdateDelayed`` 
    
    :param isDelayed:  The new state of the delay update flag.  
    :type isDelayed: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Density: float = ...
    """
    Returns or sets  the density.  
    
    The value used to set this property must be in
    the units of the density units preference
    (that is, the value of :py:meth:`NXOpen.Preferences.PartModeling.DensityUnit`).
    Likewise, the density returned by this property is in the units
    of the density units preference. 
    
    <hr>
    
    Getter Method
    
    Signature ``Density`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Density`` 
    
    :param density: 
    :type density: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DensityUnit: PartModelingDensityUnitType = ...
    """
    Returns or sets  the density unit 
    
    <hr>
    
    Getter Method
    
    Signature ``DensityUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModelingDensityUnitType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DensityUnit`` 
    
    :param densityUnit: 
    :type densityUnit: :py:class:`NXOpen.Preferences.PartModelingDensityUnitType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DisplayCurveCurvatureOutside: bool = ...
    """
    Returns or sets  the curve curvature display style to show it on the inside/outside of the curve 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayCurveCurvatureOutside`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayCurveCurvatureOutside`` 
    
    :param displayOutside: 
    :type displayOutside: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    DistanceToleranceData: float = ...
    """
    Returns or sets  the modeling distance tolerance data.  
    
    This tolerance value is used throughout the Modeling application, 
    such as for creating swept and revolved solid bodies and sectioning solid bodies. For example, when creating 
    sheet bodies, the distance tolerance specifies the maximum allowable distance between corresponding points on 
    the original surface and the resulting B-surface. This value can be read from any part but can only be set
    when the part owning these preferences is the work part.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceToleranceData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceToleranceData`` 
    
    :param distTolData: 
    :type distTolData: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    GridLineColor: int = ...
    """
    Returns or sets  the grid line color 
    
    <hr>
    
    Getter Method
    
    Signature ``GridLineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridLineColor`` 
    
    :param gridLineColor: 
    :type gridLineColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    GridLineFont: PartModelingGridKnotLineFontType = ...
    """
    Returns or sets  the grid line font 
    
    <hr>
    
    Getter Method
    
    Signature ``GridLineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridLineFont`` 
    
    :param gridLineFont: 
    :type gridLineFont: :py:class:`NXOpen.Preferences.PartModelingGridKnotLineFontType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    GridLinesUCount: int = ...
    """
    Returns or sets  the U count for grid lines.  
    
    It is the number of grid curves in the U direction of the faces of the body 
    
    <hr>
    
    Getter Method
    
    Signature ``GridLinesUCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridLinesUCount`` 
    
    :param gridLineUCount: 
    :type gridLineUCount: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    GridLinesVCount: int = ...
    """
    Returns or sets  the V count for grid lines.  
    
    It is the number of grid curves in the V direction of the faces of the body  
    
    <hr>
    
    Getter Method
    
    Signature ``GridLinesVCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridLinesVCount`` 
    
    :param gridLineVCount: 
    :type gridLineVCount: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    GridResolution: PartModelingGridResolutionType = ...
    """
    Returns or sets  the grid resolution.  
    
    The six options, None, Coarse, Standard, Fine, Extra Fine and Ultra Fine, produce a grid that 
    is respectively more detailed. The None option shows no grid at all in wireframe mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``GridResolution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModelingGridResolutionType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridResolution`` 
    
    :param gridResolution: 
    :type gridResolution: :py:class:`NXOpen.Preferences.PartModelingGridResolutionType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    GridUseBodyColor: bool = ...
    """
    Returns or sets  whether grid line use body color
    
    <hr>
    
    Getter Method
    
    Signature ``GridUseBodyColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridUseBodyColor`` 
    
    :param useBodyColor: 
    :type useBodyColor: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    GridUseBodyFont: bool = ...
    """
    Returns or sets  whether grid use body font
    
    <hr>
    
    Getter Method
    
    Signature ``GridUseBodyFont`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridUseBodyFont`` 
    
    :param useBodyFont: 
    :type useBodyFont: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    OptimizeCurve: bool = ...
    """
    Returns or sets  the optimize curve flag 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimizeCurve`` 
    
    :returns:  Flag indicating whether Optimized Curve should be performed  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptimizeCurve`` 
    
    :param optimizeCurve:  Flag indicating whether Optimized Curve should be performed  
    :type optimizeCurve: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptimizeCurveAngleToleranceFactor: float = ...
    """
    Returns or sets  the optimize curve angle tolerance factor 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimizeCurveAngleToleranceFactor`` 
    
    :returns:  Angle Factor for performing Optimized Curve  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptimizeCurveAngleToleranceFactor`` 
    
    :param optimieCurveAngleFactor:  Angle Factor for performing Optimized Curve  
    :type optimieCurveAngleFactor: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OptimizeCurveDistanceToleranceFactor: float = ...
    """
    Returns or sets  the optimize curve distance tolerance factor 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimizeCurveDistanceToleranceFactor`` 
    
    :returns:  Distance Factor for performing Optimized Curve  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptimizeCurveDistanceToleranceFactor`` 
    
    :param optimieCurveDistanceFactor:  Distance Factor for performing Optimized Curve  
    :type optimieCurveDistanceFactor: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OptimizeCurveToleranceFactor: float = ...
    """
    Returns or sets  the optimize curve tolerance factor 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimizeCurveToleranceFactor`` 
    
    :returns:  Factor for performing Optimized Curve  
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.0
       It was split into two factors. Please use :py:meth:`PartModeling.OptimizeCurveDistanceToleranceFactor` and :py:meth:`PartModeling.OptimizeCurveAngleToleranceFactor` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptimizeCurveToleranceFactor`` 
    
    :param optimieCurveFactor:  Factor for performing Optimized Curve  
    :type optimieCurveFactor: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.0
       It was split into two factors. Please use :py:meth:`PartModeling.OptimizeCurveDistanceToleranceFactor` and :py:meth:`PartModeling.OptimizeCurveAngleToleranceFactor` instead.
    
    License requirements: None.
    """


class RoutingElectricalCreateTerminalsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingElectricalCreateTerminalsType():
    """
    How to create terminal segments (if creating terminal segments). 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "Create terminals to all terminals"
       "Listed", "Create terminals to listed terminals"
       "Routed", "Create terminals to routed terminals"
    """
    All = 0  # RoutingElectricalCreateTerminalsTypeMemberType
    Listed = 1  # RoutingElectricalCreateTerminalsTypeMemberType
    Routed = 2  # RoutingElectricalCreateTerminalsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingElectricalComponentMatchTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingElectricalComponentMatchType():
    """
    Manual/Auto Assign component uses the component match method to determine
    which component(s) are candidates for assignment to a component list record.
    
    Matching consists of matching the:
    o the file name of a component
    o the component name
    o Part Name field of the component list record to an attribute
    
    If attribute name matching is specified, indicate the name of the attribute. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FileName", "Match file name during component assignment."
       "ComponentName", "Match component name during component assignment."
       "AttributeName", "Match attribute name during component assignment."
    """
    FileName = 0  # RoutingElectricalComponentMatchTypeMemberType
    ComponentName = 1  # RoutingElectricalComponentMatchTypeMemberType
    AttributeName = 2  # RoutingElectricalComponentMatchTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingElectrical():
    """
    The RoutingElectrical object stores a set of route electrical
    preferences.  
    
    A valid application view file is necessary to get
    values other than defaults for the electrical preferences. 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX4.0.0
    """
    
    class CreateTerminalsType():
        """
        How to create terminal segments (if creating terminal segments). 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", "Create terminals to all terminals"
           "Listed", "Create terminals to listed terminals"
           "Routed", "Create terminals to routed terminals"
        """
        All = 0  # RoutingElectricalCreateTerminalsTypeMemberType
        Listed = 1  # RoutingElectricalCreateTerminalsTypeMemberType
        Routed = 2  # RoutingElectricalCreateTerminalsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ComponentMatchType():
        """
        Manual/Auto Assign component uses the component match method to determine
        which component(s) are candidates for assignment to a component list record.
        
        Matching consists of matching the:
        o the file name of a component
        o the component name
        o Part Name field of the component list record to an attribute
        
        If attribute name matching is specified, indicate the name of the attribute. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FileName", "Match file name during component assignment."
           "ComponentName", "Match component name during component assignment."
           "AttributeName", "Match attribute name during component assignment."
        """
        FileName = 0  # RoutingElectricalComponentMatchTypeMemberType
        ComponentName = 1  # RoutingElectricalComponentMatchTypeMemberType
        AttributeName = 2  # RoutingElectricalComponentMatchTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetDefaultHarnessName(self) -> str:
        """
        Gets the default harness name.  
        
        The default harness name replaces
        the Harness field value of any records in an imported
        connection/component list that are empty.  A blank string in the
        Default_Harness_Name element below replaces blank Harness fields
        with the leaf name of the work part.   
        
        Signature ``GetDefaultHarnessName()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDefaultHarnessName(self, defaultHarnessName: str) -> None:
        """
        Sets the default harness name 
        
        Signature ``SetDefaultHarnessName(defaultHarnessName)`` 
        
        :param defaultHarnessName: 
        :type defaultHarnessName: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponentMatchColumnHeading(self) -> str:
        """
        Gets the column name of the component list used for component matching
        if the method is attribute matching.  
        
        Signature ``GetComponentMatchColumnHeading()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetComponentMatchColumnHeading(self, columnHeading: str) -> None:
        """
        Sets the column name of the component list used for component matching
        if the method is attribute matching.  
        
        Signature ``SetComponentMatchColumnHeading(columnHeading)`` 
        
        :param columnHeading: 
        :type columnHeading: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponentMatchComponentAttributeTitle(self) -> str:
        """
        Gets the component attribute name used for component matching
        if the method is attribute matching.  
        
        Signature ``GetComponentMatchComponentAttributeTitle()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetComponentMatchComponentAttributeTitle(self, componentAttributeTitle: str) -> None:
        """
        Sets the component attribute name used for component matching
        if the method is attribute matching.  
        
        Signature ``SetComponentMatchComponentAttributeTitle(componentAttributeTitle)`` 
        
        :param componentAttributeTitle: 
        :type componentAttributeTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFilterBlankingAttribute(self) -> str:
        """
        Gets the Rlist_Filter_Blanking_Attribute.  
        
        Signature ``GetFilterBlankingAttribute()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFilterBlankingAttribute(self, attributeName: str) -> None:
        """
        Sets the Rlist_Filter_Blanking_Attribute.  
        
        Signature ``SetFilterBlankingAttribute(attributeName)`` 
        
        :param attributeName: 
        :type attributeName: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFilterFormatFileName(self) -> str:
        """
        Gets the file name for the stand alone XML filters and formats file.  
        
        Signature ``GetFilterFormatFileName()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFilterFormatFileName(self, filterFormatFileName: str) -> None:
        """
        Sets the file name for the stand alone XML filters and formats file.  
        
        Signature ``SetFilterFormatFileName(filterFormatFileName)`` 
        
        :param filterFormatFileName: 
        :type filterFormatFileName: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFormboardFrameSizes(self) -> 'list[str]':
        """
        Gets the formboard frame sizes currently specified within the
        Routing Electrical application.  
        
        Formboard frame sizes are character
        strings are of the form Height x Length (units).
        
        Units can be "in" or "mm" (case insensitive).
        
        The Height, Length and units fields of the string are separated
        by one of the following separator characters:
        
        "x", "X",  any whitespace, ":" (colon), or a "," (comma)
        
        Signature ``GetFormboardFrameSizes()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFormboardFrameSizes(self, frameSizes: 'list[str]') -> None:
        """
        Sets a formboard frame size.  
        
        Signature ``SetFormboardFrameSizes(frameSizes)`` 
        
        :param frameSizes: 
        :type frameSizes: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    AutoRouteStockStyle: NXOpen.Routing.StockStyle = ...
    """
    Returns or sets the option to Auto Route using centerline stock style (i.  
    
    e. none) or simple stock style.
    
    <hr>
    
    Getter Method
    
    Signature ``AutoRouteStockStyle`` 
    
    :returns:  Will be either :py:class:`NXOpen.Routing.StockStyle.None <NXOpen.Routing.StockStyle>`) or
    :py:class:`NXOpen.Routing.StockStyle.Simple <NXOpen.Routing.StockStyle>`).  
    :rtype: :py:class:`NXOpen.Routing.StockStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AutoRouteStockStyle`` 
    
    :param stockStyle:  Must be either :py:class:`NXOpen.Routing.StockStyle.None <NXOpen.Routing.StockStyle>`) or                                                                    :py:class:`NXOpen.Routing.StockStyle.Simple <NXOpen.Routing.StockStyle>`).  
    :type stockStyle: :py:class:`NXOpen.Routing.StockStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    AutomaticRouteLevel: bool = ...
    """
    Returns or sets  the level at which to automatically route a path.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticRouteLevel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticRouteLevel`` 
    
    :param isPinLevelRoute: 
    :type isPinLevelRoute: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    BundleColor: int = ...
    """
    Returns or sets  the default bundle color.  
    
    <hr>
    
    Getter Method
    
    Signature ``BundleColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BundleColor`` 
    
    :param bundleColor: 
    :type bundleColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    ComponentMatchMethod: RoutingElectricalComponentMatchType = ...
    """
    Returns or sets  the component match option for automatic/manual component assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentMatchMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingElectricalComponentMatchType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentMatchMethod`` 
    
    :param componentMatchMethod: 
    :type componentMatchMethod: :py:class:`NXOpen.Preferences.RoutingElectricalComponentMatchType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    CreateTerminalsOption: RoutingElectricalCreateTerminalsType = ...
    """
    Returns or sets  the create terminals option.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateTerminalsOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingElectricalCreateTerminalsType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateTerminalsOption`` 
    
    :param createTerminalsOption: 
    :type createTerminalsOption: :py:class:`NXOpen.Preferences.RoutingElectricalCreateTerminalsType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    DefaultJumperLength: str = ...
    """
    Returns or sets  the default length of a jumper wire.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultJumperLength`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultJumperLength`` 
    
    :param defaultJumperLength: 
    :type defaultJumperLength: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    ExportFormatInLegacyFile: bool = ...
    """
    Returns or sets  the option to export the format at the top of a legacy routelist file.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExportFormatInLegacyFile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ExportFormatInLegacyFile`` 
    
    :param exportFormat: 
    :type exportFormat: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FormboardSynchronizationLengthTolerance: float = ...
    """
    Returns or sets  the default segment length tolerance to use for Formboard Synchronization.  
    
    <hr>
    
    Getter Method
    
    Signature ``FormboardSynchronizationLengthTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FormboardSynchronizationLengthTolerance`` 
    
    :param segmentLengthTolerance: 
    :type segmentLengthTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    HighlightWire: bool = ...
    """
    Returns or sets  the option to highlight a wire in the connection list navigator.  
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightWire`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightWire`` 
    
    :param highlightWire: 
    :type highlightWire: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RecordNetlistHistory: bool = ...
    """
    Returns or sets the option to record import and export activity in the Connection and Component Lists.  
    
    <hr>
    
    Getter Method
    
    Signature ``RecordNetlistHistory`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RecordNetlistHistory`` 
    
    :param recordNetlistHistory:  Should Routing record the netlist history?  
    :type recordNetlistHistory: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    ReportRouteErrors: bool = ...
    """
    Returns or sets  the option to report auto/manual route errors to the listing window.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReportRouteErrors`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ReportRouteErrors`` 
    
    :param reportRouteErrors: 
    :type reportRouteErrors: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    StandaloneFilterFormatFile: bool = ...
    """
    Returns or sets  the option to export the XML routelist data with the formats and
    filters information separately.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandaloneFilterFormatFile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StandaloneFilterFormatFile`` 
    
    :param standaloneFilterFormatFile: 
    :type standaloneFilterFormatFile: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    TerminalSegmentSolidDisplay: bool = ...
    """
    Returns or sets  the terminal segment solid display option 
    
    <hr>
    
    Getter Method
    
    Signature ``TerminalSegmentSolidDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``TerminalSegmentSolidDisplay`` 
    
    :param terminalSegmentSolid: 
    :type terminalSegmentSolid: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """


class RoutingMechanicalLineColorTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingMechanicalLineColorType():
    """
    Describes the Line color string definition types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", " - "
       "Name", " - "
       "Index", " - "
       "Rgb", " - "
       "Hex", " - "
       "Max", " - "
    """
    Unknown = -1  # RoutingMechanicalLineColorTypeMemberType
    Name = 0  # RoutingMechanicalLineColorTypeMemberType
    Index = 1  # RoutingMechanicalLineColorTypeMemberType
    Rgb = 2  # RoutingMechanicalLineColorTypeMemberType
    Hex = 3  # RoutingMechanicalLineColorTypeMemberType
    Max = 4  # RoutingMechanicalLineColorTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingMechanical():
    """
    The RoutingMechanical object stores a set of route mechanical preferences.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX4.0.0
    """
    
    class LineColorType():
        """
        Describes the Line color string definition types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", " - "
           "Name", " - "
           "Index", " - "
           "Rgb", " - "
           "Hex", " - "
           "Max", " - "
        """
        Unknown = -1  # RoutingMechanicalLineColorTypeMemberType
        Name = 0  # RoutingMechanicalLineColorTypeMemberType
        Index = 1  # RoutingMechanicalLineColorTypeMemberType
        Rgb = 2  # RoutingMechanicalLineColorTypeMemberType
        Hex = 3  # RoutingMechanicalLineColorTypeMemberType
        Max = 4  # RoutingMechanicalLineColorTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetIsInitialized(self) -> bool:
        """
        Returns the information of whether the mechanical preferences section
        exists in the application view file.  
        
        Signature ``GetIsInitialized()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRunTypeNames(self) -> 'list[str]':
        """
        Returns the names of run type displays 
        
        Signature ``GetRunTypeNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLineFontIndices(self) -> 'list[int]':
        """
        Returns the line font indices: line font to apply to segments in the run
        (currently 1-7 supported), 0 indicates unknown line font  
        
        Signature ``GetLineFontIndices()`` 
        
        :returns: 
        :rtype: list of int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLineFonts(self) -> 'list[str]':
        """
        Returns the names of line font to apply to segments, only used if
        line_font_index is 0  
        
        Signature ``GetLineFonts()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLineWidths(self) -> 'list[int]':
        """
        Returns the thicknesses of segments (currently 0-2 supported)  
        
        Signature ``GetLineWidths()`` 
        
        :returns: 
        :rtype: list of int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLineColorTypes(self) -> 'list[RoutingMechanicalLineColorType]':
        """
        Returns types of string in line_color field.  
        
        Valid values are
        specified by the :py:class:`NXOpen.Preferences.RoutingMechanicalLineColorType` .  
        
        Signature ``GetLineColorTypes()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Preferences.RoutingMechanicalLineColorType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLineColors(self) -> 'list[str]':
        """
        Returns the name, index or rgb strings (hex or , separated) of line color  
        
        Signature ``GetLineColors()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class SessionPdmSynchroniseOnLoadTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionPdmSynchroniseOnLoadType():
    """
    Options for the kind of synchronisation with the PDM system performed
    when a part is loaded. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Complete", " - "
       "AddWithTransforms", " - "
       "NotSet", " - "
    """
    Complete = 0  # SessionPdmSynchroniseOnLoadTypeMemberType
    AddWithTransforms = 1  # SessionPdmSynchroniseOnLoadTypeMemberType
    NotSet = 2  # SessionPdmSynchroniseOnLoadTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionPdmSynchroniseOnSaveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionPdmSynchroniseOnSaveType():
    """
    Options for the kind of synchronisation with the PDM system performed
    when a part is saved. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Complete", " - "
       "NotSet", " - "
    """
    Complete = 0  # SessionPdmSynchroniseOnSaveTypeMemberType
    NotSet = 1  # SessionPdmSynchroniseOnSaveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionPdmUnpopulatedBehaviourTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionPdmUnpopulatedBehaviourType():
    """
    Options for when to add NX datasets upon loading an unpopulated part in the PDM system 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OnSave", " - "
       "ModifiedPrompt", " - "
       "ModifiedNoPrompt", " - "
       "Never", " - "
       "PreNx4", " - "
    """
    OnSave = 0  # SessionPdmUnpopulatedBehaviourTypeMemberType
    ModifiedPrompt = 1  # SessionPdmUnpopulatedBehaviourTypeMemberType
    ModifiedNoPrompt = 2  # SessionPdmUnpopulatedBehaviourTypeMemberType
    Never = 3  # SessionPdmUnpopulatedBehaviourTypeMemberType
    PreNx4 = 4  # SessionPdmUnpopulatedBehaviourTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionPdmJtUpdateFromSourceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionPdmJtUpdateFromSourceType():
    """
    Options for the kind of JT update performed when a part is loaded 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Complete", " - "
       "NotSet", " - "
    """
    Complete = 0  # SessionPdmJtUpdateFromSourceTypeMemberType
    NotSet = 1  # SessionPdmJtUpdateFromSourceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionPdmMessagesInconsistentRevisionsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionPdmMessagesInconsistentRevisionsType():
    """
    Options for the kind of messages about inconsistent revisions when a part is loaded 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Warning", " - "
       "Error", " - "
    """
    NotSet = 0  # SessionPdmMessagesInconsistentRevisionsTypeMemberType
    Warning = 1  # SessionPdmMessagesInconsistentRevisionsTypeMemberType
    Error = 2  # SessionPdmMessagesInconsistentRevisionsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionPdm():
    """
    Represents the NX Manager preferences for the entire session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX4.0.1
    """
    
    class SynchroniseOnLoadType():
        """
        Options for the kind of synchronisation with the PDM system performed
        when a part is loaded. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Complete", " - "
           "AddWithTransforms", " - "
           "NotSet", " - "
        """
        Complete = 0  # SessionPdmSynchroniseOnLoadTypeMemberType
        AddWithTransforms = 1  # SessionPdmSynchroniseOnLoadTypeMemberType
        NotSet = 2  # SessionPdmSynchroniseOnLoadTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SynchroniseOnSaveType():
        """
        Options for the kind of synchronisation with the PDM system performed
        when a part is saved. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Complete", " - "
           "NotSet", " - "
        """
        Complete = 0  # SessionPdmSynchroniseOnSaveTypeMemberType
        NotSet = 1  # SessionPdmSynchroniseOnSaveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UnpopulatedBehaviourType():
        """
        Options for when to add NX datasets upon loading an unpopulated part in the PDM system 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OnSave", " - "
           "ModifiedPrompt", " - "
           "ModifiedNoPrompt", " - "
           "Never", " - "
           "PreNx4", " - "
        """
        OnSave = 0  # SessionPdmUnpopulatedBehaviourTypeMemberType
        ModifiedPrompt = 1  # SessionPdmUnpopulatedBehaviourTypeMemberType
        ModifiedNoPrompt = 2  # SessionPdmUnpopulatedBehaviourTypeMemberType
        Never = 3  # SessionPdmUnpopulatedBehaviourTypeMemberType
        PreNx4 = 4  # SessionPdmUnpopulatedBehaviourTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class JtUpdateFromSourceType():
        """
        Options for the kind of JT update performed when a part is loaded 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Complete", " - "
           "NotSet", " - "
        """
        Complete = 0  # SessionPdmJtUpdateFromSourceTypeMemberType
        NotSet = 1  # SessionPdmJtUpdateFromSourceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MessagesInconsistentRevisionsType():
        """
        Options for the kind of messages about inconsistent revisions when a part is loaded 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Warning", " - "
           "Error", " - "
        """
        NotSet = 0  # SessionPdmMessagesInconsistentRevisionsTypeMemberType
        Warning = 1  # SessionPdmMessagesInconsistentRevisionsTypeMemberType
        Error = 2  # SessionPdmMessagesInconsistentRevisionsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    JtUpdateFromSource: SessionPdmJtUpdateFromSourceType = ...
    """
    Returns or sets  the kind of JT update performed when a part is loaded 
    
    <hr>
    
    Getter Method
    
    Signature ``JtUpdateFromSource`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionPdmJtUpdateFromSourceType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JtUpdateFromSource`` 
    
    :param update: 
    :type update: :py:class:`NXOpen.Preferences.SessionPdmJtUpdateFromSourceType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    MessagesInconsistentRevisions: SessionPdmMessagesInconsistentRevisionsType = ...
    """
    Returns or sets  the kind of messages about inconsistent revisions when a part is loaded 
    
    <hr>
    
    Getter Method
    
    Signature ``MessagesInconsistentRevisions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionPdmMessagesInconsistentRevisionsType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MessagesInconsistentRevisions`` 
    
    :param message: 
    :type message: :py:class:`NXOpen.Preferences.SessionPdmMessagesInconsistentRevisionsType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    SynchroniseOnLoad: SessionPdmSynchroniseOnLoadType = ...
    """
    Returns or sets  the kind of synchronisation performed when a part is loaded 
    
    <hr>
    
    Getter Method
    
    Signature ``SynchroniseOnLoad`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionPdmSynchroniseOnLoadType` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SynchroniseOnLoad`` 
    
    :param sync: 
    :type sync: :py:class:`NXOpen.Preferences.SessionPdmSynchroniseOnLoadType` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: None.
    """
    SynchroniseOnSave: SessionPdmSynchroniseOnSaveType = ...
    """
    Returns or sets  the kind of synchronisation performed when a part is saved 
    
    <hr>
    
    Getter Method
    
    Signature ``SynchroniseOnSave`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionPdmSynchroniseOnSaveType` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SynchroniseOnSave`` 
    
    :param sync: 
    :type sync: :py:class:`NXOpen.Preferences.SessionPdmSynchroniseOnSaveType` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: None.
    """
    UnpopulatedBehaviour: SessionPdmUnpopulatedBehaviourType = ...
    """
    Returns or sets  the behaviour when an unpopulated part is loaded 
    
    <hr>
    
    Getter Method
    
    Signature ``UnpopulatedBehaviour`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionPdmUnpopulatedBehaviourType` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnpopulatedBehaviour`` 
    
    :param behaviour: 
    :type behaviour: :py:class:`NXOpen.Preferences.SessionPdmUnpopulatedBehaviourType` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: None.
    """


class RulePreferences():
    """
    Provides methods for manipulating the Knowledge Fusion preferences in a session.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetSearchLibraries(self) -> 'list[str]':
        """
        Get the search libraries for user classes.  
        
        Signature ``GetSearchLibraries()`` 
        
        :returns:  search libraries  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_kf_author ("UG/Knowledge Fusion - Author") OR pts_author ("Product Template Studio (Author)")
        """
        ...
    
    
    def SetSearchLibraries(self, userLibraries: 'list[str]') -> None:
        """
        Set the search libraries for user classes.  
        
        Signature ``SetSearchLibraries(userLibraries)`` 
        
        :param userLibraries:  search libraries  
        :type userLibraries: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_kf_author ("UG/Knowledge Fusion - Author") OR pts_author ("Product Template Studio (Author)")
        """
        ...
    


class WidthMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Width():
    """
    Represents the line width 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", "Original"
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Original = 0  # WidthMemberType
    Thin = 1  # WidthMemberType
    Normal = 2  # WidthMemberType
    Thick = 3  # WidthMemberType
    One = 5  # WidthMemberType
    Two = 6  # WidthMemberType
    Three = 7  # WidthMemberType
    Four = 8  # WidthMemberType
    Five = 9  # WidthMemberType
    Six = 10  # WidthMemberType
    Seven = 11  # WidthMemberType
    Eight = 12  # WidthMemberType
    Nine = 13  # WidthMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HiddenLineSmallFeatureOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HiddenLineSmallFeatureOption():
    """
    Represents the small feature options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ShowAll", "Show All"
       "Simplify", "Simplify"
       "Hide", "Hide"
    """
    ShowAll = 0  # HiddenLineSmallFeatureOptionMemberType
    Simplify = 1  # HiddenLineSmallFeatureOptionMemberType
    Hide = 2  # HiddenLineSmallFeatureOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IGeneralViewPreferences():
    """
    Represents set of General View Styles applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class PartVisualizationEmphasisLayersOptions_Struct():
    """
    Specifies options that control the appearance of de-emphasized
    shaded geometry when the See-Thru style is set to Layers.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartVisualizationEmphasis.LayersOptions()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Rgb: NXOpen.NXColorRgb_Struct = ...
    """
    the color of de-emphasized shaded geometry when the
    See-Thru style is set to Layers.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXColorRgb_Struct`
    """
    Edges: PartVisualizationEmphasisEdgesType = ...
    """
    whether or not edges are displayed for de-emphasized
    shaded geometry when the See-Thru style is set to Layers.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.PartVisualizationEmphasisEdgesType`
    """
    EdgesRgb: NXOpen.NXColorRgb_Struct = ...
    """
    the color of edges displayed for de-emphasized shaded
    geometry when the See-Thru style is set to Layers.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXColorRgb_Struct`
    """
    Translucency: int = ...
    """
    the translucency of de-emphasized shaded geometry when
    the See-Thru style is set to Layers.  
    
    It is a percentage 
    value between 30 and 100. 
    <hr>
    
    Field Value
    Type:int
    """


class RoutingUserPreferences():
    """
    Allows access to the User Preferences section of the Routing Application View file.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX11.0.1
    """
    
    def GetStringPreference(self, name: str) -> tuple:
        """
        Returns the value of the named string user preference from the Application View file.  
        
        Signature ``GetStringPreference(name)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (isFound, value). isFound is a bool.   Was the preference found in the Application View file? value is a str.   The value of the preference, if found. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStringPreference(self, name: str, value: str) -> None:
        """
        Sets the value of the named string user preference in the current NX session.  
        
        Signature ``SetStringPreference(name, value)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :param value:  The value of the preference. Overwrites any existing value.  
        :type value: str 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringArrayPreference(self, name: str) -> tuple:
        """
        Returns the values of the named string array user preference from the Application View file.  
        
        Signature ``GetStringArrayPreference(name)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (isFound, values). isFound is a bool.   Was the preference found in the Application View file? values is a list of str.   The values of the preference, if found.  
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStringArrayPreference(self, name: str, values: 'list[str]') -> None:
        """
        Sets the values of the named string array user preference in the current NX session.  
        
        Signature ``SetStringArrayPreference(name, values)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :param values:  The values of the preference. Overwrites any existing values.   
        :type values: list of str 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerPreference(self, name: str) -> tuple:
        """
        Returns the value of the named integer user preference from the Application View file.  
        
        Signature ``GetIntegerPreference(name)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (isFound, value). isFound is a bool.   Was the preference found in the Application View file? value is a int.   The value of the preference, if found. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIntegerPreference(self, name: str, value: int) -> None:
        """
        Sets the value of the named integer user preference in the current NX session.  
        
        Signature ``SetIntegerPreference(name, value)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :param value:  The value of the preference. Overwrites any existing values.  
        :type value: int 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerArrayPreference(self, name: str) -> tuple:
        """
        Returns the values of the named integer array user preference from the Application View file.  
        
        Signature ``GetIntegerArrayPreference(name)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (isFound, values). isFound is a bool.   Was the preference found in the Application View file? values is a list of int.   The values of the preference, if found.  
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIntegerArrayPreference(self, name: str, values: 'list[int]') -> None:
        """
        Sets the values of the named integer array user preference in the current NX session.  
        
        Signature ``SetIntegerArrayPreference(name, values)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :param values:  The values of the preference. Overwrites any existing values.   
        :type values: list of int 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDoublePreference(self, name: str) -> tuple:
        """
        Returns the value of the named double user preference from the Application View file.  
        
        Signature ``GetDoublePreference(name)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (isFound, value). isFound is a bool.   Was the preference found in the Application View file? value is a float.   The value of the preference, if found. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDoublePreference(self, name: str, value: float) -> None:
        """
        Sets the value of the named double user preference in the current NX session.  
        
        Signature ``SetDoublePreference(name, value)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :param value:  The value of the preference. Overwrites any existing values.  
        :type value: float 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDoubleArrayPreference(self, name: str) -> tuple:
        """
        Returns the values of the named double array user preference from the Application View file.  
        
        Signature ``GetDoubleArrayPreference(name)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (isFound, values). isFound is a bool.   Was the preference found in the Application View file? values is a list of float.   The values of the preference, if found.  
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDoubleArrayPreference(self, name: str, values: 'list[float]') -> None:
        """
        Sets the values of the named double array user preference in the current NX session.  
        
        Signature ``SetDoubleArrayPreference(name, values)`` 
        
        :param name:  The name of the user preference.  
        :type name: str 
        :param values:  The values of the preference. Overwrites any existing values.   
        :type values: list of float 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class PartUserInterface():
    """
    Represents the set of User Interface preferences applicable to entire part.  
    
    Other User Interface 
    settings are available with :py:class:`NXOpen.Preferences.SessionUserInterface` for settings applicable to session
    and with SessionUserInterfaceUI class for UI based User Interface Preferences 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    DialogBoxDecimalPlaces: int = ...
    """
    Returns or sets  the dialog box decimal places 
    
    <hr>
    
    Getter Method
    
    Signature ``DialogBoxDecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DialogBoxDecimalPlaces`` 
    
    :param dialogBoxDecimalPlaces: 
    :type dialogBoxDecimalPlaces: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class PartVisualizationNamesBordersNameDisplayMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationNamesBordersNameDisplay():
    """
    Describes the available options for object name display selection 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", "Display is Off"
       "ViewOfDefinition", "View of Definition places each name in the work view current at the time of name creation"
       "WorkView", "Work View places all names in the current work view, even if the existing names had been defined in different views"
       "AllViews", "All Views places all names in the all views except the drawing member views"
    """
    Off = 0  # PartVisualizationNamesBordersNameDisplayMemberType
    ViewOfDefinition = 1  # PartVisualizationNamesBordersNameDisplayMemberType
    WorkView = 2  # PartVisualizationNamesBordersNameDisplayMemberType
    AllViews = 3  # PartVisualizationNamesBordersNameDisplayMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationNamesBorders():
    """
    Represents the set of visualization preferences of entire Working Part coming under Names/borders Tab  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class NameDisplay():
        """
        Describes the available options for object name display selection 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", "Display is Off"
           "ViewOfDefinition", "View of Definition places each name in the work view current at the time of name creation"
           "WorkView", "Work View places all names in the current work view, even if the existing names had been defined in different views"
           "AllViews", "All Views places all names in the all views except the drawing member views"
        """
        Off = 0  # PartVisualizationNamesBordersNameDisplayMemberType
        ViewOfDefinition = 1  # PartVisualizationNamesBordersNameDisplayMemberType
        WorkView = 2  # PartVisualizationNamesBordersNameDisplayMemberType
        AllViews = 3  # PartVisualizationNamesBordersNameDisplayMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CharacterSize: float = ...
    """
    Returns or sets  the character size.  
    
    Allows to define the size of the text in the object names 
    
    <hr>
    
    Getter Method
    
    Signature ``CharacterSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CharacterSize`` 
    
    :param characterSize: 
    :type characterSize: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ObjectNameDisplay: PartVisualizationNamesBordersNameDisplay = ...
    """
    Returns or sets  the object name display 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectNameDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationNamesBordersNameDisplay` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectNameDisplay`` 
    
    :param objectNameDisplay: 
    :type objectNameDisplay: :py:class:`NXOpen.Preferences.PartVisualizationNamesBordersNameDisplay` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShowModelViewBorders: bool = ...
    """
    Returns or sets  the show model view border flag.  
    
    allows to turn on and off the display of view borders. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowModelViewBorders`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowModelViewBorders`` 
    
    :param showModelViewBorders: 
    :type showModelViewBorders: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShowModelViewNames: bool = ...
    """
    Returns or sets   the show model view names flag.  
    
    Allows to turn on and off the display of view names.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowModelViewNames`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowModelViewNames`` 
    
    :param showModelViewNames: 
    :type showModelViewNames: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class VisibleLinesViewPreferences(IVisibleLinesViewPreferences):
    """
    Represents set of Visible Lines View Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.VisibleLines`
    
    .. versionadded:: NX5.0.0
    """
    VisibleColor: int = ...
    """
    Returns or sets  the visible color.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param visibleColor: 
    :type visibleColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleFont: Font = ...
    """
    Returns or sets  the visible font.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleFont`` 
    
    :param visibleFont: 
    :type visibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleWidth: Width = ...
    """
    Returns or sets  the visible width.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWidth`` 
    
    :param visibleWidth: 
    :type visibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class SessionSketchOriginTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionSketchOriginType():
    """
    Describes the available sketch origin types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InferFromPlaneSelection", "Sketch origin is inferred from placement face"
       "ProjectWorkPartOrigin", "Sketch origin is the projection of the work part origin"
    """
    InferFromPlaneSelection = 0  # SessionSketchOriginTypeMemberType
    ProjectWorkPartOrigin = 1  # SessionSketchOriginTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionSketchBackgroundTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionSketchBackgroundType():
    """
    Describes the available sketch background types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inherit", "Sketch background color is inherited from the parent application"
       "Plain", "Sketch background color is forced to the plain background color"
    """
    Inherit = 0  # SessionSketchBackgroundTypeMemberType
    Plain = 1  # SessionSketchBackgroundTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionSketchRigidSetConstraintTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionSketchRigidSetConstraintType():
    """
    Represents the constraint management option when creating a rigid sketch group.   
    
    .. deprecated::  NX11.0.0
       Use :py:class:`Preferences.SessionSketchGroupConstraintType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PreventConflict", "Preserves external constraints and prevents new conflicts"
       "PreserveAll", "Preserves all external constraints"
    """
    PreventConflict = 0  # SessionSketchRigidSetConstraintTypeMemberType
    PreserveAll = 1  # SessionSketchRigidSetConstraintTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionSketchGroupConstraintTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionSketchGroupConstraintType():
    """
    Represents the constraint management option when creating a rigid or scalable sketch group. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PreventConflict", "Preserves external constraints and prevents new conflicts"
       "PreserveAll", "Preserves all external constraints"
    """
    PreventConflict = 0  # SessionSketchGroupConstraintTypeMemberType
    PreserveAll = 1  # SessionSketchGroupConstraintTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionSketch():
    """
    Represents the set of sketch preferences applicable to entire session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class OriginType():
        """
        Describes the available sketch origin types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "InferFromPlaneSelection", "Sketch origin is inferred from placement face"
           "ProjectWorkPartOrigin", "Sketch origin is the projection of the work part origin"
        """
        InferFromPlaneSelection = 0  # SessionSketchOriginTypeMemberType
        ProjectWorkPartOrigin = 1  # SessionSketchOriginTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BackgroundType():
        """
        Describes the available sketch background types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inherit", "Sketch background color is inherited from the parent application"
           "Plain", "Sketch background color is forced to the plain background color"
        """
        Inherit = 0  # SessionSketchBackgroundTypeMemberType
        Plain = 1  # SessionSketchBackgroundTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RigidSetConstraintType():
        """
        Represents the constraint management option when creating a rigid sketch group.   
        
        .. deprecated::  NX11.0.0
           Use :py:class:`Preferences.SessionSketchGroupConstraintType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PreventConflict", "Preserves external constraints and prevents new conflicts"
           "PreserveAll", "Preserves all external constraints"
        """
        PreventConflict = 0  # SessionSketchRigidSetConstraintTypeMemberType
        PreserveAll = 1  # SessionSketchRigidSetConstraintTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GroupConstraintType():
        """
        Represents the constraint management option when creating a rigid or scalable sketch group. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PreventConflict", "Preserves external constraints and prevents new conflicts"
           "PreserveAll", "Preserves all external constraints"
        """
        PreventConflict = 0  # SessionSketchGroupConstraintTypeMemberType
        PreserveAll = 1  # SessionSketchGroupConstraintTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AutoDimensionsToArcCenter: bool = ...
    """
    Returns or sets  the setting that controls whether or not auto-dimensions are created to arc centers.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutoDimensionsToArcCenter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoDimensionsToArcCenter`` 
    
    :param toArcCenter: 
    :type toArcCenter: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    BackgroundOption: SessionSketchBackgroundType = ...
    """
    Returns or sets  the background option 
    
    <hr>
    
    Getter Method
    
    Signature ``BackgroundOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionSketchBackgroundType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackgroundOption`` 
    
    :param backgroundType: 
    :type backgroundType: :py:class:`NXOpen.Preferences.SessionSketchBackgroundType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ChangeViewOrientation: bool = ...
    """
    Returns or sets  the setting that controls whether the view orientation will be changed to align with the sketch when the sketch is activated.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeViewOrientation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeViewOrientation`` 
    
    :param changeViewOrientation: 
    :type changeViewOrientation: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ConstraintSymbolSize: float = ...
    """
    Returns or sets  the constraint symbol size.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintSymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstraintSymbolSize`` 
    
    :param constraintSymbolSize: 
    :type constraintSymbolSize: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ContinuousAutoDimensioning: bool = ...
    """
    Returns or sets  the setting that controls whether or not to continuously create auto dimensions in a sketch.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContinuousAutoDimensioning`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContinuousAutoDimensioning`` 
    
    :param continAutoDim: 
    :type continAutoDim: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    CreateInferredConstraints: bool = ...
    """
    Returns or sets  the setting that controls whether or not to create inferred constraints 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateInferredConstraints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateInferredConstraints`` 
    
    :param createInferredConstraints: 
    :type createInferredConstraints: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DefaultArcNamePrefix: str = ...
    """
    Returns or sets  the default arc name prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultArcNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultArcNamePrefix`` 
    
    :param defaultArcNamePrefix: 
    :type defaultArcNamePrefix: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DefaultConicNamePrefix: str = ...
    """
    Returns or sets  the default conic name prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultConicNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultConicNamePrefix`` 
    
    :param defaultConicNamePrefix: 
    :type defaultConicNamePrefix: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DefaultLineNamePrefix: str = ...
    """
    Returns or sets  the default line name prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultLineNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultLineNamePrefix`` 
    
    :param defaultLineNamePrefix: 
    :type defaultLineNamePrefix: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DefaultSketchNamePrefix: str = ...
    """
    Returns or sets  the default sketch name prefix  
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultSketchNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultSketchNamePrefix`` 
    
    :param defaultSketchNamePrefix: 
    :type defaultSketchNamePrefix: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DefaultSplineNamePrefix: str = ...
    """
    Returns or sets  the default spline name prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultSplineNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultSplineNamePrefix`` 
    
    :param defaultSplineNamePrefix: 
    :type defaultSplineNamePrefix: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DefaultVertexNamePrefix: str = ...
    """
    Returns or sets  the default vertex name prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultVertexNamePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultVertexNamePrefix`` 
    
    :param defaultVertexNamePrefix: 
    :type defaultVertexNamePrefix: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DelayEvaluation: bool = ...
    """
    Returns or sets  the setting that controls whether or not the sketch should be evaluated when a constraint is
    added to the sketch.  
    
    <hr>
    
    Getter Method
    
    Signature ``DelayEvaluation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DelayEvaluation`` 
    
    :param delayEvaluation: 
    :type delayEvaluation: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    DimensionLabel: SketchPreferencesDimensionLabelType = ...
    """
    Returns or sets  the dimension label 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SketchPreferencesDimensionLabelType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionLabel`` 
    
    :param dimensionLabel: 
    :type dimensionLabel: :py:class:`NXOpen.Preferences.SketchPreferencesDimensionLabelType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DisplayAutoDimensions: bool = ...
    """
    Returns or sets  the setting that controls whether or not to display auto dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayAutoDimensions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayAutoDimensions`` 
    
    :param displayAutoDimensions: 
    :type displayAutoDimensions: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayConstraintSymbols: bool = ...
    """
    Returns or sets  the setting that controls whether or not to display constraint symbols 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayConstraintSymbols`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayConstraintSymbols`` 
    
    :param displayConstraintSymbols: 
    :type displayConstraintSymbols: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayDOFArrows: bool = ...
    """
    Returns or sets  the setting that controls whether or not the degree of freedom arrows are displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayDOFArrows`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayDOFArrows`` 
    
    :param displayDOFArrows: 
    :type displayDOFArrows: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DisplayObjectColor: bool = ...
    """
    Returns or sets  the setting that controls whether or not sketch objects should be displayed in their true color 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayObjectColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayObjectColor`` 
    
    :param displayObjColor: 
    :type displayObjColor: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayObjectName: bool = ...
    """
    Returns or sets  the setting that controls whether or not objects are displayed with their names in sketch.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayObjectName`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayObjectName`` 
    
    :param displayObjectName: 
    :type displayObjectName: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayParenthesesOnReferenceDimensions: bool = ...
    """
    Returns or sets  the setting that controls whether or not to display parentheses on reference dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayParenthesesOnReferenceDimensions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayParenthesesOnReferenceDimensions`` 
    
    :param displayParentheses: 
    :type displayParentheses: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayReferenceGeometry: bool = ...
    """
    Returns or sets  the setting that controls whether or not the reference geometry are displayed on inactive sketches.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayReferenceGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayReferenceGeometry`` 
    
    :param displayReferenceGeometry: 
    :type displayReferenceGeometry: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplaySectionMappingWarning: bool = ...
    """
    Returns or sets  the display section mapping warning flag.  
    
    If this is true, when user exits
    sketcher, would get a warning that some dependent feature section may require mapping 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplaySectionMappingWarning`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplaySectionMappingWarning`` 
    
    :param displaySectionMappingWarning: 
    :type displaySectionMappingWarning: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DisplayVertices: bool = ...
    """
    Returns or sets  the setting that controls whether or not to display sketch vertices.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayVertices`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayVertices`` 
    
    :param displayVertices: 
    :type displayVertices: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DynamicConstraintDisplay: bool = ...
    """
    Returns or sets  the setting that controls whether or not constraint symbols are displayed if the associated geometry is very small.  
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicConstraintDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicConstraintDisplay`` 
    
    :param dynamicConstraintDisplay: 
    :type dynamicConstraintDisplay: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FixedTextSize: float = ...
    """
    Returns or sets  the dimension text size when the text size fixed flag is set.  
    
    <hr>
    
    Getter Method
    
    Signature ``FixedTextSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FixedTextSize`` 
    
    :param fixedTextSize: 
    :type fixedTextSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    GroupConstraintOption: SessionSketchGroupConstraintType = ...
    """
    Returns or sets  the sketch group external constraint management option 
    
    <hr>
    
    Getter Method
    
    Signature ``GroupConstraintOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionSketchGroupConstraintType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GroupConstraintOption`` 
    
    :param constraintType: 
    :type constraintType: :py:class:`NXOpen.Preferences.SessionSketchGroupConstraintType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    MaintainBlankStatus: bool = ...
    """
    Returns or sets  the setting that controls whether or not previously blanked objects will be visible when a sketch is activated 
    
    <hr>
    
    Getter Method
    
    Signature ``MaintainBlankStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaintainBlankStatus`` 
    
    :param keepBlank: 
    :type keepBlank: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MaintainLayerStatus: bool = ...
    """
    Returns or sets  the setting that controls whether or not the work layer remains the same or returns to its previous 
    value when a sketch is deactivated.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaintainLayerStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaintainLayerStatus`` 
    
    :param maintainLayerStatus: 
    :type maintainLayerStatus: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OriginOption: SessionSketchOriginType = ...
    """
    Returns or sets  the origin option 
    
    <hr>
    
    Getter Method
    
    Signature ``OriginOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionSketchOriginType` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`SketchInPlaceBuilder.ProjectWorkPartOrigin` and :py:meth:`SketchInPlaceBuilder.MakeOriginAssociative` and :py:meth:`SketchInPlaceBuilder.SketchOrigin` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OriginOption`` 
    
    :param originType: 
    :type originType: :py:class:`NXOpen.Preferences.SessionSketchOriginType` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`SketchInPlaceBuilder.ProjectWorkPartOrigin` and :py:meth:`SketchInPlaceBuilder.MakeOriginAssociative` and :py:meth:`SketchInPlaceBuilder.SketchOrigin` instead.
    
    License requirements: None.
    """
    RetainDimensions: bool = ...
    """
    Returns or sets  the retain dimensions flag.  
    
    If it is True, sketch dimensions continue to display after a sketch is deactivated.  
    
    <hr>
    
    Getter Method
    
    Signature ``RetainDimensions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.0.1
       Use :py:meth:`Annotations.AnnotationManager.MakePmi` and :py:meth:`Annotations.AnnotationManager.RemovePmi` with individual dimensions instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RetainDimensions`` 
    
    :param retainDimensions: 
    :type retainDimensions: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.0.1
       Use :py:meth:`Annotations.AnnotationManager.MakePmi` and :py:meth:`Annotations.AnnotationManager.RemovePmi` with individual dimensions instead.
    
    License requirements: None.
    """
    RigidSetConstraintOption: SessionSketchRigidSetConstraintType = ...
    """
    Returns or sets  the rigid set external constraint management option 
    
    <hr>
    
    Getter Method
    
    Signature ``RigidSetConstraintOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionSketchRigidSetConstraintType` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Preferences.SessionSketch.GroupConstraintOption` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RigidSetConstraintOption`` 
    
    :param constraintType: 
    :type constraintType: :py:class:`NXOpen.Preferences.SessionSketchRigidSetConstraintType` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Preferences.SessionSketch.GroupConstraintOption` instead.
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ScaleOnFirstDrivingDimension: bool = ...
    """
    Returns or sets  the setting that controls whether or not the entire active sketch is scaled
    about the sketch origin when the first non-angular driving dimension is applied.  
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleOnFirstDrivingDimension`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleOnFirstDrivingDimension`` 
    
    :param scaleOnFirstDrivingDimension: 
    :type scaleOnFirstDrivingDimension: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SnapAngle: float = ...
    """
    Returns or sets  the snap angle.  
    
    This is snap angle tolerance for vertical, horizontal, parallel, and perpendicular 
    lines.The default value is 3 and maximum value is 20 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapAngle`` 
    
    :param snapAngle: 
    :type snapAngle: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SolvingTolerance: float = ...
    """
    Returns or sets  the sketch solving tolerance.  
    
    This specifies the maximum allowable distance when solving the sketch
    constraints. The tolerance value must be greater than 1e-08. 
    
    <hr>
    
    Getter Method
    
    Signature ``SolvingTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolvingTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    TextSizeFixed: bool = ...
    """
    Returns or sets  the setting that controls whether or not dimension text size is fixed.  
    
    If it is True, text size adjusts opposite of zoom scale so that dimensions appear a constant size. 
    
    <hr>
    
    Getter Method
    
    Signature ``TextSizeFixed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextSizeFixed`` 
    
    :param textSizeFixed: 
    :type textSizeFixed: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    UpdateSketchOnly: bool = ...
    """
    Returns or sets  the setting that controls whether or not to update only the sketch while sketching using Direct Sketch.  
    
    When 
    this preference is set to false, an update will propagate through the whole model 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateSketchOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateSketchOnly`` 
    
    :param delayModelUpdate: 
    :type delayModelUpdate: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    UseSolvingTolerance: bool = ...
    """
    Returns or sets  the setting that controls whether or not to use user input for sketch solving tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseSolvingTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseSolvingTolerance`` 
    
    :param useTolerance: 
    :type useTolerance: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """


class SketchPreferencesDimensionLabelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SketchPreferencesDimensionLabelType():
    """
    Describes the different options for displaying dimension labels. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", "Displays the entire expression such as P2=P3*4"
       "Name", "Displays only the name of the expression, such as P2"
       "Value", "Displays the numerical value of the expression"
    """
    Expression = 0  # SketchPreferencesDimensionLabelTypeMemberType
    Name = 1  # SketchPreferencesDimensionLabelTypeMemberType
    Value = 2  # SketchPreferencesDimensionLabelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SketchPreferences():
    """
    Represents the set of sketch preferences applicable on :py:class:`NXOpen.Sketch` object  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Sketch`
    
    .. versionadded:: NX3.0.0
    """
    
    class DimensionLabelType():
        """
        Describes the different options for displaying dimension labels. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", "Displays the entire expression such as P2=P3*4"
           "Name", "Displays only the name of the expression, such as P2"
           "Value", "Displays the numerical value of the expression"
        """
        Expression = 0  # SketchPreferencesDimensionLabelTypeMemberType
        Name = 1  # SketchPreferencesDimensionLabelTypeMemberType
        Value = 2  # SketchPreferencesDimensionLabelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ApplySketchPreferences(self, dimDisplayFlag: int) -> None:
        """
        Applies sketch preferences set by user.  
        
        The dimDisplayFlag is the API version of the UI setting of 
        Retain Dimensions which was last available for use in NX 6. The setting still exists in the UI for 
        legacy parts that have a sketch with Retain Dimensions enabled.  However, once the setting is turned off,
        it cannot be turned on again. This functionality is replaced by :py:meth:`NXOpen.Annotations.AnnotationManager.MakePmi`
        in an active sketch or :py:meth:`NXOpen.Features.EditDimensionBuilder.DisplayAsPmi`` when not in an active sketch.
        
        Signature ``ApplySketchPreferences(dimDisplayFlag)`` 
        
        :param dimDisplayFlag:  If sketch dimensions are already displayed outside of an active sketch,                                         Set 0 to turn off the display of dimensions outside of the active sketch.  
        :type dimDisplayFlag: int 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    ConstraintSymbolSize: float = ...
    """
    Returns or sets  the constraint symbol size  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintSymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstraintSymbolSize`` 
    
    :param constraintSize: 
    :type constraintSize: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    ContinuousAutoDimensioningSetting: bool = ...
    """
    Returns or sets  the setting that controls whether or not to continuously create auto dimensions in a sketch.  
    
    If the option is true (On) then the auto dimensioner will be 
    automatically executed after an individual curve is created in a sketch. 
    
    <hr>
    
    Getter Method
    
    Signature ``ContinuousAutoDimensioningSetting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContinuousAutoDimensioningSetting`` 
    
    :param autoDim: 
    :type autoDim: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    CreateInferredConstraints: bool = ...
    """
    Returns or sets  the setting that controls whether or not inferred constraints are automatically created when curves and points are created in the sketch.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateInferredConstraints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateInferredConstraints`` 
    
    :param createInferredConstraints: 
    :type createInferredConstraints: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DimensionLabel: SketchPreferencesDimensionLabelType = ...
    """
    Returns or sets  the dimension label.  
    
    Controls how expressions in sketch dimensions are displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SketchPreferencesDimensionLabelType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionLabel`` 
    
    :param dimensionLabel: 
    :type dimensionLabel: :py:class:`NXOpen.Preferences.SketchPreferencesDimensionLabelType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DisplayObjectColor: bool = ...
    """
    Returns or sets  the setting that controls whether or not objects are displayed in their actual color in sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayObjectColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayObjectColor`` 
    
    :param displayObjectColor: 
    :type displayObjectColor: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayObjectName: bool = ...
    """
    Returns or sets  the setting that controls whether or not objects are displayed with their names in sketch.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayObjectName`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayObjectName`` 
    
    :param displayObjectName: 
    :type displayObjectName: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayParenthesesOnReferenceDimensions: bool = ...
    """
    Returns or sets  the setting that controls whether or not parentheses are displayed on reference dimensions.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayParenthesesOnReferenceDimensions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayParenthesesOnReferenceDimensions`` 
    
    :param displayParentheses: 
    :type displayParentheses: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayReferenceGeometry: bool = ...
    """
    Returns or sets  the setting that controls whether or not the reference geometry are displayed on inactive sketches 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayReferenceGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayReferenceGeometry`` 
    
    :param displayReferenceGeometry: 
    :type displayReferenceGeometry: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    DisplayVertices: bool = ...
    """
    Returns or sets  the setting that controls whether or not vertices are displayed in an active sketch.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayVertices`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayVertices`` 
    
    :param displayVertices: 
    :type displayVertices: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    FixedTextSize: float = ...
    """
    Returns or sets  the fixed text size.  
    
    It is the visible dimension size when text size fixed is enabled. 
    
    <hr>
    
    Getter Method
    
    Signature ``FixedTextSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FixedTextSize`` 
    
    :param fixedTextSize: 
    :type fixedTextSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    SolvingTolerance: float = ...
    """
    Returns or sets  the sketch solving tolerance.  
    
    This specifies the maximum allowable distance between two objects 
    when solving the sketch constraints for the given sketch. The tolerance value must be greater than 1e-08. 
    
    <hr>
    
    Getter Method
    
    Signature ``SolvingTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolvingTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    TextSizeFixed: bool = ...
    """
    Returns or sets  the setting that controls whether or not the dimension text size should be fixed.  
    
    <hr>
    
    Getter Method
    
    Signature ``TextSizeFixed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextSizeFixed`` 
    
    :param textSizeFixed: 
    :type textSizeFixed: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """
    UseSolvingTolerance: bool = ...
    """
    Returns or sets  the setting that controls whether or not to use user input for sketch solving tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseSolvingTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseSolvingTolerance`` 
    
    :param useTolerance: 
    :type useTolerance: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT")
    """


class SessionVisualizationVisual():
    """
    Represents all UI based session Visualization visual preferences   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.UI`
    
    .. versionadded:: NX3.0.0
    """
    
    def GetViewFromPoint(self, screenX: int, screenY: int) -> tuple:
        """
        If specified screen coordinates are contained in a displayed view,
        returns the view and the corresponding view coordinates.  
        
        Otherwise,
        returns None. Supported for Windows systems only. 
        
        Signature ``GetViewFromPoint(screenX, screenY)`` 
        
        :param screenX: 
        :type screenX: int 
        :param screenY: 
        :type screenY: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (view, viewPoint). view is a :py:class:`NXOpen.View`. viewPoint is a :py:class:`NXOpen.Point3d`. 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    FullSceneAntialiasing: bool = ...
    """
    Returns or sets  the scene antialiasing flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``FullSceneAntialiasing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FullSceneAntialiasing`` 
    
    :param fullSceneAntialiasing: 
    :type fullSceneAntialiasing: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LineAntialiasing: bool = ...
    """
    Returns or sets  the line antialiasing flag.  
    
    True value specifies that lines, curves, and edges are drawn more smoothly 
    
    <hr>
    
    Getter Method
    
    Signature ``LineAntialiasing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineAntialiasing`` 
    
    :param lineAntialiasing: 
    :type lineAntialiasing: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Translucency: bool = ...
    """
    Returns or sets  the translucency flag.  
    
    True value specifies that each shaded object is drawn with the translucency setting 
    specified with Edit->Object Display. False value specify that all objects in Fully Shaded or Partially Shaded 
    views appear opaque, regardless of their individual translucency settings.  
    
    <hr>
    
    Getter Method
    
    Signature ``Translucency`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Translucency`` 
    
    :param translucency: 
    :type translucency: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeDisplay_Struct():
    """
    The members of the following structure are the display data for an
    object in a flat pattern drawing member view.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartFlexiblePrintedCircuitDesign.FlatPatternObjectTypeDisplay()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Type: PartFlexiblePrintedCircuitDesignFlatPatternObjectType = ...
    """
    Object type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternObjectType`
    """
    IsEnabled: int = ...
    """
    Enabled status for the object type 
    <hr>
    
    Field Value
    Type:int
    """
    Color: NXOpen.NXColor = ...
    """
    Object color 
    <hr>
    
    Field Value
    Type:Id
    """
    Layer: int = ...
    """
    Object Layer 
    <hr>
    
    Field Value
    Type:int
    """
    Font: NXOpen.DisplayableObjectObjectFont = ...
    """
    Object font 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectFont`
    """
    Width: NXOpen.DisplayableObjectObjectWidth = ...
    """
    Object width 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
    """


class VisualizationHandlesHandleSizeValueMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VisualizationHandlesHandleSizeValue():
    """
    Specifies size values for the default handle size. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Small", "Small Handle Size"
       "Medium", "Medium Handle Size"
       "Large", "Large Handle Size"
    """
    Small = 0  # VisualizationHandlesHandleSizeValueMemberType
    Medium = 1  # VisualizationHandlesHandleSizeValueMemberType
    Large = 2  # VisualizationHandlesHandleSizeValueMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VisualizationHandles():
    """
    Represents the set of visualization preferences under handles tab applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX7.5.0
    """
    
    class HandleSizeValue():
        """
        Specifies size values for the default handle size. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Small", "Small Handle Size"
           "Medium", "Medium Handle Size"
           "Large", "Large Handle Size"
        """
        Small = 0  # VisualizationHandlesHandleSizeValueMemberType
        Medium = 1  # VisualizationHandlesHandleSizeValueMemberType
        Large = 2  # VisualizationHandlesHandleSizeValueMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    HandleSize: int = ...
    """
    Returns or sets  the default handle size 
    
    <hr>
    
    Getter Method
    
    Signature ``HandleSize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandleSize`` 
    
    :param handleSize: 
    :type handleSize: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ShowHandleHints: bool = ...
    """
    Returns or sets  the show handle hints flag.  
    
    If true displays handle hint when handle is preselected  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowHandleHints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowHandleHints`` 
    
    :param showHandleHints: 
    :type showHandleHints: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """


class PostProcessing():
    """
    CAE Post Processing preferences    
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX8.0.1
    """
    NoModelDisplayOnPostviewCreation: bool = ...
    """
    Returns or sets  the flag which indicates that no finite element model data will displayed when postviews are created
    
    <hr>
    
    Getter Method
    
    Signature ``NoModelDisplayOnPostviewCreation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoModelDisplayOnPostviewCreation`` 
    
    :param emptyview: 
    :type emptyview: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """


class IVirtualIntersectionsViewPreferences():
    """
    Represents set of Virtual Intersections View Preferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class SessionVisualizationHighQualityImageImageSizeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionVisualizationHighQualityImageImageSizeType():
    """
    The size at which to generate a High Quality Image. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FillView", " - "
       "AnsiA", " - "
       "AnsiB", " - "
       "AnsiC", " - "
       "AnsiD", " - "
       "AnsiE", " - "
       "IsoA4", " - "
       "IsoA3", " - "
       "IsoA2", " - "
       "IsoA1", " - "
       "IsoA0", " - "
       "UserDefined", " - "
       "TrueSize", " - "
    """
    FillView = 0  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    AnsiA = 1  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    AnsiB = 2  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    AnsiC = 3  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    AnsiD = 4  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    AnsiE = 5  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    IsoA4 = 6  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    IsoA3 = 7  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    IsoA2 = 8  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    IsoA1 = 9  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    IsoA0 = 10  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    UserDefined = 11  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    TrueSize = 12  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionVisualizationHighQualityImageResolutionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionVisualizationHighQualityImageResolutionType():
    """
    The resolution to use when generating a High Quality Image. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Draft", " - "
       "Low", " - "
       "Medium", " - "
       "High", " - "
       "UserDefined", " - "
    """
    Draft = 0  # SessionVisualizationHighQualityImageResolutionTypeMemberType
    Low = 1  # SessionVisualizationHighQualityImageResolutionTypeMemberType
    Medium = 2  # SessionVisualizationHighQualityImageResolutionTypeMemberType
    High = 3  # SessionVisualizationHighQualityImageResolutionTypeMemberType
    UserDefined = 4  # SessionVisualizationHighQualityImageResolutionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionVisualizationHighQualityImagePlotQualityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionVisualizationHighQualityImagePlotQualityType():
    """
    Describes the quality desired when plotting the High Quality Image 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fine", " - "
       "Medium", " - "
       "Rough", " - "
       "Coarse", " - "
    """
    Fine = 0  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
    Medium = 1  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
    Rough = 2  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
    Coarse = 3  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionVisualizationHighQualityImageOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionVisualizationHighQualityImageOrientationType():
    """
    Whether the High Quality Image is to be generated with
    portrait or landscape orientation 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Landscape", " - "
       "Portrait", " - "
    """
    Landscape = 0  # SessionVisualizationHighQualityImageOrientationTypeMemberType
    Portrait = 1  # SessionVisualizationHighQualityImageOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionVisualizationHighQualityImage():
    """
    Represents the High Quality Image preferences for the entire session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX4.0.0
    """
    
    class ImageSizeType():
        """
        The size at which to generate a High Quality Image. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FillView", " - "
           "AnsiA", " - "
           "AnsiB", " - "
           "AnsiC", " - "
           "AnsiD", " - "
           "AnsiE", " - "
           "IsoA4", " - "
           "IsoA3", " - "
           "IsoA2", " - "
           "IsoA1", " - "
           "IsoA0", " - "
           "UserDefined", " - "
           "TrueSize", " - "
        """
        FillView = 0  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        AnsiA = 1  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        AnsiB = 2  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        AnsiC = 3  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        AnsiD = 4  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        AnsiE = 5  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        IsoA4 = 6  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        IsoA3 = 7  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        IsoA2 = 8  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        IsoA1 = 9  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        IsoA0 = 10  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        UserDefined = 11  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        TrueSize = 12  # SessionVisualizationHighQualityImageImageSizeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ResolutionType():
        """
        The resolution to use when generating a High Quality Image. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Draft", " - "
           "Low", " - "
           "Medium", " - "
           "High", " - "
           "UserDefined", " - "
        """
        Draft = 0  # SessionVisualizationHighQualityImageResolutionTypeMemberType
        Low = 1  # SessionVisualizationHighQualityImageResolutionTypeMemberType
        Medium = 2  # SessionVisualizationHighQualityImageResolutionTypeMemberType
        High = 3  # SessionVisualizationHighQualityImageResolutionTypeMemberType
        UserDefined = 4  # SessionVisualizationHighQualityImageResolutionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PlotQualityType():
        """
        Describes the quality desired when plotting the High Quality Image 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fine", " - "
           "Medium", " - "
           "Rough", " - "
           "Coarse", " - "
        """
        Fine = 0  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
        Medium = 1  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
        Rough = 2  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
        Coarse = 3  # SessionVisualizationHighQualityImagePlotQualityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationType():
        """
        Whether the High Quality Image is to be generated with
        portrait or landscape orientation 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Landscape", " - "
           "Portrait", " - "
        """
        Landscape = 0  # SessionVisualizationHighQualityImageOrientationTypeMemberType
        Portrait = 1  # SessionVisualizationHighQualityImageOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetImageSize(self) -> tuple:
        """
        Returns the image size to use for the generation of the High Quality Image.  
        
        x_size and y_size vary only for User Defined image size type.
        For other image size types, the values returned in them are the x and y
        sizes fixed for the image size type. 
        
        Signature ``GetImageSize()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (imageSize, xSize, ySize). imageSize is a :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImageImageSizeType`. xSize is a int.   X Pixel size. See note above. ySize is a int.   Y Pixel size. See note above 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetImageSize(self, imageSize: SessionVisualizationHighQualityImageImageSizeType, xSize: int, ySize: int) -> None:
        """
        Specifies the image size to use for the generation of the High Quality Image.  
        
        x_size and y_size only apply for User Defined image size type.
        For other image size types, they are ignored. 
        
        Signature ``SetImageSize(imageSize, xSize, ySize)`` 
        
        :param imageSize: 
        :type imageSize: :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImageImageSizeType` 
        :param xSize:  X Pixel size.  Used only if image_size is user_defined  
        :type xSize: int 
        :param ySize:  Y Pixel size.  Used only if image_size is user_defined  
        :type ySize: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetResolution(self) -> tuple:
        """
        Returns the resolution to use when generating a High Quality Image.  
        
        The resolution is not used if the image_size is fill_view.
        dots_per_inch is variable only for User Defined resolution type. For other
        resolution types, the returned dots_per_inch is the number of dots
        per inch which is fixed for the given resolution type.  
        
        Signature ``GetResolution()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (resolution, dotsPerInch). resolution is a :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImageResolutionType`. dotsPerInch is a int.   Dots per inch.  See note above. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetResolution(self, resolution: SessionVisualizationHighQualityImageResolutionType, dotsPerInch: int) -> None:
        """
        Specifies the resolution to use when generating a High Quality Image.  
        
        The given resolution is not used if the image_size is fill_view.
        dots_per_inch is used only for User Defined resolution.  For other
        resolutions types, the input dots_per_inch is ignored. 
        
        Signature ``SetResolution(resolution, dotsPerInch)`` 
        
        :param resolution: 
        :type resolution: :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImageResolutionType` 
        :param dotsPerInch:  Dots per inch.                                        Used only if resolution is user_defined  
        :type dotsPerInch: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    Orientation: SessionVisualizationHighQualityImageOrientationType = ...
    """
    Returns or sets  the orientation for the High Quality Image (portrait or landscape).  
    
    orientation is not used if image_size is fill_view or user_defined. 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImageOrientationType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImageOrientationType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    PlotQuality: SessionVisualizationHighQualityImagePlotQualityType = ...
    """
    Returns or sets  the quality of the plot of the High Quality Image.  
    
    plot_quality is not used if image_size is fill_view 
    
    <hr>
    
    Getter Method
    
    Signature ``PlotQuality`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImagePlotQualityType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlotQuality`` 
    
    :param plotQuality: 
    :type plotQuality: :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImagePlotQualityType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SubRegion: bool = ...
    """
    Returns or sets  the setting for whether the High Quality Image is generated from a sub-region.  
    
    sub_region is only used when image_size is fill_view 
    
    <hr>
    
    Getter Method
    
    Signature ``SubRegion`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SubRegion`` 
    
    :param useSubRegion: 
    :type useSubRegion: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """


class SessionWorkPlaneObjectDisplayMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionWorkPlaneObjectDisplay():
    """
    Describes whether the object off work plane is normal display or dim and selectable or dim and non selectable   
    
    .. deprecated::  NX8.5.0
       See :py:class:`NXOpen.Preferences.SessionVisualizationEmphasis`.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "Normal Display"
       "DimAndSelectable", "Dim and Selectable"
       "DimAndNonSelectable", "Dim and Non Selectable"
    """
    Normal = 0  # SessionWorkPlaneObjectDisplayMemberType
    DimAndSelectable = 1  # SessionWorkPlaneObjectDisplayMemberType
    DimAndNonSelectable = 2  # SessionWorkPlaneObjectDisplayMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionWorkPlane():
    """
    Represents the set of WorkPlane preferences applicable to session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.5.0
       See :py:class:`NXOpen.Preferences.SessionVisualizationEmphasis`.
    """
    
    class ObjectDisplay():
        """
        Describes whether the object off work plane is normal display or dim and selectable or dim and non selectable   
        
        .. deprecated::  NX8.5.0
           See :py:class:`NXOpen.Preferences.SessionVisualizationEmphasis`.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "Normal Display"
           "DimAndSelectable", "Dim and Selectable"
           "DimAndNonSelectable", "Dim and Non Selectable"
        """
        Normal = 0  # SessionWorkPlaneObjectDisplayMemberType
        DimAndSelectable = 1  # SessionWorkPlaneObjectDisplayMemberType
        DimAndNonSelectable = 2  # SessionWorkPlaneObjectDisplayMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ObjectOffWorkPlane: SessionWorkPlaneObjectDisplay = ...
    """
    Returns or sets  the object off work plane.  
    
    Comes under Display tab. This preference is to de-emphasize or "dim" all objects in the 
    work plane. 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectOffWorkPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionWorkPlaneObjectDisplay` 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.5.0
       See :py:class:`NXOpen.Preferences.SessionVisualizationEmphasis`.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectOffWorkPlane`` 
    
    :param objectOffWorkPlane: 
    :type objectOffWorkPlane: :py:class:`NXOpen.Preferences.SessionWorkPlaneObjectDisplay` 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.5.0
       See :py:class:`NXOpen.Preferences.SessionVisualizationEmphasis`.
    
    License requirements: None.
    """


class GeneralDisplayIdOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralDisplayIdOption():
    """
    Represents the display id options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Orientation", "Orientation"
       "Name", "Name"
    """
    NotSet = 0  # GeneralDisplayIdOptionMemberType
    Orientation = 1  # GeneralDisplayIdOptionMemberType
    Name = 2  # GeneralDisplayIdOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IHiddenLinesViewPreferences():
    """
    Represents set of HiddenLinesViewStyle applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class GeneralExtractedEdgesOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralExtractedEdgesOption():
    """
    Represents the extracted edges options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Associative", "Associative"
       "NonAssociative", "Non-Associative"
    """
    NotSet = 0  # GeneralExtractedEdgesOptionMemberType
    Associative = 1  # GeneralExtractedEdgesOptionMemberType
    NonAssociative = 2  # GeneralExtractedEdgesOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartLibraryNodeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartLibraryNodeType():
    """
    Type of nodes in the part library. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "Normal node, may contain part table children. Doesn't have any part table information."
       "Table", "Part table node. Contains columns/rows that specify parts."
       "Part", "Part node, contains information necessary for loading/using a routing part."
    """
    Normal = 0  # RoutingPartLibraryNodeTypeMemberType
    Table = 1  # RoutingPartLibraryNodeTypeMemberType
    Part = 2  # RoutingPartLibraryNodeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartLibraryColumnTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartLibraryColumnType():
    """
    Type of column values. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Integer", "Integer values."
       "Real", "Floating-point values."
       "String", "String values."
    """
    Integer = 0  # RoutingPartLibraryColumnTypeMemberType
    Real = 1  # RoutingPartLibraryColumnTypeMemberType
    String = 4  # RoutingPartLibraryColumnTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartLibraryRootTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartLibraryRootType():
    """
    Type of root nodes. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "Top of entire part table."
       "Stock", "Top node for selecting stocks."
       "Wire", "Top node for selecting wires."
       "Part", "Top node for selecting parts."
    """
    Top = 0  # RoutingPartLibraryRootTypeMemberType
    Stock = 1  # RoutingPartLibraryRootTypeMemberType
    Wire = 2  # RoutingPartLibraryRootTypeMemberType
    Part = 3  # RoutingPartLibraryRootTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartLibraryColumnStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartLibraryColumnStatus():
    """
    Hidden status of a column. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotHidden", "Column is displayed in Specify Item."
       "Hidden", "Column is not displayed in Specify Item."
    """
    NotHidden = 0  # RoutingPartLibraryColumnStatusMemberType
    Hidden = 1  # RoutingPartLibraryColumnStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartLibraryColumn_Struct():
    """
    Part table column type.  
    
    .
    Constructor: 
    NXOpen.Preferences.RoutingPartLibrary.Column()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Column name.  
    
    PART_NUMBER is the index column for
    all part tables.  
    <hr>
    
    Field Value
    Type:str
    """
    Hidden: RoutingPartLibraryColumnStatus = ...
    """
    Whether or not the column is used for selection
    in the specify item dialog.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.RoutingPartLibraryColumnStatus`
    """
    Type: RoutingPartLibraryColumnType = ...
    """
    The value type the column stores.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.RoutingPartLibraryColumnType`
    """


class RoutingPartLibrary():
    """
    Represents a Routing Part library.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingPart`
    
    .. versionadded:: NX4.0.0
    """
    
    class NodeType():
        """
        Type of nodes in the part library. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "Normal node, may contain part table children. Doesn't have any part table information."
           "Table", "Part table node. Contains columns/rows that specify parts."
           "Part", "Part node, contains information necessary for loading/using a routing part."
        """
        Normal = 0  # RoutingPartLibraryNodeTypeMemberType
        Table = 1  # RoutingPartLibraryNodeTypeMemberType
        Part = 2  # RoutingPartLibraryNodeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ColumnType():
        """
        Type of column values. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Integer", "Integer values."
           "Real", "Floating-point values."
           "String", "String values."
        """
        Integer = 0  # RoutingPartLibraryColumnTypeMemberType
        Real = 1  # RoutingPartLibraryColumnTypeMemberType
        String = 4  # RoutingPartLibraryColumnTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RootType():
        """
        Type of root nodes. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "Top of entire part table."
           "Stock", "Top node for selecting stocks."
           "Wire", "Top node for selecting wires."
           "Part", "Top node for selecting parts."
        """
        Top = 0  # RoutingPartLibraryRootTypeMemberType
        Stock = 1  # RoutingPartLibraryRootTypeMemberType
        Wire = 2  # RoutingPartLibraryRootTypeMemberType
        Part = 3  # RoutingPartLibraryRootTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ColumnStatus():
        """
        Hidden status of a column. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotHidden", "Column is displayed in Specify Item."
           "Hidden", "Column is not displayed in Specify Item."
        """
        NotHidden = 0  # RoutingPartLibraryColumnStatusMemberType
        Hidden = 1  # RoutingPartLibraryColumnStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Column():
        """
        Part table column type.  
        
        .
        Constructor: 
        NXOpen.Preferences.RoutingPartLibrary.Column()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Column name.  
        
        PART_NUMBER is the index column for
        all part tables.  
        <hr>
        
        Field Value
        Type:str
        """
        Hidden: RoutingPartLibraryColumnStatus = ...
        """
        Whether or not the column is used for selection
        in the specify item dialog.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.RoutingPartLibraryColumnStatus`
        """
        Type: RoutingPartLibraryColumnType = ...
        """
        The value type the column stores.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.RoutingPartLibraryColumnType`
        """
    
    
    def GetRoot(self) -> str:
        """
        Returns the root node of the part library.  
        
        Returns None if there
        is no root node.  
        
        Signature ``GetRoot()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFilteredRoot(self, rootType: RoutingPartLibraryRootType) -> str:
        """
        Returns the root node of the part library using the current active
        discipline.  
        
        Returns None if there is no root node.   
        
        Signature ``GetFilteredRoot(rootType)`` 
        
        :param rootType:  Which root node to find.  
        :type rootType: :py:class:`NXOpen.Preferences.RoutingPartLibraryRootType` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetChildrenNodes(self, parent: str) -> 'list[str]':
        """
        Returns the children nodes of the input node.  
        
        Signature ``GetChildrenNodes(parent)`` 
        
        :param parent: 
        :type parent: str 
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetNodeType(self, node: str) -> RoutingPartLibraryNodeType:
        """
        Returns the node type.  
        
        Signature ``GetNodeType(node)`` 
        
        :param node: 
        :type node: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetTableDefinition(self, node: str) -> 'list[RoutingPartLibraryColumn_Struct]':
        """
        Returns the table information for a given 
        :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType.Table <NXOpen.Preferences.RoutingPartLibraryNodeType>` node.  
        
        Signature ``GetTableDefinition(node)`` 
        
        :param node:  Must be a :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType.Table <NXOpen.Preferences.RoutingPartLibraryNodeType>`                                     type node, any other node type causes an exception.  
        :type node: str 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Preferences.RoutingPartLibraryColumn_Struct` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPartDefinition(self, node: str) -> NXOpen.Routing.CharacteristicList:
        """
        Returns the part information for a given 
        :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType.Part <NXOpen.Preferences.RoutingPartLibraryNodeType>` node.  
        
        Signature ``GetPartDefinition(node)`` 
        
        :param node:  Must be a :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType.Part <NXOpen.Preferences.RoutingPartLibraryNodeType>`                                     type node, any other node type causes an exception.  
        :type node: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateCriteria(self) -> NXOpen.Routing.CharacteristicList:
        """
        Creates a new empty :py:class:`NXOpen.Routing.CharacteristicList` object that can be used
        as input to :py:meth:`Preferences.RoutingPartLibrary.MatchCriteria` and
        :py:meth:`Preferences.RoutingPartLibrary.MatchCriteriaWithFilter`.  
        
        Signature ``CreateCriteria()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def MatchCriteria(self, startNode: str, criteria: NXOpen.Routing.CharacteristicList) -> 'list[NXOpen.Routing.CharacteristicList]':
        """
        Search for entries in the part library table nodes that match the given set of 
        criteria.  
        
        Returns an array of :py:class:`NXOpen.Routing.CharacteristicList` objects that
        can be used for assigning stock or placing parts. Searches all nodes at or below
        the input node for matches.
        
        Performs matches on the name/value pairs in the input critiera, to the column name
        column values in the part tables below the input node.  Ignores names in the input 
        critiera that don't have a corresonding column in the part for matching.
        
        Signature ``MatchCriteria(startNode, criteria)`` 
        
        :param startNode:  Must not be a :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType.Part <NXOpen.Preferences.RoutingPartLibraryNodeType>`                                     node.  
        :type startNode: str 
        :param criteria: 
        :type criteria: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def MatchCriteriaWithFilter(self, startNode: str, criteria: NXOpen.Routing.CharacteristicList) -> 'list[NXOpen.Routing.CharacteristicList]':
        """
        Similar to :py:meth:`Preferences.RoutingPartLibrary.MatchCriteria`, however it also
        filters out any parts that don't match the critiera specified by the current specification.  
        
        Signature ``MatchCriteriaWithFilter(startNode, criteria)`` 
        
        :param startNode:  Must not be a :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType.Part <NXOpen.Preferences.RoutingPartLibraryNodeType>`                                     node.  
        :type startNode: str 
        :param criteria: 
        :type criteria: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FilterOnCurrentSpecifications(self, match: NXOpen.Routing.CharacteristicList, partClasses: 'list[str]') -> bool:
        """
        Does a characteristic list match the current discipline and specifications?  
        
        Signature ``FilterOnCurrentSpecifications(match, partClasses)`` 
        
        :param match:  The matching part's Characteristic List to check against the                                            current discipline and specifications.  
        :type match: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param partClasses:  The part class hierarchy list that contains the matching part.                                             The first item in the list is the top node name. The last                                             item in the list is the lowest node that contains the matching part.  
        :type partClasses: list of str 
        :returns:  Is the characteristic list valid under the current discipline and specifications?  
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class PartSheetmetalFlatPatternObjectTypeDisplay_Struct():
    """
    The members of the following structure are the display data for an
    object in a flat pattern drawing member view.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartSheetmetal.FlatPatternObjectTypeDisplay()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Type: PartSheetmetalFlatPatternObjectType = ...
    """
    Object type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternObjectType`
    """
    IsEnabled: int = ...
    """
    Enabled status for the object type 
    <hr>
    
    Field Value
    Type:int
    """
    Color: NXOpen.NXColor = ...
    """
    Object color 
    <hr>
    
    Field Value
    Type:Id
    """
    Layer: int = ...
    """
    Object Layer 
    <hr>
    
    Field Value
    Type:int
    """
    Font: NXOpen.DisplayableObjectObjectFont = ...
    """
    Object font 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectFont`
    """
    Width: NXOpen.DisplayableObjectObjectWidth = ...
    """
    Object width 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
    """


class InheritPmiPreferences():
    """
    Represents set of InheritPmiPreferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.InheritPmi`
    
    .. versionadded:: NX5.0.0
    """
    CrosshatchPmiLightweightSectionView: bool = ...
    """
    Returns or sets  the cross-hatch setting for the current inherited PMI Lightweight Section View 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchPmiLightweightSectionView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchPmiLightweightSectionView`` 
    
    :param crosshatch: 
    :type crosshatch: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritGdt: GdtOption = ...
    """
    Returns or sets  the Inherit GD and T option 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritGdt`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GdtOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritGdt`` 
    
    :param gdtOption: 
    :type gdtOption: :py:class:`NXOpen.Preferences.GdtOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritPmiMode: PmiOption = ...
    """
    Returns or sets  the Status of inherit pmi mode.  
    
    <hr>
    
    Getter Method
    
    Signature ``InheritPmiMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PmiOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritPmiMode`` 
    
    :param pmiOption: 
    :type pmiOption: :py:class:`NXOpen.Preferences.PmiOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritPmiToDrawing: bool = ...
    """
    Returns or sets  the Status of pmi inherited to drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``InheritPmiToDrawing`` 
    
    :returns:  Inherit to drawing flag  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritPmiToDrawing`` 
    
    :param pmiOption: 
    :type pmiOption: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class GeneralWireframeColorSourceOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralWireframeColorSourceOption():
    """
    Represents the wireframe color source options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromBody", "From Body"
       "FromFace", "From Face"
    """
    FromBody = 0  # GeneralWireframeColorSourceOptionMemberType
    FromFace = 1  # GeneralWireframeColorSourceOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationEmphasisWireframeBlendOptions_Struct():
    """
    Specifies options that control the color-blending effect used to
    de-emphasize wireframe geometry.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartVisualizationEmphasis.WireframeBlendOptions()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    BlendColor: NXOpen.NXColor = ...
    """
    the de-emphasis color that is blended with object colors
    to de-emphasize wireframe geometry.  
    
    <hr>
    
    Field Value
    Type:Id
    """
    BlendPercentage: int = ...
    """
    the percentage of the de-emphasis color that is blended
    with object colors to de-emphasize wireframe geometry
    It is a value between 10 and 100.  
    
    <hr>
    
    Field Value
    Type:int
    """


class SessionVisualizationScreenViewTriadLocationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionVisualizationScreenViewTriadLocation():
    """
    The view triad location types.   
    
    .. deprecated::  NX12.0.0
       Use :py:class:`NXOpen.Preferences.PartVisualizationScreenJA_PART_VIS_SCREEN_PREFS_ViewTriadLocation` instead
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BottomLeft", "View triad display on the bottom left of the view"
       "BottomRight", "View triad display on the bottom right of the view"
    """
    BottomLeft = 0  # SessionVisualizationScreenViewTriadLocationMemberType
    BottomRight = 1  # SessionVisualizationScreenViewTriadLocationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionVisualizationScreen():
    """
    Represents the set of visualization preferences under screen tab applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class ViewTriadLocation():
        """
        The view triad location types.   
        
        .. deprecated::  NX12.0.0
           Use :py:class:`NXOpen.Preferences.PartVisualizationScreenJA_PART_VIS_SCREEN_PREFS_ViewTriadLocation` instead
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BottomLeft", "View triad display on the bottom left of the view"
           "BottomRight", "View triad display on the bottom right of the view"
        """
        BottomLeft = 0  # SessionVisualizationScreenViewTriadLocationMemberType
        BottomRight = 1  # SessionVisualizationScreenViewTriadLocationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CsysFixedSizeOnScreen: bool = ...
    """
    Returns or sets   whether the CSYS display in fixed size on screen.  
    
    <hr>
    
    Getter Method
    
    Signature ``CsysFixedSizeOnScreen`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.CsysFixedSizeOnScreen`` instead
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CsysFixedSizeOnScreen`` 
    
    :param fixedSizeOnScreen: 
    :type fixedSizeOnScreen: bool 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.CsysFixedSizeOnScreen`` instead
    
    License requirements: None.
    """
    CsysShowThrough: bool = ...
    """
    Returns or sets   whether the CSYS display in show through mode 
    
    <hr>
    
    Getter Method
    
    Signature ``CsysShowThrough`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.CsysShowThrough`` instead
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CsysShowThrough`` 
    
    :param showThrough: 
    :type showThrough: bool 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.CsysShowThrough`` instead
    
    License requirements: None.
    """
    DisplayCenterOfRotation: bool = ...
    """
    Returns or sets  whether a graphic representing the center of rotation is displayed 
    during interactive view rotation.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayCenterOfRotation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayCenterOfRotation`` 
    
    :param displayCenterOfRotation: 
    :type displayCenterOfRotation: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DoFitOnHideOrShow: bool = ...
    """
    Returns or sets  the option to specify whether a Fit should be done when a Hide or Show is performed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoFitOnHideOrShow`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoFitOnHideOrShow`` 
    
    :param doFitOnHideOrShow: 
    :type doFitOnHideOrShow: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ExcludeDatumsFromFit: bool = ...
    """
    Returns or sets  the option to specify whether datum objects and planar ship grids should not be examined
    when a Fit is done.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExcludeDatumsFromFit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExcludeDatumsFromFit`` 
    
    :param excludeDatumsFromFit: 
    :type excludeDatumsFromFit: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FitPercentage: int = ...
    """
    Returns or sets  the fit percentage.  
    
    Specifies the area of the graphics display to be occupied by the model after a fit operation 
    is performed. For example, a fit percentage of 100% scales the model so that it occupies 100% of the graphics display. 
    Similarly, a fit percentage of 80% fits the model within 80% of the graphics display area. 
    
    <hr>
    
    Getter Method
    
    Signature ``FitPercentage`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitPercentage`` 
    
    :param fitPercentage: 
    :type fitPercentage: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FitToSectionClipPlanes: bool = ...
    """
    Returns or sets  the option to specify whether, when sectioning is enabled for a view, the bounds computed
    by a Fit operation should be limited by the sectioning clipping planes.  
    
    <hr>
    
    Getter Method
    
    Signature ``FitToSectionClipPlanes`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitToSectionClipPlanes`` 
    
    :param fitToSectionClipPlanes: 
    :type fitToSectionClipPlanes: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    HighPrecisionRotation: bool = ...
    """
    Returns or sets  whether mouse-driven rotation is to be done using a higher precision
    than normal, which means that a given mouse motion will result in
    a smaller rotation.  
    
    <hr>
    
    Getter Method
    
    Signature ``HighPrecisionRotation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighPrecisionRotation`` 
    
    :param highPrecisionRotation: 
    :type highPrecisionRotation: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InferEdgeOutput: bool = ...
    """
    Returns or sets  whether plotted edges reflect onscreen edge appearance.  
    
    This option 
    affects the appearance of edges in output produced by Plot, Print, CGM 
    Export and similar functions. It affects edge appearance for modeling 
    views only, not for views on a drawing sheet. When this option is disabled, 
    the appearance of plotted edges is controlled by edge display options 
    (Hidden Edges, Silhouettes, Smooth Edges) used for Static Wireframe 
    rendering style. When this option is enabled, the appearance of plotted 
    edges is inferred from onscreen edge appearance. 
    
    <hr>
    
    Getter Method
    
    Signature ``InferEdgeOutput`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.4
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InferEdgeOutput`` 
    
    :param inferEdgeOutput: 
    :type inferEdgeOutput: bool 
    
    .. versionadded:: NX4.0.4
    
    License requirements: None.
    """
    PreserveFieldOfViewAngleForFit: bool = ...
    """
    Returns or sets  whether for a perspective view the Fit operation should not change the
    field of view angle from the camera position to the view bounds 
    
    <hr>
    
    Getter Method
    
    Signature ``PreserveFieldOfViewAngleForFit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreserveFieldOfViewAngleForFit`` 
    
    :param preserveFieldOfViewAngleForFit: 
    :type preserveFieldOfViewAngleForFit: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RotationPointDelay: int = ...
    """
    Returns or sets   
    
    <hr>
    
    Getter Method
    
    Signature ``RotationPointDelay`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationPointDelay`` 
    
    :param rotationPointDelay: 
    :type rotationPointDelay: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    TriadLocation: SessionVisualizationScreenViewTriadLocation = ...
    """
    Returns or sets  the view triad location 
    
    <hr>
    
    Getter Method
    
    Signature ``TriadLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationScreenViewTriadLocation` 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.TriadLocation`` instead
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TriadLocation`` 
    
    :param triadLocation: 
    :type triadLocation: :py:class:`NXOpen.Preferences.SessionVisualizationScreenViewTriadLocation` 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.TriadLocation`` instead
    
    License requirements: None.
    """
    TriadVisibility: int = ...
    """
    Returns or sets   
    
    <hr>
    
    Getter Method
    
    Signature ``TriadVisibility`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.TriadVisibility`` instead
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TriadVisibility`` 
    
    :param triadVisibility: 
    :type triadVisibility: int 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationScreen.TriadVisibility`` instead
    
    License requirements: None.
    """


class GeneralViewPreferences(IGeneralViewPreferences):
    """
    Represents set of General View Preferencess applicable to drafting views.  
    
    These settings apply to any newly created base view.
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.General`
    
    .. versionadded:: NX5.0.0
    """
    AngleDecimalPointFormat: DecimalPointCharacter = ...
    """
    Returns or sets  the decimal point character to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleDecimalPointFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.DecimalPointCharacter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleDecimalPointFormat`` 
    
    :param format: 
    :type format: :py:class:`NXOpen.Preferences.DecimalPointCharacter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AngleFormat: AngleFormat = ...
    """
    Returns or sets  the format to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.AngleFormat` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleFormat`` 
    
    :param format: 
    :type format: :py:class:`NXOpen.Preferences.AngleFormat` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AnglePrecision: int = ...
    """
    Returns or sets  the precision to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnglePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnglePrecision`` 
    
    :param precision: 
    :type precision: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticAnchorPoint: bool = ...
    """
    Returns or sets  the status of Automatic anchor point 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticAnchorPoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticAnchorPoint`` 
    
    :param automaticAnchorPoint: 
    :type automaticAnchorPoint: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticUpdate: bool = ...
    """
    Returns or sets  the status of Automatic Update.  
    
    if true, then position, 
    hidden lines, silhouettes, view bounds, section views and 
    section view details are updated after a model change else 
    above items are not updated after a model change. 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticUpdate`` 
    
    :param automaticUpdate: 
    :type automaticUpdate: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BoundaryStatus: bool = ...
    """
    Returns or sets  the boundary status.  
    
    This option determines whether or not a view's out-of-date status 
    includes its boundary. If True, the system checks the view boundary and marks it out of 
    date if changes to non-solid geometry would cause the view's boundary to change when updated, 
    else the system does not perform view boundary checks.
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryStatus`` 
    
    :param boundaryStatus: 
    :type boundaryStatus: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Centerlines: bool = ...
    """
    Returns or sets  the status of center line.  
    
    If true it automatically creates 
    linear, cylindrical, and bolt circle centerlines (with a 
    circular instance set) for views where the hole or pin axis
    is perpendicular or parallel to the plane of the drawing view.
    
    <hr>
    
    Getter Method
    
    Signature ``Centerlines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Centerlines`` 
    
    :param centerlines: 
    :type centerlines: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayId: GeneralDisplayIdOption = ...
    """
    Returns or sets  the display identifier option for a member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayId`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralDisplayIdOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayId`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Preferences.GeneralDisplayIdOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ExtractedEdges: GeneralExtractedEdgesOption = ...
    """
    Returns or sets  the extracted edge that provides an alternative way to display
    model geometry in a drawing view.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtractedEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralExtractedEdgesOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtractedEdges`` 
    
    :param edgesOption: 
    :type edgesOption: :py:class:`NXOpen.Preferences.GeneralExtractedEdgesOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FramebarHorizontal: bool = ...
    """
    Returns or sets  the status of horizontal framebar.  
    
    If true it automatically creates 
    horizontal framebar for views when ship axis matches with view axis
    for horizontal framebar.
    
    <hr>
    
    Getter Method
    
    Signature ``FramebarHorizontal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FramebarHorizontal`` 
    
    :param horizontal: 
    :type horizontal: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FramebarVertical: bool = ...
    """
    Returns or sets  the status of vertical framebar.  
    
    If true it automatically creates 
    vertical framebar for views when ship axis matches with view axis
    for vertical framebar.
    
    <hr>
    
    Getter Method
    
    Signature ``FramebarVertical`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FramebarVertical`` 
    
    :param vertical: 
    :type vertical: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LegacyView: bool = ...
    """
    Returns or sets  the leagcy view toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LegacyView`` 
    
    :returns:  Returns the legacy view toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegacyView`` 
    
    :param legacyView:  Sets a legacy view toggle value on the general sub-builder  
    :type legacyView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LightweightView: bool = ...
    """
    Returns or sets  the view representation enum on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LightweightView`` 
    
    :returns:  Returns the view representation option that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LightweightView`` 
    
    :param lightweightView:  Sets a view representation option on the general sub-builder  
    :type lightweightView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LockmethodView: GeneralViewLockmethodOption = ...
    """
    Returns or sets  the lock method setting on the Configuration tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LockmethodView`` 
    
    :returns:  Returns the lock method option on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockmethodView`` 
    
    :param lockmethodView:  Sets a lockmethod option on the general sub-builder  
    :type lockmethodView: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    Reference: bool = ...
    """
    Returns or sets  the status of reference.  
    
    A view can have a status of either Active or Reference. 
    So if the status is True the view is considered a reference view else considered 
    as an Active view.
    
    <hr>
    
    Getter Method
    
    Signature ``Reference`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reference`` 
    
    :param reference: 
    :type reference: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowAngleLeadingZeros: bool = ...
    """
    Returns or sets  the status of leading zeros display in view angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowAngleLeadingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowAngleLeadingZeros`` 
    
    :param show: 
    :type show: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowAngleTrailingZeros: bool = ...
    """
    Returns or sets  the status of trailing zeros display in view angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowAngleTrailingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowAngleTrailingZeros`` 
    
    :param show: 
    :type show: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Silhouettes: bool = ...
    """
    Returns or sets  the status of silhouettes curves, if true silhouettes for 
    selected drawing member views are added else silhouettes are removed 
    from the selected member views.  
    
    <hr>
    
    Getter Method
    
    Signature ``Silhouettes`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Silhouettes`` 
    
    :param silhouettes: 
    :type silhouettes: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SnapshotView: bool = ...
    """
    Returns or sets  the snapshot toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapshotView`` 
    
    :returns:  Returns the snapshot view toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Preferences.GeneralViewPreferences.LockmethodView()` instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot).
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapshotView`` 
    
    :param snapshotView:  Sets a snapshot view toggle value on the general sub-builder  
    :type snapshotView: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Preferences.GeneralViewPreferences.LockmethodView()` instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot).
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: float = ...
    """
    Returns or sets  the value of tolerance that specifies a chord height tolerance
    value for silhouette and hidden line generation in a given 
    drawing view.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UvGrid: bool = ...
    """
    Returns or sets  the status of UV grid.  
    
    If true, grid curves for selected drawing
    member views are added else the grid curves are removed from 
    the selected member views.
    
    <hr>
    
    Getter Method
    
    Signature ``UvGrid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UvGrid`` 
    
    :param uvGrid: 
    :type uvGrid: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewQuality: GeneralViewQualityOption = ...
    """
    Returns or sets  the view quality that provides alternative ways to display
    geometry in a drawing member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``ViewQuality`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewQualityOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewQuality`` 
    
    :param viewQualityOption: 
    :type viewQualityOption: :py:class:`NXOpen.Preferences.GeneralViewQualityOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewRepresentation: GeneralViewRepresentationOption = ...
    """
    Returns or sets  the view representation enum on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewRepresentation`` 
    
    :returns:  Returns the view representation option that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewRepresentationOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewRepresentation`` 
    
    :param viewRepresentation:  Sets a view representation option on the general sub-builder  
    :type viewRepresentation: :py:class:`NXOpen.Preferences.GeneralViewRepresentationOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    WireframeColorSource: GeneralWireframeColorSourceOption = ...
    """
    Returns or sets  the source of the wireframe color for a member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``WireframeColorSource`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralWireframeColorSourceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WireframeColorSource`` 
    
    :param edgesOption: 
    :type edgesOption: :py:class:`NXOpen.Preferences.GeneralWireframeColorSourceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class RoutingApplicationViewAppTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingApplicationViewAppType():
    """
    Routing application types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Not currently in any of the routing applications."
       "Mechanical", "In routing mechanical application."
       "Electrical", "In routing electrical application."
       "Logical", "In routing logical application."
    """
    NotSet = 0  # RoutingApplicationViewAppTypeMemberType
    Mechanical = 1  # RoutingApplicationViewAppTypeMemberType
    Electrical = 2  # RoutingApplicationViewAppTypeMemberType
    Logical = 3  # RoutingApplicationViewAppTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingApplicationView():
    """
    The RoutingApplicationView class contains all of the various preferences and options
    available from the Routing Application View file.  
    
    In order to call any of the
    methods of this class (or it's contained objects), first call
    :py:meth:`Preferences.RoutingApplicationView.LoadAppView` to load defaults
    from the application view file.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX4.0.0
    """
    
    class AppType():
        """
        Routing application types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Not currently in any of the routing applications."
           "Mechanical", "In routing mechanical application."
           "Electrical", "In routing electrical application."
           "Logical", "In routing logical application."
        """
        NotSet = 0  # RoutingApplicationViewAppTypeMemberType
        Mechanical = 1  # RoutingApplicationViewAppTypeMemberType
        Electrical = 2  # RoutingApplicationViewAppTypeMemberType
        Logical = 3  # RoutingApplicationViewAppTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def LoadAppView(self, fileName: str) -> None:
        """
        Loads the preferences from an application view file.  
        
        This file may be either
        a legacy application view file (with a .apv extension) or a new XML style application
        view file (with a .xml extension).  See the Routing Administrator documentation for the
        format of these files.  Once an application view file is loaded, it cannot be
        unloaded.  After loading the file the first time in a session, subsequent loads do not pick
        up changes made to the application view file, but it does set the preferences to
        the cached values loaded from that file.
        Here is some example code, after the second call to
        :py:meth:`Preferences.RoutingApplicationView.LoadAppView` the current defaults
        are defaults initially read from the mechanical application view.
        
        Session.GetSession().Preferences.RoutingApplicationView.LoadAppView ( "ugroute_mech_in.xml" );
        
        Session.GetSession().Preferences.RoutingApplicationView.LoadAppView ( "ugroute_elec_in.xml" );
        
        Session.GetSession().Preferences.RoutingApplicationView.LoadAppView ( "ugroute_mech_in.xml" );
        
        Signature ``LoadAppView(fileName)`` 
        
        :param fileName:  filename of application view.  
        :type fileName: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDisciplines(self) -> 'list[str]':
        """
        Returns all of the disciplines available in the current application view.  
        
        Signature ``GetDisciplines()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSpecifications(self) -> 'list[str]':
        """
        Returns the specifications available in the current discipline.  
        
        Signature ``GetSpecifications()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRequiredCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Returns the intersection of the required stock characteristics and required
        part characteristics for the current discipline of the application view.  
        
        Signature ``GetRequiredCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOptionalCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Returns the intersection of the optional stock characteristics and optional
        part characteristics for the current discipline of the application view.  
        
        Signature ``GetOptionalCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFabricationCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Returns fabrication characteristics.  
        
        These characteristics
        must be set for any fabrication created out of a Routing assembly.  
        
        Signature ``GetFabricationCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ApplicationType: RoutingApplicationViewAppType = ...
    """
    Returns or sets  the given routing application type.  
    
    This is only used in the context of routing to execute design rules.
    Application type should be set to:py:class:`Preferences.RoutingApplicationViewAppType.None <Preferences.RoutingApplicationViewAppType>`
    before exiting from the routing applications. 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplicationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingApplicationViewAppType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ApplicationType`` 
    
    :param appType: 
    :type appType: :py:class:`NXOpen.Preferences.RoutingApplicationViewAppType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CurrentDiscipline: str = ...
    """
    Returns or sets  the current discipline.  
    
    A discipline value of "" (the empty string)
    indicates no current discipline.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentDiscipline`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentDiscipline`` 
    
    :param discipline: 
    :type discipline: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CurrentSpecification: str = ...
    """
    Returns or sets  the current specification for the current discipline.  
    
    A specification
    value of "" (the empty string) indicates no current specification. 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentSpecification`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentSpecification`` 
    
    :param currentSpec: 
    :type currentSpec: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Description: str = ...
    """
    Returns  the application view description.  
    
    <hr>
    
    Getter Method
    
    Signature ``Description`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Filename: str = ...
    """
    Returns  the filename of the current application view.  
    
    <hr>
    
    Getter Method
    
    Signature ``Filename`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Name: str = ...
    """
    Returns  the application view name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    PartPreferences: RoutingPart = ...
    """
    Routing preferences related to parts.  
    
    Signature ``PartPreferences`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPart`
    """
    CharacteristicPreferences: RoutingCharacteristics = ...
    """
    Preferences related to option/required characteristics.  
    
    Signature ``CharacteristicPreferences`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingCharacteristics`
    """
    RoutingStock: RoutingStock = ...
    """
    Stock preferences structure 
    
    Signature ``RoutingStock`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingStock`
    """
    RoutingPath: RoutingPath = ...
    """
    Path preferences structure 
    
    Signature ``RoutingPath`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPath`
    """
    RoutingMechanical: RoutingMechanical = ...
    """
    Routing mechanical preferences 
    
    Signature ``RoutingMechanical`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingMechanical`
    """
    RoutingLogical: RoutingLogical = ...
    """
    Routing logical preferences 
    
    Signature ``RoutingLogical`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingLogical`
    """
    RoutingElectrical: RoutingElectrical = ...
    """
    Routing electrical preferences structure 
    
    Signature ``RoutingElectrical`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingElectrical`
    """
    RoutingUserPreferences: RoutingUserPreferences = ...
    """
    Routing user preferences 
    
    Signature ``RoutingUserPreferences`` 
    
    .. versionadded:: NX11.0.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingUserPreferences`
    """


class IOrientationViewPreferences():
    """
    Represents set of IOrientationViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class PartAeroSheetmetal():
    """
    Represents the NX Sheetmetal preferences applicable to part   
    
    Preferences are in control of the part. They can not be created but can only be changed.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetJoggleStationaryRadius(self) -> NXOpen.Expression:
        """
        RETURNS the joggle stationary radius expression  
        
        Signature ``GetJoggleStationaryRadius()`` 
        
        :returns:  expression object for joggle stationary radius  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetJoggleStationaryRadius(self, updateModel: bool, stationaryRadius: str) -> None:
        """
        THE joggle stationary radius value string 
        
        Signature ``SetJoggleStationaryRadius(updateModel, stationaryRadius)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param stationaryRadius:  default joggle stationary radius value  
        :type stationaryRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def GetJoggleOffsetRadius(self) -> NXOpen.Expression:
        """
        RETURNS the joggle offset radius expression  
        
        Signature ``GetJoggleOffsetRadius()`` 
        
        :returns:  expression object for joggle offset radius  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetJoggleOffsetRadius(self, updateModel: bool, offsetRadius: str) -> None:
        """
        The joggle offset radius value 
        
        Signature ``SetJoggleOffsetRadius(updateModel, offsetRadius)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param offsetRadius:  default joggle offset radius value  
        :type offsetRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def GetJoggleDepthThreshold(self) -> NXOpen.Expression:
        """
        RETURNS the joggle depth threshold expression  
        
        Signature ``GetJoggleDepthThreshold()`` 
        
        :returns:  expression object for joggle depth threshold  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetJoggleDepthThreshold(self, updateModel: bool, depthThreshold: str) -> None:
        """
        THE joggle depth threshold value 
        
        Signature ``SetJoggleDepthThreshold(updateModel, depthThreshold)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param depthThreshold:  default joggle depth threshold value  
        :type depthThreshold: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def GetJoggleDistanceThreshold(self) -> NXOpen.Expression:
        """
        RETURNS the joggle distance threshold expression  
        
        Signature ``GetJoggleDistanceThreshold()`` 
        
        :returns:  expression object for joggle distance threshold  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetJoggleDistanceThreshold(self, updateModel: bool, distanceThreshold: str) -> None:
        """
        THE joggle distance threshold value 
        
        Signature ``SetJoggleDistanceThreshold(updateModel, distanceThreshold)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param distanceThreshold:  default joggle depth threshold value  
        :type distanceThreshold: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    


class ViewVisualizationSpecialEffectsColorHLS_Struct():
    """
    Represents three constituents of a HLS color pattern .  
    
    Constructor: 
    NXOpen.Preferences.ViewVisualizationSpecialEffects.ColorHLS()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Hue: float = ...
    """
    Hue in HSV pattern is the color type (such as red, blue, or yellow) Ranges from 0-360 
    <hr>
    
    Field Value
    Type:float
    """
    Lightness: float = ...
    """
    Lightness in HLS pattern Ranges from 0-255 
    <hr>
    
    Field Value
    Type:float
    """
    Saturation: float = ...
    """
    Saturation in HSV pattern is the "vibrancy" of the color Ranges from 0-255 
    <hr>
    
    Field Value
    Type:float
    """


class ViewVisualizationSpecialEffectsColorRGB_Struct():
    """
    Represents three constituents of a RGB color pattern .  
    
    Constructor: 
    NXOpen.Preferences.ViewVisualizationSpecialEffects.ColorRGB()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    RedColor: float = ...
    """
    Red in RGB pattern 
    <hr>
    
    Field Value
    Type:float
    """
    GreenColor: float = ...
    """
    Green in RGB pattern 
    <hr>
    
    Field Value
    Type:float
    """
    BlueColor: float = ...
    """
    Blue in RGB pattern 
    <hr>
    
    Field Value
    Type:float
    """


class SessionDraftingEdgeFaceDisplayTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionDraftingEdgeFaceDisplayType():
    """
    Describes the available edge face display types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DisplayAndEmphasize", " - "
       "CurvesOnly", " - "
    """
    DisplayAndEmphasize = 0  # SessionDraftingEdgeFaceDisplayTypeMemberType
    CurvesOnly = 1  # SessionDraftingEdgeFaceDisplayTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionDraftingAnnotationStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionDraftingAnnotationStyleType():
    """
    Describes the available types for annotation style preference 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TextboxAndLeaders", " - "
       "Detailed", " - "
    """
    TextboxAndLeaders = 0  # SessionDraftingAnnotationStyleTypeMemberType
    Detailed = 1  # SessionDraftingAnnotationStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionDraftingGridObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionDraftingGridObjectType():
    """
    Describes the available grid objects 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Drafting", "Drafting Grid"
       "Sketch", "Sketch Grid"
       "Sheetzone", "Sheet Zone Grid"
    """
    Drafting = 0  # SessionDraftingGridObjectTypeMemberType
    Sketch = 1  # SessionDraftingGridObjectTypeMemberType
    Sheetzone = 2  # SessionDraftingGridObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionDrafting():
    """
    Represents the set of Drafting preferences applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class EdgeFaceDisplayType():
        """
        Describes the available edge face display types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DisplayAndEmphasize", " - "
           "CurvesOnly", " - "
        """
        DisplayAndEmphasize = 0  # SessionDraftingEdgeFaceDisplayTypeMemberType
        CurvesOnly = 1  # SessionDraftingEdgeFaceDisplayTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AnnotationStyleType():
        """
        Describes the available types for annotation style preference 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TextboxAndLeaders", " - "
           "Detailed", " - "
        """
        TextboxAndLeaders = 0  # SessionDraftingAnnotationStyleTypeMemberType
        Detailed = 1  # SessionDraftingAnnotationStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GridObjectType():
        """
        Describes the available grid objects 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Drafting", "Drafting Grid"
           "Sketch", "Sketch Grid"
           "Sheetzone", "Sheet Zone Grid"
        """
        Drafting = 0  # SessionDraftingGridObjectTypeMemberType
        Sketch = 1  # SessionDraftingGridObjectTypeMemberType
        Sheetzone = 2  # SessionDraftingGridObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AutomaticCustomSymbolUpdate: bool = ...
    """
    Returns or sets  the automatic update drafting preferences for custom symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticCustomSymbolUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticCustomSymbolUpdate`` 
    
    :param automaticUpdateOption: 
    :type automaticUpdateOption: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    DynamicAlignment: bool = ...
    """
    Returns or sets  the dynamic alignment flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicAlignment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicAlignment`` 
    
    :param dynamicAlignment: 
    :type dynamicAlignment: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ExtractedEdgeFaceDisplay: SessionDraftingEdgeFaceDisplayType = ...
    """
    Returns or sets  the extracted edge face display 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtractedEdgeFaceDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionDraftingEdgeFaceDisplayType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtractedEdgeFaceDisplay`` 
    
    :param extractedEdgeFaceDisplay: 
    :type extractedEdgeFaceDisplay: :py:class:`NXOpen.Preferences.SessionDraftingEdgeFaceDisplayType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ForcedWelcomeMode: int = ...
    """
    Returns or sets  the Drafting Welcome mode, for autotests only 
    
    <hr>
    
    Getter Method
    
    Signature ``ForcedWelcomeMode`` 
    
    :returns:  0: no welcome, 1: ALWAYS welcome, 2: default  
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForcedWelcomeMode`` 
    
    :param enterWelcomeMode:  0: do NOT use welcome, 1: ALWAYS use welcome  
    :type enterWelcomeMode: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    GridObject: SessionDraftingGridObjectType = ...
    """
    Returns or sets  the drafting grid object.  
    
    <hr>
    
    Getter Method
    
    Signature ``GridObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionDraftingGridObjectType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridObject`` 
    
    :param drawingGridObject: 
    :type drawingGridObject: :py:class:`NXOpen.Preferences.SessionDraftingGridObjectType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    LoadComponentOnFacetedViewSelection: bool = ...
    """
    Returns or sets  the load on selection flag 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadComponentOnFacetedViewSelection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadComponentOnFacetedViewSelection`` 
    
    :param loadComponentOnFacetedViewSelection: 
    :type loadComponentOnFacetedViewSelection: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LoadComponentOnFacetedViewUpdate: bool = ...
    """
    Returns or sets  the load on update flag 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadComponentOnFacetedViewUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadComponentOnFacetedViewUpdate`` 
    
    :param loadComponentOnFacetedViewUpdate: 
    :type loadComponentOnFacetedViewUpdate: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SmartlightweightViewsLoadComponentOnDemand: bool = ...
    """
    Returns or sets  the load on demand flag 
    
    <hr>
    
    Getter Method
    
    Signature ``SmartlightweightViewsLoadComponentOnDemand`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmartlightweightViewsLoadComponentOnDemand`` 
    
    :param loadComponentOnDemand: 
    :type loadComponentOnDemand: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """


class DetailBoundaryOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DetailBoundaryOption():
    """
    Represents the boundary options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", "Circular boundary"
       "Rectangular", "Rectangular boundary"
    """
    Circular = 0  # DetailBoundaryOptionMemberType
    Rectangular = 1  # DetailBoundaryOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartFlexiblePrintedCircuitDesignFlatPatternObjectType():
    """
    The members of the following enumerated type are used to identify
    object types to the FlatPattern API. These are not the usual
    NX object types; they are ordinary NX objects that are known to
    the flat pattern feature for the type of outline they provide to
    a bend region, joggle region, or lightening hole. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BendCenterLine", "Deprecated"
       "BendUpCenterLine", " - "
       "BendDownCenterLine", " - "
       "BendTangentLine", " - "
       "OuterMoldLine", " - "
       "InnerMoldLine", " - "
       "ExteriorCurves", " - "
       "InteriorCurves", "Deprecated"
       "InteriorCutoutCurves", " - "
       "InteriorFeatureCurves", " - "
       "LighteningHoleCenter", " - "
       "JoggleLine", " - "
       "AddedTopGeometry", " - "
       "AddedBottomGeometry", " - "
       "ToolMarker", " - "
    """
    BendCenterLine = 0  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    BendUpCenterLine = 1  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    BendDownCenterLine = 2  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    BendTangentLine = 3  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    OuterMoldLine = 4  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    InnerMoldLine = 5  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    ExteriorCurves = 6  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    InteriorCurves = 7  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    InteriorCutoutCurves = 8  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    InteriorFeatureCurves = 9  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    LighteningHoleCenter = 10  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    JoggleLine = 11  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    AddedTopGeometry = 12  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    AddedBottomGeometry = 13  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    ToolMarker = 14  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType():
    """
    The following members are used to identify curve types of planar segment feature. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BendCenterLine", " - "
       "BendTangentLine", " - "
    """
    BendCenterLine = 0  # PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeMemberType
    BendTangentLine = 1  # PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeDisplayData_Struct():
    """
    The members of the following structure are the display data.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartFlexiblePrintedCircuitDesign.PlanarSegmentCurveTypeDisplayData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Type: PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType = ...
    """
    Curve type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType`
    """
    IsEnabled: int = ...
    """
    Enabled status for the curve type 
    <hr>
    
    Field Value
    Type:int
    """
    Color: NXOpen.NXColor = ...
    """
    Curve color 
    <hr>
    
    Field Value
    Type:Id
    """
    Font: NXOpen.DisplayableObjectObjectFont = ...
    """
    Curve font 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectFont`
    """
    Width: NXOpen.DisplayableObjectObjectWidth = ...
    """
    Curve width 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
    """


class PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct():
    """
    The members of the following structure are the display data for a
    callout in a flat pattern drawing member view.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartFlexiblePrintedCircuitDesign.FlatPatternCalloutTypeDisplay()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Type: str = ...
    """
    The name of the callout type.  
    
    The string is one returned by the 
    get_callout_data method, or can
    be hand-coded as the application name 'dot' the callout
    name, like this:
    "FlatPatternView.BendRadius". Neither name is
    case sensitive and blanks are not significant. This type
    of hand-coded callout type is usable as long as the
    callout type name is unique within the application name. 
    Beware of changing the defaults and loading old parts. 
    <hr>
    
    Field Value
    Type:str
    """
    IsEnabled: int = ...
    """
    Enabled status for the callout type.  
    
    <hr>
    
    Field Value
    Type:int
    """
    Name: str = ...
    """
    dialog name for the callout type.  
    
    <hr>
    
    Field Value
    Type:str
    """


class PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptions():
    """
    This enum represents the face that is the contact face
    of the Flexible Cable. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopFace", "Top face."
       "BottomFace", "Bottom face."
    """
    TopFace = 0  # PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptionsMemberType
    BottomFace = 1  # PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationType():
    """
    This enum represents orientation types for the flat pattern callouts 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Leadered", "Leadered"
       "Aligned", "Aligned"
    """
    Leadered = 0  # PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationTypeMemberType
    Aligned = 1  # PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartFlexiblePrintedCircuitDesign():
    """
    Represents the Flexible Printed Circuit Design preferences applicable to part   
    
    Preferences are in control of the part. They can not be created but can only be changed.
    
    .. versionadded:: NX4.0.0
    """
    
    class FlatPatternObjectType():
        """
        The members of the following enumerated type are used to identify
        object types to the FlatPattern API. These are not the usual
        NX object types; they are ordinary NX objects that are known to
        the flat pattern feature for the type of outline they provide to
        a bend region, joggle region, or lightening hole. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BendCenterLine", "Deprecated"
           "BendUpCenterLine", " - "
           "BendDownCenterLine", " - "
           "BendTangentLine", " - "
           "OuterMoldLine", " - "
           "InnerMoldLine", " - "
           "ExteriorCurves", " - "
           "InteriorCurves", "Deprecated"
           "InteriorCutoutCurves", " - "
           "InteriorFeatureCurves", " - "
           "LighteningHoleCenter", " - "
           "JoggleLine", " - "
           "AddedTopGeometry", " - "
           "AddedBottomGeometry", " - "
           "ToolMarker", " - "
        """
        BendCenterLine = 0  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        BendUpCenterLine = 1  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        BendDownCenterLine = 2  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        BendTangentLine = 3  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        OuterMoldLine = 4  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        InnerMoldLine = 5  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        ExteriorCurves = 6  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        InteriorCurves = 7  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        InteriorCutoutCurves = 8  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        InteriorFeatureCurves = 9  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        LighteningHoleCenter = 10  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        JoggleLine = 11  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        AddedTopGeometry = 12  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        AddedBottomGeometry = 13  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        ToolMarker = 14  # PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FlatPatternObjectTypeDisplay():
        """
        The members of the following structure are the display data for an
        object in a flat pattern drawing member view.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartFlexiblePrintedCircuitDesign.FlatPatternObjectTypeDisplay()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Type: PartFlexiblePrintedCircuitDesignFlatPatternObjectType = ...
        """
        Object type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternObjectType`
        """
        IsEnabled: int = ...
        """
        Enabled status for the object type 
        <hr>
        
        Field Value
        Type:int
        """
        Color: NXOpen.NXColor = ...
        """
        Object color 
        <hr>
        
        Field Value
        Type:Id
        """
        Layer: int = ...
        """
        Object Layer 
        <hr>
        
        Field Value
        Type:int
        """
        Font: NXOpen.DisplayableObjectObjectFont = ...
        """
        Object font 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectFont`
        """
        Width: NXOpen.DisplayableObjectObjectWidth = ...
        """
        Object width 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
        """
    
    
    class PlanarSegmentCurveType():
        """
        The following members are used to identify curve types of planar segment feature. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BendCenterLine", " - "
           "BendTangentLine", " - "
        """
        BendCenterLine = 0  # PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeMemberType
        BendTangentLine = 1  # PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PlanarSegmentCurveTypeDisplayData():
        """
        The members of the following structure are the display data.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartFlexiblePrintedCircuitDesign.PlanarSegmentCurveTypeDisplayData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Type: PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType = ...
        """
        Curve type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType`
        """
        IsEnabled: int = ...
        """
        Enabled status for the curve type 
        <hr>
        
        Field Value
        Type:int
        """
        Color: NXOpen.NXColor = ...
        """
        Curve color 
        <hr>
        
        Field Value
        Type:Id
        """
        Font: NXOpen.DisplayableObjectObjectFont = ...
        """
        Curve font 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectFont`
        """
        Width: NXOpen.DisplayableObjectObjectWidth = ...
        """
        Curve width 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
        """
    
    
    class FlatPatternCalloutTypeDisplay():
        """
        The members of the following structure are the display data for a
        callout in a flat pattern drawing member view.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartFlexiblePrintedCircuitDesign.FlatPatternCalloutTypeDisplay()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Type: str = ...
        """
        The name of the callout type.  
        
        The string is one returned by the 
        get_callout_data method, or can
        be hand-coded as the application name 'dot' the callout
        name, like this:
        "FlatPatternView.BendRadius". Neither name is
        case sensitive and blanks are not significant. This type
        of hand-coded callout type is usable as long as the
        callout type name is unique within the application name. 
        Beware of changing the defaults and loading old parts. 
        <hr>
        
        Field Value
        Type:str
        """
        IsEnabled: int = ...
        """
        Enabled status for the callout type.  
        
        <hr>
        
        Field Value
        Type:int
        """
        Name: str = ...
        """
        dialog name for the callout type.  
        
        <hr>
        
        Field Value
        Type:str
        """
    
    
    class FlexibleCableContactFaceOptions():
        """
        This enum represents the face that is the contact face
        of the Flexible Cable. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopFace", "Top face."
           "BottomFace", "Bottom face."
        """
        TopFace = 0  # PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptionsMemberType
        BottomFace = 1  # PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FlatPatternCalloutOrientationType():
        """
        This enum represents orientation types for the flat pattern callouts 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Leadered", "Leadered"
           "Aligned", "Aligned"
        """
        Leadered = 0  # PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationTypeMemberType
        Aligned = 1  # PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetThickness(self) -> NXOpen.Expression:
        """
        Returns the thickness expression  
        
        Signature ``GetThickness()`` 
        
        :returns:  expression object for sheet thickness  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetThickness(self, updateModel: bool, thickness: str) -> None:
        """
        Sets the thickness value string 
        
        Signature ``SetThickness(updateModel, thickness)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param thickness:  default thickness value for NX Sheetmetal solids  
        :type thickness: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetBendRadius(self) -> NXOpen.Expression:
        """
        Returns the bend radius expression  
        
        Signature ``GetBendRadius()`` 
        
        :returns:  expression object for radius of bend faces 
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetBendRadius(self, updateModel: bool, bendRadius: str) -> None:
        """
        Sets the bend radius value 
        
        Signature ``SetBendRadius(updateModel, bendRadius)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendRadius:  default bend radius value for bend faces  
        :type bendRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetBendReliefDepth(self) -> NXOpen.Expression:
        """
        Returns the bend relief depth  
        
        Signature ``GetBendReliefDepth()`` 
        
        :returns:  expression object for depth of bend relief  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetBendReliefDepth(self, updateModel: bool, bendReliefDepth: str) -> None:
        """
        Sets the bend relief depth value 
        
        Signature ``SetBendReliefDepth(updateModel, bendReliefDepth)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendReliefDepth:  default depth value for bend relief  
        :type bendReliefDepth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetBendReliefWidth(self) -> NXOpen.Expression:
        """
        Returns the bend relief width  
        
        Signature ``GetBendReliefWidth()`` 
        
        :returns:  expression object for width of bend relief  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetBendReliefWidth(self, updateModel: bool, bendReliefWidth: str) -> None:
        """
        Sets the bend relief depth value 
        
        Signature ``SetBendReliefWidth(updateModel, bendReliefWidth)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendReliefWidth:  default width value for bend relief  
        :type bendReliefWidth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetNeutralFactor(self) -> NXOpen.Expression:
        """
        Returns the neutral factor  
        
        Signature ``GetNeutralFactor()`` 
        
        :returns:  expression object for neutral factor of bend areas  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetNeutralFactor(self, updateModel: bool, neutralFactor: str) -> None:
        """
        Sets the bend relief depth value 
        
        Signature ``SetNeutralFactor(updateModel, neutralFactor)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param neutralFactor:  default neutral factor value for bend relief  
        :type neutralFactor: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetOuterCornerTreatmentValue(self) -> NXOpen.Expression:
        """
        Returns the out corner treatment value for Flat as Solid operations  
        
        Signature ``GetOuterCornerTreatmentValue()`` 
        
        :returns:  expression object for out corner treatment value  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetOuterCornerTreatmentValue(self, updateModel: bool, outerCornerTreatment: str) -> None:
        """
        Sets the outer corner treatment value for Flat as Solid operations 
        
        Signature ``SetOuterCornerTreatmentValue(updateModel, outerCornerTreatment)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param outerCornerTreatment:  default value for out corner treatment  
        :type outerCornerTreatment: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetOuterCornerTreatmentType(self) -> NXOpen.Features.SheetMetal.FeatureProperty:
        """
        Returns the outer corner treatment type in Flat as Solid operation  
        
        Signature ``GetOuterCornerTreatmentType()`` 
        
        :returns:  outer corner treatment type  
        :rtype: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetOuterCornerTreatmentType(self, updateModel: bool, outerCornerTreatmentType: NXOpen.Features.SheetMetal.FeatureProperty) -> None:
        """
        Sets the the outer corner treatment type in Flat as Solid operation 
        
        Signature ``SetOuterCornerTreatmentType(updateModel, outerCornerTreatmentType)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param outerCornerTreatmentType:  outer corner treatment type  
        :type outerCornerTreatmentType: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetInnerCornerTreatmentValue(self) -> NXOpen.Expression:
        """
        Returns the inner corner treatment value for Flat as Solid operations  
        
        Signature ``GetInnerCornerTreatmentValue()`` 
        
        :returns:  expression object for inner corner treatment value  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetInnerCornerTreatmentValue(self, updateModel: bool, innerCornerTreatment: str) -> None:
        """
        Sets the the inner corner treatment value for Flat as Solid operations 
        
        Signature ``SetInnerCornerTreatmentValue(updateModel, innerCornerTreatment)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param innerCornerTreatment:  default value for inner corner treatment  
        :type innerCornerTreatment: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetInnerCornerTreatmentType(self) -> NXOpen.Features.SheetMetal.FeatureProperty:
        """
        Returns the inner corner treatment type in Flat as Solid operation  
        
        Signature ``GetInnerCornerTreatmentType()`` 
        
        :returns:  outer corner treatment type  
        :rtype: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetInnerCornerTreatmentType(self, updateModel: bool, innerCornerTreatmentType: NXOpen.Features.SheetMetal.FeatureProperty) -> None:
        """
        Sets the inner corner treatment type in Flat as Solid operation 
        
        Signature ``SetInnerCornerTreatmentType(updateModel, innerCornerTreatmentType)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param innerCornerTreatmentType:  outer corner treatment type  
        :type innerCornerTreatmentType: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetIsBsplineSimplifiedInFlatSolid(self) -> bool:
        """
        Returns the flag indicating whether B-Splines are simplified as part of the Flat Solid creation 
        
        Signature ``GetIsBsplineSimplifiedInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetIsBsplineSimplifiedInFlatSolid(self, updateModel: bool, isBsplineSimplifiedInFlatSolid: bool) -> None:
        """
        Sets the flag indicating whether or not B-Splines are simplified as part of the Flat Solid creation
        
        Signature ``SetIsBsplineSimplifiedInFlatSolid(updateModel, isBsplineSimplifiedInFlatSolid)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param isBsplineSimplifiedInFlatSolid:  flag   
        :type isBsplineSimplifiedInFlatSolid: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetIsSystemGeneratedBendReliefRemovedInFlatSolid(self) -> bool:
        """
        Returns the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation 
        
        Signature ``GetIsSystemGeneratedBendReliefRemovedInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetIsSystemGeneratedBendReliefRemovedInFlatSolid(self, updateModel: bool, isSystemGeneratedBendReliefRemoved: bool) -> None:
        """
        Sets the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation
        
        Signature ``SetIsSystemGeneratedBendReliefRemovedInFlatSolid(updateModel, isSystemGeneratedBendReliefRemoved)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param isSystemGeneratedBendReliefRemoved:  flag   
        :type isSystemGeneratedBendReliefRemoved: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetMinimumArcToleranceInFlatSolid(self) -> float:
        """
        Returns the minimum arc tolerance during Flat Solid simplification  
        
        Signature ``GetMinimumArcToleranceInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetMinimumArcToleranceInFlatSolid(self, updateModel: bool, minimumArcToleranceInFlatSolid: float) -> None:
        """
        Sets the minimum arc tolerance during Flat Solid simplification 
        
        Signature ``SetMinimumArcToleranceInFlatSolid(updateModel, minimumArcToleranceInFlatSolid)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param minimumArcToleranceInFlatSolid:  flag   
        :type minimumArcToleranceInFlatSolid: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetDeviationalToleranceInFlatSolid(self) -> float:
        """
        Returns the deviational tolerance during Flat Solid simplification  
        
        Signature ``GetDeviationalToleranceInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetDeviationalToleranceInFlatSolid(self, updateModel: bool, deviationalToleranceInFlatSolid: float) -> None:
        """
        Sets the deviational tolerance during Flat Solid simplification 
        
        Signature ``SetDeviationalToleranceInFlatSolid(updateModel, deviationalToleranceInFlatSolid)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param deviationalToleranceInFlatSolid:  flag   
        :type deviationalToleranceInFlatSolid: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetMaterialNames(self) -> 'list[str]':
        """
        Returns the material names defined in the material standards table  
        
        Signature ``GetMaterialNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetMaterial(self) -> str:
        """
        Returns the material name saved with the part  
        
        Signature ``GetMaterial()`` 
        
        :returns:  The name of the material saved with the part 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetMaterialProperties(self, materialName: str) -> tuple:
        """
        Returns the material name saved with the part  
        
        Signature ``GetMaterialProperties(materialName)`` 
        
        :param materialName:  material Name 
        :type materialName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (propertyValues, propertyNames). propertyValues is a list of str.   property Values propertyNames is a list of str.   properties 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetMaterial(self, updateModel: bool, standardName: str) -> None:
        """
        Sets the material standard 
        
        Signature ``SetMaterial(updateModel, standardName)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param standardName:  The name of a material from the material standards file  
        :type standardName: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlatPatternObjectTypeDisplay(self, objectType: PartFlexiblePrintedCircuitDesignFlatPatternObjectType) -> PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeDisplay_Struct:
        """
        Returns the display data for a flat pattern object type.  
        
        Signature ``GetFlatPatternObjectTypeDisplay(objectType)`` 
        
        :param objectType:  The object type for which to return the display data.  
        :type objectType: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternObjectType` 
        :returns:  The display data for the flat pattern object type.  
        :rtype: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlatPatternObjectTypeDisplay(self, updateModel: bool, objectType: PartFlexiblePrintedCircuitDesignFlatPatternObjectType, displayData: PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeDisplay_Struct) -> None:
        """
        Sets the display data for a flat pattern object type.  
        
        Signature ``SetFlatPatternObjectTypeDisplay(updateModel, objectType, displayData)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately. 
        :type updateModel: bool 
        :param objectType:  The object type for which to get the display data.  
        :type objectType: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternObjectType` 
        :param displayData:  The display data for the flat pattern object type.  
        :type displayData: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetPlanarSegmentCurveTypeDisplayData(self, curveType: PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType) -> PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeDisplayData_Struct:
        """
        Returns the display data of a given planar segment curve type for the Flexible Printed Circuit Design application.  
        
        Signature ``GetPlanarSegmentCurveTypeDisplayData(curveType)`` 
        
        :param curveType:  The curve type for which to return the display data.  
        :type curveType: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType` 
        :returns:  The display data for the planar segment curve type.  
        :rtype: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeDisplayData_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPlanarSegmentCurveTypeDisplayData(self, updateModel: bool, curveType: PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType, displayData: PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeDisplayData_Struct) -> None:
        """
        Sets the display data of a given planar segment curve type for the Flexible Printed Circuit Design application.  
        
        Signature ``SetPlanarSegmentCurveTypeDisplayData(updateModel, curveType, displayData)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately. 
        :type updateModel: bool 
        :param curveType:  The curve type for which to get the display data.  
        :type curveType: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignPlanarSegmentCurveType` 
        :param displayData:  The display data for the planar segment curve type.  
        :type displayData: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignPlanarSegmentCurveTypeDisplayData_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlatPatternCalloutTypeDisplay(self, calloutType: str) -> PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct:
        """
        Returns the display data for a callout type.  
        
        The name member of the
        :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct`
        is separately allocated from the callout_type argument string.
        In some cases the new string will contain an
        extended form of the callout_type passed in, and that form should
        be used for subsequent JA calls, without modification.  
        
        Signature ``GetFlatPatternCalloutTypeDisplay(calloutType)`` 
        
        :param calloutType:  The name of the callout type for which to get the display data.  
        :type calloutType: str 
        :returns:  The display data for the callout type.  
        :rtype: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlatPatternCalloutTypeDisplay(self, calloutType: str, displayData: PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct) -> None:
        """
        Sets the display data for a callout type.  
        
        Signature ``SetFlatPatternCalloutTypeDisplay(calloutType, displayData)`` 
        
        :param calloutType:  The name of the callout type for which to set the display data.  
        :type calloutType: str 
        :param displayData:  The display data for the callout type.  
        :type displayData: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlatPatternAllObjectTypeDisplay(self) -> 'list[PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeDisplay_Struct]':
        """
        Returns the types, colors, fonts, widths, and enabled status for all the
        the available object types.  
        
        Signature ``GetFlatPatternAllObjectTypeDisplay()`` 
        
        :returns:  Array of structures with the object type display data.  
        :rtype: list of :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternObjectTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlatPatternAllCalloutTypeDisplay(self) -> 'list[PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct]':
        """
        Returns the dialog names, identifiers, and enabled status for all the
        available callout types.  
        
        Signature ``GetFlatPatternAllCalloutTypeDisplay()`` 
        
        :returns:  Array of structures with the callout type display data.  
        :rtype: list of :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def Commit(self) -> None:
        """
        Commits and applies all the settings done with set_callout_type_display
        and set_object_type_display.  
        
        It must be called after a sequence of calls
        to those methods to cause the view to update. 
        
        Signature ``Commit()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlexibleCableConductorWidth(self) -> NXOpen.Expression:
        """
        Returns the conductor width expression.  
        
        Signature ``GetFlexibleCableConductorWidth()`` 
        
        :returns:  expression object for flexible cable conductor width.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlexibleCableConductorWidth(self, conductorWidth: str) -> None:
        """
        Sets the conductor width value string.  
        
        Signature ``SetFlexibleCableConductorWidth(conductorWidth)`` 
        
        :param conductorWidth:  Default conductor width value for the flexible cable.  
        :type conductorWidth: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlexibleCableConductorSpacing(self) -> NXOpen.Expression:
        """
        Returns the conductor spacing expression.  
        
        Signature ``GetFlexibleCableConductorSpacing()`` 
        
        :returns:  expression object for flexible cable conductor width.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlexibleCableConductorSpacing(self, conductorSpacing: str) -> None:
        """
        Sets the conductor spacing value string.  
        
        Signature ``SetFlexibleCableConductorSpacing(conductorSpacing)`` 
        
        :param conductorSpacing:  Default conductor spacing value for the flexible cable.  
        :type conductorSpacing: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlexibleCableStrippingLength(self) -> NXOpen.Expression:
        """
        Returns the stripping length expression.  
        
        Signature ``GetFlexibleCableStrippingLength()`` 
        
        :returns:  expression object for flexible cable conductor width.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlexibleCableStrippingLength(self, strippingLength: str) -> None:
        """
        Sets the stripping length value string.  
        
        Signature ``SetFlexibleCableStrippingLength(strippingLength)`` 
        
        :param strippingLength:  Default stripping length value for the flexible cable.  
        :type strippingLength: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlexibleCableContactFace(self) -> PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptions:
        """
        Returns the contact face.  
        
        Signature ``GetFlexibleCableContactFace()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptions` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlexibleCableContactFace(self, faceOption: PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptions) -> None:
        """
        Sets the contact face.  
        
        Signature ``SetFlexibleCableContactFace(faceOption)`` 
        
        :param faceOption:  Contact face options.  
        :type faceOption: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlexibleCableContactFaceOptions` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlexibleCableTopFaceColor(self) -> NXOpen.NXColor:
        """
        Returns the top face color.  
        
        Signature ``GetFlexibleCableTopFaceColor()`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlexibleCableTopFaceColor(self, topFaceColor: NXOpen.NXColor) -> None:
        """
        Sets the top face color.  
        
        Signature ``SetFlexibleCableTopFaceColor(topFaceColor)`` 
        
        :param topFaceColor:  Top face color.  
        :type topFaceColor: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlexibleCableBottomFaceColor(self) -> NXOpen.NXColor:
        """
        Returns the bottom face color.  
        
        Signature ``GetFlexibleCableBottomFaceColor()`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlexibleCableBottomFaceColor(self, bottomFaceColor: NXOpen.NXColor) -> None:
        """
        Sets the bottom face color.  
        
        Signature ``SetFlexibleCableBottomFaceColor(bottomFaceColor)`` 
        
        :param bottomFaceColor:  Bottom face color.  
        :type bottomFaceColor: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlatPatternCalloutTypeContents(self, calloutType: str) -> 'list[str]':
        """
        Returns the contents for a callout type.  
        
        Signature ``GetFlatPatternCalloutTypeContents(calloutType)`` 
        
        :param calloutType:  The name of the callout type for which to get the content.  
        :type calloutType: str 
        :returns:  The contents for the callout type.  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlatPatternCalloutTypeContents(self, calloutType: str, contents: 'list[str]') -> None:
        """
        Sets the contents for a callout type.  
        
        Signature ``SetFlatPatternCalloutTypeContents(calloutType, contents)`` 
        
        :param calloutType:  The name of the callout type for which to set the content.  
        :type calloutType: str 
        :param contents:  The contents for the callout type.  
        :type contents: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetFlatPatternCalloutOrientationType(self) -> PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationType:
        """
        Returns the orientation type for flat pattern callouts.  
        
        Signature ``GetFlatPatternCalloutOrientationType()`` 
        
        :returns:  The orientation type for the flat pattern callouts.  
        :rtype: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetFlatPatternCalloutOrientationType(self, orientation: PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationType) -> None:
        """
        Sets the orientation type for flat pattern callouts.  
        
        Signature ``SetFlatPatternCalloutOrientationType(orientation)`` 
        
        :param orientation:  The orientation type for the flat pattern callouts.  
        :type orientation: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternCalloutOrientationType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetHoleTreatmentDiameter(self) -> NXOpen.Expression:
        """
        RETURNS the hole treatment diameter value in Flat Pattern operation  
        
        Signature ``GetHoleTreatmentDiameter()`` 
        
        :returns:  expression object for hole diameter value  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetHoleTreatmentDiameter(self, updateModel: bool, diameter: str) -> None:
        """
        SETS the hole treatment diameter value in Flat Pattern operation 
        
        Signature ``SetHoleTreatmentDiameter(updateModel, diameter)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param diameter:  default value for hole diameter  
        :type diameter: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def GetHoleTreatmentType(self) -> NXOpen.Features.SheetMetal.FeatureProperty:
        """
        RETURNS the hole treatment type in Flat Pattern operation  
        
        Signature ``GetHoleTreatmentType()`` 
        
        :returns:  hole treatment type  
        :rtype: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    
    
    def SetHoleTreatmentType(self, updateModel: bool, holeTreatmentType: NXOpen.Features.SheetMetal.FeatureProperty) -> None:
        """
        SETS the hole treatment type in Flat Pattern operation 
        
        Signature ``SetHoleTreatmentType(updateModel, holeTreatmentType)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param holeTreatmentType:  hole treatment type  
        :type holeTreatmentType: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_flexible_pcb ("NX Flexible PCB")
        """
        ...
    


class SessionPreferences():
    """
    Represents a collection of session based preferences.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Session`
    
    .. versionadded:: NX3.0.0
    """
    
    def CreateViewSectionPreference(self) -> ViewSection:
        """
        Create a :py:class:`NXOpen.Preferences.ViewSection` object  
        
        Signature ``CreateViewSectionPreference()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.ViewSection` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Sketch: SessionSketch = ...
    """
    Returns object for doing sketch preferences settings applicable to entire session 
    
    Signature ``Sketch`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionSketch`
    """
    NXGateway: SessionNXGateway = ...
    """
    Returns object for doing NXGateway preferences settings applicable to entire session 
    
    Signature ``NXGateway`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionNXGateway`
    """
    Assemblies: SessionAssemblies = ...
    """
    Returns object for doing Asseblies preferences settings applicable to entire session 
    
    Signature ``Assemblies`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionAssemblies`
    """
    WorkPlane: SessionWorkPlane = ...
    """
    Returns object for doing WorkPlane preferences settings applicable to entire session 
    
    Signature ``WorkPlane`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionWorkPlane`
    """
    Modeling: SessionModeling = ...
    """
    Returns object for doing Modeling preferences settings applicable to entire session 
    
    Signature ``Modeling`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionModeling`
    """
    Drafting: SessionDrafting = ...
    """
    Returns object for doing Drafting preferences settings  applicable to entire session 
    
    Signature ``Drafting`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionDrafting`
    """
    Pmi: SessionPmi = ...
    """
    Returns object for doing Pmi preferences settings  applicable to entire session 
    
    Signature ``Pmi`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionPmi`
    """
    UserInterface: SessionUserInterface = ...
    """
    Returns object for doing Selection preferences settings applicable to entire session 
    
    Signature ``UserInterface`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionUserInterface`
    """
    PerformanceVisualization: SessionVisualizationPerformance = ...
    """
    Returns object for doing Visualization Performance preferences settings applicable to entire session 
    
    Signature ``PerformanceVisualization`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationPerformance`
    """
    ScreenVisualization: SessionVisualizationScreen = ...
    """
    Returns object for doing Visualization Screen preferences settings applicable to entire session 
    
    Signature ``ScreenVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationScreen`
    """
    ColorSettingVisualization: SessionVisualizationColorSetting = ...
    """
    Returns object for doing Visualization preferences settings applicable to entire session 
    
    Signature ``ColorSettingVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationColorSetting`
    """
    HighQualityImageVisualization: SessionVisualizationHighQualityImage = ...
    """
    Returns object for doing Visualization High Quality Image preferences settings applicable to entire session 
    
    Signature ``HighQualityImageVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationHighQualityImage`
    """
    SpecialEffectsVisualization: SessionVisualizationSpecialEffects = ...
    """
    Returns object for doing Visualization Special Effects preferences settings applicable to entire session 
    
    Signature ``SpecialEffectsVisualization`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationSpecialEffects`
    """
    RoutingApplicationView: RoutingApplicationView = ...
    """
    Returns the Routing Application View preferences.  
    
    Signature ``RoutingApplicationView`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingApplicationView`
    """
    KnowledgeFusion: RulePreferences = ...
    """
    Returns object for doing Rule preferences settings applicable to entire session 
    
    Signature ``KnowledgeFusion`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RulePreferences`
    """
    Pdm: SessionPdm = ...
    """
    Returns object for doing Pdm preference settings applicable to entire session 
    
    Signature ``Pdm`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionPdm`
    """
    SessionMeasureReq: SessionMeasureRequirements = ...
    """
    Returns object for doing Measure Requirements in Assembly Sequencing applicable to the entire session 
    
    Signature ``SessionMeasureReq`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionMeasureRequirements`
    """
    VisualizationHandles: VisualizationHandles = ...
    """
    Returns the Visualization Handles preferences 
    
    Signature ``VisualizationHandles`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.VisualizationHandles`
    """
    SubdivisionModeling: SubdivisionModelingPreferences = ...
    """
    Returns object for doing Subdivision Modeling preferences settings applicable to entire session 
    
    Signature ``SubdivisionModeling`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SubdivisionModelingPreferences`
    """
    VisualizationFonts: VisualizationFonts = ...
    """
    Returns the Visualization Fonts preferences 
    
    Signature ``VisualizationFonts`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.VisualizationFonts`
    """
    EmphasisVisualization: SessionVisualizationEmphasis = ...
    """
    Returns object for doing Visualization Emphasis preferences settings applicable to entire session 
    
    Signature ``EmphasisVisualization`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationEmphasis`
    """
    PostProcessing: PostProcessing = ...
    """
    Returns the CAE Post Processing preferences 
    
    Signature ``PostProcessing`` 
    
    .. versionadded:: NX8.0.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PostProcessing`
    """
    HighEndRenderingVisualization: SessionVisualizationHighEndRendering = ...
    """
    Returns object for doing Visualization Performance preferences settings applicable to entire session 
    
    Signature ``HighEndRenderingVisualization`` 
    
    .. versionadded:: NX11.0.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationHighEndRendering`
    """


class GeneralViewLockmethodOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralViewLockmethodOption():
    """
    Represents the view lock method options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Normal"
       "Snapshot", "Snapshot"
       "Complete", "Locked"
    """
    NotSet = 0  # GeneralViewLockmethodOptionMemberType
    Snapshot = 1  # GeneralViewLockmethodOptionMemberType
    Complete = 2  # GeneralViewLockmethodOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseViewPreferences(IBaseViewPreferences):
    """
    Represents set of Base View Preferences applicable to drafting views.  
    
    These settings apply to any newly created base view.
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.BaseView`
    
    .. versionadded:: NX5.0.0
    """
    
    def SetFacetedRepresentation(self, isFacetedRepresentation: bool) -> None:
        """
        The status of faceted representation, if True the clipping bounds are inherited, else 
        the imported model view is placed on the drawing with an Automatic Rectangular Boundary 
        
        Signature ``SetFacetedRepresentation(isFacetedRepresentation)`` 
        
        :param isFacetedRepresentation: 
        :type isFacetedRepresentation: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX8.5.1
           Use :py:meth:`Preferences.GeneralViewPreferences.ViewRepresentation` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetInheritClippingBoundary(self, isInheritClippingBoundary: bool) -> None:
        """
        The status of inherit clipping boundary, if True the model view's 
        clipping boundary are inherited when model view is imported onto the drawing, else 
        the imported model view is placed on the drawing with an Automatic Rectangular Boundary.  
        
        Signature ``SetInheritClippingBoundary(isInheritClippingBoundary)`` 
        
        :param isInheritClippingBoundary:  Inherit XY clipping boundaries of model  
        :type isInheritClippingBoundary: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetTransferAnnotation(self, isTransferAnnotation: bool) -> None:
        """
        The status of transfer annotation controls whether or not annotations created in 
        a model view are transferred to the drawing when a view is imported.  
        
        Signature ``SetTransferAnnotation(isTransferAnnotation)`` 
        
        :param isTransferAnnotation: 
        :type isTransferAnnotation: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class SessionVisualizationEmphasis():
    """
    Represents visualization preferences for emphasis that are applicable
    to the entire session.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX8.5.0
    """
    ObjectsOffSketchWorkPlaneNonSelectable: bool = ...
    """
    Returns or sets  the setting that controls whether or not objects off the work
    plane are non-selectable in the Sketch Task Environment.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectsOffSketchWorkPlaneNonSelectable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectsOffSketchWorkPlaneNonSelectable`` 
    
    :param objectsOffSketchWorkPlaneNonSelectable: 
    :type objectsOffSketchWorkPlaneNonSelectable: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ObjectsOffWcsWorkPlaneNonSelectable: bool = ...
    """
    Returns or sets  the setting that controls whether or not objects off the WCS work
    plane are non-selectable.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectsOffWcsWorkPlaneNonSelectable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectsOffWcsWorkPlaneNonSelectable`` 
    
    :param objectsOffWcsWorkPlaneNonSelectable: 
    :type objectsOffWcsWorkPlaneNonSelectable: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ProductInterfaceEmphasis: bool = ...
    """
    Returns or sets  the setting that controls whether or not Product Interface objects
    are emphasized.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProductInterfaceEmphasis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProductInterfaceEmphasis`` 
    
    :param productInterfaceEmphasis: 
    :type productInterfaceEmphasis: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SeeThruAll: bool = ...
    """
    Returns or sets  the setting that controls whether or not all less important
    objects are de-emphasized.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeeThruAll`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeeThruAll`` 
    
    :param seeThruAll: 
    :type seeThruAll: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SeeThruDeEmphasizedObjects: bool = ...
    """
    Returns or sets  the setting that controls whether or not See-Thru is applied 
    to de-emphasized objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeeThruDeEmphasizedObjects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeeThruDeEmphasizedObjects`` 
    
    :param seeThruDeEmphasizedObjects: 
    :type seeThruDeEmphasizedObjects: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SeeThruPreview: bool = ...
    """
    Returns or sets  the setting that controls whether or not all less important
    objects are de-emphasized related to the Model Preview.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeeThruPreview`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeeThruPreview`` 
    
    :param seeThruPreview: 
    :type seeThruPreview: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SeeThruSection: bool = ...
    """
    Returns or sets  the setting that controls whether or not geometry on the section
    plane is emphasized.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeeThruSection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeeThruSection`` 
    
    :param seeThruSection: 
    :type seeThruSection: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SketchWorkPlaneEmphasis: bool = ...
    """
    Returns or sets  the setting that controls whether or not objects on the work
    plane are emphasized in the Sketch Task Environment.  
    
    <hr>
    
    Getter Method
    
    Signature ``SketchWorkPlaneEmphasis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SketchWorkPlaneEmphasis`` 
    
    :param sketchWorkPlaneEmphasis: 
    :type sketchWorkPlaneEmphasis: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WcsWorkPlaneEmphasis: bool = ...
    """
    Returns or sets  the setting that controls whether or not objects on the WCS work
    plane are emphasized.  
    
    <hr>
    
    Getter Method
    
    Signature ``WcsWorkPlaneEmphasis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WcsWorkPlaneEmphasis`` 
    
    :param wcsWorkPlaneEmphasis: 
    :type wcsWorkPlaneEmphasis: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WorkPartEmphasis: bool = ...
    """
    Returns or sets  the setting that controls whether or not the work part is
    emphasized.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPartEmphasis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkPartEmphasis`` 
    
    :param workPartEmphasis: 
    :type workPartEmphasis: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """


class ITraceLinesViewPreferences():
    """
    Represents interface for TraceLinesViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class RoutingPartUsePreferredPortMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartUsePreferredPort():
    """
    Whether or not use the preferred port when determining placement solutions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", " - "
       "True", " - "
    """
    FalseValue = 0  # RoutingPartUsePreferredPortMemberType
    TrueValue = 1  # RoutingPartUsePreferredPortMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartPreferredPortMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartPreferredPortMethod():
    """
    Available methods for determining which port is the preferredport during
    calculation of placement solutions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Attribute", "Examine an attribute applied to the port, and match it's value to a desired value."
       "Name", "Compare the ports name with a desired value."
    """
    Attribute = 0  # RoutingPartPreferredPortMethodMemberType
    Name = 1  # RoutingPartPreferredPortMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartDetailLevelMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartDetailLevel():
    """
    The detail levels available for the Routing bill of material. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Summary", " - "
       "Itemized", " - "
    """
    Summary = 0  # RoutingPartDetailLevelMemberType
    Itemized = 1  # RoutingPartDetailLevelMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartFabricationNumberingMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartFabricationNumbering():
    """
    The fabrication numbering methods available for the Routing bill of material. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sequence", "Sequential numbering of fabrications in the parts list."
       "Original", "Use the fabrication number in the parts list."
    """
    Sequence = 0  # RoutingPartFabricationNumberingMemberType
    Original = 1  # RoutingPartFabricationNumberingMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPartStockLengthDisplayMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPartStockLengthDisplay():
    """
    The stock length display options available for the Routing bill of material. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sum", "Display single sum for each type of stock."
       "Item", "Display length of each stock individually."
    """
    Sum = 0  # RoutingPartStockLengthDisplayMemberType
    Item = 1  # RoutingPartStockLengthDisplayMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPart():
    """
    Contains the preferences related to placing/finding/adding parts and generating
    the Routing bill of materials.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX4.0.0
    """
    
    class UsePreferredPort():
        """
        Whether or not use the preferred port when determining placement solutions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", " - "
           "True", " - "
        """
        FalseValue = 0  # RoutingPartUsePreferredPortMemberType
        TrueValue = 1  # RoutingPartUsePreferredPortMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PreferredPortMethod():
        """
        Available methods for determining which port is the preferredport during
        calculation of placement solutions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Attribute", "Examine an attribute applied to the port, and match it's value to a desired value."
           "Name", "Compare the ports name with a desired value."
        """
        Attribute = 0  # RoutingPartPreferredPortMethodMemberType
        Name = 1  # RoutingPartPreferredPortMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DetailLevel():
        """
        The detail levels available for the Routing bill of material. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Summary", " - "
           "Itemized", " - "
        """
        Summary = 0  # RoutingPartDetailLevelMemberType
        Itemized = 1  # RoutingPartDetailLevelMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FabricationNumbering():
        """
        The fabrication numbering methods available for the Routing bill of material. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sequence", "Sequential numbering of fabrications in the parts list."
           "Original", "Use the fabrication number in the parts list."
        """
        Sequence = 0  # RoutingPartFabricationNumberingMemberType
        Original = 1  # RoutingPartFabricationNumberingMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StockLengthDisplay():
        """
        The stock length display options available for the Routing bill of material. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sum", "Display single sum for each type of stock."
           "Item", "Display length of each stock individually."
        """
        Sum = 0  # RoutingPartStockLengthDisplayMemberType
        Item = 1  # RoutingPartStockLengthDisplayMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetPreferredPortName(self, desiredPort: str) -> None:
        """
        Sets the method for determining the preferred port to 
        :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod.Name <NXOpen.Preferences.RoutingPartPreferredPortMethod>` and
        sets the desired port name.  
        
        Signature ``SetPreferredPortName(desiredPort)`` 
        
        :param desiredPort:  Port name to match.  Must not be None and                                                        the length of the string must be less than 50.  
        :type desiredPort: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPreferredPortName(self) -> str:
        """
        Gets the desired port name for method type
        :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod.Name <NXOpen.Preferences.RoutingPartPreferredPortMethod>`  
        
        Signature ``GetPreferredPortName()`` 
        
        :returns:  None if method is not
        :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod.Name <NXOpen.Preferences.RoutingPartPreferredPortMethod>`  
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPreferredPortAttribute(self, attributeName: str, attributeValue: str) -> None:
        """
        Sets the method for determining the preferred port to 
        :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod.Attribute <NXOpen.Preferences.RoutingPartPreferredPortMethod>` and
        sets the desired port attribute and it's value.  
        
        Signature ``SetPreferredPortAttribute(attributeName, attributeValue)`` 
        
        :param attributeName:  Attribute name on port to match.                                                         Must not be None and                                                       the length of the string must be less than 50.  
        :type attributeName: str 
        :param attributeValue:  Value of the attribute to match.   
        :type attributeValue: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPreferredPortAttribute(self) -> tuple:
        """
        Gets the attribute and it's value for determining the preferred port for method type 
        :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod.Attribute <NXOpen.Preferences.RoutingPartPreferredPortMethod>` 
        
        Signature ``GetPreferredPortAttribute()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (attributeName, attributeValue).  
        
        attributeName is a str.   None if method is not                         :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod.Attribute <NXOpen.Preferences.RoutingPartPreferredPortMethod>` attributeValue is a str.   None if method is not                        :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod.Attribute <NXOpen.Preferences.RoutingPartPreferredPortMethod>` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    BomDetailLevelFlag: RoutingPartDetailLevel = ...
    """
    Returns or sets  the detail level for the Routing bill of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``BomDetailLevelFlag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPartDetailLevel` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BomDetailLevelFlag`` 
    
    :param detail: 
    :type detail: :py:class:`NXOpen.Preferences.RoutingPartDetailLevel` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    BomFormatPart: str = ...
    """
    Returns or sets  the name of the template Routing bill of material part file.  
    
    <hr>
    
    Getter Method
    
    Signature ``BomFormatPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BomFormatPart`` 
    
    :param bomPart: 
    :type bomPart: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    DefaultElbowNode: str = ...
    """
    Returns or sets  the node in the part library to use for searching for the default
    elbow to place during create path.  
    
    The part library node must 
    have a type of :py:class:`NXOpen.Preferences.RoutingPartLibraryNodeType.Table <NXOpen.Preferences.RoutingPartLibraryNodeType>`. A
    None node indicates no default elbow part table. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefaultElbowNode`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DefaultElbowNode`` 
    
    :param elbowNode: 
    :type elbowNode: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    FabricationNumberingFlag: RoutingPartFabricationNumbering = ...
    """
    Returns or sets  the fabrication numbering for the Routing bill of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``FabricationNumberingFlag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPartFabricationNumbering` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FabricationNumberingFlag`` 
    
    :param numbering: 
    :type numbering: :py:class:`NXOpen.Preferences.RoutingPartFabricationNumbering` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    InvalidSequenceCharacters: str = ...
    """
    Returns or sets  the list of characters that cannot be used when generating sequences
    of terminals in qualify part.  
    
    <hr>
    
    Getter Method
    
    Signature ``InvalidSequenceCharacters`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``InvalidSequenceCharacters`` 
    
    :param invalidChars: 
    :type invalidChars: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Layer: int = ...
    """
    Returns or sets  the layer to apply to new components.  
    
    <hr>
    
    Getter Method
    
    Signature ``Layer`` 
    
    :returns:   The layer to place the new component on 
    -1 means use the original layers defined in the component.
    0 means use the work layer.
    1-256 means use the specified layer.  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Layer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    MaximumSolutions: int = ...
    """
    Returns or sets  the maximum number of placement solutions to generate when determining
    placement solutions for a component.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumSolutions`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumSolutions`` 
    
    :param maxSols: 
    :type maxSols: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    PreferredPortMethodFlag: RoutingPartPreferredPortMethod = ...
    """
    Returns  the current method for determining the preferred placement port.  
    
    <hr>
    
    Getter Method
    
    Signature ``PreferredPortMethodFlag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPartPreferredPortMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockLengthDisplayFlag: RoutingPartStockLengthDisplay = ...
    """
    Returns or sets  the stock length display for the Routing bill of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockLengthDisplayFlag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPartStockLengthDisplay` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockLengthDisplayFlag`` 
    
    :param display: 
    :type display: :py:class:`NXOpen.Preferences.RoutingPartStockLengthDisplay` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    UsePreferredPortFlag: RoutingPartUsePreferredPort = ...
    """
    Returns or sets  whether or not to use the preffered placement port during
    calcluation of placement solutions during place part.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePreferredPortFlag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPartUsePreferredPort` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``UsePreferredPortFlag`` 
    
    :param useFlag: 
    :type useFlag: :py:class:`NXOpen.Preferences.RoutingPartUsePreferredPort` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    PartLibrary: RoutingPartLibrary = ...
    """
    The Routing part library.  
    
    Signature ``PartLibrary`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingPartLibrary`
    """


class FontMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Font():
    """
    Represents the line font 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Invisible", "Invisible"
       "Solid", "Solid"
       "Dashed", "Dashed"
       "Phantom", "Phantom"
       "Centerline", "Centerline"
       "Dotted", "Dotted"
       "LongDashed", "Long Dashed"
       "DottedDashed", "Dotted Dashed"
       "Original", "Original"
    """
    Invisible = 0  # FontMemberType
    Solid = 1  # FontMemberType
    Dashed = 2  # FontMemberType
    Phantom = 3  # FontMemberType
    Centerline = 4  # FontMemberType
    Dotted = 5  # FontMemberType
    LongDashed = 6  # FontMemberType
    DottedDashed = 7  # FontMemberType
    Original = 8  # FontMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VisualizationFontsStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VisualizationFontsStyleType():
    """
    Specifies the font style. A particular font family might 
    support only a subset of these font styles. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Regular", "Regular or normal font style"
       "Bold", "Bold font style"
       "Italic", "Italic or oblique font style"
       "BoldItalic", "Bold-italic or bold-oblique font style"
    """
    Regular = 0  # VisualizationFontsStyleTypeMemberType
    Bold = 1  # VisualizationFontsStyleTypeMemberType
    Italic = 2  # VisualizationFontsStyleTypeMemberType
    BoldItalic = 3  # VisualizationFontsStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VisualizationFonts():
    """
    Represents visualization preferences for standard text fonts 
    applicable to the entire session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX8.0.0
    """
    
    class StyleType():
        """
        Specifies the font style. A particular font family might 
        support only a subset of these font styles. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Regular", "Regular or normal font style"
           "Bold", "Bold font style"
           "Italic", "Italic or oblique font style"
           "BoldItalic", "Bold-italic or bold-oblique font style"
        """
        Regular = 0  # VisualizationFontsStyleTypeMemberType
        Bold = 1  # VisualizationFontsStyleTypeMemberType
        Italic = 2  # VisualizationFontsStyleTypeMemberType
        BoldItalic = 3  # VisualizationFontsStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetDefaultStandardTextFont(self) -> tuple:
        """
        Returns settings for the default standard text font 
        
        Signature ``GetDefaultStandardTextFont()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (fontFamily, fontStyle, fontSize). fontFamily is a str.              the name of the font family fontStyle is a :py:class:`NXOpen.Preferences.VisualizationFontsStyleType`.              the font style fontSize is a int.              the font size in points (72 points per inch) 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDefaultStandardTextFont(self, fontFamily: str, fontStyle: VisualizationFontsStyleType, fontSize: int) -> None:
        """
        Modifies settings for the default standard text font 
        
        Signature ``SetDefaultStandardTextFont(fontFamily, fontStyle, fontSize)`` 
        
        :param fontFamily:             the name of the font family  
        :type fontFamily: str 
        :param fontStyle:             the font style  
        :type fontStyle: :py:class:`NXOpen.Preferences.VisualizationFontsStyleType` 
        :param fontSize:             the font size in points (72 points per inch)  
        :type fontSize: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class DecimalPointCharacterMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DecimalPointCharacter():
    """
    Specifies the decimal point character for view angle display 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Period", "".""
       "Comma", "",""
    """
    Period = 0  # DecimalPointCharacterMemberType
    Comma = 1  # DecimalPointCharacterMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionVisualizationHighEndRenderingMaterialEditorEditingModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionVisualizationHighEndRenderingMaterialEditorEditingMode():
    """
    The two Studio Material Editor editing modes 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Basic", "Studio Material Editor in Basic properties mode"
       "Full", "Studio Material Editor in Full properties mode"
    """
    Basic = 0  # SessionVisualizationHighEndRenderingMaterialEditorEditingModeMemberType
    Full = 1  # SessionVisualizationHighEndRenderingMaterialEditorEditingModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionVisualizationHighEndRendering():
    """
    Represents the set of visualization preferences under High End Rendering tab applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX11.0.1
    """
    
    class MaterialEditorEditingMode():
        """
        The two Studio Material Editor editing modes 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Basic", "Studio Material Editor in Basic properties mode"
           "Full", "Studio Material Editor in Full properties mode"
        """
        Basic = 0  # SessionVisualizationHighEndRenderingMaterialEditorEditingModeMemberType
        Full = 1  # SessionVisualizationHighEndRenderingMaterialEditorEditingModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    StudioMaterialEditorEditingMode: SessionVisualizationHighEndRenderingMaterialEditorEditingMode = ...
    """
    Returns or sets   the Studio Material Editor editing mode 
    
    <hr>
    
    Getter Method
    
    Signature ``StudioMaterialEditorEditingMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionVisualizationHighEndRenderingMaterialEditorEditingMode` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StudioMaterialEditorEditingMode`` 
    
    :param newMode: 
    :type newMode: :py:class:`NXOpen.Preferences.SessionVisualizationHighEndRenderingMaterialEditorEditingMode` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """


class DetailViewPreferences(IDetailViewPreferences):
    """
    Represents set of Detail View Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.Detail`
    
    .. versionadded:: NX5.0.0
    """
    
    def SetCircularBoundary(self, circularBoundaryOption: bool) -> None:
        """
        Sets the circular boundary option.  
        
        If True, circular boundary is displayed for detail 
        view, else rectangular boundary is displayed.
        
        Signature ``SetCircularBoundary(circularBoundaryOption)`` 
        
        :param circularBoundaryOption: 
        :type circularBoundaryOption: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    CreateIndependent: int = ...
    """
    Returns or sets  the toogle create independent  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateIndependent`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.3
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateIndependent`` 
    
    :param createIndependentToogle: 
    :type createIndependentToogle: int 
    
    .. versionadded:: NX7.5.3
    
    License requirements: drafting ("DRAFTING")
    """
    ViewBoundaryColor: NXOpen.NXColor = ...
    """
    Returns or sets  the view boundary color option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundaryColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``ViewBoundaryColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    """
    ViewBoundaryFont: Font = ...
    """
    Returns or sets  the view boundary font option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundaryFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``ViewBoundaryFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    """
    ViewBoundaryWidth: Width = ...
    """
    Returns or sets  the view boundary width option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundaryWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``ViewBoundaryWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    """


class PartDraftingViewStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartDraftingViewStyleType():
    """
    Describes the available view style types for preview 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Border", "Border"
       "Wireframe", "Wireframe"
       "HiddenWireframe", "Hidden Wireframe"
       "Shaded", "Shaded"
    """
    Border = 0  # PartDraftingViewStyleTypeMemberType
    Wireframe = 1  # PartDraftingViewStyleTypeMemberType
    HiddenWireframe = 2  # PartDraftingViewStyleTypeMemberType
    Shaded = 3  # PartDraftingViewStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartDraftingFontTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartDraftingFontType():
    """
    Describes the available font types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", "Original"
       "Invisible", "Invisible"
       "Solid", "Solid"
       "Dashed", "Dashed"
       "Phantom", "Phantom"
       "Centerline", "CenterLine"
       "Dotted", "Dotted"
       "LongDashed", "Long Dashed"
       "DottedDashed", "Dotted Dashed"
    """
    Original = 0  # PartDraftingFontTypeMemberType
    Invisible = 1  # PartDraftingFontTypeMemberType
    Solid = 2  # PartDraftingFontTypeMemberType
    Dashed = 3  # PartDraftingFontTypeMemberType
    Phantom = 4  # PartDraftingFontTypeMemberType
    Centerline = 5  # PartDraftingFontTypeMemberType
    Dotted = 6  # PartDraftingFontTypeMemberType
    LongDashed = 7  # PartDraftingFontTypeMemberType
    DottedDashed = 8  # PartDraftingFontTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartDraftingWidthTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartDraftingWidthType():
    """
    Describes the available width types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", "Original"
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "ThicknessOne", "Width One"
       "ThicknessTwo", "Width Two"
       "ThicknessThree", "Width Three"
       "ThicknessFour", "Width Four"
       "ThicknessFive", "Width Five"
       "ThicknessSix", "Width Six"
       "ThicknessSeven", "Width Seven"
       "ThicknessEight", "Width Eight"
       "ThicknessNine", "Width Nine"
    """
    Original = 0  # PartDraftingWidthTypeMemberType
    Thin = 1  # PartDraftingWidthTypeMemberType
    Normal = 2  # PartDraftingWidthTypeMemberType
    Thick = 3  # PartDraftingWidthTypeMemberType
    ThicknessOne = 5  # PartDraftingWidthTypeMemberType
    ThicknessTwo = 6  # PartDraftingWidthTypeMemberType
    ThicknessThree = 7  # PartDraftingWidthTypeMemberType
    ThicknessFour = 8  # PartDraftingWidthTypeMemberType
    ThicknessFive = 9  # PartDraftingWidthTypeMemberType
    ThicknessSix = 10  # PartDraftingWidthTypeMemberType
    ThicknessSeven = 11  # PartDraftingWidthTypeMemberType
    ThicknessEight = 12  # PartDraftingWidthTypeMemberType
    ThicknessNine = 13  # PartDraftingWidthTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartDraftingBreakLineStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartDraftingBreakLineStyle():
    """
    Describes the available break line style 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Existing", "Existing Curve"
       "Simple", "Simple"
       "Straight", "Straight"
       "Sawtooth", "Sawtooth"
       "LongBreak", "LongBreak"
       "Tubular", "Tubular"
       "SolidTubular", "Solid Tubular"
       "SolidRod", "Solid Rod"
       "Jigsaw", "Jigsaw"
       "Wood", "Wood"
    """
    Existing = 0  # PartDraftingBreakLineStyleMemberType
    Simple = 1  # PartDraftingBreakLineStyleMemberType
    Straight = 2  # PartDraftingBreakLineStyleMemberType
    Sawtooth = 3  # PartDraftingBreakLineStyleMemberType
    LongBreak = 4  # PartDraftingBreakLineStyleMemberType
    Tubular = 5  # PartDraftingBreakLineStyleMemberType
    SolidTubular = 6  # PartDraftingBreakLineStyleMemberType
    SolidRod = 7  # PartDraftingBreakLineStyleMemberType
    Jigsaw = 8  # PartDraftingBreakLineStyleMemberType
    Wood = 9  # PartDraftingBreakLineStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartDraftingUpdateViewWithoutLwDataOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartDraftingUpdateViewWithoutLwDataOption():
    """
    Describes the update view without light weight data options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ignore", "Ignore"
       "Notify", "Notify"
       "DoNotNotify", "Do Not Notify"
       "Generate", "Generate"
    """
    Ignore = 0  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
    Notify = 1  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
    DoNotNotify = 2  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
    Generate = 3  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartDrafting():
    """
    Represents the set of drafting preferences applicable to part   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class ViewStyleType():
        """
        Describes the available view style types for preview 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Border", "Border"
           "Wireframe", "Wireframe"
           "HiddenWireframe", "Hidden Wireframe"
           "Shaded", "Shaded"
        """
        Border = 0  # PartDraftingViewStyleTypeMemberType
        Wireframe = 1  # PartDraftingViewStyleTypeMemberType
        HiddenWireframe = 2  # PartDraftingViewStyleTypeMemberType
        Shaded = 3  # PartDraftingViewStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FontType():
        """
        Describes the available font types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", "Original"
           "Invisible", "Invisible"
           "Solid", "Solid"
           "Dashed", "Dashed"
           "Phantom", "Phantom"
           "Centerline", "CenterLine"
           "Dotted", "Dotted"
           "LongDashed", "Long Dashed"
           "DottedDashed", "Dotted Dashed"
        """
        Original = 0  # PartDraftingFontTypeMemberType
        Invisible = 1  # PartDraftingFontTypeMemberType
        Solid = 2  # PartDraftingFontTypeMemberType
        Dashed = 3  # PartDraftingFontTypeMemberType
        Phantom = 4  # PartDraftingFontTypeMemberType
        Centerline = 5  # PartDraftingFontTypeMemberType
        Dotted = 6  # PartDraftingFontTypeMemberType
        LongDashed = 7  # PartDraftingFontTypeMemberType
        DottedDashed = 8  # PartDraftingFontTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WidthType():
        """
        Describes the available width types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", "Original"
           "Thin", "Thin"
           "Normal", "Normal"
           "Thick", "Thick"
           "ThicknessOne", "Width One"
           "ThicknessTwo", "Width Two"
           "ThicknessThree", "Width Three"
           "ThicknessFour", "Width Four"
           "ThicknessFive", "Width Five"
           "ThicknessSix", "Width Six"
           "ThicknessSeven", "Width Seven"
           "ThicknessEight", "Width Eight"
           "ThicknessNine", "Width Nine"
        """
        Original = 0  # PartDraftingWidthTypeMemberType
        Thin = 1  # PartDraftingWidthTypeMemberType
        Normal = 2  # PartDraftingWidthTypeMemberType
        Thick = 3  # PartDraftingWidthTypeMemberType
        ThicknessOne = 5  # PartDraftingWidthTypeMemberType
        ThicknessTwo = 6  # PartDraftingWidthTypeMemberType
        ThicknessThree = 7  # PartDraftingWidthTypeMemberType
        ThicknessFour = 8  # PartDraftingWidthTypeMemberType
        ThicknessFive = 9  # PartDraftingWidthTypeMemberType
        ThicknessSix = 10  # PartDraftingWidthTypeMemberType
        ThicknessSeven = 11  # PartDraftingWidthTypeMemberType
        ThicknessEight = 12  # PartDraftingWidthTypeMemberType
        ThicknessNine = 13  # PartDraftingWidthTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BreakLineStyle():
        """
        Describes the available break line style 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Existing", "Existing Curve"
           "Simple", "Simple"
           "Straight", "Straight"
           "Sawtooth", "Sawtooth"
           "LongBreak", "LongBreak"
           "Tubular", "Tubular"
           "SolidTubular", "Solid Tubular"
           "SolidRod", "Solid Rod"
           "Jigsaw", "Jigsaw"
           "Wood", "Wood"
        """
        Existing = 0  # PartDraftingBreakLineStyleMemberType
        Simple = 1  # PartDraftingBreakLineStyleMemberType
        Straight = 2  # PartDraftingBreakLineStyleMemberType
        Sawtooth = 3  # PartDraftingBreakLineStyleMemberType
        LongBreak = 4  # PartDraftingBreakLineStyleMemberType
        Tubular = 5  # PartDraftingBreakLineStyleMemberType
        SolidTubular = 6  # PartDraftingBreakLineStyleMemberType
        SolidRod = 7  # PartDraftingBreakLineStyleMemberType
        Jigsaw = 8  # PartDraftingBreakLineStyleMemberType
        Wood = 9  # PartDraftingBreakLineStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UpdateViewWithoutLwDataOption():
        """
        Describes the update view without light weight data options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ignore", "Ignore"
           "Notify", "Notify"
           "DoNotNotify", "Do Not Notify"
           "Generate", "Generate"
        """
        Ignore = 0  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
        Notify = 1  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
        DoNotNotify = 2  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
        Generate = 3  # PartDraftingUpdateViewWithoutLwDataOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActiveViewColor: NXOpen.NXColor = ...
    """
    Returns or sets  the drafting active view color.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveViewColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveViewColor`` 
    
    :param borderColor: 
    :type borderColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AssociativeAlignment: bool = ...
    """
    Returns or sets  the flag indicating whether to associatively align the view when placing it 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeAlignment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativeAlignment`` 
    
    :param associativeAlignment: 
    :type associativeAlignment: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    BorderColor: int = ...
    """
    Returns or sets  the drafting view border color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``BorderColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderColor`` 
    
    :param borderColor: 
    :type borderColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    BreakLineAmplitude: float = ...
    """
    Returns or sets  the break line amplitude.  
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineAmplitude`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineAmplitude`` 
    
    :param amplitude: 
    :type amplitude: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLineColor: NXOpen.NXColor = ...
    """
    Returns or sets  the break line color.  
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLineExtension: float = ...
    """
    Returns or sets   
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineExtension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineExtension`` 
    
    :param extension: 
    :type extension: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLineGap: float = ...
    """
    Returns or sets  the break line gap.  
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineGap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineGap`` 
    
    :param gap: 
    :type gap: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLineType: PartDraftingBreakLineStyle = ...
    """
    Returns or sets  the break line type.  
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartDraftingBreakLineStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineType`` 
    
    :param lineType: 
    :type lineType: :py:class:`NXOpen.Preferences.PartDraftingBreakLineStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLineWidth: int = ...
    """
    Returns or sets  the break line width.  
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineWidth`` 
    
    :param width: 
    :type width: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLinesVisibility: bool = ...
    """
    Returns or sets  the break lines visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLinesVisibility`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLinesVisibility`` 
    
    :param isVisible: 
    :type isVisible: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Color: int = ...
    """
    Returns or sets  the color of the retained :py:class:`NXOpen.Annotations.Annotation` objects.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    CustomSymbolSmashToSketch: bool = ...
    """
    Returns or sets  the custom symbol smash behavior.  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomSymbolSmashToSketch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomSymbolSmashToSketch`` 
    
    :param isSmashToSketch: 
    :type isSmashToSketch: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    DelayUpdateOnCreation: bool = ...
    """
    Returns or sets  the flag indicating whether the newly created views should update immediately even
    when the view update is delayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DelayUpdateOnCreation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DelayUpdateOnCreation`` 
    
    :param isDelayUpdateOnCreationOn: 
    :type isDelayUpdateOnCreationOn: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DelayViewUpdate: bool = ...
    """
    Returns or sets  the flag indicating whether to delay update of the drafting views during system 
    initiated drawing updates  
    
    <hr>
    
    Getter Method
    
    Signature ``DelayViewUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DelayViewUpdate`` 
    
    :param isDelayViewUpdateOn: 
    :type isDelayViewUpdateOn: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Delimiter: str = ...
    """
    Returns or sets  the delimiter  
    
    <hr>
    
    Getter Method
    
    Signature ``Delimiter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Delimiter`` 
    
    :param delimiter: 
    :type delimiter: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DisplayBorders: bool = ...
    """
    Returns or sets  the flag indicating whether to display borders around drafting views, when selected 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayBorders`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayBorders`` 
    
    :param displayBorders: 
    :type displayBorders: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    EnableSmoothEdgesForLWView: bool = ...
    """
    Returns or sets  the flat indicating whether the smart lightweight views should show the smooth edges 
    or render them as normal curves 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableSmoothEdgesForLWView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableSmoothEdgesForLWView`` 
    
    :param enableSmoothEdges: 
    :type enableSmoothEdges: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Font: PartDraftingFontType = ...
    """
    Returns or sets  the line font of the retained :py:class:`NXOpen.Annotations.Annotation` objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartDraftingFontType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Preferences.PartDraftingFontType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FrameBarPrecision: int = ...
    """
    Returns or sets  the frame bar precision.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrameBarPrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrameBarPrecision`` 
    
    :param precision: 
    :type precision: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FrameBarTicDirection: int = ...
    """
    Returns or sets  the frame bar tic direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrameBarTicDirection`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrameBarTicDirection`` 
    
    :param ticDirection: 
    :type ticDirection: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InitialSecondaryNumber: str = ...
    """
    Returns or sets  the initial secondary number 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialSecondaryNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialSecondaryNumber`` 
    
    :param initialSecondaryNumber: 
    :type initialSecondaryNumber: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InitialSheetNumber: str = ...
    """
    Returns or sets  the initial sheet number 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialSheetNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialSheetNumber`` 
    
    :param initialSheetNumber: 
    :type initialSheetNumber: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LineAntialiasing: bool = ...
    """
    Returns or sets  the flag indicating whether to display drawing using line antialiasing.  
    
    <hr>
    
    Getter Method
    
    Signature ``LineAntialiasing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineAntialiasing`` 
    
    :param lineAntialiasing: 
    :type lineAntialiasing: bool 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    """
    MinimumComponentsForLargeAssemblyOption: int = ...
    """
    Returns or sets  the minimum number of components for large assembly option to get enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumComponentsForLargeAssemblyOption`` 
    
    :returns:  Minimum number of components for large assembly option  
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumComponentsForLargeAssemblyOption`` 
    
    :param minComponents:  Minimum number of components for large assembly option  
    :type minComponents: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PropagateBreakLines: bool = ...
    """
    Returns or sets  the propagation of view break.  
    
    <hr>
    
    Getter Method
    
    Signature ``PropagateBreakLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PropagateBreakLines`` 
    
    :param doesPropagate: 
    :type doesPropagate: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RetainAnnotations: bool = ...
    """
    Returns or sets  the flag indicating whether to retain :py:class:`NXOpen.Annotations.Annotation` objects
    when the geometry they are attached to is deleted.  
    
    When false, the :py:class:`NXOpen.Annotations.Annotation` 
    objects get deleted with the geometry. 
    
    <hr>
    
    Getter Method
    
    Signature ``RetainAnnotations`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RetainAnnotations`` 
    
    :param retainAnnotations: 
    :type retainAnnotations: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShowFacetEdges: bool = ...
    """
    Returns or sets  the flag indicating whether to display facet edges in shaded member views.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowFacetEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowFacetEdges`` 
    
    :param showFacetEdges: 
    :type showFacetEdges: bool 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    """
    Translucency: bool = ...
    """
    Returns or sets  the flag indicating whether to display solids in shaded member views with translucency.  
    
    <hr>
    
    Getter Method
    
    Signature ``Translucency`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Translucency`` 
    
    :param translucency: 
    :type translucency: bool 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    """
    UpdateViewWithoutLwData: PartDraftingUpdateViewWithoutLwDataOption = ...
    """
    Returns or sets  the option specifying the action when missing, incomplete or invalid lightweight 
    bodies are found during view create or update 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateViewWithoutLwData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartDraftingUpdateViewWithoutLwDataOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateViewWithoutLwData`` 
    
    :param updateViewWithoutLWDataOption: 
    :type updateViewWithoutLWDataOption: :py:class:`NXOpen.Preferences.PartDraftingUpdateViewWithoutLwDataOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    VersionObjects: bool = ...
    """
    Returns or sets  the drafting version objects setting when updating drafting objects and member views 
    
    <hr>
    
    Getter Method
    
    Signature ``VersionObjects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VersionObjects`` 
    
    :param versonObjects: 
    :type versonObjects: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ViewStyle: PartDraftingViewStyleType = ...
    """
    Returns or sets  the drafting view style type for preview when placing the view 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartDraftingViewStyleType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewStyle`` 
    
    :param viewStyle: 
    :type viewStyle: :py:class:`NXOpen.Preferences.PartDraftingViewStyleType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ViewTracking: bool = ...
    """
    Returns or sets  the flag indicating whether to track a drafting view during preview
    when placing the view.  
    
    The cursor is tracked using XC/YC coordinates.  
    
    <hr>
    
    Getter Method
    
    Signature ``ViewTracking`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewTracking`` 
    
    :param viewTracking: 
    :type viewTracking: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Width: PartDraftingWidthType = ...
    """
    Returns or sets  the line width of the retained :py:class:`NXOpen.Annotations.Annotation` objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartDraftingWidthType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Preferences.PartDraftingWidthType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class PartVisualizationEmphasisSeeThruStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationEmphasisSeeThruStyleType():
    """
    Determines how translucency and color are used to de-emphasize
    shaded geometry. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Shell", "Displays de-emphasized shaded geometry as a translucent shell with a single color."
       "OriginalColorShell", "Displays de-emphasized shaded geometry as a translucent shell, preserving original colors."
       "Layers", "Displays de-emphasized shaded geometry as translucent layers with a single color."
    """
    Shell = 0  # PartVisualizationEmphasisSeeThruStyleTypeMemberType
    OriginalColorShell = 1  # PartVisualizationEmphasisSeeThruStyleTypeMemberType
    Layers = 2  # PartVisualizationEmphasisSeeThruStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationEmphasisEdgesTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationEmphasisEdgesType():
    """
    Determines whether or not edges are displayed for de-emphasized
    shaded geometry. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", "Displays no edges for de-emphasized shaded geometry."
       "Normal", "Displays edges for de-emphasized shaded geometry if edges are normally displayed for shaded geometry."
    """
    Off = 0  # PartVisualizationEmphasisEdgesTypeMemberType
    Normal = 1  # PartVisualizationEmphasisEdgesTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationEmphasisShellOptions_Struct():
    """
    Specifies options that control the appearance of de-emphasized
    shaded geometry when the See-Thru style is set to Shell.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartVisualizationEmphasis.ShellOptions()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Rgb: NXOpen.NXColorRgb_Struct = ...
    """
    the color of de-emphasized shaded geometry when the
    See-Thru style is set to Shell.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXColorRgb_Struct`
    """
    Edges: PartVisualizationEmphasisEdgesType = ...
    """
    whether or not edges are displayed for de-emphasized
    shaded geometry when the See-Thru style is set to Shell.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.PartVisualizationEmphasisEdgesType`
    """
    EdgesRgb: NXOpen.NXColorRgb_Struct = ...
    """
    the color of edges displayed for de-emphasized shaded
    geometry when the See-Thru style is set to Shell.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXColorRgb_Struct`
    """
    Translucency: int = ...
    """
    the translucency of de-emphasized shaded geometry when
    the See-Thru style is set to Shell.  
    
    It is a percentage 
    value between 30 and 100. 
    <hr>
    
    Field Value
    Type:int
    """


class PartVisualizationEmphasisOriginalColorShellOptions_Struct():
    """
    Specifies options that control the appearance of de-emphasized
    shaded geometry when the See-Thru style is set to Original Color
    Shell.  
    
    .
    Constructor: 
    NXOpen.Preferences.PartVisualizationEmphasis.OriginalColorShellOptions()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Edges: PartVisualizationEmphasisEdgesType = ...
    """
    whether or not edges are displayed for de-emphasized shaded
    geometry when the See-Thru style is set to Original Color
    Shell.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.PartVisualizationEmphasisEdgesType`
    """
    EdgesRgb: NXOpen.NXColorRgb_Struct = ...
    """
    the color of edges displayed for de-emphasized shaded
    geometry when the See-Thru style is set to Original Color
    Shell.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXColorRgb_Struct`
    """
    Translucency: int = ...
    """
    the translucency of de-emphasized shaded geometry when
    the See-Thru style is set to Original Color Shell.  
    
    It is 
    a percentage value between 30 and 100. 
    <hr>
    
    Field Value
    Type:int
    """


class PartVisualizationEmphasis():
    """
    Represents visualization preferences for emphasis that are applicable
    to the entire part.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX8.5.0
    """
    
    class SeeThruStyleType():
        """
        Determines how translucency and color are used to de-emphasize
        shaded geometry. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Shell", "Displays de-emphasized shaded geometry as a translucent shell with a single color."
           "OriginalColorShell", "Displays de-emphasized shaded geometry as a translucent shell, preserving original colors."
           "Layers", "Displays de-emphasized shaded geometry as translucent layers with a single color."
        """
        Shell = 0  # PartVisualizationEmphasisSeeThruStyleTypeMemberType
        OriginalColorShell = 1  # PartVisualizationEmphasisSeeThruStyleTypeMemberType
        Layers = 2  # PartVisualizationEmphasisSeeThruStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EdgesType():
        """
        Determines whether or not edges are displayed for de-emphasized
        shaded geometry. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", "Displays no edges for de-emphasized shaded geometry."
           "Normal", "Displays edges for de-emphasized shaded geometry if edges are normally displayed for shaded geometry."
        """
        Off = 0  # PartVisualizationEmphasisEdgesTypeMemberType
        Normal = 1  # PartVisualizationEmphasisEdgesTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WireframeBlendOptions():
        """
        Specifies options that control the color-blending effect used to
        de-emphasize wireframe geometry.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartVisualizationEmphasis.WireframeBlendOptions()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        BlendColor: NXOpen.NXColor = ...
        """
        the de-emphasis color that is blended with object colors
        to de-emphasize wireframe geometry.  
        
        <hr>
        
        Field Value
        Type:Id
        """
        BlendPercentage: int = ...
        """
        the percentage of the de-emphasis color that is blended
        with object colors to de-emphasize wireframe geometry
        It is a value between 10 and 100.  
        
        <hr>
        
        Field Value
        Type:int
        """
    
    
    class ShellOptions():
        """
        Specifies options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Shell.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartVisualizationEmphasis.ShellOptions()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Rgb: NXOpen.NXColorRgb_Struct = ...
        """
        the color of de-emphasized shaded geometry when the
        See-Thru style is set to Shell.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXColorRgb_Struct`
        """
        Edges: PartVisualizationEmphasisEdgesType = ...
        """
        whether or not edges are displayed for de-emphasized
        shaded geometry when the See-Thru style is set to Shell.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.PartVisualizationEmphasisEdgesType`
        """
        EdgesRgb: NXOpen.NXColorRgb_Struct = ...
        """
        the color of edges displayed for de-emphasized shaded
        geometry when the See-Thru style is set to Shell.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXColorRgb_Struct`
        """
        Translucency: int = ...
        """
        the translucency of de-emphasized shaded geometry when
        the See-Thru style is set to Shell.  
        
        It is a percentage 
        value between 30 and 100. 
        <hr>
        
        Field Value
        Type:int
        """
    
    
    class OriginalColorShellOptions():
        """
        Specifies options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Original Color
        Shell.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartVisualizationEmphasis.OriginalColorShellOptions()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Edges: PartVisualizationEmphasisEdgesType = ...
        """
        whether or not edges are displayed for de-emphasized shaded
        geometry when the See-Thru style is set to Original Color
        Shell.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.PartVisualizationEmphasisEdgesType`
        """
        EdgesRgb: NXOpen.NXColorRgb_Struct = ...
        """
        the color of edges displayed for de-emphasized shaded
        geometry when the See-Thru style is set to Original Color
        Shell.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXColorRgb_Struct`
        """
        Translucency: int = ...
        """
        the translucency of de-emphasized shaded geometry when
        the See-Thru style is set to Original Color Shell.  
        
        It is 
        a percentage value between 30 and 100. 
        <hr>
        
        Field Value
        Type:int
        """
    
    
    class LayersOptions():
        """
        Specifies options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Layers.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartVisualizationEmphasis.LayersOptions()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Rgb: NXOpen.NXColorRgb_Struct = ...
        """
        the color of de-emphasized shaded geometry when the
        See-Thru style is set to Layers.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXColorRgb_Struct`
        """
        Edges: PartVisualizationEmphasisEdgesType = ...
        """
        whether or not edges are displayed for de-emphasized
        shaded geometry when the See-Thru style is set to Layers.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.PartVisualizationEmphasisEdgesType`
        """
        EdgesRgb: NXOpen.NXColorRgb_Struct = ...
        """
        the color of edges displayed for de-emphasized shaded
        geometry when the See-Thru style is set to Layers.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXColorRgb_Struct`
        """
        Translucency: int = ...
        """
        the translucency of de-emphasized shaded geometry when
        the See-Thru style is set to Layers.  
        
        It is a percentage 
        value between 30 and 100. 
        <hr>
        
        Field Value
        Type:int
        """
    
    
    def GetWireframeBlendOptions(self) -> PartVisualizationEmphasisWireframeBlendOptions_Struct:
        """
        Returns options that control the color-blending effect used to
        de-emphasize wireframe geometry.  
        
        Signature ``GetWireframeBlendOptions()`` 
        
        :returns: 
        options that control the color-blending effect used to
        de-emphasize wireframe geometry.  
        :rtype: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisWireframeBlendOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWireframeBlendOptions(self, wireframeBlendOptions: PartVisualizationEmphasisWireframeBlendOptions_Struct) -> None:
        """
        Modifies options that control the color-blending effect used to
        de-emphasize wireframe geometry.  
        
        Signature ``SetWireframeBlendOptions(wireframeBlendOptions)`` 
        
        :param wireframeBlendOptions:                 options that control the color-blending effect used to                de-emphasize wireframe geometry.  
        :type wireframeBlendOptions: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisWireframeBlendOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetShellOptions(self) -> PartVisualizationEmphasisShellOptions_Struct:
        """
        Returns options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Shell.  
        
        Signature ``GetShellOptions()`` 
        
        :returns: 
        options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Shell.  
        :rtype: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisShellOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetShellOptions(self, shellOptions: PartVisualizationEmphasisShellOptions_Struct) -> None:
        """
        Modifies options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Shell.  
        
        Signature ``SetShellOptions(shellOptions)`` 
        
        :param shellOptions:                 options that control the appearance of de-emphasized                shaded geometry when the See-Thru style is set to Shell.  
        :type shellOptions: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisShellOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOriginalColorShellOptions(self) -> PartVisualizationEmphasisOriginalColorShellOptions_Struct:
        """
        Returns options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Original Color
        Shell.  
        
        Signature ``GetOriginalColorShellOptions()`` 
        
        :returns: 
        options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to
        Original Color Shell.  
        :rtype: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisOriginalColorShellOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOriginalColorShellOptions(self, originalColorShellOptions: PartVisualizationEmphasisOriginalColorShellOptions_Struct) -> None:
        """
        Modifies options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Original Color
        Shell.  
        
        Signature ``SetOriginalColorShellOptions(originalColorShellOptions)`` 
        
        :param originalColorShellOptions:                 options that control the appearance of de-emphasized                shaded geometry when the See-Thru style is set to                Original Color Shell.  
        :type originalColorShellOptions: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisOriginalColorShellOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLayersOptions(self) -> PartVisualizationEmphasisLayersOptions_Struct:
        """
        Returns options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Layers.  
        
        Signature ``GetLayersOptions()`` 
        
        :returns: 
        options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Layers.  
        :rtype: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisLayersOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLayersOptions(self, layersOptions: PartVisualizationEmphasisLayersOptions_Struct) -> None:
        """
        Modifies options that control the appearance of de-emphasized
        shaded geometry when the See-Thru style is set to Layers.  
        
        Signature ``SetLayersOptions(layersOptions)`` 
        
        :param layersOptions:                 options that control the appearance of de-emphasized                shaded geometry when the See-Thru style is set to Layers.  
        :type layersOptions: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisLayersOptions_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    SeeThruStyle: PartVisualizationEmphasisSeeThruStyleType = ...
    """
    Returns or sets  the See-Thru style that determines how translucency and color
    are used to de-emphasize shaded geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeeThruStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisSeeThruStyleType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeeThruStyle`` 
    
    :param seeThruStyle: 
    :type seeThruStyle: :py:class:`NXOpen.Preferences.PartVisualizationEmphasisSeeThruStyleType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """


class IBaseViewPreferences():
    """
    Represents set of IBaseViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class PartSketch():
    """
    Represents the set of Sketcher preferences applicable to entire part.  
    
    Other Sketch preference 
    settings are available with :py:class:`NXOpen.Preferences.SessionSketch` for settings applicable to session
    and with :py:class:`NXOpen.Preferences.SketchPreferences` for Sketch specific Preferences 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX4.0.0
    """
    AutomaticDimensionColor: int = ...
    """
    Returns or sets  the sketch automatic dimension color 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticDimensionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticDimensionColor`` 
    
    :param sketchAutomaticDimensionColor: 
    :type sketchAutomaticDimensionColor: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ConflictingColor: int = ...
    """
    Returns or sets  the sketch conflicting color 
    
    <hr>
    
    Getter Method
    
    Signature ``ConflictingColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConflictingColor`` 
    
    :param sketchConflictingColor: 
    :type sketchConflictingColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    CurveColor: int = ...
    """
    Returns or sets  the sketch curve color 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveColor`` 
    
    :param sketchCurveColor: 
    :type sketchCurveColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DOFColor: int = ...
    """
    Returns or sets  the sketch degree of freedom arrow color 
    
    <hr>
    
    Getter Method
    
    Signature ``DOFColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DOFColor`` 
    
    :param sketchDOFColor: 
    :type sketchDOFColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DimensionColor: int = ...
    """
    Returns or sets  the sketch dimension color 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionColor`` 
    
    :param sketchDimensionColor: 
    :type sketchDimensionColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FullyDefinedColor: int = ...
    """
    Returns or sets  the sketch fully defined constraint color 
    
    <hr>
    
    Getter Method
    
    Signature ``FullyDefinedColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FullyDefinedColor`` 
    
    :param sketchFullyColor: 
    :type sketchFullyColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    InactiveSketchColor: int = ...
    """
    Returns or sets  the inactive sketch color 
    
    <hr>
    
    Getter Method
    
    Signature ``InactiveSketchColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InactiveSketchColor`` 
    
    :param sketchInactiveColor: 
    :type sketchInactiveColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    OutOfDateColor: int = ...
    """
    Returns or sets  the sketch out of date curve color 
    
    <hr>
    
    Getter Method
    
    Signature ``OutOfDateColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutOfDateColor`` 
    
    :param sketchOutOfDateColor: 
    :type sketchOutOfDateColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    OverconstrainedColor: int = ...
    """
    Returns or sets  the sketch overconstrained color 
    
    <hr>
    
    Getter Method
    
    Signature ``OverconstrainedColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverconstrainedColor`` 
    
    :param sketchOverconstrainedColor: 
    :type sketchOverconstrainedColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    PartiallyDefinedColor: int = ...
    """
    Returns or sets  the sketch partially defined constraint color 
    
    <hr>
    
    Getter Method
    
    Signature ``PartiallyDefinedColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartiallyDefinedColor`` 
    
    :param sketchPartialColor: 
    :type sketchPartialColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ParticipatingDatumColor: int = ...
    """
    Returns or sets  the sketch participating datum curve color 
    
    <hr>
    
    Getter Method
    
    Signature ``ParticipatingDatumColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParticipatingDatumColor`` 
    
    :param sketchParticipatingDatumColor: 
    :type sketchParticipatingDatumColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ReferenceCurveColor: int = ...
    """
    Returns or sets  the sketch reference curve color 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCurveColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceCurveColor`` 
    
    :param sketchReferenceCurveColor: 
    :type sketchReferenceCurveColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ReferenceDimensionColor: int = ...
    """
    Returns or sets  the sketch reference dimension color 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDimensionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDimensionColor`` 
    
    :param sketchReferenceDimensionColor: 
    :type sketchReferenceDimensionColor: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    UnsolvedCurvesColor: int = ...
    """
    Returns or sets  the sketch unsolved curves color 
    
    <hr>
    
    Getter Method
    
    Signature ``UnsolvedCurvesColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnsolvedCurvesColor`` 
    
    :param sketchUnsolvedCurvesColor: 
    :type sketchUnsolvedCurvesColor: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """


class PartSheetmetalBendDefinitionMethodOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartSheetmetalBendDefinitionMethodOptions():
    """
    This enum represents the bend definition method options in preferences. 
    
    This is used to specify the bend definition method. You can choose to 
    use a global Neutral Factor value OR a Bend Table OR a Bend 
    Allowance Formula OR a Material Table.
    
    .. versionadded:: NX12.0.0
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NeutralFactorValue", "The neutral factor value method"
       "BendTable", "The bend table method"
       "BendAllowanceFormula", "The bend allowance formula method"
       "MaterialTable", "The material table method"
       "ToolTable", "The tool table method"
       "BendAllowanceTable", "The bend allowance table method"
       "BendDeductionTable", "The bend deduction table method"
       "BendDeductionFormula", "The bend deduction formula method"
       "Din6935Formula", "The DIN6935 formula method"
    """
    NeutralFactorValue = 0  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    BendTable = 1  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    BendAllowanceFormula = 2  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    MaterialTable = 3  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    ToolTable = 4  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    BendAllowanceTable = 5  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    BendDeductionTable = 6  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    BendDeductionFormula = 7  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    Din6935Formula = 8  # PartSheetmetalBendDefinitionMethodOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartSheetmetalFlatPatternObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartSheetmetalFlatPatternObjectType():
    """
    The members of the following enumerated type are used to identify
    object types to the FlatPattern API. These are not the usual
    NX object types; they are ordinary NX objects that are known to
    the flat pattern feature for the type of outline they provide to
    a bend region, joggle region, or lightening hole. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BendCenterLine", "Deprecated"
       "BendUpCenterLine", " - "
       "BendDownCenterLine", " - "
       "BendTangentLine", " - "
       "OuterMoldLine", " - "
       "InnerMoldLine", " - "
       "ExteriorCurves", " - "
       "InteriorCurves", "Deprecated"
       "InteriorCutoutCurves", " - "
       "InteriorFeatureCurves", " - "
       "StrikePoint", " - "
       "LighteningHoleCenter", " - "
       "JoggleLine", " - "
       "AddedTopGeometry", " - "
       "AddedBottomGeometry", " - "
       "ToolMarker", " - "
    """
    BendCenterLine = 0  # PartSheetmetalFlatPatternObjectTypeMemberType
    BendUpCenterLine = 1  # PartSheetmetalFlatPatternObjectTypeMemberType
    BendDownCenterLine = 2  # PartSheetmetalFlatPatternObjectTypeMemberType
    BendTangentLine = 3  # PartSheetmetalFlatPatternObjectTypeMemberType
    OuterMoldLine = 4  # PartSheetmetalFlatPatternObjectTypeMemberType
    InnerMoldLine = 5  # PartSheetmetalFlatPatternObjectTypeMemberType
    ExteriorCurves = 6  # PartSheetmetalFlatPatternObjectTypeMemberType
    InteriorCurves = 7  # PartSheetmetalFlatPatternObjectTypeMemberType
    InteriorCutoutCurves = 8  # PartSheetmetalFlatPatternObjectTypeMemberType
    InteriorFeatureCurves = 9  # PartSheetmetalFlatPatternObjectTypeMemberType
    StrikePoint = 10  # PartSheetmetalFlatPatternObjectTypeMemberType
    LighteningHoleCenter = 11  # PartSheetmetalFlatPatternObjectTypeMemberType
    JoggleLine = 12  # PartSheetmetalFlatPatternObjectTypeMemberType
    AddedTopGeometry = 13  # PartSheetmetalFlatPatternObjectTypeMemberType
    AddedBottomGeometry = 14  # PartSheetmetalFlatPatternObjectTypeMemberType
    ToolMarker = 15  # PartSheetmetalFlatPatternObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartSheetmetalTabCurveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartSheetmetalTabCurveType():
    """
    The following members are used to identify curve types of base tab feature.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BendCenterLine", " - "
       "BendTangentLine", " - "
    """
    BendCenterLine = 0  # PartSheetmetalTabCurveTypeMemberType
    BendTangentLine = 1  # PartSheetmetalTabCurveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartSheetmetalTabCurveTypeDisplayData_Struct():
    """
    The members of the following structure are the display data of a tab curve type.  
    
    Constructor: 
    NXOpen.Preferences.PartSheetmetal.TabCurveTypeDisplayData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Type: PartSheetmetalTabCurveType = ...
    """
    Curve type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.PartSheetmetalTabCurveType`
    """
    IsEnabled: int = ...
    """
    Enabled status of the curve type 
    <hr>
    
    Field Value
    Type:int
    """
    Color: NXOpen.NXColor = ...
    """
    Curve color 
    <hr>
    
    Field Value
    Type:Id
    """
    Font: NXOpen.DisplayableObjectObjectFont = ...
    """
    Curve font 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectFont`
    """
    Width: NXOpen.DisplayableObjectObjectWidth = ...
    """
    Curve width 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
    """


class PartSheetmetalFlatPatternCalloutOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartSheetmetalFlatPatternCalloutOrientationType():
    """
    This enum represents orientation types for the flat pattern callouts 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Leadered", "Leadered"
       "Aligned", "Aligned"
    """
    Leadered = 0  # PartSheetmetalFlatPatternCalloutOrientationTypeMemberType
    Aligned = 1  # PartSheetmetalFlatPatternCalloutOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartSheetmetal():
    """
    Represents the NX Sheetmetal preferences applicable to part   
    
    Preferences are in control of the part. They can not be created but can only be changed.
    
    .. versionadded:: NX4.0.0
    """
    
    class BendDefinitionMethodOptions():
        """
        This enum represents the bend definition method options in preferences. 
        
        This is used to specify the bend definition method. You can choose to 
        use a global Neutral Factor value OR a Bend Table OR a Bend 
        Allowance Formula OR a Material Table.
        
        .. versionadded:: NX12.0.0
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NeutralFactorValue", "The neutral factor value method"
           "BendTable", "The bend table method"
           "BendAllowanceFormula", "The bend allowance formula method"
           "MaterialTable", "The material table method"
           "ToolTable", "The tool table method"
           "BendAllowanceTable", "The bend allowance table method"
           "BendDeductionTable", "The bend deduction table method"
           "BendDeductionFormula", "The bend deduction formula method"
           "Din6935Formula", "The DIN6935 formula method"
        """
        NeutralFactorValue = 0  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        BendTable = 1  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        BendAllowanceFormula = 2  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        MaterialTable = 3  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        ToolTable = 4  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        BendAllowanceTable = 5  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        BendDeductionTable = 6  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        BendDeductionFormula = 7  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        Din6935Formula = 8  # PartSheetmetalBendDefinitionMethodOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FlatPatternObjectType():
        """
        The members of the following enumerated type are used to identify
        object types to the FlatPattern API. These are not the usual
        NX object types; they are ordinary NX objects that are known to
        the flat pattern feature for the type of outline they provide to
        a bend region, joggle region, or lightening hole. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BendCenterLine", "Deprecated"
           "BendUpCenterLine", " - "
           "BendDownCenterLine", " - "
           "BendTangentLine", " - "
           "OuterMoldLine", " - "
           "InnerMoldLine", " - "
           "ExteriorCurves", " - "
           "InteriorCurves", "Deprecated"
           "InteriorCutoutCurves", " - "
           "InteriorFeatureCurves", " - "
           "StrikePoint", " - "
           "LighteningHoleCenter", " - "
           "JoggleLine", " - "
           "AddedTopGeometry", " - "
           "AddedBottomGeometry", " - "
           "ToolMarker", " - "
        """
        BendCenterLine = 0  # PartSheetmetalFlatPatternObjectTypeMemberType
        BendUpCenterLine = 1  # PartSheetmetalFlatPatternObjectTypeMemberType
        BendDownCenterLine = 2  # PartSheetmetalFlatPatternObjectTypeMemberType
        BendTangentLine = 3  # PartSheetmetalFlatPatternObjectTypeMemberType
        OuterMoldLine = 4  # PartSheetmetalFlatPatternObjectTypeMemberType
        InnerMoldLine = 5  # PartSheetmetalFlatPatternObjectTypeMemberType
        ExteriorCurves = 6  # PartSheetmetalFlatPatternObjectTypeMemberType
        InteriorCurves = 7  # PartSheetmetalFlatPatternObjectTypeMemberType
        InteriorCutoutCurves = 8  # PartSheetmetalFlatPatternObjectTypeMemberType
        InteriorFeatureCurves = 9  # PartSheetmetalFlatPatternObjectTypeMemberType
        StrikePoint = 10  # PartSheetmetalFlatPatternObjectTypeMemberType
        LighteningHoleCenter = 11  # PartSheetmetalFlatPatternObjectTypeMemberType
        JoggleLine = 12  # PartSheetmetalFlatPatternObjectTypeMemberType
        AddedTopGeometry = 13  # PartSheetmetalFlatPatternObjectTypeMemberType
        AddedBottomGeometry = 14  # PartSheetmetalFlatPatternObjectTypeMemberType
        ToolMarker = 15  # PartSheetmetalFlatPatternObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FlatPatternObjectTypeDisplay():
        """
        The members of the following structure are the display data for an
        object in a flat pattern drawing member view.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartSheetmetal.FlatPatternObjectTypeDisplay()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Type: PartSheetmetalFlatPatternObjectType = ...
        """
        Object type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternObjectType`
        """
        IsEnabled: int = ...
        """
        Enabled status for the object type 
        <hr>
        
        Field Value
        Type:int
        """
        Color: NXOpen.NXColor = ...
        """
        Object color 
        <hr>
        
        Field Value
        Type:Id
        """
        Layer: int = ...
        """
        Object Layer 
        <hr>
        
        Field Value
        Type:int
        """
        Font: NXOpen.DisplayableObjectObjectFont = ...
        """
        Object font 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectFont`
        """
        Width: NXOpen.DisplayableObjectObjectWidth = ...
        """
        Object width 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
        """
    
    
    class TabCurveType():
        """
        The following members are used to identify curve types of base tab feature.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BendCenterLine", " - "
           "BendTangentLine", " - "
        """
        BendCenterLine = 0  # PartSheetmetalTabCurveTypeMemberType
        BendTangentLine = 1  # PartSheetmetalTabCurveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TabCurveTypeDisplayData():
        """
        The members of the following structure are the display data of a tab curve type.  
        
        Constructor: 
        NXOpen.Preferences.PartSheetmetal.TabCurveTypeDisplayData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Type: PartSheetmetalTabCurveType = ...
        """
        Curve type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.PartSheetmetalTabCurveType`
        """
        IsEnabled: int = ...
        """
        Enabled status of the curve type 
        <hr>
        
        Field Value
        Type:int
        """
        Color: NXOpen.NXColor = ...
        """
        Curve color 
        <hr>
        
        Field Value
        Type:Id
        """
        Font: NXOpen.DisplayableObjectObjectFont = ...
        """
        Curve font 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectFont`
        """
        Width: NXOpen.DisplayableObjectObjectWidth = ...
        """
        Curve width 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObjectObjectWidth`
        """
    
    
    class FlatPatternCalloutTypeDisplay():
        """
        The members of the following structure are the display data for a
        callout in a flat pattern drawing member view.  
        
        .
        Constructor: 
        NXOpen.Preferences.PartSheetmetal.FlatPatternCalloutTypeDisplay()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Type: str = ...
        """
        The name of the callout type.  
        
        The string is one returned by the 
        get_callout_data method, or can
        be hand-coded as the application name 'dot' the callout
        name, like this:
        "FlatPatternView.BendRadius". Neither name is
        case sensitive and blanks are not significant. This type
        of hand-coded callout type is usable as long as the
        callout type name is unique within the application name. 
        Beware of changing the defaults and loading old parts. 
        <hr>
        
        Field Value
        Type:str
        """
        IsEnabled: int = ...
        """
        Enabled status for the callout type.  
        
        <hr>
        
        Field Value
        Type:int
        """
        Name: str = ...
        """
        dialog name for the callout type.  
        
        <hr>
        
        Field Value
        Type:str
        """
    
    
    class FlatPatternCalloutOrientationType():
        """
        This enum represents orientation types for the flat pattern callouts 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Leadered", "Leadered"
           "Aligned", "Aligned"
        """
        Leadered = 0  # PartSheetmetalFlatPatternCalloutOrientationTypeMemberType
        Aligned = 1  # PartSheetmetalFlatPatternCalloutOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetThickness(self) -> NXOpen.Expression:
        """
        RETURNS the thickness expression  
        
        Signature ``GetThickness()`` 
        
        :returns:  expression object for sheet thickness  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetThickness(self, updateModel: bool, thickness: str) -> None:
        """
        THE thickness value string 
        
        Signature ``SetThickness(updateModel, thickness)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param thickness:  default thickness value for NX Sheetmetal solids  
        :type thickness: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetBendRadius(self) -> NXOpen.Expression:
        """
        RETURNS the bend radius expression  
        
        Signature ``GetBendRadius()`` 
        
        :returns:  expression object for radius of bend faces 
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetBendRadius(self, updateModel: bool, bendRadius: str) -> None:
        """
        The bend radius value 
        
        Signature ``SetBendRadius(updateModel, bendRadius)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendRadius:  default bend radius value for bend faces  
        :type bendRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetBendReliefDepth(self) -> NXOpen.Expression:
        """
        RETURNS the bend relief depth  
        
        Signature ``GetBendReliefDepth()`` 
        
        :returns:  expression object for depth of bend relief  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetBendReliefDepth(self, updateModel: bool, bendReliefDepth: str) -> None:
        """
        THE bend relief depth value 
        
        Signature ``SetBendReliefDepth(updateModel, bendReliefDepth)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendReliefDepth:  default depth value for bend relief  
        :type bendReliefDepth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetBendReliefWidth(self) -> NXOpen.Expression:
        """
        RETURNS the bend relief width  
        
        Signature ``GetBendReliefWidth()`` 
        
        :returns:  expression object for width of bend relief  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetBendReliefWidth(self, updateModel: bool, bendReliefWidth: str) -> None:
        """
        THE bend relief depth value 
        
        Signature ``SetBendReliefWidth(updateModel, bendReliefWidth)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendReliefWidth:  default width value for bend relief  
        :type bendReliefWidth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetNeutralFactor(self) -> NXOpen.Expression:
        """
        RETURNS the neutral factor  
        
        Signature ``GetNeutralFactor()`` 
        
        :returns:  expression object for neutral factor of bend areas  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetNeutralFactor(self, updateModel: bool, neutralFactor: str) -> None:
        """
        THE bend relief depth value 
        
        Signature ``SetNeutralFactor(updateModel, neutralFactor)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param neutralFactor:  default neutral factor value for bend relief  
        :type neutralFactor: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetOuterCornerTreatmentValue(self) -> NXOpen.Expression:
        """
        RETURNS the out corner treatment value for Flat as Solid operations  
        
        Signature ``GetOuterCornerTreatmentValue()`` 
        
        :returns:  expression object for out corner treatment value  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetOuterCornerTreatmentValue(self, updateModel: bool, outerCornerTreatment: str) -> None:
        """
        THE outer corner treatment value for Flat as Solid operations 
        
        Signature ``SetOuterCornerTreatmentValue(updateModel, outerCornerTreatment)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param outerCornerTreatment:  default value for out corner treatment  
        :type outerCornerTreatment: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetOuterCornerTreatmentType(self) -> NXOpen.Features.SheetMetal.FeatureProperty:
        """
        RETURNS the outer corner treatment type in Flat as Solid operation  
        
        Signature ``GetOuterCornerTreatmentType()`` 
        
        :returns:  outer corner treatment type  
        :rtype: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetOuterCornerTreatmentType(self, updateModel: bool, outerCornerTreatmentType: NXOpen.Features.SheetMetal.FeatureProperty) -> None:
        """
        SETS the outer corner treatment type in Flat as Solid operation 
        
        Signature ``SetOuterCornerTreatmentType(updateModel, outerCornerTreatmentType)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param outerCornerTreatmentType:  outer corner treatment type  
        :type outerCornerTreatmentType: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetInnerCornerTreatmentValue(self) -> NXOpen.Expression:
        """
        RETURNS the inner corner treatment value for Flat as Solid operations  
        
        Signature ``GetInnerCornerTreatmentValue()`` 
        
        :returns:  expression object for inner corner treatment value  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetInnerCornerTreatmentValue(self, updateModel: bool, innerCornerTreatment: str) -> None:
        """
        SETS the inner corner treatment value for Flat as Solid operations 
        
        Signature ``SetInnerCornerTreatmentValue(updateModel, innerCornerTreatment)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param innerCornerTreatment:  default value for inner corner treatment  
        :type innerCornerTreatment: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetInnerCornerTreatmentType(self) -> NXOpen.Features.SheetMetal.FeatureProperty:
        """
        RETURNS the inner corner treatment type in Flat as Solid operation  
        
        Signature ``GetInnerCornerTreatmentType()`` 
        
        :returns:  outer corner treatment type  
        :rtype: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetInnerCornerTreatmentType(self, updateModel: bool, innerCornerTreatmentType: NXOpen.Features.SheetMetal.FeatureProperty) -> None:
        """
        SETS the inner corner treatment type in Flat as Solid operation 
        
        Signature ``SetInnerCornerTreatmentType(updateModel, innerCornerTreatmentType)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param innerCornerTreatmentType:  outer corner treatment type  
        :type innerCornerTreatmentType: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetIsBsplineSimplifiedInFlatSolid(self) -> bool:
        """
        RETURNS the flag indicating whether B-Splines are simplified as part of the Flat Solid creation 
        
        Signature ``GetIsBsplineSimplifiedInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetIsBsplineSimplifiedInFlatSolid(self, updateModel: bool, isBsplineSimplifiedInFlatSolid: bool) -> None:
        """
        SETS the flag indicating whether or not B-Splines are simplified as part of the Flat Solid creation
        
        Signature ``SetIsBsplineSimplifiedInFlatSolid(updateModel, isBsplineSimplifiedInFlatSolid)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param isBsplineSimplifiedInFlatSolid:  flag   
        :type isBsplineSimplifiedInFlatSolid: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetIsSystemGeneratedBendReliefRemovedInFlatSolid(self) -> bool:
        """
        RETURNS the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation 
        
        Signature ``GetIsSystemGeneratedBendReliefRemovedInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetIsSystemGeneratedBendReliefRemovedInFlatSolid(self, updateModel: bool, isSystemGeneratedBendReliefRemoved: bool) -> None:
        """
        SETS the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation
        
        Signature ``SetIsSystemGeneratedBendReliefRemovedInFlatSolid(updateModel, isSystemGeneratedBendReliefRemoved)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param isSystemGeneratedBendReliefRemoved:  flag   
        :type isSystemGeneratedBendReliefRemoved: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetMinimumArcToleranceInFlatSolid(self) -> float:
        """
        RETURNS the minimum arc tolerance during Flat Solid simplification  
        
        Signature ``GetMinimumArcToleranceInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetMinimumArcToleranceInFlatSolid(self, updateModel: bool, minimumArcToleranceInFlatSolid: float) -> None:
        """
        SETS the minimum arc tolerance during Flat Solid simplification 
        
        Signature ``SetMinimumArcToleranceInFlatSolid(updateModel, minimumArcToleranceInFlatSolid)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param minimumArcToleranceInFlatSolid:  flag   
        :type minimumArcToleranceInFlatSolid: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetDeviationalToleranceInFlatSolid(self) -> float:
        """
        RETURNS the deviational tolerance during Flat Solid simplification  
        
        Signature ``GetDeviationalToleranceInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetDeviationalToleranceInFlatSolid(self, updateModel: bool, deviationalToleranceInFlatSolid: float) -> None:
        """
        SETS the deviational tolerance during Flat Solid simplification 
        
        Signature ``SetDeviationalToleranceInFlatSolid(updateModel, deviationalToleranceInFlatSolid)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param deviationalToleranceInFlatSolid:  flag   
        :type deviationalToleranceInFlatSolid: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetBendDefinitionMethodOption(self) -> PartSheetmetalBendDefinitionMethodOptions:
        """
        RETURNS the bend definition method  
        
        Signature ``GetBendDefinitionMethodOption()`` 
        
        :returns:  bend definition method option  
        :rtype: :py:class:`NXOpen.Preferences.PartSheetmetalBendDefinitionMethodOptions` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetBendDefinitionMethodOption(self, updateModel: bool, bendDefinitionMethod: PartSheetmetalBendDefinitionMethodOptions) -> None:
        """
        SETS the bend definition method 
        
        Signature ``SetBendDefinitionMethodOption(updateModel, bendDefinitionMethod)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendDefinitionMethod:  bend definition method option  
        :type bendDefinitionMethod: :py:class:`NXOpen.Preferences.PartSheetmetalBendDefinitionMethodOptions` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetBendTable(self) -> str:
        """
        RETURNS the bend table name  
        
        Signature ``GetBendTable()`` 
        
        :returns:  bend table name 
        :rtype: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetBendTable(self, updateModel: bool, bendTable: str) -> None:
        """
        SETS the bend table name 
        
        Signature ``SetBendTable(updateModel, bendTable)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendTable:  bend table name 
        :type bendTable: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetBendAllowanceFormula(self) -> str:
        """
        RETURNS the bend allowance formula  
        
        Signature ``GetBendAllowanceFormula()`` 
        
        :returns:  bend allowance formula 
        :rtype: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetBendAllowanceFormula(self, updateModel: bool, bendAllowanceFormula: str) -> None:
        """
        SETS the bend allowance formula 
        
        Signature ``SetBendAllowanceFormula(updateModel, bendAllowanceFormula)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendAllowanceFormula:  bend allowance formula 
        :type bendAllowanceFormula: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetBendDeductionFormula(self) -> str:
        """
        Returns the bend deduction formula 
        
        Signature ``GetBendDeductionFormula()`` 
        
        :returns:  bend deduction formula 
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBendDeductionFormula(self, updateModel: bool, bendDeductionFormula: str) -> None:
        """
        Signature ``SetBendDeductionFormula(updateModel, bendDeductionFormula)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param bendDeductionFormula:  bend deduction formula 
        :type bendDeductionFormula: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetSecondaryToolName(self) -> str:
        """
        Returns the secondaryToolName refered from Material Table  
        
        Signature ``GetSecondaryToolName()`` 
        
        :returns:  secondaryToolName 
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSecondaryToolName(self, updateModel: bool, secondaryToolName: str) -> None:
        """
        Signature ``SetSecondaryToolName(updateModel, secondaryToolName)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param secondaryToolName:  secondaryToolName 
        :type secondaryToolName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetMaterialNames(self) -> 'list[str]':
        """
        RETURNS the material names defined in the material standards table  
        
        Signature ``GetMaterialNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetMaterial(self) -> str:
        """
        RETURNS the material name saved with the part  
        
        Signature ``GetMaterial()`` 
        
        :returns:  The name of the material saved with the part 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetMaterialProperties(self, materialName: str) -> tuple:
        """
        RETURNS the material name saved with the part  
        
        Signature ``GetMaterialProperties(materialName)`` 
        
        :param materialName: material Name  
        :type materialName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (propertyValues, propertyNames). propertyValues is a list of str.  property Values propertyNames is a list of str.  property Names 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetMaterial(self, updateModel: bool, standardName: str) -> None:
        """
        The material standard 
        
        Signature ``SetMaterial(updateModel, standardName)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param standardName:  The name of a material from the material standards file  
        :type standardName: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def Commit(self) -> None:
        """
        Commits and applies all the settings done with set_callout_type_display
        and set_object_type_display.  
        
        It must be called after a sequence of calls
        to those methods to cause the view to update. 
        
        Signature ``Commit()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlatPatternObjectTypeDisplay(self, objectType: PartSheetmetalFlatPatternObjectType) -> PartSheetmetalFlatPatternObjectTypeDisplay_Struct:
        """
        Returns the display data for a flat pattern object type.  
        
        Signature ``GetFlatPatternObjectTypeDisplay(objectType)`` 
        
        :param objectType:  The object type for which to return the display data.  
        :type objectType: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternObjectType` 
        :returns:  The display data for the flat pattern object type.  
        :rtype: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternObjectTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetFlatPatternObjectTypeDisplay(self, updateModel: bool, objectType: PartSheetmetalFlatPatternObjectType, displayData: PartSheetmetalFlatPatternObjectTypeDisplay_Struct) -> None:
        """
        Sets the display data for a flat pattern object type.  
        
        Signature ``SetFlatPatternObjectTypeDisplay(updateModel, objectType, displayData)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately. 
        :type updateModel: bool 
        :param objectType:  The object type for which to get the display data.  
        :type objectType: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternObjectType` 
        :param displayData:  The display data for the flat pattern object type.  
        :type displayData: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternObjectTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetTabCurveTypeDisplayData(self, curveType: PartSheetmetalTabCurveType) -> PartSheetmetalTabCurveTypeDisplayData_Struct:
        """
        Returns the display data for a given tab curve type.  
        
        Signature ``GetTabCurveTypeDisplayData(curveType)`` 
        
        :param curveType:  The curve type for which to return the display data.  
        :type curveType: :py:class:`NXOpen.Preferences.PartSheetmetalTabCurveType` 
        :returns:  The display data for the tab curves object type.  
        :rtype: :py:class:`NXOpen.Preferences.PartSheetmetalTabCurveTypeDisplayData_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTabCurveTypeDisplayData(self, updateModel: bool, curveType: PartSheetmetalTabCurveType, displayData: PartSheetmetalTabCurveTypeDisplayData_Struct) -> None:
        """
        Sets the display data for a given tab curve type.  
        
        Signature ``SetTabCurveTypeDisplayData(updateModel, curveType, displayData)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately. 
        :type updateModel: bool 
        :param curveType:  The curve type for which to get the display data.  
        :type curveType: :py:class:`NXOpen.Preferences.PartSheetmetalTabCurveType` 
        :param displayData:  The display data for the tab curve type.  
        :type displayData: :py:class:`NXOpen.Preferences.PartSheetmetalTabCurveTypeDisplayData_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlatPatternCalloutTypeDisplay(self, calloutType: str) -> PartSheetmetalFlatPatternCalloutTypeDisplay_Struct:
        """
        Returns the display data for a callout type.  
        
        The name member of the
        :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesignFlatPatternCalloutTypeDisplay_Struct`
        is separately allocated from the callout_type argument string.
        In some cases the new string will contain an
        extended form of the callout_type passed in, and that form should
        be used for subsequent JA calls, without modification.  
        
        Signature ``GetFlatPatternCalloutTypeDisplay(calloutType)`` 
        
        :param calloutType:  The name of the callout type for which to get the display data.  
        :type calloutType: str 
        :returns:  The display data for the callout type.  
        :rtype: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternCalloutTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetFlatPatternCalloutTypeDisplay(self, calloutType: str, displayData: PartSheetmetalFlatPatternCalloutTypeDisplay_Struct) -> None:
        """
        Sets the display data for a callout type.  
        
        Signature ``SetFlatPatternCalloutTypeDisplay(calloutType, displayData)`` 
        
        :param calloutType:  The name of the callout type for which to set the display data.  
        :type calloutType: str 
        :param displayData:  The display data for the callout type.  
        :type displayData: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternCalloutTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlatPatternAllObjectTypeDisplay(self) -> 'list[PartSheetmetalFlatPatternObjectTypeDisplay_Struct]':
        """
        Returns the types, colors, fonts, widths, and enabled status for all the
        the available object types.  
        
        Signature ``GetFlatPatternAllObjectTypeDisplay()`` 
        
        :returns:  Array of structures with the object type display data.  
        :rtype: list of :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternObjectTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlatPatternAllCalloutTypeDisplay(self) -> 'list[PartSheetmetalFlatPatternCalloutTypeDisplay_Struct]':
        """
        Returns the dialog names, identifiers, and enabled status for all the
        available callout types.  
        
        Signature ``GetFlatPatternAllCalloutTypeDisplay()`` 
        
        :returns:  Array of structures with the callout type display data.  
        :rtype: list of :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternCalloutTypeDisplay_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetMaintainCircularShapeForHolesInFlatSolid(self) -> bool:
        """
        Returns the flag indicating whether or not maintain circular shape for holes as part of the Flat Solid creation 
        
        Signature ``GetMaintainCircularShapeForHolesInFlatSolid()`` 
        
        :returns:  flag   
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetMaintainCircularShapeForHolesInFlatSolid(self, updateModel: bool, isMaintainCircularShapeForHoles: bool) -> None:
        """
        Sets the flag indicating whether or not maintain circular shape for holes as part of the Flat Solid creation
        
        Signature ``SetMaintainCircularShapeForHolesInFlatSolid(updateModel, isMaintainCircularShapeForHoles)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param isMaintainCircularShapeForHoles:  flag   
        :type isMaintainCircularShapeForHoles: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetMinimumToolClearance(self) -> NXOpen.Expression:
        """
        Returns the minimum tool clearance expression  
        
        Signature ``GetMinimumToolClearance()`` 
        
        :returns:  expression object for punch tool clearance  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetMinimumToolClearance(self, updateModel: bool, minToolClearance: str) -> None:
        """
        Sets minimum tool clearance expression 
        
        Signature ``SetMinimumToolClearance(updateModel, minToolClearance)`` 
        
        :param updateModel:  Specifies whether the model be updated immediately 
        :type updateModel: bool 
        :param minToolClearance:  minimum tool clearance value for NX Sheetmetal model  
        :type minToolClearance: str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetMinimumWebLength(self) -> NXOpen.Expression:
        """
        Returns the minimum Web Length expression  
        
        Signature ``GetMinimumWebLength()`` 
        
        :returns:  expression object for Web Length   
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetMinimumWebLength(self, updateModel: bool, minWebLength: str) -> None:
        """
        Sets minimum Web Length expression 
        
        Signature ``SetMinimumWebLength(updateModel, minWebLength)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param minWebLength:  minimum Web Length value for NX Sheetmetal model  
        :type minWebLength: str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetToolNames(self) -> 'list[str]':
        """
        Returns the tool names defined in the material standards table  
        
        Signature ``GetToolNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetTool(self) -> str:
        """
        Returns the tool name saved with the part  
        
        Signature ``GetTool()`` 
        
        :returns:  The name of the tool saved with the part 
        :rtype: str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetToolProperties(self, toolName: str) -> tuple:
        """
        Returns the tool properties saved with the part  
        
        Signature ``GetToolProperties(toolName)`` 
        
        :param toolName: tool Name  
        :type toolName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (propertyValues, propertyNames). propertyValues is a list of str.  property Values propertyNames is a list of str.  property Names 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetTool(self, updateModel: bool, standardName: str) -> None:
        """
        The tool standard 
        
        Signature ``SetTool(updateModel, standardName)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param standardName:  The name of a tool from the material standards file  
        :type standardName: str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlexibleCableTopFaceColor(self) -> NXOpen.NXColor:
        """
        RETURNS the top face color.  
        
        Signature ``GetFlexibleCableTopFaceColor()`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetFlexibleCableTopFaceColor(self, topFaceColor: NXOpen.NXColor) -> None:
        """
        THE top face color.  
        
        Signature ``SetFlexibleCableTopFaceColor(topFaceColor)`` 
        
        :param topFaceColor: 
        :type topFaceColor: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlexibleCableBottomFaceColor(self) -> NXOpen.NXColor:
        """
        RETURNS the bottom face color.  
        
        Signature ``GetFlexibleCableBottomFaceColor()`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetFlexibleCableBottomFaceColor(self, bottomFaceColor: NXOpen.NXColor) -> None:
        """
        THE bottom face color.  
        
        Signature ``SetFlexibleCableBottomFaceColor(bottomFaceColor)`` 
        
        :param bottomFaceColor: 
        :type bottomFaceColor: Id 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlatPatternCalloutTypeContents(self, calloutType: str) -> 'list[str]':
        """
        Returns the contents for a callout type.  
        
        Signature ``GetFlatPatternCalloutTypeContents(calloutType)`` 
        
        :param calloutType:  The name of the callout type for which to get the content.  
        :type calloutType: str 
        :returns:  The contents for the callout type.  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetFlatPatternCalloutTypeContents(self, calloutType: str, contents: 'list[str]') -> None:
        """
        Sets the contents for a callout type.  
        
        Signature ``SetFlatPatternCalloutTypeContents(calloutType, contents)`` 
        
        :param calloutType:  The name of the callout type for which to set the content.  
        :type calloutType: str 
        :param contents:  The contents for the callout type.  
        :type contents: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetFlatPatternCalloutOrientationType(self) -> PartSheetmetalFlatPatternCalloutOrientationType:
        """
        Returns the orientation type for flat pattern callouts.  
        
        Signature ``GetFlatPatternCalloutOrientationType()`` 
        
        :returns:  The orientation type for the flat pattern callouts.  
        :rtype: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternCalloutOrientationType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetFlatPatternCalloutOrientationType(self, orientation: PartSheetmetalFlatPatternCalloutOrientationType) -> None:
        """
        Sets the orientation type for flat pattern callouts.  
        
        Signature ``SetFlatPatternCalloutOrientationType(orientation)`` 
        
        :param orientation:  The orientation type for the flat pattern callouts.  
        :type orientation: :py:class:`NXOpen.Preferences.PartSheetmetalFlatPatternCalloutOrientationType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetStationaryRadius(self) -> NXOpen.Expression:
        """
        RETURNS the stationary radius  
        
        Signature ``GetStationaryRadius()`` 
        
        :returns:  expression object for stationary radius of joggle  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetStationaryRadius(self, updateModel: bool, stationaryRadius: str) -> None:
        """
        THE stationary radius 
        
        Signature ``SetStationaryRadius(updateModel, stationaryRadius)`` 
        
        :param updateModel:  Specifies whether the solid model be updated immediately 
        :type updateModel: bool 
        :param stationaryRadius:  default stationary radius for joggle  
        :type stationaryRadius: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def GetOffsetRadius(self) -> NXOpen.Expression:
        """
        RETURNS the offset radius  
        
        Signature ``GetOffsetRadius()`` 
        
        :returns:  expression object for offset radius of joggle  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetOffsetRadius(self, updateModel: bool, offsetRadius: str) -> None:
        """
        THE offset radius 
        
        Signature ``SetOffsetRadius(updateModel, offsetRadius)`` 
        
        :param updateModel:  Specifies whether the solid model be updated immediately 
        :type updateModel: bool 
        :param offsetRadius:  default offset radius for joggle  
        :type offsetRadius: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def GetDistanceThreshold(self) -> NXOpen.Expression:
        """
        RETURNS the distance threshold  
        
        Signature ``GetDistanceThreshold()`` 
        
        :returns:  expression object for distance threshold of joggle  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetDistanceThreshold(self, updateModel: bool, distanceThreshold: str) -> None:
        """
        THE distance threshold 
        
        Signature ``SetDistanceThreshold(updateModel, distanceThreshold)`` 
        
        :param updateModel:  Specifies whether the solid model be updated immediately 
        :type updateModel: bool 
        :param distanceThreshold:  default distance threshold for joggle  
        :type distanceThreshold: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def GetDepthThreshold(self) -> NXOpen.Expression:
        """
        RETURNS the depth threshold  
        
        Signature ``GetDepthThreshold()`` 
        
        :returns:  expression object for depth threshold of joggle  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def SetDepthThreshold(self, updateModel: bool, depthThreshold: str) -> None:
        """
        THE depth threshold 
        
        Signature ``SetDepthThreshold(updateModel, depthThreshold)`` 
        
        :param updateModel:  Specifies whether the solid model be updated immediately 
        :type updateModel: bool 
        :param depthThreshold:  default depth threshold for joggle  
        :type depthThreshold: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN")
        """
        ...
    
    
    def GetHoleTreatmentDiameter(self) -> NXOpen.Expression:
        """
        RETURNS the hole treatment diameter value in Flat Pattern operation  
        
        Signature ``GetHoleTreatmentDiameter()`` 
        
        :returns:  expression object for hole diameter value  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetHoleTreatmentDiameter(self, updateModel: bool, diameter: str) -> None:
        """
        SETS the hole treatment diameter value in Flat Pattern operation 
        
        Signature ``SetHoleTreatmentDiameter(updateModel, diameter)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param diameter:  default value for hole diameter  
        :type diameter: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def GetHoleTreatmentType(self) -> NXOpen.Features.SheetMetal.FeatureProperty:
        """
        RETURNS the hole treatment type in Flat Pattern operation  
        
        Signature ``GetHoleTreatmentType()`` 
        
        :returns:  hole treatment type  
        :rtype: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def SetHoleTreatmentType(self, updateModel: bool, holeTreatmentType: NXOpen.Features.SheetMetal.FeatureProperty) -> None:
        """
        SETS the hole treatment type in Flat Pattern operation 
        
        Signature ``SetHoleTreatmentType(updateModel, holeTreatmentType)`` 
        
        :param updateModel:  Specifies whether the solid model be recomputed immediately 
        :type updateModel: bool 
        :param holeTreatmentType:  hole treatment type  
        :type holeTreatmentType: :py:class:`NXOpen.Features.SheetMetal.FeatureProperty` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    


class DraftingPreferenceManager():
    """
    Represents a collection of pmi preference builders.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX5.0.0
    """
    
    def CreateLoadDraftingStandardBuilder(self) -> LoadDraftingStandardBuilder:
        """
        Creates the load drafting standard builder  
        
        Signature ``CreateLoadDraftingStandardBuilder()`` 
        
        :returns:  the loaddraftingstandard Builder with this identifier  
        :rtype: :py:class:`NXOpen.Preferences.LoadDraftingStandardBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    


class HiddenLineInterferingSolidsOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HiddenLineInterferingSolidsOption():
    """
    Represents the Interfering Solids options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Yes", "Yes"
       "InterferenceCurves", "Interference Curves"
    """
    NotSet = 0  # HiddenLineInterferingSolidsOptionMemberType
    Yes = 1  # HiddenLineInterferingSolidsOptionMemberType
    InterferenceCurves = 2  # HiddenLineInterferingSolidsOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewSection(NXOpen.Builder):
    """
    Records / queries view section preferences.  
    
    To obtain a instance of this class use :py:meth:`Preferences.SessionPreferences.CreateViewSectionPreference`
    
    .. versionadded:: NX7.5.0
    """
    
    def SetDefaults(self) -> None:
        """
        Set current view section preferences to the default 
        customer default values.  
        
        Signature ``SetDefaults()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    LoadExact: bool = ...
    """
    Returns or sets  the load exact geometry on a save section curves operation
    view section preference.  
    
    <hr>
    
    Getter Method
    
    Signature ``LoadExact`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadExact`` 
    
    :param loadExact: 
    :type loadExact: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TranslucentPlanes: bool = ...
    """
    Returns or sets  the translucent plane setting view section preference.  
    
    <hr>
    
    Getter Method
    
    Signature ``TranslucentPlanes`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TranslucentPlanes`` 
    
    :param translucentPlanes: 
    :type translucentPlanes: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ViewSection = ...  # unknown typename


class RoutingLogicalFlowArrowEnumTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingLogicalFlowArrowEnumType():
    """
    How to create terminal segments (if creating terminal segments). 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Open", "Open arrow head on flow arrow."
       "Closed", "Closed arrow head on flow arrow."
       "Filled", "Filled arrow head on flow arrow."
    """
    Open = 0  # RoutingLogicalFlowArrowEnumTypeMemberType
    Closed = 1  # RoutingLogicalFlowArrowEnumTypeMemberType
    Filled = 2  # RoutingLogicalFlowArrowEnumTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingLogical():
    """
    The RoutingLogical object stores a set of route logical preferences.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX4.0.0
    """
    
    class FlowArrowEnumType():
        """
        How to create terminal segments (if creating terminal segments). 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Open", "Open arrow head on flow arrow."
           "Closed", "Closed arrow head on flow arrow."
           "Filled", "Filled arrow head on flow arrow."
        """
        Open = 0  # RoutingLogicalFlowArrowEnumTypeMemberType
        Closed = 1  # RoutingLogicalFlowArrowEnumTypeMemberType
        Filled = 2  # RoutingLogicalFlowArrowEnumTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FlowArrowParameterA: float = ...
    """
    Returns or sets  the application view flow arrow parameter A 
    
    <hr>
    
    Getter Method
    
    Signature ``FlowArrowParameterA`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``FlowArrowParameterA`` 
    
    :param flowArrowParameterA: 
    :type flowArrowParameterA: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_pid ("Routing PID")
    """
    FlowArrowParameterB: float = ...
    """
    Returns or sets  the application view flow arrow parameter B 
    
    <hr>
    
    Getter Method
    
    Signature ``FlowArrowParameterB`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``FlowArrowParameterB`` 
    
    :param flowArrowParameterB: 
    :type flowArrowParameterB: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_pid ("Routing PID")
    """
    FlowArrowType: RoutingLogicalFlowArrowEnumType = ...
    """
    Returns or sets  the application view flow arrow type 
    
    <hr>
    
    Getter Method
    
    Signature ``FlowArrowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.RoutingLogicalFlowArrowEnumType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``FlowArrowType`` 
    
    :param flowArrowType: 
    :type flowArrowType: :py:class:`NXOpen.Preferences.RoutingLogicalFlowArrowEnumType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_pid ("Routing PID")
    """


class PartPreferences():
    """
    Represents set of preferences applicable to displayed part.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.BasePart`
    
    .. versionadded:: NX3.0.0
    """
    Workplane: WorkPlane = ...
    """
    Returns  the workplane preferences.  
    
    <hr>
    
    Getter Method
    
    Signature ``Workplane`` 
    
    :returns:  Represents WorkPlane preferences  
    :rtype: :py:class:`NXOpen.Preferences.WorkPlane` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Modeling: PartModeling = ...
    """
    Returns object for doing Modeling preferences settings applicable to displayed part 
    
    Signature ``Modeling`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartModeling`
    """
    Drafting: PartDrafting = ...
    """
    Returns object for doing Drafting preferences settings applicable to displayed part 
    
    Signature ``Drafting`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartDrafting`
    """
    ObjectPreferences: PartObject = ...
    """
    Returns object for doing object preferences settings applicable to displayed part 
    
    Signature ``ObjectPreferences`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartObject`
    """
    UserInterface: PartUserInterface = ...
    """
    Returns object for doing User Interface preferences settings applicable to displayed part 
    
    Signature ``UserInterface`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartUserInterface`
    """
    VisualVisualization: PartVisualizationVisual = ...
    """
    Returns object for doing Visualization preferences settings for Visual tab applicable to displayed part 
    
    Signature ``VisualVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationVisual`
    """
    LineVisualization: PartVisualizationLine = ...
    """
    Returns object for doing Visualization preferences settings for Line tab applicable to displayed part 
    
    Signature ``LineVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationLine`
    """
    NamesBorderVisualization: PartVisualizationNamesBorders = ...
    """
    Returns object for doing Visualization preferences settings for Names/Border tab applicable to displayed part 
    
    Signature ``NamesBorderVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationNamesBorders`
    """
    ColorSettingVisualization: PartVisualizationColorSetting = ...
    """
    Returns object for doing Visualization preferences settings for color setting tab applicable to displayed part 
    
    Signature ``ColorSettingVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationColorSetting`
    """
    ShadeVisualization: PartVisualizationShade = ...
    """
    Returns object for doing Visualization preferences settings for shade tab applicable to displayed part 
    
    Signature ``ShadeVisualization`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationShade`
    """
    PartSheetmetal: PartSheetmetal = ...
    """
    Returns object to modify the Preference settings for NX Sheetmetal application 
    
    Signature ``PartSheetmetal`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartSheetmetal`
    """
    PartFlexiblePrintedCircuitDesign: PartFlexiblePrintedCircuitDesign = ...
    """
    Returns object to modify the Preference settings for Flexible Printed Circuit Design application 
    
    Signature ``PartFlexiblePrintedCircuitDesign`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartFlexiblePrintedCircuitDesign`
    """
    PartAeroSheetmetal: PartAeroSheetmetal = ...
    """
    Returns object to modify the Preference settings for Aerospace Sheetmetal application 
    
    Signature ``PartAeroSheetmetal`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartAeroSheetmetal`
    """
    PartSketch: PartSketch = ...
    """
    Returns object to modify the Preference settings for Sketcher application 
    
    Signature ``PartSketch`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartSketch`
    """
    DraftingPreference: DraftingPreferenceManager = ...
    """
    Returns object to modify the Preference settings for PMI/drafting application 
    
    Signature ``DraftingPreference`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.DraftingPreferenceManager`
    """
    EmphasisVisualization: PartVisualizationEmphasis = ...
    """
    Returns object for doing Visualization preferences settings for emphasis tab applicable to displayed part 
    
    Signature ``EmphasisVisualization`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationEmphasis`
    """
    PerformanceVisualization: PartVisualizationPerformance = ...
    """
    Returns object for doing Visualization performance preference 
    settings for displayed part.  
    
    Signature ``PerformanceVisualization`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationPerformance`
    """
    ScreenVisualization: PartVisualizationScreen = ...
    """
    Returns object for doing Visualization preferences settings for screen tab applicable to displayed part 
    
    Signature ``ScreenVisualization`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationScreen`
    """


class IDetailViewPreferences():
    """
    Represents set of Detail ViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class SmoothEdgesViewPreferences(ISmoothEdgesViewPreferences):
    """
    Represents set of Smooth Edges View Preferences applicable to drafting views.  
    
    Allows to control the display of smooth edges. Smooth edges are those whose adjacent 
    faces have the same surface tangent at the edge where they meet.
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.SmoothEdges`
    
    .. versionadded:: NX5.0.0
    """
    SmoothEdge: bool = ...
    """
    Returns or sets  the status of smooth edge.  
    
    If True then it enables the smooth edge options. 
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdge`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdge`` 
    
    :param smoothEdge: 
    :type smoothEdge: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeColor: int = ...
    """
    Returns or sets  the color of smooth edge.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeColor`` 
    
    :param smoothEdgeColor: 
    :type smoothEdgeColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeEndGaps: bool = ...
    """
    Returns or sets  the status of smooth edge end gaps.  
    
    If True, the visible ends are suppressed from the display.
    The length of the suppressed end is in drawing units and is controlled by the value set in 
    the End Gap field. If False, the visible ends are not suppressed from the display.
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeEndGaps`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeEndGaps`` 
    
    :param smoothEdgeEndGaps: 
    :type smoothEdgeEndGaps: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeEndGapsData: float = ...
    """
    Returns or sets  the value of smooth edge end gaps.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeEndGapsData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeEndGapsData`` 
    
    :param smoothEdgeEndGapsData: 
    :type smoothEdgeEndGapsData: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeFont: Font = ...
    """
    Returns or sets  the font of smooth edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeFont`` 
    
    :param smoothEdgeFont: 
    :type smoothEdgeFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeTolerance: bool = ...
    """
    Returns or sets  the status of smooth edge angle tolerance.  
    
    If True,  the value set in 
    the Tolerance Data field is used. If False, the system default angle tolerance is used.
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeTolerance`` 
    
    :param smoothEdgeTolerance: 
    :type smoothEdgeTolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeToleranceData: float = ...
    """
    Returns or sets  the value of smooth edge angle tolerance in degrees.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeToleranceData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeToleranceData`` 
    
    :param smoothEdgeToleranceData: 
    :type smoothEdgeToleranceData: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeWidth: Width = ...
    """
    Returns or sets  the width of smooth edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeWidth`` 
    
    :param smoothEdgeWidth: 
    :type smoothEdgeWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class RoutingPathCurveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathCurveType():
    """
    Describes the types of curves allowed in a routing application.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Line", "UF_ROUTE_AV_CURVES_LINES"
       "Arc", "UF_ROUTE_AV_CURVES_ARCS"
       "Spline", "UF_ROUTE_AV_CURVES_SPLINES"
    """
    Line = 0  # RoutingPathCurveTypeMemberType
    Arc = 1  # RoutingPathCurveTypeMemberType
    Spline = 2  # RoutingPathCurveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathAllowedCornerTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathAllowedCornerType():
    """
    Describes the types of corners allowed in a routing application.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "UF_ROUTE_AV_CORNERS_NONE"
       "Bend", "UF_ROUTE_AV_CORNERS_BEND"
       "Cope", "UF_ROUTE_AV_CORNERS_COPE"
       "Miter", "UF_ROUTE_AV_CORNERS_MITER"
       "Sbend", "UF_ROUTE_AV_CORNERS_SBEND"
    """
    NotSet = 0  # RoutingPathAllowedCornerTypeMemberType
    Bend = 1  # RoutingPathAllowedCornerTypeMemberType
    Cope = 2  # RoutingPathAllowedCornerTypeMemberType
    Miter = 3  # RoutingPathAllowedCornerTypeMemberType
    Sbend = 4  # RoutingPathAllowedCornerTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathDefaultCornerTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathDefaultCornerType():
    """
    Describes the types of corners allowed in a routing application.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No Corner"
       "Bend", "Bend Corner"
       "Miter", "Miter Corner"
       "BendTable", "Not really a corner type. Used to indicate use of bend table in conjunction with a Bend corner"
    """
    NotSet = -1  # RoutingPathDefaultCornerTypeMemberType
    Bend = 0  # RoutingPathDefaultCornerTypeMemberType
    Miter = 1  # RoutingPathDefaultCornerTypeMemberType
    BendTable = 2  # RoutingPathDefaultCornerTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathRadiusMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathRadiusMethod():
    """
    Describes method used to determine bend radius on a bend or sbend corner 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Radius", "Use specified radius"
       "Ratio", "Use ratio to stock diameter to determine radius"
       "Table", "Use radius obtained from a bend table lookup"
       "InnerRadius", "Use inner radius"
    """
    Radius = 0  # RoutingPathRadiusMethodMemberType
    Ratio = 1  # RoutingPathRadiusMethodMemberType
    Table = 2  # RoutingPathRadiusMethodMemberType
    InnerRadius = 3  # RoutingPathRadiusMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathRadiusUnitsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathRadiusUnits():
    """
    Describes units of specified radius value :py:class:`NXOpen.Preferences.RoutingPathRadiusMethod.Radius <NXOpen.Preferences.RoutingPathRadiusMethod>` only. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Unspecified. Use units of part file."
       "Inches", "Use inch units"
       "Millimeters", "Use metric (mm) units"
    """
    NotSet = 0  # RoutingPathRadiusUnitsMemberType
    Inches = 1  # RoutingPathRadiusUnitsMemberType
    Millimeters = 2  # RoutingPathRadiusUnitsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathCreateSmartRcpsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathCreateSmartRcps():
    """
    Should Smart RCPs be created during path creation in Create Path? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", "Do not create smart RCPs."
       "True", "Create smart RCPs."
    """
    FalseValue = 0  # RoutingPathCreateSmartRcpsMemberType
    TrueValue = 1  # RoutingPathCreateSmartRcpsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathMergeDupRcpsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathMergeDupRcps():
    """
    Should duplicate RCPs be merged after a Transform [Move or Copy] operation? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", "Do not merge duplicate RCPs."
       "True", "Merge duplicate RCPs."
    """
    FalseValue = 0  # RoutingPathMergeDupRcpsMemberType
    TrueValue = 1  # RoutingPathMergeDupRcpsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathCreateTangencyMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathCreateTangency():
    """
    Should new splines form tangencies with existing splines when they're created? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", "Do not merge duplicate RCPs."
       "True", "Merge duplicate RCPs."
    """
    FalseValue = 0  # RoutingPathCreateTangencyMemberType
    TrueValue = 1  # RoutingPathCreateTangencyMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathAddPointsToSplineMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathAddPointsToSpline():
    """
    Should points be added to existing spline when they are subdivided to preserve shape? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", "Do not merge duplicate RCPs."
       "True", "Merge duplicate RCPs."
    """
    FalseValue = 0  # RoutingPathAddPointsToSplineMemberType
    TrueValue = 1  # RoutingPathAddPointsToSplineMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathConfirmBranchSelMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathConfirmBranchSel():
    """
    Should a branch selection confirmation dialog be show during Path selection? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", "Do not confirm branch selection."
       "True", "Confirm branch selection."
    """
    FalseValue = 0  # RoutingPathConfirmBranchSelMemberType
    TrueValue = 1  # RoutingPathConfirmBranchSelMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathContinueUpdOnErrorMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathContinueUpdOnError():
    """
    Should fixed length splines ignore length constraint violations and update? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", " - "
       "True", " - "
    """
    FalseValue = 0  # RoutingPathContinueUpdOnErrorMemberType
    TrueValue = 1  # RoutingPathContinueUpdOnErrorMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathChainMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathChainMethod():
    """
    Path curve chaining methods 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoBranch", "Curves must be mono-connected"
       "Continuous", "Tangents must match at each connection"
       "Tangent", "Use curve with closest tangent when searching"
       "Cycle", "Return all chains"
       "MinDist", "Chain with minimum path length"
       "MaxDist", "Chain with maximum path length"
    """
    NoBranch = 0  # RoutingPathChainMethodMemberType
    Continuous = 1  # RoutingPathChainMethodMemberType
    Tangent = 2  # RoutingPathChainMethodMemberType
    Cycle = 3  # RoutingPathChainMethodMemberType
    MinDist = 4  # RoutingPathChainMethodMemberType
    MaxDist = 5  # RoutingPathChainMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathOccChainableMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathOccChainable():
    """
    Chain occurrences of curves ? [i.e. curves not in the work part] 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", " - "
       "True", " - "
    """
    FalseValue = 0  # RoutingPathOccChainableMemberType
    TrueValue = 1  # RoutingPathOccChainableMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathDisplayObjectMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathDisplayObject():
    """
    Display a certain routing object? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", " - "
       "True", " - "
    """
    FalseValue = 0  # RoutingPathDisplayObjectMemberType
    TrueValue = 1  # RoutingPathDisplayObjectMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPathCreateSlopeConstraintsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingPathCreateSlopeConstraints():
    """
    Create slope associativity constraints during line path creation [from ports only] 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", " - "
       "True", " - "
    """
    FalseValue = 0  # RoutingPathCreateSlopeConstraintsMemberType
    TrueValue = 1  # RoutingPathCreateSlopeConstraintsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutingPath():
    """
    The RoutingPath object stores a set of path preferences.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX4.0.0
    """
    
    class CurveType():
        """
        Describes the types of curves allowed in a routing application.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Line", "UF_ROUTE_AV_CURVES_LINES"
           "Arc", "UF_ROUTE_AV_CURVES_ARCS"
           "Spline", "UF_ROUTE_AV_CURVES_SPLINES"
        """
        Line = 0  # RoutingPathCurveTypeMemberType
        Arc = 1  # RoutingPathCurveTypeMemberType
        Spline = 2  # RoutingPathCurveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AllowedCornerType():
        """
        Describes the types of corners allowed in a routing application.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "UF_ROUTE_AV_CORNERS_NONE"
           "Bend", "UF_ROUTE_AV_CORNERS_BEND"
           "Cope", "UF_ROUTE_AV_CORNERS_COPE"
           "Miter", "UF_ROUTE_AV_CORNERS_MITER"
           "Sbend", "UF_ROUTE_AV_CORNERS_SBEND"
        """
        NotSet = 0  # RoutingPathAllowedCornerTypeMemberType
        Bend = 1  # RoutingPathAllowedCornerTypeMemberType
        Cope = 2  # RoutingPathAllowedCornerTypeMemberType
        Miter = 3  # RoutingPathAllowedCornerTypeMemberType
        Sbend = 4  # RoutingPathAllowedCornerTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DefaultCornerType():
        """
        Describes the types of corners allowed in a routing application.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No Corner"
           "Bend", "Bend Corner"
           "Miter", "Miter Corner"
           "BendTable", "Not really a corner type. Used to indicate use of bend table in conjunction with a Bend corner"
        """
        NotSet = -1  # RoutingPathDefaultCornerTypeMemberType
        Bend = 0  # RoutingPathDefaultCornerTypeMemberType
        Miter = 1  # RoutingPathDefaultCornerTypeMemberType
        BendTable = 2  # RoutingPathDefaultCornerTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RadiusMethod():
        """
        Describes method used to determine bend radius on a bend or sbend corner 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Radius", "Use specified radius"
           "Ratio", "Use ratio to stock diameter to determine radius"
           "Table", "Use radius obtained from a bend table lookup"
           "InnerRadius", "Use inner radius"
        """
        Radius = 0  # RoutingPathRadiusMethodMemberType
        Ratio = 1  # RoutingPathRadiusMethodMemberType
        Table = 2  # RoutingPathRadiusMethodMemberType
        InnerRadius = 3  # RoutingPathRadiusMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RadiusUnits():
        """
        Describes units of specified radius value :py:class:`NXOpen.Preferences.RoutingPathRadiusMethod.Radius <NXOpen.Preferences.RoutingPathRadiusMethod>` only. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Unspecified. Use units of part file."
           "Inches", "Use inch units"
           "Millimeters", "Use metric (mm) units"
        """
        NotSet = 0  # RoutingPathRadiusUnitsMemberType
        Inches = 1  # RoutingPathRadiusUnitsMemberType
        Millimeters = 2  # RoutingPathRadiusUnitsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreateSmartRcps():
        """
        Should Smart RCPs be created during path creation in Create Path? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", "Do not create smart RCPs."
           "True", "Create smart RCPs."
        """
        FalseValue = 0  # RoutingPathCreateSmartRcpsMemberType
        TrueValue = 1  # RoutingPathCreateSmartRcpsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MergeDupRcps():
        """
        Should duplicate RCPs be merged after a Transform [Move or Copy] operation? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", "Do not merge duplicate RCPs."
           "True", "Merge duplicate RCPs."
        """
        FalseValue = 0  # RoutingPathMergeDupRcpsMemberType
        TrueValue = 1  # RoutingPathMergeDupRcpsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreateTangency():
        """
        Should new splines form tangencies with existing splines when they're created? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", "Do not merge duplicate RCPs."
           "True", "Merge duplicate RCPs."
        """
        FalseValue = 0  # RoutingPathCreateTangencyMemberType
        TrueValue = 1  # RoutingPathCreateTangencyMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AddPointsToSpline():
        """
        Should points be added to existing spline when they are subdivided to preserve shape? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", "Do not merge duplicate RCPs."
           "True", "Merge duplicate RCPs."
        """
        FalseValue = 0  # RoutingPathAddPointsToSplineMemberType
        TrueValue = 1  # RoutingPathAddPointsToSplineMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ConfirmBranchSel():
        """
        Should a branch selection confirmation dialog be show during Path selection? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", "Do not confirm branch selection."
           "True", "Confirm branch selection."
        """
        FalseValue = 0  # RoutingPathConfirmBranchSelMemberType
        TrueValue = 1  # RoutingPathConfirmBranchSelMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContinueUpdOnError():
        """
        Should fixed length splines ignore length constraint violations and update? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", " - "
           "True", " - "
        """
        FalseValue = 0  # RoutingPathContinueUpdOnErrorMemberType
        TrueValue = 1  # RoutingPathContinueUpdOnErrorMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ChainMethod():
        """
        Path curve chaining methods 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoBranch", "Curves must be mono-connected"
           "Continuous", "Tangents must match at each connection"
           "Tangent", "Use curve with closest tangent when searching"
           "Cycle", "Return all chains"
           "MinDist", "Chain with minimum path length"
           "MaxDist", "Chain with maximum path length"
        """
        NoBranch = 0  # RoutingPathChainMethodMemberType
        Continuous = 1  # RoutingPathChainMethodMemberType
        Tangent = 2  # RoutingPathChainMethodMemberType
        Cycle = 3  # RoutingPathChainMethodMemberType
        MinDist = 4  # RoutingPathChainMethodMemberType
        MaxDist = 5  # RoutingPathChainMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OccChainable():
        """
        Chain occurrences of curves ? [i.e. curves not in the work part] 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", " - "
           "True", " - "
        """
        FalseValue = 0  # RoutingPathOccChainableMemberType
        TrueValue = 1  # RoutingPathOccChainableMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DisplayObject():
        """
        Display a certain routing object? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", " - "
           "True", " - "
        """
        FalseValue = 0  # RoutingPathDisplayObjectMemberType
        TrueValue = 1  # RoutingPathDisplayObjectMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreateSlopeConstraints():
        """
        Create slope associativity constraints during line path creation [from ports only] 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", " - "
           "True", " - "
        """
        FalseValue = 0  # RoutingPathCreateSlopeConstraintsMemberType
        TrueValue = 1  # RoutingPathCreateSlopeConstraintsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetAllowedCurves(self) -> 'list[RoutingPathCurveType]':
        """
        Query the types of curves allowed in an application view  
        
        Signature ``GetAllowedCurves()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Preferences.RoutingPathCurveType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAllowedCurves(self, allowedCurves: 'list[RoutingPathCurveType]') -> None:
        """
        Signature ``SetAllowedCurves(allowedCurves)`` 
        
        :param allowedCurves: 
        :type allowedCurves: list of :py:class:`NXOpen.Preferences.RoutingPathCurveType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAllowedCorners(self) -> 'list[RoutingPathAllowedCornerType]':
        """
        Query the types of corners allowed in an application view  
        
        Signature ``GetAllowedCorners()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Preferences.RoutingPathAllowedCornerType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAllowedCorners(self, allowedCorners: 'list[RoutingPathAllowedCornerType]') -> None:
        """
        Signature ``SetAllowedCorners(allowedCorners)`` 
        
        :param allowedCorners: 
        :type allowedCorners: list of :py:class:`NXOpen.Preferences.RoutingPathAllowedCornerType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDefaultCorner(self) -> RoutingPathDefaultCornerType:
        """
        Query the default corner type in an application view  
        
        Signature ``GetDefaultCorner()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathDefaultCornerType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDefaultCorner(self, defaultCorner: RoutingPathDefaultCornerType) -> None:
        """
        Signature ``SetDefaultCorner(defaultCorner)`` 
        
        :param defaultCorner: 
        :type defaultCorner: :py:class:`NXOpen.Preferences.RoutingPathDefaultCornerType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendRadiusMethod(self) -> RoutingPathRadiusMethod:
        """
        Query wether the default corner should use bend ratio.  
        
        Signature ``GetBendRadiusMethod()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathRadiusMethod` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBendRadiusMethod(self, radiusMethod: RoutingPathRadiusMethod) -> None:
        """
        Set whether the default corner should use bend ratio.  
        
        Signature ``SetBendRadiusMethod(radiusMethod)`` 
        
        :param radiusMethod: 
        :type radiusMethod: :py:class:`NXOpen.Preferences.RoutingPathRadiusMethod` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendRadius(self) -> float:
        """
        Needs a work part and a loaded applicaiton view.  
        
        Radius units are converted to work part units automatically.
        Returns -1 and quits if input requirements are not met.  
        
        Signature ``GetBendRadius()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBendRadius(self, bendRadius: float) -> None:
        """
        Needs a work part and a loaded applicaiton view.  
        
        Radius units are assumed to be work part units and are set automatically.
        Returns -1 and quits if input requirements are not met. 
        
        Signature ``SetBendRadius(bendRadius)`` 
        
        :param bendRadius: 
        :type bendRadius: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendRadiusUnits(self) -> RoutingPathRadiusUnits:
        """
        Query bend radius units stored in path preferences  
        
        Signature ``GetBendRadiusUnits()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathRadiusUnits` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBendRadiusUnits(self, radiusUnits: RoutingPathRadiusUnits) -> None:
        """
        Signature ``SetBendRadiusUnits(radiusUnits)`` 
        
        :param radiusUnits: 
        :type radiusUnits: :py:class:`NXOpen.Preferences.RoutingPathRadiusUnits` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendRatio(self) -> float:
        """
        Query default bend ratio.  
        
        Used when default corner uses bend ratio method  
        
        Signature ``GetBendRatio()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBendRatio(self, bendRatio: float) -> None:
        """
        Signature ``SetBendRatio(bendRatio)`` 
        
        :param bendRatio: 
        :type bendRatio: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendTable(self) -> str:
        """
        Query default bend table.  
        
        Used when default corner uses bend table method  
        
        Signature ``GetBendTable()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBendTable(self, bendTableName: str) -> None:
        """
        Signature ``SetBendTable(bendTableName)`` 
        
        :param bendTableName: 
        :type bendTableName: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendTables(self) -> 'list[str]':
        """
        Query loaded bend table names.  
        
        A bend table maps a stock outer diameter to a
        radius appropriate for a certain bending machine  
        
        Signature ``GetBendTables()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendTableFilenames(self) -> 'list[str]':
        """
        Query loaded bend table filenames.  
        
        A bend table file can contain one or more named
        bend tables. Loading a bend table file loads all its constituent tables into memory.  
        
        Signature ``GetBendTableFilenames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LoadBendTableFile(self, bendTableFilename: str) -> str:
        """
        Load a specified bend table file.  
        
        Signature ``LoadBendTableFile(bendTableFilename)`` 
        
        :param bendTableFilename: 
        :type bendTableFilename: str 
        :returns:  Descriptive error text, when appropriate  
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendTableRadius(self, bendTableName: str, diameter: float) -> float:
        """
        Query bend radius from a loaded bend table.  
        
        Returns a radius of -1 if input table is not
        loaded  
        
        Signature ``GetBendTableRadius(bendTableName, diameter)`` 
        
        :param bendTableName: 
        :type bendTableName: str 
        :param diameter: 
        :type diameter: float 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCreateSmartRcps(self) -> RoutingPathCreateSmartRcps:
        """
        Create smart RCPs during path creation?  
        
        Signature ``GetCreateSmartRcps()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathCreateSmartRcps` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCreateSmartRcps(self, createSmart: RoutingPathCreateSmartRcps) -> None:
        """
        Signature ``SetCreateSmartRcps(createSmart)`` 
        
        :param createSmart: 
        :type createSmart: :py:class:`NXOpen.Preferences.RoutingPathCreateSmartRcps` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetMergeDuplicateRcps(self) -> RoutingPathMergeDupRcps:
        """
        Merge duplicate RCPs after a Transform [Move or Copy] operation?  
        
        Signature ``GetMergeDuplicateRcps()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathMergeDupRcps` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetMergeDuplicateRcps(self, mergeDuplicates: RoutingPathMergeDupRcps) -> None:
        """
        Signature ``SetMergeDuplicateRcps(mergeDuplicates)`` 
        
        :param mergeDuplicates: 
        :type mergeDuplicates: :py:class:`NXOpen.Preferences.RoutingPathMergeDupRcps` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetConfirmBranchSelection(self) -> RoutingPathConfirmBranchSel:
        """
        Confirm branch selection during Path selection?  
        
        Signature ``GetConfirmBranchSelection()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathConfirmBranchSel` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetConfirmBranchSelection(self, confirmBranchSel: RoutingPathConfirmBranchSel) -> None:
        """
        Signature ``SetConfirmBranchSelection(confirmBranchSel)`` 
        
        :param confirmBranchSel: 
        :type confirmBranchSel: :py:class:`NXOpen.Preferences.RoutingPathConfirmBranchSel` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockOffsetExpression(self) -> str:
        """
        Query default stock offset expression used by Create Path and Create Stock Offset Port [via Qualify Part]  
        
        Signature ``GetStockOffsetExpression()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStockOffsetExpression(self, stockOffsetExp: str) -> None:
        """
        Signature ``SetStockOffsetExpression(stockOffsetExp)`` 
        
        :param stockOffsetExp: 
        :type stockOffsetExp: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetContinueUpdateOnError(self) -> RoutingPathContinueUpdOnError:
        """
        Query default down direction for fixed length splines  
        
        Signature ``GetContinueUpdateOnError()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathContinueUpdOnError` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetContinueUpdateOnError(self, update: RoutingPathContinueUpdOnError) -> None:
        """
        Signature ``SetContinueUpdateOnError(update)`` 
        
        :param update: 
        :type update: :py:class:`NXOpen.Preferences.RoutingPathContinueUpdOnError` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCreateSlopeConstraints(self) -> RoutingPathCreateSlopeConstraints:
        """
        Create slope constraints during line path creation to and from fitting ports?  
        
        Signature ``GetCreateSlopeConstraints()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathCreateSlopeConstraints` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCreateSlopeConstraints(self, createSlopeConstraints: RoutingPathCreateSlopeConstraints) -> None:
        """
        Signature ``SetCreateSlopeConstraints(createSlopeConstraints)`` 
        
        :param createSlopeConstraints: 
        :type createSlopeConstraints: :py:class:`NXOpen.Preferences.RoutingPathCreateSlopeConstraints` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCurveChainingMethod(self) -> RoutingPathChainMethod:
        """
        Query path curve chaining method  
        
        Signature ``GetCurveChainingMethod()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathChainMethod` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCurveChainingMethod(self, chainMethod: RoutingPathChainMethod) -> None:
        """
        Signature ``SetCurveChainingMethod(chainMethod)`` 
        
        :param chainMethod: 
        :type chainMethod: :py:class:`NXOpen.Preferences.RoutingPathChainMethod` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetChainableCurveTypes(self) -> 'list[RoutingPathCurveType]':
        """
        Query all the types of chainable curve types  
        
        Signature ``GetChainableCurveTypes()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Preferences.RoutingPathCurveType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetChainableCurveTypes(self, chainableCurveTypes: 'list[RoutingPathCurveType]') -> None:
        """
        Signature ``SetChainableCurveTypes(chainableCurveTypes)`` 
        
        :param chainableCurveTypes: 
        :type chainableCurveTypes: list of :py:class:`NXOpen.Preferences.RoutingPathCurveType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOccurrenceChainable(self) -> RoutingPathOccChainable:
        """
        Query if curve occurrences [curves not in the work part] are chainable  
        
        Signature ``GetOccurrenceChainable()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathOccChainable` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOccurrenceChainable(self, occChainable: RoutingPathOccChainable) -> None:
        """
        Signature ``SetOccurrenceChainable(occChainable)`` 
        
        :param occChainable: 
        :type occChainable: :py:class:`NXOpen.Preferences.RoutingPathOccChainable` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDisplayRcps(self) -> RoutingPathDisplayObject:
        """
        Display RCPs?  
        
        Signature ``GetDisplayRcps()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDisplayRcps(self, displayRcps: RoutingPathDisplayObject) -> None:
        """
        Signature ``SetDisplayRcps(displayRcps)`` 
        
        :param displayRcps: 
        :type displayRcps: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDisplayPorts(self) -> RoutingPathDisplayObject:
        """
        Display ports?  
        
        Signature ``GetDisplayPorts()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDisplayPorts(self, displayPorts: RoutingPathDisplayObject) -> None:
        """
        Display ports in the model? 
        
        Signature ``SetDisplayPorts(displayPorts)`` 
        
        :param displayPorts: 
        :type displayPorts: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDisplaySegmentConstraints(self) -> RoutingPathDisplayObject:
        """
        Display segment constraints?  
        
        Signature ``GetDisplaySegmentConstraints()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDisplaySegmentConstraints(self, displayConstraints: RoutingPathDisplayObject) -> None:
        """
        Signature ``SetDisplaySegmentConstraints(displayConstraints)`` 
        
        :param displayConstraints: 
        :type displayConstraints: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDisplayAnchors(self) -> RoutingPathDisplayObject:
        """
        Display anchors?  
        
        Signature ``GetDisplayAnchors()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDisplayAnchors(self, displayAnchors: RoutingPathDisplayObject) -> None:
        """
        Signature ``SetDisplayAnchors(displayAnchors)`` 
        
        :param displayAnchors: 
        :type displayAnchors: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDisplayPortLength(self) -> float:
        """
        Displayed port length  
        
        Signature ``GetDisplayPortLength()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDisplayPortLength(self, displayPortLength: float) -> None:
        """
        Signature ``SetDisplayPortLength(displayPortLength)`` 
        
        :param displayPortLength: 
        :type displayPortLength: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetHealPathCurveType(self) -> RoutingPathCurveType:
        """
        Heal Path curve type.  
        
        Signature ``GetHealPathCurveType()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathCurveType` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetHealPathCurveType(self, healPathCurveType: RoutingPathCurveType) -> None:
        """
        Signature ``SetHealPathCurveType(healPathCurveType)`` 
        
        :param healPathCurveType: 
        :type healPathCurveType: :py:class:`NXOpen.Preferences.RoutingPathCurveType` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCreateSplineTangency(self) -> RoutingPathCreateTangency:
        """
        Create tangency between splines?  
        
        Signature ``GetCreateSplineTangency()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathCreateTangency` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCreateSplineTangency(self, applyTangency: RoutingPathCreateTangency) -> None:
        """
        Signature ``SetCreateSplineTangency(applyTangency)`` 
        
        :param applyTangency: 
        :type applyTangency: :py:class:`NXOpen.Preferences.RoutingPathCreateTangency` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCreateNewPointsOnSubdivide(self) -> RoutingPathAddPointsToSpline:
        """
        Add points to subdivided splines to maintain shape?  
        
        Signature ``GetCreateNewPointsOnSubdivide()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathAddPointsToSpline` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCreateNewPointsOnSubdivide(self, addPoints: RoutingPathAddPointsToSpline) -> None:
        """
        Signature ``SetCreateNewPointsOnSubdivide(addPoints)`` 
        
        :param addPoints: 
        :type addPoints: :py:class:`NXOpen.Preferences.RoutingPathAddPointsToSpline` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDisplayConnectedPorts(self) -> RoutingPathDisplayObject:
        """
        Display connected ports?  
        
        Signature ``GetDisplayConnectedPorts()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetDisplayConnectedPorts(self, displayConnectedPorts: RoutingPathDisplayObject) -> None:
        """
        Display connected ports in the model 
        
        Signature ``SetDisplayConnectedPorts(displayConnectedPorts)`` 
        
        :param displayConnectedPorts: 
        :type displayConnectedPorts: :py:class:`NXOpen.Preferences.RoutingPathDisplayObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class SessionVisualizationSpecialEffects():
    """
    Represents the set of visualization special effect preferences applicable to entire session.  
    
    Set stereo preferences.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX9.0.0
    """
    EnableStereo: bool = ...
    """
    Returns or sets  the enable stereo flag.  
    
    Toggles the display of stereo. To see correct stereo display, you need a supported graphics card,
    a 3D Stereo Display or Projector, and 3D glasses (and possibly a hub). The hardware vendor control panel Stereo option must
    also be turned on. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableStereo`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableStereo`` 
    
    :param enableStereo: 
    :type enableStereo: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ParallaxFactor: int = ...
    """
    Returns or sets  the parallax factor.  
    
    Defines the amount of 'Stereo effect'. A larger setting produces stronger 3D effect but may cause visual discomfort. 
    The minimum setting is 0 (no 3D effect) and the maximum setting is 20 (strong 3D effect). 
    
    <hr>
    
    Getter Method
    
    Signature ``ParallaxFactor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParallaxFactor`` 
    
    :param parallaxFactor: 
    :type parallaxFactor: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SupportStereo: bool = ...
    """
    Returns  the support stereo flag.  
    
    Queries whether your system supports stereo display (A supported graphics card is installed and
    the Stereo option in hardware vendor control panel is turned on). To see correct stereo display, you also need a 3D Stereo 
    Display or Projector, and 3D glasses (and possibly a hub).
    
    <hr>
    
    Getter Method
    
    Signature ``SupportStereo`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """


class ShadingToleranceOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShadingToleranceOption():
    """
    Represents the Shade tolerance options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", "Coarse"
       "Standard", "Standard"
       "Fine", "Fine"
       "ExtraFine", "Extra Fine"
       "UltraFine", "Ultra Fine"
       "Customize", "Customize"
    """
    Coarse = 0  # ShadingToleranceOptionMemberType
    Standard = 1  # ShadingToleranceOptionMemberType
    Fine = 2  # ShadingToleranceOptionMemberType
    ExtraFine = 3  # ShadingToleranceOptionMemberType
    UltraFine = 4  # ShadingToleranceOptionMemberType
    Customize = 5  # ShadingToleranceOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationSpecialEffectsColorHSV_Struct():
    """
    Represents three constituents of a HSV color pattern .  
    
    Constructor: 
    NXOpen.Preferences.ViewVisualizationSpecialEffects.ColorHSV()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Hue: float = ...
    """
    Hue in HSV pattern is the color  type (such as red, blue, or yellow) Ranges from 0-360  
    <hr>
    
    Field Value
    Type:float
    """
    Saturation: float = ...
    """
    Saturation in HSV pattern is the "vibrancy" of the color Ranges from 0-255 
    <hr>
    
    Field Value
    Type:float
    """
    Value: float = ...
    """
    Value in HSV pattern is the brightness of the color Ranges from 0-255 
    <hr>
    
    Field Value
    Type:float
    """


class ObjectPreferencesTranslucencyMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectPreferencesTranslucency():
    """
    Describes whether the translucency is enabled or disabled 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Disabled", " - "
       "Enabled", " - "
       "TemporarilyEnabled", " - "
    """
    Disabled = 0  # ObjectPreferencesTranslucencyMemberType
    Enabled = 1  # ObjectPreferencesTranslucencyMemberType
    TemporarilyEnabled = 2  # ObjectPreferencesTranslucencyMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectPreferences():
    """
    Captures the UI based calls required for Object Preferences   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.UI`
    
    .. versionadded:: NX3.0.0
    """
    
    class Translucency():
        """
        Describes whether the translucency is enabled or disabled 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Disabled", " - "
           "Enabled", " - "
           "TemporarilyEnabled", " - "
        """
        Disabled = 0  # ObjectPreferencesTranslucencyMemberType
        Enabled = 1  # ObjectPreferencesTranslucencyMemberType
        TemporarilyEnabled = 2  # ObjectPreferencesTranslucencyMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ResetSessionTranslucency(self, option: bool) -> ObjectPreferencesTranslucency:
        """
        Resets the session translucency 
        
        Signature ``ResetSessionTranslucency(option)`` 
        
        :param option:  User can set TRUE or FALSE  
        :type option: bool 
        :returns:  Return Value  
        :rtype: :py:class:`NXOpen.Preferences.ObjectPreferencesTranslucency` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSessionTranslucency(self, option: ObjectPreferencesTranslucency) -> ObjectPreferencesTranslucency:
        """
        Sets the session translucency 
        
        Signature ``SetSessionTranslucency(option)`` 
        
        :param option: 
        :type option: :py:class:`NXOpen.Preferences.ObjectPreferencesTranslucency` 
        :returns:  Return Value  
        :rtype: :py:class:`NXOpen.Preferences.ObjectPreferencesTranslucency` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    


class WorkPlaneGridMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WorkPlaneGrid():
    """
    Describes whether the Grid type selected is Polar or Rectangular 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Polar", "Polar Grid"
       "Rectangular", "Rectangular Grid"
    """
    Polar = 0  # WorkPlaneGridMemberType
    Rectangular = 1  # WorkPlaneGridMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WorkPlaneNonuniformGridSize_Struct():
    """
    Nonuniform grid size parameters .  
    
    Constructor: 
    NXOpen.Preferences.WorkPlane.NonuniformGridSize()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    XcGridSize: WorkPlaneGridSize_Struct = ...
    """
    XC axis grid parameters 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
    """
    YcGridSize: WorkPlaneGridSize_Struct = ...
    """
    YC axis grid parameters 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
    """


class WorkPlane(NXOpen.NXObject):
    """
    Represents the set of WorkPlanePreferences preferences applicable to part.  
    
    Sets parameters for the 
    Graphics Window grid and the Work Plane Emphasis mode. 
    An instance of this class can be obtained using :py:meth:`Preferences.SessionPreferences.WorkPlane`
    or :py:meth:`Preferences.PartPreferences.Workplane`
    
    .. versionadded:: NX3.0.0
    """
    
    class Grid():
        """
        Describes whether the Grid type selected is Polar or Rectangular 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Polar", "Polar Grid"
           "Rectangular", "Rectangular Grid"
        """
        Polar = 0  # WorkPlaneGridMemberType
        Rectangular = 1  # WorkPlaneGridMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GridSize():
        """
        Grid size parameters .  
        
        Constructor: 
        NXOpen.Preferences.WorkPlane.GridSize()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        MajorGridSpacing: float = ...
        """
        Distance between major grid lines 
        <hr>
        
        Field Value
        Type:float
        """
        MinorLinesPerMajor: int = ...
        """
        Number of minor lines between major grid lines 
        <hr>
        
        Field Value
        Type:int
        """
        SnapPointsPerMinor: int = ...
        """
        Number of snap points between minor grid lines 
        <hr>
        
        Field Value
        Type:int
        """
    
    
    class NonuniformGridSize():
        """
        Nonuniform grid size parameters .  
        
        Constructor: 
        NXOpen.Preferences.WorkPlane.NonuniformGridSize()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        XcGridSize: WorkPlaneGridSize_Struct = ...
        """
        XC axis grid parameters 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
        """
        YcGridSize: WorkPlaneGridSize_Struct = ...
        """
        YC axis grid parameters 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
        """
    
    
    class PolarGridSize():
        """
        Polar grid size parameters .  
        
        Constructor: 
        NXOpen.Preferences.WorkPlane.PolarGridSize()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        RadialGridSize: WorkPlaneGridSize_Struct = ...
        """
        Radial grid circle parameters 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
        """
        AngularGridSize: WorkPlaneGridSize_Struct = ...
        """
        Angular grid line parameters
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct`
        """
    
    
    def GetRectangularUniformGridSize(self) -> WorkPlaneGridSize_Struct:
        """
        Query the rectangular uniform grid size parameters.  
        
        Signature ``GetRectangularUniformGridSize()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRectangularUniformGridSize(self, gridSize: WorkPlaneGridSize_Struct) -> None:
        """
        Set the rectangular uniform grid size parameters.  
        
        Signature ``SetRectangularUniformGridSize(gridSize)`` 
        
        :param gridSize: 
        :type gridSize: :py:class:`NXOpen.Preferences.WorkPlaneGridSize_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetRectangularNonuniformGridSize(self) -> WorkPlaneNonuniformGridSize_Struct:
        """
        Query the rectangular nonuniform grid size parameters.  
        
        Signature ``GetRectangularNonuniformGridSize()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.WorkPlaneNonuniformGridSize_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRectangularNonuniformGridSize(self, nonuniformGridSize: WorkPlaneNonuniformGridSize_Struct) -> None:
        """
        Set the rectangular nonuniform grid size parameters.  
        
        Signature ``SetRectangularNonuniformGridSize(nonuniformGridSize)`` 
        
        :param nonuniformGridSize: 
        :type nonuniformGridSize: :py:class:`NXOpen.Preferences.WorkPlaneNonuniformGridSize_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPolarGridSize(self) -> WorkPlanePolarGridSize_Struct:
        """
        Query the polar grid size parameters.  
        
        Signature ``GetPolarGridSize()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.WorkPlanePolarGridSize_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPolarGridSize(self, polarGridSize: WorkPlanePolarGridSize_Struct) -> None:
        """
        Set the polar grid size parameters.  
        
        Signature ``SetPolarGridSize(polarGridSize)`` 
        
        :param polarGridSize: 
        :type polarGridSize: :py:class:`NXOpen.Preferences.WorkPlanePolarGridSize_Struct` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    GridColor: int = ...
    """
    Returns or sets  the grid color.  
    
    Specifies the color of grid.  
    
    <hr>
    
    Getter Method
    
    Signature ``GridColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridColor`` 
    
    :param gridColor: 
    :type gridColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    GridIsNonUniform: bool = ...
    """
    Returns or sets  the grid non uniform flag.  
    
    If true grid is non uniform. A uniform grid has the same spacing in X and Y. 
    A non-uniform grid allows for different spacing in X and Y. 
    
    <hr>
    
    Getter Method
    
    Signature ``GridIsNonUniform`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridIsNonUniform`` 
    
    :param gridIsNonUniform: 
    :type gridIsNonUniform: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    GridOnTop: bool = ...
    """
    Returns or sets  the grid on top flag.  
    
    If true displays the grid on top of other graphics in the scene.  
    
    <hr>
    
    Getter Method
    
    Signature ``GridOnTop`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridOnTop`` 
    
    :param gridOnTop: 
    :type gridOnTop: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    GridType: WorkPlaneGrid = ...
    """
    Returns or sets  the grid type.  
    
    It may be polar or rectangular  
    
    <hr>
    
    Getter Method
    
    Signature ``GridType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.WorkPlaneGrid` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridType`` 
    
    :param gridType: 
    :type gridType: :py:class:`NXOpen.Preferences.WorkPlaneGrid` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PolarShowMajorLines: bool = ...
    """
    Returns or sets  the show major lines flag for polar grid   
    
    <hr>
    
    Getter Method
    
    Signature ``PolarShowMajorLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolarShowMajorLines`` 
    
    :param polarShowMajorLines: 
    :type polarShowMajorLines: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RectangularShowMajorLines: bool = ...
    """
    Returns or sets  the show major lines flag for rectangular grid   
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularShowMajorLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RectangularShowMajorLines`` 
    
    :param rectangularShowMajorLines: 
    :type rectangularShowMajorLines: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ShowGrid: bool = ...
    """
    Returns or sets  the show and hide grid flag.  
    
    If true displays the grid pattern in the graphics window else hides  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowGrid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowGrid`` 
    
    :param showGrid: 
    :type showGrid: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShowLabels: bool = ...
    """
    Returns or sets  the show and hide grid labels flag.  
    
    If true displays the grid labels in the graphics window else hides  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowLabels`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowLabels`` 
    
    :param showLabels: 
    :type showLabels: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SnapToGrid: bool = ...
    """
    Returns or sets  the snap to grid flag.  
    
    If true enables snapping (moves an indicated screen position point to the nearest 
    grid point). Points snap to the grid even when Show Grid is off. 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapToGrid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapToGrid`` 
    
    :param snapToGrid: 
    :type snapToGrid: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Null: WorkPlane = ...  # unknown typename


class SessionUserInterfaceUIDisplayResourceBarMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionUserInterfaceUIDisplayResourceBar():
    """
    Describes whether the resource bar is displayed on left or right of window 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", " - "
       "Right", " - "
    """
    Left = 0  # SessionUserInterfaceUIDisplayResourceBarMemberType
    Right = 1  # SessionUserInterfaceUIDisplayResourceBarMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionUserInterfaceUI():
    """
    Represents all UI based session user interface preferneces.  
    
    Other User Interface settings are 
    available with :py:class:`NXOpen.Preferences.SessionUserInterface` for settings applicable to session and 
    with :py:class:`NXOpen.Preferences.PartUserInterface` for User Interface Preferences applicable
    to part 
    To obtain an instance of this class, refer to :py:class:`NXOpen.UI`
    
    .. versionadded:: NX3.0.0
    """
    
    class DisplayResourceBar():
        """
        Describes whether the resource bar is displayed on left or right of window 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", " - "
           "Right", " - "
        """
        Left = 0  # SessionUserInterfaceUIDisplayResourceBarMemberType
        Right = 1  # SessionUserInterfaceUIDisplayResourceBarMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ResetDialogBoxSettings(self) -> None:
        """
        Resets all dialog box settings 
        
        Signature ``ResetDialogBoxSettings()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    ConfirmUndo: bool = ...
    """
    Returns or sets  the confirm undo flag 
    
    <hr>
    
    Getter Method
    
    Signature ``ConfirmUndo`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConfirmUndo`` 
    
    :param confirmUndo: 
    :type confirmUndo: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DialogBarDecimalPlaces: int = ...
    """
    Returns or sets  the dialog box decimal places 
    
    <hr>
    
    Getter Method
    
    Signature ``DialogBarDecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DialogBarDecimalPlaces`` 
    
    :param dialogBarDecimalPlaces: 
    :type dialogBarDecimalPlaces: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DialogBarTracking: bool = ...
    """
    Returns or sets  the dialog bar tracking flag 
    
    <hr>
    
    Getter Method
    
    Signature ``DialogBarTracking`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DialogBarTracking`` 
    
    :param dialogBarTrackingFlag: 
    :type dialogBarTrackingFlag: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DisplayAlertsOnInformation: bool = ...
    """
    Returns or sets  the option "Display Alerts on Information" gives choice, whether the
    user wants the Diagnostic alerts appear when 
    features contain information messages during feature 
    creation, edit, and update.  
    
    if the option is true then the diagnostic alerts will appear.
    if the option is false then diagnostic alerts will not appear.
    Use :py:meth:`DisplayAlertsOnWarnings`` for display of
    alerts on warnings. Alerts are
    always displayed for errors and display of alerts on errors can not be
    changed. 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayAlertsOnInformation`` 
    
    :returns:  preference to
    display Diagnostic
    Alerts on Information Messages 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayAlertsOnInformation`` 
    
    :param displayAlertsOnInformation:  preference to        display Diagnostic Alerts on Information Messages 
    :type displayAlertsOnInformation: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DisplayAlertsOnWarnings: bool = ...
    """
    Returns or sets  the option "Display Alerts on Warnings" gives choice, whether the
    user wants the Diagnostic alerts appear when 
    features contain warnings during feature 
    creation, edit, and update.  
    
    if the option is true then the diagnostic alerts will appear.
    if the option is false then diagnostic alerts will not appear.
    Use :py:meth:`DisplayAlertsOnInformation`` for display of
    alerts on information messages. Alerts are
    always displayed for errors and display of alerts on errors can not be
    changed. 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayAlertsOnWarnings`` 
    
    :returns:  preference to
    display Diagnostic Alerts on Warnings 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayAlertsOnWarnings`` 
    
    :param displayAlertsOnWarnings:  preference to        display Diagnostic Alerts on Warnings 
    :type displayAlertsOnWarnings: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DisplayDialogsInPlayback: bool = ...
    """
    Returns or sets  the display dialogs in playback flag 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayDialogsInPlayback`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayDialogsInPlayback`` 
    
    :param displayDialogInPlaybackFlag: 
    :type displayDialogInPlaybackFlag: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DisplayResourceBarOption: SessionUserInterfaceUIDisplayResourceBar = ...
    """
    Returns or sets  the display resource bar option 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayResourceBarOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionUserInterfaceUIDisplayResourceBar` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayResourceBarOption`` 
    
    :param displayResourceBar: 
    :type displayResourceBar: :py:class:`NXOpen.Preferences.SessionUserInterfaceUIDisplayResourceBar` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    HomePageURL: str = ...
    """
    Returns or sets  the home page URL 
    
    <hr>
    
    Getter Method
    
    Signature ``HomePageURL`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HomePageURL`` 
    
    :param homePageUrl: 
    :type homePageUrl: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    InitialDialogDisplay: bool = ...
    """
    Returns or sets  the initial dialog display flag 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialDialogDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialDialogDisplay`` 
    
    :param initialDialogDisplay: 
    :type initialDialogDisplay: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ListingDecimalPlaces: int = ...
    """
    Returns or sets  the listing decimal places
    
    <hr>
    
    Getter Method
    
    Signature ``ListingDecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ListingDecimalPlaces`` 
    
    :param listingDecimalPlaces: 
    :type listingDecimalPlaces: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PagesAutomaticallyFlyOut: bool = ...
    """
    Returns or sets  the pages automatically fly outflag 
    
    <hr>
    
    Getter Method
    
    Signature ``PagesAutomaticallyFlyOut`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PagesAutomaticallyFlyOut`` 
    
    :param pagesAutomaticallyFlyOut: 
    :type pagesAutomaticallyFlyOut: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PauseDuration: int = ...
    """
    Returns or sets  the pause duration 
    
    <hr>
    
    Getter Method
    
    Signature ``PauseDuration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PauseDuration`` 
    
    :param pauseDuration: 
    :type pauseDuration: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RecordAllTransform: bool = ...
    """
    Returns or sets  the record all transform flag 
    
    <hr>
    
    Getter Method
    
    Signature ``RecordAllTransform`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RecordAllTransform`` 
    
    :param recordAllTransformFlag: 
    :type recordAllTransformFlag: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SaveLayoutAtExit: bool = ...
    """
    Returns or sets  the save layout at exit flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SaveLayoutAtExit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveLayoutAtExit`` 
    
    :param saveLayoutFlag: 
    :type saveLayoutFlag: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    UseSystemPrecision: bool = ...
    """
    Returns or sets  the use system precision flag.  
    
    True uses the system precision 
    
    <hr>
    
    Getter Method
    
    Signature ``UseSystemPrecision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseSystemPrecision`` 
    
    :param useSystemPrecision: 
    :type useSystemPrecision: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class SessionAssembliesPartNameOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionAssembliesPartNameOption():
    """
    Describe whether the part name style is file name or description or specified 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FileName", " - "
       "Description", " - "
       "SpecifiedAttributes", " - "
    """
    FileName = 0  # SessionAssembliesPartNameOptionMemberType
    Description = 1  # SessionAssembliesPartNameOptionMemberType
    SpecifiedAttributes = 2  # SessionAssembliesPartNameOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionAssembliesPositioningTaskCollectionOptionForDesignElementsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionAssembliesPositioningTaskCollectionOptionForDesignElements():
    """
    Specify whether Design Elements will be added to the Work or Context Collection of a Positioning Task 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Work", " - "
       "Context", " - "
    """
    Work = 0  # SessionAssembliesPositioningTaskCollectionOptionForDesignElementsMemberType
    Context = 1  # SessionAssembliesPositioningTaskCollectionOptionForDesignElementsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionAssembliesDragHandlePositionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionAssembliesDragHandlePositionOption():
    """
    Specify whether drag handle will be positioned at the center of bounding box or origin of component 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CenterOfBoundingBox", " - "
       "OriginOfComponent", " - "
    """
    CenterOfBoundingBox = 0  # SessionAssembliesDragHandlePositionOptionMemberType
    OriginOfComponent = 1  # SessionAssembliesDragHandlePositionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionAssemblies():
    """
    Represents the set of Assemblies Preferences applicable to entire session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class PartNameOption():
        """
        Describe whether the part name style is file name or description or specified 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FileName", " - "
           "Description", " - "
           "SpecifiedAttributes", " - "
        """
        FileName = 0  # SessionAssembliesPartNameOptionMemberType
        Description = 1  # SessionAssembliesPartNameOptionMemberType
        SpecifiedAttributes = 2  # SessionAssembliesPartNameOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositioningTaskCollectionOptionForDesignElements():
        """
        Specify whether Design Elements will be added to the Work or Context Collection of a Positioning Task 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Work", " - "
           "Context", " - "
        """
        Work = 0  # SessionAssembliesPositioningTaskCollectionOptionForDesignElementsMemberType
        Context = 1  # SessionAssembliesPositioningTaskCollectionOptionForDesignElementsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DragHandlePositionOption():
        """
        Specify whether drag handle will be positioned at the center of bounding box or origin of component 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CenterOfBoundingBox", " - "
           "OriginOfComponent", " - "
        """
        CenterOfBoundingBox = 0  # SessionAssembliesDragHandlePositionOptionMemberType
        OriginOfComponent = 1  # SessionAssembliesDragHandlePositionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CheckNewerRevisionsOfTemplatePart: bool = ...
    """
    Returns or sets  the check for newer revisions of template part option 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckNewerRevisionsOfTemplatePart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CheckNewerRevisionsOfTemplatePart`` 
    
    :param checkNewerRevisionsOfTemplatePart: 
    :type checkNewerRevisionsOfTemplatePart: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ComponentMemberSelect: bool = ...
    """
    Returns or sets  the component member select option 
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentMemberSelect`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentMemberSelect`` 
    
    :param componentMemberSelect: 
    :type componentMemberSelect: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DisplayUpdateReport: bool = ...
    """
    Returns or sets  the display update report option 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayUpdateReport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayUpdateReport`` 
    
    :param displayUpdateReport: 
    :type displayUpdateReport: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    DragHandlePositionPreference: SessionAssembliesDragHandlePositionOption = ...
    """
    Returns or sets  the drag handle position preference 
    
    <hr>
    
    Getter Method
    
    Signature ``DragHandlePositionPreference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionAssembliesDragHandlePositionOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DragHandlePositionPreference`` 
    
    :param dragHandlePosition: 
    :type dragHandlePosition: :py:class:`NXOpen.Preferences.SessionAssembliesDragHandlePositionOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    InterpartPositioning: bool = ...
    """
    Returns or sets  the option to allow interpart geometry selection in the assembly constraints dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``InterpartPositioning`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterpartPositioning`` 
    
    :param allowInterpartPositioning: 
    :type allowInterpartPositioning: bool 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    """
    PartNameAttribute: str = ...
    """
    Returns or sets  the part name attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``PartNameAttribute`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartNameAttribute`` 
    
    :param partNameAttribute: 
    :type partNameAttribute: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PartNameStyle: SessionAssembliesPartNameOption = ...
    """
    Returns or sets  the part name style 
    
    <hr>
    
    Getter Method
    
    Signature ``PartNameStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionAssembliesPartNameOption` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartNameStyle`` 
    
    :param partNameStyle: 
    :type partNameStyle: :py:class:`NXOpen.Preferences.SessionAssembliesPartNameOption` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PositioningTaskCollectionForDesignElements: SessionAssembliesPositioningTaskCollectionOptionForDesignElements = ...
    """
    Returns or sets  the option to specify where to add Design Elements selected whilst working in the Assembly Constraints Dialog.  
    
    The Design Elements will either be added to the Work or the Context collection of the Positioning Task. 
    
    <hr>
    
    Getter Method
    
    Signature ``PositioningTaskCollectionForDesignElements`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionAssembliesPositioningTaskCollectionOptionForDesignElements` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositioningTaskCollectionForDesignElements`` 
    
    :param collection: 
    :type collection: :py:class:`NXOpen.Preferences.SessionAssembliesPositioningTaskCollectionOptionForDesignElements` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PreviewComponentOnAdd: bool = ...
    """
    Returns or sets  the preview component on add option 
    
    <hr>
    
    Getter Method
    
    Signature ``PreviewComponentOnAdd`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX12.0.0
       No replacement.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreviewComponentOnAdd`` 
    
    :param previewComponentOnAdd: 
    :type previewComponentOnAdd: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX12.0.0
       No replacement.
    
    License requirements: None.
    """
    ProductInterfaceEmphasize: bool = ...
    """
    Returns or sets  the product interface display emphasis setting 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductInterfaceEmphasize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`Preferences.SessionVisualizationEmphasis.ProductInterfaceEmphasis` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProductInterfaceEmphasize`` 
    
    :param productInterfaceEmphasize: 
    :type productInterfaceEmphasize: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`Preferences.SessionVisualizationEmphasis.ProductInterfaceEmphasis` instead.
    
    License requirements: None.
    """
    TolerantPositioning: bool = ...
    """
    Returns or sets  the option to allow tolerant (imprecise) geometry selection for assembly positioning 
    
    <hr>
    
    Getter Method
    
    Signature ``TolerantPositioning`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TolerantPositioning`` 
    
    :param allowTolerantPositioning: 
    :type allowTolerantPositioning: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    TrueShapeFiltering: bool = ...
    """
    Returns or sets  the true shape filtering option 
    
    <hr>
    
    Getter Method
    
    Signature ``TrueShapeFiltering`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrueShapeFiltering`` 
    
    :param trueShapeFiltering: 
    :type trueShapeFiltering: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    UpdateDesignElementPositionOnLoad: bool = ...
    """
    Returns or sets  the option that enables automatic local positioning update of design elements
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateDesignElementPositionOnLoad`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_4gd_integration ("4th Generation Design")
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateDesignElementPositionOnLoad`` 
    
    :param updateDesignElementPositionOnLoad: 
    :type updateDesignElementPositionOnLoad: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_4gd_integration ("4th Generation Design")
    """
    UpdateStructureOnExpand: bool = ...
    """
    Returns or sets  the update structure on assembly tree expand option 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateStructureOnExpand`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateStructureOnExpand`` 
    
    :param updateStructure: 
    :type updateStructure: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    WarnOnDelete: bool = ...
    """
    Returns or sets  the warn on delete option 
    
    <hr>
    
    Getter Method
    
    Signature ``WarnOnDelete`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WarnOnDelete`` 
    
    :param workOnDelete: 
    :type workOnDelete: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    WarnOnDragDrop: bool = ...
    """
    Returns or sets  the warn on drag and drop 
    
    <hr>
    
    Getter Method
    
    Signature ``WarnOnDragDrop`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WarnOnDragDrop`` 
    
    :param warnOnDragDrop: 
    :type warnOnDragDrop: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WorkPartDisplayAsEntirePart: bool = ...
    """
    Returns or sets  the work part display as entire part option 
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPartDisplayAsEntirePart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkPartDisplayAsEntirePart`` 
    
    :param workPartDisplayAsEntirePart: 
    :type workPartDisplayAsEntirePart: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    WorkPartEmphasize: bool = ...
    """
    Returns or sets  the emphasize for work part  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPartEmphasize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`Preferences.SessionVisualizationEmphasis.WorkPartEmphasis` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkPartEmphasize`` 
    
    :param workPartEmphasize: 
    :type workPartEmphasize: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`Preferences.SessionVisualizationEmphasis.WorkPartEmphasis` instead.
    
    License requirements: None.
    """
    WorkPartMaintain: bool = ...
    """
    Returns or sets  the work part maintain option 
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPartMaintain`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX12.0.0
       No replacement.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkPartMaintain`` 
    
    :param workPartMaintain: 
    :type workPartMaintain: bool 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX12.0.0
       No replacement.
    
    License requirements: None.
    """
    WorkPartWarnOnAutomaticChange: bool = ...
    """
    Returns or sets  the warn on automatic change for work part option 
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPartWarnOnAutomaticChange`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkPartWarnOnAutomaticChange`` 
    
    :param workPartWarnOnAutomaticChange: 
    :type workPartWarnOnAutomaticChange: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class ISectionViewPreferences():
    """
    Represents set of SectionViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class FlatPatternViewPreferences():
    """
    Provides access to object and callout properties for sheet-metal data in
    flat pattern views on drawings.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.ViewPreferences`
    
    .. versionadded:: NX5.0.0
    """
    
    def GetPropertiesObject(self) -> NXOpen.SheetMetal.FlatPatternSettings:
        """
        Returns the properties object for the part's flat pattern view preferences.  
        
        Signature ``GetPropertiesObject()`` 
        
        :returns:  Reference to the object on which to get and set the
        preferences for flat pattern drawing member views.  
        :rtype: :py:class:`NXOpen.SheetMetal.FlatPatternSettings` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def Commit(self) -> None:
        """
        Commits and applies all the settings done with set_callout_type_display
        and set_object_type_display.  
        
        It must be called after a sequence of calls
        to those methods to cause the view to update. 
        
        Signature ``Commit()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    


class GeneralViewQualityOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralViewQualityOption():
    """
    Represents the view quality options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", "Coarse"
       "Medium", "Medium"
       "Fine", "Fine"
    """
    Coarse = 0  # GeneralViewQualityOptionMemberType
    Medium = 1  # GeneralViewQualityOptionMemberType
    Fine = 2  # GeneralViewQualityOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipbuildingLinesViewPreferencesLinesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipbuildingLinesViewPreferencesLines():
    """
    Line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hidden", "Hidden"
       "Visible", "Visible"
    """
    Hidden = 0  # ShipbuildingLinesViewPreferencesLinesMemberType
    Visible = 1  # ShipbuildingLinesViewPreferencesLinesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipbuildingLinesViewPreferencesShipbuildingLinesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipbuildingLinesViewPreferencesShipbuildingLines():
    """
    Geometry type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Profile", "Profile"
       "Plate", "Plate"
    """
    Profile = 0  # ShipbuildingLinesViewPreferencesShipbuildingLinesMemberType
    Plate = 1  # ShipbuildingLinesViewPreferencesShipbuildingLinesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipbuildingLinesViewPreferences():
    """
    Represents set of Shipbuilding Lines View Preferences applicable to drafting views.  
    
    Shipbuilding lines are used for a Profile or a Plate feature in Ship Design 
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.ShipbuildingLines`
    
    .. versionadded:: NX8.0.0
    """
    
    class Lines():
        """
        Line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hidden", "Hidden"
           "Visible", "Visible"
        """
        Hidden = 0  # ShipbuildingLinesViewPreferencesLinesMemberType
        Visible = 1  # ShipbuildingLinesViewPreferencesLinesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShipbuildingLines():
        """
        Geometry type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Profile", "Profile"
           "Plate", "Plate"
        """
        Profile = 0  # ShipbuildingLinesViewPreferencesShipbuildingLinesMemberType
        Plate = 1  # ShipbuildingLinesViewPreferencesShipbuildingLinesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSingleLineRepresentation(self, featureType: ShipbuildingLinesViewPreferencesShipbuildingLines, featureName: str, singleLine: bool) -> None:
        """
        Note: The initial values are set based on the customer defaults depending on 
        whether the feature is a Profile or a Plate.  
        
        The status determines the single line representation for the ship feature in a view.
        
        Signature ``SetSingleLineRepresentation(featureType, featureName, singleLine)`` 
        
        :param featureType:  feature type  
        :type featureType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesShipbuildingLines` 
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param singleLine:  status that determines SLR for the feature  
        :type singleLine: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetSingleLineRepresentation(self, featureType: ShipbuildingLinesViewPreferencesShipbuildingLines, featureName: str) -> bool:
        """
        Get single line status  
        
        Signature ``GetSingleLineRepresentation(featureType, featureName)`` 
        
        :param featureType:  feature type  
        :type featureType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesShipbuildingLines` 
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :returns:  status that determines SLR for the feature  
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetColor(self, featureName: str, linesType: ShipbuildingLinesViewPreferencesLines, color: int) -> None:
        """
        The color of ship line.  
        
        The value should be between UF_OBJ_MIN_COLOR and UF_OBJ_MAX_COLOR. 
        
        Signature ``SetColor(featureName, linesType, color)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesLines` 
        :param color:  Color  
        :type color: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetColor(self, featureName: str, linesType: ShipbuildingLinesViewPreferencesLines) -> int:
        """
        Get line color  
        
        Signature ``GetColor(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesLines` 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFont(self, featureName: str, linesType: ShipbuildingLinesViewPreferencesLines, font: Font) -> None:
        """
        The font type of ship line.  
        
        Signature ``SetFont(featureName, linesType, font)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesLines` 
        :param font:  Font  
        :type font: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetFont(self, featureName: str, linesType: ShipbuildingLinesViewPreferencesLines) -> Font:
        """
        Get line font  
        
        Signature ``GetFont(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidth(self, featureName: str, linesType: ShipbuildingLinesViewPreferencesLines, width: Width) -> None:
        """
        The width of hidden line or edges.  
        
        Signature ``SetWidth(featureName, linesType, width)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesLines` 
        :param width:  Width  
        :type width: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetWidth(self, featureName: str, linesType: ShipbuildingLinesViewPreferencesLines) -> Width:
        """
        Get line width  
        
        Signature ``GetWidth(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferencesLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class RoutingCharacteristics():
    """
    Contains all of the various preferences for option and required characteristics.  
    
    Optional and
    Required characteristics are specified in the Discipline section of the application view file.
    Changing the current discipline modifies the set of optional and required characteristics.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.RoutingApplicationView`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetStockRequiredCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Get the set of required characteristics to apply to :py:class:`NXOpen.Routing.Stock` objects
        when assinging stock.  
        
        Signature ``GetStockRequiredCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponentRequiredCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Get the set of required characteristics to apply to :py:class:`NXOpen.Assemblies.Component` objects
        when placing parts.  
        
        Signature ``GetComponentRequiredCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockOptionalCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Get the set of optional characteristics to apply to :py:class:`NXOpen.Routing.Stock` objects
        when assinging stock.  
        
        Signature ``GetStockOptionalCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponentOptionalCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Get the set of optional characteristics to apply to :py:class:`NXOpen.Assemblies.Component` objects
        when placing parts.  
        
        Signature ``GetComponentOptionalCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestintationCharacteristics(self) -> 'list[NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct]':
        """
        Get the set of characteristics read from objects during placement object selection in the 
        Specify Item dialog.  
        
        Destination characteristics are discipline specific.  
        
        Signature ``GetDestintationCharacteristics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockCharacteristicValues(self) -> NXOpen.Routing.CharacteristicList:
        """
        Get the latest stored stock characterstics values specified in the Specify Item dialog or
        in Edit Characteristics.  
        
        Signature ``GetStockCharacteristicValues()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateStockCharacteristicValues(self, values: NXOpen.Routing.CharacteristicList) -> None:
        """
        Replaces any stored stock characteristics with the input values, adds any new
        values in the input list.  
        
        Doesn't delete any stored stock characteristics. 
        
        Signature ``UpdateStockCharacteristicValues(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponentCharacteristicValues(self) -> NXOpen.Routing.CharacteristicList:
        """
        Get the latest stored component characterstics values specified in the Specify Item dialog or
        in Edit Characteristics.  
        
        Signature ``GetComponentCharacteristicValues()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateComponentCharacteristicValues(self, values: NXOpen.Routing.CharacteristicList) -> None:
        """
        Replaces any stored component characteristics with the input values, adds any new
        values in the input list.  
        
        Doesn't delete any stored component characteristics. 
        
        Signature ``UpdateComponentCharacteristicValues(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDefaultElbowCharacteristicValues(self) -> NXOpen.Routing.CharacteristicList:
        """
        Get the latest stored characterstics values specified for default elbows in the 
        Specify Item dialog.  
        
        Signature ``GetDefaultElbowCharacteristicValues()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateDefaultElbowCharacteristicValues(self, values: NXOpen.Routing.CharacteristicList) -> None:
        """
        Replaces any stored default elbow characteristics with the input values, adds any new
        values in the input list.  
        
        Doesn't delete any stored default elbow characteristics. 
        
        Signature ``UpdateDefaultElbowCharacteristicValues(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class PartVisualizationColorSettingRandomColorDisplayForMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationColorSettingRandomColorDisplayFor():
    """
    Describes whether the random color display is applicable for faces or bodies 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Faces", "For Faces"
       "Bodies", "For Bodies"
    """
    Faces = 0  # PartVisualizationColorSettingRandomColorDisplayForMemberType
    Bodies = 1  # PartVisualizationColorSettingRandomColorDisplayForMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationColorSetting():
    """
    Represents the set of visualization preferences under color setting tab applicable to part   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class RandomColorDisplayFor():
        """
        Describes whether the random color display is applicable for faces or bodies 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Faces", "For Faces"
           "Bodies", "For Bodies"
        """
        Faces = 0  # PartVisualizationColorSettingRandomColorDisplayForMemberType
        Bodies = 1  # PartVisualizationColorSettingRandomColorDisplayForMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ShuffleRandomColor(self) -> None:
        """
        Allows user to shuffle the Random color 
        
        Signature ``ShuffleRandomColor()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    AttentionColor: int = ...
    """
    Returns or sets  the color that an HD3D objects associated objects are highlighted with when the HD3D object is selected.  
    
    The color must be in the range of 1 to 216 inclusive. 
    
    <hr>
    
    Getter Method
    
    Signature ``AttentionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttentionColor`` 
    
    :param attentionColor: 
    :type attentionColor: int 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    HandleActiveColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color of active handles.  
    
    <hr>
    
    Getter Method
    
    Signature ``HandleActiveColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandleActiveColor`` 
    
    :param handleActiveColor: 
    :type handleActiveColor: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HandleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color of handles.  
    
    <hr>
    
    Getter Method
    
    Signature ``HandleColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandleColor`` 
    
    :param handleColor: 
    :type handleColor: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HandleOrientxpressColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color of the OrientXpress handle.  
    
    <hr>
    
    Getter Method
    
    Signature ``HandleOrientxpressColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandleOrientxpressColor`` 
    
    :param handleOrientxpressColor: 
    :type handleOrientxpressColor: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HandlePreselectionColor: NXOpen.NXColor = ...
    """
    Returns or sets  the preselection color of handles.  
    
    <hr>
    
    Getter Method
    
    Signature ``HandlePreselectionColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandlePreselectionColor`` 
    
    :param handlePreselectionColor: 
    :type handlePreselectionColor: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HandleSelectionColor: NXOpen.NXColor = ...
    """
    Returns or sets  the selection color of handles.  
    
    <hr>
    
    Getter Method
    
    Signature ``HandleSelectionColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandleSelectionColor`` 
    
    :param handleSelectionColor: 
    :type handleSelectionColor: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HiddenGeometryColor: int = ...
    """
    Returns or sets  the color of hidden geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenGeometryColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenGeometryColor`` 
    
    :param hiddenGeometryColor: 
    :type hiddenGeometryColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    MonochromeBackgroundColor: int = ...
    """
    Returns or sets  the monochrome background color 
    
    <hr>
    
    Getter Method
    
    Signature ``MonochromeBackgroundColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MonochromeBackgroundColor`` 
    
    :param monochromeBackgroundColor: 
    :type monochromeBackgroundColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    MonochromeDisplay: bool = ...
    """
    Returns or sets  the monochrome display flag.  
    
    If true it turns on the monochrome display options. 
    Monochrome display also applies to Expanded drawing views. 
    
    <hr>
    
    Getter Method
    
    Signature ``MonochromeDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MonochromeDisplay`` 
    
    :param monochromeDisplay: 
    :type monochromeDisplay: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    MonochromeForegroundColor: int = ...
    """
    Returns or sets  the monochrome foreground color.  
    
    Monochrome color for all displayable 
    objects, view borders, and view names. 
    
    <hr>
    
    Getter Method
    
    Signature ``MonochromeForegroundColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MonochromeForegroundColor`` 
    
    :param monochromeForegroundColor: 
    :type monochromeForegroundColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    MonochromePreselectionColor: int = ...
    """
    Returns or sets  the monochrome color for preselected objects  
    
    <hr>
    
    Getter Method
    
    Signature ``MonochromePreselectionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MonochromePreselectionColor`` 
    
    :param monochromePreselectionColor: 
    :type monochromePreselectionColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    MonochromeSelectionColor: int = ...
    """
    Returns or sets  the monochrome selection_color.  
    
    Displays all selected/highlighted objects, 
    temporary display objects (such as coneheads, temporary text), and drawing borders 
    in this color. 
    
    <hr>
    
    Getter Method
    
    Signature ``MonochromeSelectionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MonochromeSelectionColor`` 
    
    :param monochromeSelectionColor: 
    :type monochromeSelectionColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    PreselectionColor: int = ...
    """
    Returns or sets  the preselection color.  
    
    Represents color of selectable objects for the current operation. 
    
    <hr>
    
    Getter Method
    
    Signature ``PreselectionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreselectionColor`` 
    
    :param preselectionColor: 
    :type preselectionColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RandomColorDisplay: PartVisualizationColorSettingRandomColorDisplayFor = ...
    """
    Returns or sets  the random color display selection.  
    
    <hr>
    
    Getter Method
    
    Signature ``RandomColorDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationColorSettingRandomColorDisplayFor` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RandomColorDisplay`` 
    
    :param randomColorDisplay: 
    :type randomColorDisplay: :py:class:`NXOpen.Preferences.PartVisualizationColorSettingRandomColorDisplayFor` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    RandomColorDisplayOption: bool = ...
    """
    Returns or sets  the random color display flag.  
    
    If true it provides a temporary display of unique colors 
    per solid object. 
    
    <hr>
    
    Getter Method
    
    Signature ``RandomColorDisplayOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RandomColorDisplayOption`` 
    
    :param randomColorDisplayOption: 
    :type randomColorDisplayOption: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SelectionColor: int = ...
    """
    Returns or sets  the selection color.  
    
    Represents color of selected objects, the grid, view names and borders, 
    and temporary points and conehead vectors. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionColor`` 
    
    :param selectionColor: 
    :type selectionColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShowWidths: bool = ...
    """
    Returns or sets  the show widths flag.  
    
    If true, the object width attribute determines the displayed width 
    of lines or curves used to represent an object. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowWidths`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowWidths`` 
    
    :param showWidths: 
    :type showWidths: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class AngleFormatMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AngleFormat():
    """
    Specifies the view angle display format 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FractionalDegrees", "Fractional degrees format, e.g. 30.55 degrees"
       "DegreesMinutes", "Degrees minutes format, e.g. 30 degrees 30""
       "DegreesMinutesSeconds", "Degrees minutes seconds format, e.g. 30 degrees 30"30'"
       "WholeDegrees", "Whole degrees only, e.g. 30 degrees"
    """
    FractionalDegrees = 0  # AngleFormatMemberType
    DegreesMinutes = 1  # AngleFormatMemberType
    DegreesMinutesSeconds = 2  # AngleFormatMemberType
    WholeDegrees = 3  # AngleFormatMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationSpecialEffectsFogData_Struct():
    """
    Represents the constituents of fog data .  
    
    Constructor: 
    NXOpen.Preferences.ViewVisualizationSpecialEffects.FogData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    FogMode: int = ...
    """
    Fog mode  
    <hr>
    
    Field Value
    Type:int
    """
    FogColorFlag: bool = ...
    """
    If true fog color is applied to the view 
    <hr>
    
    Field Value
    Type:bool
    """
    FogColor: ViewVisualizationSpecialEffectsColorRGB_Struct = ...
    """
    Fog Color  
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorRGB_Struct`
    """
    FogStart: float = ...
    """
    Start of fog  
    <hr>
    
    Field Value
    Type:float
    """
    FogEnd: float = ...
    """
    End of fog  
    <hr>
    
    Field Value
    Type:float
    """
    FogDensity: float = ...
    """
    Density of fog  
    <hr>
    
    Field Value
    Type:float
    """


class ViewVisualizationSpecialEffectsFogTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewVisualizationSpecialEffectsFogType():
    """
    Describes whether the fog type is selected as linear or light or heavy. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear Fog"
       "Light", "Non linear Fog. Light fog produces a fog effect less pervasive than Heavy fog"
       "Heavy", "Non linear Fog"
    """
    Linear = 0  # ViewVisualizationSpecialEffectsFogTypeMemberType
    Light = 1  # ViewVisualizationSpecialEffectsFogTypeMemberType
    Heavy = 2  # ViewVisualizationSpecialEffectsFogTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewVisualizationSpecialEffects():
    """
    Represents the set of visualization special effect preferences applicable to entire session.  
    
    Mainly sets fog preferences. Fog is the ability to display close objects in shades that are different 
    than those of distant objects resulting in a display that shows which geometry is closest to the 
    viewer and which is furthest.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.View`
    
    .. versionadded:: NX3.0.0
    """
    
    class FogType():
        """
        Describes whether the fog type is selected as linear or light or heavy. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear Fog"
           "Light", "Non linear Fog. Light fog produces a fog effect less pervasive than Heavy fog"
           "Heavy", "Non linear Fog"
        """
        Linear = 0  # ViewVisualizationSpecialEffectsFogTypeMemberType
        Light = 1  # ViewVisualizationSpecialEffectsFogTypeMemberType
        Heavy = 2  # ViewVisualizationSpecialEffectsFogTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ColorRGB():
        """
        Represents three constituents of a RGB color pattern .  
        
        Constructor: 
        NXOpen.Preferences.ViewVisualizationSpecialEffects.ColorRGB()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        RedColor: float = ...
        """
        Red in RGB pattern 
        <hr>
        
        Field Value
        Type:float
        """
        GreenColor: float = ...
        """
        Green in RGB pattern 
        <hr>
        
        Field Value
        Type:float
        """
        BlueColor: float = ...
        """
        Blue in RGB pattern 
        <hr>
        
        Field Value
        Type:float
        """
    
    
    class FogData():
        """
        Represents the constituents of fog data .  
        
        Constructor: 
        NXOpen.Preferences.ViewVisualizationSpecialEffects.FogData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        FogMode: int = ...
        """
        Fog mode  
        <hr>
        
        Field Value
        Type:int
        """
        FogColorFlag: bool = ...
        """
        If true fog color is applied to the view 
        <hr>
        
        Field Value
        Type:bool
        """
        FogColor: ViewVisualizationSpecialEffectsColorRGB_Struct = ...
        """
        Fog Color  
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorRGB_Struct`
        """
        FogStart: float = ...
        """
        Start of fog  
        <hr>
        
        Field Value
        Type:float
        """
        FogEnd: float = ...
        """
        End of fog  
        <hr>
        
        Field Value
        Type:float
        """
        FogDensity: float = ...
        """
        Density of fog  
        <hr>
        
        Field Value
        Type:float
        """
    
    
    class ColorHSV():
        """
        Represents three constituents of a HSV color pattern .  
        
        Constructor: 
        NXOpen.Preferences.ViewVisualizationSpecialEffects.ColorHSV()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Hue: float = ...
        """
        Hue in HSV pattern is the color  type (such as red, blue, or yellow) Ranges from 0-360  
        <hr>
        
        Field Value
        Type:float
        """
        Saturation: float = ...
        """
        Saturation in HSV pattern is the "vibrancy" of the color Ranges from 0-255 
        <hr>
        
        Field Value
        Type:float
        """
        Value: float = ...
        """
        Value in HSV pattern is the brightness of the color Ranges from 0-255 
        <hr>
        
        Field Value
        Type:float
        """
    
    
    class ColorHLS():
        """
        Represents three constituents of a HLS color pattern .  
        
        Constructor: 
        NXOpen.Preferences.ViewVisualizationSpecialEffects.ColorHLS()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Hue: float = ...
        """
        Hue in HSV pattern is the color type (such as red, blue, or yellow) Ranges from 0-360 
        <hr>
        
        Field Value
        Type:float
        """
        Lightness: float = ...
        """
        Lightness in HLS pattern Ranges from 0-255 
        <hr>
        
        Field Value
        Type:float
        """
        Saturation: float = ...
        """
        Saturation in HSV pattern is the "vibrancy" of the color Ranges from 0-255 
        <hr>
        
        Field Value
        Type:float
        """
    
    
    def UpdateFogDisplay(self, fogData: ViewVisualizationSpecialEffectsFogData_Struct) -> None:
        """
        Applies current fog settings to display 
        
        Signature ``UpdateFogDisplay(fogData)`` 
        
        :param fogData: 
        :type fogData: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsFogData_Struct` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    FogBackValue: int = ...
    """
    Returns or sets  the fog back scale value.  
    
    The Back scale defines the point at which fog reaches its maximum. 
    
    <hr>
    
    Getter Method
    
    Signature ``FogBackValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogBackValue`` 
    
    :param fogBackValue: 
    :type fogBackValue: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogBackgroundColor: bool = ...
    """
    Returns or sets  the use background color flag.  
    
    If true background color is used as fog color 
    
    <hr>
    
    Getter Method
    
    Signature ``FogBackgroundColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogBackgroundColor`` 
    
    :param fogBackgroundColor: 
    :type fogBackgroundColor: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogColorHLSValue: ViewVisualizationSpecialEffectsColorHLS_Struct = ...
    """
    Returns or sets  the value of HLS color pattern
    
    <hr>
    
    Getter Method
    
    Signature ``FogColorHLSValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorHLS_Struct` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogColorHLSValue`` 
    
    :param fogColorHlsValue: 
    :type fogColorHlsValue: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorHLS_Struct` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogColorHSVValue: ViewVisualizationSpecialEffectsColorHSV_Struct = ...
    """
    Returns or sets  the value of HSV color pattern
    
    <hr>
    
    Getter Method
    
    Signature ``FogColorHSVValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorHSV_Struct` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogColorHSVValue`` 
    
    :param fogColorHsvValue: 
    :type fogColorHsvValue: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorHSV_Struct` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogColorRGBValue: ViewVisualizationSpecialEffectsColorRGB_Struct = ...
    """
    Returns or sets  the value of RGB color pattern
    
    <hr>
    
    Getter Method
    
    Signature ``FogColorRGBValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorRGB_Struct` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogColorRGBValue`` 
    
    :param fogColorRgbValue: 
    :type fogColorRgbValue: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsColorRGB_Struct` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogFrontValue: int = ...
    """
    Returns or sets  the fog front scale value.  
    
    The front scale defines the beginning of fog. 
    
    <hr>
    
    Getter Method
    
    Signature ``FogFrontValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogFrontValue`` 
    
    :param fogFrontValue: 
    :type fogFrontValue: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogRateValue: int = ...
    """
    Returns or sets  the fog rate value.  
    
    Specifies the rate at which an object fades as the distance in the view increases. 
    
    <hr>
    
    Getter Method
    
    Signature ``FogRateValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogRateValue`` 
    
    :param fogRateValue: 
    :type fogRateValue: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogSetting: ViewVisualizationSpecialEffectsFogType = ...
    """
    Returns or sets  the fog setting type 
    
    <hr>
    
    Getter Method
    
    Signature ``FogSetting`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsFogType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogSetting`` 
    
    :param fogSetting: 
    :type fogSetting: :py:class:`NXOpen.Preferences.ViewVisualizationSpecialEffectsFogType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    FogSettingOption: bool = ...
    """
    Returns or sets  the fog option.  
    
    If true fog settings are available and applied to display 
    
    <hr>
    
    Getter Method
    
    Signature ``FogSettingOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FogSettingOption`` 
    
    :param fogSettingOption: 
    :type fogSettingOption: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class ShipDraftingViewLinesViewPreferencesLinesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipDraftingViewLinesViewPreferencesLines():
    """
    Line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "HiddenNonsection", "Hidden, NonSection"
       "VisibleNonsection", "Visible, NonSection"
       "HiddenSection", "Hidden, Section"
       "VisibleSection", "Visible, Section"
       "SecondaryHiddenNonsection", "Secondary, Hidden, NonSection"
       "SecondaryVisibleNonsection", "Secondary, Visible, NonSection"
       "SecondaryHiddenSection", "Secondary, Hidden, Section"
       "SecondaryVisibleSection", "Secondary, Visible, Section"
    """
    HiddenNonsection = 0  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    VisibleNonsection = 1  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    HiddenSection = 2  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    VisibleSection = 3  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    SecondaryHiddenNonsection = 4  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    SecondaryVisibleNonsection = 5  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    SecondaryHiddenSection = 6  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    SecondaryVisibleSection = 7  # ShipDraftingViewLinesViewPreferencesLinesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipDraftingViewLinesViewPreferences():
    """
    Represents set of Ship Drafting View Lines View Preferences applicable to drafting views.  
    
    Ship drafting view lines are used for the features in Ship Design 
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.ShipDraftingViewLines`
    
    .. versionadded:: NX10.0.0
    """
    
    class Lines():
        """
        Line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "HiddenNonsection", "Hidden, NonSection"
           "VisibleNonsection", "Visible, NonSection"
           "HiddenSection", "Hidden, Section"
           "VisibleSection", "Visible, Section"
           "SecondaryHiddenNonsection", "Secondary, Hidden, NonSection"
           "SecondaryVisibleNonsection", "Secondary, Visible, NonSection"
           "SecondaryHiddenSection", "Secondary, Hidden, Section"
           "SecondaryVisibleSection", "Secondary, Visible, Section"
        """
        HiddenNonsection = 0  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        VisibleNonsection = 1  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        HiddenSection = 2  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        VisibleSection = 3  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        SecondaryHiddenNonsection = 4  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        SecondaryVisibleNonsection = 5  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        SecondaryHiddenSection = 6  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        SecondaryVisibleSection = 7  # ShipDraftingViewLinesViewPreferencesLinesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetShipDrawingObject(self, featureName: str, singleLine: bool) -> None:
        """
        Note: The initial values are set based on the file NX_ShipAttribute.  
        
        xml
        The status determines the line settings for the ship feature in a view.
        
        Signature ``SetShipDrawingObject(featureName, singleLine)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param singleLine:  status that determines SLR for the feature  
        :type singleLine: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetShipDrawingObject(self, featureName: str) -> bool:
        """
        Get single line status  
        
        Signature ``GetShipDrawingObject(featureName)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :returns:  status that determines SLR for the feature  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetColor(self, featureName: str, linesType: ShipDraftingViewLinesViewPreferencesLines, color: int) -> None:
        """
        The color of ship line.  
        
        The value should be between UF_OBJ_MIN_COLOR and UF_OBJ_MAX_COLOR. 
        
        Signature ``SetColor(featureName, linesType, color)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipDraftingViewLinesViewPreferencesLines` 
        :param color:  Color  
        :type color: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetColor(self, featureName: str, linesType: ShipDraftingViewLinesViewPreferencesLines) -> int:
        """
        Get line color  
        
        Signature ``GetColor(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipDraftingViewLinesViewPreferencesLines` 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFont(self, featureName: str, linesType: ShipDraftingViewLinesViewPreferencesLines, font: Font) -> None:
        """
        The font type of ship line.  
        
        Signature ``SetFont(featureName, linesType, font)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipDraftingViewLinesViewPreferencesLines` 
        :param font:  Font  
        :type font: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetFont(self, featureName: str, linesType: ShipDraftingViewLinesViewPreferencesLines) -> Font:
        """
        Get line font  
        
        Signature ``GetFont(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipDraftingViewLinesViewPreferencesLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidth(self, featureName: str, linesType: ShipDraftingViewLinesViewPreferencesLines, width: Width) -> None:
        """
        The width of hidden line or edges.  
        
        Signature ``SetWidth(featureName, linesType, width)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipDraftingViewLinesViewPreferencesLines` 
        :param width:  Width  
        :type width: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetWidth(self, featureName: str, linesType: ShipDraftingViewLinesViewPreferencesLines) -> Width:
        """
        Get line width  
        
        Signature ``GetWidth(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Preferences.ShipDraftingViewLinesViewPreferencesLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    


class SessionUserInterfaceJournalFileFormatTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionUserInterfaceJournalFileFormatType():
    """
    Describes the available format types for a journal file 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ascii", "Ascii"
       "Unicode", "Unicode"
       "UnicodeBigEndian", "Unicode Big Endian"
       "Utf8", "UTF 8"
    """
    Ascii = 0  # SessionUserInterfaceJournalFileFormatTypeMemberType
    Unicode = 1  # SessionUserInterfaceJournalFileFormatTypeMemberType
    UnicodeBigEndian = 2  # SessionUserInterfaceJournalFileFormatTypeMemberType
    Utf8 = 3  # SessionUserInterfaceJournalFileFormatTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionUserInterfaceJournalLanguageTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionUserInterfaceJournalLanguageType():
    """
    Describes the language used to record journals 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "VisualBasic", " - "
       "CPlusPlus", "C++ restricts the file format to Ascii"
       "Java", " - "
       "Cs", " - "
       "Python", " - "
    """
    VisualBasic = 0  # SessionUserInterfaceJournalLanguageTypeMemberType
    CPlusPlus = 1  # SessionUserInterfaceJournalLanguageTypeMemberType
    Java = 2  # SessionUserInterfaceJournalLanguageTypeMemberType
    Cs = 3  # SessionUserInterfaceJournalLanguageTypeMemberType
    Python = 4  # SessionUserInterfaceJournalLanguageTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionUserInterface():
    """
    Represents the set of User Interface preferences applicable to entire session.  
    
    Other User Interface 
    settings are available with :py:class:`NXOpen.Preferences.PartUserInterface` for settings applicable to 
    part and with the SessionUserInterfaceUI class for UI based User Interface Preferences 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class JournalFileFormatType():
        """
        Describes the available format types for a journal file 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ascii", "Ascii"
           "Unicode", "Unicode"
           "UnicodeBigEndian", "Unicode Big Endian"
           "Utf8", "UTF 8"
        """
        Ascii = 0  # SessionUserInterfaceJournalFileFormatTypeMemberType
        Unicode = 1  # SessionUserInterfaceJournalFileFormatTypeMemberType
        UnicodeBigEndian = 2  # SessionUserInterfaceJournalFileFormatTypeMemberType
        Utf8 = 3  # SessionUserInterfaceJournalFileFormatTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class JournalLanguageType():
        """
        Describes the language used to record journals 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "VisualBasic", " - "
           "CPlusPlus", "C++ restricts the file format to Ascii"
           "Java", " - "
           "Cs", " - "
           "Python", " - "
        """
        VisualBasic = 0  # SessionUserInterfaceJournalLanguageTypeMemberType
        CPlusPlus = 1  # SessionUserInterfaceJournalLanguageTypeMemberType
        Java = 2  # SessionUserInterfaceJournalLanguageTypeMemberType
        Cs = 3  # SessionUserInterfaceJournalLanguageTypeMemberType
        Python = 4  # SessionUserInterfaceJournalLanguageTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    InsetMenuDialogComments: bool = ...
    """
    Returns or sets  the insert menu/dialog comments flag 
    
    <hr>
    
    Getter Method
    
    Signature ``InsetMenuDialogComments`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsetMenuDialogComments`` 
    
    :param insetMenuDialogComments: 
    :type insetMenuDialogComments: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    JournalFileFormat: SessionUserInterfaceJournalFileFormatType = ...
    """
    Returns or sets  the journal file format 
    
    <hr>
    
    Getter Method
    
    Signature ``JournalFileFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionUserInterfaceJournalFileFormatType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JournalFileFormat`` 
    
    :param journalFileFormat: 
    :type journalFileFormat: :py:class:`NXOpen.Preferences.SessionUserInterfaceJournalFileFormatType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    JournalLanguage: SessionUserInterfaceJournalLanguageType = ...
    """
    Returns or sets  the journal language.  
    
    Setting the journal language to C++ restricts the 
    file format to Ascii. 
    
    <hr>
    
    Getter Method
    
    Signature ``JournalLanguage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionUserInterfaceJournalLanguageType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JournalLanguage`` 
    
    :param language: 
    :type language: :py:class:`NXOpen.Preferences.SessionUserInterfaceJournalLanguageType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class ViewPreferences():
    """
    Represents set of style applicable to drafting views.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    """
    General: GeneralViewPreferences = ...
    """
    Returns object for doing View style settings applicable to General 
    
    Signature ``General`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewPreferences`
    """
    BaseView: BaseViewPreferences = ...
    """
    Returns object for doing View style settings applicable to BaseView 
    
    Signature ``BaseView`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.BaseViewPreferences`
    """
    Projected: ProjectedViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Projected 
    
    Signature ``Projected`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ProjectedViewPreferences`
    """
    InheritPmi: InheritPmiPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Inherit Pmi 
    
    Signature ``InheritPmi`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.InheritPmiPreferences`
    """
    Detail: DetailViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Detail 
    
    Signature ``Detail`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.DetailViewPreferences`
    """
    Section: SectionViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Section 
    
    Signature ``Section`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SectionViewPreferences`
    """
    VirtualIntersections: VirtualIntersectionsViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to VirtualIntersections 
    
    Signature ``VirtualIntersections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.VirtualIntersectionsViewPreferences`
    """
    SmoothEdges: SmoothEdgesViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to SmoothEdges 
    
    Signature ``SmoothEdges`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SmoothEdgesViewPreferences`
    """
    VisibleLines: VisibleLinesViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to VisibleLines 
    
    Signature ``VisibleLines`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.VisibleLinesViewPreferences`
    """
    Threads: ThreadsViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Threads 
    
    Signature ``Threads`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ThreadsViewPreferences`
    """
    TraceLines: TraceLinesViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to TraceLines 
    
    Signature ``TraceLines`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.TraceLinesViewPreferences`
    """
    HiddenLines: HiddenLinesViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to HiddenLines 
    
    Signature ``HiddenLines`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.HiddenLinesViewPreferences`
    """
    Shading: ShadingViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Shading 
    
    Signature ``Shading`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ShadingViewPreferences`
    """
    FlatPattern: FlatPatternViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Flat Patterns 
    
    Signature ``FlatPattern`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.FlatPatternViewPreferences`
    """
    ShipbuildingLines: ShipbuildingLinesViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Shipbuilding Lines 
    
    Signature ``ShipbuildingLines`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ShipbuildingLinesViewPreferences`
    """
    ShipDraftingViewLines: ShipDraftingViewLinesViewPreferences = ...
    """
    Returns object for doing View Preferences settings applicable to Ship Drafting View Lines 
    
    Signature ``ShipDraftingViewLines`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ShipDraftingViewLinesViewPreferences`
    """


class IPerspectiveViewPreferences():
    """
    Represents set of PerspectiveViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class ReferenceSetBehaviorMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReferenceSetBehavior():
    """
    Represents the Reference Set options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No PMI will be inherited if any of the PMI objects has a reference to an object which is not in the active reference set."
       "Partial", "Inherit only PMI for which all of the referenced objects are in the active reference set."
       "All", "Inherit all PMI regardless of whether the referenced objects are in the active reference set. Inherited PMI with references to objects outside of the active reference set will be retained."
    """
    NotSet = 0  # ReferenceSetBehaviorMemberType
    Partial = 1  # ReferenceSetBehaviorMemberType
    All = 2  # ReferenceSetBehaviorMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewPreferences(ISectionViewPreferences):
    """
    Represents set of Section View Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Preferences.ViewPreferences.Section`
    
    .. versionadded:: NX5.0.0
    """
    AssemblyCrossHatching: bool = ...
    """
    Returns or sets  the status of assembly cross hatching.  
    
    Controls the crosshatching angle
    of adjacent solids in an assembly section view.
    Works when :py:meth:`Preferences.SectionViewPreferences.CrossHatch`` is True.
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyCrossHatching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssemblyCrossHatching`` 
    
    :param assemblyCrossHatching: 
    :type assemblyCrossHatching: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Background: bool = ...
    """
    Returns or sets  the status of background.  
    
    Suppress or display the background curves for a section view. If True,
    not only the curves and crosshatching generated by cutting the solid are displayed, 
    but the curves behind the cutting plane are displayed as well. If False, only the curves and 
    crosshatching generated by cutting the solid are displayed in the view.
    
    <hr>
    
    Getter Method
    
    Signature ``Background`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Background`` 
    
    :param background: 
    :type background: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Bendlines: bool = ...
    """
    Returns or sets  the status of bendlines 
    
    <hr>
    
    Getter Method
    
    Signature ``Bendlines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Bendlines`` 
    
    :param bendlines: 
    :type bendlines: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CrossHatch: bool = ...
    """
    Returns or sets  the status of cross hatch.  
    
    Allows to control whether or not crosshatching is generated in 
    a given section view. If True, crosshatching is displayed for a section view on the drawing, 
    else crosshatching is not generated for a section view on the drawing, and a performance 
    increase is gained.
    
    <hr>
    
    Getter Method
    
    Signature ``CrossHatch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrossHatch`` 
    
    :param crossHatch: 
    :type crossHatch: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CrosshatchAdjacencyTolarance: float = ...
    """
    Returns or sets  the value of crosshatch adjacency tolarance.  
    
    Controls the crosshatching angle of adjacent 
    solids in an assembly section view.
    Works when :py:meth:`Preferences.SectionViewPreferences.AssemblyCrossHatching`` is True.
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchAdjacencyTolarance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchAdjacencyTolarance`` 
    
    :param crosshatchAdjacencyTolarance: 
    :type crosshatchAdjacencyTolarance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Foreground: bool = ...
    """
    Returns or sets  the status of foreground 
    
    <hr>
    
    Getter Method
    
    Signature ``Foreground`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Foreground`` 
    
    :param foreground: 
    :type foreground: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLineHatching: bool = ...
    """
    Returns or sets  the status of hidden line hatching.  
    
    Controls whether hatching for a Break-Out
    or Pictorial Section view participates in hidden line processing. When it is True for a break-out section view, 
    the only hatch style available is iron (equally spaced solid lines).
    Works when :py:meth:`Preferences.SectionViewPreferences.CrossHatch`` is True.
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLineHatching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLineHatching`` 
    
    :param hiddenLineHatching: 
    :type hiddenLineHatching: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RestrictCrosshatchAngle: bool = ...
    """
    Returns or sets  the status of restrict crosshatch angle.  
    
    Restricts the crosshatch angle
    of adjacent solids in an assembly section view.
    Works when :py:meth:`Preferences.SectionViewPreferences.AssemblyCrossHatching`` is True.
    
    <hr>
    
    Getter Method
    
    Signature ``RestrictCrosshatchAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestrictCrosshatchAngle`` 
    
    :param restrictCrosshatchAngle: 
    :type restrictCrosshatchAngle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SectionSheetBodies: bool = ...
    """
    Returns or sets  the status of section sheet bodies.  
    
    Allows sectioning of sheet bodies in a Section view. 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionSheetBodies`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionSheetBodies`` 
    
    :param sectionSheetBodies: 
    :type sectionSheetBodies: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class SessionVisualizationShade():
    """
    Represents the UI related Visualization Shade preferences.  
    
    These preferences are maintained at
    UI level and applicable to entire session 
    To obtain an instance of this class, refer to :py:class:`NXOpen.UI`
    
    .. versionadded:: NX3.0.0
    """
    
    def RegenerateStudioAnalysisViewsFromTolChange(self, updateEnvOption: bool) -> None:
        """
        Regenerates Studio Analysis Views.  
        
        Updates all objects based on their surfacing tolerance. 
        
        Signature ``RegenerateStudioAnalysisViewsFromTolChange(updateEnvOption)`` 
        
        :param updateEnvOption:  Send TRUE if env cube updation is required. Else send FALSE  
        :type updateEnvOption: bool 
        
        .. versionadded:: NX3.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Preferences.PartVisualizationShade.RegenerateStudioAnalysisViewsFromToleranceChange` instead.
        
        License requirements: None.
        """
        ...
    
    
    def RegenerateShadedViewsFromToleranceChange(self) -> None:
        """
        Regenerates Shaded Views.  
        
        Updates all objects based on their surfacing tolerance. 
        
        Signature ``RegenerateShadedViewsFromToleranceChange()`` 
        
        .. versionadded:: NX3.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Preferences.PartVisualizationShade.RegenerateShadedViewsFromToleranceChange` instead.
        
        License requirements: None.
        """
        ...
    
    EdgesEmphasis: bool = ...
    """
    Returns or sets  the edge emphasis flag.  
    
    Alters how edges are displayed when Shaded Face Edges is flag is true. 
    
    <hr>
    
    Getter Method
    
    Signature ``EdgesEmphasis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgesEmphasis`` 
    
    :param edgesEmphasis:  Edge Emphasis Option to be set or not  
    :type edgesEmphasis: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    LwrtStudioDisplay: bool = ...
    """
    Returns or sets  the lwrt studio display flag.  
    
    Alters how studio are displayed. 
    
    <hr>
    
    Getter Method
    
    Signature ``LwrtStudioDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LwrtStudioDisplay`` 
    
    :param lwrtStudioDisplay:  Option to be set or not  
    :type lwrtStudioDisplay: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    ShowFacetEdges: bool = ...
    """
    Returns or sets  the show facet edge flag.  
    
    Toggles the display of facet edges. If this flag is true it can help 
    when trying to evaluate or interpret faceted edges. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowFacetEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowFacetEdges`` 
    
    :param facetEdges: 
    :type facetEdges: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


class SessionVisualizationColorSetting():
    """
    Represents the set of visualization preferences applicable to entire session  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:class:`NXOpen.Preferences.PartVisualizationColorSetting` instead.
    """
    HandlesColor: int = ...
    """
    Returns or sets  the handles color.  
    
    Sets the handle color. Unigraphics NX displays all handles using a "handle" color. 
    A session attribute determines the color of handles and applies to all parts in a session.  
    
    This property is deprecated. Use :py:meth:`NXOpen.Preferences.PartVisualizationColorSetting.HandleColor`` instead.
    
    <hr>
    
    Getter Method
    
    Signature ``HandlesColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationColorSetting.HandleColor`` instead
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandlesColor`` 
    
    :param handlesColor: 
    :type handlesColor: int 
    
    .. versionadded:: NX3.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Preferences.PartVisualizationColorSetting.HandleColor`` instead
    
    License requirements: None.
    """


class IncludeModelCurvesOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IncludeModelCurvesOption():
    """
    Represents the include model curves options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", "Do not process model curves for hidden line processing"
       "Yes", "Process model curves for hidden line procesing"
    """
    No = 0  # IncludeModelCurvesOptionMemberType
    Yes = 1  # IncludeModelCurvesOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralViewRepresentationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralViewRepresentationOption():
    """
    Represents the view representation options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Exact", "Exact"
       "SmartLightweight", "Smart Lightweight"
       "Lightweight", "Lightweight"
       "PreNx85Exact", "Pre-NX 8.5 Exact"
    """
    Exact = 0  # GeneralViewRepresentationOptionMemberType
    SmartLightweight = 1  # GeneralViewRepresentationOptionMemberType
    Lightweight = 2  # GeneralViewRepresentationOptionMemberType
    PreNx85Exact = 3  # GeneralViewRepresentationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ISmoothEdgesViewPreferences():
    """
    Represents set of SmoothEdgesViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class SessionMeasureRequirementsActionOnViolationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SessionMeasureRequirementsActionOnViolation():
    """
    Values for the action to take when a requirement error is generated for a measure with a displayed
    annotation in Assembly Sequencing.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "HightlightMeasure", "Highlight (color) measure for requirements violations"
       "StopPlayback", "Suspend playback and wait for acknowledgement for requirements violations"
    """
    HightlightMeasure = 0  # SessionMeasureRequirementsActionOnViolationMemberType
    StopPlayback = 1  # SessionMeasureRequirementsActionOnViolationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SessionMeasureRequirements():
    """
    Represents the two options available on the Measure Requirements toolbar and applicable to the entire session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.SessionPreferences`
    
    .. versionadded:: NX5.0.0
    """
    
    class ActionOnViolation():
        """
        Values for the action to take when a requirement error is generated for a measure with a displayed
        annotation in Assembly Sequencing.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "HightlightMeasure", "Highlight (color) measure for requirements violations"
           "StopPlayback", "Suspend playback and wait for acknowledgement for requirements violations"
        """
        HightlightMeasure = 0  # SessionMeasureRequirementsActionOnViolationMemberType
        StopPlayback = 1  # SessionMeasureRequirementsActionOnViolationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    UpdateFrameRate: int = ...
    """
    Returns or sets  the frame rate.  
    
    The frame rate specifies how frequently a displayed measure annotation is updated in Assembly Sequencing.
    So a rate of 1 specifies that the annotation will update every frame during playback.
    A rate of 5 specifies that the annotation will update every fifth frame during playback. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateFrameRate`` 
    
    :returns:  an integer > 0  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateFrameRate`` 
    
    :param frameRate:  an integer > 0  
    :type frameRate: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ViolationAction: SessionMeasureRequirementsActionOnViolation = ...
    """
    Returns or sets  the violation action.  
    
    The violation action is one of the enumerated type values. 
    
    <hr>
    
    Getter Method
    
    Signature ``ViolationAction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.SessionMeasureRequirementsActionOnViolation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViolationAction`` 
    
    :param violationAction: 
    :type violationAction: :py:class:`NXOpen.Preferences.SessionMeasureRequirementsActionOnViolation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """


class GdtOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GdtOption():
    """
    Represents the Inherit GD and T options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Does not inherit any GD and T display instances."
       "InDrawingPlane", "inherit display instances of geometric tolerance features that are parallel to the drawing plane onto the drawing view."
       "FromModelView", "inherit display instances of geometric tolerance features that exist in a particular modeling view (e.g. Top, Front, etc.)."
    """
    NotSet = 0  # GdtOptionMemberType
    InDrawingPlane = 1  # GdtOptionMemberType
    FromModelView = 2  # GdtOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IShadingViewPreferences():
    """
    Represents set of Shading ViewPreferences applicable to drafting views.  
    
    .. versionadded:: NX5.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class PartVisualizationShadeShadedViewToleranceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationShadeShadedViewToleranceType():
    """
    Describes the available tolerance types for Shaded View. Each of these options maps tolerance values to 
    three specific faceting operations: Facet Edge Tolerance, Facet Chord Tolerance, and Angular Tolerance.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", "For Coarse: Facet Edge Tolerance is 0.01, Facet Chord Tolerance is 0.01, and Angular Tolerance is 0.0"
       "Standard", "For Standard: Facet Edge Tolerance is 0.005, Facet Chord Tolerance is 0.005 , and Angular Tolerance is 15"
       "Fine", "For Fine: Facet Edge Tolerance is 0.0005, Facet Chord Tolerance is 0.0025, and Angular Tolerance is 6"
       "Extrafine", "For Extrafine: Facet Edge Tolerance is 0.005, Facet Chord Tolerance is 0.001, and Angular Tolerance is 6"
       "Ultrafine", "For Ultrafine: Facet Edge Tolerance is 0.0005, Facet Chord Tolerance is 0.0005, and Angular Tolerance is 3"
       "Customize", "Customize. User can specify the Edge Tolerance, Face Tolerance and Angle Tolerance specifically."
    """
    Coarse = 0  # PartVisualizationShadeShadedViewToleranceTypeMemberType
    Standard = 1  # PartVisualizationShadeShadedViewToleranceTypeMemberType
    Fine = 2  # PartVisualizationShadeShadedViewToleranceTypeMemberType
    Extrafine = 3  # PartVisualizationShadeShadedViewToleranceTypeMemberType
    Ultrafine = 4  # PartVisualizationShadeShadedViewToleranceTypeMemberType
    Customize = 5  # PartVisualizationShadeShadedViewToleranceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationShadeAdvViewToleranceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationShadeAdvViewToleranceType():
    """
    Describes the available tolerance types for Advanced View. Each of these options maps tolerance values to 
    for specific operations : Curve Edge Chord Distance, Surface Chord Distance, Angular Tolerance, Facet Width 
    Tolerance 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", "Coarse"
       "Standard", "Standard"
       "Fine", "Fine"
       "Extrafine", "Extrafine"
       "Superfine", "Superfine"
       "Ultrafine", "Ultrafine"
       "Customize", "Customize. User can specify the Edge Tolerance, Face Tolerance and Angle Tolerance, Width Tolerance specifically."
    """
    Coarse = 0  # PartVisualizationShadeAdvViewToleranceTypeMemberType
    Standard = 1  # PartVisualizationShadeAdvViewToleranceTypeMemberType
    Fine = 2  # PartVisualizationShadeAdvViewToleranceTypeMemberType
    Extrafine = 3  # PartVisualizationShadeAdvViewToleranceTypeMemberType
    Superfine = 4  # PartVisualizationShadeAdvViewToleranceTypeMemberType
    Ultrafine = 5  # PartVisualizationShadeAdvViewToleranceTypeMemberType
    Customize = 6  # PartVisualizationShadeAdvViewToleranceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationShadeViewUpdateModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationShadeViewUpdateModeType():
    """
    Describes whether the applied changes are applicable to visible object or all object or no object 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "VisibleObject", "Applicable only to visible object"
       "AllObject", "Applicable to all object"
       "NotSet", "No object"
    """
    VisibleObject = 0  # PartVisualizationShadeViewUpdateModeTypeMemberType
    AllObject = 1  # PartVisualizationShadeViewUpdateModeTypeMemberType
    NotSet = 2  # PartVisualizationShadeViewUpdateModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationShadeShadedFaceEdgeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationShadeShadedFaceEdge():
    """
    Describes whether the shaded face edges are having no color or body color or user defined color. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", "Option is off"
       "BodyColor", "Body Color"
       "SpecifyColor", "Specified Color"
    """
    Off = 0  # PartVisualizationShadeShadedFaceEdgeMemberType
    BodyColor = 1  # PartVisualizationShadeShadedFaceEdgeMemberType
    SpecifyColor = 2  # PartVisualizationShadeShadedFaceEdgeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationShadeHiddenShadedFaceEdgesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartVisualizationShadeHiddenShadedFaceEdges():
    """
    Describes whether the shaded face edges are invisible or dashed visible or with a color to depict the hidden geometry 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Invisible", "If selected, shaded face edges that are hidden are not displayed"
       "Dashed", "If selected, hidden shaded face edges are displayed in the body color with a dashed line font."
       "HiddenColor", "If any color is selected, hidden shaded face edges are displayed in that color."
    """
    Invisible = 0  # PartVisualizationShadeHiddenShadedFaceEdgesMemberType
    Dashed = 1  # PartVisualizationShadeHiddenShadedFaceEdgesMemberType
    HiddenColor = 2  # PartVisualizationShadeHiddenShadedFaceEdgesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartVisualizationShade():
    """
    Represents the set of shade visualization preferences applicable to entire part  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Preferences.PartPreferences`
    
    .. versionadded:: NX3.0.0
    """
    
    class ShadedViewToleranceType():
        """
        Describes the available tolerance types for Shaded View. Each of these options maps tolerance values to 
        three specific faceting operations: Facet Edge Tolerance, Facet Chord Tolerance, and Angular Tolerance.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Coarse", "For Coarse: Facet Edge Tolerance is 0.01, Facet Chord Tolerance is 0.01, and Angular Tolerance is 0.0"
           "Standard", "For Standard: Facet Edge Tolerance is 0.005, Facet Chord Tolerance is 0.005 , and Angular Tolerance is 15"
           "Fine", "For Fine: Facet Edge Tolerance is 0.0005, Facet Chord Tolerance is 0.0025, and Angular Tolerance is 6"
           "Extrafine", "For Extrafine: Facet Edge Tolerance is 0.005, Facet Chord Tolerance is 0.001, and Angular Tolerance is 6"
           "Ultrafine", "For Ultrafine: Facet Edge Tolerance is 0.0005, Facet Chord Tolerance is 0.0005, and Angular Tolerance is 3"
           "Customize", "Customize. User can specify the Edge Tolerance, Face Tolerance and Angle Tolerance specifically."
        """
        Coarse = 0  # PartVisualizationShadeShadedViewToleranceTypeMemberType
        Standard = 1  # PartVisualizationShadeShadedViewToleranceTypeMemberType
        Fine = 2  # PartVisualizationShadeShadedViewToleranceTypeMemberType
        Extrafine = 3  # PartVisualizationShadeShadedViewToleranceTypeMemberType
        Ultrafine = 4  # PartVisualizationShadeShadedViewToleranceTypeMemberType
        Customize = 5  # PartVisualizationShadeShadedViewToleranceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AdvViewToleranceType():
        """
        Describes the available tolerance types for Advanced View. Each of these options maps tolerance values to 
        for specific operations : Curve Edge Chord Distance, Surface Chord Distance, Angular Tolerance, Facet Width 
        Tolerance 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Coarse", "Coarse"
           "Standard", "Standard"
           "Fine", "Fine"
           "Extrafine", "Extrafine"
           "Superfine", "Superfine"
           "Ultrafine", "Ultrafine"
           "Customize", "Customize. User can specify the Edge Tolerance, Face Tolerance and Angle Tolerance, Width Tolerance specifically."
        """
        Coarse = 0  # PartVisualizationShadeAdvViewToleranceTypeMemberType
        Standard = 1  # PartVisualizationShadeAdvViewToleranceTypeMemberType
        Fine = 2  # PartVisualizationShadeAdvViewToleranceTypeMemberType
        Extrafine = 3  # PartVisualizationShadeAdvViewToleranceTypeMemberType
        Superfine = 4  # PartVisualizationShadeAdvViewToleranceTypeMemberType
        Ultrafine = 5  # PartVisualizationShadeAdvViewToleranceTypeMemberType
        Customize = 6  # PartVisualizationShadeAdvViewToleranceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewUpdateModeType():
        """
        Describes whether the applied changes are applicable to visible object or all object or no object 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "VisibleObject", "Applicable only to visible object"
           "AllObject", "Applicable to all object"
           "NotSet", "No object"
        """
        VisibleObject = 0  # PartVisualizationShadeViewUpdateModeTypeMemberType
        AllObject = 1  # PartVisualizationShadeViewUpdateModeTypeMemberType
        NotSet = 2  # PartVisualizationShadeViewUpdateModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShadedFaceEdge():
        """
        Describes whether the shaded face edges are having no color or body color or user defined color. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", "Option is off"
           "BodyColor", "Body Color"
           "SpecifyColor", "Specified Color"
        """
        Off = 0  # PartVisualizationShadeShadedFaceEdgeMemberType
        BodyColor = 1  # PartVisualizationShadeShadedFaceEdgeMemberType
        SpecifyColor = 2  # PartVisualizationShadeShadedFaceEdgeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HiddenShadedFaceEdges():
        """
        Describes whether the shaded face edges are invisible or dashed visible or with a color to depict the hidden geometry 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Invisible", "If selected, shaded face edges that are hidden are not displayed"
           "Dashed", "If selected, hidden shaded face edges are displayed in the body color with a dashed line font."
           "HiddenColor", "If any color is selected, hidden shaded face edges are displayed in that color."
        """
        Invisible = 0  # PartVisualizationShadeHiddenShadedFaceEdgesMemberType
        Dashed = 1  # PartVisualizationShadeHiddenShadedFaceEdgesMemberType
        HiddenColor = 2  # PartVisualizationShadeHiddenShadedFaceEdgesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetShadedViewFacetTolerances(self, shadedViewToleranceSet: PartVisualizationShadeShadedViewToleranceType) -> tuple:
        """
        Returns the edge, face and angle tolerances to be used with the specified
        tolerance set for shaded views.  
        
        Signature ``GetShadedViewFacetTolerances(shadedViewToleranceSet)`` 
        
        :param shadedViewToleranceSet: 
        :type shadedViewToleranceSet: :py:class:`NXOpen.Preferences.PartVisualizationShadeShadedViewToleranceType` 
        :returns: a tuple 
        :rtype: A tuple consisting of (edgeTolerance, faceTolerance, angleTolerance). edgeTolerance is a float. faceTolerance is a float. angleTolerance is a float. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetShadedViewFacetTolerances(self, shadedViewToleranceSet: PartVisualizationShadeShadedViewToleranceType, edgeTolerance: float, faceTolerance: float, angleTolerance: float) -> None:
        """
        Sets the edge, face and angle tolerances to be used with the specified
        tolerance set for shaded views.  
        
        Signature ``SetShadedViewFacetTolerances(shadedViewToleranceSet, edgeTolerance, faceTolerance, angleTolerance)`` 
        
        :param shadedViewToleranceSet: 
        :type shadedViewToleranceSet: :py:class:`NXOpen.Preferences.PartVisualizationShadeShadedViewToleranceType` 
        :param edgeTolerance: 
        :type edgeTolerance: float 
        :param faceTolerance: 
        :type faceTolerance: float 
        :param angleTolerance: 
        :type angleTolerance: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAdvVisViewFacetTolerances(self, advVisViewToleranceSet: PartVisualizationShadeAdvViewToleranceType) -> tuple:
        """
        Returns the edge, face, angle and width tolerances to be used with the specified
        tolerance set for Advanced Visualization views.  
        
        Signature ``GetAdvVisViewFacetTolerances(advVisViewToleranceSet)`` 
        
        :param advVisViewToleranceSet: 
        :type advVisViewToleranceSet: :py:class:`NXOpen.Preferences.PartVisualizationShadeAdvViewToleranceType` 
        :returns: a tuple 
        :rtype: A tuple consisting of (edgeTolerance, faceTolerance, angleTolerance, widthTolerance). edgeTolerance is a float. faceTolerance is a float. angleTolerance is a float. widthTolerance is a float. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAdvVisViewFacetTolerances(self, advVisViewToleranceSet: PartVisualizationShadeAdvViewToleranceType, edgeTolerance: float, faceTolerance: float, angleTolerance: float, widthTolerance: float) -> None:
        """
        Sets the edge, face, angle and width tolerances to be used with the specified
        tolerance set for Advanced Visualization views.  
        
        Signature ``SetAdvVisViewFacetTolerances(advVisViewToleranceSet, edgeTolerance, faceTolerance, angleTolerance, widthTolerance)`` 
        
        :param advVisViewToleranceSet: 
        :type advVisViewToleranceSet: :py:class:`NXOpen.Preferences.PartVisualizationShadeAdvViewToleranceType` 
        :param edgeTolerance: 
        :type edgeTolerance: float 
        :param faceTolerance: 
        :type faceTolerance: float 
        :param angleTolerance: 
        :type angleTolerance: float 
        :param widthTolerance: 
        :type widthTolerance: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RegenerateStudioAnalysisViewsFromToleranceChange(self, updateEnvCube: bool) -> None:
        """
        Regenerates Studio Analysis Views.  
        
        Updates all objects based on their surfacing tolerance. 
        
        Signature ``RegenerateStudioAnalysisViewsFromToleranceChange(updateEnvCube)`` 
        
        :param updateEnvCube:  True if env cube should be updated  
        :type updateEnvCube: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RegenerateShadedViewsFromToleranceChange(self) -> None:
        """
        Regenerates Shaded Views.  
        
        Updates all objects based on their surfacing tolerance. 
        
        Signature ``RegenerateShadedViewsFromToleranceChange()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    AdvancedVisViewTolerance: PartVisualizationShadeAdvViewToleranceType = ...
    """
    Returns or sets  the tolerance for advanced visualization views.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdvancedVisViewTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationShadeAdvViewToleranceType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdvancedVisViewTolerance`` 
    
    :param advancedVisViewTolerance: 
    :type advancedVisViewTolerance: :py:class:`NXOpen.Preferences.PartVisualizationShadeAdvViewToleranceType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    AdvancedVisViewUpdateMode: PartVisualizationShadeViewUpdateModeType = ...
    """
    Returns or sets  the update mode for advanced visualization views.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdvancedVisViewUpdateMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationShadeViewUpdateModeType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdvancedVisViewUpdateMode`` 
    
    :param advancedVisViewUpdateMode: 
    :type advancedVisViewUpdateMode: :py:class:`NXOpen.Preferences.PartVisualizationShadeViewUpdateModeType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    AlignAdvVisViewFacetsAlongEdges: bool = ...
    """
    Returns or sets  the state of whether facets should be aligned along common edges for Advanced Visualization Views 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignAdvVisViewFacetsAlongEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignAdvVisViewFacetsAlongEdges`` 
    
    :param alignAdvVisViewFacetsAlongEdges: 
    :type alignAdvVisViewFacetsAlongEdges: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AlignShadedViewFacetsAlongEdges: bool = ...
    """
    Returns or sets  the state of whether facets should be aligned along common edges for Shaded Views 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignShadedViewFacetsAlongEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignShadedViewFacetsAlongEdges`` 
    
    :param alignShadedViewFacetsAlongEdges: 
    :type alignShadedViewFacetsAlongEdges: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    HiddenGeometryColor: int = ...
    """
    Returns or sets  the shade hidden geometry color.  
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenGeometryColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenGeometryColor`` 
    
    :param hiddenGeomColor: 
    :type hiddenGeomColor: int 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShadedViewTolerance: PartVisualizationShadeShadedViewToleranceType = ...
    """
    Returns or sets  the tolerance for shaded views.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedViewTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationShadeShadedViewToleranceType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadedViewTolerance`` 
    
    :param shadedViewTolerance: 
    :type shadedViewTolerance: :py:class:`NXOpen.Preferences.PartVisualizationShadeShadedViewToleranceType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ShadedViewUpdateMode: PartVisualizationShadeViewUpdateModeType = ...
    """
    Returns or sets  the update mode for shaded views.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedViewUpdateMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationShadeViewUpdateModeType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadedViewUpdateMode`` 
    
    :param shadedViewUpdateMode: 
    :type shadedViewUpdateMode: :py:class:`NXOpen.Preferences.PartVisualizationShadeViewUpdateModeType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """


