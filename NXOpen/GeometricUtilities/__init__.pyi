# module 'NXOpen.GeometricUtilities'
#
# Automatically generated 2025-06-09T14:38:46.743316
#
"""Default documentation for NXOpen.GeometricUtilities."""

import typing

import NXOpen
import NXOpen.Assemblies
import NXOpen.Facet
import NXOpen.Features
import NXOpen.Preferences



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class IComponentBuilder():
    """
    Represents a component contained in a builder
    
    .. versionadded:: NX3.0.1
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class ColorCodedRegionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ColorCodedRegionBuilder`.  
    
    The Color Coded Region block allows the user to select color coded regions of facet bodies .
    
    .. versionadded:: NX10.0.0
    """
    
    def BuildColoredRegion(self, facetBody: NXOpen.Facet.FacetedBody, facetId: int, localVertexId: int) -> None:
        """
        Build Colored Region.  
        
        Signature ``BuildColoredRegion(facetBody, facetId, localVertexId)`` 
        
        :param facetBody:  target facet body  
        :type facetBody: :py:class:`NXOpen.Facet.FacetedBody` 
        :param facetId:  picked facet ID  
        :type facetId: int 
        :param localVertexId:  loccal vertex id of the triangle  
        :type localVertexId: int 
        
        .. versionadded:: NX10.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.GeometricUtilities.ColorCodedRegionBuilder.BuildBodyColoredRegion` instead.
        
        License requirements: None.
        """
        ...
    
    
    def BuildBodyColoredRegion(self, body: NXOpen.DisplayableObject, facetId: int, localVertexId: int) -> None:
        """
        Build Colored Region.  
        
        Inputs to this command can be convergent objects. 
        
        Signature ``BuildBodyColoredRegion(body, facetId, localVertexId)`` 
        
        :param body:  target body  
        :type body: :py:class:`NXOpen.DisplayableObject` 
        :param facetId:  picked facet ID  
        :type facetId: int 
        :param localVertexId:  loccal vertex id of the triangle  
        :type localVertexId: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeselectColoredRegion(self, objIndex: int) -> None:
        """
        Deselect Colored Region 
        
        Signature ``DeselectColoredRegion(objIndex)`` 
        
        :param objIndex:  colored object to be deselected  
        :type objIndex: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AllSameColor: bool = ...
    """
    Returns or sets  the option to select all regions of the same color 
    
    <hr>
    
    Getter Method
    
    Signature ``AllSameColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllSameColor`` 
    
    :param allSameColor: 
    :type allSameColor: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Null: ColorCodedRegionBuilder = ...  # unknown typename


class OrientXpressBuilderAxisMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientXpressBuilderAxis():
    """
    the active axis option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", "Active axis in x-axis direction"
       "Y", "Active axis in y-axis direction"
       "Z", "Active axis in z-axis direction"
       "Passive", "Passive axis input mode"
    """
    X = 0  # OrientXpressBuilderAxisMemberType
    Y = 1  # OrientXpressBuilderAxisMemberType
    Z = 2  # OrientXpressBuilderAxisMemberType
    Passive = 3  # OrientXpressBuilderAxisMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientXpressBuilderPlaneMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientXpressBuilderPlane():
    """
    the active plane option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yz", "Active plane is parallel to yz-plane"
       "Xz", "Active plane is parallel to xz-plane"
       "Xy", "Active plane is parallel to xy-plane"
       "Passive", "Passive plane input mode"
    """
    Yz = 0  # OrientXpressBuilderPlaneMemberType
    Xz = 1  # OrientXpressBuilderPlaneMemberType
    Xy = 2  # OrientXpressBuilderPlaneMemberType
    Passive = 3  # OrientXpressBuilderPlaneMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientXpressBuilderReferenceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientXpressBuilderReference():
    """
    the option for reference csys 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AcsWorkPart", "Reference CSYS is absolute coordinate system in the work part"
       "AcsDisplayPart", "Reference CSYS is absolute coordinate system in the display part"
       "WcsWorkPart", "Reference CSYS is work coordinate system in the work part"
       "WcsDisplayPart", "Reference CSYS is work coordinate system in the display part"
       "Csys", "Reference CSYS is user specified coordinate system"
       "Fixed", "Reference CSYS is user defined coordinate system"
       "ProgramDefined", "Reference CSYS is application defined"
    """
    AcsWorkPart = 0  # OrientXpressBuilderReferenceMemberType
    AcsDisplayPart = 1  # OrientXpressBuilderReferenceMemberType
    WcsWorkPart = 2  # OrientXpressBuilderReferenceMemberType
    WcsDisplayPart = 3  # OrientXpressBuilderReferenceMemberType
    Csys = 4  # OrientXpressBuilderReferenceMemberType
    Fixed = 5  # OrientXpressBuilderReferenceMemberType
    ProgramDefined = 6  # OrientXpressBuilderReferenceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientXpressBuilder(NXOpen.TaggedObject):
    """
    Represent the OrientXpress block   
    
    OrientXpress is not supported in KF.
    
    .. versionadded:: NX6.0.0
    """
    
    class Axis():
        """
        the active axis option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", "Active axis in x-axis direction"
           "Y", "Active axis in y-axis direction"
           "Z", "Active axis in z-axis direction"
           "Passive", "Passive axis input mode"
        """
        X = 0  # OrientXpressBuilderAxisMemberType
        Y = 1  # OrientXpressBuilderAxisMemberType
        Z = 2  # OrientXpressBuilderAxisMemberType
        Passive = 3  # OrientXpressBuilderAxisMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Plane():
        """
        the active plane option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yz", "Active plane is parallel to yz-plane"
           "Xz", "Active plane is parallel to xz-plane"
           "Xy", "Active plane is parallel to xy-plane"
           "Passive", "Passive plane input mode"
        """
        Yz = 0  # OrientXpressBuilderPlaneMemberType
        Xz = 1  # OrientXpressBuilderPlaneMemberType
        Xy = 2  # OrientXpressBuilderPlaneMemberType
        Passive = 3  # OrientXpressBuilderPlaneMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Reference():
        """
        the option for reference csys 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AcsWorkPart", "Reference CSYS is absolute coordinate system in the work part"
           "AcsDisplayPart", "Reference CSYS is absolute coordinate system in the display part"
           "WcsWorkPart", "Reference CSYS is work coordinate system in the work part"
           "WcsDisplayPart", "Reference CSYS is work coordinate system in the display part"
           "Csys", "Reference CSYS is user specified coordinate system"
           "Fixed", "Reference CSYS is user defined coordinate system"
           "ProgramDefined", "Reference CSYS is application defined"
        """
        AcsWorkPart = 0  # OrientXpressBuilderReferenceMemberType
        AcsDisplayPart = 1  # OrientXpressBuilderReferenceMemberType
        WcsWorkPart = 2  # OrientXpressBuilderReferenceMemberType
        WcsDisplayPart = 3  # OrientXpressBuilderReferenceMemberType
        Csys = 4  # OrientXpressBuilderReferenceMemberType
        Fixed = 5  # OrientXpressBuilderReferenceMemberType
        ProgramDefined = 6  # OrientXpressBuilderReferenceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisOption: OrientXpressBuilderAxis = ...
    """
    Returns or sets  the orientXpress active axis option 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilderAxis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AxisOption`` 
    
    :param orientXpressAxisOption: 
    :type orientXpressAxisOption: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilderAxis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Csys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the orientXpress reference csys when reference option is set to csys 
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Csys`` 
    
    :param orientXpressCsys: 
    :type orientXpressCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    FixedCsys: NXOpen.NXObject = ...
    """
    Returns or sets  the orientXpress fixed csys when reference option is set to fixed csys 
    
    <hr>
    
    Getter Method
    
    Signature ``FixedCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FixedCsys`` 
    
    :param orientXpressFixedCsys: 
    :type orientXpressFixedCsys: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    PlaneOption: OrientXpressBuilderPlane = ...
    """
    Returns or sets  the orientXpress active plane option 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilderPlane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneOption`` 
    
    :param orientXpressPlaneOption: 
    :type orientXpressPlaneOption: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilderPlane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ProgramDefinedCsys: NXOpen.NXObject = ...
    """
    Returns or sets  the orientXpress program defined csys when reference option is set to program defined csys 
    
    <hr>
    
    Getter Method
    
    Signature ``ProgramDefinedCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProgramDefinedCsys`` 
    
    :param orientXpressProgramDefinedCsys: 
    :type orientXpressProgramDefinedCsys: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ReferenceOption: OrientXpressBuilderReference = ...
    """
    Returns or sets  the orientXpress reference coordinate system 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilderReference` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceOption`` 
    
    :param orientXpressReferenceOption: 
    :type orientXpressReferenceOption: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilderReference` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: OrientXpressBuilder = ...  # unknown typename


class BooleanRegionSelectSelectOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BooleanRegionSelectSelectOption():
    """
    the region selection method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No regions to pick"
       "KeepOrRemove", "Keep or remove regions"
       "KeepAndRemove", "Keep and remove regions"
    """
    NotSet = 0  # BooleanRegionSelectSelectOptionMemberType
    KeepOrRemove = 1  # BooleanRegionSelectSelectOptionMemberType
    KeepAndRemove = 2  # BooleanRegionSelectSelectOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BooleanRegionSelectKeepRemoveOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BooleanRegionSelectKeepRemoveOption():
    """
    the keep/remove options for selected region
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Keep", "Selected region will be kept. Default set."
       "Remove", "Selected reg ion will be removed."
    """
    Keep = 0  # BooleanRegionSelectKeepRemoveOptionMemberType
    Remove = 1  # BooleanRegionSelectKeepRemoveOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BooleanRegionSelect(NXOpen.TaggedObject, IComponentBuilder):
    """
    a class which defines boolean region select.  
    
    .. versionadded:: NX8.5.0
    """
    
    class SelectOption():
        """
        the region selection method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No regions to pick"
           "KeepOrRemove", "Keep or remove regions"
           "KeepAndRemove", "Keep and remove regions"
        """
        NotSet = 0  # BooleanRegionSelectSelectOptionMemberType
        KeepOrRemove = 1  # BooleanRegionSelectSelectOptionMemberType
        KeepAndRemove = 2  # BooleanRegionSelectSelectOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class KeepRemoveOption():
        """
        the keep/remove options for selected region
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Keep", "Selected region will be kept. Default set."
           "Remove", "Selected reg ion will be removed."
        """
        Keep = 0  # BooleanRegionSelectKeepRemoveOptionMemberType
        Remove = 1  # BooleanRegionSelectKeepRemoveOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AppendOneRegionTracker(self) -> RegionTracker:
        """
        Create empty region tracker object and register it on the boolean region select builder  
        
        Signature ``AppendOneRegionTracker()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.RegionTracker` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def AssignTargets(self, targets: 'list[NXOpen.TaggedObject]') -> None:
        """
        Assigns the targets to be used for region selection 
        
        Signature ``AssignTargets(targets)`` 
        
        :param targets: 
        :type targets: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def NotifyBodiesHaveChanged(self, bodySelectionList: NXOpen.ScCollector) -> None:
        """
        Notify that the bodies have changed 
        
        Signature ``NotifyBodiesHaveChanged(bodySelectionList)`` 
        
        :param bodySelectionList: 
        :type bodySelectionList: :py:class:`NXOpen.ScCollector` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def ClearRegions(self) -> None:
        """
        Clears all preview regions and the current region trackers 
        
        Signature ``ClearRegions()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def ClearAllRegionTrackers(self) -> None:
        """
        Clears all region trackers currently registered on the feature 
        
        Signature ``ClearAllRegionTrackers()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    KeepRemoveTargetMethod: BooleanRegionSelectKeepRemoveOption = ...
    """
    Returns or sets  the boolean region to keep/remove method 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepRemoveTargetMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanRegionSelectKeepRemoveOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepRemoveTargetMethod`` 
    
    :param targetOption: 
    :type targetOption: :py:class:`NXOpen.GeometricUtilities.BooleanRegionSelectKeepRemoveOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    KeepRemoveToolMethod: BooleanRegionSelectKeepRemoveOption = ...
    """
    Returns or sets  the boolean region to keep/remove method 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepRemoveToolMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanRegionSelectKeepRemoveOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepRemoveToolMethod`` 
    
    :param toolOption: 
    :type toolOption: :py:class:`NXOpen.GeometricUtilities.BooleanRegionSelectKeepRemoveOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SelectMethod: BooleanRegionSelectSelectOption = ...
    """
    Returns or sets  the boolean region selection method method 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanRegionSelectSelectOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectMethod`` 
    
    :param selectOption: 
    :type selectOption: :py:class:`NXOpen.GeometricUtilities.BooleanRegionSelectSelectOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: BooleanRegionSelect = ...  # unknown typename


class RotationSetBuilder(NXOpen.TaggedObject, NXOpen.INXObject, IComponentBuilder):
    """
    Represents a  :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
    
    .. versionadded:: NX6.0.0
    """
    
    def ResetExtraData(self) -> None:
        """
        Resets rotation extra data.  
        
        For legacy reason, Rotation has to contain some extra data.
        When you try to reset the rotation, you not only need to reset the angular dimension 
        but also need to simultaneously call this API to reset the extra data. 
        
        Signature ``ResetExtraData()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> NXOpen.INXObject:
        """
        Finds the :py:class:`NXOpen.NXObject` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Journal identifier of the object  
        :type journalIdentifier: str 
        :returns: 
        :rtype: :py:class:`NXOpen.INXObject` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Print(self) -> None:
        """
        Prints a representation of this object to the system log file.  
        
        Signature ``Print()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetName(self, name: str) -> None:
        """
        Sets the custom name of the object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetName(name)`` 
        
        :param name: 
        :type name: str 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Location: OnPathDimensionBuilder = ...
    """
    Returns  the location on path 
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Value: NXOpen.Expression = ...
    """
    Returns  the value expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    JournalIdentifier: str = ...
    """
    Returns  the identifier that would be recorded in a journal for this object.  
    
    This may not be the same across different releases of the software. 
    
    <hr>
    
    Getter Method
    
    Signature ``JournalIdentifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    IsOccurrence: bool = ...
    """
    Returns  whether this object is an occurrence or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsOccurrence`` 
    
    :returns:  This object is an occurrence  
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Prototype: NXOpen.INXObject = ...
    """
    Returns  the prototype of this object if it is an occurrence.  
    
    <hr>
    
    Getter Method
    
    Signature ``Prototype`` 
    
    :returns:  The prototype of this object or null if this object is not an occurrence  
    :rtype: :py:class:`NXOpen.INXObject` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OwningComponent: NXOpen.Assemblies.Component = ...
    """
    Returns  the owning component, if this object is an occurrence.  
    
    <hr>
    
    Getter Method
    
    Signature ``OwningComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.Component` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OwningPart: NXOpen.BasePart = ...
    """
    Returns  the owning part of this object 
    
    <hr>
    
    Getter Method
    
    Signature ``OwningPart`` 
    
    :returns:  The owning part of this object or null if it does not have an owner  
    :rtype: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns  the custom name of the object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Null: RotationSetBuilder = ...  # unknown typename


class FaceSetDataCollection(NXOpen.TaggedObjectCollection):
    """
    This class contains the factory methods for creating an FaceSetData.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX8.5.0
       This class is never used and can be safely removed
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def Create(self, mFaceCollector: NXOpen.ScCollector, mReverseNormalFlag: bool) -> FaceSetData:
        """
        Creates an FaceSetData.  
        
        Signature ``Create(mFaceCollector, mReverseNormalFlag)`` 
        
        :param mFaceCollector:  the face set collector  
        :type mFaceCollector: :py:class:`NXOpen.ScCollector` 
        :param mReverseNormalFlag:  the face set reverse direction flag  
        :type mReverseNormalFlag: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.FaceSetData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class OmnicadManager():
    """
    Represents a manager for creating builder objects for OmniCAD Free Transformer   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX10.0.0
    """
    
    def CreateFtmFixedCurvesBuilder(self) -> FtmFixedCurvesBuilder:
        """
        Creates Free Transformer fixed curves builder.  
        
        Signature ``CreateFtmFixedCurvesBuilder()`` 
        
        :returns: :py:class:`FtmFixedCurvesBuilder` object object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    
    def CreateFtmTransformCurvesBuilder(self) -> FtmTransformCurvesBuilder:
        """
        Creates Free Transformer transform curves builder.  
        
        Signature ``CreateFtmTransformCurvesBuilder()`` 
        
        :returns: :py:class:`FtmTransformCurvesBuilder` object object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    
    def CreateFtmTransformPointsBuilder(self) -> FtmTransformPointsBuilder:
        """
        Creates Free Transformer transform points builder.  
        
        Signature ``CreateFtmTransformPointsBuilder()`` 
        
        :returns: :py:class:`FtmTransformPointsBuilder` object object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    


class SShapedLawBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a s-shaped law.  
    
    This class represents :py:class:`NXOpen.GeometricUtilities.LawBuilderType.SShaped <NXOpen.GeometricUtilities.LawBuilderType>` type
    of law in :py:class:`NXOpen.GeometricUtilities.LawBuilder`.
    Objects of class :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` are used
    as law nodes in :py:class:`NXOpen.GeometricUtilities.SShapedLawBuilder`. Spine
    definition in this class is mandatory. The law nodes at start and end of the spine are fixed.
    
    .. versionadded:: NX6.0.0
    """
    
    def UpdateSpine(self) -> None:
        """
        Update the builder based on current spine 
        
        Signature ``UpdateSpine()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndNode: OnPathDimWithValueBuilder = ...
    """
    Returns  the end node 
    
    <hr>
    
    Getter Method
    
    Signature ``EndNode`` 
    
    :returns:  law node  
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    SlopeNode: OnPathDimWithValueBuilder = ...
    """
    Returns  the slope node 
    
    <hr>
    
    Getter Method
    
    Signature ``SlopeNode`` 
    
    :returns:  law node  
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Spine: NXOpen.Section = ...
    """
    Returns  the Spine 
    
    <hr>
    
    Getter Method
    
    Signature ``Spine`` 
    
    :returns:  Section object representing spine  
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    StartNode: OnPathDimWithValueBuilder = ...
    """
    Returns  the start node 
    
    <hr>
    
    Getter Method
    
    Signature ``StartNode`` 
    
    :returns:  law node  
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Null: SShapedLawBuilder = ...  # unknown typename


class PatternSpacingsListItem(NXOpen.TaggedObject, IComponentBuilder):
    """
    one pattern spacing in the spacings list   
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.PatternSpacingsList.CreatePatternSpacingsListItem`
    
    .. versionadded:: NX8.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    SpacingExpression: NXOpen.Expression = ...
    """
    Returns  the spacing expression 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SpacingOnPath: OnPathDimensionBuilder = ...
    """
    Returns  the spacing :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacingOnPath`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PatternSpacingsListItem = ...  # unknown typename


class TrimCurveBoundingObjectBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[TrimCurveBoundingObjectBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: TrimCurveBoundingObjectBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: TrimCurveBoundingObjectBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> TrimCurveBoundingObjectBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TrimCurveBoundingObjectBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TrimCurveBoundingObjectBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[TrimCurveBoundingObjectBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[TrimCurveBoundingObjectBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: TrimCurveBoundingObjectBuilder, object2: TrimCurveBoundingObjectBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: TrimCurveBoundingObjectBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TrimCurveBoundingObjectBuilderList = ...  # unknown typename


class CurveExtendDataLimitOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveExtendDataLimitOptions():
    """
    Represents the curve extend options for associative basic curves
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Value", "Value"
       "AtPoint", "At Point"
       "UntilSelected", "Until Selected"
    """
    Value = 0  # CurveExtendDataLimitOptionsMemberType
    AtPoint = 1  # CurveExtendDataLimitOptionsMemberType
    UntilSelected = 2  # CurveExtendDataLimitOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveExtendData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.CurveExtendData`   
    
    .. versionadded:: NX5.0.0
    """
    
    class LimitOptions():
        """
        Represents the curve extend options for associative basic curves
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Value", "Value"
           "AtPoint", "At Point"
           "UntilSelected", "Until Selected"
        """
        Value = 0  # CurveExtendDataLimitOptionsMemberType
        AtPoint = 1  # CurveExtendDataLimitOptionsMemberType
        UntilSelected = 2  # CurveExtendDataLimitOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Distance: NXOpen.Expression = ...
    """
    Returns  the distance 
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    LimitOption: CurveExtendDataLimitOptions = ...
    """
    Returns or sets  the limit option 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveExtendDataLimitOptions` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitOption`` 
    
    :param limitOption: 
    :type limitOption: :py:class:`NXOpen.GeometricUtilities.CurveExtendDataLimitOptions` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    UntilSelectedObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the until selected object 
    
    <hr>
    
    Getter Method
    
    Signature ``UntilSelectedObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: CurveExtendData = ...  # unknown typename


class ConvertFeatureGroupsToDesignGroupsBuilderConversionSchemeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConvertFeatureGroupsToDesignGroupsBuilderConversionScheme():
    """
    Conversion Scheme for Feature Groups 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ConvertFeatureGrouptoDesignGroup", " - "
       "EmbedDesignGroupinsideFeatureGroup", " - "
       "EmbedFeatureGroupinsideDesignGroup", " - "
    """
    ConvertFeatureGrouptoDesignGroup = 0  # ConvertFeatureGroupsToDesignGroupsBuilderConversionSchemeMemberType
    EmbedDesignGroupinsideFeatureGroup = 1  # ConvertFeatureGroupsToDesignGroupsBuilderConversionSchemeMemberType
    EmbedFeatureGroupinsideDesignGroup = 2  # ConvertFeatureGroupsToDesignGroupsBuilderConversionSchemeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConvertFeatureGroupsToDesignGroupsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ConvertFeatureGroupsToDesignGroupsBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.FeatureCollection.CreateConvertFeatureGroupsToDesignGroupsBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class ConversionScheme():
        """
        Conversion Scheme for Feature Groups 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ConvertFeatureGrouptoDesignGroup", " - "
           "EmbedDesignGroupinsideFeatureGroup", " - "
           "EmbedFeatureGroupinsideDesignGroup", " - "
        """
        ConvertFeatureGrouptoDesignGroup = 0  # ConvertFeatureGroupsToDesignGroupsBuilderConversionSchemeMemberType
        EmbedDesignGroupinsideFeatureGroup = 1  # ConvertFeatureGroupsToDesignGroupsBuilderConversionSchemeMemberType
        EmbedFeatureGroupinsideDesignGroup = 2  # ConvertFeatureGroupsToDesignGroupsBuilderConversionSchemeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AnalyzePart(self) -> None:
        """
        Analyzes the part for Feature Group to Design Group conversion 
        
        Signature ``AnalyzePart()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    Scheme: ConvertFeatureGroupsToDesignGroupsBuilderConversionScheme = ...
    """
    Returns or sets  the Conversion Scheme for Feature Group to Design Group conversion 
    
    <hr>
    
    Getter Method
    
    Signature ``Scheme`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ConvertFeatureGroupsToDesignGroupsBuilderConversionScheme` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scheme`` 
    
    :param scheme: 
    :type scheme: :py:class:`NXOpen.GeometricUtilities.ConvertFeatureGroupsToDesignGroupsBuilderConversionScheme` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: ConvertFeatureGroupsToDesignGroupsBuilder = ...  # unknown typename


class LocalUntrimManager():
    """
    Provides create builder methods for LocalUntrimBuilder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX9.0.0
    """
    
    def CreateBuilder(self) -> LocalUntrimBuilder:
        """
        Creates local untrim and extend builder.  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`LocalUntrimBuilder` object object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.LocalUntrimBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    


class SectionPlaneData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a Section Plane Data class
    This class acts like a container to hold the data needed to create a plane.  
    
    It provides the ability to define two points on a plane 
    
    .. versionadded:: NX7.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    PlaneNormal: NXOpen.Direction = ...
    """
    Returns or sets the normal of the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneNormal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneNormal`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    PlaneOrigin: NXOpen.Point = ...
    """
    Returns or sets the origin of the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneOrigin`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    PlanePoint1: NXOpen.Point = ...
    """
    Returns or sets the first point of the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``PlanePoint1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``PlanePoint1`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    PlanePoint2: NXOpen.Point = ...
    """
    Returns or sets the second point of the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``PlanePoint2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``PlanePoint2`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    Null: SectionPlaneData = ...  # unknown typename


class SnipIntoPatchesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.SnipIntoPatchesBuilder` builder.  
    
    No object is returned by this builder.
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.CAMDataPrepManager.CreateSnipIntoPatchesBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    HideOriginal   0 
    =============  =====
    
    .. versionadded:: NX9.0.0
    """
    
    def SnipSurfaceIntoPatches(self, targetFace: NXOpen.Face) -> None:
        """
        Snip the selected surface into patches 
        
        Signature ``SnipSurfaceIntoPatches(targetFace)`` 
        
        :param targetFace: 
        :type targetFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateRegionsPreview(self, targetFace: NXOpen.Face, allCurves: 'list[NXOpen.Curve]') -> None:
        """
        Create region preview 
        
        Signature ``CreateRegionsPreview(targetFace, allCurves)`` 
        
        :param targetFace: 
        :type targetFace: :py:class:`NXOpen.Face` 
        :param allCurves: 
        :type allCurves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteInternalPatch(self, targetFace: NXOpen.Face, allCurves: 'list[NXOpen.Curve]') -> None:
        """
        Delete internal patch from the selected surface 
        
        Signature ``DeleteInternalPatch(targetFace, allCurves)`` 
        
        :param targetFace: 
        :type targetFace: :py:class:`NXOpen.Face` 
        :param allCurves: 
        :type allCurves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetExtractFace(self) -> NXOpen.Face:
        """
        Get extracted face  
        
        Signature ``GetExtractFace()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIsoCurves(self, targetFace: NXOpen.Face) -> 'list[NXOpen.Curve]':
        """
        Get the generated isoparametric curves on the selected surface 
        
        Signature ``GetIsoCurves(targetFace)`` 
        
        :param targetFace: 
        :type targetFace: :py:class:`NXOpen.Face` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteExtractFace(self, extractFace: NXOpen.Face) -> None:
        """
        Delete the extracted face 
        
        Signature ``DeleteExtractFace(extractFace)`` 
        
        :param extractFace: 
        :type extractFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteIsoCurve(self, allCurves: 'list[NXOpen.Curve]') -> None:
        """
        Delete the isoparametric curve generated on the selected surface 
        
        Signature ``DeleteIsoCurve(allCurves)`` 
        
        :param allCurves: 
        :type allCurves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Face: NXOpen.SelectFace = ...
    """
    Returns  the face to snip into patches 
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HideOriginal: bool = ...
    """
    Returns or sets  the option indicating to hide or show the original.  
    
    If True it is hidden,else it is shown 
    
    <hr>
    
    Getter Method
    
    Signature ``HideOriginal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HideOriginal`` 
    
    :param hideOriginal: 
    :type hideOriginal: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    Region: NXOpen.RegionPointList = ...
    """
    Returns  the region to delete from the surface 
    
    <hr>
    
    Getter Method
    
    Signature ``Region`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.RegionPointList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SnipIntoPatchesBuilder = ...  # unknown typename


class ContinuityContinuityTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ContinuityContinuityTypes():
    """
    Continuity type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "G0", "G0 continuity"
       "G1", "G1 continuity"
       "G2", "G2 continuity"
       "G3", "G3 continuity"
       "Free", "Free continuity"
    """
    G0 = 0  # ContinuityContinuityTypesMemberType
    G1 = 1  # ContinuityContinuityTypesMemberType
    G2 = 2  # ContinuityContinuityTypesMemberType
    G3 = 3  # ContinuityContinuityTypesMemberType
    Free = 4  # ContinuityContinuityTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Continuity(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.Continuity`
    Allows user to specify continuity constraint surface construction.  
    
    .. versionadded:: NX5.0.0
    """
    
    class ContinuityTypes():
        """
        Continuity type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "G0", "G0 continuity"
           "G1", "G1 continuity"
           "G2", "G2 continuity"
           "G3", "G3 continuity"
           "Free", "Free continuity"
        """
        G0 = 0  # ContinuityContinuityTypesMemberType
        G1 = 1  # ContinuityContinuityTypesMemberType
        G2 = 2  # ContinuityContinuityTypesMemberType
        G3 = 3  # ContinuityContinuityTypesMemberType
        Free = 4  # ContinuityContinuityTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ConstraintFaces: NXOpen.ScCollector = ...
    """
    Returns  the constraint face collector.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ContinuityType: ContinuityContinuityTypes = ...
    """
    Returns or sets  the continuity type.  
    
    If continuity = G0, then constraint face selector is disabled.
    
    <hr>
    
    Getter Method
    
    Signature ``ContinuityType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContinuityType`` 
    
    :param continuityType: 
    :type continuityType: :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    IsFixed: bool = ...
    """
    Returns or sets  the value indicating if a continuity constraint is of fixed type.  
    
    This flag is valid for 
    :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes.G1 <NXOpen.GeometricUtilities.ContinuityContinuityTypes>`,
    :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes.G2 <NXOpen.GeometricUtilities.ContinuityContinuityTypes>`,
    :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes.G3 <NXOpen.GeometricUtilities.ContinuityContinuityTypes>`
    types only. 
    
    <hr>
    
    Getter Method
    
    Signature ``IsFixed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsFixed`` 
    
    :param isFixed: 
    :type isFixed: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: Continuity = ...  # unknown typename


class RadiusMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RadiusMethod():
    """
    This enum represents the radius options 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "Constant"
       "Law", "Control by law"
       "Tangency", "Control by tangency"
    """
    Constant = 0  # RadiusMethodMemberType
    Law = 1  # RadiusMethodMemberType
    Tangency = 2  # RadiusMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeometryLocationDataCollection(NXOpen.TaggedObjectCollection):
    """
    This class contains the factory methods for creating GeometryLocationData.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGeometryLocationData(self) -> GeometryLocationData:
        """
        Creates geometry location data.  
        
        Signature ``CreateGeometryLocationData()`` 
        
        :returns:  Resultant geometry location data  
        :rtype: :py:class:`NXOpen.GeometricUtilities.GeometryLocationData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class CurveLengthData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents an CurveLength data.  
    
    .. versionadded:: NX4.0.0
    """
    
    def SetStartDistance(self, startDistance: str) -> None:
        """
        Set start distance 
        
        Signature ``SetStartDistance(startDistance)`` 
        
        :param startDistance:  Start distance  
        :type startDistance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetEndDistance(self, endDistance: str) -> None:
        """
        Set end distance 
        
        Signature ``SetEndDistance(endDistance)`` 
        
        :param endDistance:  End distance  
        :type endDistance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetTotalLength(self, totalLength: str) -> None:
        """
        Set total length
        
        Signature ``SetTotalLength(totalLength)`` 
        
        :param totalLength:  Total Length  
        :type totalLength: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndDistance: NXOpen.Expression = ...
    """
    Returns  the end distance 
    
    <hr>
    
    Getter Method
    
    Signature ``EndDistance`` 
    
    :returns:  End distance  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ExtensionDirection: ExtensionDirection = ...
    """
    Returns or sets  the extension direction
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionDirection`` 
    
    :returns:  CurveLength extension direction  
    :rtype: :py:class:`NXOpen.GeometricUtilities.ExtensionDirection` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionDirection`` 
    
    :param extensionDirection:  CurveLength extension direction  
    :type extensionDirection: :py:class:`NXOpen.GeometricUtilities.ExtensionDirection` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ExtensionMethod: ExtensionMethod = ...
    """
    Returns or sets  the total or incremental extension method 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionMethod`` 
    
    :returns:  CurveLength extension method  
    :rtype: :py:class:`NXOpen.GeometricUtilities.ExtensionMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionMethod`` 
    
    :param extensionMethod:  CurveLength extension method  
    :type extensionMethod: :py:class:`NXOpen.GeometricUtilities.ExtensionMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ExtensionSide: ExtensionSide = ...
    """
    Returns or sets  the extension side option 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionSide`` 
    
    :returns:  CurveLength extension_side  
    :rtype: :py:class:`NXOpen.GeometricUtilities.ExtensionSide` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionSide`` 
    
    :param extensionSide:  CurveLength both ends  
    :type extensionSide: :py:class:`NXOpen.GeometricUtilities.ExtensionSide` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartDistance: NXOpen.Expression = ...
    """
    Returns  the start distance 
    
    <hr>
    
    Getter Method
    
    Signature ``StartDistance`` 
    
    :returns:  Start distance  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    TotalLength: NXOpen.Expression = ...
    """
    Returns  the total length
    
    <hr>
    
    Getter Method
    
    Signature ``TotalLength`` 
    
    :returns:  Total length  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: CurveLengthData = ...  # unknown typename


class Limits(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a limits data.  
    
    Inputs to this class can be convergent objects.
    
    .. versionadded:: NX3.0.1
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndExtend: Extend = ...
    """
    Returns  the end extend builder 
    
    <hr>
    
    Getter Method
    
    Signature ``EndExtend`` 
    
    :returns:  Extend object at the end  
    :rtype: :py:class:`NXOpen.GeometricUtilities.Extend` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: None.
    """
    StartExtend: Extend = ...
    """
    Returns  the start extend builder 
    
    <hr>
    
    Getter Method
    
    Signature ``StartExtend`` 
    
    :returns:  Extend object at the start  
    :rtype: :py:class:`NXOpen.GeometricUtilities.Extend` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: None.
    """
    SymmetricOption: bool = ...
    """
    Returns or sets  the symmetric option
    
    <hr>
    
    Getter Method
    
    Signature ``SymmetricOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``SymmetricOption`` 
    
    :param symmetricOption: 
    :type symmetricOption: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: Limits = ...  # unknown typename


class PathLimits(Limits):
    """
    Represents a path limits data.  
    
    .. versionadded:: NX5.0.0
    """
    Null: PathLimits = ...  # unknown typename


class ExtensionDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExtensionDirection():
    """
    This enum represents extension direction 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Natural", "Extension Direction Natural"
       "Linear", "Extension Direction Circular"
       "Circular", "Extension Direction Linear"
    """
    Natural = 0  # ExtensionDirectionMemberType
    Linear = 1  # ExtensionDirectionMemberType
    Circular = 2  # ExtensionDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FaceSetOffsetCollection(NXOpen.TaggedObjectCollection):
    """
    This class contains the factory methods for creating an face set offset.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFaceSet(self, offset: str, faceCollector: NXOpen.ScCollector, flipValue: bool, index: int) -> FaceSetOffset:
        """
        Creates an offset face set.  
        
        Signature ``CreateFaceSet(offset, faceCollector, flipValue, index)`` 
        
        :param offset:  Initial expression string for offset distance 
        :type offset: str 
        :param faceCollector:  Smart collector for the face set  
        :type faceCollector: :py:class:`NXOpen.ScCollector` 
        :param flipValue:  Whether the faceset should be flipped or not  
        :type flipValue: bool 
        :param index:  Index of face set in the list  
        :type index: int 
        :returns:  Resultant offset face set  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def CreateEmptyFaceSet(self) -> FaceSetOffset:
        """
        Creates an empty offset face set, with all parameters set to 0 or None  
        
        Signature ``CreateEmptyFaceSet()`` 
        
        :returns:  Resultant offset face set  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class HelixPatternDirectionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HelixPatternDirectionTypes():
    """
    This defines helix direction method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Righthand", "Right hand orientation."
       "Lefthand", "Left hand orientation."
    """
    Righthand = 0  # HelixPatternDirectionTypesMemberType
    Lefthand = 1  # HelixPatternDirectionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HelixPatternSizeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HelixPatternSizeOptions():
    """
    defines Helix size options for Helix type pattern.   
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CountAngleDistance", "use Count, Angle, Distance to define a Helix"
       "CountHelixPitchAndTurns", "use Count, Helix Pitch, Turns to define a Helix"
       "CountHelixPitchAndSpan", "use Count, Helix Pitch, Span to define a Helix"
       "AngleHelixPitchAndTurns", "use Angle, Helix Pitch, Turns to define a Helix"
       "AngleHelixPitchAndSpan", "use Angle, Helix Pitch, Span to define a Helix"
    """
    CountAngleDistance = 0  # HelixPatternSizeOptionsMemberType
    CountHelixPitchAndTurns = 1  # HelixPatternSizeOptionsMemberType
    CountHelixPitchAndSpan = 2  # HelixPatternSizeOptionsMemberType
    AngleHelixPitchAndTurns = 3  # HelixPatternSizeOptionsMemberType
    AngleHelixPitchAndSpan = 4  # HelixPatternSizeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HelixPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the Helix pattern definition.  
    
    Allows specification along
    both the angular and radial directions. 
    
    .. versionadded:: NX9.0.0
    """
    
    class DirectionTypes():
        """
        This defines helix direction method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Righthand", "Right hand orientation."
           "Lefthand", "Left hand orientation."
        """
        Righthand = 0  # HelixPatternDirectionTypesMemberType
        Lefthand = 1  # HelixPatternDirectionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SizeOptions():
        """
        defines Helix size options for Helix type pattern.   
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CountAngleDistance", "use Count, Angle, Distance to define a Helix"
           "CountHelixPitchAndTurns", "use Count, Helix Pitch, Turns to define a Helix"
           "CountHelixPitchAndSpan", "use Count, Helix Pitch, Span to define a Helix"
           "AngleHelixPitchAndTurns", "use Angle, Helix Pitch, Turns to define a Helix"
           "AngleHelixPitchAndSpan", "use Angle, Helix Pitch, Span to define a Helix"
        """
        CountAngleDistance = 0  # HelixPatternSizeOptionsMemberType
        CountHelixPitchAndTurns = 1  # HelixPatternSizeOptionsMemberType
        CountHelixPitchAndSpan = 2  # HelixPatternSizeOptionsMemberType
        AngleHelixPitchAndTurns = 3  # HelixPatternSizeOptionsMemberType
        AngleHelixPitchAndSpan = 4  # HelixPatternSizeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnglePitch: NXOpen.Expression = ...
    """
    Returns  the angle pitch expression for the Helix type pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``AnglePitch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CountOfInstances: NXOpen.Expression = ...
    """
    Returns  the count of instances for the Helix type pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``CountOfInstances`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DirectionType: HelixPatternDirectionTypes = ...
    """
    Returns or sets  the type of helix direction method 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.HelixPatternDirectionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param directionType: 
    :type directionType: :py:class:`NXOpen.GeometricUtilities.HelixPatternDirectionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DistancePitch: NXOpen.Expression = ...
    """
    Returns  the distance pitch expression for the Helix type pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``DistancePitch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HelixPitch: NXOpen.Expression = ...
    """
    Returns  the helix pitch expression for the Helix type pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``HelixPitch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HelixSpan: NXOpen.Expression = ...
    """
    Returns  the helix span expression for the Helix type pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``HelixSpan`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    NumberOfTurns: NXOpen.Expression = ...
    """
    Returns  the number of turns for the Helix type pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfTurns`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RotationAxis: NXOpen.Axis = ...
    """
    Returns or sets  the rotation axis for the pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationAxis`` 
    
    :param rotationAxis: 
    :type rotationAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SizeOption: HelixPatternSizeOptions = ...
    """
    Returns or sets  the Helix size option 
    
    <hr>
    
    Getter Method
    
    Signature ``SizeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.HelixPatternSizeOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SizeOption`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.GeometricUtilities.HelixPatternSizeOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HelixPattern = ...  # unknown typename


class SmartVolumeProfileBuilderCloseProfileRuleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SmartVolumeProfileBuilderCloseProfileRuleType():
    """
    the type of profile closures to be performed 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fci", "Extends the open profile to form the first complete intersection with the target."
       "Lci", "Extends the open profile to form the last complete intersection with the target."
       "Cci", "For subtract boolean operation, extends the open profile to form the last complete intersection if the profile lies outside the target excluding the coincident portion. Otherwise, use the first complete intersection."
    """
    Fci = 0  # SmartVolumeProfileBuilderCloseProfileRuleTypeMemberType
    Lci = 1  # SmartVolumeProfileBuilderCloseProfileRuleTypeMemberType
    Cci = 2  # SmartVolumeProfileBuilderCloseProfileRuleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SmartVolumeProfileBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class contains the options for automatically closing the profile to surrounding model geometry.  
    
    It is instantiated in section based sweep operators like extrude and revolve.
    
    .. versionadded:: NX8.5.0
    """
    
    class CloseProfileRuleType():
        """
        the type of profile closures to be performed 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fci", "Extends the open profile to form the first complete intersection with the target."
           "Lci", "Extends the open profile to form the last complete intersection with the target."
           "Cci", "For subtract boolean operation, extends the open profile to form the last complete intersection if the profile lies outside the target excluding the coincident portion. Otherwise, use the first complete intersection."
        """
        Fci = 0  # SmartVolumeProfileBuilderCloseProfileRuleTypeMemberType
        Lci = 1  # SmartVolumeProfileBuilderCloseProfileRuleTypeMemberType
        Cci = 2  # SmartVolumeProfileBuilderCloseProfileRuleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CloseProfileRule: SmartVolumeProfileBuilderCloseProfileRuleType = ...
    """
    Returns or sets  the option defines how to extend the open profile to form a proper intersection with the target body.  
    
    <hr>
    
    Getter Method
    
    Signature ``CloseProfileRule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SmartVolumeProfileBuilderCloseProfileRuleType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CloseProfileRule`` 
    
    :param closeProfileRule:   the close profile rule.  
    :type closeProfileRule: :py:class:`NXOpen.GeometricUtilities.SmartVolumeProfileBuilderCloseProfileRuleType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OpenProfileSmartVolumeOption: bool = ...
    """
    Returns or sets  the option for enabling open profile smart volume.  
    
    When this option is enabled, extends the tool volume along open end points of the profile to find
    closure with the target body.
    
    <hr>
    
    Getter Method
    
    Signature ``OpenProfileSmartVolumeOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OpenProfileSmartVolumeOption`` 
    
    :param openProfileSmartVolumeOption:   If true, enable open profile smart volume.  
    :type openProfileSmartVolumeOption: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: SmartVolumeProfileBuilder = ...  # unknown typename


class DegreesAndSegmentsOrPatchesBuilder(NXOpen.TaggedObject, NXOpen.INXObject, IComponentBuilder):
    """
    the DegreesAndSegmentsOrPatches builder   
    
    .. versionadded:: NX6.0.0
    """
    
    def FindObject(self, journalIdentifier: str) -> NXOpen.INXObject:
        """
        Finds the :py:class:`NXOpen.NXObject` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Journal identifier of the object  
        :type journalIdentifier: str 
        :returns: 
        :rtype: :py:class:`NXOpen.INXObject` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Print(self) -> None:
        """
        Prints a representation of this object to the system log file.  
        
        Signature ``Print()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetName(self, name: str) -> None:
        """
        Sets the custom name of the object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetName(name)`` 
        
        :param name: 
        :type name: str 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Degree: int = ...
    """
    Returns or sets  the degree 
    
    <hr>
    
    Getter Method
    
    Signature ``Degree`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``Degree`` 
    
    :param degree: 
    :type degree: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    SegmentsOrPatches: int = ...
    """
    Returns or sets  the patches 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentsOrPatches`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``SegmentsOrPatches`` 
    
    :param segmentsOrPatches: 
    :type segmentsOrPatches: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    UDegree: int = ...
    """
    Returns or sets  the u degree 
    
    <hr>
    
    Getter Method
    
    Signature ``UDegree`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``UDegree`` 
    
    :param uDegree: 
    :type uDegree: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    UPatches: int = ...
    """
    Returns or sets  the u patches 
    
    <hr>
    
    Getter Method
    
    Signature ``UPatches`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``UPatches`` 
    
    :param uPatches: 
    :type uPatches: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    VDegree: int = ...
    """
    Returns or sets  the v degree 
    
    <hr>
    
    Getter Method
    
    Signature ``VDegree`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``VDegree`` 
    
    :param vDegree: 
    :type vDegree: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    VPatches: int = ...
    """
    Returns or sets  the v patches 
    
    <hr>
    
    Getter Method
    
    Signature ``VPatches`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``VPatches`` 
    
    :param vPatches: 
    :type vPatches: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    JournalIdentifier: str = ...
    """
    Returns  the identifier that would be recorded in a journal for this object.  
    
    This may not be the same across different releases of the software. 
    
    <hr>
    
    Getter Method
    
    Signature ``JournalIdentifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    IsOccurrence: bool = ...
    """
    Returns  whether this object is an occurrence or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsOccurrence`` 
    
    :returns:  This object is an occurrence  
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Prototype: NXOpen.INXObject = ...
    """
    Returns  the prototype of this object if it is an occurrence.  
    
    <hr>
    
    Getter Method
    
    Signature ``Prototype`` 
    
    :returns:  The prototype of this object or null if this object is not an occurrence  
    :rtype: :py:class:`NXOpen.INXObject` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OwningComponent: NXOpen.Assemblies.Component = ...
    """
    Returns  the owning component, if this object is an occurrence.  
    
    <hr>
    
    Getter Method
    
    Signature ``OwningComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.Component` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OwningPart: NXOpen.BasePart = ...
    """
    Returns  the owning part of this object 
    
    <hr>
    
    Getter Method
    
    Signature ``OwningPart`` 
    
    :returns:  The owning part of this object or null if it does not have an owner  
    :rtype: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns  the custom name of the object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Null: DegreesAndSegmentsOrPatchesBuilder = ...  # unknown typename


class BlendStopshortBuilderChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlendStopshortBuilderChoices():
    """
    This enum represents the choice for stopshort option. The default choice is 'At Distance'. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AtDistance", "Distance"
       "AtIntersection", "Intersection"
    """
    AtDistance = 0  # BlendStopshortBuilderChoicesMemberType
    AtIntersection = 1  # BlendStopshortBuilderChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlendStopshortBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class Choices():
        """
        This enum represents the choice for stopshort option. The default choice is 'At Distance'. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AtDistance", "Distance"
           "AtIntersection", "Intersection"
        """
        AtDistance = 0  # BlendStopshortBuilderChoicesMemberType
        AtIntersection = 1  # BlendStopshortBuilderChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Destroy(self) -> None:
        """
        Destructor for :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilder` 
        
        Signature ``Destroy()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def FlipPath(self) -> None:
        """
        Flip the builder path for :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilder` 
        
        Signature ``FlipPath()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Choice: BlendStopshortBuilderChoices = ...
    """
    Returns or sets  the Stopshort option choice.  
    
    Choose from 'At Distance' or 'At Intersection'. 
    
    <hr>
    
    Getter Method
    
    Signature ``Choice`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilderChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Choice`` 
    
    :param mChoice: 
    :type mChoice: :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilderChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OnPath: OnPathDimensionBuilder = ...
    """
    Returns  the :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilder` subobject.  
    
    <hr>
    
    Getter Method
    
    Signature ``OnPath`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: BlendStopshortBuilder = ...  # unknown typename


class CurveRangeBuilderAnchorPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveRangeBuilderAnchorPositionType():
    """
    Represents the anchor position type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", "Anchor at the start of the curve"
       "Center", "Anchor at the center of the curve"
       "End", "Anchor at the end of the curve"
    """
    Start = 0  # CurveRangeBuilderAnchorPositionTypeMemberType
    Center = 1  # CurveRangeBuilderAnchorPositionTypeMemberType
    End = 2  # CurveRangeBuilderAnchorPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveRangeBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the curve range and anchor builder   
    
    .. versionadded:: NX6.0.0
    """
    
    class AnchorPositionType():
        """
        Represents the anchor position type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Start", "Anchor at the start of the curve"
           "Center", "Anchor at the center of the curve"
           "End", "Anchor at the end of the curve"
        """
        Start = 0  # CurveRangeBuilderAnchorPositionTypeMemberType
        Center = 1  # CurveRangeBuilderAnchorPositionTypeMemberType
        End = 2  # CurveRangeBuilderAnchorPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnchorPosition: CurveRangeBuilderAnchorPositionType = ...
    """
    Returns or sets  the anchor position 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveRangeBuilderAnchorPositionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPosition`` 
    
    :param anchorPosition: 
    :type anchorPosition: :py:class:`NXOpen.GeometricUtilities.CurveRangeBuilderAnchorPositionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Center: OnPathDimensionBuilder = ...
    """
    Returns  the center 
    
    <hr>
    
    Getter Method
    
    Signature ``Center`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    End: OnPathDimensionBuilder = ...
    """
    Returns  the end 
    
    <hr>
    
    Getter Method
    
    Signature ``End`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Start: OnPathDimensionBuilder = ...
    """
    Returns  the start 
    
    <hr>
    
    Getter Method
    
    Signature ``Start`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CurveRangeBuilder = ...  # unknown typename


class PatternSpacingSpacingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternSpacingSpacingType():
    """
    defines the type of spacing instances can have within a pattern. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Offset", "Specify distance from the origin of one instance to the origin of the next instance."
       "Span", "Specify a distance for which all instances should occupy."
       "PitchAndSpan", "Specify distance between instances and distance for all instances, number of copies is calculated."
       "Pitch", "This is for pattern fill case. Count is calculated based on the pitch and fill boundary box."
       "List", "Specify offsets with a list."
       "PolygonCountPerSide", "This is for Polygon type. Specify number of count per side."
       "PolygonPitchAlongSide", "This is for Polygon type. Specify a pitch distance along one side."
    """
    Offset = 0  # PatternSpacingSpacingTypeMemberType
    Span = 1  # PatternSpacingSpacingTypeMemberType
    PitchAndSpan = 2  # PatternSpacingSpacingTypeMemberType
    Pitch = 3  # PatternSpacingSpacingTypeMemberType
    List = 4  # PatternSpacingSpacingTypeMemberType
    PolygonCountPerSide = 5  # PatternSpacingSpacingTypeMemberType
    PolygonPitchAlongSide = 6  # PatternSpacingSpacingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternSpacing(NXOpen.TaggedObject, IComponentBuilder):
    """
    defines the various ways pattern instances can be 
    spaced within the pattern, particularly in the context of the
    PatternDefinition class.  
    
    .. versionadded:: NX7.5.0
    """
    
    class SpacingType():
        """
        defines the type of spacing instances can have within a pattern. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Offset", "Specify distance from the origin of one instance to the origin of the next instance."
           "Span", "Specify a distance for which all instances should occupy."
           "PitchAndSpan", "Specify distance between instances and distance for all instances, number of copies is calculated."
           "Pitch", "This is for pattern fill case. Count is calculated based on the pitch and fill boundary box."
           "List", "Specify offsets with a list."
           "PolygonCountPerSide", "This is for Polygon type. Specify number of count per side."
           "PolygonPitchAlongSide", "This is for Polygon type. Specify a pitch distance along one side."
        """
        Offset = 0  # PatternSpacingSpacingTypeMemberType
        Span = 1  # PatternSpacingSpacingTypeMemberType
        PitchAndSpan = 2  # PatternSpacingSpacingTypeMemberType
        Pitch = 3  # PatternSpacingSpacingTypeMemberType
        List = 4  # PatternSpacingSpacingTypeMemberType
        PolygonCountPerSide = 5  # PatternSpacingSpacingTypeMemberType
        PolygonPitchAlongSide = 6  # PatternSpacingSpacingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    NCopies: NXOpen.Expression = ...
    """
    Returns  the number of copies the pattern will generated in this direction 
    
    <hr>
    
    Getter Method
    
    Signature ``NCopies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SpaceType: PatternSpacingSpacingType = ...
    """
    Returns or sets  the type of spacing to be used by the pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``SpaceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternSpacingSpacingType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpaceType`` 
    
    :param spaceType: 
    :type spaceType: :py:class:`NXOpen.GeometricUtilities.PatternSpacingSpacingType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SpacingsList: PatternSpacingsList = ...
    """
    Returns  the list of spacings (Expression or OnPathDimBuilder) to be used in this direction 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacingsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PatternSpacing = ...  # unknown typename


class AngularPatternSpacingUsePitchOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AngularPatternSpacingUsePitchOptions():
    """
    This defines Use Pitch As options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angle", "angle is pitch value"
       "Distance", "distance is pitch value."
    """
    Angle = 0  # AngularPatternSpacingUsePitchOptionsMemberType
    Distance = 1  # AngularPatternSpacingUsePitchOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AngularPatternSpacing(PatternSpacing):
    """
    defines the various ways pattern instances can be 
    spaced within the pattern, particularly in the context of the
    PatternDefinition class.  
    
    .. versionadded:: NX7.5.0
    """
    
    class UsePitchOptions():
        """
        This defines Use Pitch As options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angle", "angle is pitch value"
           "Distance", "distance is pitch value."
        """
        Angle = 0  # AngularPatternSpacingUsePitchOptionsMemberType
        Distance = 1  # AngularPatternSpacingUsePitchOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    PitchAngle: NXOpen.Expression = ...
    """
    Returns  the angle for the spacing of the pattern from one instance to the next.  
    
    <hr>
    
    Getter Method
    
    Signature ``PitchAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PitchDistance: NXOpen.Expression = ...
    """
    Returns  the circumfrential distance for the spacing of the pattern from one instance to the next.  
    
    <hr>
    
    Getter Method
    
    Signature ``PitchDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SpanAngle: NXOpen.Expression = ...
    """
    Returns  the angle for the spacing of the pattern for the entire pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpanAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UsePitchOption: AngularPatternSpacingUsePitchOptions = ...
    """
    Returns or sets  the switch to use Pitch Distance or Pitch Angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePitchOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AngularPatternSpacingUsePitchOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePitchOption`` 
    
    :param usePitchOption: 
    :type usePitchOption: :py:class:`NXOpen.GeometricUtilities.AngularPatternSpacingUsePitchOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: AngularPatternSpacing = ...  # unknown typename


class CAMDataPrepManager():
    """
    Contains the create functions for builders.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX9.0.0
    """
    
    def CreateMatchSurfaceBuilder(self) -> MatchSurfaceBuilder:
        """
        Creates a :py:class:`NXOpen.GeometricUtilities.MatchSurfaceBuilder`  
        
        Signature ``CreateMatchSurfaceBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.MatchSurfaceBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateReduceSurfaceRadiusBuilder(self) -> ReduceSurfaceRadiusBuilder:
        """
        Creates a :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusBuilder`  
        
        Signature ``CreateReduceSurfaceRadiusBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateReduceSurfaceRadiusFaceGroupBuilder(self) -> ReduceSurfaceRadiusFaceGroupBuilder:
        """
        Creates a :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder`  
        
        Signature ``CreateReduceSurfaceRadiusFaceGroupBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSnipIntoPatchesBuilder(self) -> SnipIntoPatchesBuilder:
        """
        Creates a :py:class:`NXOpen.GeometricUtilities.SnipIntoPatchesBuilder`  
        
        Signature ``CreateSnipIntoPatchesBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.SnipIntoPatchesBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class OnPathDimWithValueBuilder(NXOpen.TaggedObject, NXOpen.INXObject, IComponentBuilder):
    """
    Represents a  :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
    
    .. versionadded:: NX5.0.0
    """
    
    def InheritLocation(self, sourceBuilder: OnPathDimWithValueBuilder) -> None:
        """
        Inherits location data of a :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` object 
        
        Signature ``InheritLocation(sourceBuilder)`` 
        
        :param sourceBuilder: 
        :type sourceBuilder: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def InheritValue(self, sourceBuilder: OnPathDimWithValueBuilder) -> None:
        """
        Inherits value of a :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` object 
        
        Signature ``InheritValue(sourceBuilder)`` 
        
        :param sourceBuilder: 
        :type sourceBuilder: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> NXOpen.INXObject:
        """
        Finds the :py:class:`NXOpen.NXObject` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Journal identifier of the object  
        :type journalIdentifier: str 
        :returns: 
        :rtype: :py:class:`NXOpen.INXObject` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Print(self) -> None:
        """
        Prints a representation of this object to the system log file.  
        
        Signature ``Print()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetName(self, name: str) -> None:
        """
        Sets the custom name of the object.  
        
        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
        If it is, the changes will be overridden when the part is updated. 
        
        Signature ``SetName(name)`` 
        
        :param name: 
        :type name: str 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Location: OnPathDimensionBuilder = ...
    """
    Returns  the location on path 
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Value: NXOpen.Expression = ...
    """
    Returns  the value expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    JournalIdentifier: str = ...
    """
    Returns  the identifier that would be recorded in a journal for this object.  
    
    This may not be the same across different releases of the software. 
    
    <hr>
    
    Getter Method
    
    Signature ``JournalIdentifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    IsOccurrence: bool = ...
    """
    Returns  whether this object is an occurrence or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsOccurrence`` 
    
    :returns:  This object is an occurrence  
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Prototype: NXOpen.INXObject = ...
    """
    Returns  the prototype of this object if it is an occurrence.  
    
    <hr>
    
    Getter Method
    
    Signature ``Prototype`` 
    
    :returns:  The prototype of this object or null if this object is not an occurrence  
    :rtype: :py:class:`NXOpen.INXObject` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OwningComponent: NXOpen.Assemblies.Component = ...
    """
    Returns  the owning component, if this object is an occurrence.  
    
    <hr>
    
    Getter Method
    
    Signature ``OwningComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.Component` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    OwningPart: NXOpen.BasePart = ...
    """
    Returns  the owning part of this object 
    
    <hr>
    
    Getter Method
    
    Signature ``OwningPart`` 
    
    :returns:  The owning part of this object or null if it does not have an owner  
    :rtype: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns  the custom name of the object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Null: OnPathDimWithValueBuilder = ...  # unknown typename


class ScalingSetBuilder(OnPathDimWithValueBuilder):
    """
    Represents a  :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
    
    .. versionadded:: NX6.0.0
    """
    ScalingValue: NXOpen.Expression = ...
    """
    Returns  the scaling value expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalingValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ScalingSetBuilder = ...  # unknown typename


class ExtendExtendTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExtendExtendType():
    """
    This enum represents the type of extend 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Value", " - "
       "UntilNext", " - "
       "UntilSelected", " - "
       "UntilExtended", " - "
       "ThroughAll", " - "
       "Symmetric", " - "
       "Percent", " - "
       "ArcLength", " - "
       "ThruPoint", " - "
    """
    Value = 0  # ExtendExtendTypeMemberType
    UntilNext = 1  # ExtendExtendTypeMemberType
    UntilSelected = 2  # ExtendExtendTypeMemberType
    UntilExtended = 3  # ExtendExtendTypeMemberType
    ThroughAll = 4  # ExtendExtendTypeMemberType
    Symmetric = 5  # ExtendExtendTypeMemberType
    Percent = 6  # ExtendExtendTypeMemberType
    ArcLength = 7  # ExtendExtendTypeMemberType
    ThruPoint = 8  # ExtendExtendTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Extend(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents an extend data.  
    
    Inputs to this class can be convergent objects.
    
    .. versionadded:: NX3.0.1
    """
    
    class ExtendType():
        """
        This enum represents the type of extend 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Value", " - "
           "UntilNext", " - "
           "UntilSelected", " - "
           "UntilExtended", " - "
           "ThroughAll", " - "
           "Symmetric", " - "
           "Percent", " - "
           "ArcLength", " - "
           "ThruPoint", " - "
        """
        Value = 0  # ExtendExtendTypeMemberType
        UntilNext = 1  # ExtendExtendTypeMemberType
        UntilSelected = 2  # ExtendExtendTypeMemberType
        UntilExtended = 3  # ExtendExtendTypeMemberType
        ThroughAll = 4  # ExtendExtendTypeMemberType
        Symmetric = 5  # ExtendExtendTypeMemberType
        Percent = 6  # ExtendExtendTypeMemberType
        ArcLength = 7  # ExtendExtendTypeMemberType
        ThruPoint = 8  # ExtendExtendTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetValue(self, valueExpression: str) -> None:
        """
        Set extend value for the following type
        :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.Value <NXOpen.GeometricUtilities.ExtendExtendType>`.  
        
        Signature ``SetValue(valueExpression)`` 
        
        :param valueExpression:  For :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.Value <NXOpen.GeometricUtilities.ExtendExtendType>` 
        :type valueExpression: str 
        
        .. versionadded:: NX3.0.1
        
        .. deprecated::  NX8.5.0
           To set the value of the expression modify the expression directly using :py:meth:`GeometricUtilities.Extend.Value` and :py:meth:`Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Target: NXOpen.DisplayableObject = ...
    """
    Returns or sets  the extend target for the following types
    :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.UntilSelected <NXOpen.GeometricUtilities.ExtendExtendType>`.  
    
    :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.UntilExtended <NXOpen.GeometricUtilities.ExtendExtendType>`.  
    :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.UntilNext <NXOpen.GeometricUtilities.ExtendExtendType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns:  For :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.UntilSelected <NXOpen.GeometricUtilities.ExtendExtendType>`
    it can be face, solid body,sheet body and datums. 
    :rtype: :py:class:`NXOpen.DisplayableObject` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Target`` 
    
    :param selectedObject:  For :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.UntilSelected <NXOpen.GeometricUtilities.ExtendExtendType>`                                                                    it can be face, solid body,sheet body and datums. 
    :type selectedObject: :py:class:`NXOpen.DisplayableObject` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    TrimType: ExtendExtendType = ...
    """
    Returns or sets  the extend type 
    :py:class:`NXOpen.GeometricUtilities.ExtendExtendType`.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ExtendExtendType` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimType`` 
    
    :param extendType: 
    :type extendType: :py:class:`NXOpen.GeometricUtilities.ExtendExtendType` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Value: NXOpen.Expression = ...
    """
    Returns  the extend value for the following type
    :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.Value <NXOpen.GeometricUtilities.ExtendExtendType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  For :py:class:`NXOpen.GeometricUtilities.ExtendExtendType.Value <NXOpen.GeometricUtilities.ExtendExtendType>` 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: Extend = ...  # unknown typename


class BoundingObjectBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[BoundingObjectBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: BoundingObjectBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: BoundingObjectBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> BoundingObjectBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BoundingObjectBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BoundingObjectBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[BoundingObjectBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[BoundingObjectBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: BoundingObjectBuilder, object2: BoundingObjectBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: BoundingObjectBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: BoundingObjectBuilderList = ...  # unknown typename


class FtmTransformCurvesBuilderTransformCurvesContinuityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FtmTransformCurvesBuilderTransformCurvesContinuityType():
    """
    Transform curves continuity type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "G0", " - "
       "G1", " - "
       "G2", " - "
    """
    G0 = 0  # FtmTransformCurvesBuilderTransformCurvesContinuityTypeMemberType
    G1 = 1  # FtmTransformCurvesBuilderTransformCurvesContinuityTypeMemberType
    G2 = 2  # FtmTransformCurvesBuilderTransformCurvesContinuityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FtmTransformCurvesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.OmnicadManager.CreateFtmTransformCurvesBuilder`
    
    Default values.
    
    ===============================  =====
    Property                         Value
    ===============================  =====
    AlignBreakPoints                 0 
    -------------------------------  -----
    OppositeSense                    0 
    -------------------------------  -----
    OppositeSide                     0 
    -------------------------------  -----
    TransformCurvesContinuity        G0 
    -------------------------------  -----
    TransformCurvesMagnitude.Value   1 
    ===============================  =====
    
    .. versionadded:: NX10.0.0
    """
    
    class TransformCurvesContinuityType():
        """
        Transform curves continuity type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "G0", " - "
           "G1", " - "
           "G2", " - "
        """
        G0 = 0  # FtmTransformCurvesBuilderTransformCurvesContinuityTypeMemberType
        G1 = 1  # FtmTransformCurvesBuilderTransformCurvesContinuityTypeMemberType
        G2 = 2  # FtmTransformCurvesBuilderTransformCurvesContinuityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AlignBreakPoints: bool = ...
    """
    Returns or sets  the option for aligning break points used in the transformation or morphing calculations 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignBreakPoints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignBreakPoints`` 
    
    :param alignBreakPoints: 
    :type alignBreakPoints: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OppositeSense: bool = ...
    """
    Returns or sets  the option to reverse the OmniCAD pre-determined direction for the transformation start and end curves 
    
    <hr>
    
    Getter Method
    
    Signature ``OppositeSense`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OppositeSense`` 
    
    :param oppositeSense: 
    :type oppositeSense: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OppositeSide: bool = ...
    """
    Returns or sets  the option to change the displacements to the opposite side of the transformation 
    
    <hr>
    
    Getter Method
    
    Signature ``OppositeSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OppositeSide`` 
    
    :param oppositeSide: 
    :type oppositeSide: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    TransformCurvesContinuity: FtmTransformCurvesBuilderTransformCurvesContinuityType = ...
    """
    Returns or sets  the continuity option for the transformation start and end curves used in the transformation or morphing calculations 
    
    <hr>
    
    Getter Method
    
    Signature ``TransformCurvesContinuity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilderTransformCurvesContinuityType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransformCurvesContinuity`` 
    
    :param transformCurvesContinuity: 
    :type transformCurvesContinuity: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilderTransformCurvesContinuityType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    TransformCurvesMagnitude: NXOpen.Expression = ...
    """
    Returns  the magnitude controlled by continuity for the transformation curves 
    
    <hr>
    
    Getter Method
    
    Signature ``TransformCurvesMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    TransformEndCurves: NXOpen.Section = ...
    """
    Returns  the end or target constraint for the product shape in the form of curves used in the transformation or morphing calculations 
    
    <hr>
    
    Getter Method
    
    Signature ``TransformEndCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    TransformStartCurves: NXOpen.Section = ...
    """
    Returns  the starting constraint for the product shape in the form of curves used in the transformation or morphing calculations 
    
    <hr>
    
    Getter Method
    
    Signature ``TransformStartCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: FtmTransformCurvesBuilder = ...  # unknown typename


class FaceSetData(NXOpen.NXObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.FaceSetData`
    
    .. versionadded:: NX5.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FaceCollector: NXOpen.ScCollector = ...
    """
    Returns  the face set collector 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ReverseNormalFlag: bool = ...
    """
    Returns or sets  the face set reverse direction flag 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseNormalFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseNormalFlag`` 
    
    :param mReverseNormalFlag: 
    :type mReverseNormalFlag: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: FaceSetData = ...  # unknown typename


class SpinePlaneBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SpinePlaneBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SpinePlaneBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SpinePlaneBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SpinePlaneBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SpinePlaneBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SpinePlaneBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SpinePlaneBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SpinePlaneBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SpinePlaneBuilder, object2: SpinePlaneBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SpinePlaneBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SpinePlaneBuilderList = ...  # unknown typename


class BridgeCurveConnectivityCurveDirectionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BridgeCurveConnectivityCurveDirectionOptions():
    """
    Tangent constraint direction when end is attached to a section 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Tangent", "Tangent to section"
       "Perpendicular", "Perpendicular to section using a reference face"
    """
    Tangent = 0  # BridgeCurveConnectivityCurveDirectionOptionsMemberType
    Perpendicular = 1  # BridgeCurveConnectivityCurveDirectionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BridgeCurveConnectivityFaceDirectionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BridgeCurveConnectivityFaceDirectionOptions():
    """
    Tangent constraint direction when end is attached to a face 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sectional", "Sectional direction"
       "IsoU", "Along U iso-parameter"
       "IsoV", "Along V iso-parameter"
    """
    Sectional = 0  # BridgeCurveConnectivityFaceDirectionOptionsMemberType
    IsoU = 1  # BridgeCurveConnectivityFaceDirectionOptionsMemberType
    IsoV = 2  # BridgeCurveConnectivityFaceDirectionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BridgeCurveConnectivity(NXOpen.TaggedObject, IComponentBuilder):
    """
    Data offering connectivity controls for :py:class:`NXOpen.Features.BridgeCurveBuilderEx`.  
    
    Use :py:class:`NXOpen.GeometricUtilities.BridgeCurveConnectivity` to define continuity level,
    position and tangency, curvature or flow at the end of a bridge curve. For more details see 
    the NX documentation for Bridge Curves.
    
    .. versionadded:: NX8.5.0
    """
    
    class CurveDirectionOptions():
        """
        Tangent constraint direction when end is attached to a section 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Tangent", "Tangent to section"
           "Perpendicular", "Perpendicular to section using a reference face"
        """
        Tangent = 0  # BridgeCurveConnectivityCurveDirectionOptionsMemberType
        Perpendicular = 1  # BridgeCurveConnectivityCurveDirectionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FaceDirectionOptions():
        """
        Tangent constraint direction when end is attached to a face 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sectional", "Sectional direction"
           "IsoU", "Along U iso-parameter"
           "IsoV", "Along V iso-parameter"
        """
        Sectional = 0  # BridgeCurveConnectivityFaceDirectionOptionsMemberType
        IsoU = 1  # BridgeCurveConnectivityFaceDirectionOptionsMemberType
        IsoV = 2  # BridgeCurveConnectivityFaceDirectionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateOnDirectionAtPointReversal(self) -> None:
        """
        Updates the data based on :py:meth:`BridgeCurveConnectivity.DirectionAtPoint`` sense 
        
        Signature ``UpdateOnDirectionAtPointReversal()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling")
        """
        ...
    
    
    def EditUVPercentage(self, uPercent: float, vPercent: float) -> None:
        """
        Edits parameter percentage of a representative point on face 
        
        Signature ``EditUVPercentage(uPercent, vPercent)`` 
        
        :param uPercent: 
        :type uPercent: float 
        :param vPercent: 
        :type vPercent: float 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling")
        """
        ...
    
    
    def UpdateBasedOnLocationOnSection(self) -> None:
        """
        Updates the data based on :py:meth:`NXOpen.GeometricUtilities.BridgeCurveConnectivity.LocationOnSection`
        
        Signature ``UpdateBasedOnLocationOnSection()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CanReverseDirection: bool = ...
    """
    Returns or sets  the flag indicating if tangent direction is to be reversed 
    
    <hr>
    
    Getter Method
    
    Signature ``CanReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CanReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling")
    """
    Continuity: Continuity = ...
    """
    Returns  the continuity level 
    
    <hr>
    
    Getter Method
    
    Signature ``Continuity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.Continuity` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CurveDirectionOption: BridgeCurveConnectivityCurveDirectionOptions = ...
    """
    Returns or sets  the curve direction option 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveDirectionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BridgeCurveConnectivityCurveDirectionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveDirectionOption`` 
    
    :param curveDirectionOption: 
    :type curveDirectionOption: :py:class:`NXOpen.GeometricUtilities.BridgeCurveConnectivityCurveDirectionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling")
    """
    DirectionAtPoint: NXOpen.Direction = ...
    """
    Returns or sets  the direction at point 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionAtPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionAtPoint`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling")
    """
    FaceDirectionOption: BridgeCurveConnectivityFaceDirectionOptions = ...
    """
    Returns or sets  the face direction option 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceDirectionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BridgeCurveConnectivityFaceDirectionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceDirectionOption`` 
    
    :param faceDirectionOption: 
    :type faceDirectionOption: :py:class:`NXOpen.GeometricUtilities.BridgeCurveConnectivityFaceDirectionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling")
    """
    LocationOnSection: OnPathDimensionBuilder = ...
    """
    Returns  the location on section 
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOnSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PerpendicularFace: NXOpen.SelectFace = ...
    """
    Returns  the perpendicular face 
    
    <hr>
    
    Getter Method
    
    Signature ``PerpendicularFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SectionAngle: NXOpen.Expression = ...
    """
    Returns  the section angle.  
    
    Positive U direction is used as reference to measure the angle in tangent plane. 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    UPercentage: NXOpen.Expression = ...
    """
    Returns  the U coordinate percentage indicating location on the face where bridge curve is connected 
    
    <hr>
    
    Getter Method
    
    Signature ``UPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    VPercentage: NXOpen.Expression = ...
    """
    Returns  the V coordinate percentage indicating location on the face where bridge curve is connected 
    
    <hr>
    
    Getter Method
    
    Signature ``VPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BridgeCurveConnectivity = ...  # unknown typename


class TwoExpressionsCollectorSet(NXOpen.ExpressionCollectorSet):
    """
    Represents a two dimension list item builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateEmptyTwoExpressionsCollectorSet`
    
    .. versionadded:: NX8.5.0
    """
    ItemValueTwo: NXOpen.Expression = ...
    """
    Returns  the second expression
    
    <hr>
    
    Getter Method
    
    Signature ``ItemValueTwo`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: TwoExpressionsCollectorSet = ...  # unknown typename


class FacePlaneToolBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    a sub-component of BooleanToolBuilder.  
    
    It provides two basic tools
    * creation methods i.e. collector sets of faces/datum planes, or a new plane 
    * created on the fly. 
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ToolFaces: FaceSetData = ...
    """
    Returns  the sets of tool faces or datum planes 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FaceSetData` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToolPlane: NXOpen.Plane = ...
    """
    Returns or sets  the new plane created on the fly.  
    
    Note: only one plane is get/set 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolPlane`` 
    
    :param toolPlane: 
    :type toolPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: FacePlaneToolBuilder = ...  # unknown typename


class DistancePatternSpacing(PatternSpacing):
    """
    defines the various ways pattern instances can be 
    spaced within the pattern, particularly in the context of the
    PatternDefinition class.  
    
    .. versionadded:: NX7.5.0
    """
    PitchDistance: NXOpen.Expression = ...
    """
    Returns  the distance for the spacing of the pattern from one instance to the next.  
    
    <hr>
    
    Getter Method
    
    Signature ``PitchDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SpanDistance: NXOpen.Expression = ...
    """
    Returns  the distance for the spacing of the pattern for the entire pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpanDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: DistancePatternSpacing = ...  # unknown typename


class AngularLimits(Limits):
    """
    Represents a angular limts data.  
    
    .. versionadded:: NX3.0.1
    """
    Distance: float = ...
    """
    Returns  a computed distance
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: AngularLimits = ...  # unknown typename


class StyledSweepReferenceMethodBuilderReferenceOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StyledSweepReferenceMethodBuilderReferenceOptions():
    """
    This enum represents the orientation reference option. By default, it is set to guide. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ToGuide", "Guide"
       "ToCurve", "Curve"
       "ToVector", "Vector Direction"
    """
    ToGuide = 0  # StyledSweepReferenceMethodBuilderReferenceOptionsMemberType
    ToCurve = 1  # StyledSweepReferenceMethodBuilderReferenceOptionsMemberType
    ToVector = 2  # StyledSweepReferenceMethodBuilderReferenceOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StyledSweepReferenceMethodBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.StyledSweepReferenceMethodBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class ReferenceOptions():
        """
        This enum represents the orientation reference option. By default, it is set to guide. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ToGuide", "Guide"
           "ToCurve", "Curve"
           "ToVector", "Vector Direction"
        """
        ToGuide = 0  # StyledSweepReferenceMethodBuilderReferenceOptionsMemberType
        ToCurve = 1  # StyledSweepReferenceMethodBuilderReferenceOptionsMemberType
        ToVector = 2  # StyledSweepReferenceMethodBuilderReferenceOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateOnReferenceVectorReversal(self) -> None:
        """
        Updates the builder based on reference vector sense 
        
        Signature ``UpdateOnReferenceVectorReversal()`` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    HasHingeVector: bool = ...
    """
    Returns or sets  a value indicating whether there is a hinge vector 
    
    <hr>
    
    Getter Method
    
    Signature ``HasHingeVector`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HasHingeVector`` 
    
    :param hasHingeVector: 
    :type hasHingeVector: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    ReferenceCurve: NXOpen.Section = ...
    """
    Returns  the section orientation reference curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReferenceOption: StyledSweepReferenceMethodBuilderReferenceOptions = ...
    """
    Returns or sets  the section orientation reference option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.StyledSweepReferenceMethodBuilderReferenceOptions` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceOption`` 
    
    :param referenceOption: 
    :type referenceOption: :py:class:`NXOpen.GeometricUtilities.StyledSweepReferenceMethodBuilderReferenceOptions` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    ReferenceVector: NXOpen.Direction = ...
    """
    Returns or sets  the section orientation reference vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceVector`` 
    
    :param referenceVector: 
    :type referenceVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Null: StyledSweepReferenceMethodBuilder = ...  # unknown typename


class ReduceSurfaceRadiusBuilderFaceSelectionSpecificationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReduceSurfaceRadiusBuilderFaceSelectionSpecification():
    """
    Specify the face selection type. There are three types: Select Faces by Radius, Select Faces by Chain and Single Selection. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Radius", " - "
       "Chain", " - "
       "Select", " - "
    """
    Radius = 0  # ReduceSurfaceRadiusBuilderFaceSelectionSpecificationMemberType
    Chain = 1  # ReduceSurfaceRadiusBuilderFaceSelectionSpecificationMemberType
    Select = 2  # ReduceSurfaceRadiusBuilderFaceSelectionSpecificationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReduceSurfaceRadiusBuilderReduceValueTypeSpecificationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReduceSurfaceRadiusBuilderReduceValueTypeSpecification():
    """
    Specify the reduction method. There are three types: percentage reduction, reduction value and target value. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Percentage", " - "
       "Value", " - "
       "Delta", " - "
    """
    Percentage = 0  # ReduceSurfaceRadiusBuilderReduceValueTypeSpecificationMemberType
    Value = 1  # ReduceSurfaceRadiusBuilderReduceValueTypeSpecificationMemberType
    Delta = 2  # ReduceSurfaceRadiusBuilderReduceValueTypeSpecificationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReduceSurfaceRadiusBuilderReducedFaceTypeSpecificationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReduceSurfaceRadiusBuilderReducedFaceTypeSpecification():
    """
    Specify three ways to do preview.
    FaceGroup: Preview all list items.
    SingleChainInGroup: Preview selected list item.
    SingleChain: Preview face chain which is selected by "Select Faces by Chain" and "Single Face" 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceGroup", "Preview all items in face group list when using "Select Faces by Radius" to select input objects."
       "SingleChainInGroup", "Preview single item in face group list when using "Select Faces by Radius" to select input objects."
       "SingleChain", "Preview single chain when using "Select Faces by Chain" and "Single Selection" to select input objects."
    """
    FaceGroup = 0  # ReduceSurfaceRadiusBuilderReducedFaceTypeSpecificationMemberType
    SingleChainInGroup = 1  # ReduceSurfaceRadiusBuilderReducedFaceTypeSpecificationMemberType
    SingleChain = 2  # ReduceSurfaceRadiusBuilderReducedFaceTypeSpecificationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReduceSurfaceRadiusBuilder(NXOpen.Builder):
    """
    Reduce Surface Radius Builder of Geometric Utilities.  
    
    This builder's Commit can produce more than one object, 
    the GetCommittedObjects can be used to get the objects. 
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.CAMDataPrepManager.CreateReduceSurfaceRadiusBuilder`
    
    Default values.
    
    =================  ===========================================
    Property           Value
    =================  ===========================================
    HighRadius         10.0 (millimeters part), 0.4 (inches part) 
    -----------------  -------------------------------------------
    LowRadius          0.5 (millimeters part), 0.02 (inches part) 
    -----------------  -------------------------------------------
    PercentReduction   100 
    -----------------  -------------------------------------------
    ReduceValueType    Percentage 
    -----------------  -------------------------------------------
    TargetReduction    0 
    -----------------  -------------------------------------------
    ValueReduction     0.1 
    =================  ===========================================
    
    .. versionadded:: NX9.0.0
    """
    
    class FaceSelectionSpecification():
        """
        Specify the face selection type. There are three types: Select Faces by Radius, Select Faces by Chain and Single Selection. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Radius", " - "
           "Chain", " - "
           "Select", " - "
        """
        Radius = 0  # ReduceSurfaceRadiusBuilderFaceSelectionSpecificationMemberType
        Chain = 1  # ReduceSurfaceRadiusBuilderFaceSelectionSpecificationMemberType
        Select = 2  # ReduceSurfaceRadiusBuilderFaceSelectionSpecificationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ReduceValueTypeSpecification():
        """
        Specify the reduction method. There are three types: percentage reduction, reduction value and target value. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Percentage", " - "
           "Value", " - "
           "Delta", " - "
        """
        Percentage = 0  # ReduceSurfaceRadiusBuilderReduceValueTypeSpecificationMemberType
        Value = 1  # ReduceSurfaceRadiusBuilderReduceValueTypeSpecificationMemberType
        Delta = 2  # ReduceSurfaceRadiusBuilderReduceValueTypeSpecificationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ReducedFaceTypeSpecification():
        """
        Specify three ways to do preview.
        FaceGroup: Preview all list items.
        SingleChainInGroup: Preview selected list item.
        SingleChain: Preview face chain which is selected by "Select Faces by Chain" and "Single Face" 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceGroup", "Preview all items in face group list when using "Select Faces by Radius" to select input objects."
           "SingleChainInGroup", "Preview single item in face group list when using "Select Faces by Radius" to select input objects."
           "SingleChain", "Preview single chain when using "Select Faces by Chain" and "Single Selection" to select input objects."
        """
        FaceGroup = 0  # ReduceSurfaceRadiusBuilderReducedFaceTypeSpecificationMemberType
        SingleChainInGroup = 1  # ReduceSurfaceRadiusBuilderReducedFaceTypeSpecificationMemberType
        SingleChain = 2  # ReduceSurfaceRadiusBuilderReducedFaceTypeSpecificationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Direction: bool = ...
    """
    Returns or sets  the direction which specifies concave face respect to the body face normal 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FaceGroupList: ReduceSurfaceRadiusFaceGroupBuilderList = ...
    """
    Returns  the list containing the face chains as input objects used to do reduction.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceGroupList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilderList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HighRadius: float = ...
    """
    Returns or sets  the high radius which specifies lower limit to filter out all qualified faces 
    
    <hr>
    
    Getter Method
    
    Signature ``HighRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighRadius`` 
    
    :param highRadius: 
    :type highRadius: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IndexListItem: int = ...
    """
    Returns or sets  the index of list item 
    
    <hr>
    
    Getter Method
    
    Signature ``IndexListItem`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IndexListItem`` 
    
    :param index: 
    :type index: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LowRadius: float = ...
    """
    Returns or sets  the low radius which specifies lower limit to filter out all qualified faces 
    
    <hr>
    
    Getter Method
    
    Signature ``LowRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowRadius`` 
    
    :param lowRadius: 
    :type lowRadius: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OnPathDimEnd: OnPathDimensionBuilder = ...
    """
    Returns  the end position of reduced sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathDimEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OnPathDimStart: OnPathDimensionBuilder = ...
    """
    Returns  the start position of reduced sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathDimStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PercentReduction: float = ...
    """
    Returns or sets  the value of percentage reduction method 
    
    <hr>
    
    Getter Method
    
    Signature ``PercentReduction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PercentReduction`` 
    
    :param percentReduction: 
    :type percentReduction: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PositionTolerance: float = ...
    """
    Returns or sets  the position tolerance between two faces connection 
    
    <hr>
    
    Getter Method
    
    Signature ``PositionTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionTolerance`` 
    
    :param positionTolerance: 
    :type positionTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReduceValueType: ReduceSurfaceRadiusBuilderReduceValueTypeSpecification = ...
    """
    Returns or sets  the type of reduced value which results surface shape 
    
    <hr>
    
    Getter Method
    
    Signature ``ReduceValueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusBuilderReduceValueTypeSpecification` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReduceValueType`` 
    
    :param reduceValueType: 
    :type reduceValueType: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusBuilderReduceValueTypeSpecification` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReducedFaceType: ReduceSurfaceRadiusBuilderReducedFaceTypeSpecification = ...
    """
    Returns or sets  the type of performing the radius reduction preview 
    
    <hr>
    
    Getter Method
    
    Signature ``ReducedFaceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusBuilderReducedFaceTypeSpecification` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReducedFaceType`` 
    
    :param reducedFaceType: 
    :type reducedFaceType: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusBuilderReducedFaceTypeSpecification` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectChain: NXOpen.ScCollector = ...
    """
    Returns  the selected entities for performing the radius reduction operation, which selected by "Select Faces by Chain" and "Single Selection" 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectChain`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the selected entities for performing the radius reduction operation, which selected by "Select Faces by Radius" 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TangentTolerance: float = ...
    """
    Returns or sets  the tangent tolerance between two faces connection 
    
    <hr>
    
    Getter Method
    
    Signature ``TangentTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TangentTolerance`` 
    
    :param tangentTolerance: 
    :type tangentTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TargetReduction: float = ...
    """
    Returns or sets  the target value method 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetReduction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetReduction`` 
    
    :param targetReduction: 
    :type targetReduction: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ValueReduction: float = ...
    """
    Returns or sets  the value of reduction value method 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueReduction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValueReduction`` 
    
    :param valueReduction: 
    :type valueReduction: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: ReduceSurfaceRadiusBuilder = ...  # unknown typename


class TrimCurveBoundingObjectBuilderMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimCurveBoundingObjectBuilderMethod():
    """
    the Object or Plane selection 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SelectObject", " - "
       "SelectPlane", " - "
    """
    SelectObject = 0  # TrimCurveBoundingObjectBuilderMethodMemberType
    SelectPlane = 1  # TrimCurveBoundingObjectBuilderMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimCurveBoundingObjectBuilder(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.TrimCurve2Builder.CreateTrimCurveBoundingObjectBuilder`
    
    .. versionadded:: NX11.0.1
    """
    
    class Method():
        """
        the Object or Plane selection 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SelectObject", " - "
           "SelectPlane", " - "
        """
        SelectObject = 0  # TrimCurveBoundingObjectBuilderMethodMemberType
        SelectPlane = 1  # TrimCurveBoundingObjectBuilderMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BoundingObject: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the  bounding object 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingObject`` 
    
    :returns:  Get bounding object 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX11.0.1
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilder.BoundingObjectList`.
    
    License requirements: None.
    """
    BoundingObjectList: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the bounding object list
    
    Only one object is allowed in this list.  
    
    In the case of multiple objects, only first object will be considered for the operation.
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingObjectList`` 
    
    :returns:  Get bounding object list 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    BoundingObjectMethodType: TrimCurveBoundingObjectBuilderMethod = ...
    """
    Returns or sets  the bounding object enum type 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingObjectMethodType`` 
    
    :returns:  Set bounding object type 
    :rtype: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilderMethod` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingObjectMethodType`` 
    
    :param boundingObjectMethod:  Set bounding object 
    :type boundingObjectMethod: :py:class:`NXOpen.GeometricUtilities.TrimCurveBoundingObjectBuilderMethod` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    BoundingPlane: NXOpen.Plane = ...
    """
    Returns or sets  the bounding plane 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingPlane`` 
    
    :returns:  Set bounding plane object tag 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingPlane`` 
    
    :param plane:  Set bounding plane object tag 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: TrimCurveBoundingObjectBuilder = ...  # unknown typename


class PolygonPatternSpacing(PatternSpacing):
    """
    defines the various ways pattern instances can be 
    spaced within the pattern, particularly in the context of the
    PatternDefinition class.  
    
    .. versionadded:: NX8.0.0
    """
    PitchDistance: NXOpen.Expression = ...
    """
    Returns  the pitch distance along one side for the spacing of the pattern from one instance to the next.  
    
    <hr>
    
    Getter Method
    
    Signature ``PitchDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SpanAngle: NXOpen.Expression = ...
    """
    Returns  the angle for the spacing of the pattern for the entire pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpanAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PolygonPatternSpacing = ...  # unknown typename


class SpiralPatternOrientTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpiralPatternOrientType():
    """
    This defines spiral direction method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Lefthand", "Left hand orientation."
       "Righthand", "Right hand orientation."
    """
    Lefthand = 0  # SpiralPatternOrientTypeMemberType
    Righthand = 1  # SpiralPatternOrientTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpiralPatternSpiralDefineSizeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpiralPatternSpiralDefineSize():
    """
    This defines size spiral type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NumberOfTurns", "using number of turns to define size of spiral"
       "TotalAngle", "using total angle to define size of spiral"
    """
    NumberOfTurns = 0  # SpiralPatternSpiralDefineSizeMemberType
    TotalAngle = 1  # SpiralPatternSpiralDefineSizeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpiralPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the Spiral pattern definition.  
    
    .. versionadded:: NX8.0.0
    """
    
    class OrientType():
        """
        This defines spiral direction method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Lefthand", "Left hand orientation."
           "Righthand", "Right hand orientation."
        """
        Lefthand = 0  # SpiralPatternOrientTypeMemberType
        Righthand = 1  # SpiralPatternOrientTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SpiralDefineSize():
        """
        This defines size spiral type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NumberOfTurns", "using number of turns to define size of spiral"
           "TotalAngle", "using total angle to define size of spiral"
        """
        NumberOfTurns = 0  # SpiralPatternSpiralDefineSizeMemberType
        TotalAngle = 1  # SpiralPatternSpiralDefineSizeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DirectionType: SpiralPatternOrientType = ...
    """
    Returns or sets  the type of spiral direction method 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SpiralPatternOrientType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param directionType: 
    :type directionType: :py:class:`NXOpen.GeometricUtilities.SpiralPatternOrientType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HorizontalRef: HorizontalReference = ...
    """
    Returns  the horizontal reference 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRef`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.HorizontalReference` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NumberOfTurns: NXOpen.Expression = ...
    """
    Returns  the number of turns of spiral 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfTurns`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PitchAlongSpiral: OnPathDistancePatternSpacing = ...
    """
    Returns  the pitch along spiral curve 
    
    <hr>
    
    Getter Method
    
    Signature ``PitchAlongSpiral`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDistancePatternSpacing` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RadialPitch: NXOpen.Expression = ...
    """
    Returns  the radial pitch of spiral 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialPitch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SizeSpiralType: SpiralPatternSpiralDefineSize = ...
    """
    Returns or sets  the size spiral type 
    
    <hr>
    
    Getter Method
    
    Signature ``SizeSpiralType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SpiralPatternSpiralDefineSize` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SizeSpiralType`` 
    
    :param sizeSpiralType: 
    :type sizeSpiralType: :py:class:`NXOpen.GeometricUtilities.SpiralPatternSpiralDefineSize` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SpiralNormal: NXOpen.Direction = ...
    """
    Returns or sets  the spiral normal vector 
    
    <hr>
    
    Getter Method
    
    Signature ``SpiralNormal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpiralNormal`` 
    
    :param spiralNormal: 
    :type spiralNormal: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TotalAngle: NXOpen.Expression = ...
    """
    Returns  the total angle of spiral 
    
    <hr>
    
    Getter Method
    
    Signature ``TotalAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SpiralPattern = ...  # unknown typename


class ModlAlongCurveAngle(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class :py:class:`NXOpen.GeometricUtilities.ModlAlongCurveAngle` represents motion type in ModlMotion   
    
    .. versionadded:: NX8.5.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlongCurve: OnPathDimensionBuilder = ...
    """
    Returns  the value of transform.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlongCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AlongCurveAngle: NXOpen.Expression = ...
    """
    Returns  the value of angular transform.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlongCurveAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Curve: NXOpen.SelectCurve = ...
    """
    Returns  the curve on which doing the transform.  
    
    <hr>
    
    Getter Method
    
    Signature ``Curve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ReverseCurveDirection: bool = ...
    """
    Returns or sets  whether the direction of the curve to determine the transform should be reversed or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseCurveDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseCurveDirection`` 
    
    :param reverseCurveDirection: 
    :type reverseCurveDirection: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ModlAlongCurveAngle = ...  # unknown typename


class SaveConstraintsBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a builder for a Save Constraints.  
    
    SaveConstraintsBuilder is not supported in KF.
    
    .. versionadded:: NX7.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    SaveConstraints: bool = ...
    """
    Returns or sets  the flag indicating whether to save the constraints or not 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveConstraints`` 
    
    :returns:  Flag indicating whether to save the constraints  
    :rtype: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveConstraints`` 
    
    :param isSaveConstraints:  Flag indicating whether to save the constraints  
    :type isSaveConstraints: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: SaveConstraintsBuilder = ...  # unknown typename


class ConvertFeatureGroupsToModulesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ConvertFeatureGroupsToModulesBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.FeatureCollection.CreateConvertFeatureGroupsToModulesBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def AddAll(self) -> None:
        """
        Add all feature groups into convertible set 
        
        Signature ``AddAll()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveAll(self) -> None:
        """
        Remove all feature groups from convertible set 
        
        Signature ``RemoveAll()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddFeatureGroupIntoConvertibleSet(self, featureGroups: 'list[NXOpen.Features.FeatureGroup]') -> None:
        """
        Add feature group into convertible set 
        
        Signature ``AddFeatureGroupIntoConvertibleSet(featureGroups)`` 
        
        :param featureGroups: 
        :type featureGroups: list of :py:class:`NXOpen.Features.FeatureGroup` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveFeatureGroupFromConvertibleSet(self, featureGroups: 'list[NXOpen.Features.FeatureGroup]') -> None:
        """
        Remove feature group from convertible set 
        
        Signature ``RemoveFeatureGroupFromConvertibleSet(featureGroups)`` 
        
        :param featureGroups: 
        :type featureGroups: list of :py:class:`NXOpen.Features.FeatureGroup` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Null: ConvertFeatureGroupsToModulesBuilder = ...  # unknown typename


class PointsFromFileBuilderOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PointsFromFileBuilderOptions():
    """
    Coordinate option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Absolute", "Absolute coordinates"
       "Wcs", "Work coordinates"
    """
    Absolute = 0  # PointsFromFileBuilderOptionsMemberType
    Wcs = 1  # PointsFromFileBuilderOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PointsFromFileBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.PointsFromFileBuilder` builder
    read points from a text file with format *.  
    
    asc, *.txt, *.dat, *.pts
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreatePointsFromFileBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class Options():
        """
        Coordinate option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Absolute", "Absolute coordinates"
           "Wcs", "Work coordinates"
        """
        Absolute = 0  # PointsFromFileBuilderOptionsMemberType
        Wcs = 1  # PointsFromFileBuilderOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CoordinateOption: PointsFromFileBuilderOptions = ...
    """
    Returns or sets  the option indicating type of point coordinates 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PointsFromFileBuilderOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateOption`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.GeometricUtilities.PointsFromFileBuilderOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FileName: str = ...
    """
    Returns or sets  the file name of the point data file 
    
    <hr>
    
    Getter Method
    
    Signature ``FileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FileName`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PathName: str = ...
    """
    Returns or sets  the path name of the point data file 
    
    <hr>
    
    Getter Method
    
    Signature ``PathName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PathName`` 
    
    :param pathname: 
    :type pathname: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: PointsFromFileBuilder = ...  # unknown typename


class CircularCrossSection(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a circular section data for face blend.  
    
    .. versionadded:: NX4.0.0
    """
    
    def SetRadius(self, radius: str) -> None:
        """
        Sets a radius for the circular section with face blend.  
        
        Signature ``SetRadius(radius)`` 
        
        :param radius: 
        :type radius: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           To set the value of the expression modify the expression directly using :py:meth:`GeometricUtilities.CircularCrossSection.Radius` and :py:meth:`Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlConstantRadius(self, radius: str) -> None:
        """
        Sets a constant radius for the law control of the circular section with face blend.  
        
        Signature ``SetLawControlConstantRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlStartRadius(self, radius: str) -> None:
        """
        Sets a start radius for the law control of the circular section with face blend.  
        
        Signature ``SetLawControlStartRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlEndRadius(self, radius: str) -> None:
        """
        Sets a end radius for the law control of the circular section with face blend.  
        
        Signature ``SetLawControlEndRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    LawControl: LawBuilder = ...
    """
    Returns  the Law builder 
    
    <hr>
    
    Getter Method
    
    Signature ``LawControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius for the circular section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    RadiusOption: RadiusMethod = ...
    """
    Returns or sets  the radius option for the circular section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.RadiusMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadiusOption`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.RadiusMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: CircularCrossSection = ...  # unknown typename


class PatternInstanceEditBuilder(NXOpen.Builder):
    """
    pattern instance edit builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.PatternDefinition.CreatePatternInstanceEditBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def SetSelectedInstances(self, firstIndexOfSelectedInstances: 'list[int]', secondIndexOfSelectedInstances: 'list[int]') -> None:
        """
        Sets the indices of the selected Pattern Instances whose expressions are to be edited with
        the expressions provided in the :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionsList`.  
        
        Signature ``SetSelectedInstances(firstIndexOfSelectedInstances, secondIndexOfSelectedInstances)`` 
        
        :param firstIndexOfSelectedInstances: 
        :type firstIndexOfSelectedInstances: list of int 
        :param secondIndexOfSelectedInstances: 
        :type secondIndexOfSelectedInstances: list of int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    EditedExpressionsList: InstanceEditedExpressionsList = ...
    """
    Returns  the edited expressions list :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionsList`.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditedExpressionsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionsList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PatternInstanceEditBuilder = ...  # unknown typename


class PatternOrientationEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternOrientationEnum():
    """
    pattern orientation options for all pattern types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fixed", "same orientation as the seed."
       "NormalToPath", "normal to path orientation for Along Type first direction."
       "NormalToVector", "normal to vector orientation for Along Type first direction."
       "ParallelToVector", "parallel to vector orientation for Along Type first direction."
       "ThroughAxis", "through axis orientation for Along Type first direction."
       "FollowPattern", "follow pattern orientation, for example, circular pattern type."
       "FollowCSYS", "follow CSYS orientation, for general pattern type, when from/to is CSYS."
       "CSYStoCSYS", "a relative orientation defined by two CSYSs to transform the seed to an instance location."
    """
    Fixed = 0  # PatternOrientationEnumMemberType
    NormalToPath = 1  # PatternOrientationEnumMemberType
    NormalToVector = 2  # PatternOrientationEnumMemberType
    ParallelToVector = 3  # PatternOrientationEnumMemberType
    ThroughAxis = 4  # PatternOrientationEnumMemberType
    FollowPattern = 5  # PatternOrientationEnumMemberType
    FollowCSYS = 6  # PatternOrientationEnumMemberType
    CSYStoCSYS = 7  # PatternOrientationEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternOrientationProjDirEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternOrientationProjDirEnum():
    """
    pattern follow face project direction options available.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PatternPlaneNormal", "use pattern plane normal as project direction."
       "NormalToFace", "project along face normal."
       "RadialDir", "project along radial direction. This is specific for Circular pattern type."
       "UserDefinedVector", "project along user defined vector."
    """
    PatternPlaneNormal = 0  # PatternOrientationProjDirEnumMemberType
    NormalToFace = 1  # PatternOrientationProjDirEnumMemberType
    RadialDir = 2  # PatternOrientationProjDirEnumMemberType
    UserDefinedVector = 3  # PatternOrientationProjDirEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternOrientation(NXOpen.TaggedObject, IComponentBuilder):
    """
    the pattern orientation definition.  
    
    Allows to specify an orientation option and corresponding entities. 
    
    .. versionadded:: NX7.5.0
    """
    
    class Enum():
        """
        pattern orientation options for all pattern types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fixed", "same orientation as the seed."
           "NormalToPath", "normal to path orientation for Along Type first direction."
           "NormalToVector", "normal to vector orientation for Along Type first direction."
           "ParallelToVector", "parallel to vector orientation for Along Type first direction."
           "ThroughAxis", "through axis orientation for Along Type first direction."
           "FollowPattern", "follow pattern orientation, for example, circular pattern type."
           "FollowCSYS", "follow CSYS orientation, for general pattern type, when from/to is CSYS."
           "CSYStoCSYS", "a relative orientation defined by two CSYSs to transform the seed to an instance location."
        """
        Fixed = 0  # PatternOrientationEnumMemberType
        NormalToPath = 1  # PatternOrientationEnumMemberType
        NormalToVector = 2  # PatternOrientationEnumMemberType
        ParallelToVector = 3  # PatternOrientationEnumMemberType
        ThroughAxis = 4  # PatternOrientationEnumMemberType
        FollowPattern = 5  # PatternOrientationEnumMemberType
        FollowCSYS = 6  # PatternOrientationEnumMemberType
        CSYStoCSYS = 7  # PatternOrientationEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProjDirEnum():
        """
        pattern follow face project direction options available.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PatternPlaneNormal", "use pattern plane normal as project direction."
           "NormalToFace", "project along face normal."
           "RadialDir", "project along radial direction. This is specific for Circular pattern type."
           "UserDefinedVector", "project along user defined vector."
        """
        PatternPlaneNormal = 0  # PatternOrientationProjDirEnumMemberType
        NormalToFace = 1  # PatternOrientationProjDirEnumMemberType
        RadialDir = 2  # PatternOrientationProjDirEnumMemberType
        UserDefinedVector = 3  # PatternOrientationProjDirEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlongOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for Along pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``AlongOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlongOrientationOption`` 
    
    :param alongOrientationOption: 
    :type alongOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    AlongPathRotationAngle: NXOpen.Expression = ...
    """
    Returns  the along path rotation angle for the Along type pattern Normal to Path option.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlongPathRotationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CircularOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for Circular pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``CircularOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircularOrientationOption`` 
    
    :param circularOrientationOption: 
    :type circularOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    FollowFaceProjDirOption: PatternOrientationProjDirEnum = ...
    """
    Returns or sets  the followFaceProjDirOption, an enum for follow face project direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``FollowFaceProjDirOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationProjDirEnum` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FollowFaceProjDirOption`` 
    
    :param followFaceProjDirOption: 
    :type followFaceProjDirOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationProjDirEnum` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    FollowFaceSelection: NXOpen.ScCollector = ...
    """
    Returns  the followFaceSelection, a sc collector to store selected faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``FollowFaceSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FollowFaceToggle: bool = ...
    """
    Returns or sets  the followFaceToggle, a logical flag to indicate if the we need to modify the orientation to follow selected faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``FollowFaceToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FollowFaceToggle`` 
    
    :param followFaceToggle: 
    :type followFaceToggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    FromCSYS: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the fromCSYS, a CSYS for certain pattern type orientation need.  
    
    <hr>
    
    Getter Method
    
    Signature ``FromCSYS`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FromCSYS`` 
    
    :param fromCSYS: 
    :type fromCSYS: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    GeneralOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for General pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralOrientationOption`` 
    
    :param generalOrientationOption: 
    :type generalOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    HelixOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for Helix pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``HelixOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HelixOrientationOption`` 
    
    :param helixOrientationOption: 
    :type helixOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    LinearOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for Linear pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearOrientationOption`` 
    
    :param linearOrientationOption: 
    :type linearOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    MirrorOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for Mirror pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorOrientationOption`` 
    
    :param mirrorOrientationOption: 
    :type mirrorOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    OrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for rectangular pattern type
    Note: this one does not have a straight forward replacement;
    Replacement based on pattern type:       
    :py:meth:`GeometricUtilities.PatternOrientation.LinearOrientationOption``
    :py:meth:`GeometricUtilities.PatternOrientation.CircularOrientationOption``
    :py:meth:`GeometricUtilities.PatternOrientation.AlongOrientationOption``
    :py:meth:`GeometricUtilities.PatternOrientation.PolygonOrientationOption``
    :py:meth:`GeometricUtilities.PatternOrientation.SpiralOrientationOption``
    :py:meth:`GeometricUtilities.PatternOrientation.GeneralOrientationOption``
    :py:meth:`GeometricUtilities.PatternOrientation.MirrorOrientationOption`` 
    :py:meth:`GeometricUtilities.PatternOrientation.HelixOrientationOption`` 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       The replacement function depends on the pattern type. See this method's documentation for more detailed information.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationOption`` 
    
    :param orientationOption: 
    :type orientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       The replacement function depends on the pattern type. See this method's documentation for more detailed information.
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    PolygonOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for Polygon pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``PolygonOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolygonOrientationOption`` 
    
    :param polygonOrientationOption: 
    :type polygonOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    RepeatTransformSetting: bool = ...
    """
    Returns or sets  the repeatTransformSetting, a logical flag to indicate if the we need to repeatedly apply the transform.  
    
    <hr>
    
    Getter Method
    
    Signature ``RepeatTransformSetting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RepeatTransformSetting`` 
    
    :param repeatTransformSetting: 
    :type repeatTransformSetting: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    SpiralOrientationOption: PatternOrientationEnum = ...
    """
    Returns or sets  the orientationOption for Spiral pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``SpiralOrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpiralOrientationOption`` 
    
    :param spiralOrientationOption: 
    :type spiralOrientationOption: :py:class:`NXOpen.GeometricUtilities.PatternOrientationEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ToCSYS: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the toCSYS, a CSYS for certain pattern type orientation need.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToCSYS`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToCSYS`` 
    
    :param toCSYS: 
    :type toCSYS: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    UserDefinedProjDir: NXOpen.Direction = ...
    """
    Returns or sets  the userDefinedProjDir, a vector for user defined follow face project direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedProjDir`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedProjDir`` 
    
    :param userDefinedProjDir: 
    :type userDefinedProjDir: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    VectorForAlong: NXOpen.Direction = ...
    """
    Returns or sets  the vectorForAlong, a vector for Along type orientation need.  
    
    <hr>
    
    Getter Method
    
    Signature ``VectorForAlong`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VectorForAlong`` 
    
    :param vectorForAlong: 
    :type vectorForAlong: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: PatternOrientation = ...  # unknown typename


class SimpleDraftSimpleDraftTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SimpleDraftSimpleDraftType():
    """
    This enum represents the kind of simple_draft 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoDraft", "No draft"
       "SimpleFromStart", "Draft using the start limit as the reference"
       "SimpleFromProfile", "Draft using the profile as the reference"
       "Symmetric", "Draft on both sides of the profile using the same angle"
       "MatchedEnds", "Draft on both sides of the profile such that the end profiles match in areas"
       "Asymmetric", "Draft on both sides of the profile using the not same angle"
    """
    NoDraft = 0  # SimpleDraftSimpleDraftTypeMemberType
    SimpleFromStart = 1  # SimpleDraftSimpleDraftTypeMemberType
    SimpleFromProfile = 2  # SimpleDraftSimpleDraftTypeMemberType
    Symmetric = 3  # SimpleDraftSimpleDraftTypeMemberType
    MatchedEnds = 4  # SimpleDraftSimpleDraftTypeMemberType
    Asymmetric = 5  # SimpleDraftSimpleDraftTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SimpleDraft(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents an Offset .  
    
    .. versionadded:: NX4.0.0
    """
    
    class SimpleDraftType():
        """
        This enum represents the kind of simple_draft 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoDraft", "No draft"
           "SimpleFromStart", "Draft using the start limit as the reference"
           "SimpleFromProfile", "Draft using the profile as the reference"
           "Symmetric", "Draft on both sides of the profile using the same angle"
           "MatchedEnds", "Draft on both sides of the profile such that the end profiles match in areas"
           "Asymmetric", "Draft on both sides of the profile using the not same angle"
        """
        NoDraft = 0  # SimpleDraftSimpleDraftTypeMemberType
        SimpleFromStart = 1  # SimpleDraftSimpleDraftTypeMemberType
        SimpleFromProfile = 2  # SimpleDraftSimpleDraftTypeMemberType
        Symmetric = 3  # SimpleDraftSimpleDraftTypeMemberType
        MatchedEnds = 4  # SimpleDraftSimpleDraftTypeMemberType
        Asymmetric = 5  # SimpleDraftSimpleDraftTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetDraftAngle(self, draftAngle: str) -> None:
        """
        Sets the draft angle 
        
        Signature ``SetDraftAngle(draftAngle)`` 
        
        :param draftAngle:  Draft angle  
        :type draftAngle: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX5.0.0
           To set the value of the expression modify the expression directly using :py:meth:`GeometricUtilities.SimpleDraft.DraftAngle` and :py:meth:`Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DraftAngle: NXOpen.Expression = ...
    """
    Returns  the draft angle
    
    <hr>
    
    Getter Method
    
    Signature ``DraftAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    DraftType: SimpleDraftSimpleDraftType = ...
    """
    Returns or sets   the simple draft type
    
    <hr>
    
    Getter Method
    
    Signature ``DraftType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SimpleDraftSimpleDraftType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DraftType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.GeometricUtilities.SimpleDraftSimpleDraftType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: SimpleDraft = ...  # unknown typename


class TwoExpressionsCollectorSetList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[TwoExpressionsCollectorSet]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: TwoExpressionsCollectorSet) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: TwoExpressionsCollectorSet) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> TwoExpressionsCollectorSet:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TwoExpressionsCollectorSet) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TwoExpressionsCollectorSet, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[TwoExpressionsCollectorSet]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[TwoExpressionsCollectorSet]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: TwoExpressionsCollectorSet, object2: TwoExpressionsCollectorSet) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: TwoExpressionsCollectorSet) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsCollectorSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TwoExpressionsCollectorSetList = ...  # unknown typename


class RectangularFrameBuilderAnchorLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RectangularFrameBuilderAnchorLocationType():
    """
    Anchor location types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopLeft", "Top left position"
       "TopCenter", "Top center position"
       "TopRight", "Top right position"
       "MiddleLeft", "Middle left position"
       "MiddleCenter", "Middle center position"
       "MiddleRight", "Middle right position"
       "BottomLeft", "Bottom left position"
       "BottomCenter", "Bottom center position"
       "BottomRight", "Bottom right position"
    """
    TopLeft = 0  # RectangularFrameBuilderAnchorLocationTypeMemberType
    TopCenter = 1  # RectangularFrameBuilderAnchorLocationTypeMemberType
    TopRight = 2  # RectangularFrameBuilderAnchorLocationTypeMemberType
    MiddleLeft = 3  # RectangularFrameBuilderAnchorLocationTypeMemberType
    MiddleCenter = 4  # RectangularFrameBuilderAnchorLocationTypeMemberType
    MiddleRight = 5  # RectangularFrameBuilderAnchorLocationTypeMemberType
    BottomLeft = 6  # RectangularFrameBuilderAnchorLocationTypeMemberType
    BottomCenter = 7  # RectangularFrameBuilderAnchorLocationTypeMemberType
    BottomRight = 8  # RectangularFrameBuilderAnchorLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RectangularFrameBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Rectangular frame builder   
    
    .. versionadded:: NX7.5.1
    """
    
    class AnchorLocationType():
        """
        Anchor location types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopLeft", "Top left position"
           "TopCenter", "Top center position"
           "TopRight", "Top right position"
           "MiddleLeft", "Middle left position"
           "MiddleCenter", "Middle center position"
           "MiddleRight", "Middle right position"
           "BottomLeft", "Bottom left position"
           "BottomCenter", "Bottom center position"
           "BottomRight", "Bottom right position"
        """
        TopLeft = 0  # RectangularFrameBuilderAnchorLocationTypeMemberType
        TopCenter = 1  # RectangularFrameBuilderAnchorLocationTypeMemberType
        TopRight = 2  # RectangularFrameBuilderAnchorLocationTypeMemberType
        MiddleLeft = 3  # RectangularFrameBuilderAnchorLocationTypeMemberType
        MiddleCenter = 4  # RectangularFrameBuilderAnchorLocationTypeMemberType
        MiddleRight = 5  # RectangularFrameBuilderAnchorLocationTypeMemberType
        BottomLeft = 6  # RectangularFrameBuilderAnchorLocationTypeMemberType
        BottomCenter = 7  # RectangularFrameBuilderAnchorLocationTypeMemberType
        BottomRight = 8  # RectangularFrameBuilderAnchorLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateOnCoordinateSystem(self) -> None:
        """
        Updates the frame based on coordinate system.  
        
        Signature ``UpdateOnCoordinateSystem()`` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnchorLocation: RectangularFrameBuilderAnchorLocationType = ...
    """
    Returns or sets  the anchor location 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.RectangularFrameBuilderAnchorLocationType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorLocation`` 
    
    :param anchorLocation: 
    :type anchorLocation: :py:class:`NXOpen.GeometricUtilities.RectangularFrameBuilderAnchorLocationType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    AnchorLocator: NXOpen.SelectSmartObject = ...
    """
    Returns  the point or coordinate system to define initial location and orientation of the frame 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorLocator`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectSmartObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    CoordinateSystem: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coordinate system 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystem`` 
    
    :param coordinateSystem: 
    :type coordinateSystem: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    Shear: NXOpen.Expression = ...
    """
    Returns  the shear 
    
    <hr>
    
    Getter Method
    
    Signature ``Shear`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    WScale: float = ...
    """
    Returns or sets  the width scale 
    
    <hr>
    
    Getter Method
    
    Signature ``WScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WScale`` 
    
    :param wScale: 
    :type wScale: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    Null: RectangularFrameBuilder = ...  # unknown typename


class EntityUsageInfoList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[EntityUsageInfo]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: EntityUsageInfo) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: EntityUsageInfo) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> EntityUsageInfo:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: EntityUsageInfo) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: EntityUsageInfo, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[EntityUsageInfo]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[EntityUsageInfo]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: EntityUsageInfo, object2: EntityUsageInfo) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: EntityUsageInfo) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: EntityUsageInfoList = ...  # unknown typename


class ParentEquivalencyMapList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ParentEquivalencyMap]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ParentEquivalencyMap) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ParentEquivalencyMap) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ParentEquivalencyMap:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ParentEquivalencyMap) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ParentEquivalencyMap, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ParentEquivalencyMap]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ParentEquivalencyMap]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ParentEquivalencyMap, object2: ParentEquivalencyMap) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ParentEquivalencyMap) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ParentEquivalencyMapList = ...  # unknown typename


class NonInflectingLawBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a non-inflecting law.  
    
    This class represents :py:class:`NXOpen.GeometricUtilities.LawBuilderType.NonInflecting <NXOpen.GeometricUtilities.LawBuilderType>` type
    of law in :py:class:`NXOpen.GeometricUtilities.LawBuilder`.
    Objects of class :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` are used
    as law nodes in :py:class:`NXOpen.GeometricUtilities.NonInflectingLawBuilder`. Spine
    definition in this class is mandatory. The law nodes at start and end of the spine are fixed.
    Middle node can be located any where between start and end nodes.
    
    .. versionadded:: NX6.0.0
    """
    
    def UpdateSpine(self) -> None:
        """
        Update the builder based on current spine 
        
        Signature ``UpdateSpine()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndNode: OnPathDimWithValueBuilder = ...
    """
    Returns  the end node 
    
    <hr>
    
    Getter Method
    
    Signature ``EndNode`` 
    
    :returns:  law node  
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    MiddleNode: OnPathDimWithValueBuilder = ...
    """
    Returns  the middle node 
    
    <hr>
    
    Getter Method
    
    Signature ``MiddleNode`` 
    
    :returns:  law node  
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Spine: NXOpen.Section = ...
    """
    Returns  the Spine 
    
    <hr>
    
    Getter Method
    
    Signature ``Spine`` 
    
    :returns:  Section object representing spine  
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    StartNode: OnPathDimWithValueBuilder = ...
    """
    Returns  the start node 
    
    <hr>
    
    Getter Method
    
    Signature ``StartNode`` 
    
    :returns:  law node  
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Null: NonInflectingLawBuilder = ...  # unknown typename


class TransitionLawNodeBuilderTransitionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransitionLawNodeBuilderTransitionType():
    """
    Represents a transition type at a law node.
    Transition type is a type of interpolation used to evaluate intermediate values from
    one law node to the next law node. 
    The transition is applied in the direction of the spine on which the law nodes reside.
    Not all nodes support all types of transitions. Consult the referencing law class
    documentation to see which transition types are supported by which law nodes.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "No interpolation type"
       "Constant", "Constant transition"
       "Linear", "Linear transition"
       "Blend", "Smooth blended transition"
       "Minmax", "Minimum-Maximum type transition"
    """
    Unknown = 0  # TransitionLawNodeBuilderTransitionTypeMemberType
    Constant = 1  # TransitionLawNodeBuilderTransitionTypeMemberType
    Linear = 2  # TransitionLawNodeBuilderTransitionTypeMemberType
    Blend = 3  # TransitionLawNodeBuilderTransitionTypeMemberType
    Minmax = 4  # TransitionLawNodeBuilderTransitionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransitionLawNodeBuilder(OnPathDimWithValueBuilder):
    """
    Represents a law node with transition type.  
    
    This class extends :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` such
    that apart from specifying a value at a location on spine, it allows specification of transition type.
    This class represents a law node in :py:class:`NXOpen.GeometricUtilities.MultiTransitionLawBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class TransitionType():
        """
        Represents a transition type at a law node.
        Transition type is a type of interpolation used to evaluate intermediate values from
        one law node to the next law node. 
        The transition is applied in the direction of the spine on which the law nodes reside.
        Not all nodes support all types of transitions. Consult the referencing law class
        documentation to see which transition types are supported by which law nodes.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "No interpolation type"
           "Constant", "Constant transition"
           "Linear", "Linear transition"
           "Blend", "Smooth blended transition"
           "Minmax", "Minimum-Maximum type transition"
        """
        Unknown = 0  # TransitionLawNodeBuilderTransitionTypeMemberType
        Constant = 1  # TransitionLawNodeBuilderTransitionTypeMemberType
        Linear = 2  # TransitionLawNodeBuilderTransitionTypeMemberType
        Blend = 3  # TransitionLawNodeBuilderTransitionTypeMemberType
        Minmax = 4  # TransitionLawNodeBuilderTransitionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Transition: TransitionLawNodeBuilderTransitionType = ...
    """
    Returns or sets  the transition type 
    
    <hr>
    
    Getter Method
    
    Signature ``Transition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``Transition`` 
    
    :param transition: 
    :type transition: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Null: TransitionLawNodeBuilder = ...  # unknown typename


class NestModuleBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.NestModuleBuilder` 
    
    Note that this class is now deprecated. Please use the 
    :py:class:`NXOpen.Features.FeatureCollection` instead.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.FeatureCollection.CreateNestModuleBuilder`
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Features.FeatureCollection` instead.
    """
    DestinationModule: NXOpen.Features.SelectFeature = ...
    """
    Returns  the destination module 
    
    This API is now deprecated.
    Please use :py:meth:`NXOpen.Features.FeatureCollection.ReorganizeFeature` instead.
    
    <hr>
    
    Getter Method
    
    Signature ``DestinationModule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Please use :py:meth:`NXOpen.Features.FeatureCollection.ReorganizeFeature` instead.
    
    License requirements: None.
    """
    ModuleToNest: NXOpen.Features.SelectFeature = ...
    """
    Returns  the module to nest 
    
    This API is now deprecated.
    Please use :py:meth:`NXOpen.Features.FeatureCollection.ReorganizeFeature` instead.
    
    <hr>
    
    Getter Method
    
    Signature ``ModuleToNest`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Please use :py:meth:`NXOpen.Features.FeatureCollection.ReorganizeFeature` instead.
    
    License requirements: None.
    """
    Null: NestModuleBuilder = ...  # unknown typename


class BoundingObjectBuilderMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BoundingObjectBuilderMethod():
    """
    Represents Bounding Object option types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ExistingCurve", "Existing Curve"
       "ProjectPoint", "Project Point"
       "LineBy2Points", "Line by 2 Points"
       "PointAndVector", "Point and Vector"
       "ByPlane", "By Plane"
    """
    ExistingCurve = 0  # BoundingObjectBuilderMethodMemberType
    ProjectPoint = 1  # BoundingObjectBuilderMethodMemberType
    LineBy2Points = 2  # BoundingObjectBuilderMethodMemberType
    PointAndVector = 3  # BoundingObjectBuilderMethodMemberType
    ByPlane = 4  # BoundingObjectBuilderMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BoundingObjectBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class Method():
        """
        Represents Bounding Object option types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ExistingCurve", "Existing Curve"
           "ProjectPoint", "Project Point"
           "LineBy2Points", "Line by 2 Points"
           "PointAndVector", "Point and Vector"
           "ByPlane", "By Plane"
        """
        ExistingCurve = 0  # BoundingObjectBuilderMethodMemberType
        ProjectPoint = 1  # BoundingObjectBuilderMethodMemberType
        LineBy2Points = 2  # BoundingObjectBuilderMethodMemberType
        PointAndVector = 3  # BoundingObjectBuilderMethodMemberType
        ByPlane = 4  # BoundingObjectBuilderMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BoundingCurve: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the existing bounding curve.  
    
    This is applicable for :py:class:` NXOpen.GeometricUtilities.BoundingObjectBuilderMethod.ExistingCurve < NXOpen.GeometricUtilities.BoundingObjectBuilderMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    BoundingObjectMethod: BoundingObjectBuilderMethod = ...
    """
    Returns or sets  the bounding object method 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingObjectMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilderMethod` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingObjectMethod`` 
    
    :param boundingObjectMethod: 
    :type boundingObjectMethod: :py:class:`NXOpen.GeometricUtilities.BoundingObjectBuilderMethod` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    BoundingPlane: NXOpen.Plane = ...
    """
    Returns or sets  the bounding plane.  
    
    This is applicable for :py:class:` NXOpen.GeometricUtilities.BoundingObjectBuilderMethod.ByPlane < NXOpen.GeometricUtilities.BoundingObjectBuilderMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingPlane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    BoundingPoint: NXOpen.Point = ...
    """
    Returns or sets  the bounding point.  
    
    This is applicable for :py:class:` NXOpen.GeometricUtilities.BoundingObjectBuilderMethod.PointAndVector < NXOpen.GeometricUtilities.BoundingObjectBuilderMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    BoundingPoint1: NXOpen.Point = ...
    """
    Returns or sets  the bounding point1.  
    
    This represents first bounding point. This is applicable for :py:class:` NXOpen.GeometricUtilities.BoundingObjectBuilderMethod.LineBy2Points < NXOpen.GeometricUtilities.BoundingObjectBuilderMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingPoint1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingPoint1`` 
    
    :param point1: 
    :type point1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    BoundingPoint2: NXOpen.Point = ...
    """
    Returns or sets  the bounding point2.  
    
    This represents second bounding point. This is applicable for :py:class:` NXOpen.GeometricUtilities.BoundingObjectBuilderMethod.LineBy2Points < NXOpen.GeometricUtilities.BoundingObjectBuilderMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingPoint2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingPoint2`` 
    
    :param point2: 
    :type point2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    BoundingProjectPoint: NXOpen.Point = ...
    """
    Returns or sets  the bounding project point.  
    
    This is applicable for :py:class:` NXOpen.GeometricUtilities.BoundingObjectBuilderMethod.ProjectPoint < NXOpen.GeometricUtilities.BoundingObjectBuilderMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingProjectPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingProjectPoint`` 
    
    :param projectPoint: 
    :type projectPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    BoundingVector: NXOpen.Direction = ...
    """
    Returns or sets  the bounding vector.  
    
    This is applicable for :py:class:` NXOpen.GeometricUtilities.BoundingObjectBuilderMethod.PointAndVector < NXOpen.GeometricUtilities.BoundingObjectBuilderMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingVector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    IntersectionReference: NXOpen.Point = ...
    """
    Returns or sets  the intersection reference 
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectionReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntersectionReference`` 
    
    :param intersectionReference: 
    :type intersectionReference: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    Null: BoundingObjectBuilder = ...  # unknown typename


class SelectionListList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SelectionList]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SelectionList) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SelectionList) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SelectionList:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SelectionList) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SelectionList, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SelectionList]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SelectionList]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SelectionList, object2: SelectionList) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SelectionList) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.SelectionList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectionListList = ...  # unknown typename


class TransformerDataObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransformerDataObjectType():
    """
    Type of objects. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Origin", " - "
       "TranslationX", " - "
       "TranslationY", " - "
       "TranslationZ", " - "
       "RotationXY", " - "
       "RotationYZ", " - "
       "RotationXZ", " - "
       "ScaleX", " - "
       "ScaleY", " - "
       "ScaleZ", " - "
       "DirectionX", " - "
       "DirectionY", " - "
       "DirectionZ", " - "
       "PlaneXY", " - "
       "PlaneYZ", " - "
       "PlaneXZ", " - "
       "ArcXY", " - "
       "ArcYZ", " - "
       "ArcXZ", " - "
    """
    NotSet = 0  # TransformerDataObjectTypeMemberType
    Origin = 1  # TransformerDataObjectTypeMemberType
    TranslationX = 2  # TransformerDataObjectTypeMemberType
    TranslationY = 3  # TransformerDataObjectTypeMemberType
    TranslationZ = 4  # TransformerDataObjectTypeMemberType
    RotationXY = 5  # TransformerDataObjectTypeMemberType
    RotationYZ = 6  # TransformerDataObjectTypeMemberType
    RotationXZ = 7  # TransformerDataObjectTypeMemberType
    ScaleX = 8  # TransformerDataObjectTypeMemberType
    ScaleY = 9  # TransformerDataObjectTypeMemberType
    ScaleZ = 10  # TransformerDataObjectTypeMemberType
    DirectionX = 11  # TransformerDataObjectTypeMemberType
    DirectionY = 12  # TransformerDataObjectTypeMemberType
    DirectionZ = 13  # TransformerDataObjectTypeMemberType
    PlaneXY = 14  # TransformerDataObjectTypeMemberType
    PlaneYZ = 15  # TransformerDataObjectTypeMemberType
    PlaneXZ = 16  # TransformerDataObjectTypeMemberType
    ArcXY = 17  # TransformerDataObjectTypeMemberType
    ArcYZ = 18  # TransformerDataObjectTypeMemberType
    ArcXZ = 19  # TransformerDataObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransformerData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Transformation and orientation tool.  
    
    .. versionadded:: NX9.0.0
    """
    
    class ObjectType():
        """
        Type of objects. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Origin", " - "
           "TranslationX", " - "
           "TranslationY", " - "
           "TranslationZ", " - "
           "RotationXY", " - "
           "RotationYZ", " - "
           "RotationXZ", " - "
           "ScaleX", " - "
           "ScaleY", " - "
           "ScaleZ", " - "
           "DirectionX", " - "
           "DirectionY", " - "
           "DirectionZ", " - "
           "PlaneXY", " - "
           "PlaneYZ", " - "
           "PlaneXZ", " - "
           "ArcXY", " - "
           "ArcYZ", " - "
           "ArcXZ", " - "
        """
        NotSet = 0  # TransformerDataObjectTypeMemberType
        Origin = 1  # TransformerDataObjectTypeMemberType
        TranslationX = 2  # TransformerDataObjectTypeMemberType
        TranslationY = 3  # TransformerDataObjectTypeMemberType
        TranslationZ = 4  # TransformerDataObjectTypeMemberType
        RotationXY = 5  # TransformerDataObjectTypeMemberType
        RotationYZ = 6  # TransformerDataObjectTypeMemberType
        RotationXZ = 7  # TransformerDataObjectTypeMemberType
        ScaleX = 8  # TransformerDataObjectTypeMemberType
        ScaleY = 9  # TransformerDataObjectTypeMemberType
        ScaleZ = 10  # TransformerDataObjectTypeMemberType
        DirectionX = 11  # TransformerDataObjectTypeMemberType
        DirectionY = 12  # TransformerDataObjectTypeMemberType
        DirectionZ = 13  # TransformerDataObjectTypeMemberType
        PlaneXY = 14  # TransformerDataObjectTypeMemberType
        PlaneYZ = 15  # TransformerDataObjectTypeMemberType
        PlaneXZ = 16  # TransformerDataObjectTypeMemberType
        ArcXY = 17  # TransformerDataObjectTypeMemberType
        ArcYZ = 18  # TransformerDataObjectTypeMemberType
        ArcXZ = 19  # TransformerDataObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Reverse(self, axisType: TransformerDataObjectType) -> None:
        """
        Reverses the axis.  
        
        Signature ``Reverse(axisType)`` 
        
        :param axisType: 
        :type axisType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def StartTransformation(self) -> None:
        """
        Sets current coordinate system as reference coordinate system for
        the transformation.  
        
        Signature ``StartTransformation()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def UpdateOnOriginMove(self) -> None:
        """
        Updates tool upon movement of the point representing origin.  
        
        Signature ``UpdateOnOriginMove()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Translate(self, axisType: TransformerDataObjectType, distance: float) -> None:
        """
        Translates the tool.  
        
        Signature ``Translate(axisType, distance)`` 
        
        :param axisType: 
        :type axisType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        :param distance: 
        :type distance: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Rotate(self, axisType: TransformerDataObjectType, angle: float) -> None:
        """
        Rotates the tool.  
        
        Signature ``Rotate(axisType, angle)`` 
        
        :param axisType: 
        :type axisType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        :param angle: 
        :type angle: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Scale(self, axisType: TransformerDataObjectType, factor: float) -> None:
        """
        Sets the scale factor.  
        
        Signature ``Scale(axisType, factor)`` 
        
        :param axisType: 
        :type axisType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        :param factor: 
        :type factor: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Activate(self, objectType: TransformerDataObjectType) -> None:
        """
        Sets a component of the tool to be active.  
        
        Signature ``Activate(objectType)`` 
        
        :param objectType: 
        :type objectType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Reposition(self, origin: NXOpen.Point3d, matrix: NXOpen.Matrix3x3) -> None:
        """
        Repositions the tool at a coordinate system.  
        
        Signature ``Reposition(origin, matrix)`` 
        
        :param origin: 
        :type origin: :py:class:`NXOpen.Point3d` 
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RepositionByOrigin(self, origin: NXOpen.Point3d) -> None:
        """
        Repositions the tool by changing its origin.  
        
        Signature ``RepositionByOrigin(origin)`` 
        
        :param origin: 
        :type origin: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def ReorientByCoordinateSystem(self, matrix: NXOpen.Matrix3x3) -> None:
        """
        Reorient the tool by aligning it to a coordinate system.  
        
        Signature ``ReorientByCoordinateSystem(matrix)`` 
        
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def ReorientByDirection(self, objectType: TransformerDataObjectType, direction: NXOpen.Vector3d) -> None:
        """
        Reorient the tool by changing its axis direction.  
        
        Signature ``ReorientByDirection(objectType, direction)`` 
        
        :param objectType: 
        :type objectType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        :param direction: 
        :type direction: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RepositionByPlane(self, objectType: TransformerDataObjectType, planeOrigin: NXOpen.Point3d, planeNormal: NXOpen.Vector3d) -> None:
        """
        Repositions the tool by changing its plane.  
        
        Signature ``RepositionByPlane(objectType, planeOrigin, planeNormal)`` 
        
        :param objectType: 
        :type objectType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        :param planeOrigin: 
        :type planeOrigin: :py:class:`NXOpen.Point3d` 
        :param planeNormal: 
        :type planeNormal: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def AlignToWorkCoordinateSystem(self) -> None:
        """
        Reorient the tool by aligning it to work coordinate system 
        
        Signature ``AlignToWorkCoordinateSystem()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def AlignToAbsoluteCoordinateSystem(self) -> None:
        """
        Reorient the tool by aligning it to absolute coordinate system 
        
        Signature ``AlignToAbsoluteCoordinateSystem()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetTransformationObject(self, objectType: TransformerDataObjectType) -> None:
        """
        Sets a component of the tool using which transformation is started.  
        
        It is possible
        that user starts transformation without activating a tool component. 
        
        Signature ``SetTransformationObject(objectType)`` 
        
        :param objectType: 
        :type objectType: :py:class:`NXOpen.GeometricUtilities.TransformerDataObjectType` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: TransformerData = ...  # unknown typename


class MatchSurfaceBuilderMatchConstaintMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MatchSurfaceBuilderMatchConstaint():
    """
    This enum represents the type of constaints 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Position", " - "
       "Tangent", " - "
    """
    Position = 0  # MatchSurfaceBuilderMatchConstaintMemberType
    Tangent = 1  # MatchSurfaceBuilderMatchConstaintMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MatchSurfaceBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.MatchSurfaceBuilder` builder.  
    
    This builder's Commit can create a b-surface 
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.CAMDataPrepManager.CreateMatchSurfaceBuilder`
    
    Default values.
    
    ===========  ========
    Property     Value
    ===========  ========
    Constraint   Tangent 
    -----------  --------
    EndToEnd     1 
    -----------  --------
    KeepSheet    0 
    -----------  --------
    MatchExact   1 
    ===========  ========
    
    .. versionadded:: NX9.0.0
    """
    
    class MatchConstaint():
        """
        This enum represents the type of constaints 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Position", " - "
           "Tangent", " - "
        """
        Position = 0  # MatchSurfaceBuilderMatchConstaintMemberType
        Tangent = 1  # MatchSurfaceBuilderMatchConstaintMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    Constraint: MatchSurfaceBuilderMatchConstaint = ...
    """
    Returns or sets  the continuity type for matching 
    
    <hr>
    
    Getter Method
    
    Signature ``Constraint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.MatchSurfaceBuilderMatchConstaint` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Constraint`` 
    
    :param constraint: 
    :type constraint: :py:class:`NXOpen.GeometricUtilities.MatchSurfaceBuilderMatchConstaint` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distTolerance: 
    :type distTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    EditEdge: NXOpen.SelectEdge = ...
    """
    Returns  the selected edge for matching 
    
    <hr>
    
    Getter Method
    
    Signature ``EditEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EndToEnd: bool = ...
    """
    Returns or sets  the option to match end-to-end, between the end of edit edge and the reference egde or curve 
    
    <hr>
    
    Getter Method
    
    Signature ``EndToEnd`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndToEnd`` 
    
    :param endToEnd: 
    :type endToEnd: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    KeepSheet: bool = ...
    """
    Returns or sets  the option to keep original sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSheet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSheet`` 
    
    :param keepSheet: 
    :type keepSheet: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    MatchExact: bool = ...
    """
    Returns or sets  the option to match exact, between the end of edit edge and the reference egde or curve 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchExact`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MatchExact`` 
    
    :param matchExact: 
    :type matchExact: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    Reference: NXOpen.SelectEdge = ...
    """
    Returns  the selected reference edge or curve  
    
    <hr>
    
    Getter Method
    
    Signature ``Reference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReferenceFace: NXOpen.SelectFace = ...
    """
    Returns  the selected face for reference curve  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RegionLimit: OnPathDimensionBuilder = ...
    """
    Returns  the distance limit of deformation region 
    
    <hr>
    
    Getter Method
    
    Signature ``RegionLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: MatchSurfaceBuilder = ...  # unknown typename


class OnPathDimensionBuilderUpdateReasonMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OnPathDimensionBuilderUpdateReason():
    """
    The type of update to perform 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Path", "Update because of the path may have changed"
       "ThroughPoint", "Update because the through point location may have changed"
       "All", "Update because either path or through point location may have changed"
    """
    Path = 1  # OnPathDimensionBuilderUpdateReasonMemberType
    ThroughPoint = 2  # OnPathDimensionBuilderUpdateReasonMemberType
    All = 3  # OnPathDimensionBuilderUpdateReasonMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OnPathDimensionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Builds an on-path dimension   
    
    .. versionadded:: NX5.0.0
    """
    
    class UpdateReason():
        """
        The type of update to perform 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Path", "Update because of the path may have changed"
           "ThroughPoint", "Update because the through point location may have changed"
           "All", "Update because either path or through point location may have changed"
        """
        Path = 1  # OnPathDimensionBuilderUpdateReasonMemberType
        ThroughPoint = 2  # OnPathDimensionBuilderUpdateReasonMemberType
        All = 3  # OnPathDimensionBuilderUpdateReasonMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Update(self, updateReason: OnPathDimensionBuilderUpdateReason) -> None:
        """
        Updates this object if the path or through point location has changed.  
        
        Call this function if the path is a section
        and you have added or removed curves from the section, or if there
        is a through point and the coordinates of the through point have changed. 
        
        Signature ``Update(updateReason)`` 
        
        :param updateReason: 
        :type updateReason: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilderUpdateReason` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Expression: NXOpen.Expression = ...
    """
    Returns  the expression for the value of the dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``Expression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    IsFlipped: bool = ...
    """
    Returns or sets  a flag indicating whether the length along the path is evaluated
    starting from the end point of path instead of the start point of the path 
    
    <hr>
    
    Getter Method
    
    Signature ``IsFlipped`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsFlipped`` 
    
    :param flipped: 
    :type flipped: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    IsParameterUsed: bool = ...
    """
    Returns or sets  a flag indicating whether the expression is in terms of the mathematical
    parameter of the path (is_parameter_used = true) or in terms of its 
    arclength (is_parameter_used = false).  
    
    When value is true, the value
    will always be expressed in terms of percentage (between 0 and 100) regardless
    of is_percent_used's setting.  This property must be used with care.  Most 
    referencing classes will only accept arclength values, and setting this property 
    to true for those classes will result in a run time error.  Consult the referencing
    class documentation to see if this value can be true for that particular operation. 
    
    <hr>
    
    Getter Method
    
    Signature ``IsParameterUsed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsParameterUsed`` 
    
    :param useParameter: 
    :type useParameter: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    IsPercentUsed: bool = ...
    """
    Returns or sets  a flag indicating whether the expression represents the percentage along
    the path.  
    
    If false, the expression represents the length along the path 
    
    <hr>
    
    Getter Method
    
    Signature ``IsPercentUsed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsPercentUsed`` 
    
    :param usePercent: 
    :type usePercent: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Path: NXOpen.SelectObject = ...
    """
    Returns  the path that the dimension is evaluated on.  
    
    Note: in some cases, the
    builder will not permit you to change the path 
    
    <hr>
    
    Getter Method
    
    Signature ``Path`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ThroughPoint: NXOpen.Point = ...
    """
    Returns or sets  the through point 
    
    <hr>
    
    Getter Method
    
    Signature ``ThroughPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThroughPoint`` 
    
    :param throughPoint: 
    :type throughPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: OnPathDimensionBuilder = ...  # unknown typename


class TransitionLawNodeBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[TransitionLawNodeBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: TransitionLawNodeBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: TransitionLawNodeBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> TransitionLawNodeBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TransitionLawNodeBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TransitionLawNodeBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[TransitionLawNodeBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[TransitionLawNodeBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: TransitionLawNodeBuilder, object2: TransitionLawNodeBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: TransitionLawNodeBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TransitionLawNodeBuilderList = ...  # unknown typename


class ShapeFrameBuilderAnchorAttachmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShapeFrameBuilderAnchorAttachmentType():
    """
    Represents the anchor attachment type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Anchor is not attached to the frame"
       "Center", "Anchor is attached to the center of the frame"
       "Vertex1", "Anchor is attached to the first vertex of the frame"
       "Vertex2", "Anchor is attached to the second vertex of the frame"
       "Vertex3", "Anchor is attached to the third vertex of the frame"
       "Vertex4", "Anchor is attached to the fourth vertex of the frame"
    """
    NotSet = 0  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
    Center = 1  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
    Vertex1 = 2  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
    Vertex2 = 3  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
    Vertex3 = 4  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
    Vertex4 = 5  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShapeFrameBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ShapeFrameBuilder`   
    
    .. versionadded:: NX6.0.0
    """
    
    class AnchorAttachmentType():
        """
        Represents the anchor attachment type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Anchor is not attached to the frame"
           "Center", "Anchor is attached to the center of the frame"
           "Vertex1", "Anchor is attached to the first vertex of the frame"
           "Vertex2", "Anchor is attached to the second vertex of the frame"
           "Vertex3", "Anchor is attached to the third vertex of the frame"
           "Vertex4", "Anchor is attached to the fourth vertex of the frame"
        """
        NotSet = 0  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
        Center = 1  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
        Vertex1 = 2  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
        Vertex2 = 3  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
        Vertex3 = 4  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
        Vertex4 = 5  # ShapeFrameBuilderAnchorAttachmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetVertexCoords(self, index: int) -> NXOpen.Point2d:
        """
        Gets the coordinates of the i-th vertex of the frame with respect to the plane  
        
        Signature ``GetVertexCoords(index)`` 
        
        :param index:  index of vertex  
        :type index: int 
        :returns:  coordinates of vertex relative with respect to plane  
        :rtype: :py:class:`NXOpen.Point2d` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetVertexCoords(self, index: int, coords: NXOpen.Point2d) -> None:
        """
        Sets the coordinates of the i-th vertex of the frame with respect to the plane 
        
        Signature ``SetVertexCoords(index, coords)`` 
        
        :param index:  index of vertex  
        :type index: int 
        :param coords:  coordinates of vertex relative with respect to plane  
        :type coords: :py:class:`NXOpen.Point2d` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetMidpointCoords(self, index: int) -> NXOpen.Point2d:
        """
        Gets the coordinates of the i-th midpoint of the frame with respect to the plane  
        
        Signature ``GetMidpointCoords(index)`` 
        
        :param index:  index of midpoint  
        :type index: int 
        :returns:  coordinates of midpoint relative with respect to plane  
        :rtype: :py:class:`NXOpen.Point2d` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMidpointCoords(self, index: int, coords: NXOpen.Point2d) -> None:
        """
        Sets the coordinates of the i-th midpoint of the frame with respect to the plane 
        
        Signature ``SetMidpointCoords(index, coords)`` 
        
        :param index:  index of midpoint  
        :type index: int 
        :param coords:  coordinates of midpoint relative with respect to plane  
        :type coords: :py:class:`NXOpen.Point2d` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Anchor: AnchorLocatorBuilder = ...
    """
    Returns  the anchor of the frame 
    
    <hr>
    
    Getter Method
    
    Signature ``Anchor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AnchorLocatorBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AnchorAttachment: ShapeFrameBuilderAnchorAttachmentType = ...
    """
    Returns or sets  the anchor attachment 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ShapeFrameBuilderAnchorAttachmentType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorAttachment`` 
    
    :param anchorAttachment: 
    :type anchorAttachment: :py:class:`NXOpen.GeometricUtilities.ShapeFrameBuilderAnchorAttachmentType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NumberVertices: int = ...
    """
    Returns  the number of vertices of the frame 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberVertices`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ShapeFrameBuilder = ...  # unknown typename


class TriangularFrameBuilderSubtypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TriangularFrameBuilderSubtypes():
    """
    Represents the triangular frame subtypes 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Arbitrary", "Arbitrary triangle"
       "Isosceles", "Isosceles triangle"
       "Equilateral", "Equilateral triangle"
       "Rightangle", "Right angle triangle"
    """
    Arbitrary = 0  # TriangularFrameBuilderSubtypesMemberType
    Isosceles = 1  # TriangularFrameBuilderSubtypesMemberType
    Equilateral = 2  # TriangularFrameBuilderSubtypesMemberType
    Rightangle = 3  # TriangularFrameBuilderSubtypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TriangularFrameBuilder(ShapeFrameBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.TriangularFrameBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Subtypes():
        """
        Represents the triangular frame subtypes 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Arbitrary", "Arbitrary triangle"
           "Isosceles", "Isosceles triangle"
           "Equilateral", "Equilateral triangle"
           "Rightangle", "Right angle triangle"
        """
        Arbitrary = 0  # TriangularFrameBuilderSubtypesMemberType
        Isosceles = 1  # TriangularFrameBuilderSubtypesMemberType
        Equilateral = 2  # TriangularFrameBuilderSubtypesMemberType
        Rightangle = 3  # TriangularFrameBuilderSubtypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Subtype: TriangularFrameBuilderSubtypes = ...
    """
    Returns or sets  the subtype 
    
    <hr>
    
    Getter Method
    
    Signature ``Subtype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.TriangularFrameBuilderSubtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Subtype`` 
    
    :param subtype: 
    :type subtype: :py:class:`NXOpen.GeometricUtilities.TriangularFrameBuilderSubtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: TriangularFrameBuilder = ...  # unknown typename


class PatternDefinitionPatternEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternDefinitionPatternEnum():
    """
    pattern types available.  For details on the interface of each type,
    visit the corresponding definition class for each type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "pattern along single linear direction."
       "Circular", "pattern in angular and radial directions."
       "Polygon", "polygon pattern."
       "Spiral", "spiral pattern."
       "AlongPath", "pattern along a section path."
       "General", "general pattern."
       "Reference", "reference pattern."
       "Mirror", "mirror pattern."
       "Helix", "helix pattern."
    """
    Linear = 0  # PatternDefinitionPatternEnumMemberType
    Circular = 1  # PatternDefinitionPatternEnumMemberType
    Polygon = 2  # PatternDefinitionPatternEnumMemberType
    Spiral = 3  # PatternDefinitionPatternEnumMemberType
    AlongPath = 4  # PatternDefinitionPatternEnumMemberType
    General = 5  # PatternDefinitionPatternEnumMemberType
    Reference = 6  # PatternDefinitionPatternEnumMemberType
    Mirror = 7  # PatternDefinitionPatternEnumMemberType
    Helix = 8  # PatternDefinitionPatternEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternDefinition(NXOpen.TaggedObject, IComponentBuilder):
    """
    pattern spacing for several pattern based commands.  
    
    See PatternEnum definition
    below for a listing of the various pattern definitions available. 
    
    .. versionadded:: NX7.5.0
    """
    
    class PatternEnum():
        """
        pattern types available.  For details on the interface of each type,
        visit the corresponding definition class for each type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "pattern along single linear direction."
           "Circular", "pattern in angular and radial directions."
           "Polygon", "polygon pattern."
           "Spiral", "spiral pattern."
           "AlongPath", "pattern along a section path."
           "General", "general pattern."
           "Reference", "reference pattern."
           "Mirror", "mirror pattern."
           "Helix", "helix pattern."
        """
        Linear = 0  # PatternDefinitionPatternEnumMemberType
        Circular = 1  # PatternDefinitionPatternEnumMemberType
        Polygon = 2  # PatternDefinitionPatternEnumMemberType
        Spiral = 3  # PatternDefinitionPatternEnumMemberType
        AlongPath = 4  # PatternDefinitionPatternEnumMemberType
        General = 5  # PatternDefinitionPatternEnumMemberType
        Reference = 6  # PatternDefinitionPatternEnumMemberType
        Mirror = 7  # PatternDefinitionPatternEnumMemberType
        Helix = 8  # PatternDefinitionPatternEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreatePatternInstanceEditBuilder(self) -> PatternInstanceEditBuilder:
        """
        This is the default creator for :py:class:`NXOpen.GeometricUtilities.PatternInstanceEditBuilder`.  
        
        Signature ``CreatePatternInstanceEditBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternInstanceEditBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSuppressState(self, index1: int, index2: int) -> bool:
        """
        Gets the suppress state for the instance at the specified indicies.  
        
        Signature ``GetSuppressState(index1, index2)`` 
        
        :param index1:  First index of instance  
        :type index1: int 
        :param index2:  Second index of instance  
        :type index2: int 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSuppressState(self, index1: int, index2: int, suppressState: bool) -> None:
        """
        Sets the suppress state for the instance at the specified indicies.  
        
        Signature ``SetSuppressState(index1, index2, suppressState)`` 
        
        :param index1:  First index of instance  
        :type index1: int 
        :param index2:  Second index of instance  
        :type index2: int 
        :param suppressState:  Input suppress state  
        :type suppressState: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def GetDeleteState(self, index1: int, index2: int) -> bool:
        """
        Gets the delete state for the instance at the specified indicies.  
        
        Signature ``GetDeleteState(index1, index2)`` 
        
        :param index1:  First index of instance  
        :type index1: int 
        :param index2:  Second index of instance  
        :type index2: int 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDeleteState(self, index1: int, index2: int, deleteState: bool) -> None:
        """
        Sets the delete state for the instance at the specified indicies.  
        
        Signature ``SetDeleteState(index1, index2, deleteState)`` 
        
        :param index1:  First index of instance  
        :type index1: int 
        :param index2:  Second index of instance  
        :type index2: int 
        :param deleteState:  Input suppress state  
        :type deleteState: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def CreateClockingBuilder(self, ix: int, iy: int) -> PatternClockingBuilder:
        """
        Creates a pattern clocking object  
        
        Signature ``CreateClockingBuilder(ix, iy)`` 
        
        :param ix:  x index of instance to initialize to  
        :type ix: int 
        :param iy:  y index of instance to initialize to  
        :type iy: int 
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternClockingBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetClocking(self, index1: int, index2: int) -> PatternClocking:
        """
        Returns the clocking data for a :py:class:`NXOpen.GeometricUtilities.PatternDefinition` instance  
        
        Signature ``GetClocking(index1, index2)`` 
        
        :param index1:  First index into pattern instance array  
        :type index1: int 
        :param index2:  Second index into pattern instance array   
        :type index2: int 
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternClocking` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.0.0
           Use :py:meth:`NXOpen.GeometricUtilities.PatternDefinition.CreateClockingBuilder` instead.
        
        License requirements: None.
        """
        ...
    
    
    def RemoveClocking(self, index1: int, index2: int) -> None:
        """
        Removes clocking from pattern definition instance 
        
        Signature ``RemoveClocking(index1, index2)`` 
        
        :param index1:  First index into pattern instance array  
        :type index1: int 
        :param index2:  Second index into pattern instance array  
        :type index2: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveVariance(self, index1: int, index2: int) -> None:
        """
        Removes variance from pattern definition instance 
        
        Signature ``RemoveVariance(index1, index2)`` 
        
        :param index1:  First index into pattern instance array  
        :type index1: int 
        :param index2:  Second index into pattern instance array  
        :type index2: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSpreadsheetData(self, spreadsheetTableArray: 'list[float]', locationTableArray: 'list[float]', defaultTableArray: 'list[bool]') -> None:
        """
        Sets the spreadsheet data 
        
        Signature ``SetSpreadsheetData(spreadsheetTableArray, locationTableArray, defaultTableArray)`` 
        
        :param spreadsheetTableArray: 
        :type spreadsheetTableArray: list of float 
        :param locationTableArray: 
        :type locationTableArray: list of float 
        :param defaultTableArray: 
        :type defaultTableArray: list of bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlongPathDefinition: AlongPathPattern = ...
    """
    Returns  the along path definition.  
    
    See AlongPathPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``AlongPathDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlongPathPattern` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircularDefinition: CircularPattern = ...
    """
    Returns  the circular definition.  
    
    See CircularPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``CircularDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CircularPattern` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FrameOnlyToggle: bool = ...
    """
    Returns or sets  the frameOnlyToggle, a logical flag to indicate if the we need only instances on the boundary.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrameOnlyToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrameOnlyToggle`` 
    
    :param frameOnlyToggle: 
    :type frameOnlyToggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    GeneralDefinition: GeneralPattern = ...
    """
    Returns  the general definition.  
    
    See GeneralPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.GeneralPattern` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HelixDefinition: HelixPattern = ...
    """
    Returns  the helix definition.  
    
    See HelixPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``HelixDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.HelixPattern` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MirrorDefinition: MirrorPattern = ...
    """
    Returns  the mirror definition.  
    
    See MirrorPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.MirrorPattern` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PatternFill: PatternFill = ...
    """
    Returns  the pattern fill definition.  
    
    See PatternFill for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``PatternFill`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternFill` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PatternIncrementsBuilder: PatternIncrementsBuilder = ...
    """
    Returns  the pattern increments definition.  
    
    See :py:class:`NXOpen.GeometricUtilities.PatternIncrementsBuilder` for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``PatternIncrementsBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PatternOrientation: PatternOrientation = ...
    """
    Returns  the pattern orientation definition.  
    
    See PatternOrientation for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``PatternOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternOrientation` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PatternType: PatternDefinitionPatternEnum = ...
    """
    Returns or sets  the pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``PatternType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternDefinitionPatternEnum` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PatternType`` 
    
    :param patternType: 
    :type patternType: :py:class:`NXOpen.GeometricUtilities.PatternDefinitionPatternEnum` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PolygonDefinition: PolygonPattern = ...
    """
    Returns  the polygon definition.  
    
    See PolygonPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``PolygonDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PolygonPattern` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RectangularDefinition: RectangularPattern = ...
    """
    Returns  the linear definition.  
    
    See LinearPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.RectangularPattern` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReferenceDefinition: ReferencePattern = ...
    """
    Returns  the reference definition.  
    
    See ReferencePattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ReferencePattern` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SeedOnlyToggle: bool = ...
    """
    Returns or sets  the seedOnlyToggle, a logical flag to indicate if the we need only instances for the seed along the second direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeedOnlyToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeedOnlyToggle`` 
    
    :param seedOnlyToggle: 
    :type seedOnlyToggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    SpiralDefinition: SpiralPattern = ...
    """
    Returns  the spiral definition.  
    
    See SpiralPattern for details. 
    
    <hr>
    
    Getter Method
    
    Signature ``SpiralDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SpiralPattern` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PatternDefinition = ...  # unknown typename


class CombOptionsBuilderAnalysisTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CombOptionsBuilderAnalysisTypes():
    """
    Represents the Analysis types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Curvature", "Curvature"
       "Radius", "Radius"
    """
    NotSet = 0  # CombOptionsBuilderAnalysisTypesMemberType
    Curvature = 1  # CombOptionsBuilderAnalysisTypesMemberType
    Radius = 2  # CombOptionsBuilderAnalysisTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CombOptionsBuilderLabelTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CombOptionsBuilderLabelTypes():
    """
    Represents the Label types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Minimum", "Minimum"
       "Maximum", "Maximum"
       "MinimumMaximum", "Minimum and Maximum"
    """
    NotSet = 0  # CombOptionsBuilderLabelTypesMemberType
    Minimum = 1  # CombOptionsBuilderLabelTypesMemberType
    Maximum = 2  # CombOptionsBuilderLabelTypesMemberType
    MinimumMaximum = 3  # CombOptionsBuilderLabelTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CombOptionsBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.CombOptionsBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class AnalysisTypes():
        """
        Represents the Analysis types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Curvature", "Curvature"
           "Radius", "Radius"
        """
        NotSet = 0  # CombOptionsBuilderAnalysisTypesMemberType
        Curvature = 1  # CombOptionsBuilderAnalysisTypesMemberType
        Radius = 2  # CombOptionsBuilderAnalysisTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LabelTypes():
        """
        Represents the Label types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Minimum", "Minimum"
           "Maximum", "Maximum"
           "MinimumMaximum", "Minimum and Maximum"
        """
        NotSet = 0  # CombOptionsBuilderLabelTypesMemberType
        Minimum = 1  # CombOptionsBuilderLabelTypesMemberType
        Maximum = 2  # CombOptionsBuilderLabelTypesMemberType
        MinimumMaximum = 3  # CombOptionsBuilderLabelTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnalysisType: CombOptionsBuilderAnalysisTypes = ...
    """
    Returns or sets  the analysis type 
    
    <hr>
    
    Getter Method
    
    Signature ``AnalysisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CombOptionsBuilderAnalysisTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnalysisType`` 
    
    :param analysis: 
    :type analysis: :py:class:`NXOpen.GeometricUtilities.CombOptionsBuilderAnalysisTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AutoScale: bool = ...
    """
    Returns or sets  the auto scale flag 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoScale`` 
    
    :param hasAutoScale: 
    :type hasAutoScale: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Density: int = ...
    """
    Returns or sets  the density 
    
    <hr>
    
    Getter Method
    
    Signature ``Density`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Density`` 
    
    :param density: 
    :type density: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HasMaxNeedleLength: bool = ...
    """
    Returns or sets  the maximum needle flag 
    
    <hr>
    
    Getter Method
    
    Signature ``HasMaxNeedleLength`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HasMaxNeedleLength`` 
    
    :param hasMaxNeedleLength: 
    :type hasMaxNeedleLength: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    IntermediateDensity: int = ...
    """
    Returns or sets  the intermediate density 
    
    <hr>
    
    Getter Method
    
    Signature ``IntermediateDensity`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntermediateDensity`` 
    
    :param intermediateDensity: 
    :type intermediateDensity: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    IsMaximumLabelEnabled: bool = ...
    """
    Returns or sets  the value indicating if the maximum label is enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMaximumLabelEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsMaximumLabelEnabled`` 
    
    :param isMaximumLabelEnabled: 
    :type isMaximumLabelEnabled: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    IsMinimumLabelEnabled: bool = ...
    """
    Returns or sets  the value indicating if the minimum label is enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``IsMinimumLabelEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsMinimumLabelEnabled`` 
    
    :param isMinimumLabelEnabled: 
    :type isMinimumLabelEnabled: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    IsNormalToGridPlane: bool = ...
    """
    Returns or sets  the normal to grid plane flag 
    
    <hr>
    
    Getter Method
    
    Signature ``IsNormalToGridPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsNormalToGridPlane`` 
    
    :param isNormalToGridPlane: 
    :type isNormalToGridPlane: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MaxNeedleLength: float = ...
    """
    Returns or sets  the maximum needle length 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxNeedleLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaxNeedleLength`` 
    
    :param maxNeedleLength: 
    :type maxNeedleLength: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReverseNeedles: bool = ...
    """
    Returns or sets  the reverse needles flag 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseNeedles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseNeedles`` 
    
    :param reverseNeedles: 
    :type reverseNeedles: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SampleDistance: float = ...
    """
    Returns or sets  the sample distance 
    
    <hr>
    
    Getter Method
    
    Signature ``SampleDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SampleDistance`` 
    
    :param sampleDistance: 
    :type sampleDistance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ScaleFactor: float = ...
    """
    Returns or sets  the scale factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleFactor`` 
    
    :param scaleFactor: 
    :type scaleFactor: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ShowNeedles: bool = ...
    """
    Returns or sets  the show needles flag 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowNeedles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowNeedles`` 
    
    :param showNeedles: 
    :type showNeedles: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CombOptionsBuilder = ...  # unknown typename


class PointSetAlignmentBuilderConstraintOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PointSetAlignmentBuilderConstraintOptions():
    """
    Constraint Options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No constraint"
       "X", "X axis"
       "Y", "Y axis"
       "Z", "Z axis"
    """
    NotSet = 0  # PointSetAlignmentBuilderConstraintOptionsMemberType
    X = 1  # PointSetAlignmentBuilderConstraintOptionsMemberType
    Y = 2  # PointSetAlignmentBuilderConstraintOptionsMemberType
    Z = 3  # PointSetAlignmentBuilderConstraintOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PointSetAlignmentBuilder(NXOpen.Builder):
    """
    This class performs a point set to point set alignment   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreatePointSetAlignmentBuilder`
    
    Default values.
    
    ===========  =====
    Property     Value
    ===========  =====
    Constraint   None 
    ===========  =====
    
    .. versionadded:: NX7.5.0
    """
    
    class ConstraintOptions():
        """
        Constraint Options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No constraint"
           "X", "X axis"
           "Y", "Y axis"
           "Z", "Z axis"
        """
        NotSet = 0  # PointSetAlignmentBuilderConstraintOptionsMemberType
        X = 1  # PointSetAlignmentBuilderConstraintOptionsMemberType
        Y = 2  # PointSetAlignmentBuilderConstraintOptionsMemberType
        Z = 3  # PointSetAlignmentBuilderConstraintOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Constraint: PointSetAlignmentBuilderConstraintOptions = ...
    """
    Returns or sets  the constraint 
    
    <hr>
    
    Getter Method
    
    Signature ``Constraint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PointSetAlignmentBuilderConstraintOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Constraint`` 
    
    :param constraint: 
    :type constraint: :py:class:`NXOpen.GeometricUtilities.PointSetAlignmentBuilderConstraintOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    FromPointSet: NXOpen.SelectPointList = ...
    """
    Returns  the "from" point set 
    
    <hr>
    
    Getter Method
    
    Signature ``FromPointSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ObjectsToMove: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the objects to move 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectsToMove`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToPointSet: NXOpen.SelectPointList = ...
    """
    Returns  the "to" point set 
    
    <hr>
    
    Getter Method
    
    Signature ``ToPointSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PointSetAlignmentBuilder = ...  # unknown typename


class EntityUsageInfoStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EntityUsageInfoStatus():
    """
    enum for usage status 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unused", "unused"
       "IntraPart", "used in same part"
       "InterPart", "used interpart"
    """
    Unused = 0  # EntityUsageInfoStatusMemberType
    IntraPart = 1  # EntityUsageInfoStatusMemberType
    InterPart = 2  # EntityUsageInfoStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EntityUsageInfo(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo`.  
    
    An object of this class provides the
    dependency information for a single reparentable entity (edge or face). The creation of :py:class:`NXOpen.GeometricUtilities.EntityUsageInfo`
    is restricted for internal use (see :py:class:`NXOpen.GeometricUtilities.ReplAsstBuilder`).
    
    .. versionadded:: NX6.0.0
    """
    
    class Status():
        """
        enum for usage status 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unused", "unused"
           "IntraPart", "used in same part"
           "InterPart", "used interpart"
        """
        Unused = 0  # EntityUsageInfoStatusMemberType
        IntraPart = 1  # EntityUsageInfoStatusMemberType
        InterPart = 2  # EntityUsageInfoStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetDependentFeatures(self, typeOfUsage: EntityUsageInfoStatus) -> tuple:
        """
        Query the dependent features of this entity.  
        
        Use 'typeOfUsage' to restrict the query to
        intra-part features or to include interpart features too. 
        
        Signature ``GetDependentFeatures(typeOfUsage)`` 
        
        :param typeOfUsage:  desired level of usage information  
        :type typeOfUsage: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfoStatus` 
        :returns: a tuple 
        :rtype: A tuple consisting of (dependentFeatures, detailedUsageInfo). dependentFeatures is a list of :py:class:`NXOpen.Features.Feature`.   dependent features detailedUsageInfo is a list of str.   detailed usage information for each dependent feature 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOtherDependents(self, typeOfUsage: EntityUsageInfoStatus) -> tuple:
        """
        Query other dependents of this entity.  
        
        Use 'typeOfUsage' to restrict the query to
        intra-part dependents or to include interpart usage too. 
        
        Signature ``GetOtherDependents(typeOfUsage)`` 
        
        :param typeOfUsage:  desired level of usage information  
        :type typeOfUsage: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfoStatus` 
        :returns: a tuple 
        :rtype: A tuple consisting of (otherDependents, detailedUsageInfo). otherDependents is a list of :py:class:`NXOpen.NXObject`.   dependent objects detailedUsageInfo is a list of str.   detailed usage information for each dependent object 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Entity: NXOpen.DisplayableObject = ...
    """
    Returns  the important entity.  
    
    <hr>
    
    Getter Method
    
    Signature ``Entity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UsageStatus: EntityUsageInfoStatus = ...
    """
    Returns  the usage status of the corresponding entity 
    
    <hr>
    
    Getter Method
    
    Signature ``UsageStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfoStatus` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: EntityUsageInfo = ...  # unknown typename


class DepthSkewBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class provides ability to specify a depth and a skew value.  
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Depth: NXOpen.Expression = ...
    """
    Returns  the depth 
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Skew: NXOpen.Expression = ...
    """
    Returns  the skew 
    
    <hr>
    
    Getter Method
    
    Signature ``Skew`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DepthSkewBuilder = ...  # unknown typename


class ParentEquivalencyMapStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ParentEquivalencyMapStatus():
    """
    enum for map status 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Incomplete", "incomplete"
       "Tentative", "tentative"
       "Accepted", "accepted"
    """
    Incomplete = 0  # ParentEquivalencyMapStatusMemberType
    Tentative = 1  # ParentEquivalencyMapStatusMemberType
    Accepted = 2  # ParentEquivalencyMapStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ParentEquivalencyMapTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ParentEquivalencyMapType():
    """
    enum for map type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Undefined", "undefined"
       "UserDefined", "user defined or manual"
       "NameBased", "mapped by name"
       "Geometric", "mapped by geometric comparison"
       "Inferred", "inferred from accepted"
       "Internal", "internal ID reuse"
       "Inherited", "inherited from other part or operation"
       "Mixed", "combination of multiple methods"
    """
    Undefined = 0  # ParentEquivalencyMapTypeMemberType
    UserDefined = 1  # ParentEquivalencyMapTypeMemberType
    NameBased = 2  # ParentEquivalencyMapTypeMemberType
    Geometric = 3  # ParentEquivalencyMapTypeMemberType
    Inferred = 4  # ParentEquivalencyMapTypeMemberType
    Internal = 5  # ParentEquivalencyMapTypeMemberType
    Inherited = 6  # ParentEquivalencyMapTypeMemberType
    Mixed = 7  # ParentEquivalencyMapTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ParentEquivalencyMap(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap`.  
    
    An object of this class represents
    a correspondence between entities of the current object (Linked / Extract feature being edited) and entities
    of the replacement object (faces / body).
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.ReplAsstBuilder.CreateEmptyMatch`
    
    .. versionadded:: NX6.0.0
    """
    
    class Status():
        """
        enum for map status 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Incomplete", "incomplete"
           "Tentative", "tentative"
           "Accepted", "accepted"
        """
        Incomplete = 0  # ParentEquivalencyMapStatusMemberType
        Tentative = 1  # ParentEquivalencyMapStatusMemberType
        Accepted = 2  # ParentEquivalencyMapStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Type():
        """
        enum for map type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Undefined", "undefined"
           "UserDefined", "user defined or manual"
           "NameBased", "mapped by name"
           "Geometric", "mapped by geometric comparison"
           "Inferred", "inferred from accepted"
           "Internal", "internal ID reuse"
           "Inherited", "inherited from other part or operation"
           "Mixed", "combination of multiple methods"
        """
        Undefined = 0  # ParentEquivalencyMapTypeMemberType
        UserDefined = 1  # ParentEquivalencyMapTypeMemberType
        NameBased = 2  # ParentEquivalencyMapTypeMemberType
        Geometric = 3  # ParentEquivalencyMapTypeMemberType
        Inferred = 4  # ParentEquivalencyMapTypeMemberType
        Internal = 5  # ParentEquivalencyMapTypeMemberType
        Inherited = 6  # ParentEquivalencyMapTypeMemberType
        Mixed = 7  # ParentEquivalencyMapTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetEntitiesFromCurrentObject(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Get the mapped entities from the current object.  
        
        Signature ``GetEntitiesFromCurrentObject()`` 
        
        :returns:  entities from the current object  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetEntitiesFromReplacementObject(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Get the mapped entities from the replacement object 
        
        Signature ``GetEntitiesFromReplacementObject()`` 
        
        :returns:  entities from the replacement object  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMappedEntities(self, oldEntities: 'list[NXOpen.DisplayableObject]', newEntities: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Set externally mapped entities 
        
        Signature ``SetMappedEntities(oldEntities, newEntities)`` 
        
        :param oldEntities:  entities from the current object  
        :type oldEntities: list of :py:class:`NXOpen.DisplayableObject` 
        :param newEntities:  entities from the replacement object  
        :type newEntities: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    MapStatus: ParentEquivalencyMapStatus = ...
    """
    Returns or sets  the map status 
    
    <hr>
    
    Getter Method
    
    Signature ``MapStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMapStatus` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MapStatus`` 
    
    :param mapStatus: 
    :type mapStatus: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMapStatus` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    MapType: ParentEquivalencyMapType = ...
    """
    Returns or sets  the map type 
    
    <hr>
    
    Getter Method
    
    Signature ``MapType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMapType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MapType`` 
    
    :param mapType: 
    :type mapType: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMapType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ParentEquivalencyMap = ...  # unknown typename


class StepOptionBehaviorStepOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StepOptionBehaviorStepOptionType():
    """
    Step Faec options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Does not add step faces."
       "ExtendNeighborsatSmoothEdge", "Extends faces neighboring a smooth edge of the motion face."
    """
    NotSet = 0  # StepOptionBehaviorStepOptionTypeMemberType
    ExtendNeighborsatSmoothEdge = 1  # StepOptionBehaviorStepOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StepOptionBehavior(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.StepOptionBehavior`
    It provides several step options for controlling behavior when 
    move face and so on.  
    
    .. versionadded:: NX8.0.1
    """
    
    class StepOptionType():
        """
        Step Faec options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Does not add step faces."
           "ExtendNeighborsatSmoothEdge", "Extends faces neighboring a smooth edge of the motion face."
        """
        NotSet = 0  # StepOptionBehaviorStepOptionTypeMemberType
        ExtendNeighborsatSmoothEdge = 1  # StepOptionBehaviorStepOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    StepOption: StepOptionBehaviorStepOptionType = ...
    """
    Returns or sets  the step option 
    
    <hr>
    
    Getter Method
    
    Signature ``StepOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.StepOptionBehaviorStepOptionType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StepOption`` 
    
    :param stepOption: 
    :type stepOption: :py:class:`NXOpen.GeometricUtilities.StepOptionBehaviorStepOptionType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: StepOptionBehavior = ...  # unknown typename


class InstanceEditedExpressionItemList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[InstanceEditedExpressionItem]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: InstanceEditedExpressionItem) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: InstanceEditedExpressionItem) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> InstanceEditedExpressionItem:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: InstanceEditedExpressionItem) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: InstanceEditedExpressionItem, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[InstanceEditedExpressionItem]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[InstanceEditedExpressionItem]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: InstanceEditedExpressionItem, object2: InstanceEditedExpressionItem) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: InstanceEditedExpressionItem) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: InstanceEditedExpressionItemList = ...  # unknown typename


class RebuildRebuildTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RebuildRebuildTypes():
    """
    This enum represents the Rebuild type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No degree entry or simple integer/enumerable value used to specify the rebuild degree."
       "Manual", "Specify the rebuild degree manually."
       "Advanced", "Specify the maximum degree and maximum segments to rebuild."
       "KeepParameterization", "Keep the parameterization"
    """
    NotSet = 0  # RebuildRebuildTypesMemberType
    Manual = 1  # RebuildRebuildTypesMemberType
    Advanced = 2  # RebuildRebuildTypesMemberType
    KeepParameterization = 3  # RebuildRebuildTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RebuildDegreeTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RebuildDegreeTypes():
    """
    This enum represents the degree type when the Rebuild option menu is set to None.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cubic", "The rebuild degree is cubic."
       "Quintic", "The rebuild degree is quintic"
    """
    Cubic = 0  # RebuildDegreeTypesMemberType
    Quintic = 1  # RebuildDegreeTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Rebuild(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.Rebuild`.  
    
    The Rebuild block provides control over the method in which a surface is rebuilt (None, Manual,
    Advanced). Rebuild can be used for both uni-directional and bi-directional rebuild functions. 
    Uni-directional functions require one instance of the rebuild block while bi-directional functions 
    require two instances of the Rebuild block.
    
    .. versionadded:: NX5.0.0
    """
    
    class RebuildTypes():
        """
        This enum represents the Rebuild type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No degree entry or simple integer/enumerable value used to specify the rebuild degree."
           "Manual", "Specify the rebuild degree manually."
           "Advanced", "Specify the maximum degree and maximum segments to rebuild."
           "KeepParameterization", "Keep the parameterization"
        """
        NotSet = 0  # RebuildRebuildTypesMemberType
        Manual = 1  # RebuildRebuildTypesMemberType
        Advanced = 2  # RebuildRebuildTypesMemberType
        KeepParameterization = 3  # RebuildRebuildTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DegreeTypes():
        """
        This enum represents the degree type when the Rebuild option menu is set to None.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cubic", "The rebuild degree is cubic."
           "Quintic", "The rebuild degree is quintic"
        """
        Cubic = 0  # RebuildDegreeTypesMemberType
        Quintic = 1  # RebuildDegreeTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Degree: int = ...
    """
    Returns or sets  the degree when rebuild type is none.  
    
    In general, the degree is limited from 1 to 24. However,degree = 1 will only be used for 
    Through Curve case to replace the current V-degree option, which can start from 1. 
    Otherwise the minimum degree should be 2.
    
    <hr>
    
    Getter Method
    
    Signature ``Degree`` 
    
    :returns:  Integer Degree  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Degree`` 
    
    :param degree:  Integer Degree  
    :type degree: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    DegreeType: RebuildDegreeTypes = ...
    """
    Returns or sets  the degree type when rebuild type is none.  
    
    <hr>
    
    Getter Method
    
    Signature ``DegreeType`` 
    
    :returns:  Degree Type  
    :rtype: :py:class:`NXOpen.GeometricUtilities.RebuildDegreeTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DegreeType`` 
    
    :param degreeType:  Degree Type  
    :type degreeType: :py:class:`NXOpen.GeometricUtilities.RebuildDegreeTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ManualDegree: int = ...
    """
    Returns or sets  the degree when rebuild type is manual.  
    
    The degree value is limited from 2 to 24.
    
    <hr>
    
    Getter Method
    
    Signature ``ManualDegree`` 
    
    :returns:  Manual Degree  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ManualDegree`` 
    
    :param manualDegree:  Manual Degree  
    :type manualDegree: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    MaximumDegree: int = ...
    """
    Returns or sets  the maximum degree when rebuild type is advanced.  
    
    The maximum degree value is limited from 2 to 24.
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumDegree`` 
    
    :returns:  Maximum Degree  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumDegree`` 
    
    :param maximumDegree:  Maximum Degree  
    :type maximumDegree: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    MaximumSegments: int = ...
    """
    Returns or sets  the maximum segments when rebuild type is advanced.  
    
    The maximum segments value is limited from 1 to 1000.
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumSegments`` 
    
    :returns:  Maximum Segments  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumSegments`` 
    
    :param maximumSegments:  Maximum Segments  
    :type maximumSegments: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    RebuildType: RebuildRebuildTypes = ...
    """
    Returns or sets  the rebuild type.  
    
    <hr>
    
    Getter Method
    
    Signature ``RebuildType`` 
    
    :returns:  Rebuild Type  
    :rtype: :py:class:`NXOpen.GeometricUtilities.RebuildRebuildTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RebuildType`` 
    
    :param rebuildType:  Rebuild Type  
    :type rebuildType: :py:class:`NXOpen.GeometricUtilities.RebuildRebuildTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: Rebuild = ...  # unknown typename


class InstanceEditedExpressionsList(NXOpen.TaggedObject, IComponentBuilder):
    """
    list of :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` objects.  
    
    .. versionadded:: NX7.5.0
    """
    
    @typing.overload
    def EditInstanceExpression(self) -> InstanceEditedExpressionItem:
        """
        This is the default creator for :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem`.  
        
        Signature ``EditInstanceExpression()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def EditInstanceExpression(self, masterExpression: NXOpen.Expression, instanceExpression: NXOpen.Expression) -> InstanceEditedExpressionItem:
        """
        This is the creator for :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` which should be used.  
        
        Signature ``EditInstanceExpression(masterExpression, instanceExpression)`` 
        
        :param masterExpression:  the master expression  
        :type masterExpression: :py:class:`NXOpen.Expression` 
        :param instanceExpression:  the instance expression  
        :type instanceExpression: :py:class:`NXOpen.Expression` 
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    List: InstanceEditedExpressionItemList = ...
    """
    Returns  the list of :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItem` objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``List`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.InstanceEditedExpressionItemList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: InstanceEditedExpressionsList = ...  # unknown typename


class CurveFitOptionsFitMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveFitOptionsFitMethod():
    """
    Represents the curve fit method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cubic", "Cubic"
       "Quintic", "Quintic"
       "Advanced", "Advanced"
    """
    Cubic = 0  # CurveFitOptionsFitMethodMemberType
    Quintic = 1  # CurveFitOptionsFitMethodMemberType
    Advanced = 2  # CurveFitOptionsFitMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveFitOptions(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the curve fit data 
    
    .. versionadded:: NX5.0.0
    """
    
    class FitMethod():
        """
        Represents the curve fit method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cubic", "Cubic"
           "Quintic", "Quintic"
           "Advanced", "Advanced"
        """
        Cubic = 0  # CurveFitOptionsFitMethodMemberType
        Quintic = 1  # CurveFitOptionsFitMethodMemberType
        Advanced = 2  # CurveFitOptionsFitMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FitOption: CurveFitOptionsFitMethod = ...
    """
    Returns or sets  the curve fit method  
    
    <hr>
    
    Getter Method
    
    Signature ``FitOption`` 
    
    :returns:  curve fit method  
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveFitOptionsFitMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    
    <hr>
    
    Setter Method
    
    Signature ``FitOption`` 
    
    :param curveFitMethod:  curve fit method  
    :type curveFitMethod: :py:class:`NXOpen.GeometricUtilities.CurveFitOptionsFitMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    MaximumDegree: int = ...
    """
    Returns or sets  the maximum degree method 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumDegree`` 
    
    :returns:  maximum segments  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumDegree`` 
    
    :param maximumDegree:  maximum degree method  
    :type maximumDegree: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    MaximumSegments: int = ...
    """
    Returns or sets  the maximum segments method 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumSegments`` 
    
    :returns:  maximum segments  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumSegments`` 
    
    :param maximumSegments:  maximum segments  
    :type maximumSegments: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: CurveFitOptions = ...  # unknown typename


class EndHoleDataFormOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndHoleDataFormOptions():
    """
    Represents hole form options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ScrewClearance", "Screw clearance"
       "Threaded", "Threaded hole"
       "Through", "Through hole - This option should not be used in NX6 and later versions. Instead of this screw_clearance option should be used"
    """
    ScrewClearance = 0  # EndHoleDataFormOptionsMemberType
    Threaded = 1  # EndHoleDataFormOptionsMemberType
    Through = 2  # EndHoleDataFormOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndHoleDataThreadLengthOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndHoleDataThreadLengthOptions():
    """
    Represents thread length options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Diameterx1", "1 * (tap drill diameter)"
       "Diameterx15", "1.5 * (tap drill diameter)"
       "Diameterx20", "2 * (tap drill diameter)"
       "Diameterx25", "2.5 * (tap drill diameter)"
       "Diameterx30", "3 * (tap drill diameter)"
       "Standard", "Length is standard"
       "Custom", "Length is custom"
       "Full", "Length is full hole depth"
    """
    Diameterx1 = 0  # EndHoleDataThreadLengthOptionsMemberType
    Diameterx15 = 1  # EndHoleDataThreadLengthOptionsMemberType
    Diameterx20 = 2  # EndHoleDataThreadLengthOptionsMemberType
    Diameterx25 = 3  # EndHoleDataThreadLengthOptionsMemberType
    Diameterx30 = 4  # EndHoleDataThreadLengthOptionsMemberType
    Standard = 5  # EndHoleDataThreadLengthOptionsMemberType
    Custom = 6  # EndHoleDataThreadLengthOptionsMemberType
    Full = 7  # EndHoleDataThreadLengthOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndHoleDataThreadRotationOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndHoleDataThreadRotationOptions():
    """
    Represents thread rotation options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Right", "Right rotation"
       "Left", "Left rotation"
    """
    Right = 0  # EndHoleDataThreadRotationOptionsMemberType
    Left = 1  # EndHoleDataThreadRotationOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndHoleDataHoleDepthOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndHoleDataHoleDepthOptions():
    """
    Represents hole depth specification options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ToCylinderBottom", " - "
       "ToConeTip", " - "
    """
    ToCylinderBottom = 0  # EndHoleDataHoleDepthOptionsMemberType
    ToConeTip = 1  # EndHoleDataHoleDepthOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndHoleDataHoleDepthLimitOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EndHoleDataHoleDepthLimitOptions():
    """
    Represents hole depth limit options for threaded hole in end plate of hole series. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Value", "Value limit options"
       "UntilSelected", "Until selected limit options"
       "UntilNext", "Until next limit options"
       "ThroughBody", "Through body limit options"
    """
    Value = 0  # EndHoleDataHoleDepthLimitOptionsMemberType
    UntilSelected = 1  # EndHoleDataHoleDepthLimitOptionsMemberType
    UntilNext = 2  # EndHoleDataHoleDepthLimitOptionsMemberType
    ThroughBody = 3  # EndHoleDataHoleDepthLimitOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EndHoleData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.EndHoleData`   
    
    .. versionadded:: NX5.0.2
    """
    
    class FormOptions():
        """
        Represents hole form options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ScrewClearance", "Screw clearance"
           "Threaded", "Threaded hole"
           "Through", "Through hole - This option should not be used in NX6 and later versions. Instead of this screw_clearance option should be used"
        """
        ScrewClearance = 0  # EndHoleDataFormOptionsMemberType
        Threaded = 1  # EndHoleDataFormOptionsMemberType
        Through = 2  # EndHoleDataFormOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ThreadLengthOptions():
        """
        Represents thread length options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Diameterx1", "1 * (tap drill diameter)"
           "Diameterx15", "1.5 * (tap drill diameter)"
           "Diameterx20", "2 * (tap drill diameter)"
           "Diameterx25", "2.5 * (tap drill diameter)"
           "Diameterx30", "3 * (tap drill diameter)"
           "Standard", "Length is standard"
           "Custom", "Length is custom"
           "Full", "Length is full hole depth"
        """
        Diameterx1 = 0  # EndHoleDataThreadLengthOptionsMemberType
        Diameterx15 = 1  # EndHoleDataThreadLengthOptionsMemberType
        Diameterx20 = 2  # EndHoleDataThreadLengthOptionsMemberType
        Diameterx25 = 3  # EndHoleDataThreadLengthOptionsMemberType
        Diameterx30 = 4  # EndHoleDataThreadLengthOptionsMemberType
        Standard = 5  # EndHoleDataThreadLengthOptionsMemberType
        Custom = 6  # EndHoleDataThreadLengthOptionsMemberType
        Full = 7  # EndHoleDataThreadLengthOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ThreadRotationOptions():
        """
        Represents thread rotation options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Right", "Right rotation"
           "Left", "Left rotation"
        """
        Right = 0  # EndHoleDataThreadRotationOptionsMemberType
        Left = 1  # EndHoleDataThreadRotationOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HoleDepthOptions():
        """
        Represents hole depth specification options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ToCylinderBottom", " - "
           "ToConeTip", " - "
        """
        ToCylinderBottom = 0  # EndHoleDataHoleDepthOptionsMemberType
        ToConeTip = 1  # EndHoleDataHoleDepthOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HoleDepthLimitOptions():
        """
        Represents hole depth limit options for threaded hole in end plate of hole series. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Value", "Value limit options"
           "UntilSelected", "Until selected limit options"
           "UntilNext", "Until next limit options"
           "ThroughBody", "Through body limit options"
        """
        Value = 0  # EndHoleDataHoleDepthLimitOptionsMemberType
        UntilSelected = 1  # EndHoleDataHoleDepthLimitOptionsMemberType
        UntilNext = 2  # EndHoleDataHoleDepthLimitOptionsMemberType
        ThroughBody = 3  # EndHoleDataHoleDepthLimitOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BooleanOperation: BooleanOperation = ...
    """
    Returns  the boolean operation 
    
    <hr>
    
    Getter Method
    
    Signature ``BooleanOperation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanOperation` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    DepthOption: EndHoleDataHoleDepthOptions = ...
    """
    Returns or sets  the hole depth option 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.EndHoleDataHoleDepthOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DepthOption`` 
    
    :param depthOption: 
    :type depthOption: :py:class:`NXOpen.GeometricUtilities.EndHoleDataHoleDepthOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    FitOption: str = ...
    """
    Returns or sets  the fit option 
    
    <hr>
    
    Getter Method
    
    Signature ``FitOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitOption`` 
    
    :param fitOption: 
    :type fitOption: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    FormOption: EndHoleDataFormOptions = ...
    """
    Returns or sets  the form option 
    
    <hr>
    
    Getter Method
    
    Signature ``FormOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.EndHoleDataFormOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FormOption`` 
    
    :param formOption: 
    :type formOption: :py:class:`NXOpen.GeometricUtilities.EndHoleDataFormOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    HoleDepth: NXOpen.Expression = ...
    """
    Returns  the hole depth 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    HoleDepthLimitOption: EndHoleDataHoleDepthLimitOptions = ...
    """
    Returns or sets  the hole depth limit 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDepthLimitOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.EndHoleDataHoleDepthLimitOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDepthLimitOption`` 
    
    :param holeDepthLimitOption: 
    :type holeDepthLimitOption: :py:class:`NXOpen.GeometricUtilities.EndHoleDataHoleDepthLimitOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    HoleDiameter: NXOpen.Expression = ...
    """
    Returns  the hole diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    MatchDimOfStartHole: bool = ...
    """
    Returns or sets  the match dim of start hole 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchDimOfStartHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MatchDimOfStartHole`` 
    
    :param matchDimOfStartHole: 
    :type matchDimOfStartHole: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    RadialEngageOption: str = ...
    """
    Returns or sets  the radial engage option 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialEngageOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialEngageOption`` 
    
    :param radialEngageOption: 
    :type radialEngageOption: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ReliefChamferEnabled: bool = ...
    """
    Returns or sets  the threaded relief chamfer enabled - this is applicable for threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefChamferEnabled`` 
    
    :param reliefChamferEnabled: 
    :type reliefChamferEnabled: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrewClearanceEndChamferAngle: NXOpen.Expression = ...
    """
    Returns  the screw clearance end chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewClearanceEndChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ScrewClearanceEndChamferEnabled: bool = ...
    """
    Returns or sets  the screw clearance end chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewClearanceEndChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewClearanceEndChamferEnabled`` 
    
    :param screwClearanceEndChamferEnabled: 
    :type screwClearanceEndChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrewClearanceEndChamferOffset: NXOpen.Expression = ...
    """
    Returns  the screw clearance end chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewClearanceEndChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ScrewClearanceStartChamferAngle: NXOpen.Expression = ...
    """
    Returns  the screw clearance start chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewClearanceStartChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ScrewClearanceStartChamferEnabled: bool = ...
    """
    Returns or sets  the screw clearance start chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewClearanceStartChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewClearanceStartChamferEnabled`` 
    
    :param screwClearenceStartChamferEnabled: 
    :type screwClearenceStartChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrewClearanceStartChamferOffset: NXOpen.Expression = ...
    """
    Returns  the screw clearance start chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewClearanceStartChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    TapDrillDiameter: NXOpen.Expression = ...
    """
    Returns  the tap drill diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``TapDrillDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ThreadDepth: NXOpen.Expression = ...
    """
    Returns  the thread depth 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ThreadLengthOption: EndHoleDataThreadLengthOptions = ...
    """
    Returns or sets  the thread length option 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadLengthOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.EndHoleDataThreadLengthOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadLengthOption`` 
    
    :param threadLengthOption: 
    :type threadLengthOption: :py:class:`NXOpen.GeometricUtilities.EndHoleDataThreadLengthOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ThreadRotation: EndHoleDataThreadRotationOptions = ...
    """
    Returns or sets  the thread rotation 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadRotation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.EndHoleDataThreadRotationOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadRotation`` 
    
    :param threadRotation: 
    :type threadRotation: :py:class:`NXOpen.GeometricUtilities.EndHoleDataThreadRotationOptions` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ThreadSize: str = ...
    """
    Returns or sets  the thread size 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadSize`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadSize`` 
    
    :param threadSize: 
    :type threadSize: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ThreadedEndChamferAngle: NXOpen.Expression = ...
    """
    Returns  the threaded end chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedEndChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ThreadedEndChamferDiameter: NXOpen.Expression = ...
    """
    Returns  the threaded end chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedEndChamferDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ThreadedEndChamferEnabled: bool = ...
    """
    Returns or sets  the threaded end chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedEndChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadedEndChamferEnabled`` 
    
    :param threadedEndChamferEnabled: 
    :type threadedEndChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ThreadedReliefAngle: NXOpen.Expression = ...
    """
    Returns  the relief angle - this is applicable for threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedReliefAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThreadedReliefChamferAngle: NXOpen.Expression = ...
    """
    Returns  the threaded relief chamfer angle - this is applicable for threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedReliefChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThreadedReliefChamferOffset: NXOpen.Expression = ...
    """
    Returns  the threaded relief chamfer offset - this is applicable for threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedReliefChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThreadedReliefDepth: NXOpen.Expression = ...
    """
    Returns  the threaded relief depth - this is applicable for threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedReliefDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThreadedReliefDiameter: NXOpen.Expression = ...
    """
    Returns  the relief diameter - this is applicable for threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedReliefDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ThreadedReliefEnabled: bool = ...
    """
    Returns or sets  the threaded relief enabled - this is applicable for threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedReliefEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadedReliefEnabled`` 
    
    :param threadedReliefEnabled: 
    :type threadedReliefEnabled: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ThreadedStartChamferAngle: NXOpen.Expression = ...
    """
    Returns  the threaded start chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedStartChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ThreadedStartChamferDiameter: NXOpen.Expression = ...
    """
    Returns  the threaded start chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedStartChamferDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ThreadedStartChamferEnabled: bool = ...
    """
    Returns or sets  the threaded start chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadedStartChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadedStartChamferEnabled`` 
    
    :param threadedStartChamferEnabled: 
    :type threadedStartChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    TipAngle: NXOpen.Expression = ...
    """
    Returns  the tip angle 
    
    <hr>
    
    Getter Method
    
    Signature ``TipAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    UntilSelectedTarget: NXOpen.SelectFace = ...
    """
    Returns  the until selected target - this is applicable for general hole and threaded hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``UntilSelectedTarget`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: EndHoleData = ...  # unknown typename


class PatternIncrementsBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    pattern increments builder   
    
    .. versionadded:: NX7.5.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    IncrementsListInDirection1: PatternIncrementsList = ...
    """
    Returns  the increments :py:class:`NXOpen.GeometricUtilities.PatternIncrementsList` in Direction1.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncrementsListInDirection1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementsList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    IncrementsListInDirection2: PatternIncrementsList = ...
    """
    Returns  the increments :py:class:`NXOpen.GeometricUtilities.PatternIncrementsList` in Direction2.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncrementsListInDirection2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementsList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PatternIncrementsBuilder = ...  # unknown typename


class PatternSpacingsList(NXOpen.TaggedObject, IComponentBuilder):
    """
    list of :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` objects.  
    
    .. versionadded:: NX8.0.0
    """
    
    def CreatePatternSpacingsListItem(self) -> PatternSpacingsListItem:
        """
        This is the default creator for :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem`.  
        
        Signature ``CreatePatternSpacingsListItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    List: PatternSpacingsListItemList = ...
    """
    Returns  the list of :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``List`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItemList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PatternSpacingsList = ...  # unknown typename


class RefitControlBuilderRefitControlMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RefitControlBuilderRefitControlMethod():
    """
    Refit method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "KeepParameterization", "Keep parameterization"
       "DegreePatches", "Degree and patches"
       "DegreeTolerance", "Degree and tolerance"
       "PatchTolerance", "Patch and tolerance"
    """
    KeepParameterization = 0  # RefitControlBuilderRefitControlMethodMemberType
    DegreePatches = 1  # RefitControlBuilderRefitControlMethodMemberType
    DegreeTolerance = 2  # RefitControlBuilderRefitControlMethodMemberType
    PatchTolerance = 3  # RefitControlBuilderRefitControlMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RefitControlBuilderRefitControlDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RefitControlBuilderRefitControlDirection():
    """
    Refit direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UV", "u and v"
       "U", "u"
       "V", "v"
    """
    UV = 0  # RefitControlBuilderRefitControlDirectionMemberType
    U = 1  # RefitControlBuilderRefitControlDirectionMemberType
    V = 2  # RefitControlBuilderRefitControlDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RefitControlBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class is used to specify the parameter set to refit faces   
    
    .. versionadded:: NX6.0.0
    """
    
    class RefitControlMethod():
        """
        Refit method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "KeepParameterization", "Keep parameterization"
           "DegreePatches", "Degree and patches"
           "DegreeTolerance", "Degree and tolerance"
           "PatchTolerance", "Patch and tolerance"
        """
        KeepParameterization = 0  # RefitControlBuilderRefitControlMethodMemberType
        DegreePatches = 1  # RefitControlBuilderRefitControlMethodMemberType
        DegreeTolerance = 2  # RefitControlBuilderRefitControlMethodMemberType
        PatchTolerance = 3  # RefitControlBuilderRefitControlMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RefitControlDirection():
        """
        Refit direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UV", "u and v"
           "U", "u"
           "V", "v"
        """
        UV = 0  # RefitControlBuilderRefitControlDirectionMemberType
        U = 1  # RefitControlBuilderRefitControlDirectionMemberType
        V = 2  # RefitControlBuilderRefitControlDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DegreesAndSegmentsOrPatches: DegreesAndSegmentsOrPatchesBuilder = ...
    """
    Returns  the refit degrees and  segments or patches     
    
    <hr>
    
    Getter Method
    
    Signature ``DegreesAndSegmentsOrPatches`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.DegreesAndSegmentsOrPatchesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    RefitDirection: RefitControlBuilderRefitControlDirection = ...
    """
    Returns or sets  the refit direction 
    
    <hr>
    
    Getter Method
    
    Signature ``RefitDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.RefitControlBuilderRefitControlDirection` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``RefitDirection`` 
    
    :param refitDirection: 
    :type refitDirection: :py:class:`NXOpen.GeometricUtilities.RefitControlBuilderRefitControlDirection` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    RefitMethod: RefitControlBuilderRefitControlMethod = ...
    """
    Returns or sets  the refit method 
    
    <hr>
    
    Getter Method
    
    Signature ``RefitMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.RefitControlBuilderRefitControlMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``RefitMethod`` 
    
    :param refitMethod: 
    :type refitMethod: :py:class:`NXOpen.GeometricUtilities.RefitControlBuilderRefitControlMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    Null: RefitControlBuilder = ...  # unknown typename


class ReplAsstBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ReplAsstBuilder`.  
    
    This is the primary data container
    for Replacement Assistant mapping environment available on editing Linked Body, Linked Face, Extract Body, 
    Extract Face and Mirror Body features. Execute Enter() before invoking any match creation or automatic matching APIs.
    Call Exit() to exit the mapping environment.
    
    .. versionadded:: NX6.0.0
    """
    
    def Enter(self) -> None:
        """
        Entry and re-entry to the Replacement Assistant mapping environment.  
        
        This function needs to be executed before invoking any match creation or automatic matching APIs.
        The matches inferred internally (internal identifier reuse, inherited from parent and siblings)
        will be populated when this function is executed for the first time after selecting a
        replacement entity. 
        
        Signature ``Enter()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Exit(self) -> None:
        """
        Exit the Replacement Assistant mapping environment.  
        
        Any match creation or automatic matchping API cannot be executed after this function is called.
        
        Signature ``Exit()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateEmptyMatch(self) -> ParentEquivalencyMap:
        """
        This is the default creator for a parent equivalency map.  
        
        Signature ``CreateEmptyMatch()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def QueryFeatureOutputUsage(self) -> int:
        """
        Query the downstream usage of the current feature's output entities and populate the usageInfoList.  
        
        This API need be called only ONCE per feature being reparented.  
        
        Signature ``QueryFeatureOutputUsage()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateNameBasedMaps(self) -> 'list[ParentEquivalencyMap]':
        """
        Perform automatic matching based on user-defined object names.  
        
        Signature ``CreateNameBasedMaps()`` 
        
        :returns:  new maps created by name-based matching  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateInferredMaps(self) -> 'list[ParentEquivalencyMap]':
        """
        Infer more matches from matches already 'Accepted'.  
        
        Add [array_order_guaranteed] annotation for output array when API wrap allows the same.
        
        Signature ``CreateInferredMaps()`` 
        
        :returns:  new maps created by inferring  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateGeometricMaps(self) -> 'list[ParentEquivalencyMap]':
        """
        Perform geometric matching.  
        
        Signature ``CreateGeometricMaps()`` 
        
        :returns:  new maps created by geometric matching  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMap` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNewParents(self, replacementObjects: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Set the source entities for the Replacement Assistant.  
        
        If there are matches already
        created and the body is changed, the matches will be deleted. 
        
        Signature ``SetNewParents(replacementObjects)`` 
        
        :param replacementObjects:  replacement objects  
        :type replacementObjects: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetProdInt(self, prodInt: NXOpen.TaggedObject) -> None:
        """
        Set the product interface tag for the Replacement Assistant.  
        
        Signature ``SetProdInt(prodInt)`` 
        
        :param prodInt: 
        :type prodInt: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Allowance: float = ...
    """
    Returns or sets  the deviation allowance for geometric matching 
    
    <hr>
    
    Getter Method
    
    Signature ``Allowance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Allowance`` 
    
    :param allowance: 
    :type allowance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MatchList: ParentEquivalencyMapList = ...
    """
    Returns  the list of all Parent Equivalency Map objects 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ParentEquivalencyMapList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MatchSheetBoundariesOnly: bool = ...
    """
    Returns or sets  the automatic matching preference to match sheet boundaries only 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchSheetBoundariesOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MatchSheetBoundariesOnly`` 
    
    :param sheetBoundariesOnly: 
    :type sheetBoundariesOnly: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OneToOne: bool = ...
    """
    Returns or sets  the one to one auto matching preference 
    
    <hr>
    
    Getter Method
    
    Signature ``OneToOne`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OneToOne`` 
    
    :param oneToOne: 
    :type oneToOne: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UsageInfoList: EntityUsageInfoList = ...
    """
    Returns  the list of all Entity Usage Info objects 
    
    <hr>
    
    Getter Method
    
    Signature ``UsageInfoList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.EntityUsageInfoList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ReplAsstBuilder = ...  # unknown typename


class CurveFitDataMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveFitDataMethod():
    """
    Represents the curve fitting method in the case of advanced fitting
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DegreeAndSegments", "Degree and Segments"
       "DegreeAndTolerance", "Degree and Tolerance"
       "KeepParameterization", "Keep Parameterization"
       "AutoFit", "Auto Fit"
    """
    DegreeAndSegments = 0  # CurveFitDataMethodMemberType
    DegreeAndTolerance = 1  # CurveFitDataMethodMemberType
    KeepParameterization = 2  # CurveFitDataMethodMemberType
    AutoFit = 3  # CurveFitDataMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveFitDataJoinMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveFitDataJoin():
    """
    Represents the curve join method
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", "No"
       "Cubic", "Cubic"
       "General", "General"
       "Quintic", "Quintic"
    """
    No = 0  # CurveFitDataJoinMemberType
    Cubic = 1  # CurveFitDataJoinMemberType
    General = 2  # CurveFitDataJoinMemberType
    Quintic = 3  # CurveFitDataJoinMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveFitData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the curve fitting methods options.  
    
    .. versionadded:: NX8.0.0
    """
    
    class Method():
        """
        Represents the curve fitting method in the case of advanced fitting
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DegreeAndSegments", "Degree and Segments"
           "DegreeAndTolerance", "Degree and Tolerance"
           "KeepParameterization", "Keep Parameterization"
           "AutoFit", "Auto Fit"
        """
        DegreeAndSegments = 0  # CurveFitDataMethodMemberType
        DegreeAndTolerance = 1  # CurveFitDataMethodMemberType
        KeepParameterization = 2  # CurveFitDataMethodMemberType
        AutoFit = 3  # CurveFitDataMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Join():
        """
        Represents the curve join method
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", "No"
           "Cubic", "Cubic"
           "General", "General"
           "Quintic", "Quintic"
        """
        No = 0  # CurveFitDataJoinMemberType
        Cubic = 1  # CurveFitDataJoinMemberType
        General = 2  # CurveFitDataJoinMemberType
        Quintic = 3  # CurveFitDataJoinMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CurveJoinMethod: CurveFitDataJoin = ...
    """
    Returns or sets  the curve join method 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveJoinMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveFitDataJoin` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveJoinMethod`` 
    
    :param curveJoinMethod: 
    :type curveJoinMethod: :py:class:`NXOpen.GeometricUtilities.CurveFitDataJoin` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Degree: int = ...
    """
    Returns or sets  the fitting degree 
    
    <hr>
    
    Getter Method
    
    Signature ``Degree`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Degree`` 
    
    :param degree: 
    :type degree: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FitMethod: CurveFitDataMethod = ...
    """
    Returns or sets  the fitting method 
    
    <hr>
    
    Getter Method
    
    Signature ``FitMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveFitDataMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitMethod`` 
    
    :param fitMethod: 
    :type fitMethod: :py:class:`NXOpen.GeometricUtilities.CurveFitDataMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IsAdvancedFit: bool = ...
    """
    Returns or sets  the advanced fitting option 
    
    <hr>
    
    Getter Method
    
    Signature ``IsAdvancedFit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsAdvancedFit`` 
    
    :param isAdvancedFit: 
    :type isAdvancedFit: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IsAlignShape: bool = ...
    """
    Returns or sets  the align shape option 
    
    <hr>
    
    Getter Method
    
    Signature ``IsAlignShape`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsAlignShape`` 
    
    :param isAlignShape: 
    :type isAlignShape: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaximumDegree: int = ...
    """
    Returns or sets  the maximum degree 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumDegree`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumDegree`` 
    
    :param maximumDegree: 
    :type maximumDegree: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaximumSegments: int = ...
    """
    Returns or sets  the maximum segments 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumSegments`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumSegments`` 
    
    :param maximumSegments: 
    :type maximumSegments: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MinimumDegree: int = ...
    """
    Returns or sets  the minimum degree 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumDegree`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumDegree`` 
    
    :param minimumDegree: 
    :type minimumDegree: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Segments: int = ...
    """
    Returns or sets  the fitting segments 
    
    <hr>
    
    Getter Method
    
    Signature ``Segments`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Segments`` 
    
    :param segments: 
    :type segments: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: CurveFitData = ...  # unknown typename


class TypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Type():
    """
    This enum represents the kind of offset 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoOffset", "No offset"
       "NonsymmetricOffset", "Offset with two different distances"
       "SymmetricOffset", "Offset with same distance in both directions"
       "SingleOffset", "Offset with single distance in one direction"
    """
    NoOffset = 0  # TypeMemberType
    NonsymmetricOffset = 1  # TypeMemberType
    SymmetricOffset = 2  # TypeMemberType
    SingleOffset = 3  # TypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ModlDistanceAngle(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ModlDistanceAngle`
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the value of angular transform.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AngularDirection: NXOpen.Vector3d = ...
    """
    Returns or sets  the direction of angular dimensions.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularDirection`` 
    
    :param angularDirection: 
    :type angularDirection: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Distance: NXOpen.Expression = ...
    """
    Returns  the distance of linear transform.  
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LinearAxis: NXOpen.Axis = ...
    """
    Returns or sets  the linear axis of distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``LinearAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearAxis`` 
    
    :param linearAxis: 
    :type linearAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    OrientXpress: OrientXpressBuilder = ...
    """
    Returns  the orientXpress.  
    
    OrientXpress used as overlay in Motion. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientXpress`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ModlDistanceAngle = ...  # unknown typename


class PartModuleOutputBuilder1(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.PartModuleOutputBuilder1`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.PartModule.CreatePartModuleOutputBuilder1`
    
    Default values.
    
    =============================  ==============
    Property                       Value
    =============================  ==============
    OutputReferences1.ObjectType   BodyCollector 
    =============================  ==============
    
    .. versionadded:: NX8.0.0
    """
    OutputReferences1: NXOpen.Features.PartGeometryCopyBuilder = ...
    """
    Returns  the new part module output data 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputReferences1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.PartGeometryCopyBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PartModuleOutputBuilder1 = ...  # unknown typename


class AlongSpineBuilderRetainSpineOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlongSpineBuilderRetainSpineOption():
    """
    Represents the Spine option. This option will be used while editing the lagecy feaures (Feaures having profile without section in it). 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "KeepOriginal", "Keeps the original profile as it is during edit of pre NX3 parms"
       "Replace", "Deletes the old profile, so that user has to select new one during edit of pre NX3 parms"
    """
    KeepOriginal = 0  # AlongSpineBuilderRetainSpineOptionMemberType
    Replace = 1  # AlongSpineBuilderRetainSpineOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlongSpineBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.AlongSpineBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class RetainSpineOption():
        """
        Represents the Spine option. This option will be used while editing the lagecy feaures (Feaures having profile without section in it). 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "KeepOriginal", "Keeps the original profile as it is during edit of pre NX3 parms"
           "Replace", "Deletes the old profile, so that user has to select new one during edit of pre NX3 parms"
        """
        KeepOriginal = 0  # AlongSpineBuilderRetainSpineOptionMemberType
        Replace = 1  # AlongSpineBuilderRetainSpineOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetSpinePoints(self) -> 'list[OnPathDimWithValueBuilder]':
        """
        Returns the all SpinePointData objects 
        
        Signature ``GetSpinePoints()`` 
        
        :returns:  Array of SpinePointData Objects  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFeatureSpine(self, featureSpine: NXOpen.Section) -> None:
        """
        Set the spine sent by the owning feaure dynamically into builder 
        
        Signature ``SetFeatureSpine(featureSpine)`` 
        
        :param featureSpine:  Set the Spine into builder  
        :type featureSpine: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    
    
    def ResetSpine(self) -> None:
        """
        Reset the spine  
        
        Signature ``ResetSpine()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    
    
    def CreateSpinePoint(self) -> OnPathDimWithValueBuilder:
        """
        Creates a new spine point  
        
        Signature ``CreateSpinePoint()`` 
        
        :returns:  OnPathDimWithValueBuilder Object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FeatureSpine: NXOpen.Section = ...
    """
    Returns  the Spine set by the owning feature of the law 
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureSpine`` 
    
    :returns:  Section object 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Spine: NXOpen.Section = ...
    """
    Returns  the Spine 
    
    <hr>
    
    Getter Method
    
    Signature ``Spine`` 
    
    :returns:  Section object 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SpineOption: AlongSpineBuilderRetainSpineOption = ...
    """
    Returns or sets  the alongSpineOption.  
    
    This will be used only during the edit of Pre NX3 feature Parms 
    
    <hr>
    
    Getter Method
    
    Signature ``SpineOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlongSpineBuilderRetainSpineOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpineOption`` 
    
    :param spineOption: 
    :type spineOption: :py:class:`NXOpen.GeometricUtilities.AlongSpineBuilderRetainSpineOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    SpinePointList: NXOpen.ObjectList = ...
    """
    Returns  the list of spine points.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpinePointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: AlongSpineBuilder = ...  # unknown typename


class FlowDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlowDirectionType():
    """
    flow direction type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSpecified", "Not Specified"
       "Isoparametric", "Iso Parametric"
       "IsoCurveU", "Iso Curve U"
       "IsoCurveV", "Iso Curve V"
       "Perpendicular", "Perpendicular"
       "AdjacentEdges", "Adjacent Edges"
    """
    NotSpecified = 0  # FlowDirectionTypeMemberType
    Isoparametric = 1  # FlowDirectionTypeMemberType
    IsoCurveU = 2  # FlowDirectionTypeMemberType
    IsoCurveV = 3  # FlowDirectionTypeMemberType
    Perpendicular = 4  # FlowDirectionTypeMemberType
    AdjacentEdges = 5  # FlowDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlowDirection(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.FlowDirection`
    Allows user to specify different flow direction to control output surface shape.  
    
    .. versionadded:: NX5.0.0
    """
    
    class Type():
        """
        flow direction type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSpecified", "Not Specified"
           "Isoparametric", "Iso Parametric"
           "IsoCurveU", "Iso Curve U"
           "IsoCurveV", "Iso Curve V"
           "Perpendicular", "Perpendicular"
           "AdjacentEdges", "Adjacent Edges"
        """
        NotSpecified = 0  # FlowDirectionTypeMemberType
        Isoparametric = 1  # FlowDirectionTypeMemberType
        IsoCurveU = 2  # FlowDirectionTypeMemberType
        IsoCurveV = 3  # FlowDirectionTypeMemberType
        Perpendicular = 4  # FlowDirectionTypeMemberType
        AdjacentEdges = 5  # FlowDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FlowDirectionType: FlowDirectionType = ...
    """
    Returns or sets  the flow direction type.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlowDirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FlowDirectionType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlowDirectionType`` 
    
    :param flowDirectionType: 
    :type flowDirectionType: :py:class:`NXOpen.GeometricUtilities.FlowDirectionType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: nx_freeform_1 ("basic freeform modeling")
    """
    Null: FlowDirection = ...  # unknown typename


class SpinePlaneBuilder(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.SpinePlaneBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateEmptySpinePlaneBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def AlternateSolution(self) -> None:
        """
        Creates the longer arc between the current and previous plane.  
        
        Shorter arc is constructed by default. 
        
        Signature ``AlternateSolution()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: SpinePlaneBuilder = ...  # unknown typename


class PatternSpacingsListItemList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[PatternSpacingsListItem]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: PatternSpacingsListItem) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: PatternSpacingsListItem) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> PatternSpacingsListItem:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PatternSpacingsListItem) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PatternSpacingsListItem, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[PatternSpacingsListItem]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[PatternSpacingsListItem]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: PatternSpacingsListItem, object2: PatternSpacingsListItem) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: PatternSpacingsListItem) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.PatternSpacingsListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: PatternSpacingsListItemList = ...  # unknown typename


class OnPathDistancePatternSpacing(PatternSpacing):
    """
    defines the various ways pattern instances can be 
    spaced within the pattern, particularly in the context of the
    PatternDefinition class.  
    
    .. versionadded:: NX7.5.0
    """
    OnPathPitchDistance: OnPathDimensionBuilder = ...
    """
    Returns  the distance for the spacing of the pattern from one instance to the next.  
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathPitchDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OnPathSpanDistance: OnPathDimensionBuilder = ...
    """
    Returns  the distance for the spacing of the pattern for the entire pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathSpanDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: OnPathDistancePatternSpacing = ...  # unknown typename


class WaveLinkRepository(NXOpen.NXObject):
    """
    Represents a  :py:class:`NXOpen.GeometricUtilities.WaveLinkRepository`.  
    
    This object performs the task of embedding the link features created by 
    the command. It also cleans up unused links.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateWavelinkRepository`
    
    .. versionadded:: NX7.5.0
    """
    
    def SetBuilder(self, builder: NXOpen.Builder) -> None:
        """
        Set the builder of the active command.  
        
        If the builder is feat builder, 
        then the feature from the builder will be queried and used as master feature. 
        This master feature is needed to populate the repository with existing slave links on the feature.
        
        Signature ``SetBuilder(builder)`` 
        
        :param builder:  the builder of the command  
        :type builder: :py:class:`NXOpen.Builder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def SetLink(self, linkFeature: NXOpen.Features.Feature) -> None:
        """
        Set the link created by interpart selection 
        
        Signature ``SetLink(linkFeature)`` 
        
        :param linkFeature:  the wavelink feature  
        :type linkFeature: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT")
        """
        ...
    
    
    def Destroy(self) -> None:
        """
        Destroy the link repository 
        
        Signature ``Destroy()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNonFeatureApplication(self, flag: bool) -> None:
        """
        Specify if the client is non-feature based application or not.  
        
        This flag
        is used by the repository to properly clean up unused links. 
        
        Signature ``SetNonFeatureApplication(flag)`` 
        
        :param flag: 
        :type flag: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Null: WaveLinkRepository = ...  # unknown typename


class CurveShapingBuilderInsertionMethodOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveShapingBuilderInsertionMethodOptions():
    """
    Point insertion option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Uniform", "Insert points uniformly"
       "ThroughPoints", "Insert points through points"
       "BetweenPoints", "Insert points between points"
    """
    Uniform = 0  # CurveShapingBuilderInsertionMethodOptionsMemberType
    ThroughPoints = 1  # CurveShapingBuilderInsertionMethodOptionsMemberType
    BetweenPoints = 2  # CurveShapingBuilderInsertionMethodOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveShapingBuilderMovementMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveShapingBuilderMovementMethodType():
    """
    Curve parameter points movement types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WCS", "Movement along WCS principal axis or plane"
       "View", "Movement in view plane"
       "Vector", "Movement along arbitrary direction"
       "Plane", "Movement in arbitrary plane"
       "Normal", "Movement along a face normal"
    """
    WCS = 0  # CurveShapingBuilderMovementMethodTypeMemberType
    View = 1  # CurveShapingBuilderMovementMethodTypeMemberType
    Vector = 2  # CurveShapingBuilderMovementMethodTypeMemberType
    Plane = 3  # CurveShapingBuilderMovementMethodTypeMemberType
    Normal = 4  # CurveShapingBuilderMovementMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveShapingBuilderWCSOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveShapingBuilderWCSOptionType():
    """
    WCS principal axis or plane types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", "Along X axis"
       "Y", "Along Y axis"
       "Z", "Along Z axis"
       "YZ", "In YZ plane"
       "XZ", "In XZ plane"
       "XY", "In XY plane"
    """
    X = 0  # CurveShapingBuilderWCSOptionTypeMemberType
    Y = 1  # CurveShapingBuilderWCSOptionTypeMemberType
    Z = 2  # CurveShapingBuilderWCSOptionTypeMemberType
    YZ = 3  # CurveShapingBuilderWCSOptionTypeMemberType
    XZ = 4  # CurveShapingBuilderWCSOptionTypeMemberType
    XY = 5  # CurveShapingBuilderWCSOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveShapingBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.CurveShapingBuilder`.  
    
    This class allows shaping of curves by identifying key points on them and modifying the
    location of those points. It also allows constraining curve ends.  
    
    .. versionadded:: NX7.5.0
    """
    
    class InsertionMethodOptions():
        """
        Point insertion option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Uniform", "Insert points uniformly"
           "ThroughPoints", "Insert points through points"
           "BetweenPoints", "Insert points between points"
        """
        Uniform = 0  # CurveShapingBuilderInsertionMethodOptionsMemberType
        ThroughPoints = 1  # CurveShapingBuilderInsertionMethodOptionsMemberType
        BetweenPoints = 2  # CurveShapingBuilderInsertionMethodOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MovementMethodType():
        """
        Curve parameter points movement types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WCS", "Movement along WCS principal axis or plane"
           "View", "Movement in view plane"
           "Vector", "Movement along arbitrary direction"
           "Plane", "Movement in arbitrary plane"
           "Normal", "Movement along a face normal"
        """
        WCS = 0  # CurveShapingBuilderMovementMethodTypeMemberType
        View = 1  # CurveShapingBuilderMovementMethodTypeMemberType
        Vector = 2  # CurveShapingBuilderMovementMethodTypeMemberType
        Plane = 3  # CurveShapingBuilderMovementMethodTypeMemberType
        Normal = 4  # CurveShapingBuilderMovementMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WCSOptionType():
        """
        WCS principal axis or plane types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", "Along X axis"
           "Y", "Along Y axis"
           "Z", "Along Z axis"
           "YZ", "In YZ plane"
           "XZ", "In XZ plane"
           "XY", "In XY plane"
        """
        X = 0  # CurveShapingBuilderWCSOptionTypeMemberType
        Y = 1  # CurveShapingBuilderWCSOptionTypeMemberType
        Z = 2  # CurveShapingBuilderWCSOptionTypeMemberType
        YZ = 3  # CurveShapingBuilderWCSOptionTypeMemberType
        XZ = 4  # CurveShapingBuilderWCSOptionTypeMemberType
        XY = 5  # CurveShapingBuilderWCSOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddCurve(self, curve: NXOpen.Curve) -> None:
        """
        Adds a curve for shaping 
        
        Signature ``AddCurve(curve)`` 
        
        :param curve:  Curve to be deformed  
        :type curve: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def RemoveCurve(self, curve: NXOpen.Curve) -> None:
        """
        Removes a curve 
        
        Signature ``RemoveCurve(curve)`` 
        
        :param curve:  Curve to be deleted  
        :type curve: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def SetActivePoints(self, points: 'list[NXOpen.Point]', masterPoint: NXOpen.Point) -> None:
        """
        Sets key points that are selected or will be moved 
        
        Signature ``SetActivePoints(points, masterPoint)`` 
        
        :param points:  Key points  
        :type points: list of :py:class:`NXOpen.Point` 
        :param masterPoint:  Point which user actually moves to move a group of selected points  
        :type masterPoint: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Deform(self) -> None:
        """
        Deforms curves based on active points 
        
        Signature ``Deform()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def ApplyParameterValue(self, sourcePoint: NXOpen.Point, destinationPoints: 'list[NXOpen.Point]') -> None:
        """
        Applies parameter value from a key point to a group of key points without affecting curve shape 
        
        Signature ``ApplyParameterValue(sourcePoint, destinationPoints)`` 
        
        :param sourcePoint:  Point whose parameter value to be applied  
        :type sourcePoint: :py:class:`NXOpen.Point` 
        :param destinationPoints:  Points to be edited  
        :type destinationPoints: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def DeleteAllPoints(self, curve: NXOpen.Spline) -> None:
        """
        Deletes all points on a curve.  
        
        If no curve is specified, deletes all points on all curves. 
        
        Signature ``DeleteAllPoints(curve)`` 
        
        :param curve:  Curve  
        :type curve: :py:class:`NXOpen.Spline` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CanMoveAlongCurve: bool = ...
    """
    Returns or sets  the value indicating if point should be moved along curve.  
    
    A key point is moved along the curve
    in order to change its parametric location without affecting curve shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``CanMoveAlongCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CanMoveAlongCurve`` 
    
    :param canMoveAlongCurve: 
    :type canMoveAlongCurve: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    ConstraintManager: NXOpen.Features.GeometricConstraintDataManager = ...
    """
    Returns  the constraint manager.  
    
    Allows definition of key points to be used to shape the curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintManager`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.GeometricConstraintDataManager` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndContinuity: ContinuityContinuityTypes = ...
    """
    Returns or sets  the continuity at end of the curve 
    
    <hr>
    
    Getter Method
    
    Signature ``EndContinuity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndContinuity`` 
    
    :param endContinuity: 
    :type endContinuity: :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    HasLinearTransition: bool = ...
    """
    Returns or sets  the value indicating if transition type is linear 
    
    <hr>
    
    Getter Method
    
    Signature ``HasLinearTransition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HasLinearTransition`` 
    
    :param hasLinear: 
    :type hasLinear: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    InsertionMethod: CurveShapingBuilderInsertionMethodOptions = ...
    """
    Returns or sets  the point insertion method 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveShapingBuilderInsertionMethodOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertionMethod`` 
    
    :param insertionMethod: 
    :type insertionMethod: :py:class:`NXOpen.GeometricUtilities.CurveShapingBuilderInsertionMethodOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    MovementMethod: CurveShapingBuilderMovementMethodType = ...
    """
    Returns or sets  the movement method 
    
    <hr>
    
    Getter Method
    
    Signature ``MovementMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveShapingBuilderMovementMethodType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MovementMethod`` 
    
    :param movementMethod: 
    :type movementMethod: :py:class:`NXOpen.GeometricUtilities.CurveShapingBuilderMovementMethodType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    MovementPlane: NXOpen.Plane = ...
    """
    Returns or sets  the movement plane 
    
    <hr>
    
    Getter Method
    
    Signature ``MovementPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MovementPlane`` 
    
    :param movementPlane: 
    :type movementPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    MovementVector: NXOpen.Direction = ...
    """
    Returns or sets  the movement vector 
    
    <hr>
    
    Getter Method
    
    Signature ``MovementVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MovementVector`` 
    
    :param movementVector: 
    :type movementVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    Number: int = ...
    """
    Returns or sets  the number of points to be inserted 
    
    <hr>
    
    Getter Method
    
    Signature ``Number`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Number`` 
    
    :param number: 
    :type number: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    OrientExpress: OrientXpressBuilder = ...
    """
    Returns  the orient express object 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientExpress`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectCurves: NXOpen.SelectSplineList = ...
    """
    Returns  the curve selection for point insertion 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectSplineList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    SpecifyPoints: NXOpen.SelectPointList = ...
    """
    Returns  the specified points to define insertion point locations 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyPoints`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartContinuity: ContinuityContinuityTypes = ...
    """
    Returns or sets  the continuity at start of the curve 
    
    <hr>
    
    Getter Method
    
    Signature ``StartContinuity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartContinuity`` 
    
    :param startContinuity: 
    :type startContinuity: :py:class:`NXOpen.GeometricUtilities.ContinuityContinuityTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    WCSOption: CurveShapingBuilderWCSOptionType = ...
    """
    Returns or sets  the WCS option 
    
    <hr>
    
    Getter Method
    
    Signature ``WCSOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveShapingBuilderWCSOptionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WCSOption`` 
    
    :param wcsOption: 
    :type wcsOption: :py:class:`NXOpen.GeometricUtilities.CurveShapingBuilderWCSOptionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: studio_free_form ("STUDIO FREE FORM")
    """
    Null: CurveShapingBuilder = ...  # unknown typename


class FacePlaneSelectionBuilderTrimObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FacePlaneSelectionBuilderTrimObjectType():
    """
    Specifies the object type for blend endcap objects. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plane", "plane end cap"
       "Face", "face end cap"
       "Edge", "edge limit cap"
    """
    Plane = 0  # FacePlaneSelectionBuilderTrimObjectTypeMemberType
    Face = 1  # FacePlaneSelectionBuilderTrimObjectTypeMemberType
    Edge = 2  # FacePlaneSelectionBuilderTrimObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FacePlaneSelectionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.FacePlaneSelectionBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class TrimObjectType():
        """
        Specifies the object type for blend endcap objects. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plane", "plane end cap"
           "Face", "face end cap"
           "Edge", "edge limit cap"
        """
        Plane = 0  # FacePlaneSelectionBuilderTrimObjectTypeMemberType
        Face = 1  # FacePlaneSelectionBuilderTrimObjectTypeMemberType
        Edge = 2  # FacePlaneSelectionBuilderTrimObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    IsOk: bool = ...
    """
    Returns or sets the data OK flag 
    
    <hr>
    
    Getter Method
    
    Signature ``IsOk`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``IsOk`` 
    
    :param isOk: 
    :type isOk: bool 
    
    .. versionadded:: NX7.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    LimitTopolSwitchFinFlag: bool = ...
    """
    Returns or sets  the limit edge switch fin flag 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitTopolSwitchFinFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitTopolSwitchFinFlag`` 
    
    :param switchFlag: 
    :type switchFlag: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    PlaneHelpPoint: NXOpen.Point = ...
    """
    Returns or sets the user plane cap help point 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneHelpPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneHelpPoint`` 
    
    :param helpPoint: 
    :type helpPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SelectEdge: NXOpen.ScCollector = ...
    """
    Returns  the select limit edge 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectFace: FaceSetData = ...
    """
    Returns  the select face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FaceSetData` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectPlane: NXOpen.Plane = ...
    """
    Returns or sets  the select plane 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectPlane`` 
    
    :param selectPlane: 
    :type selectPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    TrimObject: FacePlaneSelectionBuilderTrimObjectType = ...
    """
    Returns or sets  the trim object 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FacePlaneSelectionBuilderTrimObjectType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimObject`` 
    
    :param trimObject: 
    :type trimObject: :py:class:`NXOpen.GeometricUtilities.FacePlaneSelectionBuilderTrimObjectType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    UseFaceCapBlend: bool = ...
    """
    Returns or sets  the use face cap blend flag 
    
    <hr>
    
    Getter Method
    
    Signature ``UseFaceCapBlend`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseFaceCapBlend`` 
    
    :param useFaceCapBlend: 
    :type useFaceCapBlend: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    UsePlaneCapBlend: bool = ...
    """
    Returns or sets  the use plane cap blend 
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlaneCapBlend`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlaneCapBlend`` 
    
    :param usePlaneCapBlend: 
    :type usePlaneCapBlend: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: FacePlaneSelectionBuilder = ...  # unknown typename


class BoundaryDefinitionBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[BoundaryDefinitionBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: BoundaryDefinitionBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: BoundaryDefinitionBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> BoundaryDefinitionBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BoundaryDefinitionBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BoundaryDefinitionBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[BoundaryDefinitionBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[BoundaryDefinitionBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: BoundaryDefinitionBuilder, object2: BoundaryDefinitionBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: BoundaryDefinitionBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: BoundaryDefinitionBuilderList = ...  # unknown typename


class CurveFitJoinJoinMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveFitJoinJoinMethod():
    """
    Represents the curve join method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", "No"
       "Cubic", "Cubic"
       "Genernal", "General"
       "Quintic", "Quintic"
    """
    No = 0  # CurveFitJoinJoinMethodMemberType
    Cubic = 1  # CurveFitJoinJoinMethodMemberType
    Genernal = 2  # CurveFitJoinJoinMethodMemberType
    Quintic = 3  # CurveFitJoinJoinMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveFitJoin(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the curve fit join data 
    
    .. versionadded:: NX5.0.0
    """
    
    class JoinMethod():
        """
        Represents the curve join method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", "No"
           "Cubic", "Cubic"
           "Genernal", "General"
           "Quintic", "Quintic"
        """
        No = 0  # CurveFitJoinJoinMethodMemberType
        Cubic = 1  # CurveFitJoinJoinMethodMemberType
        Genernal = 2  # CurveFitJoinJoinMethodMemberType
        Quintic = 3  # CurveFitJoinJoinMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CurveFitOptions: CurveFitOptions = ...
    """
    Returns  the curve fit options 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveFitOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveFitOptions` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    CurveJoinMethod: CurveFitJoinJoinMethod = ...
    """
    Returns or sets  the curve join method 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveJoinMethod`` 
    
    :returns:  curve fit method  
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveFitJoinJoinMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    
    <hr>
    
    Setter Method
    
    Signature ``CurveJoinMethod`` 
    
    :param curveJoinMethod:  curve fit method  
    :type curveJoinMethod: :py:class:`NXOpen.GeometricUtilities.CurveFitJoinJoinMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: CurveFitJoin = ...  # unknown typename


class ReferencePattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the reference pattern definition.  
    
    .. versionadded:: NX8.0.0
    """
    
    def SetBaseInstance(self, firstIndex: int, secondIndex: int) -> None:
        """
        Set the base instance 
        
        Signature ``SetBaseInstance(firstIndex, secondIndex)`` 
        
        :param firstIndex: 
        :type firstIndex: int 
        :param secondIndex: 
        :type secondIndex: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetBaseInstance(self) -> None:
        """
        Reset the base instance indices to an "undefined" state.  
        
        The base instance will be reset
        so that the indices do not correspond to indices from any instance of the referenced 
        pattern selected. The base instance indices must be set after this call before commit. 
        
        Signature ``ResetBaseInstance()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ReferencedPattern: NXOpen.SelectNXObject = ...
    """
    Returns  the referenced pattern object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencedPattern`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ReferencePattern = ...  # unknown typename


class RenameLinkedPartModulePartBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Features.PartModule` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.FeatureCollection.CreateRenameLinkedPartModulePartBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    @typing.overload
    def SetLinkedPartNameToBeSavedAs(self, linkedPartTag: NXOpen.Part, fileName: str) -> None:
        """
        Add linked part module part tag and its new name to perform "Save As" along with its main part. 
        
        Signature ``SetLinkedPartNameToBeSavedAs(linkedPartTag, fileName)`` 
        
        :param linkedPartTag:  the linked part 
        :type linkedPartTag: :py:class:`NXOpen.Part` 
        :param fileName:  new linked part file name 
        :type fileName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetLinkedPartNameToBeSavedAs(self, linkedPartTag: 'list[NXOpen.Part]', fileName: 'list[str]') -> None:
        """
        Add multiple linked part module part tags and their new names to perform "Save As" along with its main part. 
        
        Signature ``SetLinkedPartNameToBeSavedAs(linkedPartTag, fileName)`` 
        
        :param linkedPartTag:  the linked part 
        :type linkedPartTag: list of :py:class:`NXOpen.Part` 
        :param fileName:  new linked part file name 
        :type fileName: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetLinkedPartNameToBeSavedAs(self, linkedPartTag: NXOpen.Part) -> str:
        """
        Retrieve new name of linked part module part added earlier for "Save As".  
        
        Signature ``GetLinkedPartNameToBeSavedAs(linkedPartTag)`` 
        
        :param linkedPartTag:  the linked part 
        :type linkedPartTag: :py:class:`NXOpen.Part` 
        :returns:  new linked part file name 
        :rtype: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetLinkedPartNameToBeSavedAs(self) -> 'list[str]':
        """
        Retrieve all linked part module parts and their associated new names. 
        
        Signature ``GetLinkedPartNameToBeSavedAs()`` 
        
        :returns:  new linked part file name 
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAllAssociatedLinkedPartModulePartTags(self, mainPartTag: NXOpen.Part) -> 'list[NXOpen.Part]':
        """
        Get all linked part module part tags associated with given main part.  
        
        This function will also load linked parts if they are not loaded. 
        
        Signature ``GetAllAssociatedLinkedPartModulePartTags(mainPartTag)`` 
        
        :param mainPartTag:  the main part for which linked part module parts are to be queried 
        :type mainPartTag: :py:class:`NXOpen.Part` 
        :returns:  all associated linked part module parts 
        :rtype: list of :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Null: RenameLinkedPartModulePartBuilder = ...  # unknown typename


class RegionTrackerExtremityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RegionTrackerExtremityType():
    """
    This enum represents the type of edge extremity. This is used to track vertices. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", "start"
       "End", "end"
    """
    Start = 0  # RegionTrackerExtremityTypeMemberType
    End = 1  # RegionTrackerExtremityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RegionTracker(NXOpen.TaggedObject, IComponentBuilder):
    """
    a class which collects all the geometric entities used to identify a region of faces during a boolean feature.  
    
    .. versionadded:: NX8.5.0
    """
    
    class ExtremityType():
        """
        This enum represents the type of edge extremity. This is used to track vertices. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Start", "start"
           "End", "end"
        """
        Start = 0  # RegionTrackerExtremityTypeMemberType
        End = 1  # RegionTrackerExtremityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetFaceSelectors(self) -> 'list[NXOpen.Face]':
        """
        The input target or tool faces used to identify the region 
        
        Signature ``GetFaceSelectors()`` 
        
        :returns:  Entities to use as selector  
        :rtype: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFaceSelectors(self, entities: 'list[NXOpen.Face]') -> None:
        """
        The input target or tool faces used to identify the region 
        
        Signature ``SetFaceSelectors(entities)`` 
        
        :param entities:  Entities to use as selector  
        :type entities: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetOneFaceSelector(self, entity: NXOpen.Face) -> None:
        """
        An input target or tool face used to identify the region 
        
        Signature ``SetOneFaceSelector(entity)`` 
        
        :param entity:  Entity to use as selector  
        :type entity: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetEdgeSelectors(self) -> 'list[NXOpen.Face]':
        """
        The input target or tool edges used to identify the region 
        
        Signature ``GetEdgeSelectors()`` 
        
        :returns:  Entities to use as selector  
        :rtype: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetEdgeSelectors(self, entities: 'list[NXOpen.Edge]') -> None:
        """
        The input target or tool edges used to identify the region 
        
        Signature ``SetEdgeSelectors(entities)`` 
        
        :param entities:  Entities to use as selector  
        :type entities: list of :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetOneEdgeSelector(self, entity: NXOpen.Edge) -> None:
        """
        An input target or tool edge used to identify the region 
        
        Signature ``SetOneEdgeSelector(entity)`` 
        
        :param entity:  Entity to use as selector  
        :type entity: :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetVertexSelectors(self) -> tuple:
        """
        The input target or tool vertices (edge extremities) used to identify the region 
        
        Signature ``GetVertexSelectors()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (entities, extremities). entities is a list of :py:class:`NXOpen.Edge`.   Edges associated with the vertex extremities is a list of :py:class:`NXOpen.GeometricUtilities.RegionTrackerExtremityType`.   Extremity (false : start, true : end) of the edge corresponding to vertex 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOneVertexSelector(self, entity: NXOpen.Edge, extremity: RegionTrackerExtremityType) -> None:
        """
        One input target or tool vertex (edge extremity) used to identify the region 
        
        Signature ``SetOneVertexSelector(entity, extremity)`` 
        
        :param entity:  Entity to use as selector  
        :type entity: :py:class:`NXOpen.Edge` 
        :param extremity:  Extremity (false : start, true : end) of the edge corresponding to vertex  
        :type extremity: :py:class:`NXOpen.GeometricUtilities.RegionTrackerExtremityType` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetVertexSelectors(self, entities: 'list[NXOpen.Edge]', extremities: 'list[RegionTrackerExtremityType]') -> None:
        """
        The input target or tool vertices (edge extremities) used to identify the region 
        
        Signature ``SetVertexSelectors(entities, extremities)`` 
        
        :param entities:  Entities to use as selector  
        :type entities: list of :py:class:`NXOpen.Edge` 
        :param extremities:  Extremity (false : start, true : end) of the edge corresponding to vertex  
        :type extremities: list of :py:class:`NXOpen.GeometricUtilities.RegionTrackerExtremityType` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetOnePointSelector(self, location: NXOpen.Point3d) -> None:
        """
        The input point location (x,y,z) used to identify the region 
        
        Signature ``SetOnePointSelector(location)`` 
        
        :param location: 
        :type location: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetOwningBody(self) -> NXOpen.Body:
        """
        The owning body where the region is located onto  
        
        Signature ``GetOwningBody()`` 
        
        :returns:  region owning entity  
        :rtype: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetOwningBody(self, owningBodyEid: NXOpen.Body) -> None:
        """
        The owning body where the region is located onto 
        
        Signature ``SetOwningBody(owningBodyEid)`` 
        
        :param owningBodyEid:  region owning body  
        :type owningBodyEid: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def AppendOneBoundaryBody(self, boundaryBodyEid: NXOpen.Body, sideness: bool) -> None:
        """
        Append one new region boundary body to the region tracker 
        
        Signature ``AppendOneBoundaryBody(boundaryBodyEid, sideness)`` 
        
        :param boundaryBodyEid:  region boundary body  
        :type boundaryBodyEid: :py:class:`NXOpen.Body` 
        :param sideness:  region boundary sideness  
        :type sideness: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    OnTool: bool = ...
    """
    Returns or sets  a flag indicating if the region belongs to the tool (true) or to the target (false) 
    
    <hr>
    
    Getter Method
    
    Signature ``OnTool`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OnTool`` 
    
    :param isOnTool: 
    :type isOnTool: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: RegionTracker = ...  # unknown typename


class FtmTransformCurvesBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[FtmTransformCurvesBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: FtmTransformCurvesBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: FtmTransformCurvesBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> FtmTransformCurvesBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FtmTransformCurvesBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FtmTransformCurvesBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[FtmTransformCurvesBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[FtmTransformCurvesBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: FtmTransformCurvesBuilder, object2: FtmTransformCurvesBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: FtmTransformCurvesBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.FtmTransformCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: FtmTransformCurvesBuilderList = ...  # unknown typename


class PolygonPatternSizeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PolygonPatternSizeOptions():
    """
    defines polygon size options for polygon type pattern.   
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inscribed", "use inscribed circle to define a polygon"
       "Circumscribed", "use circumscribed circle to define a polygon"
    """
    Inscribed = 0  # PolygonPatternSizeOptionsMemberType
    Circumscribed = 1  # PolygonPatternSizeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PolygonPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the polygon pattern definition.  
    
    Allows specification along
    both the angular and radial directions. 
    
    .. versionadded:: NX8.0.0
    """
    
    class SizeOptions():
        """
        defines polygon size options for polygon type pattern.   
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inscribed", "use inscribed circle to define a polygon"
           "Circumscribed", "use circumscribed circle to define a polygon"
        """
        Inscribed = 0  # PolygonPatternSizeOptionsMemberType
        Circumscribed = 1  # PolygonPatternSizeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Flip: bool = ...
    """
    Returns or sets  the flip object for 2D mode.  
    
    This function gets the flip attribute of the 2D pattern. 
    
    <hr>
    
    Getter Method
    
    Signature ``Flip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Flip`` 
    
    :param enabled: 
    :type enabled: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HorizontalRef: HorizontalReference = ...
    """
    Returns  the horizontal reference 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRef`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.HorizontalReference` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NumberOfSides: NXOpen.Expression = ...
    """
    Returns  the number of sides for the polygon type pattern will generated in this direction 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfSides`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PolygonSizeOption: PolygonPatternSizeOptions = ...
    """
    Returns or sets  the polygon size option 
    
    <hr>
    
    Getter Method
    
    Signature ``PolygonSizeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PolygonPatternSizeOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PolygonSizeOption`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.GeometricUtilities.PolygonPatternSizeOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PolygonSpacing: PolygonPatternSpacing = ...
    """
    Returns  the polygon spacing of the instances of the pattern
    
    <hr>
    
    Getter Method
    
    Signature ``PolygonSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PolygonPatternSpacing` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RadialSpacing: DistancePatternSpacing = ...
    """
    Returns  the radial spacing of the instances of the pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.DistancePatternSpacing` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RotationAxis: NXOpen.Axis = ...
    """
    Returns or sets  the rotation axis for the pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationAxis`` 
    
    :param rotationAxis: 
    :type rotationAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RotationCenter: NXOpen.Point = ...
    """
    Returns or sets  the rotation center for the 2d pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotationCenter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationCenter`` 
    
    :param rotationCenter: 
    :type rotationCenter: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UseRadialDirectionToggle: bool = ...
    """
    Returns or sets  the UseRadialDirection toggle attribute.  
    
    This function gets the UseRadialDirection toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``UseRadialDirectionToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseRadialDirectionToggle`` 
    
    :param toggle: 
    :type toggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PolygonPattern = ...  # unknown typename


class BlendSetbackBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[BlendSetbackBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: BlendSetbackBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: BlendSetbackBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> BlendSetbackBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BlendSetbackBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: BlendSetbackBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[BlendSetbackBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[BlendSetbackBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: BlendSetbackBuilder, object2: BlendSetbackBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: BlendSetbackBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: BlendSetbackBuilderList = ...  # unknown typename


class PatternIncrementItemOperationEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternIncrementItemOperationEnum():
    """
    increment operation option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Add", "add the increment to the master value."
       "Multiply", "multiply the increment to the master value."
    """
    Add = 0  # PatternIncrementItemOperationEnumMemberType
    Multiply = 1  # PatternIncrementItemOperationEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternIncrementItem(NXOpen.TaggedObject, IComponentBuilder):
    """
    variational for one master expression of the input object(s) being patterned.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.PatternIncrementsList.CreatePatternIncrementItem`
    
    .. versionadded:: NX7.5.0
    """
    
    class OperationEnum():
        """
        increment operation option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Add", "add the increment to the master value."
           "Multiply", "multiply the increment to the master value."
        """
        Add = 0  # PatternIncrementItemOperationEnumMemberType
        Multiply = 1  # PatternIncrementItemOperationEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    IncrementExpression: NXOpen.Expression = ...
    """
    Returns  the increment or variation to be applied to master expression 
    
    <hr>
    
    Getter Method
    
    Signature ``IncrementExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MasterExpression: NXOpen.Expression = ...
    """
    Returns  the master expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Operation: PatternIncrementItemOperationEnum = ...
    """
    Returns or sets  the increment operation 
    
    <hr>
    
    Getter Method
    
    Signature ``Operation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItemOperationEnum` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Operation`` 
    
    :param operation: 
    :type operation: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItemOperationEnum` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PatternIncrementItem = ...  # unknown typename


class BlendSetbackBuilderDirectionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlendSetbackBuilderDirections():
    """
    Setback direction options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "U", "setback curve is an iso-u parameter curve"
       "V", "setback curve is an iso-v parameter curve"
       "Plane", "setback curve is the intersection curve between a plane and faces"
    """
    U = 0  # BlendSetbackBuilderDirectionsMemberType
    V = 1  # BlendSetbackBuilderDirectionsMemberType
    Plane = 2  # BlendSetbackBuilderDirectionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlendSetbackBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class provides ability to define a setback curve on a blend face.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateEmptyBlendSetbackBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class Directions():
        """
        Setback direction options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "U", "setback curve is an iso-u parameter curve"
           "V", "setback curve is an iso-v parameter curve"
           "Plane", "setback curve is the intersection curve between a plane and faces"
        """
        U = 0  # BlendSetbackBuilderDirectionsMemberType
        V = 1  # BlendSetbackBuilderDirectionsMemberType
        Plane = 2  # BlendSetbackBuilderDirectionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Direction: BlendSetbackBuilderDirections = ...
    """
    Returns or sets  the direction type 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilderDirections` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.GeometricUtilities.BlendSetbackBuilderDirections` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Face: NXOpen.ScCollector = ...
    """
    Returns  the blend face collector.  
    
    The collector can include faces from different blends. 
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HandlePoint: NXOpen.Point = ...
    """
    Returns or sets  the handle point for u/v direction.  
    
    The setback curve will pass through the handle point. 
    
    <hr>
    
    Getter Method
    
    Signature ``HandlePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandlePoint`` 
    
    :param handlePoint: 
    :type handlePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    IsDirectionFlipped: bool = ...
    """
    Returns or sets  the flag indicating if the setback curve direction is flipped.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsDirectionFlipped`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsDirectionFlipped`` 
    
    :param flipDirection: 
    :type flipDirection: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the setback plane.  
    
    The setback curve will be the intersection curve between plane and face collector. 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SetbackPoint: NXOpen.Point = ...
    """
    Returns or sets  the setback point for u/v direction.  
    
    This point is optional. 
    If specified, it will replace the handle point and establish the associativity 
    between the point and the setback curve. 
    Once the handle point is changed through dragging, the associativity will be lost. 
    
    <hr>
    
    Getter Method
    
    Signature ``SetbackPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SetbackPoint`` 
    
    :param setbackPoint: 
    :type setbackPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: BlendSetbackBuilder = ...  # unknown typename


class PatternFillPatternFillOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternFillPatternFillOptions():
    """
    This defines Fill Types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "no section is defined"
       "FillbyFace", "section is face-based, and for fill area."
       "FillbyBoundary", "section is for fill area."
       "ExcludeAreaOnly", "section is for exclude area only"
    """
    NotSet = 0  # PatternFillPatternFillOptionsMemberType
    FillbyFace = 1  # PatternFillPatternFillOptionsMemberType
    FillbyBoundary = 2  # PatternFillPatternFillOptionsMemberType
    ExcludeAreaOnly = 3  # PatternFillPatternFillOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternFill(NXOpen.TaggedObject, IComponentBuilder):
    """
    the pattern fill definition.  
    
    Allows to speicify a section boundary with an offset margin. 
    
    .. versionadded:: NX7.5.0
    """
    
    class PatternFillOptions():
        """
        This defines Fill Types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "no section is defined"
           "FillbyFace", "section is face-based, and for fill area."
           "FillbyBoundary", "section is for fill area."
           "ExcludeAreaOnly", "section is for exclude area only"
        """
        NotSet = 0  # PatternFillPatternFillOptionsMemberType
        FillbyFace = 1  # PatternFillPatternFillOptionsMemberType
        FillbyBoundary = 2  # PatternFillPatternFillOptionsMemberType
        ExcludeAreaOnly = 3  # PatternFillPatternFillOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ApplyMarginToInnerBoundToggle: bool = ...
    """
    Returns or sets  the applyMarginToInnerBoundToggle, a logical flag to indicate if we need to apply the margin value to internal bounday.  
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyMarginToInnerBoundToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyMarginToInnerBoundToggle`` 
    
    :param applyMarginToInnerBoundToggle: 
    :type applyMarginToInnerBoundToggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    FaceBoundary: NXOpen.Section = ...
    """
    Returns  the face boundary 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FillBoundary: NXOpen.Section = ...
    """
    Returns  the fill boundary 
    
    <hr>
    
    Getter Method
    
    Signature ``FillBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FillMargin: NXOpen.Expression = ...
    """
    Returns  the fill margin 
    
    <hr>
    
    Getter Method
    
    Signature ``FillMargin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FillOptions: PatternFillPatternFillOptions = ...
    """
    Returns or sets  the fill options 
    
    <hr>
    
    Getter Method
    
    Signature ``FillOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternFillPatternFillOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FillOptions`` 
    
    :param fillOptions: 
    :type fillOptions: :py:class:`NXOpen.GeometricUtilities.PatternFillPatternFillOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InternalBoundary: NXOpen.Section = ...
    """
    Returns  the fill boundary 
    
    <hr>
    
    Getter Method
    
    Signature ``InternalBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SimplifiedBoundaryToggle: bool = ...
    """
    Returns or sets  the simplifiedBoundaryToggle, a logical flag to indicate a special case for Linear, Circular, Spiral, or Polygon.  
    
    <hr>
    
    Getter Method
    
    Signature ``SimplifiedBoundaryToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SimplifiedBoundaryToggle`` 
    
    :param simplifiedBoundaryToggle: 
    :type simplifiedBoundaryToggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: PatternFill = ...  # unknown typename


class OrientationMethodBuilderOrientationOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OrientationMethodBuilderOrientationOptions():
    """
    This enum represents the orientation option. By default, it is set to Fixed.
    Angular Law orientation option is invalid if 2 guides are selected. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fixed", "Fixed"
       "ByFaceNormals", "Face Normals"
       "ByVectorDirection", "Vector Direction"
       "ByAnotherCurve", "Another Curve"
       "ByAPoint", "A Point"
       "ByAngularLaw", "Angular Law"
       "ByForcedDirection", "Forced Direction"
    """
    Fixed = 0  # OrientationMethodBuilderOrientationOptionsMemberType
    ByFaceNormals = 1  # OrientationMethodBuilderOrientationOptionsMemberType
    ByVectorDirection = 2  # OrientationMethodBuilderOrientationOptionsMemberType
    ByAnotherCurve = 3  # OrientationMethodBuilderOrientationOptionsMemberType
    ByAPoint = 4  # OrientationMethodBuilderOrientationOptionsMemberType
    ByAngularLaw = 5  # OrientationMethodBuilderOrientationOptionsMemberType
    ByForcedDirection = 6  # OrientationMethodBuilderOrientationOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OrientationMethodBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.OrientationMethodBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class OrientationOptions():
        """
        This enum represents the orientation option. By default, it is set to Fixed.
        Angular Law orientation option is invalid if 2 guides are selected. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fixed", "Fixed"
           "ByFaceNormals", "Face Normals"
           "ByVectorDirection", "Vector Direction"
           "ByAnotherCurve", "Another Curve"
           "ByAPoint", "A Point"
           "ByAngularLaw", "Angular Law"
           "ByForcedDirection", "Forced Direction"
        """
        Fixed = 0  # OrientationMethodBuilderOrientationOptionsMemberType
        ByFaceNormals = 1  # OrientationMethodBuilderOrientationOptionsMemberType
        ByVectorDirection = 2  # OrientationMethodBuilderOrientationOptionsMemberType
        ByAnotherCurve = 3  # OrientationMethodBuilderOrientationOptionsMemberType
        ByAPoint = 4  # OrientationMethodBuilderOrientationOptionsMemberType
        ByAngularLaw = 5  # OrientationMethodBuilderOrientationOptionsMemberType
        ByForcedDirection = 6  # OrientationMethodBuilderOrientationOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngularLaw: LawBuilder = ...
    """
    Returns  the angular law.  
    
    For orientation by an Angular Law, the section rotation along the guide curve is governed by the input law. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularLaw`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Faces: NXOpen.ScCollector = ...
    """
    Returns  the faces that provide normal direction for alignment of second axis of local coordinate system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Faces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    NormalFaceList: NXOpen.SelectFaceList = ...
    """
    Returns  the normal face list.  
    
    For orientation by Face Normals, the second axis of the local coordinate system is aligned with the resultant 
    of normals of the input faces. 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalFaceList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`NXOpen.GeometricUtilities.OrientationMethodBuilder.Faces`
    
    License requirements: None.
    """
    OrientationCurve: NXOpen.Section = ...
    """
    Returns  the orientation curve.  
    
    For orientation by Another Curve, the second axis of the local coordinate system is obtained by joining
    corresponding points on the guide and the input section. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    OrientationOption: OrientationMethodBuilderOrientationOptions = ...
    """
    Returns or sets  the orientation option.  
    
    Except for Fixed orientation method, additional parameters and/or inputs are required. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OrientationMethodBuilderOrientationOptions` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationOption`` 
    
    :param orientationOption: 
    :type orientationOption: :py:class:`NXOpen.GeometricUtilities.OrientationMethodBuilderOrientationOptions` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OrientationPoint: NXOpen.Point = ...
    """
    Returns or sets  the orientation point.  
    
    For orientation by a Point, the second axis is obtained with the equivalent of a three-sided ruled 
    sheet between the guide string and the input point. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationPoint`` 
    
    :param orientationPoint: 
    :type orientationPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OrientationVector: NXOpen.Direction = ...
    """
    Returns or sets  the orientation vector.  
    
    For orientation by Vector, the second axis of the local coordinate system is aligned with the input vector. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationVector`` 
    
    :param orientationVector: 
    :type orientationVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: OrientationMethodBuilder = ...  # unknown typename


class FeatureOptionsBodyStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FeatureOptionsBodyStyle():
    """
    This enum represents the various body types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Solid", "Solid Body"
       "Sheet", "Sheet Body"
    """
    Solid = 0  # FeatureOptionsBodyStyleMemberType
    Sheet = 1  # FeatureOptionsBodyStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FeatureOptions(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents various options supported on features.  
    
    .. versionadded:: NX4.0.0
    """
    
    class BodyStyle():
        """
        This enum represents the various body types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Solid", "Solid Body"
           "Sheet", "Sheet Body"
        """
        Solid = 0  # FeatureOptionsBodyStyleMemberType
        Sheet = 1  # FeatureOptionsBodyStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BodyType: FeatureOptionsBodyStyle = ...
    """
    Returns or sets  the body type 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyType`` 
    
    :returns:  body type  
    :rtype: :py:class:`NXOpen.GeometricUtilities.FeatureOptionsBodyStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodyType`` 
    
    :param type:  body type  
    :type type: :py:class:`NXOpen.GeometricUtilities.FeatureOptionsBodyStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: FeatureOptions = ...  # unknown typename


class StartHoleDataHoleFormsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StartHoleDataHoleForms():
    """
    This enum represents hole form options in start plate of hole series. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", "Simple hole form"
       "Counterbored", "Counterbored hole form"
       "Countersink", "Countersink hole form"
    """
    Simple = 0  # StartHoleDataHoleFormsMemberType
    Counterbored = 1  # StartHoleDataHoleFormsMemberType
    Countersink = 2  # StartHoleDataHoleFormsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StartHoleData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.StartHoleData`   
    
    .. versionadded:: NX5.0.2
    """
    
    class HoleForms():
        """
        This enum represents hole form options in start plate of hole series. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", "Simple hole form"
           "Counterbored", "Counterbored hole form"
           "Countersink", "Countersink hole form"
        """
        Simple = 0  # StartHoleDataHoleFormsMemberType
        Counterbored = 1  # StartHoleDataHoleFormsMemberType
        Countersink = 2  # StartHoleDataHoleFormsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BooleanOperation: BooleanOperation = ...
    """
    Returns  the boolean operation 
    
    <hr>
    
    Getter Method
    
    Signature ``BooleanOperation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanOperation` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    CounterboreDepth: NXOpen.Expression = ...
    """
    Returns  the counterbore depth 
    
    <hr>
    
    Getter Method
    
    Signature ``CounterboreDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    CounterboreDiameter: NXOpen.Expression = ...
    """
    Returns  the counterbore diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``CounterboreDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    CountersinkAngle: NXOpen.Expression = ...
    """
    Returns  the countersink angle 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersinkAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    CountersinkDiameter: NXOpen.Expression = ...
    """
    Returns  the countersink diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``CountersinkDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    EndChamferAngle: NXOpen.Expression = ...
    """
    Returns  the end chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``EndChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    EndChamferEnabled: bool = ...
    """
    Returns or sets  the end chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``EndChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndChamferEnabled`` 
    
    :param endChamferEnabled: 
    :type endChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    EndChamferOffset: NXOpen.Expression = ...
    """
    Returns  the end chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``EndChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    FitOption: str = ...
    """
    Returns or sets  the fit option 
    
    <hr>
    
    Getter Method
    
    Signature ``FitOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitOption`` 
    
    :param fitOption: 
    :type fitOption: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    HoleDiameter: NXOpen.Expression = ...
    """
    Returns  the hole diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    HoleForm: StartHoleDataHoleForms = ...
    """
    Returns or sets  the hole form 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleForm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.StartHoleDataHoleForms` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleForm`` 
    
    :param holeForm: 
    :type holeForm: :py:class:`NXOpen.GeometricUtilities.StartHoleDataHoleForms` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    NeckChamferAngle: NXOpen.Expression = ...
    """
    Returns  the neck chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``NeckChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    NeckChamferEnabled: bool = ...
    """
    Returns or sets  the neck chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``NeckChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeckChamferEnabled`` 
    
    :param neckChamferEnabled: 
    :type neckChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    NeckChamferOffset: NXOpen.Expression = ...
    """
    Returns  the neck chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``NeckChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ReliefDepth: NXOpen.Expression = ...
    """
    Returns  the relief depth 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    ReliefEnabled: bool = ...
    """
    Returns or sets  the  relief  enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefEnabled`` 
    
    :param reliefEnabled: 
    :type reliefEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrewSize: str = ...
    """
    Returns or sets  the screw size 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewSize`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewSize`` 
    
    :param screwSize: 
    :type screwSize: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrewType: str = ...
    """
    Returns or sets  the screw type 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewType`` 
    
    :param screwType: 
    :type screwType: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartChamferAngle: NXOpen.Expression = ...
    """
    Returns  the start chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``StartChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    StartChamferEnabled: bool = ...
    """
    Returns or sets  the start chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``StartChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartChamferEnabled`` 
    
    :param startChamferEnabled: 
    :type startChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartChamferOffset: NXOpen.Expression = ...
    """
    Returns  the start chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``StartChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    Null: StartHoleData = ...  # unknown typename


class BlendStopshortBuilderCollection(NXOpen.TaggedObjectCollection):
    """
    This class contains the factory methods for creating an BlendStopshortBuilder.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def Create(self, mChoice: BlendStopshortBuilderChoices, mOnPathExp: NXOpen.Expression, mPath: NXOpen.Edge, mIsFlipped: bool, mThruPoint: NXOpen.Point) -> BlendStopshortBuilder:
        """
        Creates an BlendStopshortBuilder.  
        
        Signature ``Create(mChoice, mOnPathExp, mPath, mIsFlipped, mThruPoint)`` 
        
        :param mChoice:  the Stopshort option choice  
        :type mChoice: :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilderChoices` 
        :param mOnPathExp:  the expression for the OnPathDimensionBuilder  
        :type mOnPathExp: :py:class:`NXOpen.Expression` 
        :param mPath:  the path for the OnPathDimensionBuilder  
        :type mPath: :py:class:`NXOpen.Edge` 
        :param mIsFlipped:  the isFlipped flag for the OnPathDimensionBuilder  
        :type mIsFlipped: bool 
        :param mThruPoint:  the through point for the OnPathDimensionBuilder  
        :type mThruPoint: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.BlendStopshortBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class AlongPathPatternYDirectionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlongPathPatternYDirectionOptions():
    """
    This defines y direction Types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Vector", "y direction is a vector."
       "Section", "y direction is a section."
    """
    Vector = 0  # AlongPathPatternYDirectionOptionsMemberType
    Section = 1  # AlongPathPatternYDirectionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlongPathPatternPathOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlongPathPatternPathOptions():
    """
    This defines path options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rigid", "path is the selected section."
       "Offset", "path is an offset from the selected path."
       "Translate", "path is a translation from the selected path."
    """
    Rigid = 0  # AlongPathPatternPathOptionsMemberType
    Offset = 1  # AlongPathPatternPathOptionsMemberType
    Translate = 2  # AlongPathPatternPathOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlongPathPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the AlongPath pattern definition.  
    
    Allows specification along
    two section pathes. 
    
    .. versionadded:: NX7.5.0
    """
    
    class YDirectionOptions():
        """
        This defines y direction Types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Vector", "y direction is a vector."
           "Section", "y direction is a section."
        """
        Vector = 0  # AlongPathPatternYDirectionOptionsMemberType
        Section = 1  # AlongPathPatternYDirectionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PathOptions():
        """
        This defines path options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rigid", "path is the selected section."
           "Offset", "path is an offset from the selected path."
           "Translate", "path is a translation from the selected path."
        """
        Rigid = 0  # AlongPathPatternPathOptionsMemberType
        Offset = 1  # AlongPathPatternPathOptionsMemberType
        Translate = 2  # AlongPathPatternPathOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    UseYDirectionToggle: bool = ...
    """
    Returns or sets  the UseYDirection toggle attribute.  
    
    This function gets the UseYDirection toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``UseYDirectionToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseYDirectionToggle`` 
    
    :param toggle: 
    :type toggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XOnPathSpacing: OnPathDistancePatternSpacing = ...
    """
    Returns  the on path instance spacing along the x path 
    
    <hr>
    
    Getter Method
    
    Signature ``XOnPathSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDistancePatternSpacing` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XPath: NXOpen.Section = ...
    """
    Returns or sets  the x path 
    
    <hr>
    
    Getter Method
    
    Signature ``XPath`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XPath`` 
    
    :param xPath: 
    :type xPath: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XPathOption: AlongPathPatternPathOptions = ...
    """
    Returns or sets  the x path options 
    
    <hr>
    
    Getter Method
    
    Signature ``XPathOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlongPathPatternPathOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XPathOption`` 
    
    :param xPathOption: 
    :type xPathOption: :py:class:`NXOpen.GeometricUtilities.AlongPathPatternPathOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    YDirection: NXOpen.Direction = ...
    """
    Returns or sets  the y axis, which can be any vector not parallel to the x axis 
    
    <hr>
    
    Getter Method
    
    Signature ``YDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDirection`` 
    
    :param yDirection: 
    :type yDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YDirectionOption: AlongPathPatternYDirectionOptions = ...
    """
    Returns or sets  the y direction options 
    
    <hr>
    
    Getter Method
    
    Signature ``YDirectionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlongPathPatternYDirectionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDirectionOption`` 
    
    :param yDirectionOption: 
    :type yDirectionOption: :py:class:`NXOpen.GeometricUtilities.AlongPathPatternYDirectionOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YOnPathSpacing: OnPathDistancePatternSpacing = ...
    """
    Returns  the on path instance spacing along the y path 
    
    <hr>
    
    Getter Method
    
    Signature ``YOnPathSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDistancePatternSpacing` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YPath: NXOpen.Section = ...
    """
    Returns or sets  the y path, which can be any continuous section 
    
    <hr>
    
    Getter Method
    
    Signature ``YPath`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YPath`` 
    
    :param yPath: 
    :type yPath: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YPathOption: AlongPathPatternPathOptions = ...
    """
    Returns or sets  the y path options 
    
    <hr>
    
    Getter Method
    
    Signature ``YPathOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlongPathPatternPathOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YPathOption`` 
    
    :param yPathOption: 
    :type yPathOption: :py:class:`NXOpen.GeometricUtilities.AlongPathPatternPathOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    YSpacing: DistancePatternSpacing = ...
    """
    Returns  the instance spacing along the y axis 
    
    <hr>
    
    Getter Method
    
    Signature ``YSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.DistancePatternSpacing` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: AlongPathPattern = ...  # unknown typename


class SupportPlaneDataLockPlaneStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SupportPlaneDataLockPlaneStatus():
    """
    Represents support plane lock status for associative basic curves
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", "No Lock"
       "AfterFirstConstraint", "Lock after first constraint"
       "AfterSecondConstraint", "Lock after second constraint"
       "AfterThirdConstraint", "Lock after third constraint"
       "AfterFirstAndSecondConstraint", "Lock after first and second constraint"
       "AfterFirstAndThirdConstraint", "Lock after first and third constraint"
       "AfterSecondAndThirdConstraint", "Lock after second and third constraint"
       "AfterAllConstraint", "Lock after all constraint"
       "LockExistingPlane", "Lock support plane using existing face or datum"
       "CenterPointDirection", "Lock support plane using center point and direction, this option should be used for Center Radius Arc only"
    """
    No = 0  # SupportPlaneDataLockPlaneStatusMemberType
    AfterFirstConstraint = 1  # SupportPlaneDataLockPlaneStatusMemberType
    AfterSecondConstraint = 2  # SupportPlaneDataLockPlaneStatusMemberType
    AfterThirdConstraint = 3  # SupportPlaneDataLockPlaneStatusMemberType
    AfterFirstAndSecondConstraint = 4  # SupportPlaneDataLockPlaneStatusMemberType
    AfterFirstAndThirdConstraint = 5  # SupportPlaneDataLockPlaneStatusMemberType
    AfterSecondAndThirdConstraint = 6  # SupportPlaneDataLockPlaneStatusMemberType
    AfterAllConstraint = 7  # SupportPlaneDataLockPlaneStatusMemberType
    LockExistingPlane = 8  # SupportPlaneDataLockPlaneStatusMemberType
    CenterPointDirection = 9  # SupportPlaneDataLockPlaneStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SupportPlaneData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.SupportPlaneData`   
    
    .. versionadded:: NX5.0.0
    """
    
    class LockPlaneStatus():
        """
        Represents support plane lock status for associative basic curves
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", "No Lock"
           "AfterFirstConstraint", "Lock after first constraint"
           "AfterSecondConstraint", "Lock after second constraint"
           "AfterThirdConstraint", "Lock after third constraint"
           "AfterFirstAndSecondConstraint", "Lock after first and second constraint"
           "AfterFirstAndThirdConstraint", "Lock after first and third constraint"
           "AfterSecondAndThirdConstraint", "Lock after second and third constraint"
           "AfterAllConstraint", "Lock after all constraint"
           "LockExistingPlane", "Lock support plane using existing face or datum"
           "CenterPointDirection", "Lock support plane using center point and direction, this option should be used for Center Radius Arc only"
        """
        No = 0  # SupportPlaneDataLockPlaneStatusMemberType
        AfterFirstConstraint = 1  # SupportPlaneDataLockPlaneStatusMemberType
        AfterSecondConstraint = 2  # SupportPlaneDataLockPlaneStatusMemberType
        AfterThirdConstraint = 3  # SupportPlaneDataLockPlaneStatusMemberType
        AfterFirstAndSecondConstraint = 4  # SupportPlaneDataLockPlaneStatusMemberType
        AfterFirstAndThirdConstraint = 5  # SupportPlaneDataLockPlaneStatusMemberType
        AfterSecondAndThirdConstraint = 6  # SupportPlaneDataLockPlaneStatusMemberType
        AfterAllConstraint = 7  # SupportPlaneDataLockPlaneStatusMemberType
        LockExistingPlane = 8  # SupportPlaneDataLockPlaneStatusMemberType
        CenterPointDirection = 9  # SupportPlaneDataLockPlaneStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ExistingPlane: NXOpen.DisplayableObject = ...
    """
    Returns or sets  the existing face or plane
    
    <hr>
    
    Getter Method
    
    Signature ``ExistingPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.DisplayableObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExistingPlane`` 
    
    :param existingPlane: 
    :type existingPlane: :py:class:`NXOpen.DisplayableObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    SupportPlane: NXOpen.Plane = ...
    """
    Returns or sets  the support plane
    
    <hr>
    
    Getter Method
    
    Signature ``SupportPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SupportPlane`` 
    
    :param supportPlane: 
    :type supportPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    SupportPlaneLockStatus: SupportPlaneDataLockPlaneStatus = ...
    """
    Returns or sets  the support plane lock status 
    
    <hr>
    
    Getter Method
    
    Signature ``SupportPlaneLockStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SupportPlaneDataLockPlaneStatus` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SupportPlaneLockStatus`` 
    
    :param lockPlaneStatus: 
    :type lockPlaneStatus: :py:class:`NXOpen.GeometricUtilities.SupportPlaneDataLockPlaneStatus` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    WorkView: NXOpen.View = ...
    """
    Returns or sets  the work view required when lock plane status is :py:class:`NXOpen.GeometricUtilities.SupportPlaneDataLockPlaneStatus.AfterFirstConstraint <NXOpen.GeometricUtilities.SupportPlaneDataLockPlaneStatus>` 
    
    <hr>
    
    Getter Method
    
    Signature ``WorkView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkView`` 
    
    :param workView: 
    :type workView: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: SupportPlaneData = ...  # unknown typename


class ExtrudeRevolveToolBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    a class which is a sub-component of BooleanTool.  
    
    It provides other two basic tools
    * creation methods by creating extrude or revolve bodies on the fly. Given a
    * super section with non-intersecting loops and a certain direction,
    * it will create a revolve tool or an extrude tool to do the boolean operation.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ToolAxis: NXOpen.Axis = ...
    """
    Returns or sets  the tool axis used for doing revolve
    
    <hr>
    
    Getter Method
    
    Signature ``ToolAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolAxis`` 
    
    :param toolAxis: 
    :type toolAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ToolDirection: NXOpen.Direction = ...
    """
    Returns or sets  the tool direction used for doing extrude 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolDirection`` 
    
    :param toolDirection: 
    :type toolDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ToolSection: NXOpen.Section = ...
    """
    Returns  the tool super section 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ExtrudeRevolveToolBuilder = ...  # unknown typename


class FtmTransformPointsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.OmnicadManager.CreateFtmTransformPointsBuilder`
    
    .. versionadded:: NX10.0.0
    """
    TransformEndPoint: NXOpen.Point = ...
    """
    Returns or sets  the end point that defines the end or target point constraint on the product shape 
    
    <hr>
    
    Getter Method
    
    Signature ``TransformEndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransformEndPoint`` 
    
    :param transformEndPoint: 
    :type transformEndPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    TransformStartPoint: NXOpen.Point = ...
    """
    Returns or sets  the start point that defines the starting point constraint on the product shape 
    
    <hr>
    
    Getter Method
    
    Signature ``TransformStartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransformStartPoint`` 
    
    :param transformStartPoint: 
    :type transformStartPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: FtmTransformPointsBuilder = ...  # unknown typename


class TwoExpressionsSectionSetList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[TwoExpressionsSectionSet]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: TwoExpressionsSectionSet) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: TwoExpressionsSectionSet) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> TwoExpressionsSectionSet:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TwoExpressionsSectionSet) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TwoExpressionsSectionSet, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[TwoExpressionsSectionSet]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[TwoExpressionsSectionSet]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: TwoExpressionsSectionSet, object2: TwoExpressionsSectionSet) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: TwoExpressionsSectionSet) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.TwoExpressionsSectionSet` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TwoExpressionsSectionSetList = ...  # unknown typename


class FacePlaneSelectionBuilderCollection(NXOpen.TaggedObjectCollection):
    """
    This class contains the factory methods for creating an FacePlaneSelectionBuilder.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def Create(self) -> FacePlaneSelectionBuilder:
        """
        Creates an FacePlaneSelectionBuilder.  
        
        Signature ``Create()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.FacePlaneSelectionBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Destroy(self, entityBuilderData: FacePlaneSelectionBuilder) -> None:
        """
        Destroys an FacePlaneSelectionBuilder.  
        
        Signature ``Destroy(entityBuilderData)`` 
        
        :param entityBuilderData: 
        :type entityBuilderData: :py:class:`NXOpen.GeometricUtilities.FacePlaneSelectionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class ExtensionMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExtensionMethod():
    """
    This enum represents the extension method 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Incremental", "Extension Method Incremental"
       "Total", "Extension Method Total"
    """
    Incremental = 0  # ExtensionMethodMemberType
    Total = 1  # ExtensionMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FaceSetOffset(NXOpen.ExpressionCollectorSet):
    """
    This class represents a face set (collector) offset data.  
    
    As the name indicates, it is a
    *  combination of a face collector and an offset distance.
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.FaceSetOffsetCollection.CreateEmptyFaceSet`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetOffset(self, offsetValue: str) -> None:
        """
        Sets the offset distance
        
        Signature ``SetOffset(offsetValue)`` 
        
        :param offsetValue:  Input offset distance for the face set  
        :type offsetValue: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX8.5.0
           To set the value of the expression modify the expression directly using :py:meth:`GeometricUtilities.FaceSetOffset.Offset` and :py:meth:`Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def FlipDirection(self) -> None:
        """
        Flip offset direction.  
        
        This API flips the direction of offset keeping the offset distance same.
        
        Signature ``FlipDirection()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    FaceCollector: NXOpen.ScCollector = ...
    """
    Returns or sets  the face collector
    
    <hr>
    
    Getter Method
    
    Signature ``FaceCollector`` 
    
    :returns:  Smart collector for the face set  
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceCollector`` 
    
    :param faceCollector:  Smart collector for the face set  
    :type faceCollector: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset distance
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns:  Offset distance for the face set  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    Null: FaceSetOffset = ...  # unknown typename


class PartModuleOutputBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.PartModuleOutputBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.PartModule.CreatePartModuleOutputBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Activate: bool = ...
    """
    Returns or sets  the option indicating whether the part module is to be activated.  
    
    If true, the part module will be activated, else, no action is taken
    
    This API is now deprecated.
    Please use :py:meth:`NXOpen.Features.PartModule.Activate` instead.
    
    <hr>
    
    Getter Method
    
    Signature ``Activate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX9.0.0
       Please use :py:meth:`NXOpen.Features.PartModule.Activate` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Activate`` 
    
    :param activate: 
    :type activate: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX9.0.0
       Please use :py:meth:`NXOpen.Features.PartModule.Activate` instead.
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Deactivate: bool = ...
    """
    Returns or sets  the option indicating whether the part module is to be deactivated.  
    
    If true, the part module will be deactivated, else, no action is taken
    
    This API is now deprecated.
    Please use :py:meth:`NXOpen.Features.PartModule.Activate` instead.
    
    <hr>
    
    Getter Method
    
    Signature ``Deactivate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX9.0.0
       Please use :py:meth:`NXOpen.Features.PartModule.Activate` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Deactivate`` 
    
    :param deactivate: 
    :type deactivate: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX9.0.0
       Please use :py:meth:`NXOpen.Features.PartModule.Activate` instead.
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OutputReferences: PartModuleReferencesBuilder = ...
    """
    Returns  the part module output data 
    
    This API is now deprecated.
    Please use :py:meth:`NXOpen.GeometricUtilities.PartModuleOutputBuilder1.OutputReferences1` instead.
    
    <hr>
    
    Getter Method
    
    Signature ``OutputReferences`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PartModuleReferencesBuilder` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX9.0.0
       Please use :py:meth:`NXOpen.GeometricUtilities.PartModuleOutputBuilder1.OutputReferences1` instead.
    
    License requirements: None.
    """
    Null: PartModuleOutputBuilder = ...  # unknown typename


class ScalingSetBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ScalingSetBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ScalingSetBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ScalingSetBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ScalingSetBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ScalingSetBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ScalingSetBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ScalingSetBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ScalingSetBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ScalingSetBuilder, object2: ScalingSetBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ScalingSetBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.ScalingSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ScalingSetBuilderList = ...  # unknown typename


class MovePoleBuilderMoveMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MovePoleBuilderMoveMethodType():
    """
    Move Pole types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Wcs", " - "
       "View", " - "
       "Vector", " - "
       "Plane", " - "
       "Normal", " - "
       "Polygon", " - "
    """
    Wcs = 0  # MovePoleBuilderMoveMethodTypeMemberType
    View = 1  # MovePoleBuilderMoveMethodTypeMemberType
    Vector = 2  # MovePoleBuilderMoveMethodTypeMemberType
    Plane = 3  # MovePoleBuilderMoveMethodTypeMemberType
    Normal = 4  # MovePoleBuilderMoveMethodTypeMemberType
    Polygon = 5  # MovePoleBuilderMoveMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MovePoleBuilderWCSDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MovePoleBuilderWCSDirectionType():
    """
    WCS direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", " - "
       "Y", " - "
       "Z", " - "
       "YZ", " - "
       "XZ", " - "
       "XY", " - "
    """
    X = 0  # MovePoleBuilderWCSDirectionTypeMemberType
    Y = 1  # MovePoleBuilderWCSDirectionTypeMemberType
    Z = 2  # MovePoleBuilderWCSDirectionTypeMemberType
    YZ = 3  # MovePoleBuilderWCSDirectionTypeMemberType
    XZ = 4  # MovePoleBuilderWCSDirectionTypeMemberType
    XY = 5  # MovePoleBuilderWCSDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MovePoleBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class manages the control poles movements for a surface or curve.  
    
    .. versionadded:: NX8.5.0
    """
    
    class MoveMethodType():
        """
        Move Pole types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Wcs", " - "
           "View", " - "
           "Vector", " - "
           "Plane", " - "
           "Normal", " - "
           "Polygon", " - "
        """
        Wcs = 0  # MovePoleBuilderMoveMethodTypeMemberType
        View = 1  # MovePoleBuilderMoveMethodTypeMemberType
        Vector = 2  # MovePoleBuilderMoveMethodTypeMemberType
        Plane = 3  # MovePoleBuilderMoveMethodTypeMemberType
        Normal = 4  # MovePoleBuilderMoveMethodTypeMemberType
        Polygon = 5  # MovePoleBuilderMoveMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WCSDirectionType():
        """
        WCS direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", " - "
           "Y", " - "
           "Z", " - "
           "YZ", " - "
           "XZ", " - "
           "XY", " - "
        """
        X = 0  # MovePoleBuilderWCSDirectionTypeMemberType
        Y = 1  # MovePoleBuilderWCSDirectionTypeMemberType
        Z = 2  # MovePoleBuilderWCSDirectionTypeMemberType
        YZ = 3  # MovePoleBuilderWCSDirectionTypeMemberType
        XZ = 4  # MovePoleBuilderWCSDirectionTypeMemberType
        XY = 5  # MovePoleBuilderWCSDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ControlPoleManager: ControlPoleManagerData = ...
    """
    Returns  the control pole manager 
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPoleManager`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ControlPoleManagerData` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DegreesAndPatches: DegreesAndSegmentsOrPatchesBuilder = ...
    """
    Returns  the degrees and patches 
    
    <hr>
    
    Getter Method
    
    Signature ``DegreesAndPatches`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.DegreesAndSegmentsOrPatchesBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Entity: NXOpen.NXObject = ...
    """
    Returns or sets  the entity 
    
    <hr>
    
    Getter Method
    
    Signature ``Entity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Entity`` 
    
    :param entity: 
    :type entity: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MoveMethod: MovePoleBuilderMoveMethodType = ...
    """
    Returns or sets  the control pole move method 
    
    <hr>
    
    Getter Method
    
    Signature ``MoveMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.MovePoleBuilderMoveMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoveMethod`` 
    
    :param moveMethod: 
    :type moveMethod: :py:class:`NXOpen.GeometricUtilities.MovePoleBuilderMoveMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Vector: NXOpen.Direction = ...
    """
    Returns or sets  the vector 
    
    <hr>
    
    Getter Method
    
    Signature ``Vector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Vector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WCSDirection: MovePoleBuilderWCSDirectionType = ...
    """
    Returns or sets  the fixed direction 
    
    <hr>
    
    Getter Method
    
    Signature ``WCSDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.MovePoleBuilderWCSDirectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WCSDirection`` 
    
    :param wcsDirection: 
    :type wcsDirection: :py:class:`NXOpen.GeometricUtilities.MovePoleBuilderWCSDirectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: MovePoleBuilder = ...  # unknown typename


class SplineExtensionBuilderExtensionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplineExtensionBuilderExtensionOption():
    """
    Spline extension options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No extension"
       "ByValue", "Extend by value"
       "ByPoint", "Extend up to a point"
    """
    NotSet = 0  # SplineExtensionBuilderExtensionOptionMemberType
    ByValue = 1  # SplineExtensionBuilderExtensionOptionMemberType
    ByPoint = 2  # SplineExtensionBuilderExtensionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplineExtensionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Spline extension builder class.  
    
    This class allows natural extension or trimming of a b-spline cuve. 
    
    .. versionadded:: NX8.0.0
    """
    
    class ExtensionOption():
        """
        Spline extension options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No extension"
           "ByValue", "Extend by value"
           "ByPoint", "Extend up to a point"
        """
        NotSet = 0  # SplineExtensionBuilderExtensionOptionMemberType
        ByValue = 1  # SplineExtensionBuilderExtensionOptionMemberType
        ByPoint = 2  # SplineExtensionBuilderExtensionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndExtensionOption: SplineExtensionBuilderExtensionOption = ...
    """
    Returns or sets  the extension options 
    
    <hr>
    
    Getter Method
    
    Signature ``EndExtensionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SplineExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndExtensionOption`` 
    
    :param extensionOption: 
    :type extensionOption: :py:class:`NXOpen.GeometricUtilities.SplineExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    EndPoint: NXOpen.Point = ...
    """
    Returns or sets  the point up to which end is extended 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPoint`` 
    
    :param endPoint: 
    :type endPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    EndValue: NXOpen.Expression = ...
    """
    Returns  the end value 
    
    <hr>
    
    Getter Method
    
    Signature ``EndValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IsSymmetric: bool = ...
    """
    Returns or sets  the flag indicating if extension is symmetry.  
    
    Symmetric extension follows start extension values 
    
    <hr>
    
    Getter Method
    
    Signature ``IsSymmetric`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsSymmetric`` 
    
    :param isSymmetric: 
    :type isSymmetric: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    StartExtensionOption: SplineExtensionBuilderExtensionOption = ...
    """
    Returns or sets  the extension options 
    
    <hr>
    
    Getter Method
    
    Signature ``StartExtensionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SplineExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartExtensionOption`` 
    
    :param extensionOption: 
    :type extensionOption: :py:class:`NXOpen.GeometricUtilities.SplineExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    StartPoint: NXOpen.Point = ...
    """
    Returns or sets  the point up to which start is extended 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPoint`` 
    
    :param startPoint: 
    :type startPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    StartValue: NXOpen.Expression = ...
    """
    Returns  the start value 
    
    <hr>
    
    Getter Method
    
    Signature ``StartValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SplineExtensionBuilder = ...  # unknown typename


class CircularFrameBuilderSubtypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CircularFrameBuilderSubtypes():
    """
    Represents the circular frame subtypes 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Arbitrary", "Arbitrary circle"
       "Half", "Half circle"
       "Quarter", "Quarter circle"
       "Full", "Full circle"
    """
    Arbitrary = 0  # CircularFrameBuilderSubtypesMemberType
    Half = 1  # CircularFrameBuilderSubtypesMemberType
    Quarter = 2  # CircularFrameBuilderSubtypesMemberType
    Full = 3  # CircularFrameBuilderSubtypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CircularFrameBuilder(ShapeFrameBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.CircularFrameBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Subtypes():
        """
        Represents the circular frame subtypes 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Arbitrary", "Arbitrary circle"
           "Half", "Half circle"
           "Quarter", "Quarter circle"
           "Full", "Full circle"
        """
        Arbitrary = 0  # CircularFrameBuilderSubtypesMemberType
        Half = 1  # CircularFrameBuilderSubtypesMemberType
        Quarter = 2  # CircularFrameBuilderSubtypesMemberType
        Full = 3  # CircularFrameBuilderSubtypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetRadius(self, index: int) -> float:
        """
        Gets the i-th radius of the circular frame  
        
        Signature ``GetRadius(index)`` 
        
        :param index:  index of radius  
        :type index: int 
        :returns:  radius  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRadius(self, index: int, radius: float) -> None:
        """
        Sets the i-th radius of the circular frame 
        
        Signature ``SetRadius(index, radius)`` 
        
        :param index:  index of radius  
        :type index: int 
        :param radius:  radius  
        :type radius: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAngle(self, index: int) -> float:
        """
        Gets the i-th angle of the circular frame  
        
        Signature ``GetAngle(index)`` 
        
        :param index:  index of angle  
        :type index: int 
        :returns:  angle  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAngle(self, index: int, angle: float) -> None:
        """
        Sets the i-th angle of the circular frame 
        
        Signature ``SetAngle(index, angle)`` 
        
        :param index:  index of angle  
        :type index: int 
        :param angle:  angle  
        :type angle: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    Subtype: CircularFrameBuilderSubtypes = ...
    """
    Returns or sets  the subtype 
    
    <hr>
    
    Getter Method
    
    Signature ``Subtype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CircularFrameBuilderSubtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Subtype`` 
    
    :param subtype: 
    :type subtype: :py:class:`NXOpen.GeometricUtilities.CircularFrameBuilderSubtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CircularFrameBuilder = ...  # unknown typename


class ExtensionSideMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExtensionSide():
    """
    This enum represents the extension side 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StartEnd", "Extension Side Start/End"
       "Start", "Extension Side Start"
       "End", "Extension Side End"
       "Symmetric", "Extension Side Symmetric"
    """
    StartEnd = 0  # ExtensionSideMemberType
    Start = 1  # ExtensionSideMemberType
    End = 2  # ExtensionSideMemberType
    Symmetric = 3  # ExtensionSideMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpineDefinitionBuilderMethodOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpineDefinitionBuilderMethodOptions():
    """
    Options to define a spine 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No spine"
       "Curve", "Spine by curve or a profile"
       "Vector", "Spine by a vector"
    """
    NotSet = 0  # SpineDefinitionBuilderMethodOptionsMemberType
    Curve = 1  # SpineDefinitionBuilderMethodOptionsMemberType
    Vector = 2  # SpineDefinitionBuilderMethodOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpineDefinitionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Provides a spine definition for modeling operations   
    
    .. versionadded:: NX8.5.0
    """
    
    class MethodOptions():
        """
        Options to define a spine 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No spine"
           "Curve", "Spine by curve or a profile"
           "Vector", "Spine by a vector"
        """
        NotSet = 0  # SpineDefinitionBuilderMethodOptionsMemberType
        Curve = 1  # SpineDefinitionBuilderMethodOptionsMemberType
        Vector = 2  # SpineDefinitionBuilderMethodOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Method: SpineDefinitionBuilderMethodOptions = ...
    """
    Returns or sets  the method 
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SpineDefinitionBuilderMethodOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.SpineDefinitionBuilderMethodOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Section: NXOpen.Section = ...
    """
    Returns  the section 
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Vector: NXOpen.Direction = ...
    """
    Returns or sets  the vector 
    
    <hr>
    
    Getter Method
    
    Signature ``Vector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Vector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: SpineDefinitionBuilder = ...  # unknown typename


class ReduceSurfaceRadiusFaceGroupBuilder(NXOpen.Builder):
    """
    Reduce Surface Radius Face Group Builder of Geometric Utilities.  
    
    No object is returned by this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.CAMDataPrepManager.CreateReduceSurfaceRadiusFaceGroupBuilder`
    
    .. versionadded:: NX9.0.0
    """
    EndLimit: OnPathDimensionBuilder = ...
    """
    Returns  the end position of reduced sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the selected entities of single chain for performing radius reduction 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StartLimit: OnPathDimensionBuilder = ...
    """
    Returns  the start position of reduced sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``StartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: ReduceSurfaceRadiusFaceGroupBuilder = ...  # unknown typename


class BooleanToolBuilderBooleanToolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BooleanToolBuilderBooleanToolType():
    """
    the boolean tool created options
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceOrPlane", "Tool consists of sets of faces or datum planes"
       "NewPlane", "Tool consists of plane created on the fly"
       "Extrude", "Tool consists of extrude created on the fly"
       "Revolve", "Tool consists of revolve created on the fly"
    """
    FaceOrPlane = 0  # BooleanToolBuilderBooleanToolTypeMemberType
    NewPlane = 1  # BooleanToolBuilderBooleanToolTypeMemberType
    Extrude = 2  # BooleanToolBuilderBooleanToolTypeMemberType
    Revolve = 3  # BooleanToolBuilderBooleanToolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BooleanToolBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    a class which defines boolean tool builder.  
    
    It provides four types of
    * tool creation methods viz. a set of existing faces or datum planes, a new plane
    * created on the fly (FacePlaneToolBuilder), extrude or revolve sheet bodies created on the fly by
    * a given section and direction (ExtrudeRevolveToolBuilder).
    
    .. versionadded:: NX6.0.0
    """
    
    class BooleanToolType():
        """
        the boolean tool created options
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceOrPlane", "Tool consists of sets of faces or datum planes"
           "NewPlane", "Tool consists of plane created on the fly"
           "Extrude", "Tool consists of extrude created on the fly"
           "Revolve", "Tool consists of revolve created on the fly"
        """
        FaceOrPlane = 0  # BooleanToolBuilderBooleanToolTypeMemberType
        NewPlane = 1  # BooleanToolBuilderBooleanToolTypeMemberType
        Extrude = 2  # BooleanToolBuilderBooleanToolTypeMemberType
        Revolve = 3  # BooleanToolBuilderBooleanToolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ExtrudeRevolveTool: ExtrudeRevolveToolBuilder = ...
    """
    Returns  the ExtrudeRevolveTool builder.  
    
    Through this tool, the extrude 
    * or revolve created on the fly can be queried 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeRevolveTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ExtrudeRevolveToolBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FacePlaneTool: FacePlaneToolBuilder = ...
    """
    Returns  the FacePlaneTool Builder.  
    
    Through this tool, the sets of tool faces/datum planes or
    * new plane created on the fly can be queried 
    
    <hr>
    
    Getter Method
    
    Signature ``FacePlaneTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FacePlaneToolBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the boolean tool reverse direction option 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ToolOption: BooleanToolBuilderBooleanToolType = ...
    """
    Returns or sets  the boolean tool option 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanToolBuilderBooleanToolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolOption`` 
    
    :param toolOption: 
    :type toolOption: :py:class:`NXOpen.GeometricUtilities.BooleanToolBuilderBooleanToolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: BooleanToolBuilder = ...  # unknown typename


class BoundaryDefinitionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.BoundaryDefinitionBuilder`.  
    
    A boundary definition is a collection of ordered points which can be imagined to be
    connected by a polyline indicating a boundary. Any point in the collection can be 
    marked as a key point. Marking some points as key points helps to delete part of the 
    boundary efficiently. All the points in a boundary definition are co-planar. 
    A depth value can be specified to define a 3D boundary equivalent to an extrusion. 
    
    .. versionadded:: NX7.5.0
    """
    
    def AppendPoint(self, point: NXOpen.Point3d, isKeyPoint: bool) -> None:
        """
        Appends a point to the boundary definition 
        
        Signature ``AppendPoint(point, isKeyPoint)`` 
        
        :param point:  Point to append  
        :type point: :py:class:`NXOpen.Point3d` 
        :param isKeyPoint:  Flag indicating if point is a key point  
        :type isKeyPoint: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Close(self) -> bool:
        """
        Closes the boundary by appending start point at the end of boundary definition  
        
        Signature ``Close()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def DeleteAll(self) -> None:
        """
        Deletes all the points in the boundary definition 
        
        Signature ``DeleteAll()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def DeleteLastKeyPoint(self) -> None:
        """
        Deletes last key point and all the points from last key point up to and excluding its previous key point 
        
        Signature ``DeleteLastKeyPoint()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetPoints(self) -> 'list[NXOpen.Point3d]':
        """
        Queries all the boundary definition points  
        
        Signature ``GetPoints()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def SetPlaneNormal(self, direction: NXOpen.Vector3d) -> None:
        """
        Sets normal of the plane in which boundary is defined 
        
        Signature ``SetPlaneNormal(direction)`` 
        
        :param direction: 
        :type direction: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Translate(self, vector: NXOpen.Vector3d) -> None:
        """
        Translates the boundary from its current position using the direction and the magnitude of a vector.  
        
        Signature ``Translate(vector)`` 
        
        :param vector: 
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Depth: NXOpen.Expression = ...
    """
    Returns  the region depth 
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: BoundaryDefinitionBuilder = ...  # unknown typename


class HorizontalReference(NXOpen.TaggedObject, IComponentBuilder):
    """
    the horizontal reference vector definition.  
    
    .. versionadded:: NX8.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Flip: bool = ...
    """
    Returns or sets  the 2D Selection flip attribute.  
    
    This function flips the selection object of the 2D pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``Flip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Flip`` 
    
    :param flip: 
    :type flip: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HorizontalRefObject: NXOpen.SelectNXObject = ...
    """
    Returns  the direction object.  
    
    This function gets reference vector of the 2D pattern. This call will result in an Exception if not called in 2D mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRefObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HorizontalRefVector: NXOpen.Direction = ...
    """
    Returns or sets  the horizontal reference vector 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRefVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalRefVector`` 
    
    :param horizontalRefVector: 
    :type horizontalRefVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RotationAngle: NXOpen.Expression = ...
    """
    Returns  the rotation angle wrt horizontal reference direction 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: HorizontalReference = ...  # unknown typename


class PatternIncrementItemList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[PatternIncrementItem]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: PatternIncrementItem) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: PatternIncrementItem) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> PatternIncrementItem:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PatternIncrementItem) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PatternIncrementItem, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[PatternIncrementItem]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[PatternIncrementItem]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: PatternIncrementItem, object2: PatternIncrementItem) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: PatternIncrementItem) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: PatternIncrementItemList = ...  # unknown typename


class ReduceSurfaceRadiusFaceGroupBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ReduceSurfaceRadiusFaceGroupBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ReduceSurfaceRadiusFaceGroupBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ReduceSurfaceRadiusFaceGroupBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ReduceSurfaceRadiusFaceGroupBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ReduceSurfaceRadiusFaceGroupBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ReduceSurfaceRadiusFaceGroupBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ReduceSurfaceRadiusFaceGroupBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ReduceSurfaceRadiusFaceGroupBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ReduceSurfaceRadiusFaceGroupBuilder, object2: ReduceSurfaceRadiusFaceGroupBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ReduceSurfaceRadiusFaceGroupBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.ReduceSurfaceRadiusFaceGroupBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ReduceSurfaceRadiusFaceGroupBuilderList = ...  # unknown typename


class PartModuleInputBuilderModifiableGeometryOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PartModuleInputBuilderModifiableGeometryOptions():
    """
    the Modifiable Geometry option types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WholeBody", "the whole shared body will be allowed for selection inside part module"
       "Selected", "the faces/edges on shared body that are allowed for selection inside part module"
    """
    WholeBody = 0  # PartModuleInputBuilderModifiableGeometryOptionsMemberType
    Selected = 1  # PartModuleInputBuilderModifiableGeometryOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartModuleInputBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.PartModuleInputBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.PartModule.CreatePartModuleInputBuilder`
    
    Default values.
    
    ===========================  ==============
    Property                     Value
    ===========================  ==============
    InputReferences.ObjectType   BodyCollector 
    ---------------------------  --------------
    ModifiableGeometryOption     WholeBody 
    ===========================  ==============
    
    .. versionadded:: NX9.0.0
    """
    
    class ModifiableGeometryOptions():
        """
        the Modifiable Geometry option types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WholeBody", "the whole shared body will be allowed for selection inside part module"
           "Selected", "the faces/edges on shared body that are allowed for selection inside part module"
        """
        WholeBody = 0  # PartModuleInputBuilderModifiableGeometryOptionsMemberType
        Selected = 1  # PartModuleInputBuilderModifiableGeometryOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DefineSharedBodyInput: bool = ...
    """
    Returns or sets  the shared body inputs option.  
    
    If true, user will be able to provide shared body inputs. 
    
    <hr>
    
    Getter Method
    
    Signature ``DefineSharedBodyInput`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefineSharedBodyInput`` 
    
    :param defineSharedBodyInput: 
    :type defineSharedBodyInput: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    InputReferences: NXOpen.Features.PartGeometryCopyBuilder = ...
    """
    Returns  the part module input data 
    
    <hr>
    
    Getter Method
    
    Signature ``InputReferences`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.PartGeometryCopyBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ModifiableGeometry: NXOpen.ScCollectorList = ...
    """
    Returns  the faces/edges specified as modifiable geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``ModifiableGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollectorList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ModifiableGeometryOption: PartModuleInputBuilderModifiableGeometryOptions = ...
    """
    Returns or sets  the Modifiable Geometry option 
    
    <hr>
    
    Getter Method
    
    Signature ``ModifiableGeometryOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PartModuleInputBuilderModifiableGeometryOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModifiableGeometryOption`` 
    
    :param modifiableGeometryOption: 
    :type modifiableGeometryOption: :py:class:`NXOpen.GeometricUtilities.PartModuleInputBuilderModifiableGeometryOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SharedBodyInput: NXOpen.Features.PartGeometryCopyBuilder = ...
    """
    Returns  the bodies for part module shared body 
    
    <hr>
    
    Getter Method
    
    Signature ``SharedBodyInput`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.PartGeometryCopyBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PartModuleInputBuilder = ...  # unknown typename


class ProjectionOptionsDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProjectionOptionsDirectionType():
    """
    This enum represents the projection direction types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceNormal", "Face Normal"
       "CrvPlaneNormal", "Curve plane Normal"
       "Vector", "Vector Constructor"
    """
    FaceNormal = 0  # ProjectionOptionsDirectionTypeMemberType
    CrvPlaneNormal = 1  # ProjectionOptionsDirectionTypeMemberType
    Vector = 2  # ProjectionOptionsDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProjectionOptions(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a ProjectionOptions   
    
    .. versionadded:: NX4.0.0
    """
    
    class DirectionType():
        """
        This enum represents the projection direction types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceNormal", "Face Normal"
           "CrvPlaneNormal", "Curve plane Normal"
           "Vector", "Vector Constructor"
        """
        FaceNormal = 0  # ProjectionOptionsDirectionTypeMemberType
        CrvPlaneNormal = 1  # ProjectionOptionsDirectionTypeMemberType
        Vector = 2  # ProjectionOptionsDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ProjectDirectionMethod: ProjectionOptionsDirectionType = ...
    """
    Returns or sets   the Projection direction method 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectDirectionMethod`` 
    
    :returns:  0: Face normal; 1: Vector constructor  
    :rtype: :py:class:`NXOpen.GeometricUtilities.ProjectionOptionsDirectionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectDirectionMethod`` 
    
    :param projectDirectionMethod:  0: Face normal; 1: Vector constructor  
    :type projectDirectionMethod: :py:class:`NXOpen.GeometricUtilities.ProjectionOptionsDirectionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ProjectVector: NXOpen.Direction = ...
    """
    Returns or sets  the Projection vector 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectVector`` 
    
    :returns:  Direction  
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectVector`` 
    
    :param projectDirection:  Direction  
    :type projectDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: ProjectionOptions = ...  # unknown typename


class AnchorLocatorBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.AnchorLocatorBuilder`   
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Origin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin of the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    XAxis: NXOpen.Vector3d = ...
    """
    Returns or sets  the x-axis of the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``XAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XAxis`` 
    
    :param xAxis: 
    :type xAxis: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    YAxis: NXOpen.Vector3d = ...
    """
    Returns or sets  the y-axis of the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``YAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YAxis`` 
    
    :param yAxis: 
    :type yAxis: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: AnchorLocatorBuilder = ...  # unknown typename


class SecondarySectionData(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.SecondarySectionData`
    
    .. versionadded:: NX5.0.0
    """
    
    def GetSecondarySectionValues(self) -> 'list[str]':
        """
        Get the Secondary Sketch Expression Values 
        
        Signature ``GetSecondarySectionValues()`` 
        
        :returns:  Dim Expressions  
        :rtype: list of str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSecondarySectionValues(self, expressions: 'list[str]') -> None:
        """
        Set the Secondary Sketch Expression Values.  
        
        These values should be in the same sequence as the master sketch.
        You can call :py:meth:`NXOpen.Sketch.GetAllExpressions` to get the exact
        sequence of expression values.
        
        Signature ``SetSecondarySectionValues(expressions)`` 
        
        :param expressions:   Dim Expression  
        :type expressions: list of str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetMasterExpressionValues(self) -> 'list[NXOpen.Expression]':
        """
        Get the Master Sketch Expression Values 
        
        Signature ``GetMasterExpressionValues()`` 
        
        :returns:  All the expressions in the sketch  
        :rtype: list of :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMasterExpressionValues(self, expressions: 'list[NXOpen.Expression]') -> None:
        """
        Set the Master Sketch Expression Values.  
        
        Signature ``SetMasterExpressionValues(expressions)`` 
        
        :param expressions:  All the expressions in the sketch  
        :type expressions: list of :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPathLocation(self, pathLocationPercent: float) -> None:
        """
        Path Location  
        
        Signature ``SetPathLocation(pathLocationPercent)`` 
        
        :param pathLocationPercent: 
        :type pathLocationPercent: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Destroy(self) -> None:
        """
        Delete the secondary section object.  
        
        Signature ``Destroy()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    IsEndSection: bool = ...
    """
    Returns or sets  the End Section  
    
    <hr>
    
    Getter Method
    
    Signature ``IsEndSection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsEndSection`` 
    
    :param endSection: 
    :type endSection: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    IsStartSection: bool = ...
    """
    Returns or sets  the Start Section  
    
    <hr>
    
    Getter Method
    
    Signature ``IsStartSection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsStartSection`` 
    
    :param startSection: 
    :type startSection: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    OnPathDimData: Extend = ...
    """
    Returns  the on path dim 
    
    <hr>
    
    Getter Method
    
    Signature ``OnPathDimData`` 
    
    :returns:  On path dim  
    :rtype: :py:class:`NXOpen.GeometricUtilities.Extend` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SecondarySectionData = ...  # unknown typename


class CircularPatternStaggerOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CircularPatternStaggerOptions():
    """
    defines any stagger to be defined on the pattern.  Stagger values are used to offset to every other
    row/column of the pattern. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No stagger applied"
       "Row", "Stagger row"
    """
    NotSet = 0  # CircularPatternStaggerOptionsMemberType
    Row = 1  # CircularPatternStaggerOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CircularPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the circular pattern definition.  
    
    Allows specification along
    both the angular and radial directions. 
    
    .. versionadded:: NX7.5.0
    """
    
    class StaggerOptions():
        """
        defines any stagger to be defined on the pattern.  Stagger values are used to offset to every other
        row/column of the pattern. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No stagger applied"
           "Row", "Stagger row"
        """
        NotSet = 0  # CircularPatternStaggerOptionsMemberType
        Row = 1  # CircularPatternStaggerOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngularSpacing: AngularPatternSpacing = ...
    """
    Returns  the angular spacing of the instances of the pattern
    
    <hr>
    
    Getter Method
    
    Signature ``AngularSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AngularPatternSpacing` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CenterPoint: NXOpen.SelectNXObject = ...
    """
    Returns  the center point object for 2D mode.  
    
    This function gets center point object of the 2D pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       Use :py:meth:`GeometricUtilities.CircularPattern.RotationCenter` instead.
    
    License requirements: None.
    """
    CreateLastStaggered: bool = ...
    """
    Returns or sets  the option to generate the last item in a staggered row.  
    
    If 'true' the pattern will be
    narrower on rows that have been staggered. 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateLastStaggered`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateLastStaggered`` 
    
    :param create: 
    :type create: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Flip: bool = ...
    """
    Returns or sets  the flip object for 2D mode.  
    
    This function gets the flip attribute of the 2D pattern. 
    
    <hr>
    
    Getter Method
    
    Signature ``Flip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Flip`` 
    
    :param enabled: 
    :type enabled: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HorizontalRef: HorizontalReference = ...
    """
    Returns  the horizontal reference 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRef`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.HorizontalReference` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IncludeSeedToggle: bool = ...
    """
    Returns or sets  the IncludeSeed toggle attribute.  
    
    This function gets the IncludeSeed toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeSeedToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeSeedToggle`` 
    
    :param toggle: 
    :type toggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RadialSpacing: DistancePatternSpacing = ...
    """
    Returns  the radial spacing of the instances of the pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.DistancePatternSpacing` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RotationAxis: NXOpen.Axis = ...
    """
    Returns or sets  the rotation axis for the pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationAxis`` 
    
    :param rotationAxis: 
    :type rotationAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RotationCenter: NXOpen.Point = ...
    """
    Returns or sets  the rotation center for the 2d pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotationCenter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationCenter`` 
    
    :param rotationCenter: 
    :type rotationCenter: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaggerType: CircularPatternStaggerOptions = ...
    """
    Returns or sets  the type of stagger to be used by the pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``StaggerType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CircularPatternStaggerOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaggerType`` 
    
    :param spaceType: 
    :type spaceType: :py:class:`NXOpen.GeometricUtilities.CircularPatternStaggerOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseRadialDirectionToggle: bool = ...
    """
    Returns or sets  the UseRadialDirection toggle attribute.  
    
    This function gets the UseRadialDirection toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``UseRadialDirectionToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseRadialDirectionToggle`` 
    
    :param toggle: 
    :type toggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: CircularPattern = ...  # unknown typename


class SelectDividingObjectBuilderToolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SelectDividingObjectBuilderToolType():
    """
    Represents the Dividing Tool types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Object", " - "
       "LineByTwoPoints", " - "
       "OffsetCurveInFace", " - "
       "IsoparametricCurve", " - "
    """
    Object = 0  # SelectDividingObjectBuilderToolTypeMemberType
    LineByTwoPoints = 1  # SelectDividingObjectBuilderToolTypeMemberType
    OffsetCurveInFace = 2  # SelectDividingObjectBuilderToolTypeMemberType
    IsoparametricCurve = 3  # SelectDividingObjectBuilderToolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SelectDividingObjectBuilderIsoparametricDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SelectDividingObjectBuilderIsoparametricDirectionType():
    """
    Represents the direction of isoparametric curve
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "U", " - "
       "V", " - "
    """
    U = 0  # SelectDividingObjectBuilderIsoparametricDirectionTypeMemberType
    V = 1  # SelectDividingObjectBuilderIsoparametricDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SelectDividingObjectBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the dividing tool block for dividing face  
    
    .. versionadded:: NX9.0.0
    """
    
    class ToolType():
        """
        Represents the Dividing Tool types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Object", " - "
           "LineByTwoPoints", " - "
           "OffsetCurveInFace", " - "
           "IsoparametricCurve", " - "
        """
        Object = 0  # SelectDividingObjectBuilderToolTypeMemberType
        LineByTwoPoints = 1  # SelectDividingObjectBuilderToolTypeMemberType
        OffsetCurveInFace = 2  # SelectDividingObjectBuilderToolTypeMemberType
        IsoparametricCurve = 3  # SelectDividingObjectBuilderToolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class IsoparametricDirectionType():
        """
        Represents the direction of isoparametric curve
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "U", " - "
           "V", " - "
        """
        U = 0  # SelectDividingObjectBuilderIsoparametricDirectionTypeMemberType
        V = 1  # SelectDividingObjectBuilderIsoparametricDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ConstraintManager: NXOpen.Features.GeometricConstraintDataManager = ...
    """
    Returns  the iso parameter point 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintManager`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.GeometricConstraintDataManager` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CurvesToOffset: NXOpen.Section = ...
    """
    Returns  the curves to offset 
    
    <hr>
    
    Getter Method
    
    Signature ``CurvesToOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DividingObjectsList: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the dividing objects list 
    
    <hr>
    
    Getter Method
    
    Signature ``DividingObjectsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EndPoint: NXOpen.Point = ...
    """
    Returns or sets  the end point 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPoint`` 
    
    :param endPoint: 
    :type endPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    IsoparametricDirection: SelectDividingObjectBuilderIsoparametricDirectionType = ...
    """
    Returns or sets  the isoparametric direction  
    
    <hr>
    
    Getter Method
    
    Signature ``IsoparametricDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SelectDividingObjectBuilderIsoparametricDirectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsoparametricDirection`` 
    
    :param isoprametricDirection: 
    :type isoprametricDirection: :py:class:`NXOpen.GeometricUtilities.SelectDividingObjectBuilderIsoparametricDirectionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    OffsetDirection: bool = ...
    """
    Returns or sets  the offset direction 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDirection`` 
    
    :param offsetDirection: 
    :type offsetDirection: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    OffsetDistance: NXOpen.Expression = ...
    """
    Returns  the offset distance 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StartPoint: NXOpen.Point = ...
    """
    Returns or sets  the start point 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPoint`` 
    
    :param startPoint: 
    :type startPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ToolOption: SelectDividingObjectBuilderToolType = ...
    """
    Returns or sets  the tool option 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SelectDividingObjectBuilderToolType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolOption`` 
    
    :param toolOption: 
    :type toolOption: :py:class:`NXOpen.GeometricUtilities.SelectDividingObjectBuilderToolType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: SelectDividingObjectBuilder = ...  # unknown typename


class SpinePointDataParameterTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpinePointDataParameterType():
    """
    Parameter type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", " - "
       "Percent", "Parameter expressed as percent arc length"
       "Length", "Parameter expressed as arc length"
    """
    Normal = 0  # SpinePointDataParameterTypeMemberType
    Percent = 1  # SpinePointDataParameterTypeMemberType
    Length = 2  # SpinePointDataParameterTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpinePointData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a spine point def object
    
    To create an instance of this class, see :py:meth:`NXOpen.GeometricUtilities.SpinePointDataCollection`
    
    .. versionadded:: NX5.0.0
    """
    
    class ParameterType():
        """
        Parameter type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", " - "
           "Percent", "Parameter expressed as percent arc length"
           "Length", "Parameter expressed as arc length"
        """
        Normal = 0  # SpinePointDataParameterTypeMemberType
        Percent = 1  # SpinePointDataParameterTypeMemberType
        Length = 2  # SpinePointDataParameterTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetLawValueAtPoint(self) -> NXOpen.Expression:
        """
        Returns the law value at the specified point  
        
        Signature ``GetLawValueAtPoint()`` 
        
        :returns:  Law value Expression Object  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLawValueAtPoint(self, valString: str) -> None:
        """
        Sets the law value at the specified point 
        
        Signature ``SetLawValueAtPoint(valString)`` 
        
        :param valString:  Law value string  
        :type valString: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    
    
    def GetParentSpine(self) -> NXOpen.Section:
        """
        Returns the parent spine on which spine point is defined     
        
        Signature ``GetParentSpine()`` 
        
        :returns:  section object 
        :rtype: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetParentSpine(self, parent: NXOpen.Section) -> None:
        """
        Sets the parent spine on which spine point is defined    
        
        Signature ``SetParentSpine(parent)`` 
        
        :param parent:  Parent section path on which spine point is defined  
        :type parent: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ParameterLength: float = ...
    """
    Returns or sets  the parameter in arc length 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterLength`` 
    
    :param lengthParameter: 
    :type lengthParameter: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    ParameterPercent: float = ...
    """
    Returns or sets  the parameter in percent arc length 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterPercent`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterPercent`` 
    
    :param percentParameter: 
    :type percentParameter: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    Null: SpinePointData = ...  # unknown typename


class MultiTransitionLawBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents multiple transition law.  
    
    This class represents :py:class:`NXOpen.GeometricUtilities.LawBuilderType.MultiTransition <NXOpen.GeometricUtilities.LawBuilderType>` type
    of law in :py:class:`NXOpen.GeometricUtilities.LawBuilder`.
    Objects of class :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` are used
    as law nodes in :py:class:`NXOpen.GeometricUtilities.MultiTransitionLawBuilder`. Spine
    definition in this class is mandatory. You can specify any number of law nodes on the spine.
    Minimum two law nodes are necessary to define the multi transition law along the spine.
    The law nodes must be specified in the parametrically increasing order in the spine direction.
    
    Depending on the law node position on the spine following transition types are supported -
    
    Start node - All options in :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType` except
    :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType.Unknown <NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType>`
    
    End node - :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType.Blend <NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType>` and
    :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType.Minmax <NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType>` only
    
    End node - All options in :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType` may be supported.
    Consult the referencing class documentation to see when
    :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType.Unknown <NXOpen.GeometricUtilities.TransitionLawNodeBuilderTransitionType>` is not supported
    at a law node.
    
    .. versionadded:: NX6.0.0
    """
    
    def CreateNode(self) -> TransitionLawNodeBuilder:
        """
        Creates a new law node  
        
        Signature ``CreateNode()`` 
        
        :returns:  Law node  
        :rtype: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def UpdateSpine(self) -> None:
        """
        Update the builder based on current spine 
        
        Signature ``UpdateSpine()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    NodeList: TransitionLawNodeBuilderList = ...
    """
    Returns  the list of law nodes.  
    
    <hr>
    
    Getter Method
    
    Signature ``NodeList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.TransitionLawNodeBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Spine: NXOpen.Section = ...
    """
    Returns  the spine 
    
    <hr>
    
    Getter Method
    
    Signature ``Spine`` 
    
    :returns:  Section object representing spine  
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Null: MultiTransitionLawBuilder = ...  # unknown typename


class ControlPoleManagerData(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class manages the control poles for a set of surfaces or curves.  
    
    .. versionadded:: NX6.0.0
    """
    
    def SetPoles(self, groupIndex: int, polesIndex: 'list[int]', poles: 'list[NXOpen.Point]') -> None:
        """
        Sets new group poles 
        
        Signature ``SetPoles(groupIndex, polesIndex, poles)`` 
        
        :param groupIndex:  Entity group index. Control Pole Manager needs to handle poles                                          from different surfaces or curves. Therefore, poles need to be                                          grouped. Poles associated with the same entity are placed into                                          a group. When setting or getting poles from the Pole Manager,                                          the caller needs to provide a group index to identify poles with                                          the proper entity group.                                      
        :type groupIndex: int 
        :param polesIndex:  Poles index  
        :type polesIndex: list of int 
        :param poles:  Poles  
        :type poles: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetPoles(self, groupIndex: int) -> tuple:
        """
        Gets poles of an entity 
        
        Signature ``GetPoles(groupIndex)`` 
        
        :param groupIndex:  Entity group index. Control Pole Manager needs to handle poles                                          from different surfaces or curves. Therefore, poles need to be                                          grouped. Poles associated with the same entity are placed into                                          a group. When setting or getting poles from the Pole Manager,                                          the caller needs to provide a group index to identify poles with                                          the proper entity group.                                      
        :type groupIndex: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (polesIndex, poles). polesIndex is a list of int.   Poles index poles is a list of :py:class:`NXOpen.Point`.   Poles 
        
        .. versionadded:: NX6.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def SelectPoles(self, groupIndex: int, polesIndex: 'list[int]', poles: 'list[NXOpen.Point]') -> None:
        """
        Adds new selected pole 
        
        Signature ``SelectPoles(groupIndex, polesIndex, poles)`` 
        
        :param groupIndex:  Entity group index. Control Pole Manager needs to handle poles                                          from different surfaces or curves. Therefore, poles need to be                                          grouped. Poles associated with the same entity are placed into                                          a group. When setting or getting poles from the Pole Manager,                                          the caller needs to provide a group index to identify poles with                                          the proper entity group.                                      
        :type groupIndex: int 
        :param polesIndex:  Poles index  
        :type polesIndex: list of int 
        :param poles:  Poles  
        :type poles: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def DeselectPoles(self, groupIndex: int, polesIndex: 'list[int]', poles: 'list[NXOpen.Point]') -> None:
        """
        Removes selected pole 
        
        Signature ``DeselectPoles(groupIndex, polesIndex, poles)`` 
        
        :param groupIndex:  Entity group index. Control Pole Manager needs to handle poles                                          from different surfaces or curves. Therefore, poles need to be                                          grouped. Poles associated with the same entity are placed into                                          a group. When setting or getting poles from the Pole Manager,                                          the caller needs to provide a group index to identify poles with                                          the proper entity group.                                      
        :type groupIndex: int 
        :param polesIndex:  Poles index  
        :type polesIndex: list of int 
        :param poles:  Poles  
        :type poles: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetSelectedPoles(self, groupIndex: int) -> tuple:
        """
        Gets selected poles 
        
        Signature ``GetSelectedPoles(groupIndex)`` 
        
        :param groupIndex:  Entity group index. Control Pole Manager needs to handle poles                                          from different surfaces or curves. Therefore, poles need to be                                          grouped. Poles associated with the same entity are placed into                                          a group. When setting or getting poles from the Pole Manager,                                          the caller needs to provide a group index to identify poles with                                          the proper entity group.                                      
        :type groupIndex: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (polesIndex, poles). polesIndex is a list of int.   Poles index poles is a list of :py:class:`NXOpen.Point`.   Poles 
        
        .. versionadded:: NX6.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def CreatePolesGroup(self) -> int:
        """
        Creates a new poles group  
        
        Signature ``CreatePolesGroup()`` 
        
        :returns:  New group index for newly created poles group.  
        :rtype: int 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def DeletePolesGroup(self, groupIndex: int) -> None:
        """
        Deletes a group of poles 
        
        Signature ``DeletePolesGroup(groupIndex)`` 
        
        :param groupIndex:  Group index for the group to be deleted.  
        :type groupIndex: int 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetUDimension(self, groupIndex: int) -> int:
        """
        Queries dimension in U direction of a group of poles  
        
        Signature ``GetUDimension(groupIndex)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :returns:  U Dimension  
        :rtype: int 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def SetUDimension(self, groupIndex: int, uDimension: int) -> None:
        """
        Sets dimension in U direction of a group of poles 
        
        Signature ``SetUDimension(groupIndex, uDimension)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :param uDimension:  U Dimension  
        :type uDimension: int 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetVDimension(self, groupIndex: int) -> int:
        """
        Queries dimension in V direction of a group of poles  
        
        Signature ``GetVDimension(groupIndex)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :returns:  V Dimension  
        :rtype: int 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def SetVDimension(self, groupIndex: int, vDimension: int) -> None:
        """
        Sets dimension in V direction of a group of poles 
        
        Signature ``SetVDimension(groupIndex, vDimension)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :param vDimension:  V Dimension  
        :type vDimension: int 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetIsUPeriodic(self, groupIndex: int) -> bool:
        """
        Queries periodicity in U direction of a group of poles  
        
        Signature ``GetIsUPeriodic(groupIndex)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :returns:  U Periodicity  
        :rtype: bool 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def SetIsUPeriodic(self, groupIndex: int, uPeriodicity: bool) -> None:
        """
        Sets periodicity in U direction of a group of poles 
        
        Signature ``SetIsUPeriodic(groupIndex, uPeriodicity)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :param uPeriodicity:  U Periodicity  
        :type uPeriodicity: bool 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetIsVPeriodic(self, groupIndex: int) -> bool:
        """
        Queries periodicity in V direction of a group of poles  
        
        Signature ``GetIsVPeriodic(groupIndex)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :returns:  V Periodicity  
        :rtype: bool 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def SetIsVPeriodic(self, groupIndex: int, vPeriodicity: bool) -> None:
        """
        Sets periodicity in V direction of a group of poles 
        
        Signature ``SetIsVPeriodic(groupIndex, vPeriodicity)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :param vPeriodicity:  V Periodicity  
        :type vPeriodicity: bool 
        
        .. versionadded:: NX6.0.1
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def UpdatePolePositions(self, groupIndex: int, poleIndex: 'list[int]', newPosition: 'list[NXOpen.Point3d]') -> None:
        """
        Updates pole positions 
        
        Signature ``UpdatePolePositions(groupIndex, poleIndex, newPosition)`` 
        
        :param groupIndex:  poles group index  
        :type groupIndex: int 
        :param poleIndex:  pole  index in the group  
        :type poleIndex: list of int 
        :param newPosition:  Pole new position  
        :type newPosition: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    @typing.overload
    def SetPoleGroupEntity(self, groupIndex: int, face: NXOpen.Face) -> None:
        """
        Sets face to control poles group 
        
        Signature ``SetPoleGroupEntity(groupIndex, face)`` 
        
        :param groupIndex:  pole group index  
        :type groupIndex: int 
        :param face:  face  
        :type face: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    @typing.overload
    def SetPoleGroupEntity(self, groupIndex: int, curve: NXOpen.Curve) -> None:
        """
        Sets curve to control poles group 
        
        Signature ``SetPoleGroupEntity(groupIndex, curve)`` 
        
        :param groupIndex:  pole group index  
        :type groupIndex: int 
        :param curve:  curve  
        :type curve: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: ControlPoleManagerData = ...  # unknown typename


class FaceSetOffsetList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[FaceSetOffset]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: FaceSetOffset) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: FaceSetOffset) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> FaceSetOffset:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FaceSetOffset) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FaceSetOffset, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[FaceSetOffset]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[FaceSetOffset]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: FaceSetOffset, object2: FaceSetOffset) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: FaceSetOffset) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.FaceSetOffset` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: FaceSetOffsetList = ...  # unknown typename


class FrameOnPathBuilderAnchorLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FrameOnPathBuilderAnchorLocationType():
    """
    Anchor location types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Center", "Center position"
       "Right", "Right position"
       "Left", "Left position"
    """
    Center = 0  # FrameOnPathBuilderAnchorLocationTypeMemberType
    Right = 1  # FrameOnPathBuilderAnchorLocationTypeMemberType
    Left = 2  # FrameOnPathBuilderAnchorLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FrameOnPathBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Frame on path builder   
    
    .. versionadded:: NX7.5.1
    """
    
    class AnchorLocationType():
        """
        Anchor location types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Center", "Center position"
           "Right", "Right position"
           "Left", "Left position"
        """
        Center = 0  # FrameOnPathBuilderAnchorLocationTypeMemberType
        Right = 1  # FrameOnPathBuilderAnchorLocationTypeMemberType
        Left = 2  # FrameOnPathBuilderAnchorLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnchorLocation: FrameOnPathBuilderAnchorLocationType = ...
    """
    Returns or sets  the anchor location 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FrameOnPathBuilderAnchorLocationType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorLocation`` 
    
    :param anchorLocation: 
    :type anchorLocation: :py:class:`NXOpen.GeometricUtilities.FrameOnPathBuilderAnchorLocationType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    AnchorPosition: OnPathDimensionBuilder = ...
    """
    Returns  the anchor position 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    IsApexReversed: bool = ...
    """
    Returns or sets  the value indicating if apex point is reversed 
    
    <hr>
    
    Getter Method
    
    Signature ``IsApexReversed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsApexReversed`` 
    
    :param isReversed: 
    :type isReversed: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    WScale: float = ...
    """
    Returns or sets  the width scale 
    
    <hr>
    
    Getter Method
    
    Signature ``WScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WScale`` 
    
    :param wScale: 
    :type wScale: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    Null: FrameOnPathBuilder = ...  # unknown typename


class TransitionCurveBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[TransitionCurveBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: TransitionCurveBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: TransitionCurveBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> TransitionCurveBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TransitionCurveBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: TransitionCurveBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[TransitionCurveBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[TransitionCurveBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: TransitionCurveBuilder, object2: TransitionCurveBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: TransitionCurveBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: TransitionCurveBuilderList = ...  # unknown typename


class MirrorPatternPlaneOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorPatternPlaneOptions():
    """
    the Plane options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Existing", "existing plane"
       "New", "new plane"
    """
    Existing = 0  # MirrorPatternPlaneOptionsMemberType
    New = 1  # MirrorPatternPlaneOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the Mirror pattern definition.  
    
    .. versionadded:: NX8.0.0
    """
    
    class PlaneOptions():
        """
        the Plane options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Existing", "existing plane"
           "New", "new plane"
        """
        Existing = 0  # MirrorPatternPlaneOptionsMemberType
        New = 1  # MirrorPatternPlaneOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ExistingPlane: NXOpen.SelectISurface = ...
    """
    Returns  the Existing Mirror Plane 
    
    <hr>
    
    Getter Method
    
    Signature ``ExistingPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectISurface` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NewPlane: NXOpen.Plane = ...
    """
    Returns or sets  the new plane  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPlane`` 
    
    :param newPlane: 
    :type newPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    PlaneOption: MirrorPatternPlaneOptions = ...
    """
    Returns or sets  the plane option 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.MirrorPatternPlaneOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneOption`` 
    
    :param planeOptions: 
    :type planeOptions: :py:class:`NXOpen.GeometricUtilities.MirrorPatternPlaneOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: MirrorPattern = ...  # unknown typename


class PatternIncrementsList(NXOpen.TaggedObject, IComponentBuilder):
    """
    list of :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` objects.  
    
    .. versionadded:: NX7.5.0
    """
    
    @typing.overload
    def CreatePatternIncrementItem(self) -> PatternIncrementItem:
        """
        This is the default creator for :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem`.
        Caution: This should never be called!  
        
        Signature ``CreatePatternIncrementItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def CreatePatternIncrementItem(self, masterExpression: NXOpen.Expression) -> PatternIncrementItem:
        """
        This is the actual creator for :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem`.  
        
        Signature ``CreatePatternIncrementItem(masterExpression)`` 
        
        :param masterExpression:  the master expression  
        :type masterExpression: :py:class:`NXOpen.Expression` 
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    List: PatternIncrementItemList = ...
    """
    Returns  the list of :py:class:`NXOpen.GeometricUtilities.PatternIncrementItem` objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``List`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternIncrementItemList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: PatternIncrementsList = ...  # unknown typename


class FtmFixedCurvesBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[FtmFixedCurvesBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: FtmFixedCurvesBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: FtmFixedCurvesBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> FtmFixedCurvesBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FtmFixedCurvesBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FtmFixedCurvesBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[FtmFixedCurvesBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[FtmFixedCurvesBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: FtmFixedCurvesBuilder, object2: FtmFixedCurvesBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: FtmFixedCurvesBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: FtmFixedCurvesBuilderList = ...  # unknown typename


class StyledSweepDoubleOnPathDimBuilder(NXOpen.NXObject, IComponentBuilder):
    """
    Represents a  :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
    
    .. versionadded:: NX6.0.0
    """
    
    def ResetExtraData(self) -> None:
        """
        Reset pivot position extra data.  
        
        For legacy reason, pivot position has to contain some extra data.
        When you try to reset the pivot position, you not only need to reset the two on path dimensions 
        but also need to simultaneously call this API to reset the extra data. 
        
        Signature ``ResetExtraData()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FirstLocation: OnPathDimensionBuilder = ...
    """
    Returns  the first location 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SecondLocation: OnPathDimensionBuilder = ...
    """
    Returns  the second location 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: StyledSweepDoubleOnPathDimBuilder = ...  # unknown typename


class TransitionCurveBuilderTangentDirectionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransitionCurveBuilderTangentDirections():
    """
    Tangent direction options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rail", "transition curve will be tangent to the blend rail curve"
       "Limit", "transition curve will be tangent to the limit curve"
    """
    Rail = 0  # TransitionCurveBuilderTangentDirectionsMemberType
    Limit = 1  # TransitionCurveBuilderTangentDirectionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransitionCurveBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class provides ability to create a transition(bridge) curve between two adjacent setback curves.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateEmptyTransitionCurveBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class TangentDirections():
        """
        Tangent direction options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rail", "transition curve will be tangent to the blend rail curve"
           "Limit", "transition curve will be tangent to the limit curve"
        """
        Rail = 0  # TransitionCurveBuilderTangentDirectionsMemberType
        Limit = 1  # TransitionCurveBuilderTangentDirectionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndTangentDirection: TransitionCurveBuilderTangentDirections = ...
    """
    Returns or sets  the end tangent direction 
    
    <hr>
    
    Getter Method
    
    Signature ``EndTangentDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilderTangentDirections` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndTangentDirection`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilderTangentDirections` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    EndTangentMagnitude: NXOpen.Expression = ...
    """
    Returns  the end tangent magnitude 
    
    <hr>
    
    Getter Method
    
    Signature ``EndTangentMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    StartTangentDirection: TransitionCurveBuilderTangentDirections = ...
    """
    Returns or sets  the start tangent direction 
    
    <hr>
    
    Getter Method
    
    Signature ``StartTangentDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilderTangentDirections` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartTangentDirection`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.GeometricUtilities.TransitionCurveBuilderTangentDirections` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartTangentMagnitude: NXOpen.Expression = ...
    """
    Returns  the start tangent magnitude 
    
    <hr>
    
    Getter Method
    
    Signature ``StartTangentMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: TransitionCurveBuilder = ...  # unknown typename


class TwoExpressionsSectionSet(NXOpen.ExpressionSectionSet):
    """
    Represents a two dimension list section item builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateEmptyTwoExpressionsSectionSet`
    
    .. versionadded:: NX9.0.0
    """
    ItemValueTwo: NXOpen.Expression = ...
    """
    Returns  the second expression
    
    <hr>
    
    Getter Method
    
    Signature ``ItemValueTwo`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: TwoExpressionsSectionSet = ...  # unknown typename


class DraftPointData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a draft point data object
    
    To create an instance of this class, see :py:meth:`DraftPointDataCollection.CreateDraftPointData`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetAngle(self, angle: str) -> None:
        """
        Sets the Angle value
        
        Signature ``SetAngle(angle)`` 
        
        :param angle:  Angle string value  
        :type angle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetAngle(self) -> NXOpen.Expression:
        """
        Returns the Angle value
        
        Signature ``GetAngle()`` 
        
        :returns:  Angle Expression Object  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Parameter: float = ...
    """
    Returns or sets  the point coordinates
    
    <hr>
    
    Getter Method
    
    Signature ``Parameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    
    <hr>
    
    Setter Method
    
    Signature ``Parameter`` 
    
    :param parameter: 
    :type parameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: DraftPointData = ...  # unknown typename


class FtmTransformPointsBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[FtmTransformPointsBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: FtmTransformPointsBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: FtmTransformPointsBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> FtmTransformPointsBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FtmTransformPointsBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: FtmTransformPointsBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[FtmTransformPointsBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[FtmTransformPointsBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: FtmTransformPointsBuilder, object2: FtmTransformPointsBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: FtmTransformPointsBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.FtmTransformPointsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: FtmTransformPointsBuilderList = ...  # unknown typename


class LocalUntrimBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.LocalUntrimBuilder` builder.  
    
    This builder is used to untrim and extend a sheet. 
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.LocalUntrimManager.CreateBuilder`
    
    Default values.
    
    =====================  ======================================
    Property               Value
    =====================  ======================================
    EditCopy               0 
    ---------------------  --------------------------------------
    UEndDistance.Value     0 (millimeters part), 0 (inches part) 
    ---------------------  --------------------------------------
    UStartDistance.Value   0 (millimeters part), 0 (inches part) 
    ---------------------  --------------------------------------
    VEndDistance.Value     0 (millimeters part), 0 (inches part) 
    ---------------------  --------------------------------------
    VStartDistance.Value   0 (millimeters part), 0 (inches part) 
    =====================  ======================================
    
    .. versionadded:: NX9.0.0
    """
    
    def SetCurrentFeature(self, object: NXOpen.Features.Feature) -> None:
        """
        Records the current feature before constructing the dialog.  
        
        Signature ``SetCurrentFeature(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateBoundingBox(self) -> None:
        """
        Updates the bounding box when changing the distance value.  
        
        Signature ``UpdateBoundingBox()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateProductBoundingBox(self) -> None:
        """
        Creates the product initial bounding box.  
        
        Signature ``CreateProductBoundingBox()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CleanUpFeaturesCreated(self) -> None:
        """
        Cleans up the features created by the selecting face call back.  
        
        Signature ``CleanUpFeaturesCreated()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCopyFace(self) -> None:
        """
        Creates the extracted face when the flag of Edit a Copy is turned on or a solid body face is selected.  
        
        Signature ``CreateCopyFace()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    
    def SetOriginalFace(self, originalFace: NXOpen.Face) -> None:
        """
        Sets the originally selected face.  
        
        Signature ``SetOriginalFace(originalFace)`` 
        
        :param originalFace: 
        :type originalFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    
    def SetLimitChangeValue(self, limitType: int) -> None:
        """
        Sets the limit boundary handle type.  
        
        Signature ``SetLimitChangeValue(limitType)`` 
        
        :param limitType: 
        :type limitType: int 
        
        .. versionadded:: NX10.0.1
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    
    def SetInitialDistanceValue(self, distanceValues: 'list[float]') -> None:
        """
        Sets the initial distance value.  
        
        Signature ``SetInitialDistanceValue(distanceValues)`` 
        
        :param distanceValues: 
        :type distanceValues: list of float 
        
        .. versionadded:: NX10.0.1
        
        License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    EdgeCollector: NXOpen.ScCollector = ...
    """
    Returns  the edges on the face to delete.  
    
    <hr>
    
    Getter Method
    
    Signature ``EdgeCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EditCopy: bool = ...
    """
    Returns or sets  the flag to indicate whether to edit a copied face or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditCopy`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditCopy`` 
    
    :param editCopy: 
    :type editCopy: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
    """
    Face: NXOpen.SelectFace = ...
    """
    Returns  the tool object to split the target body.  
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RemoveBoundary: bool = ...
    """
    Returns or sets  the flag to indicate whether to remove the face boundary or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveBoundary`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveBoundary`` 
    
    :param removeBoundary: 
    :type removeBoundary: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_freeform_1 ("basic freeform modeling") OR nx_freeform_2 ("advanced freeform modeling")
    """
    UEndDistance: NXOpen.Expression = ...
    """
    Returns  the U end distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UEndDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UEndLimit: OnPathDimensionBuilder = ...
    """
    Returns  the region limit of U end.  
    
    <hr>
    
    Getter Method
    
    Signature ``UEndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UStartDistance: NXOpen.Expression = ...
    """
    Returns  the U start distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UStartDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UStartLimit: OnPathDimensionBuilder = ...
    """
    Returns  the region limit of U start.  
    
    <hr>
    
    Getter Method
    
    Signature ``UStartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    VEndDistance: NXOpen.Expression = ...
    """
    Returns  the V end distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``VEndDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    VEndLimit: OnPathDimensionBuilder = ...
    """
    Returns  the region limit of V end.  
    
    <hr>
    
    Getter Method
    
    Signature ``VEndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    VStartDistance: NXOpen.Expression = ...
    """
    Returns  the V start distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``VStartDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    VStartLimit: OnPathDimensionBuilder = ...
    """
    Returns  the region limit of V start.  
    
    <hr>
    
    Getter Method
    
    Signature ``VStartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: LocalUntrimBuilder = ...  # unknown typename


class AlignmentMethodBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlignmentMethodBuilderType():
    """
    Alignment types supported 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Parameter", " - "
       "ArcLength", " - "
       "Points", " - "
       "Distance", " - "
       "Angle", " - "
       "SpineCurve", " - "
       "SplinePoints", " - "
       "Segments", " - "
       "Developable", " - "
    """
    Parameter = 0  # AlignmentMethodBuilderTypeMemberType
    ArcLength = 1  # AlignmentMethodBuilderTypeMemberType
    Points = 2  # AlignmentMethodBuilderTypeMemberType
    Distance = 3  # AlignmentMethodBuilderTypeMemberType
    Angle = 4  # AlignmentMethodBuilderTypeMemberType
    SpineCurve = 5  # AlignmentMethodBuilderTypeMemberType
    SplinePoints = 6  # AlignmentMethodBuilderTypeMemberType
    Segments = 7  # AlignmentMethodBuilderTypeMemberType
    Developable = 8  # AlignmentMethodBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlignmentMethodBuilderAlignFillerSurfaceType():
    """
    Filler surface types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoFiller", "No end filler surface"
       "Cone", "Generalized conical developable surface."
       "Cylinder", "Generalized cylindrical developable surface."
       "Trimmed", "Trimmed developable surface."
    """
    NoFiller = 0  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
    Cone = 1  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
    Cylinder = 2  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
    Trimmed = 3  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlignmentMethodBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.AlignmentMethodBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class Type():
        """
        Alignment types supported 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Parameter", " - "
           "ArcLength", " - "
           "Points", " - "
           "Distance", " - "
           "Angle", " - "
           "SpineCurve", " - "
           "SplinePoints", " - "
           "Segments", " - "
           "Developable", " - "
        """
        Parameter = 0  # AlignmentMethodBuilderTypeMemberType
        ArcLength = 1  # AlignmentMethodBuilderTypeMemberType
        Points = 2  # AlignmentMethodBuilderTypeMemberType
        Distance = 3  # AlignmentMethodBuilderTypeMemberType
        Angle = 4  # AlignmentMethodBuilderTypeMemberType
        SpineCurve = 5  # AlignmentMethodBuilderTypeMemberType
        SplinePoints = 6  # AlignmentMethodBuilderTypeMemberType
        Segments = 7  # AlignmentMethodBuilderTypeMemberType
        Developable = 8  # AlignmentMethodBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AlignFillerSurfaceType():
        """
        Filler surface types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoFiller", "No end filler surface"
           "Cone", "Generalized conical developable surface."
           "Cylinder", "Generalized cylindrical developable surface."
           "Trimmed", "Trimmed developable surface."
        """
        NoFiller = 0  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
        Cone = 1  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
        Cylinder = 2  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
        Trimmed = 3  # AlignmentMethodBuilderAlignFillerSurfaceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSections(self, sections: 'list[NXOpen.Section]') -> None:
        """
        Set the sections.  
        
        Does not compute default alignment 
        
        Signature ``SetSections(sections)`` 
        
        :param sections:  Array of sections  
        :type sections: list of :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def CreateOnPathDimBuilder(self, sec: NXOpen.Section, pnt: NXOpen.Point3d) -> OnPathDimensionBuilder:
        """
        Set the sections.  
        
        Does not compute default alignment  
        
        Signature ``CreateOnPathDimBuilder(sec, pnt)`` 
        
        :param sec:  The section on which to create the builder  
        :type sec: :py:class:`NXOpen.Section` 
        :param pnt:  The point on the section  
        :type pnt: :py:class:`NXOpen.Point3d` 
        :returns:  The generated onPathDim 
        :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def UnloadSections(self) -> None:
        """
        Unload sections held by the builder 
        
        Signature ``UnloadSections()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def AddSection(self, sectionIndex: int, sec: NXOpen.Section) -> None:
        """
        Add a section at the given index among existing sections.  
        
        Computes points for other sections 
        
        Signature ``AddSection(sectionIndex, sec)`` 
        
        :param sectionIndex:  Where to insert.  New section will have this index  
        :type sectionIndex: int 
        :param sec:  The New section  
        :type sec: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RemoveSection(self, sec: NXOpen.Section) -> None:
        """
        Find and delete the section 
        
        Signature ``RemoveSection(sec)`` 
        
        :param sec:  Existing section within the Alignment 
        :type sec: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RemoveSectionAtIndex(self, secIndex: int) -> None:
        """
        Remove section at given index 
        
        Signature ``RemoveSectionAtIndex(secIndex)`` 
        
        :param secIndex:  The index of the section to remove  
        :type secIndex: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def UpdateSectionAtIndex(self, secIndex: int) -> None:
        """
        Update section at given index 
        
        Signature ``UpdateSectionAtIndex(secIndex)`` 
        
        :param secIndex:  The index of the section to remove  
        :type secIndex: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def ComputeDefaultPoints(self) -> None:
        """
        Calculate default alignment points on existing sections.  
        
        Pre-existing alignment points destroyed 
        
        Signature ``ComputeDefaultPoints()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetAllPoints(self) -> tuple:
        """
        Get all of the alignment points, returns as a single dimension array  
        
        Signature ``GetAllPoints()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (alignPoints, numSection). alignPoints is a list of :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder`.   Gets all the points, numPoints is total number of points, not points per section numSection is a int.   Number of sections returned
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPoint(self, sectionIndex: int, pointIndex: int) -> OnPathDimensionBuilder:
        """
        Gets an alignment point for a section  
        
        Signature ``GetPoint(sectionIndex, pointIndex)`` 
        
        :param sectionIndex:  Section on which to query the alignment point  
        :type sectionIndex: int 
        :param pointIndex:  Alignment point index  
        :type pointIndex: int 
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
        
        .. versionadded:: NX5.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetAlignPoints(self, alignPoints: 'list[OnPathDimensionBuilder]') -> None:
        """
        Set the Alignment Points when sections have been set up.  
        
        The incoming points are organized section by section.  The points
        parent section match the pre-existing sections held by this object 
        
        Signature ``SetAlignPoints(alignPoints)`` 
        
        :param alignPoints:   Sets the points on the section, numPoints is total number of points for all sections 
        :type alignPoints: list of :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RemoveAllPoints(self) -> None:
        """
        Remove all alignment points.  
        
        Keeps the sections 
        
        Signature ``RemoveAllPoints()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def AddPoint(self, alignPoint: OnPathDimensionBuilder) -> int:
        """
        Insert a given point, and create corresponding points on other sections.  
        
        The points on other sections
        are computed based on existing alignment points  
        
        Signature ``AddPoint(alignPoint)`` 
        
        :param alignPoint:  Pt to insert 
        :type alignPoint: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
        :returns:  Index of the newly added point on each section  
        :rtype: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RemovePoint(self, alignPoint: OnPathDimensionBuilder) -> None:
        """
        Remove given point, also remove corresponding points on other sections 
        
        Signature ``RemovePoint(alignPoint)`` 
        
        :param alignPoint:  Pt do delete  
        :type alignPoint: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlignAxis: NXOpen.Axis = ...
    """
    Returns or sets  the alignment axis 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignAxis`` 
    
    :param alignAxis: 
    :type alignAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    AlignCurve: NXOpen.Section = ...
    """
    Returns  the align curve 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    AlignType: AlignmentMethodBuilderType = ...
    """
    Returns or sets  the alignment type 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlignmentMethodBuilderType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignType`` 
    
    :param alignType: 
    :type alignType: :py:class:`NXOpen.GeometricUtilities.AlignmentMethodBuilderType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    AlignVector: NXOpen.Direction = ...
    """
    Returns or sets  the alignment vector 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignVector`` 
    
    :param alignVector: 
    :type alignVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    EndAlignFillerSurfaceOption: AlignmentMethodBuilderAlignFillerSurfaceType = ...
    """
    Returns or sets  the end align filler surface option 
    
    <hr>
    
    Getter Method
    
    Signature ``EndAlignFillerSurfaceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlignmentMethodBuilderAlignFillerSurfaceType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndAlignFillerSurfaceOption`` 
    
    :param fillerSurfaceType: 
    :type fillerSurfaceType: :py:class:`NXOpen.GeometricUtilities.AlignmentMethodBuilderAlignFillerSurfaceType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    NumberOfPointsPerSection: int = ...
    """
    Returns  the number of alignment points in each section.  
    
    All the sections always have same number of alignment points  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfPointsPerSection`` 
    
    :returns:  Number of alignment points in each section  
    :rtype: int 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    """
    NumberOfSections: int = ...
    """
    Returns  the number of section in the alignment point block 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfSections`` 
    
    :returns:  Number of sections  
    :rtype: int 
    
    .. versionadded:: NX5.0.1
    
    License requirements: None.
    """
    StartAlignFillerSurfaceOption: AlignmentMethodBuilderAlignFillerSurfaceType = ...
    """
    Returns or sets  the start align filler surface option 
    
    <hr>
    
    Getter Method
    
    Signature ``StartAlignFillerSurfaceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlignmentMethodBuilderAlignFillerSurfaceType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartAlignFillerSurfaceOption`` 
    
    :param fillerSurfaceType: 
    :type fillerSurfaceType: :py:class:`NXOpen.GeometricUtilities.AlignmentMethodBuilderAlignFillerSurfaceType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM")
    """
    Null: AlignmentMethodBuilder = ...  # unknown typename


class MultiDraftAngleOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MultiDraftAngleOption():
    """
    Represents the angle option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Single", "Sigle draft"
       "Multiple", "Multi draft"
    """
    Single = 0  # MultiDraftAngleOptionMemberType
    Multiple = 1  # MultiDraftAngleOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MultiDraft(SimpleDraft):
    """
    Represents a multi-draft.  
    
    .. versionadded:: NX5.0.0
    """
    
    class AngleOption():
        """
        Represents the angle option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Single", "Sigle draft"
           "Multiple", "Multi draft"
        """
        Single = 0  # MultiDraftAngleOptionMemberType
        Multiple = 1  # MultiDraftAngleOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetDrafts(self, section: NXOpen.Section) -> 'list[NXOpen.Features.EmbossTaper]':
        """
        Return all the drafts
        
        Signature ``GetDrafts(section)`` 
        
        :param section: 
        :type section: :py:class:`NXOpen.Section` 
        :returns:  Array of draft objects  
        :rtype: list of :py:class:`NXOpen.Features.EmbossTaper` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAngleOption(self) -> MultiDraftAngleOption:
        """
        Returns the draft angle option
        
        Signature ``GetAngleOption()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.GeometricUtilities.MultiDraftAngleOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAngleOption(self, type: MultiDraftAngleOption) -> None:
        """
        Sets the draft angle option
        
        Signature ``SetAngleOption(type)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.GeometricUtilities.MultiDraftAngleOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    BackDraftAngle: NXOpen.Expression = ...
    """
    Returns  the back draft angle.  
    
    This function is used only when the angle type is :py:class:`GeometricUtilities.MultiDraftAngleOption.Single <GeometricUtilities.MultiDraftAngleOption>`.
    
    <hr>
    
    Getter Method
    
    Signature ``BackDraftAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    DraftOption: SimpleDraftSimpleDraftType = ...
    """
    Returns or sets   the draft type
    
    <hr>
    
    Getter Method
    
    Signature ``DraftOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SimpleDraftSimpleDraftType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DraftOption`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.GeometricUtilities.SimpleDraftSimpleDraftType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    FrontDraftAngle: NXOpen.Expression = ...
    """
    Returns  the front draft angle.  
    
    This function is used only when the angle type is :py:class:`GeometricUtilities.MultiDraftAngleOption.Single <GeometricUtilities.MultiDraftAngleOption>`.
    
    <hr>
    
    Getter Method
    
    Signature ``FrontDraftAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: MultiDraft = ...  # unknown typename


class PatternReferencePointServiceBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Pattern Reference Point is a service which enables the employing client to compute the reference point for pattern instance locations.  
    
    The reference point can be inferred or user-selected 
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    IsReferencePointInferred: bool = ...
    """
    Returns or sets  the reference point inferred flag.  
    
    This flag states whether the reference point is inferred from selected entites or not.
    If 'true', the reference point will be inferred every time the selected entities get modified or updated.
    If 'false', the reference point provided by the user will be independent of the selected entities
    but will be associative to the rule by which it was created (e.g. End of Line, Center of Arc). 
    
    <hr>
    
    Getter Method
    
    Signature ``IsReferencePointInferred`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsReferencePointInferred`` 
    
    :param isReferencePointInferred: 
    :type isReferencePointInferred: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the reference point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: PatternReferencePointServiceBuilder = ...  # unknown typename


class BooleanOperationBooleanTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BooleanOperationBooleanType():
    """
    Boolean operation type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Create"
       "Unite", "Unite"
       "Subtract", "Subtract"
       "Intersect", "Intersect"
       "Sew", "Sew"
    """
    Create = 0  # BooleanOperationBooleanTypeMemberType
    Unite = 1  # BooleanOperationBooleanTypeMemberType
    Subtract = 2  # BooleanOperationBooleanTypeMemberType
    Intersect = 3  # BooleanOperationBooleanTypeMemberType
    Sew = 4  # BooleanOperationBooleanTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BooleanOperation(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a boolean operation .  
    
    .. versionadded:: NX3.0.1
    """
    
    class BooleanType():
        """
        Boolean operation type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "Create"
           "Unite", "Unite"
           "Subtract", "Subtract"
           "Intersect", "Intersect"
           "Sew", "Sew"
        """
        Create = 0  # BooleanOperationBooleanTypeMemberType
        Unite = 1  # BooleanOperationBooleanTypeMemberType
        Subtract = 2  # BooleanOperationBooleanTypeMemberType
        Intersect = 3  # BooleanOperationBooleanTypeMemberType
        Sew = 4  # BooleanOperationBooleanTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetBooleanOperationAndBody(self) -> tuple:
        """
        Get the Boolean operation type and target body
        
        Signature ``GetBooleanOperationAndBody()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (type, targetBody). type is a :py:class:`NXOpen.GeometricUtilities.BooleanOperationBooleanType`.   boolean type targetBody is a :py:class:`NXOpen.Body`.   target body 
        
        .. versionadded:: NX3.0.1
        
        .. deprecated::  NX4.0.0
           Use :py:meth:`GeometricUtilities.BooleanOperation.Type` and :py:meth:`GeometricUtilities.BooleanOperation.GetTargetBodies` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetBooleanOperationAndBody(self, type: BooleanOperationBooleanType, targetBody: NXOpen.Body) -> None:
        """
        Set the Boolean operation type and target body
        
        Signature ``SetBooleanOperationAndBody(type, targetBody)`` 
        
        :param type:  boolean type  
        :type type: :py:class:`NXOpen.GeometricUtilities.BooleanOperationBooleanType` 
        :param targetBody:  target body  
        :type targetBody: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX3.0.1
        
        .. deprecated::  NX4.0.0
           Use :py:meth:`GeometricUtilities.BooleanOperation.Type` and :py:meth:`GeometricUtilities.BooleanOperation.SetTargetBodies` instead.
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def GetTargetBodies(self) -> 'list[NXOpen.Body]':
        """
        Get the target bodies 
        
        Signature ``GetTargetBodies()`` 
        
        :returns:  target bodies of boolean  
        :rtype: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTargetBodies(self, targetBodies: 'list[NXOpen.Body]') -> None:
        """
        Set the target bodies 
        
        Signature ``SetTargetBodies(targetBodies)`` 
        
        :param targetBodies:   target bodies of boolean  
        :type targetBodies: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Type: BooleanOperationBooleanType = ...
    """
    Returns or sets   the boolean operation type
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:   boolean type  
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanOperationBooleanType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type:  boolean type  
    :type type: :py:class:`NXOpen.GeometricUtilities.BooleanOperationBooleanType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: BooleanOperation = ...  # unknown typename


class FeatureOffset(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a Offset .  
    
    .. versionadded:: NX3.0.1
    """
    
    def SetStartOffset(self, valueExpression: str) -> None:
        """
        The Start Offset
        
        Signature ``SetStartOffset(valueExpression)`` 
        
        :param valueExpression:  value of start offset expression  
        :type valueExpression: str 
        
        .. versionadded:: NX3.0.1
        
        .. deprecated::  NX8.5.0
           To set the value of the expression modify the expression directly using :py:meth:`GeometricUtilities.FeatureOffset.StartOffset` and :py:meth:`Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetEndOffset(self, valueExpression: str) -> None:
        """
        The End Offset
        
        Signature ``SetEndOffset(valueExpression)`` 
        
        :param valueExpression:  value of end offset expression  
        :type valueExpression: str 
        
        .. versionadded:: NX3.0.1
        
        .. deprecated::  NX8.5.0
           To set the value of the expression modify the expression directly using :py:meth:`GeometricUtilities.FeatureOffset.EndOffset` and :py:meth:`Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndOffset: NXOpen.Expression = ...
    """
    Returns  the End Offset
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffset`` 
    
    :returns:   end offset 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: None.
    """
    Option: Type = ...
    """
    Returns or sets  the Offset option
    
    <hr>
    
    Getter Method
    
    Signature ``Option`` 
    
    :returns:  offset type  
    :rtype: :py:class:`NXOpen.GeometricUtilities.Type` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Option`` 
    
    :param offsetType:  offset type  
    :type offsetType: :py:class:`NXOpen.GeometricUtilities.Type` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartOffset: NXOpen.Expression = ...
    """
    Returns  the Start Offset
    
    <hr>
    
    Getter Method
    
    Signature ``StartOffset`` 
    
    :returns:   end offset 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX3.0.1
    
    License requirements: None.
    """
    Null: FeatureOffset = ...  # unknown typename


class RenewFeatureBuilder(NXOpen.Builder):
    """
    Represents a RenewFeatureBuilder object.  
    
    To obtain an instance of this class use :py:class:`NXOpen.GeometricUtilities.RenewFeatureBuilder`.
    
    .. versionadded:: NX11.0.0
    """
    FeatureList: NXOpen.Features.FeatureList = ...
    """
    Returns  the renew feature list 
    
    <hr>
    
    Getter Method
    
    Signature ``FeatureList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.FeatureList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: RenewFeatureBuilder = ...  # unknown typename


class DraftVariableAngleData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents data containing variable angle draft point data objects
    
    This class will not be created by the user.
    
    .. versionadded:: NX4.0.0
    """
    
    def AddDraftPoints(self, points: 'list[DraftPointData]') -> None:
        """
        Adds :py:class:`NXOpen.GeometricUtilities.DraftPointData` objects    
        
        Signature ``AddDraftPoints(points)`` 
        
        :param points:  Array of DraftPointData Objects  
        :type points: list of :py:class:`NXOpen.GeometricUtilities.DraftPointData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RemoveDraftPoints(self, points: 'list[DraftPointData]') -> None:
        """
        Removes :py:class:`NXOpen.GeometricUtilities.DraftPointData` objects
        
        Signature ``RemoveDraftPoints(points)`` 
        
        :param points:  Array of DraftPointData Objects  
        :type points: list of :py:class:`NXOpen.GeometricUtilities.DraftPointData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetDraftPoints(self) -> 'list[DraftPointData]':
        """
        Returns :py:class:`NXOpen.GeometricUtilities.DraftPointData` objects
        
        Signature ``GetDraftPoints()`` 
        
        :returns:  Array of DraftPointData Objects  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.DraftPointData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetNumberOfDraftPoints(self) -> int:
        """
        Returns number of :py:class:`NXOpen.GeometricUtilities.DraftPointData` objects
        
        Signature ``GetNumberOfDraftPoints()`` 
        
        :returns:  Number of DraftPointData Objects  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: DraftVariableAngleData = ...  # unknown typename


class CurveSettings(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the curve settings data
    
    .. versionadded:: NX11.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CurveFitData: CurveFitData = ...
    """
    Returns  the curve fit data 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveFitData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveFitData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    InputCurvesOption: CurveOptions = ...
    """
    Returns  the input curves option 
    
    <hr>
    
    Getter Method
    
    Signature ``InputCurvesOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: CurveSettings = ...  # unknown typename


class GeneralPatternFromLocationOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralPatternFromLocationOptions():
    """
    the from location options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Point", "point"
       "Csys", "csys"
    """
    Point = 0  # GeneralPatternFromLocationOptionsMemberType
    Csys = 1  # GeneralPatternFromLocationOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the General pattern definition.  
    
    .. versionadded:: NX8.0.0
    """
    
    class FromLocationOptions():
        """
        the from location options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Point", "point"
           "Csys", "csys"
        """
        Point = 0  # GeneralPatternFromLocationOptionsMemberType
        Csys = 1  # GeneralPatternFromLocationOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FromLocationCsys2d: NXOpen.SelectNXObject = ...
    """
    Returns  the from location 2d csys 
    
    <hr>
    
    Getter Method
    
    Signature ``FromLocationCsys2d`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FromLocationCsys3d: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the from location 3d csys 
    
    <hr>
    
    Getter Method
    
    Signature ``FromLocationCsys3d`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FromLocationCsys3d`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FromLocationPoint: NXOpen.Point = ...
    """
    Returns or sets  the from location point 
    
    <hr>
    
    Getter Method
    
    Signature ``FromLocationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FromLocationPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FromLocationType: GeneralPatternFromLocationOptions = ...
    """
    Returns or sets  the from location type 
    
    <hr>
    
    Getter Method
    
    Signature ``FromLocationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.GeneralPatternFromLocationOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FromLocationType`` 
    
    :param fromLocationType: 
    :type fromLocationType: :py:class:`NXOpen.GeometricUtilities.GeneralPatternFromLocationOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ToCsysList: NXOpen.SelectCoordinateSystemList = ...
    """
    Returns  the to csys list  
    
    <hr>
    
    Getter Method
    
    Signature ``ToCsysList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCoordinateSystemList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ToPoints: NXOpen.Section = ...
    """
    Returns  the to points  
    
    <hr>
    
    Getter Method
    
    Signature ``ToPoints`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: GeneralPattern = ...  # unknown typename


class StyledSweepDoubleOnPathDimBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[StyledSweepDoubleOnPathDimBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: StyledSweepDoubleOnPathDimBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: StyledSweepDoubleOnPathDimBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> StyledSweepDoubleOnPathDimBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: StyledSweepDoubleOnPathDimBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: StyledSweepDoubleOnPathDimBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[StyledSweepDoubleOnPathDimBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[StyledSweepDoubleOnPathDimBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: StyledSweepDoubleOnPathDimBuilder, object2: StyledSweepDoubleOnPathDimBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: StyledSweepDoubleOnPathDimBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.StyledSweepDoubleOnPathDimBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: StyledSweepDoubleOnPathDimBuilderList = ...  # unknown typename


class InstanceEditedExpressionItem(NXOpen.TaggedObject, IComponentBuilder):
    """
    edited value of one master expression of the input object(s) being patterned.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.InstanceEditedExpressionsList.EditInstanceExpression`
    
    .. versionadded:: NX7.5.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    MasterExpression: NXOpen.Expression = ...
    """
    Returns  the master expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ValueExpression: NXOpen.Expression = ...
    """
    Returns  the edited value expression for the master expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: InstanceEditedExpressionItem = ...  # unknown typename


class CurveLimitsData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.CurveLimitsData`   
    
    .. versionadded:: NX5.0.0
    """
    
    def ComplementArc(self) -> None:
        """
        Complements the arc 
        
        Signature ``ComplementArc()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndLimit: CurveExtendData = ...
    """
    Returns  the end limit 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveExtendData` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FullCircle: bool = ...
    """
    Returns or sets  the full circle 
    
    <hr>
    
    Getter Method
    
    Signature ``FullCircle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FullCircle`` 
    
    :param fullCircle: 
    :type fullCircle: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    StartLimit: CurveExtendData = ...
    """
    Returns  the start limit 
    
    <hr>
    
    Getter Method
    
    Signature ``StartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveExtendData` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: CurveLimitsData = ...  # unknown typename


class SpinePointDataCollection(NXOpen.TaggedObjectCollection):
    """
    This class contains the factory methods for creating a SpinePointData object.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateSpinePointData(self, lawValue: float, parameter: float, parent: NXOpen.Section) -> SpinePointData:
        """
        Creates a SpinePointData object.  
        
        Signature ``CreateSpinePointData(lawValue, parameter, parent)`` 
        
        :param lawValue:  Law value  
        :type lawValue: float 
        :param parameter:  Parameter on path  
        :type parameter: float 
        :param parent:  Section Curve on which projected point lies 
        :type parent: :py:class:`NXOpen.Section` 
        :returns:  SpinePointData Object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.SpinePointData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    
    @typing.overload
    def CreateSpinePointData(self, lawValueExpression: NXOpen.Expression, parameter: float, parent: NXOpen.Section) -> SpinePointData:
        """
        Creates a SpinePointData object with expression.  
        
        Signature ``CreateSpinePointData(lawValueExpression, parameter, parent)`` 
        
        :param lawValueExpression:  Law value exp 
        :type lawValueExpression: :py:class:`NXOpen.Expression` 
        :param parameter:  Parameter on path  
        :type parameter: float 
        :param parent:  Section Curve on which projected point lies 
        :type parent: :py:class:`NXOpen.Section` 
        :returns:  SpinePointData Object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.SpinePointData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    


class RotationSetBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[RotationSetBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: RotationSetBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: RotationSetBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> RotationSetBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: RotationSetBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: RotationSetBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[RotationSetBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[RotationSetBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: RotationSetBuilder, object2: RotationSetBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: RotationSetBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.GeometricUtilities.RotationSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: RotationSetBuilderList = ...  # unknown typename


class RectangularPatternStaggerOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RectangularPatternStaggerOptions():
    """
    defines any stagger to be defined on the pattern.  Stagger values are used to offset to every other
    row/column of the pattern. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No stagger applied"
       "Row", "Stagger row"
       "Column", "Stagger column"
    """
    NotSet = 0  # RectangularPatternStaggerOptionsMemberType
    Row = 1  # RectangularPatternStaggerOptionsMemberType
    Column = 2  # RectangularPatternStaggerOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RectangularPatternSimplifiedLayoutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RectangularPatternSimplifiedLayoutTypes():
    """
    defines simplified layout type for linear pattern.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Square", "Square Layout"
       "Triangle", "Triangle Layout"
       "Diamond", "Diamond Layout"
    """
    Square = 0  # RectangularPatternSimplifiedLayoutTypesMemberType
    Triangle = 1  # RectangularPatternSimplifiedLayoutTypesMemberType
    Diamond = 2  # RectangularPatternSimplifiedLayoutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RectangularPattern(NXOpen.TaggedObject, IComponentBuilder):
    """
    the rectangular pattern definition.  
    
    Allows specification along
    two linear axes, which may or may not be orthogonal. 
    
    .. versionadded:: NX7.5.0
    """
    
    class StaggerOptions():
        """
        defines any stagger to be defined on the pattern.  Stagger values are used to offset to every other
        row/column of the pattern. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No stagger applied"
           "Row", "Stagger row"
           "Column", "Stagger column"
        """
        NotSet = 0  # RectangularPatternStaggerOptionsMemberType
        Row = 1  # RectangularPatternStaggerOptionsMemberType
        Column = 2  # RectangularPatternStaggerOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SimplifiedLayoutTypes():
        """
        defines simplified layout type for linear pattern.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Square", "Square Layout"
           "Triangle", "Triangle Layout"
           "Diamond", "Diamond Layout"
        """
        Square = 0  # RectangularPatternSimplifiedLayoutTypesMemberType
        Triangle = 1  # RectangularPatternSimplifiedLayoutTypesMemberType
        Diamond = 2  # RectangularPatternSimplifiedLayoutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateLastStaggered: bool = ...
    """
    Returns or sets  the option to generate the last item in a staggered row.  
    
    If 'true' the pattern will be
    narrower on rows that have been staggered. 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateLastStaggered`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateLastStaggered`` 
    
    :param create: 
    :type create: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HorizontalRef: HorizontalReference = ...
    """
    Returns  the horizontal reference 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRef`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.HorizontalReference` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SimplifiedLayoutType: RectangularPatternSimplifiedLayoutTypes = ...
    """
    Returns or sets  the simplified layout type to be used by the pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``SimplifiedLayoutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.RectangularPatternSimplifiedLayoutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SimplifiedLayoutType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.GeometricUtilities.RectangularPatternSimplifiedLayoutTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaggerType: RectangularPatternStaggerOptions = ...
    """
    Returns or sets  the type of stagger to be used by the pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``StaggerType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.RectangularPatternStaggerOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaggerType`` 
    
    :param spaceType: 
    :type spaceType: :py:class:`NXOpen.GeometricUtilities.RectangularPatternStaggerOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseYDirectionToggle: bool = ...
    """
    Returns or sets  the UseYDirection toggle attribute.  
    
    This function gets the UseYDirection toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``UseYDirectionToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseYDirectionToggle`` 
    
    :param toggle: 
    :type toggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XDirection: NXOpen.Direction = ...
    """
    Returns or sets  the x axis 
    
    <hr>
    
    Getter Method
    
    Signature ``XDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDirection`` 
    
    :param xDirection: 
    :type xDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XFlip: bool = ...
    """
    Returns or sets  the XSelection flip attribute.  
    
    This function flips X selection object of the 2D pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``XFlip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XFlip`` 
    
    :param flip: 
    :type flip: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XSelection: NXOpen.SelectNXObject = ...
    """
    Returns  the direction object.  
    
    This function gets X direction object of the 2D pattern. This call will result in an Exception if not called in 2D mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``XSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XSpacing: DistancePatternSpacing = ...
    """
    Returns  the instance spacing along the x axis 
    
    <hr>
    
    Getter Method
    
    Signature ``XSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.DistancePatternSpacing` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XSymmetryToggle: bool = ...
    """
    Returns or sets  the XSymmetry toggle attribute.  
    
    This function gets the x Symmetry toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``XSymmetryToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XSymmetryToggle`` 
    
    :param toggle: 
    :type toggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YDirection: NXOpen.Direction = ...
    """
    Returns or sets  the y axis, which can be any vector not parallel to the x axis 
    
    <hr>
    
    Getter Method
    
    Signature ``YDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDirection`` 
    
    :param yDirection: 
    :type yDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YFlip: bool = ...
    """
    Returns or sets  the YSelection flip attribute.  
    
    This function flips Y selection object of the 2D pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``YFlip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YFlip`` 
    
    :param flip: 
    :type flip: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YSelection: NXOpen.SelectNXObject = ...
    """
    Returns  the direction object.  
    
    This function gets Y direction object of the 2D pattern. This call will result in an Exception if not called in 2D mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``YSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YSpacing: DistancePatternSpacing = ...
    """
    Returns  the instance spacing along the y axis 
    
    <hr>
    
    Getter Method
    
    Signature ``YSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.DistancePatternSpacing` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YSymmetryToggle: bool = ...
    """
    Returns or sets  the YSymmetry toggle attribute.  
    
    This function gets the y Symmetry toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``YSymmetryToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YSymmetryToggle`` 
    
    :param toggle: 
    :type toggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: RectangularPattern = ...  # unknown typename


class InteractiveSectionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.InteractiveSectionBuilder`.  
    
    The interactive section block uses 2 points to draw a line or a section.
    
    .. versionadded:: NX7.0.0
    """
    
    def AppendPlane(self, point1: NXOpen.Point3d, point2: NXOpen.Point3d, origin: NXOpen.Point3d, normal: NXOpen.Vector3d) -> None:
        """
        Appends a plane 
        
        Signature ``AppendPlane(point1, point2, origin, normal)`` 
        
        :param point1:  Point 1 of the interactive line  
        :type point1: :py:class:`NXOpen.Point3d` 
        :param point2:  Point 2 of the interactive line  
        :type point2: :py:class:`NXOpen.Point3d` 
        :param origin:  Origin of the plane  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param normal:  Normal of the plane  
        :type normal: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def DeleteLast(self) -> None:
        """
        Deletes last point or the plane created
        
        Signature ``DeleteLast()`` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetNumPlanes(self) -> int:
        """
        Get the number of planes  
        
        Signature ``GetNumPlanes()`` 
        
        :returns:  number of planes  
        :rtype: int 
        
        .. versionadded:: NX7.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def GetNthPlane(self, index: int) -> SectionPlaneData:
        """
        Get the Nth plane  
        
        Signature ``GetNthPlane(index)`` 
        
        :param index:  index of the plane  
        :type index: int 
        :returns:  plane found at index 
        :rtype: :py:class:`NXOpen.GeometricUtilities.SectionPlaneData` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: studio_free_form ("STUDIO FREE FORM")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: InteractiveSectionBuilder = ...  # unknown typename


class UnnestModuleBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.UnnestModuleBuilder`
    
    Note that this class is now deprecated. Please use the 
    :py:class:`NXOpen.Features.FeatureCollection` instead.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.FeatureCollection.CreateUnnestModuleBuilder`
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Features.FeatureCollection` instead.
    """
    ModuleToUnnest: NXOpen.Features.SelectFeature = ...
    """
    Returns  the module to unnest 
    
    This API is now deprecated.
    Please use :py:meth:`NXOpen.Features.FeatureCollection.ReorganizeFeature` instead.
    
    <hr>
    
    Getter Method
    
    Signature ``ModuleToUnnest`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Please use :py:meth:`NXOpen.Features.FeatureCollection.ReorganizeFeature` instead.
    
    License requirements: None.
    """
    Null: UnnestModuleBuilder = ...  # unknown typename


class BlendLimitsData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.BlendLimitsData`
    
    .. versionadded:: NX5.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CapsList: NXOpen.TaggedObjectList = ...
    """
    Returns  the caps list 
    
    <hr>
    
    Getter Method
    
    Signature ``CapsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    UserSelectedObjects: bool = ...
    """
    Returns or sets  the use plane cap blend 
    
    <hr>
    
    Getter Method
    
    Signature ``UserSelectedObjects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserSelectedObjects`` 
    
    :param useSelectedObject: 
    :type useSelectedObject: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: BlendLimitsData = ...  # unknown typename


class GeometryLocationDataEntityTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeometryLocationDataEntityTypes():
    """
    Represents the entity type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Point", " - "
       "Csys", " - "
    """
    Point = 0  # GeometryLocationDataEntityTypesMemberType
    Csys = 1  # GeometryLocationDataEntityTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeometryLocationData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.GeometryLocationData`
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.GeometryLocationDataCollection.CreateGeometryLocationData`
    
    .. versionadded:: NX5.0.0
    """
    
    class EntityTypes():
        """
        Represents the entity type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Point", " - "
           "Csys", " - "
        """
        Point = 0  # GeometryLocationDataEntityTypesMemberType
        Csys = 1  # GeometryLocationDataEntityTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Csys: NXOpen.SelectObject = ...
    """
    Returns  the csys 
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    EntityType: GeometryLocationDataEntityTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``EntityType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.GeometryLocationDataEntityTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EntityType`` 
    
    :param entityType: 
    :type entityType: :py:class:`NXOpen.GeometricUtilities.GeometryLocationDataEntityTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: GeometryLocationData = ...  # unknown typename


class LawBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LawBuilderType():
    """
    The law types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "constant law type"
       "Linear", "linear law type"
       "Cubic", "cubic law type"
       "LinearAlongSpine", "linear along spine law type"
       "CubicAlongSpine", "cubic along spine law type"
       "ByEquation", "by equation law type"
       "ByLawCurve", "by law curve law type"
       "MultiTransition", "multi-transition law type"
       "NonInflecting", "non-inflecting law type"
       "SShaped", "S-shaped law type"
    """
    Constant = 0  # LawBuilderTypeMemberType
    Linear = 1  # LawBuilderTypeMemberType
    Cubic = 2  # LawBuilderTypeMemberType
    LinearAlongSpine = 3  # LawBuilderTypeMemberType
    CubicAlongSpine = 4  # LawBuilderTypeMemberType
    ByEquation = 5  # LawBuilderTypeMemberType
    ByLawCurve = 6  # LawBuilderTypeMemberType
    MultiTransition = 7  # LawBuilderTypeMemberType
    NonInflecting = 8  # LawBuilderTypeMemberType
    SShaped = 9  # LawBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LawBuilderRetainLawCurveOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LawBuilderRetainLawCurveOption():
    """
    Describes the option on whether to retain the original profile. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "KeepOriginal", "Keeps the original profile as it is during edit pre NX3 parms"
       "Replace", "Deletes the old profile, so that user has to select new one during edit pre NX3 parms"
    """
    KeepOriginal = 0  # LawBuilderRetainLawCurveOptionMemberType
    Replace = 1  # LawBuilderRetainLawCurveOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LawBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a LawBuilder   
    
    .. versionadded:: NX5.0.0
    """
    
    class Type():
        """
        The law types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "constant law type"
           "Linear", "linear law type"
           "Cubic", "cubic law type"
           "LinearAlongSpine", "linear along spine law type"
           "CubicAlongSpine", "cubic along spine law type"
           "ByEquation", "by equation law type"
           "ByLawCurve", "by law curve law type"
           "MultiTransition", "multi-transition law type"
           "NonInflecting", "non-inflecting law type"
           "SShaped", "S-shaped law type"
        """
        Constant = 0  # LawBuilderTypeMemberType
        Linear = 1  # LawBuilderTypeMemberType
        Cubic = 2  # LawBuilderTypeMemberType
        LinearAlongSpine = 3  # LawBuilderTypeMemberType
        CubicAlongSpine = 4  # LawBuilderTypeMemberType
        ByEquation = 5  # LawBuilderTypeMemberType
        ByLawCurve = 6  # LawBuilderTypeMemberType
        MultiTransition = 7  # LawBuilderTypeMemberType
        NonInflecting = 8  # LawBuilderTypeMemberType
        SShaped = 9  # LawBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RetainLawCurveOption():
        """
        Describes the option on whether to retain the original profile. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "KeepOriginal", "Keeps the original profile as it is during edit pre NX3 parms"
           "Replace", "Deletes the old profile, so that user has to select new one during edit pre NX3 parms"
        """
        KeepOriginal = 0  # LawBuilderRetainLawCurveOptionMemberType
        Replace = 1  # LawBuilderRetainLawCurveOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSpineIntoBuilder(self, spine: NXOpen.Section) -> None:
        """
        Sets the spine dynamically into builder 
        
        Signature ``SetSpineIntoBuilder(spine)`` 
        
        :param spine:  Set the Spine into builder  
        :type spine: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlongSpineData: AlongSpineBuilder = ...
    """
    Returns  the linear or cubic along spine law.  
    
    This will be used only when the law type is linear along spine/cubic along spine 
    
    <hr>
    
    Getter Method
    
    Signature ``AlongSpineData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.AlongSpineBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    BaseLine: NXOpen.SelectLine = ...
    """
    Returns  the base line.  
    
    This will be used only when the law type is by law curve 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectLine` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    EndValue: NXOpen.Expression = ...
    """
    Returns  the end value.  
    
    This will be used only when the law type is linear/cubic 
    
    <hr>
    
    Getter Method
    
    Signature ``EndValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Function: str = ...
    """
    Returns or sets  the function.  
    
    This will be used only when the law type is by equation. 
    Make sure that the expression should be created before setting it in to the builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Function`` 
    
    :returns:  Get the name of function expression  
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Function`` 
    
    :param function:  Set the name of function expression  
    :type function: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    IsSimpleCubicAlongSpine: bool = ...
    """
    Returns or sets  a value indicating if :py:class:`NXOpen.GeometricUtilities.LawBuilderType.CubicAlongSpine <NXOpen.GeometricUtilities.LawBuilderType>` is using simple cubic interpolation.  
    
    Simple cubic interpolation minimizes enforcement of automatic tangent constraints at the defining points. This option is valid only
    when :py:class:`NXOpen.GeometricUtilities.LawBuilderType` is :py:class:`NXOpen.GeometricUtilities.LawBuilderType.CubicAlongSpine <NXOpen.GeometricUtilities.LawBuilderType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``IsSimpleCubicAlongSpine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsSimpleCubicAlongSpine`` 
    
    :param isSimpleCubic: 
    :type isSimpleCubic: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LawCurve: NXOpen.Section = ...
    """
    Returns  the law curve.  
    
    This will be used only when the law type is by law curve 
    
    <hr>
    
    Getter Method
    
    Signature ``LawCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    LawCurveOption: LawBuilderRetainLawCurveOption = ...
    """
    Returns or sets  the option to retain law curve.  
    
    This will be used only during the edit of Pre NX3 feature Parms 
    
    <hr>
    
    Getter Method
    
    Signature ``LawCurveOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilderRetainLawCurveOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LawCurveOption`` 
    
    :param lawCurveOption: 
    :type lawCurveOption: :py:class:`NXOpen.GeometricUtilities.LawBuilderRetainLawCurveOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    LawType: LawBuilderType = ...
    """
    Returns or sets  the law type 
    
    <hr>
    
    Getter Method
    
    Signature ``LawType`` 
    
    :returns:  Returns the lawType  
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilderType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LawType`` 
    
    :param lawType:  Set the lawType  
    :type lawType: :py:class:`NXOpen.GeometricUtilities.LawBuilderType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    MultiTransitionLaw: MultiTransitionLawBuilder = ...
    """
    Returns  the multi transition law.  
    
    This will be used only when the law type is multi transition law 
    
    <hr>
    
    Getter Method
    
    Signature ``MultiTransitionLaw`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.MultiTransitionLawBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NonInflectingLaw: NonInflectingLawBuilder = ...
    """
    Returns  the non inflecting law.  
    
    This will be used only when the law type is non inflecting law 
    
    <hr>
    
    Getter Method
    
    Signature ``NonInflectingLaw`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.NonInflectingLawBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Parameter: str = ...
    """
    Returns or sets  the parameter.  
    
    This will be used only when the law type is by equation. 
    Make sure that the expression should be created before setting it in to the builder 
    
    <hr>
    
    Getter Method
    
    Signature ``Parameter`` 
    
    :returns:  Get the name of parameter expression  
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parameter`` 
    
    :param parameter:  Set the name of parameter expression  
    :type parameter: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the reverse direction.  
    
    This will be used only when the law type is by law curve 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns:  Get the reverse direction flag  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection:  Set the reverse direction flag  
    :type reverseDirection: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING")
    """
    SShapedLaw: SShapedLawBuilder = ...
    """
    Returns  the s-shaped law.  
    
    This will be used only when the law type is s-shaped law 
    
    <hr>
    
    Getter Method
    
    Signature ``SShapedLaw`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SShapedLawBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StartValue: NXOpen.Expression = ...
    """
    Returns  the start value.  
    
    This will be used only when the law type is linear/cubic 
    
    <hr>
    
    Getter Method
    
    Signature ``StartValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Value: NXOpen.Expression = ...
    """
    Returns  the constant value.  
    
    This will be used only when the law type is constant 
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: LawBuilder = ...  # unknown typename


class CurveLengthBuilderEndObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveLengthBuilderEndObjectType():
    """
    This attribute represents end type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Value", " - "
       "FromSelected", " - "
    """
    Value = 0  # CurveLengthBuilderEndObjectTypeMemberType
    FromSelected = 1  # CurveLengthBuilderEndObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveLengthBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.CurveLengthBuilder` builder
    
    .. versionadded:: NX12.0.0
    """
    
    class EndObjectType():
        """
        This attribute represents end type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Value", " - "
           "FromSelected", " - "
        """
        Value = 0  # CurveLengthBuilderEndObjectTypeMemberType
        FromSelected = 1  # CurveLengthBuilderEndObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndOffset0: NXOpen.Expression = ...
    """
    Returns  the end 1 length 
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffset0`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    EndOffset1: NXOpen.Expression = ...
    """
    Returns  the end 2 length 
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffset1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    EndSelection0: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the select object for end 1 
    
    <hr>
    
    Getter Method
    
    Signature ``EndSelection0`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    EndSelection1: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns the select object for end 2
    
    <hr>
    
    Getter Method
    
    Signature ``EndSelection1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    EndType0: CurveLengthBuilderEndObjectType = ...
    """
    Returns or sets  the end 1 type 
    
    <hr>
    
    Getter Method
    
    Signature ``EndType0`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveLengthBuilderEndObjectType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndType0`` 
    
    :param endType0: 
    :type endType0: :py:class:`NXOpen.GeometricUtilities.CurveLengthBuilderEndObjectType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    EndType1: CurveLengthBuilderEndObjectType = ...
    """
    Returns or sets  the end 2 type 
    
    <hr>
    
    Getter Method
    
    Signature ``EndType1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveLengthBuilderEndObjectType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndType1`` 
    
    :param endType1: 
    :type endType1: :py:class:`NXOpen.GeometricUtilities.CurveLengthBuilderEndObjectType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ReverseEndOffset0Direction: bool = ...
    """
    Returns or sets  the reverse endOffset0 direction flag.  
    
    Indicates whether the endOffset0 direction has been flipped from its initial inferred direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseEndOffset0Direction`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseEndOffset0Direction`` 
    
    :param reverseEndOffset0Direction: 
    :type reverseEndOffset0Direction: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ReverseEndOffset1Direction: bool = ...
    """
    Returns or sets  the reverse endOffset1 direction flag.  
    
    Indicates whether the endOffset1 direction has been flipped from its initial inferred direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseEndOffset1Direction`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseEndOffset1Direction`` 
    
    :param reverseEndOffset1Direction: 
    :type reverseEndOffset1Direction: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: CurveLengthBuilder = ...  # unknown typename


class PartModuleRelationshipBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Features.PartModule` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.FeatureCollection.CreatePartModuleRelationshipBuilder`
    
    .. versionadded:: NX8.0.0
    """
    LinkedPartModule: NXOpen.Features.SelectPartModule = ...
    """
    Returns  the linked part module in separate part to which relationship needs to be established 
    
    <hr>
    
    Getter Method
    
    Signature ``LinkedPartModule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectPartModule` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PartModule: NXOpen.Features.SelectPartModule = ...
    """
    Returns  the part module in owining part to establish the relationship 
    
    <hr>
    
    Getter Method
    
    Signature ``PartModule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectPartModule` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PartModuleRelationshipBuilder = ...  # unknown typename


class ScalingMethodBuilderScalingOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalingMethodBuilderScalingOptions():
    """
    This enum represents the scaling method option. By default, it is set to Constant.
    Uniform and Lateral scaling options are invalid if only 1 guide is selected. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "Constant"
       "ByBlendingFunction", "Blending Function"
       "ByAnotherCurve", "Another Curve"
       "ByAPoint", "A Point"
       "ByAreaLaw", "Area Law"
       "ByPerimeterLaw", "Perimeter Law"
       "Uniform", "Uniform, available only if 2 guides are selected"
       "Lateral", "Lateral, available only if 2 guides are selected"
    """
    Constant = 0  # ScalingMethodBuilderScalingOptionsMemberType
    ByBlendingFunction = 1  # ScalingMethodBuilderScalingOptionsMemberType
    ByAnotherCurve = 2  # ScalingMethodBuilderScalingOptionsMemberType
    ByAPoint = 3  # ScalingMethodBuilderScalingOptionsMemberType
    ByAreaLaw = 4  # ScalingMethodBuilderScalingOptionsMemberType
    ByPerimeterLaw = 5  # ScalingMethodBuilderScalingOptionsMemberType
    Uniform = 6  # ScalingMethodBuilderScalingOptionsMemberType
    Lateral = 7  # ScalingMethodBuilderScalingOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalingMethodBuilderBlendingFunctionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalingMethodBuilderBlendingFunctionTypes():
    """
    This enum represents the blending function type, if the scaling by BlendingFunction is selected. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Cubic", "Cubic"
    """
    Linear = 0  # ScalingMethodBuilderBlendingFunctionTypesMemberType
    Cubic = 1  # ScalingMethodBuilderBlendingFunctionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalingMethodBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ScalingMethodBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class ScalingOptions():
        """
        This enum represents the scaling method option. By default, it is set to Constant.
        Uniform and Lateral scaling options are invalid if only 1 guide is selected. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "Constant"
           "ByBlendingFunction", "Blending Function"
           "ByAnotherCurve", "Another Curve"
           "ByAPoint", "A Point"
           "ByAreaLaw", "Area Law"
           "ByPerimeterLaw", "Perimeter Law"
           "Uniform", "Uniform, available only if 2 guides are selected"
           "Lateral", "Lateral, available only if 2 guides are selected"
        """
        Constant = 0  # ScalingMethodBuilderScalingOptionsMemberType
        ByBlendingFunction = 1  # ScalingMethodBuilderScalingOptionsMemberType
        ByAnotherCurve = 2  # ScalingMethodBuilderScalingOptionsMemberType
        ByAPoint = 3  # ScalingMethodBuilderScalingOptionsMemberType
        ByAreaLaw = 4  # ScalingMethodBuilderScalingOptionsMemberType
        ByPerimeterLaw = 5  # ScalingMethodBuilderScalingOptionsMemberType
        Uniform = 6  # ScalingMethodBuilderScalingOptionsMemberType
        Lateral = 7  # ScalingMethodBuilderScalingOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlendingFunctionTypes():
        """
        This enum represents the blending function type, if the scaling by BlendingFunction is selected. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Cubic", "Cubic"
        """
        Linear = 0  # ScalingMethodBuilderBlendingFunctionTypesMemberType
        Cubic = 1  # ScalingMethodBuilderBlendingFunctionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AreaLaw: LawBuilder = ...
    """
    Returns  the area law.  
    
    For scaling by Area Law, the input law governs the cross sectional area at the start and end of the guide curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``AreaLaw`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    BlendingFunctionType: ScalingMethodBuilderBlendingFunctionTypes = ...
    """
    Returns or sets  the blending function.  
    
    Allows linear or cubic scaling between specified starting and ending scale factors, which 
    correspond to the start and end of the guide string. 
    
    <hr>
    
    Getter Method
    
    Signature ``BlendingFunctionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ScalingMethodBuilderBlendingFunctionTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlendingFunctionType`` 
    
    :param blendingFunctionType: 
    :type blendingFunctionType: :py:class:`NXOpen.GeometricUtilities.ScalingMethodBuilderBlendingFunctionTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    EndBlendScaleFactor: float = ...
    """
    Returns or sets  the end blend scale factor.  
    
    For scaling by Blending Function, the end scale factor will be applied at the
    end point of the guide curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndBlendScaleFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndBlendScaleFactor`` 
    
    :param endBlendScaleFactor: 
    :type endBlendScaleFactor: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    PerimeterLaw: LawBuilder = ...
    """
    Returns  the perimeter law.  
    
    For scaling by Perimeter Law, the input law governs the perimeter of the sections at the start and end of the guide curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``PerimeterLaw`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ScaleFactor: float = ...
    """
    Returns or sets  the scale factor.  
    
    For Constant scaling method, the scale factor will be applied to all sections along the guide. 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleFactor`` 
    
    :param scaleFactor: 
    :type scaleFactor: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScalingCurve: NXOpen.Section = ...
    """
    Returns  the scaling curve.  
    
    For scaling by Another Curve, the scale at any given point is based on the length of the 
    ruling between the guide string and the input scaling curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalingCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ScalingOption: ScalingMethodBuilderScalingOptions = ...
    """
    Returns or sets  the scaling method option.  
    
    Except for Uniform and Lateral scaling methods, additional parameters and/or inputs are required. 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalingOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ScalingMethodBuilderScalingOptions` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalingOption`` 
    
    :param scalingOption: 
    :type scalingOption: :py:class:`NXOpen.GeometricUtilities.ScalingMethodBuilderScalingOptions` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScalingPoint: NXOpen.Point = ...
    """
    Returns or sets  the scaling point.  
    
    For scaling by a Point, the scale at any given point is based on the length of the 
    ruling between the guide string and the input point. 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalingPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalingPoint`` 
    
    :param scalingPoint: 
    :type scalingPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartBlendScaleFactor: float = ...
    """
    Returns or sets  the start blend scale factor.  
    
    For scaling by Blending Function, the start scale factor will be applied at the
    starting of the guide curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartBlendScaleFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartBlendScaleFactor`` 
    
    :param startBlendScaleFactor: 
    :type startBlendScaleFactor: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: ScalingMethodBuilder = ...  # unknown typename


class FaceChangeOverflowBehaviorOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FaceChangeOverflowBehaviorOption():
    """
    face change option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "Automatic"
       "ExtendChangeFace", "Extend Change Face"
       "ExtendIncidentFace", "Extend Incident Face"
       "ExtendCapFace", "Extend Cap Face"
    """
    Automatic = 0  # FaceChangeOverflowBehaviorOptionMemberType
    ExtendChangeFace = 1  # FaceChangeOverflowBehaviorOptionMemberType
    ExtendIncidentFace = 2  # FaceChangeOverflowBehaviorOptionMemberType
    ExtendCapFace = 3  # FaceChangeOverflowBehaviorOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FaceChangeOverflowBehavior(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.FaceChangeOverflowBehavior`
    It provides several face change options for controlling behavior when a change face overflows an incident face.  
    
    .. versionadded:: NX6.0.2
    """
    
    class Option():
        """
        face change option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "Automatic"
           "ExtendChangeFace", "Extend Change Face"
           "ExtendIncidentFace", "Extend Incident Face"
           "ExtendCapFace", "Extend Cap Face"
        """
        Automatic = 0  # FaceChangeOverflowBehaviorOptionMemberType
        ExtendChangeFace = 1  # FaceChangeOverflowBehaviorOptionMemberType
        ExtendIncidentFace = 2  # FaceChangeOverflowBehaviorOptionMemberType
        ExtendCapFace = 3  # FaceChangeOverflowBehaviorOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FaceChangeOption: FaceChangeOverflowBehaviorOption = ...
    """
    Returns or sets  the face change option.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceChangeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FaceChangeOverflowBehaviorOption` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceChangeOption`` 
    
    :param faceChangeOption: 
    :type faceChangeOption: :py:class:`NXOpen.GeometricUtilities.FaceChangeOverflowBehaviorOption` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: FaceChangeOverflowBehavior = ...  # unknown typename


class ModlMotionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ModlMotionOptions():
    """
    Represents the options of Motion. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AlongCurveAngle", "Move by AlongCurve-Angle"
       "DistanceAngle", "Move by Distance-Angle"
       "Distance", "Move by Distance"
       "Angle", "Move by Angle"
       "DistanceBetweenPoints", "Move by Distance between Points"
       "RadialDistance", "Move by Radial Distance"
       "PointToPoint", "Move by Point to Point"
       "RotateByThreePoints", "Move by Rotate by Three Points"
       "AlignAxisVector", "Move by Align Axis to Vector"
       "CsysToCsys", "Move by CSYS to CSYS"
       "Dynamic", "Move by Dynamic"
       "DeltaXyz", "Move by delta XYZ"
       "NotSet", "No move"
    """
    AlongCurveAngle = 0  # ModlMotionOptionsMemberType
    DistanceAngle = 1  # ModlMotionOptionsMemberType
    Distance = 2  # ModlMotionOptionsMemberType
    Angle = 3  # ModlMotionOptionsMemberType
    DistanceBetweenPoints = 4  # ModlMotionOptionsMemberType
    RadialDistance = 5  # ModlMotionOptionsMemberType
    PointToPoint = 6  # ModlMotionOptionsMemberType
    RotateByThreePoints = 7  # ModlMotionOptionsMemberType
    AlignAxisVector = 8  # ModlMotionOptionsMemberType
    CsysToCsys = 9  # ModlMotionOptionsMemberType
    Dynamic = 10  # ModlMotionOptionsMemberType
    DeltaXyz = 11  # ModlMotionOptionsMemberType
    NotSet = 12  # ModlMotionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ModlMotionDeltaMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ModlMotionDelta():
    """
    Represents the options of Delta XYZ. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ReferenceAcsWorkPart", "Reference CSYS is absolute coordinate system in the work part"
       "ReferenceAcsDisplayPart", "Reference CSYS is absolute coordinate system in the display part"
       "ReferenceWcsWorkPart", "Reference CSYS is work coordinate system in the work part"
       "ReferenceWcsDisplayPart", "Reference CSYS is work coordinate system in the display part"
    """
    ReferenceAcsWorkPart = 0  # ModlMotionDeltaMemberType
    ReferenceAcsDisplayPart = 1  # ModlMotionDeltaMemberType
    ReferenceWcsWorkPart = 2  # ModlMotionDeltaMemberType
    ReferenceWcsDisplayPart = 3  # ModlMotionDeltaMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ModlMotion(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.ModlMotion`
    
    .. versionadded:: NX6.0.0
    """
    
    class Options():
        """
        Represents the options of Motion. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AlongCurveAngle", "Move by AlongCurve-Angle"
           "DistanceAngle", "Move by Distance-Angle"
           "Distance", "Move by Distance"
           "Angle", "Move by Angle"
           "DistanceBetweenPoints", "Move by Distance between Points"
           "RadialDistance", "Move by Radial Distance"
           "PointToPoint", "Move by Point to Point"
           "RotateByThreePoints", "Move by Rotate by Three Points"
           "AlignAxisVector", "Move by Align Axis to Vector"
           "CsysToCsys", "Move by CSYS to CSYS"
           "Dynamic", "Move by Dynamic"
           "DeltaXyz", "Move by delta XYZ"
           "NotSet", "No move"
        """
        AlongCurveAngle = 0  # ModlMotionOptionsMemberType
        DistanceAngle = 1  # ModlMotionOptionsMemberType
        Distance = 2  # ModlMotionOptionsMemberType
        Angle = 3  # ModlMotionOptionsMemberType
        DistanceBetweenPoints = 4  # ModlMotionOptionsMemberType
        RadialDistance = 5  # ModlMotionOptionsMemberType
        PointToPoint = 6  # ModlMotionOptionsMemberType
        RotateByThreePoints = 7  # ModlMotionOptionsMemberType
        AlignAxisVector = 8  # ModlMotionOptionsMemberType
        CsysToCsys = 9  # ModlMotionOptionsMemberType
        Dynamic = 10  # ModlMotionOptionsMemberType
        DeltaXyz = 11  # ModlMotionOptionsMemberType
        NotSet = 12  # ModlMotionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Delta():
        """
        Represents the options of Delta XYZ. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ReferenceAcsWorkPart", "Reference CSYS is absolute coordinate system in the work part"
           "ReferenceAcsDisplayPart", "Reference CSYS is absolute coordinate system in the display part"
           "ReferenceWcsWorkPart", "Reference CSYS is work coordinate system in the work part"
           "ReferenceWcsDisplayPart", "Reference CSYS is work coordinate system in the display part"
        """
        ReferenceAcsWorkPart = 0  # ModlMotionDeltaMemberType
        ReferenceAcsDisplayPart = 1  # ModlMotionDeltaMemberType
        ReferenceWcsWorkPart = 2  # ModlMotionDeltaMemberType
        ReferenceWcsDisplayPart = 3  # ModlMotionDeltaMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetMotionToTwoDimensions(self, plane: NXOpen.Plane) -> None:
        """
        Set motion to two dimensions along the given plane 
        
        Signature ``SetMotionToTwoDimensions(plane)`` 
        
        :param plane:  Plane to which motion needs to be restricted 
        :type plane: :py:class:`NXOpen.Plane` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDependentView(self, view: NXOpen.View) -> None:
        """
        Set the view for view dependent drafting objects 
        
        Signature ``SetDependentView(view)`` 
        
        :param view:  view where to paste 
        :type view: :py:class:`NXOpen.View` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetMotionToThreeDimensions(self) -> None:
        """
        Reset motion to three dimensions 
        
        Signature ``ResetMotionToThreeDimensions()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUpdateOption(self, option: NXOpen.SmartObjectUpdateOption) -> None:
        """
        Set the update option for defining the update behavior for the object.  
        
        As an example, in modeling application, the update option should be 
        "WithinModeling" and in drafting application it should be "AfterModeling".
        
        Signature ``SetUpdateOption(option)`` 
        
        :param option:  Update option 
        :type option: :py:class:`NXOpen.SmartObjectUpdateOption` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlignVector: NXOpen.Axis = ...
    """
    Returns or sets  the axis of :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions.AlignAxisVector <NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlignVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignVector`` 
    
    :param alignVector: 
    :type alignVector: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    AlongCurveAngle: ModlAlongCurveAngle = ...
    """
    Returns  the alongCurveAngle of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.AlongCurveAngle  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlongCurveAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlAlongCurveAngle` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.Angle  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AngularAxis: NXOpen.Axis = ...
    """
    Returns or sets  the angular axis of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.Angle  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularAxis`` 
    
    :param angularAxis: 
    :type angularAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    DeltaEnum: ModlMotionDelta = ...
    """
    Returns or sets  the delta enum 
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlMotionDelta` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaEnum`` 
    
    :param deltaEnum: 
    :type deltaEnum: :py:class:`NXOpen.GeometricUtilities.ModlMotionDelta` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    DeltaX: float = ...
    """
    Returns or sets  the delta x 
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.2
    
    .. deprecated::  NX8.5.0
       Obtain the expression using :py:meth:`NXOpen.GeometricUtilities.ModlMotion.DeltaXc` to query or edit it.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaX`` 
    
    :param deltaX: 
    :type deltaX: float 
    
    .. versionadded:: NX6.0.2
    
    .. deprecated::  NX8.5.0
       Obtain the expression using :py:meth:`NXOpen.GeometricUtilities.ModlMotion.DeltaXc` to query or edit it.
    
    License requirements: None.
    """
    DeltaXc: NXOpen.Expression = ...
    """
    Returns  the delta xc 
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaXc`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    DeltaY: float = ...
    """
    Returns or sets  the delta y 
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.2
    
    .. deprecated::  NX8.5.0
       Obtain the expression using :py:meth:`NXOpen.GeometricUtilities.ModlMotion.DeltaYc` to query or edit it.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaY`` 
    
    :param deltaY: 
    :type deltaY: float 
    
    .. versionadded:: NX6.0.2
    
    .. deprecated::  NX8.5.0
       Obtain the expression using :py:meth:`NXOpen.GeometricUtilities.ModlMotion.DeltaYc` to query or edit it.
    
    License requirements: None.
    """
    DeltaYc: NXOpen.Expression = ...
    """
    Returns  the delta yc 
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaYc`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    DeltaZ: float = ...
    """
    Returns or sets  the delta z 
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaZ`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.2
    
    .. deprecated::  NX8.5.0
       Obtain the expression using :py:meth:`NXOpen.GeometricUtilities.ModlMotion.DeltaZc` to query or edit it.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaZ`` 
    
    :param deltaZ: 
    :type deltaZ: float 
    
    .. versionadded:: NX6.0.2
    
    .. deprecated::  NX8.5.0
       Obtain the expression using :py:meth:`NXOpen.GeometricUtilities.ModlMotion.DeltaZc` to query or edit it.
    
    License requirements: None.
    """
    DeltaZc: NXOpen.Expression = ...
    """
    Returns  the delta zc 
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaZc`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    DistanceAngle: ModlDistanceAngle = ...
    """
    Returns  the distance-angle of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.DistanceAngle  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlDistanceAngle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceBetweenPointsDistance: NXOpen.Expression = ...
    """
    Returns  the distance of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.DistanceBetweenPoints  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceBetweenPointsDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceBetweenPointsMeasurePoint: NXOpen.Point = ...
    """
    Returns or sets  the measure point of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.DistanceBetweenPoints  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceBetweenPointsMeasurePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceBetweenPointsMeasurePoint`` 
    
    :param measurePoint: 
    :type measurePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    DistanceBetweenPointsOriginDistance: NXOpen.Expression = ...
    """
    Returns  the distance between origin point and face of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.DistanceBetweenPoints  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceBetweenPointsOriginDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceBetweenPointsOriginPoint: NXOpen.Point = ...
    """
    Returns or sets the origin point of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.DistanceBetweenPoints  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceBetweenPointsOriginPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceBetweenPointsOriginPoint`` 
    
    :param originPoint: 
    :type originPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    DistanceBetweenPointsVector: NXOpen.Direction = ...
    """
    Returns or sets  the direction of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.DistanceBetweenPoints  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceBetweenPointsVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceBetweenPointsVector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    DistanceValue: NXOpen.Expression = ...
    """
    Returns the distance value of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.Distance  < NXOpen.GeometricUtilities.ModlMotionOptions>` 
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceVector: NXOpen.Direction = ...
    """
    Returns or sets the direction of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.Distance  < NXOpen.GeometricUtilities.ModlMotionOptions>` 
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceVector`` 
    
    :param distanceVector: 
    :type distanceVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    EndPoint: NXOpen.Point = ...
    """
    Returns or sets  the end point of :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions.RotateByThreePoints <NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPoint`` 
    
    :param endPoint: 
    :type endPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    FromCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the "from csys" of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.CsysToCsys  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option .  
    
    <hr>
    
    Getter Method
    
    Signature ``FromCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FromCsys`` 
    
    :param fromcsys: 
    :type fromcsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    FromPoint: NXOpen.Point = ...
    """
    Returns or sets  the "from point" of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.PointToPoint  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``FromPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FromPoint`` 
    
    :param fromPoint: 
    :type fromPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ManipulatorMatrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the matrix of manipulator for :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions.Dynamic <NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManipulatorMatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ManipulatorMatrix`` 
    
    :param manipulatorMatrix: 
    :type manipulatorMatrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ManipulatorOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin point of manipulator for :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions.Dynamic <NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManipulatorOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ManipulatorOrigin`` 
    
    :param manipulatorOrigin: 
    :type manipulatorOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    MoveHandle: bool = ...
    """
    Returns or sets  the move handle toggle of :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions.Dynamic <NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    If true,moves only manipulator handle. If false, moves both manipulator handle and object.
    
    <hr>
    
    Getter Method
    
    Signature ``MoveHandle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoveHandle`` 
    
    :param moveHandle: 
    :type moveHandle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Option: ModlMotionOptions = ...
    """
    Returns or sets  the options.  
    
    Control the Motion methods. 
    
    <hr>
    
    Getter Method
    
    Signature ``Option`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Option`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    OrientXpress: OrientXpressBuilder = ...
    """
    Returns  the orientXpress.  
    
    OrientXpress used as overlay in Motion. 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientXpress`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OrientXpressBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RadialAxis: NXOpen.Axis = ...
    """
    Returns or sets  the axis of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.RadialDistance  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadialAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialAxis`` 
    
    :param radialAxis: 
    :type radialAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    RadialDistance: NXOpen.Expression = ...
    """
    Returns  the distance value of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.RadialDistance  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadialDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RadialMeasurePoint: NXOpen.Point = ...
    """
    Returns or sets  the measure point of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.RadialDistance  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadialMeasurePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialMeasurePoint`` 
    
    :param radialMeasuPoint: 
    :type radialMeasuPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    RadialOriginDistance: NXOpen.Expression = ...
    """
    Returns  the distance between axis point and face of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.RadialDistance  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadialOriginDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RotateVector: NXOpen.Axis = ...
    """
    Returns or sets  the direction of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.RotateByThreePoints  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotateVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotateVector`` 
    
    :param rotateVector: 
    :type rotateVector: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    StartPoint: NXOpen.Point = ...
    """
    Returns or sets  the start point of :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.RotateByThreePoints  < NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPoint`` 
    
    :param startPoint: 
    :type startPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ToCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the "to csys" where object is moved for motion option 
    :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.CsysToCsys  < NXOpen.GeometricUtilities.ModlMotionOptions>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToCsys`` 
    
    :param tocsys: 
    :type tocsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ToPoint: NXOpen.Point = ...
    """
    Returns or sets  the point where object is moved for motion option 
    :py:class:` NXOpen.GeometricUtilities.ModlMotionOptions.PointToPoint  < NXOpen.GeometricUtilities.ModlMotionOptions>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ToPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToPoint`` 
    
    :param toPoint: 
    :type toPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    ToVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector of :py:class:`NXOpen.GeometricUtilities.ModlMotionOptions.AlignAxisVector <NXOpen.GeometricUtilities.ModlMotionOptions>`
    motion option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToVector`` 
    
    :param toVector: 
    :type toVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: ModlMotion = ...  # unknown typename


class DisplayResolutionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.DisplayResolutionBuilder`.  
    
    The display resolution block defines the parameters for faceting.
    
    .. versionadded:: NX8.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EdgeTolerance: float = ...
    """
    Returns or sets  the edge tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``EdgeTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgeTolerance`` 
    
    :param edgeTolerance: 
    :type edgeTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FaceTolerance: float = ...
    """
    Returns or sets  the face tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceTolerance`` 
    
    :param faceTolerance: 
    :type faceTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Resolution: NXOpen.Preferences.PartVisualizationShadeAdvViewToleranceType = ...
    """
    Returns or sets  the resolution 
    
    <hr>
    
    Getter Method
    
    Signature ``Resolution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PartVisualizationShadeAdvViewToleranceType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Resolution`` 
    
    :param resolution: 
    :type resolution: :py:class:`NXOpen.Preferences.PartVisualizationShadeAdvViewToleranceType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WidthTolerance: float = ...
    """
    Returns or sets  the width tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``WidthTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WidthTolerance`` 
    
    :param widthTolerance: 
    :type widthTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: DisplayResolutionBuilder = ...  # unknown typename


class LinearLimits(Limits):
    """
    Represents a limits data.  
    
    .. versionadded:: NX4.0.0
    """
    Null: LinearLimits = ...  # unknown typename


class PatternClockingBuilderClockingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternClockingBuilderClockingType():
    """
    type of pattern clocking to transform individual instances 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WithinPatternDefinitionLinear", " - "
       "WithinPatternDefinitionCircular", " - "
       "UserDefined", " - "
    """
    WithinPatternDefinitionLinear = 0  # PatternClockingBuilderClockingTypeMemberType
    WithinPatternDefinitionCircular = 1  # PatternClockingBuilderClockingTypeMemberType
    UserDefined = 2  # PatternClockingBuilderClockingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternClockingBuilder(NXOpen.Builder):
    """
    enables the ability to apply delta transforms on individual instances of a pattern within the pattern feature   
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.PatternDefinition.CreateClockingBuilder`
    
    Default values.
    
    =====================  =====================
    Property               Value
    =====================  =====================
    Motion.DeltaEnum       ReferenceWcsWorkPart 
    ---------------------  ---------------------
    Motion.DeltaXc.Value   0.0 
    ---------------------  ---------------------
    Motion.DeltaYc.Value   0.0 
    ---------------------  ---------------------
    Motion.DeltaZc.Value   0.0 
    =====================  =====================
    
    .. versionadded:: NX8.0.0
    """
    
    class ClockingType():
        """
        type of pattern clocking to transform individual instances 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WithinPatternDefinitionLinear", " - "
           "WithinPatternDefinitionCircular", " - "
           "UserDefined", " - "
        """
        WithinPatternDefinitionLinear = 0  # PatternClockingBuilderClockingTypeMemberType
        WithinPatternDefinitionCircular = 1  # PatternClockingBuilderClockingTypeMemberType
        UserDefined = 2  # PatternClockingBuilderClockingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddInstance(self, index1: int, index2: int) -> None:
        """
        Adds an instance that will get this clocking 
        
        Signature ``AddInstance(index1, index2)`` 
        
        :param index1:  first index into the instance array to add clocking  
        :type index1: int 
        :param index2:  second index into the instance array to add clocking  
        :type index2: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveInstance(self, index1: int, index2: int) -> None:
        """
        Removes an instance from this clocking 
        
        Signature ``RemoveInstance(index1, index2)`` 
        
        :param index1:  first index into the instance array to drop this clocking  
        :type index1: int 
        :param index2:  second index into the instance array to drop this clocking  
        :type index2: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    AngularDelta: NXOpen.Expression = ...
    """
    Returns  the angular delta for circular clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDelta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ClockType: PatternClockingBuilderClockingType = ...
    """
    Returns or sets  the clocking enum to determine if linear or angular clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``ClockType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternClockingBuilderClockingType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClockType`` 
    
    :param clockType:  clocking type  
    :type clockType: :py:class:`NXOpen.GeometricUtilities.PatternClockingBuilderClockingType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Direction1Delta: NXOpen.Expression = ...
    """
    Returns  the x direction delta for linear clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction1Delta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Direction2Delta: NXOpen.Expression = ...
    """
    Returns  the y direction delta for linear clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction2Delta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Motion: ModlMotion = ...
    """
    Returns  the user defined transform motion 
    
    <hr>
    
    Getter Method
    
    Signature ``Motion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlMotion` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RadialDelta: NXOpen.Expression = ...
    """
    Returns  the radial delta for circular clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialDelta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PatternClockingBuilder = ...  # unknown typename


class QuadrilateralFrameBuilderSubtypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuadrilateralFrameBuilderSubtypes():
    """
    Represents the quadrialteral frame subtypes 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Arbitrary", "Arbitrary quadrilateral"
       "Parallelogram", "Parallelogram"
       "Rectangle", "Rectangle"
       "Square", "Square"
    """
    Arbitrary = 0  # QuadrilateralFrameBuilderSubtypesMemberType
    Parallelogram = 1  # QuadrilateralFrameBuilderSubtypesMemberType
    Rectangle = 2  # QuadrilateralFrameBuilderSubtypesMemberType
    Square = 3  # QuadrilateralFrameBuilderSubtypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuadrilateralFrameBuilder(ShapeFrameBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.QuadrilateralFrameBuilder`   
    
    .. versionadded:: NX6.0.0
    """
    
    class Subtypes():
        """
        Represents the quadrialteral frame subtypes 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Arbitrary", "Arbitrary quadrilateral"
           "Parallelogram", "Parallelogram"
           "Rectangle", "Rectangle"
           "Square", "Square"
        """
        Arbitrary = 0  # QuadrilateralFrameBuilderSubtypesMemberType
        Parallelogram = 1  # QuadrilateralFrameBuilderSubtypesMemberType
        Rectangle = 2  # QuadrilateralFrameBuilderSubtypesMemberType
        Square = 3  # QuadrilateralFrameBuilderSubtypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Subtype: QuadrilateralFrameBuilderSubtypes = ...
    """
    Returns or sets  the subtype 
    
    <hr>
    
    Getter Method
    
    Signature ``Subtype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.QuadrilateralFrameBuilderSubtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Subtype`` 
    
    :param subtype: 
    :type subtype: :py:class:`NXOpen.GeometricUtilities.QuadrilateralFrameBuilderSubtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: QuadrilateralFrameBuilder = ...  # unknown typename


class PlayButtonsBuilderPlayModeValuesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlayButtonsBuilderPlayModeValues():
    """
    the different play modes available 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PlayOnce", " - "
       "LoopOver", " - "
       "Retrace", " - "
    """
    PlayOnce = 0  # PlayButtonsBuilderPlayModeValuesMemberType
    LoopOver = 1  # PlayButtonsBuilderPlayModeValuesMemberType
    Retrace = 2  # PlayButtonsBuilderPlayModeValuesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlayButtonsBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    VCR buttons for any dialog that needs them   
    
    .. versionadded:: NX11.0.0
    """
    
    class PlayModeValues():
        """
        the different play modes available 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PlayOnce", " - "
           "LoopOver", " - "
           "Retrace", " - "
        """
        PlayOnce = 0  # PlayButtonsBuilderPlayModeValuesMemberType
        LoopOver = 1  # PlayButtonsBuilderPlayModeValuesMemberType
        Retrace = 2  # PlayButtonsBuilderPlayModeValuesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Stop(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``Stop()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RewindToStart(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``RewindToStart()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def StepBackward(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``StepBackward()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def PlayBackward(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``PlayBackward()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def PlayForward(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``PlayForward()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def StepForward(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``StepForward()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ForwardToEnd(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``ForwardToEnd()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CurrentStep: int = ...
    """
    Returns or sets  the step 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentStep`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentStep`` 
    
    :param currentStep: 
    :type currentStep: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PlayModes: PlayButtonsBuilderPlayModeValues = ...
    """
    Returns or sets  the play modes 
    
    <hr>
    
    Getter Method
    
    Signature ``PlayModes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PlayButtonsBuilderPlayModeValues` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlayModes`` 
    
    :param playModes: 
    :type playModes: :py:class:`NXOpen.GeometricUtilities.PlayButtonsBuilderPlayModeValues` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ScaleSpeed: float = ...
    """
    Returns or sets  the scale speed 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleSpeed`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleSpeed`` 
    
    :param scaleSpeed: 
    :type scaleSpeed: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ScaleStep: float = ...
    """
    Returns or sets  the scale step 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleStep`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleStep`` 
    
    :param scaleStep: 
    :type scaleStep: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Speed: float = ...
    """
    Returns or sets  the speed 
    
    <hr>
    
    Getter Method
    
    Signature ``Speed`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Speed`` 
    
    :param speed: 
    :type speed: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: PlayButtonsBuilder = ...  # unknown typename


class PatternClockingClockingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PatternClockingClockingType():
    """
    type of pattern clocking to transform individual instances 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WithinPatternDefinitionLinear", " - "
       "WithinPatternDefinitionCircular", " - "
    """
    WithinPatternDefinitionLinear = 0  # PatternClockingClockingTypeMemberType
    WithinPatternDefinitionCircular = 1  # PatternClockingClockingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PatternClocking(NXOpen.TaggedObject, IComponentBuilder):
    """
    enables the ability to apply delta transforms on individual instances of a pattern   
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This functionality is no longer supported.
    """
    
    class ClockingType():
        """
        type of pattern clocking to transform individual instances 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WithinPatternDefinitionLinear", " - "
           "WithinPatternDefinitionCircular", " - "
        """
        WithinPatternDefinitionLinear = 0  # PatternClockingClockingTypeMemberType
        WithinPatternDefinitionCircular = 1  # PatternClockingClockingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetXDirectionDelta(self, direction1Exp: str) -> None:
        """
        Sets an x direction delta for linear clocking 
        
        Signature ``SetXDirectionDelta(direction1Exp)`` 
        
        :param direction1Exp:  distance delta  
        :type direction1Exp: str 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.0.0
           This functionality is no longer supported.
        
        License requirements: None.
        """
        ...
    
    
    def SetYDirectionDelta(self, direction2Exp: str) -> None:
        """
        Sets a y direction delta for linear clocking 
        
        Signature ``SetYDirectionDelta(direction2Exp)`` 
        
        :param direction2Exp:  distance delta  
        :type direction2Exp: str 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.0.0
           This functionality is no longer supported.
        
        License requirements: None.
        """
        ...
    
    
    def SetAngularDelta(self, angularDeltaExp: str) -> None:
        """
        Sets a angular delta for circular clocking 
        
        Signature ``SetAngularDelta(angularDeltaExp)`` 
        
        :param angularDeltaExp:  angular delta in degrees  
        :type angularDeltaExp: str 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.0.0
           This functionality is no longer supported.
        
        License requirements: None.
        """
        ...
    
    
    def SetRadialDelta(self, radialDelta: str) -> None:
        """
        Sets a radial delta for circular clocking 
        
        Signature ``SetRadialDelta(radialDelta)`` 
        
        :param radialDelta:  distance radial delta  
        :type radialDelta: str 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.0.0
           This functionality is no longer supported.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngularDelta: NXOpen.Expression = ...
    """
    Returns  the angular delta for circular clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDelta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    ClockType: PatternClockingClockingType = ...
    """
    Returns  the clocking enum to determine if linear or angular clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``ClockType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.PatternClockingClockingType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    Direction1Delta: NXOpen.Expression = ...
    """
    Returns  the x direction delta for linear clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction1Delta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    Direction2Delta: NXOpen.Expression = ...
    """
    Returns  the y direction delta for linear clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction2Delta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    RadialDelta: NXOpen.Expression = ...
    """
    Returns  the radial delta for circular clocking 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialDelta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    Null: PatternClocking = ...  # unknown typename


class ConicCrossSectionOffsetMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConicCrossSectionOffsetMethod():
    """
    This enum represents the offset options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "Constant"
       "Law", "Control by law"
    """
    Constant = 0  # ConicCrossSectionOffsetMethodMemberType
    Law = 1  # ConicCrossSectionOffsetMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConicCrossSectionRhoMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConicCrossSectionRhoMethod():
    """
    This enum represents the rho options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "Constant"
       "Law", "Control by law"
       "AutoEllipse", "Automatic Ellipse"
    """
    Constant = 0  # ConicCrossSectionRhoMethodMemberType
    Law = 1  # ConicCrossSectionRhoMethodMemberType
    AutoEllipse = 2  # ConicCrossSectionRhoMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConicCrossSectionDepthMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConicCrossSectionDepthMethod():
    """
    This enum represents the depth option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "Constant"
       "Law", "Control by law"
    """
    Constant = 0  # ConicCrossSectionDepthMethodMemberType
    Law = 1  # ConicCrossSectionDepthMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConicCrossSectionShapeSkewMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConicCrossSectionShapeSkewMethod():
    """
    This enum represents the shape skew option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "Constant"
       "Law", "Control by law"
    """
    Constant = 0  # ConicCrossSectionShapeSkewMethodMemberType
    Law = 1  # ConicCrossSectionShapeSkewMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConicCrossSectionDefineMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConicCrossSectionDefineMethod():
    """
    This enum represents the conic method for advanced symmetric conic 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BoundaryPlusCenter", "conic shape controlled by boundary and center values"
       "BoundaryPlusRho", "conic shape controlled by boundary and rho values"
       "CenterPlusRho", "conic shape controlled by center and rho values"
    """
    BoundaryPlusCenter = 0  # ConicCrossSectionDefineMethodMemberType
    BoundaryPlusRho = 1  # ConicCrossSectionDefineMethodMemberType
    CenterPlusRho = 2  # ConicCrossSectionDefineMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConicCrossSection(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a conic section data for face blend.  
    
    .. versionadded:: NX4.0.0
    """
    
    class OffsetMethod():
        """
        This enum represents the offset options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "Constant"
           "Law", "Control by law"
        """
        Constant = 0  # ConicCrossSectionOffsetMethodMemberType
        Law = 1  # ConicCrossSectionOffsetMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RhoMethod():
        """
        This enum represents the rho options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "Constant"
           "Law", "Control by law"
           "AutoEllipse", "Automatic Ellipse"
        """
        Constant = 0  # ConicCrossSectionRhoMethodMemberType
        Law = 1  # ConicCrossSectionRhoMethodMemberType
        AutoEllipse = 2  # ConicCrossSectionRhoMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DepthMethod():
        """
        This enum represents the depth option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "Constant"
           "Law", "Control by law"
        """
        Constant = 0  # ConicCrossSectionDepthMethodMemberType
        Law = 1  # ConicCrossSectionDepthMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShapeSkewMethod():
        """
        This enum represents the shape skew option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "Constant"
           "Law", "Control by law"
        """
        Constant = 0  # ConicCrossSectionShapeSkewMethodMemberType
        Law = 1  # ConicCrossSectionShapeSkewMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DefineMethod():
        """
        This enum represents the conic method for advanced symmetric conic 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BoundaryPlusCenter", "conic shape controlled by boundary and center values"
           "BoundaryPlusRho", "conic shape controlled by boundary and rho values"
           "CenterPlusRho", "conic shape controlled by center and rho values"
        """
        BoundaryPlusCenter = 0  # ConicCrossSectionDefineMethodMemberType
        BoundaryPlusRho = 1  # ConicCrossSectionDefineMethodMemberType
        CenterPlusRho = 2  # ConicCrossSectionDefineMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetFirstOffset(self, offset: str) -> None:
        """
        Sets the first offset for the conic section with face blend.  
        
        Signature ``SetFirstOffset(offset)`` 
        
        :param offset: 
        :type offset: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           To set the value of the expression modify the expression directly using :py:meth:`NXOpen.GeometricUtilities.ConicCrossSection.FirstOffset` and :py:meth:`NXOpen.Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetSecondOffset(self, offset: str) -> None:
        """
        Sets the second offset for the conic section with face blend.  
        
        Signature ``SetSecondOffset(offset)`` 
        
        :param offset: 
        :type offset: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           To set the value of the expression modify the expression directly using :py:meth:`NXOpen.GeometricUtilities.ConicCrossSection.SecondOffset` and :py:meth:`NXOpen.Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetRho(self, rho: str) -> None:
        """
        Sets a rho expression for the conic section with face blend.  
        
        Signature ``SetRho(rho)`` 
        
        :param rho: 
        :type rho: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX9.0.0
           To set the value of the expression modify the expression directly using :py:meth:`NXOpen.GeometricUtilities.ConicCrossSection.Rho` and :py:meth:`NXOpen.Expression.RightHandSide`.
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlConstantFirstOffset(self, radius: str) -> None:
        """
        Sets a constant radius for the first law control of the conic section with face blend.  
        
        Signature ``SetLawControlConstantFirstOffset(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlFirstOffsetStartRadius(self, radius: str) -> None:
        """
        Sets a start radius for the first law control of the conic section with face blend.  
        
        Signature ``SetLawControlFirstOffsetStartRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlFirstOffsetEndRadius(self, radius: str) -> None:
        """
        Sets a end radius for the first law control of the conic section with face blend.  
        
        Signature ``SetLawControlFirstOffsetEndRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlConstantSecondOffset(self, radius: str) -> None:
        """
        Sets a constant radius for the second law control of the conic section with face blend.  
        
        Signature ``SetLawControlConstantSecondOffset(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlSecondOffsetStartRadius(self, radius: str) -> None:
        """
        Sets a start radius for the second law control of the conic section with face blend.  
        
        Signature ``SetLawControlSecondOffsetStartRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlSecondOffsetEndRadius(self, radius: str) -> None:
        """
        Sets a end radius for the second law control of the conic section with face blend.  
        
        Signature ``SetLawControlSecondOffsetEndRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlConstantRho(self, radius: str) -> None:
        """
        Sets a constant radius for the rho law control of the conic section with face blend.  
        
        Signature ``SetLawControlConstantRho(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlRhoStartRadius(self, radius: str) -> None:
        """
        Sets a start radius for the rho law control of the conic section with face blend.  
        
        Signature ``SetLawControlRhoStartRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlRhoEndRadius(self, radius: str) -> None:
        """
        Sets a end radius for the rho law control of the conic section with face blend.  
        
        Signature ``SetLawControlRhoEndRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlConstantDepth(self, radius: str) -> None:
        """
        Sets a constant radius for the depth law control of the conic section with face blend.  
        
        Signature ``SetLawControlConstantDepth(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlDepthStartRadius(self, radius: str) -> None:
        """
        Sets a start radius for the depth law control of the conic section with face blend.  
        
        Signature ``SetLawControlDepthStartRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlDepthEndRadius(self, radius: str) -> None:
        """
        Sets a end radius for the depth law control of the conic section with face blend.  
        
        Signature ``SetLawControlDepthEndRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlConstantShapeSkew(self, radius: str) -> None:
        """
        Sets a constant radius for the shape skew law control of the conic section with face blend.  
        
        Signature ``SetLawControlConstantShapeSkew(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlShapeSkewStartRadius(self, radius: str) -> None:
        """
        Sets a start radius for the shape skew law control of the conic section with face blend.  
        
        Signature ``SetLawControlShapeSkewStartRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetLawControlShapeSkewEndRadius(self, radius: str) -> None:
        """
        Sets a end radius for the shape skew law control of the conic section with face blend.  
        
        Signature ``SetLawControlShapeSkewEndRadius(radius)`` 
        
        :param radius:  The value to be set  
        :type radius: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ConicMethod: ConicCrossSectionDefineMethod = ...
    """
    Returns or sets  the conic method for the advanced symmetric conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``ConicMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionDefineMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConicMethod`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionDefineMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Depth: NXOpen.Expression = ...
    """
    Returns  the depth expression for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DepthLawControl: LawBuilder = ...
    """
    Returns  the Depth Law builder 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthLawControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DepthOption: ConicCrossSectionDepthMethod = ...
    """
    Returns or sets  the depth option for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``DepthOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionDepthMethod` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DepthOption`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionDepthMethod` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    FirstConstraintCurveCollector: NXOpen.ScCollector = ...
    """
    Returns or sets  the first constraint curve collector
    
    <hr>
    
    Getter Method
    
    Signature ``FirstConstraintCurveCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstConstraintCurveCollector`` 
    
    :param collector: 
    :type collector: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    FirstLawControl: LawBuilder = ...
    """
    Returns  the First Offset Law builder 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstLawControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FirstOffset: NXOpen.Expression = ...
    """
    Returns  the first offset for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``FirstOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    FirstOffsetOption: ConicCrossSectionOffsetMethod = ...
    """
    Returns or sets  the first offset option for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``FirstOffsetOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionOffsetMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstOffsetOption`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionOffsetMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OffsetSkewRatio: NXOpen.Expression = ...
    """
    Returns  the offset skew ratio expression for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetSkewRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Rho: NXOpen.Expression = ...
    """
    Returns  the rho expression for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``Rho`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    RhoLawControl: LawBuilder = ...
    """
    Returns  the Rho Law builder 
    
    <hr>
    
    Getter Method
    
    Signature ``RhoLawControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    RhoOption: ConicCrossSectionRhoMethod = ...
    """
    Returns or sets  the rho option for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``RhoOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionRhoMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RhoOption`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionRhoMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SecondConstraintCurveCollector: NXOpen.ScCollector = ...
    """
    Returns or sets  the second constraint curve collector
    
    <hr>
    
    Getter Method
    
    Signature ``SecondConstraintCurveCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondConstraintCurveCollector`` 
    
    :param collector: 
    :type collector: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SecondLawControl: LawBuilder = ...
    """
    Returns  the Second Offset Law builder 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondLawControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SecondOffset: NXOpen.Expression = ...
    """
    Returns  the second offset for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``SecondOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    """
    SecondOffsetOption: ConicCrossSectionOffsetMethod = ...
    """
    Returns or sets  the second offset option for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``SecondOffsetOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionOffsetMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondOffsetOption`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionOffsetMethod` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ShapeSkew: NXOpen.Expression = ...
    """
    Returns  the shape skew expression for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeSkew`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ShapeSkewLawControl: LawBuilder = ...
    """
    Returns  the Shape Skew Law builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeSkewLawControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.LawBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ShapeSkewOption: ConicCrossSectionShapeSkewMethod = ...
    """
    Returns or sets  the shape skew option for the conic section with face blend
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeSkewOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionShapeSkewMethod` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShapeSkewOption`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.GeometricUtilities.ConicCrossSectionShapeSkewMethod` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    TransitionLinkFlag: bool = ...
    """
    Returns or sets  the flag to link multi-transition law types
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionLinkFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransitionLinkFlag`` 
    
    :param transitionLinkFlag: 
    :type transitionLinkFlag: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: ConicCrossSection = ...  # unknown typename


class CurveExtensionBuilderExtensionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveExtensionBuilderExtensionOption():
    """
    Spline extension options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No extension"
       "ByValue", "Extend by value"
       "ByPoint", "Extend up to a point"
    """
    NotSet = 0  # CurveExtensionBuilderExtensionOptionMemberType
    ByValue = 1  # CurveExtensionBuilderExtensionOptionMemberType
    ByPoint = 2  # CurveExtensionBuilderExtensionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveExtensionBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Spline extension builder class.  
    
    This class allows natural extension or trimming of a b-spline cuve. 
    
    .. versionadded:: NX8.5.0
    """
    
    class ExtensionOption():
        """
        Spline extension options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No extension"
           "ByValue", "Extend by value"
           "ByPoint", "Extend up to a point"
        """
        NotSet = 0  # CurveExtensionBuilderExtensionOptionMemberType
        ByValue = 1  # CurveExtensionBuilderExtensionOptionMemberType
        ByPoint = 2  # CurveExtensionBuilderExtensionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndExtensionOption: CurveExtensionBuilderExtensionOption = ...
    """
    Returns or sets  the extension options 
    
    <hr>
    
    Getter Method
    
    Signature ``EndExtensionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndExtensionOption`` 
    
    :param extensionOption: 
    :type extensionOption: :py:class:`NXOpen.GeometricUtilities.CurveExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: features_modeling ("FEATURES MODELING")
    """
    EndPoint: NXOpen.Point = ...
    """
    Returns or sets  the point up to which end is extended 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndPoint`` 
    
    :param endPoint: 
    :type endPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: features_modeling ("FEATURES MODELING")
    """
    EndValue: NXOpen.Expression = ...
    """
    Returns  the end value 
    
    <hr>
    
    Getter Method
    
    Signature ``EndValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    IsSymmetric: bool = ...
    """
    Returns or sets  the flag indicating if extension is symmetry.  
    
    Symmetric extension follows start extension values 
    
    <hr>
    
    Getter Method
    
    Signature ``IsSymmetric`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsSymmetric`` 
    
    :param isSymmetric: 
    :type isSymmetric: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: features_modeling ("FEATURES MODELING")
    """
    StartExtensionOption: CurveExtensionBuilderExtensionOption = ...
    """
    Returns or sets  the extension options 
    
    <hr>
    
    Getter Method
    
    Signature ``StartExtensionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartExtensionOption`` 
    
    :param extensionOption: 
    :type extensionOption: :py:class:`NXOpen.GeometricUtilities.CurveExtensionBuilderExtensionOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: features_modeling ("FEATURES MODELING")
    """
    StartPoint: NXOpen.Point = ...
    """
    Returns or sets  the point up to which start is extended 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPoint`` 
    
    :param startPoint: 
    :type startPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: features_modeling ("FEATURES MODELING")
    """
    StartValue: NXOpen.Expression = ...
    """
    Returns  the start value 
    
    <hr>
    
    Getter Method
    
    Signature ``StartValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: CurveExtensionBuilder = ...  # unknown typename


class FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FtmFixedCurvesBuilderFixedCurvesContinuityType():
    """
    Fixed curves continuity type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "G0", "G0 position"
       "G1", "G1 Tangent"
       "G2", "G2 Curvature"
       "G3", "G3 Continuity"
       "G4", "G4 Continuity"
    """
    G0 = 0  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
    G1 = 1  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
    G2 = 2  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
    G3 = 3  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
    G4 = 4  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FtmFixedCurvesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.GeometricUtilities.OmnicadManager.CreateFtmFixedCurvesBuilder`
    
    Default values.
    
    ======================  =====
    Property                Value
    ======================  =====
    FixedCurvesContinuity   G0 
    ======================  =====
    
    .. versionadded:: NX10.0.0
    """
    
    class FixedCurvesContinuityType():
        """
        Fixed curves continuity type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "G0", "G0 position"
           "G1", "G1 Tangent"
           "G2", "G2 Curvature"
           "G3", "G3 Continuity"
           "G4", "G4 Continuity"
        """
        G0 = 0  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
        G1 = 1  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
        G2 = 2  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
        G3 = 3  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
        G4 = 4  # FtmFixedCurvesBuilderFixedCurvesContinuityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateContinuityOnClassAChange(self, classAOption: bool) -> None:
        """
        Update continuity when Class A option changes  
        
        Signature ``UpdateContinuityOnClassAChange(classAOption)`` 
        
        :param classAOption: 
        :type classAOption: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    FixedCurves: NXOpen.Section = ...
    """
    Returns  the fixed curves that define the fixed constraints on the product shape 
    
    <hr>
    
    Getter Method
    
    Signature ``FixedCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    FixedCurvesContinuity: FtmFixedCurvesBuilderFixedCurvesContinuityType = ...
    """
    Returns or sets  the continuity option for the fixed curves used in the transformation or morphing calculations  
    
    <hr>
    
    Getter Method
    
    Signature ``FixedCurvesContinuity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilderFixedCurvesContinuityType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FixedCurvesContinuity`` 
    
    :param fixedCurvesContinuity: 
    :type fixedCurvesContinuity: :py:class:`NXOpen.GeometricUtilities.FtmFixedCurvesBuilderFixedCurvesContinuityType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: FtmFixedCurvesBuilder = ...  # unknown typename


class TangentMagnitudeBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    This class provides ability to specify the start and end
    tangent magnitude values.  
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndTangentMagnitude: NXOpen.Expression = ...
    """
    Returns  the end tangent magnitude 
    
    <hr>
    
    Getter Method
    
    Signature ``EndTangentMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StartTangentMagnitude: NXOpen.Expression = ...
    """
    Returns  the start tangent magnitude 
    
    <hr>
    
    Getter Method
    
    Signature ``StartTangentMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: TangentMagnitudeBuilder = ...  # unknown typename


class CurveOptionsInputCurveMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveOptionsInputCurve():
    """
    Represents the input curve options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Retain", "Retains the original input curve and creates the new output curve"
       "Blank", "Blanks the original input curve and creates the new output curve"
       "Delete", "Deletes the original input curve and creates the new output curve"
       "Replace", "Replaces the original input curve with the new output curve"
    """
    Retain = 0  # CurveOptionsInputCurveMemberType
    Blank = 1  # CurveOptionsInputCurveMemberType
    Delete = 2  # CurveOptionsInputCurveMemberType
    Replace = 3  # CurveOptionsInputCurveMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveOptions(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the curve options data
    
    .. versionadded:: NX5.0.0
    """
    
    class InputCurve():
        """
        Represents the input curve options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Retain", "Retains the original input curve and creates the new output curve"
           "Blank", "Blanks the original input curve and creates the new output curve"
           "Delete", "Deletes the original input curve and creates the new output curve"
           "Replace", "Replaces the original input curve with the new output curve"
        """
        Retain = 0  # CurveOptionsInputCurveMemberType
        Blank = 1  # CurveOptionsInputCurveMemberType
        Delete = 2  # CurveOptionsInputCurveMemberType
        Replace = 3  # CurveOptionsInputCurveMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Associative: bool = ...
    """
    Returns or sets  the associativity option 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns:  associativity  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative:  associativity  
    :type associative: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    InputCurveOption: CurveOptionsInputCurve = ...
    """
    Returns or sets  the curve options 
    
    <hr>
    
    Getter Method
    
    Signature ``InputCurveOption`` 
    
    :returns:  curve options  
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveOptionsInputCurve` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    
    <hr>
    
    Setter Method
    
    Signature ``InputCurveOption`` 
    
    :param inputCurveOption:  curve options  
    :type inputCurveOption: :py:class:`NXOpen.GeometricUtilities.CurveOptionsInputCurve` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING")
    """
    Null: CurveOptions = ...  # unknown typename


class SurfaceRangeBuilderAnchorPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SurfaceRangeBuilderAnchorPositionType():
    """
    Represents the anchor position type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Center", "Anchor at the center of the surface"
       "Vertex1", "Anchor at the first corner of the surface"
       "Vertex2", "Anchor at the second corner of the surface"
       "Vertex3", "Anchor at the third corner of the surface"
       "Vertex4", "Anchor at the fourth corner of the surface"
    """
    Center = 0  # SurfaceRangeBuilderAnchorPositionTypeMemberType
    Vertex1 = 1  # SurfaceRangeBuilderAnchorPositionTypeMemberType
    Vertex2 = 2  # SurfaceRangeBuilderAnchorPositionTypeMemberType
    Vertex3 = 3  # SurfaceRangeBuilderAnchorPositionTypeMemberType
    Vertex4 = 4  # SurfaceRangeBuilderAnchorPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SurfaceRangeBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents the surface range and anchor builder   
    
    .. versionadded:: NX6.0.0
    """
    
    class AnchorPositionType():
        """
        Represents the anchor position type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Center", "Anchor at the center of the surface"
           "Vertex1", "Anchor at the first corner of the surface"
           "Vertex2", "Anchor at the second corner of the surface"
           "Vertex3", "Anchor at the third corner of the surface"
           "Vertex4", "Anchor at the fourth corner of the surface"
        """
        Center = 0  # SurfaceRangeBuilderAnchorPositionTypeMemberType
        Vertex1 = 1  # SurfaceRangeBuilderAnchorPositionTypeMemberType
        Vertex2 = 2  # SurfaceRangeBuilderAnchorPositionTypeMemberType
        Vertex3 = 3  # SurfaceRangeBuilderAnchorPositionTypeMemberType
        Vertex4 = 4  # SurfaceRangeBuilderAnchorPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnchorPosition: SurfaceRangeBuilderAnchorPositionType = ...
    """
    Returns or sets  the anchor position 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SurfaceRangeBuilderAnchorPositionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPosition`` 
    
    :param anchorPosition: 
    :type anchorPosition: :py:class:`NXOpen.GeometricUtilities.SurfaceRangeBuilderAnchorPositionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UEnd: OnPathDimensionBuilder = ...
    """
    Returns  the u end 
    
    <hr>
    
    Getter Method
    
    Signature ``UEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UStart: OnPathDimensionBuilder = ...
    """
    Returns  the u start 
    
    <hr>
    
    Getter Method
    
    Signature ``UStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    VEnd: OnPathDimensionBuilder = ...
    """
    Returns  the v end 
    
    <hr>
    
    Getter Method
    
    Signature ``VEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    VStart: OnPathDimensionBuilder = ...
    """
    Returns  the v start 
    
    <hr>
    
    Getter Method
    
    Signature ``VStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: SurfaceRangeBuilder = ...  # unknown typename


class PartModuleReferencesBuilder(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.PartModuleReferencesBuilder`   
    
    .. versionadded:: NX8.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ExpressionList: NXOpen.SelectExpressionList = ...
    """
    Returns  the expressions for part module input/output 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionList`` 
    
    :returns: list of expressions  
    :rtype: :py:class:`NXOpen.SelectExpressionList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    GeometryList: SelectionListList = ...
    """
    Returns  the geometric references for part module input/output 
    
    <hr>
    
    Getter Method
    
    Signature ``GeometryList`` 
    
    :returns: list of geometries  
    :rtype: :py:class:`NXOpen.GeometricUtilities.SelectionListList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PartModuleReferencesBuilder = ...  # unknown typename


class SelectionList(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.SelectionList`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateSelectionList`
    
    .. versionadded:: NX8.0.0
    """
    SelectObjectList: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the list of geometries  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectObjectList`` 
    
    :returns: list of geometries  
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SelectionList = ...  # unknown typename


class BetweenLocationsData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.BetweenLocationsData`
    
    .. versionadded:: NX5.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    FromLocation: GeometryLocationData = ...
    """
    Returns  the from location 
    
    <hr>
    
    Getter Method
    
    Signature ``FromLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.GeometryLocationData` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ToLocationList: NXOpen.TaggedObjectList = ...
    """
    Returns  the to location list 
    
    <hr>
    
    Getter Method
    
    Signature ``ToLocationList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: BetweenLocationsData = ...  # unknown typename


class MiddleHoleData(NXOpen.TaggedObject, IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.GeometricUtilities.MiddleHoleData`   
    
    .. versionadded:: NX5.0.2
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BooleanOperation: BooleanOperation = ...
    """
    Returns  the boolean operation 
    
    <hr>
    
    Getter Method
    
    Signature ``BooleanOperation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanOperation` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    EndChamferAngle: NXOpen.Expression = ...
    """
    Returns  the end chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``EndChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    EndChamferEnabled: bool = ...
    """
    Returns or sets  the end chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``EndChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndChamferEnabled`` 
    
    :param endChamferEnabled: 
    :type endChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    EndChamferOffset: NXOpen.Expression = ...
    """
    Returns  the end chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``EndChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    FitOption: str = ...
    """
    Returns or sets  the fit option
    
    <hr>
    
    Getter Method
    
    Signature ``FitOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FitOption`` 
    
    :param fitOption: 
    :type fitOption: str 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    HoleDiameter: NXOpen.Expression = ...
    """
    Returns  the hole diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    MatchDimOfStartHole: bool = ...
    """
    Returns or sets  the match dim of start hole 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchDimOfStartHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MatchDimOfStartHole`` 
    
    :param matchDimOfStartHole: 
    :type matchDimOfStartHole: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartChamferAngle: NXOpen.Expression = ...
    """
    Returns  the start chamfer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``StartChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    StartChamferEnabled: bool = ...
    """
    Returns or sets  the start chamfer enabled 
    
    <hr>
    
    Getter Method
    
    Signature ``StartChamferEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartChamferEnabled`` 
    
    :param startChamferEnabled: 
    :type startChamferEnabled: bool 
    
    .. versionadded:: NX5.0.2
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    StartChamferOffset: NXOpen.Expression = ...
    """
    Returns  the start chamfer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``StartChamferOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.2
    
    License requirements: None.
    """
    Null: MiddleHoleData = ...  # unknown typename


