# module 'NXOpen.Routing'
#
# Automatically generated 2025-06-09T14:38:47.335556
#
"""Default documentation for NXOpen.Routing."""

import typing

import NXOpen
import NXOpen.Assemblies
import NXOpen.Features
import NXOpen.Formboard
import NXOpen.GeometricUtilities
import NXOpen.Positioning
import NXOpen.Routing.Electrical



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class StockColorBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.StockColorBuilder`.  
    
    This is used 
    to assign color to the face of stocks having rectangular cross section.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockColorBuilder`
    
    .. versionadded:: NX7.5.0
    """
    RouteStockPickColor: NXOpen.NXColor = ...
    """
    Returns or sets  the route stock pick color 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteStockPickColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``RouteStockPickColor`` 
    
    :param routeStockPickColor: 
    :type routeStockPickColor: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    RouteStockSelectStockFace: NXOpen.ScCollector = ...
    """
    Returns  the route stock select stock face 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteStockSelectStockFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: StockColorBuilder = ...  # unknown typename


class RouteLogicalAssociationCollection(NXOpen.TaggedObjectCollection):
    """
    Collection class for RouteLogicalAssociation object   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLogicalAssociation(self, name: str, control: NXOpen.NXObject, targets: 'list[NXOpen.NXObject]', includeStocks: bool) -> RouteLogicalAssociation:
        """
        Creates a :py:class:`NXOpen.Routing.RouteLogicalAssociation`  
        
        Signature ``CreateLogicalAssociation(name, control, targets, includeStocks)`` 
        
        :param name:  Name of Logical Association  
        :type name: str 
        :param control:  Control object  
        :type control: :py:class:`NXOpen.NXObject` 
        :param targets:  Targets for Logical Association  
        :type targets: list of :py:class:`NXOpen.NXObject` 
        :param includeStocks:  Include all stocks in the logical association  
        :type includeStocks: bool 
        :returns:  Logical Association  
        :rtype: :py:class:`NXOpen.Routing.RouteLogicalAssociation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def PerformLogicalAssociation(self, logicalAssociations: 'list[RouteLogicalAssociation]') -> None:
        """
        Performs the blanking/suppressing of objects in :py:class:`NXOpen.Routing.RouteLogicalAssociation`.  
        
        Signature ``PerformLogicalAssociation(logicalAssociations)`` 
        
        :param logicalAssociations: 
        :type logicalAssociations: list of :py:class:`NXOpen.Routing.RouteLogicalAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def GetLogicalAssociations(self) -> 'list[RouteLogicalAssociation]':
        """
        Returns :py:class:`NXOpen.Routing.RouteLogicalAssociation` of this part.  
        
        Signature ``GetLogicalAssociations()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.RouteLogicalAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    


class RoutingBulkReplacementBuilderRetainReasonTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingBulkReplacementBuilderRetainReasonType():
    """
    Defines the reason why the object has been retained. Unspecified, explicit, block unify, non-classification, and equipment  
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unspecified", "Retain reason is not specified"
       "Explicit", "Retain reason is the user explicitly marked it retain"
       "BlockUnify", "Retain reason is because of the presence of the NX_BLOCK_UNIFY attribute"
       "NonClassification", "Retain reason is the object did not originate from classification and is not supported"
       "Equipment", "Retain reason is the object is equipment and is not supported"
    """
    Unspecified = 0  # RoutingBulkReplacementBuilderRetainReasonTypeMemberType
    Explicit = 1  # RoutingBulkReplacementBuilderRetainReasonTypeMemberType
    BlockUnify = 2  # RoutingBulkReplacementBuilderRetainReasonTypeMemberType
    NonClassification = 3  # RoutingBulkReplacementBuilderRetainReasonTypeMemberType
    Equipment = 4  # RoutingBulkReplacementBuilderRetainReasonTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinearPathSettings(NXOpen.Builder):
    """
    Helper object used the by :py:class:`Routing.LinearPathBuilder` builder.  
    
    Determines various settings to be applied when the path is created.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateLinearPathSettings`
    
    Default values.
    
    =====================  =====
    Property               Value
    =====================  =====
    LockToSelectedObject   True 
    =====================  =====
    
    .. versionadded:: NX5.0.0
    """
    AllowCutElbow: bool = ...
    """
    Returns or sets   a flag indicating whether or not to allow cut elbow placement 
    
    <hr>
    
    Getter Method
    
    Signature ``AllowCutElbow`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_pipetube ("Routing Piping and Tubing")
    
    <hr>
    
    Setter Method
    
    Signature ``AllowCutElbow`` 
    
    :param assign: 
    :type assign: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_pipetube ("Routing Piping and Tubing")
    """
    AssignDefaultCorner: bool = ...
    """
    Returns or sets  the preference to assign the current default corner to new segments.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssignDefaultCorner`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AssignDefaultCorner`` 
    
    :param assign: 
    :type assign: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    AssignDefaultElbow: bool = ...
    """
    Returns or sets  the preference to find and assign a default elbow to new segments.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssignDefaultElbow`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AssignDefaultElbow`` 
    
    :param assign: 
    :type assign: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    LockAngle: bool = ...
    """
    Returns or sets  the preference to determine if the angle between segments should
    be constrained.  
    
    <hr>
    
    Getter Method
    
    Signature ``LockAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``LockAngle`` 
    
    :param lock: 
    :type lock: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    LockLength: bool = ...
    """
    Returns or sets  the preference to determine if the length of new segments should
    be constrained.  
    
    <hr>
    
    Getter Method
    
    Signature ``LockLength`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``LockLength`` 
    
    :param lock: 
    :type lock: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    LockToSelectedObject: bool = ...
    """
    Returns or sets  the preference to determine if the new segments and control points
    should be constrained to the objects selected by the user.  
    
    <hr>
    
    Getter Method
    
    Signature ``LockToSelectedObject`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``LockToSelectedObject`` 
    
    :param lock: 
    :type lock: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: LinearPathSettings = ...  # unknown typename


class PlatformCreatorBuilderReferenceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlatformCreatorBuilderReferenceType():
    """
    The grate orientation symbol reference 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", " - "
       "Vertical", " - "
    """
    Horizontal = 0  # PlatformCreatorBuilderReferenceTypeMemberType
    Vertical = 1  # PlatformCreatorBuilderReferenceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlatformCreatorBuilder(NXOpen.Builder):
    """
    Builder for creating platform.  
    
    Create platform: Takes platform outer boundaries sketch, platform plate boundaries sketch, platform plates,
    stocks for external and internal frames. Grate orientation symbol display is optional.
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreatePlatformCreatorBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class ReferenceType():
        """
        The grate orientation symbol reference 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Horizontal", " - "
           "Vertical", " - "
        """
        Horizontal = 0  # PlatformCreatorBuilderReferenceTypeMemberType
        Vertical = 1  # PlatformCreatorBuilderReferenceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SpecifyPlate(self) -> None:
        """
        The specify plate button callback 
        
        Signature ``SpecifyPlate()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def GetPlatePart(self) -> CharacteristicList:
        """
        Gets the plate part which data is used for platform plate  
        
        Signature ``GetPlatePart()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def SetPlatePart(self, platePart: CharacteristicList) -> None:
        """
        Sets the plate part which data is used for plaform plate
        
        Signature ``SetPlatePart(platePart)`` 
        
        :param platePart: 
        :type platePart: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def GetPlateAppliedCharx(self) -> CharacteristicList:
        """
        Gets the plate charx which is used for platform plate 
        
        Signature ``GetPlateAppliedCharx()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def SetPlateAppliedCharx(self, appliedCharx: CharacteristicList) -> None:
        """
        Sets the  plate charx which is used for platform plate
        
        Signature ``SetPlateAppliedCharx(appliedCharx)`` 
        
        :param appliedCharx: 
        :type appliedCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    ExternalFrameAnchorName: str = ...
    """
    Returns or sets  the external frame stock anchor 
    
    <hr>
    
    Getter Method
    
    Signature ``ExternalFrameAnchorName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``ExternalFrameAnchorName`` 
    
    :param anchorName: 
    :type anchorName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    ExternalStockSettings: PathStockBuilder = ...
    """
    Returns  the external frame stock settings for stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExternalStockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    GrateOrientationReference: PlatformCreatorBuilderReferenceType = ...
    """
    Returns or sets  the grate orientation reference 
    
    <hr>
    
    Getter Method
    
    Signature ``GrateOrientationReference`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PlatformCreatorBuilderReferenceType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``GrateOrientationReference`` 
    
    :param grateOrientationReference: 
    :type grateOrientationReference: :py:class:`NXOpen.Routing.PlatformCreatorBuilderReferenceType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    GrateOrientationSymbolDisplay: bool = ...
    """
    Returns or sets  the grate orientation symbol display 
    
    <hr>
    
    Getter Method
    
    Signature ``GrateOrientationSymbolDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``GrateOrientationSymbolDisplay`` 
    
    :param grateOrientationSymbolDisplay: 
    :type grateOrientationSymbolDisplay: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    GrateOrientationSymbolRefSelection: NXOpen.SelectNXObject = ...
    """
    Returns  the grate orientation symbol ref selection 
    
    <hr>
    
    Getter Method
    
    Signature ``GrateOrientationSymbolRefSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    InternalFrameAnchorName: str = ...
    """
    Returns or sets  the internal frame stock anchor 
    
    <hr>
    
    Getter Method
    
    Signature ``InternalFrameAnchorName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``InternalFrameAnchorName`` 
    
    :param anchorName: 
    :type anchorName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    InternalStockSettings: PathStockBuilder = ...
    """
    Returns  the internal stock settings for stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``InternalStockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    PlateBoundariesSelection: NXOpen.Section = ...
    """
    Returns  the platform part boundaries section 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateBoundariesSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    SelectOuterBoundary: NXOpen.Section = ...
    """
    Returns  the platform outer boundary section 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectOuterBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    ThickenDirection: bool = ...
    """
    Returns or sets  the thicken direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ThickenDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``ThickenDirection`` 
    
    :param thickenDirection: 
    :type thickenDirection: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    UseSameStock: bool = ...
    """
    Returns or sets  the internal frame use same stock option 
    
    <hr>
    
    Getter Method
    
    Signature ``UseSameStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``UseSameStock`` 
    
    :param internalFrameFlipStock: 
    :type internalFrameFlipStock: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    Null: PlatformCreatorBuilder = ...  # unknown typename


class MergeStocksBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.MergeStocksBuilder`
    Builder for merging routing stocks ( including space reservation stocks ).  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateMergeStocksBuilder`
    
    .. versionadded:: NX10.0.0
    """
    CandidateStockCollector: RouteObjectCollector = ...
    """
    Returns  a collector object that holds candidate stocks to be merged with target stock.  
    
    <hr>
    
    Getter Method
    
    Signature ``CandidateStockCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    TargetStockCollector: RouteObjectCollector = ...
    """
    Returns a collector object that holds target stock for merge operation.  
    
    Candidate stocks will be merged with this stock , if possible 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetStockCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: MergeStocksBuilder = ...  # unknown typename


class DesignRuleViolationBlankOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DesignRuleViolationBlankOption():
    """
    Design Rule Violation Location Object Blank Option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Blank", " - "
       "Unblank", " - "
    """
    Blank = 0  # DesignRuleViolationBlankOptionMemberType
    Unblank = 1  # DesignRuleViolationBlankOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolation(NXOpen.NXObject):
    """
    Represents :py:class:`NXOpen.Routing.DesignRuleViolation` object   
    
    Design Rule Violation object is created automatically during design rule check
    
    .. versionadded:: NX4.0.2
    """
    
    class BlankOption():
        """
        Design Rule Violation Location Object Blank Option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Blank", " - "
           "Unblank", " - "
        """
        Blank = 0  # DesignRuleViolationBlankOptionMemberType
        Unblank = 1  # DesignRuleViolationBlankOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Get the array of objects in violation  
        
        Signature ``GetObjects()`` 
        
        :returns:  Caller frees the array  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetObjects(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the array of objects in violation 
        
        Signature ``SetObjects(objects)`` 
        
        :param objects:  Caller frees the array  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddObjects(self, objects: 'list[DesignRuleViolation]') -> None:
        """
        Add an object in violation to the violation 
        
        Signature ``AddObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetViolationOverride(self, user: str, reason: str, timestamp: int) -> None:
        """
        Sets the violation override 
        
        Signature ``SetViolationOverride(user, reason, timestamp)`` 
        
        :param user: 
        :type user: str 
        :param reason: 
        :type reason: str 
        :param timestamp: 
        :type timestamp: int 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveViolationOverride(self) -> None:
        """
        Removes violation override from given violation object.  
        
        Signature ``RemoveViolationOverride()`` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def IsRuleOverridden(self) -> bool:
        """
        Violation is overridden or not is inquired  
        
        Signature ``IsRuleOverridden()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteRuleOverride(self, deleteObject: DesignRuleOverride) -> None:
        """
        Override object will be deleted 
        
        Signature ``DeleteRuleOverride(deleteObject)`` 
        
        :param deleteObject: 
        :type deleteObject: :py:class:`NXOpen.Routing.DesignRuleOverride` 
        
        .. versionadded:: NX4.0.3
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetLocations(self, violationLocations: 'list[DesignRuleViolationLocation]') -> None:
        """
        Signature ``SetLocations(violationLocations)`` 
        
        :param violationLocations: 
        :type violationLocations: list of :py:class:`NXOpen.Routing.DesignRuleViolationLocation` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLocations(self) -> 'list[DesignRuleViolationLocation]':
        """
        This will give all violation location objects stored in calling violation object.  
        
        Signature ``GetLocations()`` 
        
        :returns:  Array of :py:class:`NXOpen.Routing.DesignRuleViolationLocation` object.  
        :rtype: list of :py:class:`NXOpen.Routing.DesignRuleViolationLocation` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddViolationLocations(self, locationObjects: 'list[DesignRuleViolationLocation]') -> None:
        """
        This will add given number of violation location objects.  
        
        Signature ``AddViolationLocations(locationObjects)`` 
        
        :param locationObjects:  Array of violation locations to be added.  
        :type locationObjects: list of :py:class:`NXOpen.Routing.DesignRuleViolationLocation` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def BlankLocationObjectsOfViolation(self, blankOption: DesignRuleViolationBlankOption) -> None:
        """
        This function will blank location objects of given violation.  
        
        Signature ``BlankLocationObjectsOfViolation(blankOption)`` 
        
        :param blankOption: 
        :type blankOption: :py:class:`NXOpen.Routing.DesignRuleViolationBlankOption` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetViolationLocation(self) -> tuple:
        """
        This will return violation location object stored at given postion of array.  
        
        If there is no object at the given position, it will give appropriate message.
        and return None  
        
        Signature ``GetViolationLocation()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (locationObject, arrayPosition). locationObject is a :py:class:`NXOpen.Routing.DesignRuleViolationLocation`.   ViolationLocation object at given array position. arrayPosition is a int. 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX8.0.3
           Use :py:meth:`NXOpen.Routing.DesignRuleViolation.GetLocations` instead.
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetViolationLocation(self, arrayPosition: int, locationObject: DesignRuleViolationLocation) -> None:
        """
        This will set violation location object at given postion of array.  
        
        If there is already an object at the given position, it will delete that
        object and set with new one. 
        
        Signature ``SetViolationLocation(arrayPosition, locationObject)`` 
        
        :param arrayPosition: 
        :type arrayPosition: int 
        :param locationObject:  ViolationLocation object to be set at given array position.  
        :type locationObject: :py:class:`NXOpen.Routing.DesignRuleViolationLocation` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX8.0.3
           Use :py:meth:`NXOpen.Routing.DesignRuleViolation.AddViolationLocations` instead.
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    LongDescription: str = ...
    """
    Returns or sets  the long description of the design rule violation is returned 
    
    <hr>
    
    Getter Method
    
    Signature ``LongDescription`` 
    
    :returns:  Violation Description  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``LongDescription`` 
    
    :param longDescription: 
    :type longDescription: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Override: DesignRuleOverride = ...
    """
    Returns or sets  the override object for the violation is inquired 
    
    <hr>
    
    Getter Method
    
    Signature ``Override`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DesignRuleOverride` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Override`` 
    
    :param overrideTag: 
    :type overrideTag: :py:class:`NXOpen.Routing.DesignRuleOverride` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    ShortDescription: str = ...
    """
    Returns or sets  the short description of the design rule violation is returned 
    
    <hr>
    
    Getter Method
    
    Signature ``ShortDescription`` 
    
    :returns:  Violation Description  
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ShortDescription`` 
    
    :param shortDescription: 
    :type shortDescription: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    TimeStamp: int = ...
    """
    Returns or sets  the date/time stamp of the violation is inquired 
    
    <hr>
    
    Getter Method
    
    Signature ``TimeStamp`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``TimeStamp`` 
    
    :param timeStamp: 
    :type timeStamp: int 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DesignRuleViolation = ...  # unknown typename


class BendReportManagerSegmentInformation_Struct():
    """
    Used by all the reports to hold the information of the segments under port,
    solid body, segment, stock, stock component, or feature representing the piece of stock.  
    
    Generated by calling :py:meth:`Routing.BendReportManager.GetSegmentInformation`.
    .
    Constructor: 
    NXOpen.Routing.BendReportManager.SegmentInformation()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Stock: Stock = ...
    """
    :py:class:`Routing.Stock` 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Routing.Stock`
    """
    Segment: NXOpen.Curve = ...
    """
    The segment itself.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Curve`
    """
    IsStraight: bool = ...
    """
    True if the :py:class:`Routing.ISegment` is straight.  
    
    <hr>
    
    Field Value
    Type:bool
    """
    Length: float = ...
    """
    Length of :py:class:`Routing.ISegment` 
    <hr>
    
    Field Value
    Type:float
    """
    StartControlPoint: ControlPoint = ...
    """
    Start :py:class:`Routing.ControlPoint`.  
    
    Do not use for S-Bends and bends greater than or
    equal to 180 degrees. 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Routing.ControlPoint`
    """
    EndControlPoint: ControlPoint = ...
    """
    End :py:class:`Routing.ControlPoint`.  
    
    Do not use for S-Bends and bends greater than or
    equal to 180 degrees. 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Routing.ControlPoint`
    """
    BendCorner: BendCorner = ...
    """
    :py:class:`Routing.BendCorner` 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Routing.BendCorner`
    """
    BendRadius: float = ...
    """
    Radius of the bend 
    <hr>
    
    Field Value
    Type:float
    """
    BendPosition: NXOpen.Point3d = ...
    """
    Position of the bend rcp 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Point3d`
    """
    StartNormal: NXOpen.Vector3d = ...
    """
    Normal of curve at start points 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Vector3d`
    """
    EndNormal: NXOpen.Vector3d = ...
    """
    Normal of curve at end points 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Vector3d`
    """
    StartControlPointPosition: NXOpen.Point3d = ...
    """
    Location of start :py:class:`Routing.ControlPoint`
    in ABS coordinates, use this instead of the start
    :py:class:`Routing.ControlPoint` for S-Bends
    and bends greater than or equal to 180 degrees.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Point3d`
    """
    EndControlPointPosition: NXOpen.Point3d = ...
    """
    Location of end :py:class:`Routing.ControlPoint`
    in ABS coordinates, use this instead of the end
    :py:class:`Routing.ControlPoint` for S-Bends
    and bends greater than or equal to 180 degrees.  
    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Point3d`
    """


class DuctReinforcement(NXOpen.Features.BodyFeature):
    """
    Represents a Duct Reinforcement feature used for creating/editing reinforcements 
    on the inside or outside of rectangular HVAC ducts.  
    
    Use the :py:class:`NXOpen.Routing.DuctReinforcementBuilder` class to create a Duct Reinforcement feature. 
    Creator not available in KF because transient objects are not supported.
    
    .. versionadded:: NX8.5.2
    """
    Null: DuctReinforcement = ...  # unknown typename


class PlatformFeature(NXOpen.Features.BodyFeature):
    """
    Represents a Platform feature.  
    
    Use the :py:class:`NXOpen.Routing.PlatformCreatorBuilder` class to create a Platform feature. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Routing.PlatformCreatorBuilder`
    
    .. versionadded:: NX8.5.1
    """
    Null: PlatformFeature = ...  # unknown typename


class AddFontBuilder(NXOpen.Builder):
    """
    Builder for creating an add font user interface dialogue   
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.AddFontBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def SetBuilderData(self, selLine: NXOpen.Line, lineCoords: 'list[float]', fontName: str, fontScale: float, fontLayer: int) -> None:
        """
        Takes selected line and information on the font selected which will be used to build the font 
        
        Signature ``SetBuilderData(selLine, lineCoords, fontName, fontScale, fontLayer)`` 
        
        :param selLine: 
        :type selLine: :py:class:`NXOpen.Line` 
        :param lineCoords:  Line Coordinates for font element lines.                                                                                                        formatted as x11,y11,x12,y12,x21,y21,x22,y22,x31,...                                                                                                        where first subscript = line number; second subscript = start pt(1) or end pt(2)                                                                                                        example: y32 = y coordinate of the third line's end point  
        :type lineCoords: list of float 
        :param fontName:  Font style chosen, eg "dashed"  
        :type fontName: str 
        :param fontScale:  Length dimension of font element measured along selected line; font element length = 2.0 * fontScale  
        :type fontScale: float 
        :param fontLayer:  1,2,..255 are valid layers; -1 indicates font to be created in same layer as selLine  
        :type fontLayer: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: AddFontBuilder = ...  # unknown typename


class StockDataRefreshBuilderRefreshStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockDataRefreshBuilderRefreshStatus():
    """
    The stock data refresh status   
    
    .. versionadded:: NX12.0.0
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ok", "Refresh successful"
       "StockDataTagInvalid", "NULL stock definition encountered"
       "StockDataMissingSearchAttributes", "No attributes used for searching library found"
       "StockPartNotFoundInReuseLibrary", "Cannot find stock under the stock or overstock root nodes in the Reuse Library"
       "MultipleStocksFoundInReuseLibrary", "More than one stock found - cannot resolve ambiguity"
       "StockPartNotRequired", "Stock part name not found indicating there is no stock part"
       "StockPartNotFoundForLoading", "Problem loading the stock part"
       "CannotFullyLoadStockPart", "Unable to fully load the stock part"
       "StockDataNotFoundInLoadedPart", "Unable to find a stock definition in the loaded stock part"
       "StockConversionError", "Error converting units of loaded stock part to that of stock definition being refreshed"
       "ErrorRefreshUndone", "Error encountered after partial update of stock definition; UNDO was performed to return to original state"
    """
    Ok = 0  # StockDataRefreshBuilderRefreshStatusMemberType
    StockDataTagInvalid = 1  # StockDataRefreshBuilderRefreshStatusMemberType
    StockDataMissingSearchAttributes = 2  # StockDataRefreshBuilderRefreshStatusMemberType
    StockPartNotFoundInReuseLibrary = 3  # StockDataRefreshBuilderRefreshStatusMemberType
    MultipleStocksFoundInReuseLibrary = 4  # StockDataRefreshBuilderRefreshStatusMemberType
    StockPartNotRequired = 5  # StockDataRefreshBuilderRefreshStatusMemberType
    StockPartNotFoundForLoading = 6  # StockDataRefreshBuilderRefreshStatusMemberType
    CannotFullyLoadStockPart = 7  # StockDataRefreshBuilderRefreshStatusMemberType
    StockDataNotFoundInLoadedPart = 8  # StockDataRefreshBuilderRefreshStatusMemberType
    StockConversionError = 9  # StockDataRefreshBuilderRefreshStatusMemberType
    ErrorRefreshUndone = 10  # StockDataRefreshBuilderRefreshStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockDataRefreshBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.StockDataRefreshBuilder`
    Builder for updating/reloading routing stock data definitions.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockDataRefreshBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class RefreshStatus():
        """
        The stock data refresh status   
        
        .. versionadded:: NX12.0.0
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ok", "Refresh successful"
           "StockDataTagInvalid", "NULL stock definition encountered"
           "StockDataMissingSearchAttributes", "No attributes used for searching library found"
           "StockPartNotFoundInReuseLibrary", "Cannot find stock under the stock or overstock root nodes in the Reuse Library"
           "MultipleStocksFoundInReuseLibrary", "More than one stock found - cannot resolve ambiguity"
           "StockPartNotRequired", "Stock part name not found indicating there is no stock part"
           "StockPartNotFoundForLoading", "Problem loading the stock part"
           "CannotFullyLoadStockPart", "Unable to fully load the stock part"
           "StockDataNotFoundInLoadedPart", "Unable to find a stock definition in the loaded stock part"
           "StockConversionError", "Error converting units of loaded stock part to that of stock definition being refreshed"
           "ErrorRefreshUndone", "Error encountered after partial update of stock definition; UNDO was performed to return to original state"
        """
        Ok = 0  # StockDataRefreshBuilderRefreshStatusMemberType
        StockDataTagInvalid = 1  # StockDataRefreshBuilderRefreshStatusMemberType
        StockDataMissingSearchAttributes = 2  # StockDataRefreshBuilderRefreshStatusMemberType
        StockPartNotFoundInReuseLibrary = 3  # StockDataRefreshBuilderRefreshStatusMemberType
        MultipleStocksFoundInReuseLibrary = 4  # StockDataRefreshBuilderRefreshStatusMemberType
        StockPartNotRequired = 5  # StockDataRefreshBuilderRefreshStatusMemberType
        StockPartNotFoundForLoading = 6  # StockDataRefreshBuilderRefreshStatusMemberType
        CannotFullyLoadStockPart = 7  # StockDataRefreshBuilderRefreshStatusMemberType
        StockDataNotFoundInLoadedPart = 8  # StockDataRefreshBuilderRefreshStatusMemberType
        StockConversionError = 9  # StockDataRefreshBuilderRefreshStatusMemberType
        ErrorRefreshUndone = 10  # StockDataRefreshBuilderRefreshStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def RefreshStockData(self, stockData: StockData) -> StockDataRefreshBuilderRefreshStatus:
        """
        Update the Stock Data Definition
        Requires an update to be applied after call.  
        
        Signature ``RefreshStockData(stockData)`` 
        
        :param stockData: 
        :type stockData: :py:class:`NXOpen.Routing.StockData` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockDataRefreshBuilderRefreshStatus` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Status: StockDataRefreshBuilderRefreshStatus = ...
    """
    Returns  
    
    <hr>
    
    Getter Method
    
    Signature ``Status`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockDataRefreshBuilderRefreshStatus` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockData: StockData = ...
    """
    Returns or sets  
    
    <hr>
    
    Getter Method
    
    Signature ``StockData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockData`` 
    
    :param stockData: 
    :type stockData: :py:class:`NXOpen.Routing.StockData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: StockDataRefreshBuilder = ...  # unknown typename


class ICharacteristic(NXOpen.INXObject):
    """
    Interface for querying and setting characteristic (UG attribute values) on various
    routing objects.  
    
    These methods should be used instead of the attribute methods on
    the :py:class:`NXObject` object in order to support extra functionality 
    such as synonym characteristics available in the Routing application.  
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class Stock(NXOpen.NXObject, ICharacteristic):
    """
    The :py:class:`NXOpen.Routing.Stock` object represents a material (such as as pipe or tube)
    that covers a path of segments.  The material is defined in the :py:class:`NXOpen.Routing.StockData`
    object.  :py:class:`NXOpen.Routing.Stock` consists of a :py:class:`NXOpen.Routing.StockData`
    object, as well as references to at most one of the :py:class:`NXOpen.Routing.CrossSection` and
    :py:class:`NXOpen.Routing.Anchor` objects that are associated with that
    :py:class:`NXOpen.Routing.StockData`.
    
    A :py:class:`NXOpen.Routing.Stock` object may exist in one of two modes ; Legacy Stock or
    Stock as Components Stock.  Legacy Stock is modeled as a sweep feature in the work part.  Stock
    as Components Stock is modeled as a child component (of the work part) that contains a sweep
    feature.  Legacy Stock and Stock as Components stock cannot exist in the same part file with
    the exception of Bundled stock.
    
    Stock as Components Stock creates a component file, and creates a copy of itself inside of
    that part file.  Segments, anchors, and all other necessary information are copied into
    the component part file.  The stock inside of the component file should not be edited or
    modified as it is completely controlled by the Stock as Component Stock in the work part.
    
    :py:class:`NXOpen.Routing.Stock` object that have automatically been generated by the bundling
    algorithm used for routing wires are Bundled stock.  Bundled stocks are always created as
    Legacy Stocks (even in parts containing Stock as Component stocks).  Any :py:class:`NXOpen.Routing.StockData` object that defines a bundled stock has a type of :py:class:`RoutingStockDataType.Bundled
    <RoutingStockDataType>`.  Editing the segments or the stock data of a Bundled stock may result in undefined
    behavior.
    
    With the exception of stock style, there are no functional differences between the two
    stock types.  Stock as Components Stock always uses the :py:class:`NXOpen.Routing.StockStyle.Detailed <NXOpen.Routing.StockStyle>`
    style (if available, otherwise it uses the :py:class:`NXOpen.Routing.StockStyle.Simple <NXOpen.Routing.StockStyle>` style) and
    the stock's style cannot be changed.
    
    Creator not available in KF because transient objects are not supported.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetStockData(self) -> StockData:
        """
        Gets the :py:class:`NXOpen.Routing.StockData`.  
        
        Signature ``GetStockData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStockData(self, stockData: StockData) -> None:
        """
        Sets the :py:class:`NXOpen.Routing.StockData`.  
        
        After setting the StockData, the
        caller must also make sure to set the CrossSection and Anchor so that the :py:class:`NXOpen.Routing.Stock`
        object only references objects associated with this :py:class:`NXOpen.Routing.StockData` object.
        
        Signature ``SetStockData(stockData)`` 
        
        :param stockData: 
        :type stockData: :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCrossSection(self) -> CrossSection:
        """
        Gets the :py:class:`NXOpen.Routing.CrossSection` that currently defines the profile for the stock.  
        
        Signature ``GetCrossSection()`` 
        
        :returns:  Returns None if this object is using stock style :py:class:`
        RoutingStockStyle.None <
        RoutingStockStyle>`  
        :rtype: :py:class:`NXOpen.Routing.CrossSection` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCrossSection(self, crossSection: CrossSection) -> None:
        """
        Sets the :py:class:`NXOpen.Routing.CrossSection`.  
        
        The given object must be one of the
        :py:class:`NXOpen.Routing.CrossSection` objects referenced by the :py:class:`NXOpen.Routing.StockData`
        object that defines this :py:class:`NXOpen.Routing.Stock` object.  :py:meth:`NXOpen.Routing.Stock.SetStockStyle` should be used (when possible) instead of this routine.  
        
        Signature ``SetCrossSection(crossSection)`` 
        
        :param crossSection:  Must be referenced by the :py:class:`NXOpen.Routing.StockData`                                                associated with this :py:class:`NXOpen.Routing.Stock` object.  
        :type crossSection: :py:class:`NXOpen.Routing.CrossSection` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAnchor(self) -> Anchor:
        """
        Gets the :py:class:`NXOpen.Routing.Anchor` that currently modifies the profile for the stock.  
        
        Signature ``GetAnchor()`` 
        
        :returns:  Returns None if this object isn't using an :py:class:`NXOpen.Routing.Anchor`  
        :rtype: :py:class:`NXOpen.Routing.Anchor` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAnchor(self, anchor: Anchor) -> None:
        """
        Sets the :py:class:`NXOpen.Routing.Anchor`.  
        
        The given object must be one of the
        :py:class:`NXOpen.Routing.Anchor` objects referenced by the :py:class:`NXOpen.Routing.StockData`
        object that defines this :py:class:`NXOpen.Routing.Stock` object. 
        
        Signature ``SetAnchor(anchor)`` 
        
        :param anchor:  Must be referenced by the :py:class:`NXOpen.Routing.StockData`                                          associated with this :py:class:`NXOpen.Routing.Stock` object.  
        :type anchor: :py:class:`NXOpen.Routing.Anchor` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockStyle(self) -> StockStyle:
        """
        Gets the :py:class:`NXOpen.Routing.StockStyle` of the :py:class:`NXOpen.Routing.Stock`.  
        
        Signature ``GetStockStyle()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockStyle` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStockStyle(self, style: StockStyle) -> None:
        """
        Sets the :py:class:`NXOpen.Routing.StockStyle` of the :py:class:`NXOpen.Routing.Stock`.  
        
        This may
        cause update to fire, and can be a time-consuming operation as it may require the building of a
        new sweep feature.  When style is set to :py:class:`NXOpen.Routing.StockStyle.None <NXOpen.Routing.StockStyle>` this routine
        deletes the stock sweep feature.  Only call on Legacy Stocks. 
        
        Signature ``SetStockStyle(style)`` 
        
        :param style: 
        :type style: :py:class:`NXOpen.Routing.StockStyle` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegments(self) -> 'list[NXOpen.Curve]':
        """
        Gets the segments that the :py:class:`NXOpen.Routing.Stock` object is placed on top of.  
        
        Signature ``GetSegments()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddSegments(self, segments: 'list[NXOpen.Curve]') -> None:
        """
        Adds new segments to this object.  
        
        If the new segments (added to the old segments) do not form
        a single continuous path, the :py:class:`NXOpen.Routing.Stock` will split so that there is a
        copy of this object on each continuous path formed by the input segments. 
        
        Signature ``AddSegments(segments)`` 
        
        :param segments:   List of segments to add.  Ignores any segments that                                                  are already referenced by this object.  
        :type segments: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveSegments(self, segments: 'list[NXOpen.Curve]') -> None:
        """
        Removes segments from this object.  
        
        If the segments of this object (after removing the input
        segments) do not form a single continuous path, the :py:class:`NXOpen.Routing.Stock` will split so
        that there is a copy of this object on each continuous path.   This object will delete itself inside of
        update if all segments are removed. 
        
        Signature ``RemoveSegments(segments)`` 
        
        :param segments:   List of segments to remove.  Ignores any segments that                                                  are not already referenced by this object.  
        :type segments: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRotationAngle(self) -> float:
        """
        Gets the rotation angle applied to the profile.  
        
        Signature ``GetRotationAngle()`` 
        
        :returns:  The angle in radians.  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationAngle(self, rotationAngle: float) -> None:
        """
        Sets the rotation angle applied to the profile.  
        
        See the user help documentation on
        Orient Stock for more information.  
        
        Signature ``SetRotationAngle(rotationAngle)`` 
        
        :param rotationAngle:  The angle in radians. Valid values are 0.0 to ( 2 * Pi ).  
        :type rotationAngle: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetTwistAngle(self) -> float:
        """
        Gets the twist angle applied to the profile.  
        
        Signature ``GetTwistAngle()`` 
        
        :returns:  The angle in radians.  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetTwistAngle(self, twistAngle: float) -> None:
        """
        Sets the twist angle applied to the profile.  
        
        See the user help documentation on
        Orient Stock for more information.  
        
        Signature ``SetTwistAngle(twistAngle)`` 
        
        :param twistAngle:  The angle in radians. Valid values are 0.0 to ( 2 * Pi ).  
        :type twistAngle: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetProfileEnd(self) -> ProfileFrom:
        """
        Gets the end that defines profile.  
        
        Signature ``GetProfileEnd()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProfileFrom` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetProfileEnd(self, profileEnd: ProfileFrom) -> None:
        """
        Sets the end that defines profile.  
        
        See the user help documentation on
        Orient Stock for more information.
        
        Signature ``SetProfileEnd(profileEnd)`` 
        
        :param profileEnd: 
        :type profileEnd: :py:class:`NXOpen.Routing.ProfileFrom` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFlippedStatus(self) -> Flip:
        """
        Gets whether or not the profile is flipped.  
        
        Signature ``GetFlippedStatus()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Flip` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFlippedStatus(self, flipped: Flip) -> None:
        """
        Sets whether or not the profile is flipped.  
        
        See the user help documentation on
        Orient Stock for more information.
        
        Signature ``SetFlippedStatus(flipped)`` 
        
        :param flipped: 
        :type flipped: :py:class:`NXOpen.Routing.Flip` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPorts(self) -> tuple:
        """
        Returns the :py:class:`NXOpen.Routing.StockPort` at each end of the stock.  
        
        Signature ``GetPorts()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startPort, endPort). startPort is a :py:class:`NXOpen.Routing.StockPort`.   Port at the start of the first segment. endPort is a :py:class:`NXOpen.Routing.StockPort`.   Port at the end of the last segment. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockUse(self) -> StockUse:
        """
        Returns the use of the stock.  
        
        Signature ``GetStockUse()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockUse` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFeatures(self) -> 'list[NXOpen.Features.Feature]':
        """
        Returns the sweep features that are created and controlled by this object.  
        
        For
        Stock as Components stock, the features exist in a separate part file.  For Legacy Stock
        the features exist in the same part as the input object.   
        
        Signature ``GetFeatures()`` 
        
        :returns:  Sweep features.   
        :rtype: list of :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponent(self) -> NXOpen.Assemblies.Component:
        """
        Returns the :py:class:`NXOpen.Assemblies.Component` created and controlled by the stock for a
        Stock as Components stock.  
        
        Only returns a component if the stock type is
        :py:class:`RoutingStockUse.StockAsComponent <RoutingStockUse>`.  
        
        Signature ``GetComponent()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetNameStatus(self) -> ComponentName:
        """
        Returns whether or not the component associated with a Stock as Components Stock has a
        permanent or temporary name.  
        
        Signature ``GetNameStatus()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ComponentName` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOriginalLength(self) -> float:
        """
        Returns the original length for a stock that has been deformed (it's use is
        :py:class:`RoutingStockUse.Deformed <RoutingStockUse>`).  
        
        This is the length of the original stock
        in the component part at the time that the deformed stock was created.  
        
        Signature ``GetOriginalLength()`` 
        
        :returns:  The original length in units of the original part file.  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ColorBodies(self) -> None:
        """
        Colors the solid bodies of the stock based on the COLOR characteristic specified in the
        :py:class:`NXOpen.Routing.StockData` of the stock.  
        
        The color string can contain
        the name of a color, a hex string specifying the RGB values, a comma separated list of RGB integer values and
        a simple integer specifying the color index directly. 
        
        Signature ``ColorBodies()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SyncComponentAttrs(self, isNewPart: bool) -> None:
        """
        Set the characteristics of the given stock's
        component so that it has the same characteristics as the :py:class:`NXOpen.Routing.Stock` and its stock data.  
        
        Signature ``SyncComponentAttrs(isNewPart)`` 
        
        :param isNewPart:  Is the part new?  
        :type isNewPart: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AlignStock(self, vector: NXOpen.Vector3d) -> None:
        """
        Align stock to new rotation vector.  
        
        Signature ``AlignStock(vector)`` 
        
        :param vector:  Rotation vector.  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RenameStockComponent(self, partName: str) -> None:
        """
        Renames the stock component part with given name
        
        Signature ``RenameStockComponent(partName)`` 
        
        :param partName:  Part name to be set  
        :type partName: str 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBodies(self) -> 'list[NXOpen.Body]':
        """
        Returns the solid bodies, if any, that are created and controlled by this object.  
        
        For
        Stock as Components stock, the bodies exist in a separate part file.  For Legacy Stock
        the bodies exist in the same part as the input object.   
        
        Signature ``GetBodies()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX10.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetHarnessDevice(self) -> NXOpen.Routing.Electrical.HarnessDevice:
        """
        For Routing Electrical application only, returns the :py:class:`Routing.Electrical.HarnessDevice`
        that owns the wire or wires that make up a stock bundle.  
        
        Will return None if this stock is not a wire, cable, or shield bundle.
        
        Signature ``GetHarnessDevice()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Electrical.HarnessDevice` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsSpaceReservation(self) -> bool:
        """
        Is this stock a Space Reservation stock?.  
        
        Signature ``IsSpaceReservation()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBodySegmentMap(self, feature: NXOpen.Features.Feature) -> tuple:
        """
        Given stock and a feature of the stock, returns solid body, stock segments and path segments that produced the body.  
        
        Path segments are the visible segments over which the stock is created. Stock segments may be same as the 
        path segments or those may be hidden segments created for the stock. In case of :py:class:`NXOpen.Routing.Overstock`
        stockSegments are hidden and path segments are visible. There may be many stock segments created on a single path segment in
        that case. 
        Usage: 1. Query features for a stock. If an overstock is applied on a path with a sharp corner, it may have created multiple features.
        2.Call this method for every feature in a loop. 
        
        Signature ``GetBodySegmentMap(feature)`` 
        
        :param feature:  Stock sweep feature.  
        :type feature: :py:class:`NXOpen.Features.Feature` 
        :returns: a tuple 
        :rtype: A tuple consisting of (body, stockSegments, pathSegments). body is a :py:class:`NXOpen.Body`.   Solid body of the stock sweep. stockSegments is a list of :py:class:`NXOpen.Curve`.   Stock segments. Hidden segments in case of overstocks. pathSegments is a list of :py:class:`NXOpen.Curve`.   Path segments. Same as stock segments for stock but visible path segments for overstock. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    NegateOffsetsFlag: bool = ...
    """
    Returns or sets  the negate offsets flag of this :py:class:`NXOpen.Routing.Stock`.  
    
    <hr>
    
    Getter Method
    
    Signature ``NegateOffsetsFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``NegateOffsetsFlag`` 
    
    :param offsetFlag: 
    :type offsetFlag: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: Stock = ...  # unknown typename


class Filler(Stock):
    """
    Represents a Filler   
    
    .. versionadded:: NX4.0.0
    """
    Null: Filler = ...  # unknown typename


class FindByAttributesBuilder(NXOpen.Builder):
    """
    Find runs/objects with specified attribute name and attribute value criteria,
    highlight the corresponding nodes in the run navigator and the graphics area  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateFindByAttributesBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def AttributeMembersBuilder(self) -> AttributeMembersBuilder:
        """
        Creates an AttributeMembersBuilder object used to create list item 
        
        Signature ``AttributeMembersBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AttributeMembersBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def HighlightRunNavItems(self, objects: 'list[NXOpen.NXObject]', highLight: bool) -> None:
        """
        Highlight/Unhighlight the search results for FindByAttributes
        
        Signature ``HighlightRunNavItems(objects, highLight)`` 
        
        :param objects:  Items  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :param highLight: 
        :type highLight: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    AttribList: NXOpen.TaggedObjectList = ...
    """
    Returns the attribute list containing search criteria
    
    <hr>
    
    Getter Method
    
    Signature ``AttribList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    AttributeName: str = ...
    """
    Returns or sets the string containing attribute title to search for
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeName`` 
    
    :param attributeName: 
    :type attributeName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    AttributeValue: str = ...
    """
    Returns or sets the string containing attribute value to search for
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeValue`` 
    
    :param attributeValue: 
    :type attributeValue: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: FindByAttributesBuilder = ...  # unknown typename


class AlignStockBuilderStockAlignmentMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlignStockBuilderStockAlignmentMethod():
    """
    Methods of aligning stocks.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RoutingObject", " - "
       "VectorToVector", " - "
    """
    RoutingObject = 0  # AlignStockBuilderStockAlignmentMethodMemberType
    VectorToVector = 1  # AlignStockBuilderStockAlignmentMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlignStockBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Routing.AlignStockBuilder`
    Builder for aligning non-circular stocks.  
    
    Two methods are provided to user to make stocks alignment:
    Routing Object: specify the referencing routing object and deriving the reference rotate vector from it,
    Vector to Vector: specify the to vector as reference and the from vector as the target, then align them.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateAlignStockBuilder`
    
    Default values.
    
    ================  ==============
    Property          Value
    ================  ==============
    AlignmentMethod   RoutingObject 
    ================  ==============
    
    .. versionadded:: NX9.0.3
    """
    
    class StockAlignmentMethod():
        """
        Methods of aligning stocks.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RoutingObject", " - "
           "VectorToVector", " - "
        """
        RoutingObject = 0  # AlignStockBuilderStockAlignmentMethodMemberType
        VectorToVector = 1  # AlignStockBuilderStockAlignmentMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AlignmentMethod: AlignStockBuilderStockAlignmentMethod = ...
    """
    Returns or sets  the alignment method.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.AlignStockBuilderStockAlignmentMethod` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentMethod`` 
    
    :param alignmentMethod: 
    :type alignmentMethod: :py:class:`NXOpen.Routing.AlignStockBuilderStockAlignmentMethod` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    """
    ReferenceObject: RouteObjectCollector = ...
    """
    Returns  the reference object.  
    
    The reference object could be a stock or a qualified part.
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    """
    ReferenceVector: NXOpen.Direction = ...
    """
    Returns or sets   the reference vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceVector`` 
    
    :param toVector: 
    :type toVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    """
    StocksToAlign: RouteObjectCollector = ...
    """
    Returns   a collection of stocks to align.  
    
    <hr>
    
    Getter Method
    
    Signature ``StocksToAlign`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    """
    TargetVector: NXOpen.Direction = ...
    """
    Returns or sets  the target vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``TargetVector`` 
    
    :param fromVector: 
    :type fromVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: AlignStockBuilder = ...  # unknown typename


class Platform(NXOpen.NXObject):
    """
    :py:class:`NXOpen.Routing.Platform` objects are automatically created and updated by
    :py:class:`NXOpen.Routing.Platform` objects.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.Platform`
    
    .. versionadded:: NX10.0.0
    """
    Null: Platform = ...  # unknown typename


class ManualRouteBuilder(NXOpen.Builder):
    """
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateManualRouteBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def CyclePaths(self) -> None:
        """
        Cycle paths through filter paths array to enable user select path for routing.  
        
        Signature ``CyclePaths()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFilterPaths(self) -> 'list[Path]':
        """
        This function gets filter paths from builder.  
        
        These paths are those which passes through selected points
        in point list. 
        
        Signature ``GetFilterPaths()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Path` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFilterPaths(self, filterPaths: 'list[Path]') -> None:
        """
        Signature ``SetFilterPaths(filterPaths)`` 
        
        :param filterPaths: 
        :type filterPaths: list of :py:class:`NXOpen.Routing.Path` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPaths(self) -> 'list[Path]':
        """
        This function returns all possible paths for stockDevice stored in builder.  
        
        Signature ``GetPaths()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Path` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateFilterPaths(self, point: NXOpen.Point) -> bool:
        """
        This function updates the filter paths in builder, using the given selected point.  
        
        It checks all the filter paths stored in builder, and finds paths passing through given point.
        Then it updates filter paths accordingly in builder.  
        
        Signature ``UpdateFilterPaths(point)`` 
        
        :param point: 
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def FindPathsFromMultiplePoints(self, points: 'list[NXOpen.Point]') -> tuple:
        """
        This function returns all possible paths which are passing through all the given points.  
        
        Signature ``FindPathsFromMultiplePoints(points)`` 
        
        :param points: 
        :type points: list of :py:class:`NXOpen.Point` 
        :returns: a tuple 
        :rtype: A tuple consisting of (paths, foundPath). paths is a list of :py:class:`NXOpen.Routing.Path`. foundPath is a bool. 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetHighlightPath(self) -> Path:
        """
        This function returns currently highlighted path stored in builder  
        
        Signature ``GetHighlightPath()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Path` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetHighlightPath(self, path: Path) -> None:
        """
        This function sets highlight path amongst all paths, and this highlight path only
        will be used for routing the stock device 
        
        Signature ``SetHighlightPath(path)`` 
        
        :param path: 
        :type path: :py:class:`NXOpen.Routing.Path` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateValidPointsOnPaths(self, pointLocs: 'list[NXOpen.Point3d]') -> tuple:
        """
        This function will get all the paths stored in :py:class:`NXOpen.Routing.ManualRouteBuilder` and 
        will create point for any location which lies on any of the paths.  
        
        Newly created points will be returned
        as result. It will also return the filter paths found using given locations.  
        
        Signature ``CreateValidPointsOnPaths(pointLocs)`` 
        
        :param pointLocs: 
        :type pointLocs: list of :py:class:`NXOpen.Point3d` 
        :returns: a tuple 
        :rtype: A tuple consisting of (filterPaths, validPoints). filterPaths is a list of :py:class:`NXOpen.Routing.Path`. validPoints is a list of :py:class:`NXOpen.Point`. 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    PointList: NXOpen.PointList = ...
    """
    Returns  the point list 
    
    <hr>
    
    Getter Method
    
    Signature ``PointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.PointList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: ManualRouteBuilder = ...  # unknown typename


class IRoutePosition(ICharacteristic):
    """
    Interface class for all routing objects that specify a single (possibly associative) location
    in space.  
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class PortPortTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PortPortType():
    """
    Specifies the port type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UnknownPort", "Unknown Port"
       "FittingPort", "Fitting Port"
       "FixturePort", "Fixture Port"
       "MultiPort", "Multi Port"
       "TerminalPort", "Terminal Port"
       "StockPort", "Stock Port"
       "StockOffsetPort", "Stock Offset Port"
    """
    UnknownPort = 0  # PortPortTypeMemberType
    FittingPort = 1  # PortPortTypeMemberType
    FixturePort = 2  # PortPortTypeMemberType
    MultiPort = 3  # PortPortTypeMemberType
    TerminalPort = 4  # PortPortTypeMemberType
    StockPort = 5  # PortPortTypeMemberType
    StockOffsetPort = 6  # PortPortTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PortFlowDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PortFlowDirectionType():
    """
    Allowed types for flow direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RouteFlowEither", " - "
       "RouteFlowIn", " - "
       "RouteFlowOut", " - "
       "FlowNone", " - "
    """
    RouteFlowEither = 0  # PortFlowDirectionTypeMemberType
    RouteFlowIn = 1  # PortFlowDirectionTypeMemberType
    RouteFlowOut = 2  # PortFlowDirectionTypeMemberType
    FlowNone = 3  # PortFlowDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PortCreateRotationVectorMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PortCreateRotationVector():
    """
    Used by :py:meth:`NXOpen.Routing.FittingPortCollection.CreateFromCsys` and
    :py:meth:`Routing.FixturePortCollection.CreateFromCsys` to determine if
    the rotation vector on the port should be created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", "Do not create the rotation vector on the port created from a coordinate system."
       "Yes", "Create the rotation vector on the port created from a coordinate system."
    """
    No = 0  # PortCreateRotationVectorMemberType
    Yes = 1  # PortCreateRotationVectorMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Port(NXOpen.SmartObject, IRoutePosition):
    """
    Routing Port Object is a parent class for FixturePort, ExtractPort, FittingPort,
    Multiport, StockPort and TerminalPort  
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.0
    """
    
    class PortType():
        """
        Specifies the port type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UnknownPort", "Unknown Port"
           "FittingPort", "Fitting Port"
           "FixturePort", "Fixture Port"
           "MultiPort", "Multi Port"
           "TerminalPort", "Terminal Port"
           "StockPort", "Stock Port"
           "StockOffsetPort", "Stock Offset Port"
        """
        UnknownPort = 0  # PortPortTypeMemberType
        FittingPort = 1  # PortPortTypeMemberType
        FixturePort = 2  # PortPortTypeMemberType
        MultiPort = 3  # PortPortTypeMemberType
        TerminalPort = 4  # PortPortTypeMemberType
        StockPort = 5  # PortPortTypeMemberType
        StockOffsetPort = 6  # PortPortTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FlowDirectionType():
        """
        Allowed types for flow direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RouteFlowEither", " - "
           "RouteFlowIn", " - "
           "RouteFlowOut", " - "
           "FlowNone", " - "
        """
        RouteFlowEither = 0  # PortFlowDirectionTypeMemberType
        RouteFlowIn = 1  # PortFlowDirectionTypeMemberType
        RouteFlowOut = 2  # PortFlowDirectionTypeMemberType
        FlowNone = 3  # PortFlowDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreateRotationVector():
        """
        Used by :py:meth:`NXOpen.Routing.FittingPortCollection.CreateFromCsys` and
        :py:meth:`Routing.FixturePortCollection.CreateFromCsys` to determine if
        the rotation vector on the port should be created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", "Do not create the rotation vector on the port created from a coordinate system."
           "Yes", "Create the rotation vector on the port created from a coordinate system."
        """
        No = 0  # PortCreateRotationVectorMemberType
        Yes = 1  # PortCreateRotationVectorMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetPortType(self) -> PortPortType:
        """
        Get the type of Port  
        
        Signature ``GetPortType()`` 
        
        :returns:  Port Type  
        :rtype: :py:class:`NXOpen.Routing.PortPortType` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAlignmentVector(self) -> NXOpen.Vector3d:
        """
        Retrieves the alignment vector of Port  
        
        Signature ``GetAlignmentVector()`` 
        
        :returns:  Vector direction in absolute co-ordinate system  
        :rtype: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetClockIncrement(self) -> float:
        """
        The clock angle increment value of :py:class:`NXOpen.Routing.Port`  
        
        Signature ``GetClockIncrement()`` 
        
        :returns:  Clock increment value in degrees  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetClockIncrement(self, increment: float) -> None:
        """
        The clock angle increment value of :py:class:`NXOpen.Routing.Port` 
        
        Signature ``SetClockIncrement(increment)`` 
        
        :param increment:  Clock increment value in degrees  
        :type increment: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFlowDirection(self) -> PortFlowDirectionType:
        """
        Get the value of flow direction of :py:class:`NXOpen.Routing.Port`  
        
        Signature ``GetFlowDirection()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PortFlowDirectionType` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFlowDirection(self, flowDirection: PortFlowDirectionType) -> None:
        """
        Set the flow direction value of :py:class:`NXOpen.Routing.Port` 
        
        Signature ``SetFlowDirection(flowDirection)`` 
        
        :param flowDirection: 
        :type flowDirection: :py:class:`NXOpen.Routing.PortFlowDirectionType` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRotationVector(self) -> NXOpen.Vector3d:
        """
        Retrieves the rotation vector of Port  
        
        Signature ``GetRotationVector()`` 
        
        :returns:  Vector direction in absolute co-ordinate system  
        :rtype: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRotationObject(self) -> NXOpen.DisplayableObject:
        """
        Retrieves the object used to derive the rotation vector of Port  
        
        Signature ``GetRotationObject()`` 
        
        :returns:  Object used to derive the rotation vector  
        :rtype: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegment(self) -> ISegment:
        """
        Return the segment the port position and alignment are derived from
        Returns None if the port is not derived from segment  
        
        Signature ``GetSegment()`` 
        
        :returns:  ISegment from which the port is derived  
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetForwardExtension(self) -> float:
        """
        Returns the forward extension value for a port i.  
        
        e. the minimum length that
        * a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`  
        
        Signature ``GetForwardExtension()`` 
        
        :returns:  Port extension  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetForwardExtensionObject(self) -> NXOpen.Expression:
        """
        Returns the forward extension object for a port.  
        
        Signature ``GetForwardExtensionObject()`` 
        
        :returns:  Forward Extension Expression.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEngagement(self) -> float:
        """
        Returns the engagement distance of a port, i.  
        
        e. the distance
        * behind the port that another fitting or stock may engage  
        
        Signature ``GetEngagement()`` 
        
        :returns:  Engagement distance  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEngagementPosition(self) -> NXOpen.Point3d:
        """
        Returns the position of the port taking into account the engagement distance.  
        
        Signature ``GetEngagementPosition()`` 
        
        :returns:  Location of engagement position in ABS coordinates  
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCutbackLength(self) -> float:
        """
        Returns the cutback length of a port, i.  
        
        e. the length along the wire from
        * the port where individual wires leave a bundle to attach to pins  
        
        Signature ``GetCutbackLength()`` 
        
        :returns:  Cutback length  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FindPortIntegerCharacteristic(self, name: str) -> int:
        """
        Searches for an integer characteristics on the port, then on the ports component
        and prototype port if the port is an occurrence.  
        
        Signature ``FindPortIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FindPortRealCharacteristic(self, name: str) -> float:
        """
        Searches for a real characteristics on the port, then on the ports component
        and prototype port if the port is an occurrence.  
        
        Signature ``FindPortRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FindPortStringCharacteristic(self, name: str) -> str:
        """
        Searches for a string characteristics on the port, then on the ports component
        and prototype port if the port is an occurrence.  
        
        Signature ``FindPortStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetReferenceCharacteristic(self, name: str) -> str:
        """
        Gets a reference characteristic from the port.  
        
        Signature ``GetReferenceCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReferenceCharacteristic(self, name: str, value: str) -> None:
        """
        Sets a reference characteristics on the port.  
        
        Signature ``SetReferenceCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def Connect(self) -> PortConnection:
        """
        Finds another :py:class:`NXOpen.Routing.Port` to connect this port to.  
        
        Builds a
        :py:class:`NXOpen.Routing.PortConnection` object if a connectable port is found.  See
        :py:meth:`Routing.PortConnectionCollection.CanPortsConnect`. Does nothing if
        this port already has a :py:class:`NXOpen.Routing.PortConnection` object referencing it.  
        
        Signature ``Connect()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PortConnection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def Disconnect(self) -> None:
        """
        Deletes any :py:class:`NXOpen.Routing.PortConnection` objects that reference this port.  
        
        Signature ``Disconnect()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LockEngagement(self, portToLock: Port) -> 'list[NXOpen.Positioning.Constraint]':
        """
        Locks the port engagement using dcm3 constraints 
        
        Signature ``LockEngagement(portToLock)`` 
        
        :param portToLock: 
        :type portToLock: :py:class:`NXOpen.Routing.Port` 
        :returns:  Newly created port constraints  
        :rtype: list of :py:class:`NXOpen.Positioning.Constraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LockRotation(self, portToLock: Port) -> 'list[NXOpen.Positioning.Constraint]':
        """
        Locks the port rotation vector using dcm3 constraints 
        
        Signature ``LockRotation(portToLock)`` 
        
        :param portToLock: 
        :type portToLock: :py:class:`NXOpen.Routing.Port` 
        :returns:  Newly created port constraints  
        :rtype: list of :py:class:`NXOpen.Positioning.Constraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnlockEngagement(self, portToUnlock: Port) -> None:
        """
        Unlocks the port engagement
        
        Signature ``UnlockEngagement(portToUnlock)`` 
        
        :param portToUnlock: 
        :type portToUnlock: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnlockRotation(self, portToUnlock: Port) -> None:
        """
        Unlocks the port rotation
        
        Signature ``UnlockRotation(portToUnlock)`` 
        
        :param portToUnlock: 
        :type portToUnlock: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsRotationLocked(self, portToCheck: Port) -> bool:
        """
        Checks if ports have their rotation vectors locked.  
        
        Signature ``IsRotationLocked(portToCheck)`` 
        
        :param portToCheck: 
        :type portToCheck: :py:class:`NXOpen.Routing.Port` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsEngagementLocked(self, portToCheck: Port) -> bool:
        """
        Checks to see if ports are engaged.  
        
        Signature ``IsEngagementLocked(portToCheck)`` 
        
        :param portToCheck: 
        :type portToCheck: :py:class:`NXOpen.Routing.Port` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AskFeature(self) -> FeaturePort:
        """
        Ask :py:class:`NXOpen.Routing.FeaturePort` object associated with
        :py:class:`NXOpen.Routing.Port`.  
        
        Returns None if the port was created
        in preNX6 release and not converted to :py:class:`NXOpen.Routing.FeaturePort`
        or the port is a WAVE-linked port.
        To convert :py:class:`NXOpen.Routing.Port` object to :py:class:`NXOpen.Routing.FeaturePort` object
        use :py:meth:`Routing.PortCollection.ConvertToFeatures`.  
        
        Signature ``AskFeature()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FeaturePort` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AskWaveFeature(self) -> NXOpen.Features.WaveRouting:
        """
        Ask :py:class:`NXOpen.Features.WaveRouting` object associated with this
        :py:class:`NXOpen.Routing.Port`.  
        
        Returns None if the port is not
        WAVE-linked.
        
        Signature ``AskWaveFeature()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.WaveRouting` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ReorderFeature(self) -> None:
        """
        Reorders the :py:class:`NXOpen.Routing.FeaturePort` object associated with
        :py:class:`NXOpen.Routing.Port` after all of the features on which the
        port feature depends.  
        
        Does nothing if the port was created
        in preNX6 release and not converted to :py:class:`NXOpen.Routing.FeaturePort`.
        To convert :py:class:`NXOpen.Routing.Port` object to :py:class:`NXOpen.Routing.FeaturePort` object
        use :py:meth:`Routing.PortCollection.ConvertToFeatures`. 
        
        Signature ``ReorderFeature()`` 
        
        .. versionadded:: NX6.0.5
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponent(self) -> NXOpen.Assemblies.Component:
        """
        If this port is an occurrence, returns the component part to which it belongs.  
        
        Returns None otherwise.  
        
        Signature ``GetComponent()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX8.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetConnectedPorts(self) -> tuple:
        """
        If port is connected to another port, returns both connected ports.  
        
        Returns None otherwise. 
        
        Signature ``GetConnectedPorts()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (connectedPort1, connectedPort2). connectedPort1 is a :py:class:`NXOpen.Routing.Port`. connectedPort2 is a :py:class:`NXOpen.Routing.Port`. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPortConnection(self) -> PortConnection:
        """
        If port is connected to another port, returns the Port Connection that links them.  
        
        Returns None otherwise.  
        
        Signature ``GetPortConnection()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PortConnection` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOccurrence(self) -> NXOpen.NXObject:
        """
        Returns the occurrence of the given port.  
        
        If the given port is a port extract, uses the port extract data to find the source
        occurrence.  Only establishes an occurrence if the extract xform and the source
        (prototype) port are loaded.  Returns a None otherwise.
        
        Given any other port, tries to find an occurrence under the work occurrence.
        
        Signature ``GetOccurrence()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetControlPoint(self) -> ControlPoint:
        """
        Returns the :py:class:`Routing.ControlPoint` to which this port is constrained, if any.  
        
        Returns None otherwise.  
        
        Signature ``GetControlPoint()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX8.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockOfPort(self) -> Stock:
        """
        For a :py:class:`Routing.StockPort`, returns the :py:class:`Routing.Stock`
        to which this port is attached, if any.  
        
        Returns None otherwise for all other types of ports.  
        
        Signature ``GetStockOfPort()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    AllowMultipleConnections: bool = ...
    """
    Returns or sets  the Allow Multiple Connections property for a :py:class:`NXOpen.Routing.Port`.  
    
    The property controls the number of connections that can be routed to this
    :py:class:`NXOpen.Routing.Port`.  Although this can be specified in the
    Mechanical application, the Electrical application is where this property is most
    used.
    
    <hr>
    
    Getter Method
    
    Signature ``AllowMultipleConnections`` 
    
    :returns:  Does this port allow multiple connections?  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AllowMultipleConnections`` 
    
    :param allowMultipleConnections:  Should the multiport allow multiple connections?  
    :type allowMultipleConnections: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    BackwardExtension: float = ...
    """
    Returns or sets  the backward extension value for a port (i.  
    
    e. the minimum length that
    * a segment must remain straight going into the back of a :py:class:`NXOpen.Routing.Port`) 
    
    <hr>
    
    Getter Method
    
    Signature ``BackwardExtension`` 
    
    :returns:  Port extension  
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BackwardExtension`` 
    
    :param extension:  Port extension  
    :type extension: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    BackwardExtensionObject: NXOpen.Expression = ...
    """
    Returns or sets  the backward extension object for a port.  
    
    <hr>
    
    Getter Method
    
    Signature ``BackwardExtensionObject`` 
    
    :returns:  Backward Extension Expression.  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BackwardExtensionObject`` 
    
    :param backwardExtension:  Backward Extension Expression.  
    :type backwardExtension: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    ClockIncrementObject: NXOpen.Expression = ...
    """
    Returns or sets  the clock angle increment expression of a
    :py:class:`NXOpen.Routing.Port`, i.  
    
    e. an expression
    representing the minimum angle for clocking the
    :py:class:`NXOpen.Routing.Port`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ClockIncrementObject`` 
    
    :returns:  Clock increment expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ClockIncrementObject`` 
    
    :param increment:  Clock increment expression  
    :type increment: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Position: NXOpen.Point3d = ...
    """
    Returns or sets   the current location of the object in ABS coordinates.  
    
    This value is
    overridden by the coordinates of the point associated with this object. 
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns:  Location of object in ABS coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position:  New location of object in ABS coordinates  
    :type position: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the :py:class:`NXOpen.Point` that specifies the location of the
    :py:class:`NXOpen.Routing.IRoutePosition` object.  
    
    A NULL object indicates that this
    object is not associated to any point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns:  New location of object in ABS coordinates  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point:  New location of object in ABS coordinates  
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: Port = ...  # unknown typename


class IAxisPort(IRoutePosition):
    """
    Interface class for all routing objects that specify a direction   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class ProxyPort(Port, IAxisPort):
    """
    A :py:class:`NXOpen.Routing.ProxyPort` is a port that represents a connector in
    another design zone, but not present in this design zone.  
    
    :py:class:`NXOpen.Routing.ProxyPort`
    can be assigned to a connector using the :py:class:`NXOpen.Routing.Electrical.ConnectorDevice`
    class method :py:meth:`NXOpen.Routing.Electrical.ConnectorDevice.ProxyAssignConnector` 
    To obtain an instace of this class use :py:meth:`Routing.ProxyPortCollection.CreateProxyPort`
    
    .. versionadded:: NX8.0.0
    """
    
    def SetAlignVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the align vector of Port 
        
        Signature ``SetAlignVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the rotation vector of Port 
        
        Signature ``SetRotationVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationObject(self, rotationObject: NXOpen.DisplayableObject) -> None:
        """
        Sets the object used to derive the rotation vector of Port 
        
        Signature ``SetRotationObject(rotationObject)`` 
        
        :param rotationObject:  Object used to derive the rotation vector  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetForwardExtension(self, forwardExtension: float) -> None:
        """
        Sets the forward extension value of a port, i.  
        
        e. the minimum length that
        a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
        
        Signature ``SetForwardExtension(forwardExtension)`` 
        
        :param forwardExtension:  Port extension  
        :type forwardExtension: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEngagement(self, engagement: float) -> None:
        """
        The engagment distance of a :py:class:`NXOpen.Routing.IAxisPort`, i.  
        
        e. the distance 
        behind the port that another fitting or stock may engage
        
        Signature ``SetEngagement(engagement)`` 
        
        :param engagement:  Engagement distance  
        :type engagement: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCutbackLength(self, cutbackLength: float) -> None:
        """
        Sets the cutback length of a port, i.  
        
        e. the length along the wire from
        the port where individual wires leave a bundle to attach to pins
        
        Signature ``SetCutbackLength(cutbackLength)`` 
        
        :param cutbackLength:  Cutback Length  
        :type cutbackLength: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ForwardExtensionObject: NXOpen.Expression = ...
    """
    Returns or sets  the forward extension object of a port, i.  
    
    e. an expression representing the minimum
    length that a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :returns:  Forward Extension Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :param forwardExtension:  Forward Extension Expression  
    :type forwardExtension: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    EngagementObject: NXOpen.Expression = ...
    """
    Returns or sets  the engagement object of a port, i.  
    
    e. an expression representing the
    distance behind the port that another fitting or stock may engage
    
    <hr>
    
    Getter Method
    
    Signature ``EngagementObject`` 
    
    :returns:  Engagement Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EngagementObject`` 
    
    :param engagement:  Engagement Expression  
    :type engagement: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CutbackLengthObject: NXOpen.Expression = ...
    """
    Returns or sets  the cutback length object of a port, i.  
    
    e. an expression representing the length
    along the wire from the port where individual wires leave a bundle to attach to pins
    
    <hr>
    
    Getter Method
    
    Signature ``CutbackLengthObject`` 
    
    :returns:  Cutback Length Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CutbackLengthObject`` 
    
    :param cutbackLength:  Cutback Length Expression  
    :type cutbackLength: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Axis: NXOpen.Axis = ...
    """
    Returns or sets   the axis that defines the port
    
    <hr>
    
    Getter Method
    
    Signature ``Axis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Axis`` 
    
    :param axis: 
    :type axis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ProxyPort = ...  # unknown typename


class WindCatcher(NXOpen.Features.BodyFeature):
    """
    Represents a Wind Catcher feature.  
    
    Use the :py:class:`NXOpen.Routing.WindCatcherBuilder` class to create a Wind Catcher feature. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Routing.WindCatcherBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: WindCatcher = ...  # unknown typename


class RootObject(NXOpen.NXObject):
    """
    The :py:class:`NXOpen.Routing.RootObject` is the parent
    class of all other Routing logical objects.  
    
    Every child inherits the Global Object
    Identifier (GUID) attribute and methods from :py:class:`NXOpen.Routing.RootObject`.
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    Guid: str = ...
    """
    Returns or sets  the object's Global Unique Identifier (GUID).  
    
    <hr>
    
    Getter Method
    
    Signature ``Guid`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Guid`` 
    
    :param guid: 
    :type guid: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: RootObject = ...  # unknown typename


class FlipMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Flip():
    """
    Describes whether the stock profile is flipped, see the user help documenation on Orient Stock.  
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotFlipped", "Profile is not flipped."
       "Flipped", "Profile is flipped."
    """
    NotFlipped = 0  # FlipMemberType
    Flipped = 1  # FlipMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FormboardFrame(NXOpen.DisplayableObject):
    """
    The :py:class:`NXOpen.Routing.FormboardFrame` is a (not pure) virtual class.  
    
    It has three subclasses:
    
      *  :py:class:`NXOpen.Routing.FormboardFrameCGM` 
      *  :py:class:`NXOpen.Routing.FormboardFramePattern` 
      *  :py:class:`NXOpen.Routing.FormboardFrameRectangle` 
    
    It stores a reference point and frame name. 
    The access methods are implemented in the subclasses
    
    .. versionadded:: NX4.0.0
    """
    
    def GetReferencePoint(self) -> NXOpen.Point:
        """
        Query the formboard frame reference point  
        
        Signature ``GetReferencePoint()`` 
        
        :returns:  Lower left corner  
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def GetObject(self) -> tuple:
        """
        Query the formboard frame underlying geometry  
        
        Signature ``GetObject()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (geometry, type). geometry is a :py:class:`NXOpen.DisplayableObject`.   Underlying geometry type is a int. 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def SetReferencePoint(self, referencePoint: NXOpen.Point) -> None:
        """
        Sets the formboard frame reference point 
        
        Signature ``SetReferencePoint(referencePoint)`` 
        
        :param referencePoint:  Lower left corner  
        :type referencePoint: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def SetFrameName(self, newName: str) -> None:
        """
        Sets the name of the formboard frame 
        
        Signature ``SetFrameName(newName)`` 
        
        :param newName: 
        :type newName: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def CopyFrame(self) -> FormboardFrame:
        """
        Makes copy of the frame, and moves it to the work layer  
        
        Signature ``CopyFrame()`` 
        
        :returns:  Copy of the existing frame  
        :rtype: :py:class:`NXOpen.Routing.FormboardFrame` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def GetFrameName(self) -> str:
        """
        Returns the name of the formboard frame  
        
        Signature ``GetFrameName()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    Null: FormboardFrame = ...  # unknown typename


class FormboardFrameCGM(FormboardFrame):
    """
    Represents a Formboard Frame CGM.  
    
    .. versionadded:: NX5.0.0
    """
    Null: FormboardFrameCGM = ...  # unknown typename


class AnchorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.Anchor` objects.  
    
    Iterating this collection only returns live uncondemned objects contained in the owning part
    of the collection. Note that :py:class:`NXOpen.Routing.Anchor` is a smart object and many smart objects are condemned as they 
    only exist to support other objects and are not displayed.
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateAnchor(self, origin: NXOpen.Point3d) -> Anchor:
        """
        Creates a :py:class:`NXOpen.Routing.Anchor` object.  
        
        Signature ``CreateAnchor(origin)`` 
        
        :param origin:  Origin of the Anchor  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Anchor` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateAnchor(self, position: NXOpen.Point3d, point: NXOpen.Point) -> Anchor:
        """
        Creates a :py:class:`NXOpen.Routing.Anchor` object.  
        
        Signature ``CreateAnchor(position, point)`` 
        
        :param position:  This can be None  
        :type position: :py:class:`NXOpen.Point3d` 
        :param point:  Anchor to this. If this is GeometricUtilities.Point.NULL use position  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Anchor` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class ISegment(ICharacteristic):
    """
    Interface class for all routing segments [Line/Arc/Spline]   
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class LineSegment(NXOpen.Line, ISegment):
    """
    Represents a line segment.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.LineSegmentCollection`
    
    .. versionadded:: NX4.0.0
    """
    
    def LockLength(self) -> NXOpen.Positioning.Constraint:
        """
        Adds a constraint to maintain the length of this line segment.  
        
        It does this
        by ensuring that there is a distance constraint between the two end
        :py:class:`NXOpen.Routing.ControlPoint` objects of this line segment.  See
        :py:class:`NXOpen.Positioning.Constraint` for a description of distance
        constraints.
        
        Signature ``LockLength()`` 
        
        :returns:   The new or existing distance constraint between the end control points.  
        :rtype: :py:class:`NXOpen.Positioning.Constraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnlockLength(self) -> None:
        """
        Removes the distance constraint that constrains the distance between
        the two end control points of this line segment.  
        
        Call :py:meth:`NXOpen.Update.DoUpdate` afterwards to ensure that
        the constraint is fully deleted.
        
        Signature ``UnlockLength()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsLengthLocked(self) -> bool:
        """
        Returns whether or not a distance constraint exists that constrains the
        distance between the two end control points of this line segment.  
        
        Signature ``IsLengthLocked()`` 
        
        :returns:  Whether or not the length is locked.  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LockAngle(self, object: NXOpen.NXObject, logicalConsOnly: bool) -> NXOpen.Positioning.Constraint:
        """
        Adds a constraint to maintain the angle of this line segment with respect
        to another object.  
        
        It does this by ensuring that there is an angle, perpendicular
        or parallel constraint between this line segment and the other object.  This line
        segment must not be an occurrence, the other object may be an occurrence.
        
        See :py:class:`NXOpen.Positioning.Constraint` for a description of angle, parallel
        and perpendicular constraints.
        
        Signature ``LockAngle(object, logicalConsOnly)`` 
        
        :param object:  Other object.  
        :type object: :py:class:`NXOpen.NXObject` 
        :param logicalConsOnly:  if true, only create perpendicular or                                                parallel constraints, if false will                                                also create angle constraints.  
        :type logicalConsOnly: bool 
        :returns:  The new or existing angle constraint.  
        :rtype: :py:class:`NXOpen.Positioning.Constraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnlockAngle(self, object: NXOpen.NXObject) -> None:
        """
        Removes the angle, parallel or perpendicular constraint that constrains
        the angle between this line segment and the input object.  
        
        This line
        segment must not be an occurrence.
        
        Call :py:meth:`NXOpen.Update.DoUpdate` afterwards to ensure that
        the constraint is fully deleted.
        
        Signature ``UnlockAngle(object)`` 
        
        :param object:  Other object  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsAngleLocked(self, object: NXOpen.NXObject) -> bool:
        """
        Returns whether or not an angle, parallel or perpendicular constraint exists
        that constrains the angle between this segment and the other input object.  
        
        Both line segments must not be occurrences.
        
        Signature ``IsAngleLocked(object)`` 
        
        :param object:  Other object  
        :type object: :py:class:`NXOpen.NXObject` 
        :returns:  Whether or not the angle is locked.  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetGuid(self) -> str:
        """
        Returns the Globally Unique Identifier (GUID) for this segment.  
        
        Signature ``GetGuid()`` 
        
        :returns:  The GUID for this segment.  
        :rtype: str 
        
        .. versionadded:: NX8.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndRcps(self) -> tuple:
        """
        Return of segment end control points.  
        
        The :py:class:`NXOpen.Routing.ControlPoint` defines an end of a segment 
        
        Signature ``GetEndRcps()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startRcp, endRcp). startRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining start of segment endRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining end of segment 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndRcps(self, startRcp: ControlPoint, endRcp: ControlPoint) -> None:
        """
        Signature ``SetEndRcps(startRcp, endRcp)`` 
        
        :param startRcp:  RCP defining start of segment  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  RCP defining end of segment  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndPoints(self) -> tuple:
        """
        Get the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``GetEndPoints()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startPoint, endPoint). startPoint is a :py:class:`NXOpen.Point3d`.   Location of end 0 in ABS coordinates endPoint is a :py:class:`NXOpen.Point3d`.   Location of end 1 in ABS coordinates 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndPoints(self, startPoint: NXOpen.Point3d, endPoint: NXOpen.Point3d) -> None:
        """
        Set the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``SetEndPoints(startPoint, endPoint)`` 
        
        :param startPoint:  New location of end 0 in ABS coordinates  
        :type startPoint: :py:class:`NXOpen.Point3d` 
        :param endPoint:  New location of end 1 in ABS coordinates  
        :type endPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsTerminalSegment(self) -> Terminal:
        """
        Is given segment a terminal segment?  
        
        Signature ``GetIsTerminalSegment()`` 
        
        :returns:  Is segment a terminal segment?  
        :rtype: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIsTerminalSegment(self, isTerminal: Terminal) -> None:
        """
        Set given segment to be a terminal segment? 
        
        Signature ``SetIsTerminalSegment(isTerminal)`` 
        
        :param isTerminal:  Set as terminal segment?  
        :type isTerminal: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsSegmentInterior(self) -> Interior:
        """
        Query if a segment is interior to any part  
        
        Signature ``GetIsSegmentInterior()`` 
        
        :returns:  Is segment interior?  
        :rtype: :py:class:`NXOpen.Routing.Interior` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSegmentInteriorPart(self, interiorPart: NXOpen.Assemblies.Component) -> None:
        """
        Set a segment to be interior to supplied part 
        
        Signature ``SetSegmentInteriorPart(interiorPart)`` 
        
        :param interiorPart:  Part segment interior?  
        :type interiorPart: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentStock(self) -> 'list[Stock]':
        """
        Returns all stocks that directly reference this segment as part of the path defining the stock.  
        
        Signature ``GetSegmentStock()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentAllStocks(self) -> 'list[Stock]':
        """
        Returns :py:class:`NXOpen.Routing.Stock` as well as :py:class:`NXOpen.Routing.Overstock`
        objects from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetSegmentAllStocks()`` 
        
        :returns:  Array of stocks/overstocks.  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCablewaysLayoutViews(self) -> 'list[NXOpen.Routing.Electrical.CablewaysLayoutView]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` objects
        from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCablewaysLayoutViews()`` 
        
        :returns:  Array of cableways layout views.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCableDevices(self) -> 'list[NXOpen.Routing.Electrical.CableDevice]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CableDevice` objects
        from :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCableDevices()`` 
        
        :returns:  Array of cable devices.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CableDevice` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsEccentricSegment(self) -> Eccentric:
        """
        Is given segment a eccentric segment?  
        
        Signature ``GetIsEccentricSegment()`` 
        
        :returns:  Is segment a eccentric segment?  
        :rtype: :py:class:`NXOpen.Routing.Eccentric` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertLinearToEccentricLinear(self) -> ConvertLinearToEccentricLinear:
        """
        Is line segment converted to eccentric line segment?  
        
        Signature ``ConvertLinearToEccentricLinear()`` 
        
        :returns:  Is line segment converted to eccentric line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertLinearToEccentricLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertEccentricLinearToLinear(self) -> ConvertEccentricLinearToLinear:
        """
        Is line segment eccentric converted to line segment?  
        
        Signature ``ConvertEccentricLinearToLinear()`` 
        
        :returns:  Is line segment eccentric converted to line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertEccentricLinearToLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    FollowCurve: NXOpen.Curve = ...
    """
    Returns   the segment follow curve.  
    
    NULL object indicates segment has no follow curve 
    
    <hr>
    
    Getter Method
    
    Signature ``FollowCurve`` 
    
    :returns:  Follow curve of segment  
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Length: float = ...
    """
    Returns   the length of the segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: LineSegment = ...  # unknown typename


class RoutingBulkReplacementBuilderReplacementMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingBulkReplacementBuilderReplacementMethodType():
    """
    Defines the replacement method type. Attribute values, library select, and retain 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AttributeValues", "Search for a replacement object using attribute values"
       "LibrarySelect", "Select a replacement object from the part library"
       "Retain", "Keep the original object, no replacement is performed"
    """
    AttributeValues = 0  # RoutingBulkReplacementBuilderReplacementMethodTypeMemberType
    LibrarySelect = 1  # RoutingBulkReplacementBuilderReplacementMethodTypeMemberType
    Retain = 2  # RoutingBulkReplacementBuilderReplacementMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RunItemTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RunItemType():
    """
    Represents the type of Run Item 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "From", "A "From" item type."
       "To", "A "To" item type"
       "Member", "A "Member" item type"
    """
    From = 0  # RunItemTypeMemberType
    To = 1  # RunItemTypeMemberType
    Member = 2  # RunItemTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RunItem(NXOpen.TransientObject):
    """
    Routing Run Item object references components which comprise a piping run.  
    
    .. versionadded:: NX7.5.4
    """
    
    class Type():
        """
        Represents the type of Run Item 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "From", "A "From" item type."
           "To", "A "To" item type"
           "Member", "A "Member" item type"
        """
        From = 0  # RunItemTypeMemberType
        To = 1  # RunItemTypeMemberType
        Member = 2  # RunItemTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Free resources associated with this instance of Run Item class.  
        
        After calling this method, it is illegal to use the object.  In .NET,
        this method is automatically called when the object is deleted by the
        garbage collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: None.
        """
        ...
    
    Attributes: CharacteristicList = ...
    """
    Returns or sets  the attributes on the Run Item.  
    
    <hr>
    
    Getter Method
    
    Signature ``Attributes`` 
    
    :returns:  Run Item attributes  
    :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Attributes`` 
    
    :param attributes:  Run Item attributes  
    :type attributes: :py:class:`NXOpen.Routing.CharacteristicList` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    """
    ItemType: RunItemType = ...
    """
    Returns or sets  the Run Item type such as "From", "To", or "Member" item.  
    
    <hr>
    
    Getter Method
    
    Signature ``ItemType`` 
    
    :returns:  Run Item type  
    :rtype: :py:class:`NXOpen.Routing.RunItemType` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemType`` 
    
    :param itemType:  Run Item type  
    :type itemType: :py:class:`NXOpen.Routing.RunItemType` 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    """
    ReferenceId: str = ...
    """
    Returns or sets  the unique reference identifier for this Run Item.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceId`` 
    
    :returns:  Unique reference identifier of this Run Item  
    :rtype: str 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceId`` 
    
    :param referenceId:  Unique reference identifier of this Run Item  
    :type referenceId: str 
    
    .. versionadded:: NX7.5.4
    
    License requirements: None.
    """


class CompareRunsBuilderCompareTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompareRunsBuilderCompareTypes():
    """
    The Compare Type selection Enum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Xml", " - "
       "Part", " - "
    """
    Xml = 0  # CompareRunsBuilderCompareTypesMemberType
    Part = 1  # CompareRunsBuilderCompareTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompareRunsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.CompareRunsBuilder`, used to compare runs in the work 
    part to the ones in another part, or to runs defined in xml files gathered in a folder 
    (native mode) or on an item revision (managed mode).  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateCompareRunsBuilder`
    
    Default values.
    
    =================  =====
    Property           Value
    =================  =====
    CompareTypesEnum   Xml 
    =================  =====
    
    .. versionadded:: NX9.0.0
    """
    
    class CompareTypes():
        """
        The Compare Type selection Enum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Xml", " - "
           "Part", " - "
        """
        Xml = 0  # CompareRunsBuilderCompareTypesMemberType
        Part = 1  # CompareRunsBuilderCompareTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CompareTypesEnum: CompareRunsBuilderCompareTypes = ...
    """
    Returns or sets  the Compare type: part or xml 
    
    <hr>
    
    Getter Method
    
    Signature ``CompareTypesEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CompareRunsBuilderCompareTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CompareTypesEnum`` 
    
    :param compareTypesEnum: 
    :type compareTypesEnum: :py:class:`NXOpen.Routing.CompareRunsBuilderCompareTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FilterString: str = ...
    """
    Returns or sets  the filter used to limit which runs are compared among those in the folder or on the item revision 
    
    <hr>
    
    Getter Method
    
    Signature ``FilterString`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FilterString`` 
    
    :param filterString: 
    :type filterString: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    InputPathString: str = ...
    """
    Returns or sets  the full path input to the compare runs algorithm.  
    
    Can be a folder or an item revision for xml comparisons, or a part.
    
    <hr>
    
    Getter Method
    
    Signature ``InputPathString`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``InputPathString`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    ReportDiscrepancies: bool = ...
    """
    Returns or sets  the option to report discrepancies down to attribute level.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReportDiscrepancies`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ReportDiscrepancies`` 
    
    :param reportDiscrepancies: 
    :type reportDiscrepancies: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: CompareRunsBuilder = ...  # unknown typename


class EditBendAngleBuilder(NXOpen.Builder):
    """
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateEditBendAngleBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def SetRCP(self, bendRcp: NXOpen.TaggedObject) -> None:
        """
        Set the Bend RCP to edit.  
        
        Signature ``SetRCP(bendRcp)`` 
        
        :param bendRcp:  Bend Rcp  
        :type bendRcp: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateAngle(self, angle: float) -> None:
        """
        Set the vector the defines the new bend angle.  
        
        Signature ``UpdateAngle(angle)`` 
        
        :param angle:  The new angle.  
        :type angle: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetMoveAttachedFlag(self, moveAttached: bool) -> None:
        """
        Move all attached geometry as a rigid set.  
        
        Signature ``SetMoveAttachedFlag(moveAttached)`` 
        
        :param moveAttached:  Whether or not to move the geometry as a rigid set.  
        :type moveAttached: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SwapAnchorSegment(self) -> None:
        """
        Swap the free and anchor segments.  
        
        Signature ``SwapAnchorSegment()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSelectedBendData(self) -> tuple:
        """
        Returns information about the angle being changed.  
        
        Signature ``GetSelectedBendData()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (angle, anchorSegDir, rcpPos, planeNormal). angle is a float.   Teh angle between the two segments anchorSegDir is a :py:class:`NXOpen.Vector3d`.   The anchor Segment rcpPos is a :py:class:`NXOpen.Point3d`.   The position of the bend rcp planeNormal is a :py:class:`NXOpen.Vector3d`.   The normal of the plane the arc lies in. 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CommitCurrentEdit(self) -> None:
        """
        Commits the current edit operation.  
        
        Signature ``CommitCurrentEdit()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Null: EditBendAngleBuilder = ...  # unknown typename


class StockOffsetPortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.StockOffsetPort` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX8.0.2
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateStockOffsetPort(self, partOccurrence: NXOpen.Assemblies.Component, portPrototype: Port) -> StockOffsetPort:
        """
        Creates a :py:class:`NXOpen.Routing.StockOffsetPort` in the work part from the
        stock offset port in the given part occurrence.  
        
        Returns the existing stock offset
        port in the work part if one already exists.  
        
        Signature ``CreateStockOffsetPort(partOccurrence, portPrototype)`` 
        
        :param partOccurrence:  The part occurrence from which to create the stock offset port.  
        :type partOccurrence: :py:class:`NXOpen.Assemblies.Component` 
        :param portPrototype:  The prototype of the stock offset port in the part occurrence.  
        :type portPrototype: :py:class:`NXOpen.Routing.Port` 
        :returns:  The stock offset port in the work part.  
        :rtype: :py:class:`NXOpen.Routing.StockOffsetPort` 
        
        .. versionadded:: NX8.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class TerminalPortCollection(NXOpen.TaggedObjectCollection):
    """
    The collection of all :py:class:`NXOpen.Routing.TerminalPort`s.  
    
    The
    :py:class:`NXOpen.Routing.TerminalPortCollection` creates and enumerates
    :py:class:`NXOpen.Routing.TerminalPort`.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateTerminalPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, multiPort: MultiPort, pinIdentifier: str) -> TerminalPort:
        """
        Creates a :py:class:`NXOpen.Routing.TerminalPort` with no
        rotation vector at an absolute location.
        
        Signature ``CreateTerminalPort(origin, alignmentVector, multiPort, pinIdentifier)`` 
        
        :param origin:  Origin of the :py:class:`NXOpen.Routing.TerminalPort`  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the :py:class:`NXOpen.Routing.TerminalPort`  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param multiPort:  Parent :py:class:`NXOpen.Routing.MultiPort` of this :py:class:`NXOpen.Routing.TerminalPort`  
        :type multiPort: :py:class:`NXOpen.Routing.MultiPort` 
        :param pinIdentifier:  Pin Identifier of the :py:class:`NXOpen.Routing.TerminalPort` 
        :type pinIdentifier: str 
        :returns:  newly created :py:class:`NXOpen.Routing.TerminalPort` 
        :rtype: :py:class:`NXOpen.Routing.TerminalPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    @typing.overload
    def CreateTerminalPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point, multiPort: MultiPort, pinIdentifier: str) -> TerminalPort:
        """
        Creates a :py:class:`NXOpen.Routing.TerminalPort` with no
        rotation vector at an existing point.  Default allows multiple
        connections to this port.
        
        Signature ``CreateTerminalPort(origin, alignmentVector, point, multiPort, pinIdentifier)`` 
        
        :param origin:  Origin of the :py:class:`NXOpen.Routing.TerminalPort`  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the :py:class:`NXOpen.Routing.TerminalPort` 
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Point from which this :py:class:`NXOpen.Routing.TerminalPort` is derived  
        :type point: :py:class:`NXOpen.Point` 
        :param multiPort:  Parent :py:class:`NXOpen.Routing.MultiPort` of this * :py:class:`NXOpen.Routing.TerminalPort`  
        :type multiPort: :py:class:`NXOpen.Routing.MultiPort` 
        :param pinIdentifier:  Pin Identifier of the :py:class:`NXOpen.Routing.TerminalPort`  
        :type pinIdentifier: str 
        :returns:  newly created :py:class:`NXOpen.Routing.TerminalPort`  
        :rtype: :py:class:`NXOpen.Routing.TerminalPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    @typing.overload
    def CreateTerminalPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis, multiPort: MultiPort, pinIdentifier: str) -> TerminalPort:
        """
        Creates a :py:class:`NXOpen.Routing.TerminalPort` with no rotation vector on an
        axis.  Default allows multiple connections to this port.
        
        Signature ``CreateTerminalPort(origin, alignmentVector, derivationObject, multiPort, pinIdentifier)`` 
        
        :param origin:  Origin of the :py:class:`NXOpen.Routing.TerminalPort`  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the :py:class:`NXOpen.Routing.TerminalPort` 
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  :py:class:`NXOpen.Routing.TerminalPort` derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :param multiPort:  Parent :py:class:`NXOpen.Routing.MultiPort` of this :py:class:`NXOpen.Routing.TerminalPort`  
        :type multiPort: :py:class:`NXOpen.Routing.MultiPort` 
        :param pinIdentifier:  Pin Identifier of the :py:class:`NXOpen.Routing.TerminalPort`  
        :type pinIdentifier: str 
        :returns:  newly created :py:class:`NXOpen.Routing.TerminalPort`  
        :rtype: :py:class:`NXOpen.Routing.TerminalPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    


class StockPort(Port):
    """
    :py:class:`NXOpen.Routing.StockPort` objects are automatically created and updated by
    :py:class:`NXOpen.Routing.Stock` objects.  
    
    Instances of this class are created by :py:class:`NXOpen.Routing.Stock`.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetStock(self) -> Stock:
        """
        Gets the :py:class:`NXOpen.Routing.Stock` that owns this object.  
        
        Signature ``GetStock()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetExtractPort(self) -> ExtractPort:
        """
        For Stock As Components, returns the :py:class:`NXOpen.Routing.ExtractPort`
        of this :py:class:`NXOpen.Routing.StockPort` using the :py:class:`NXOpen.Routing.StockPort`'s
        occurrence in the work part.  
        
        Returns None if the given :py:class:`NXOpen.Routing.StockPort`
        does not have a port occurrence in the work part.  
        
        Signature ``GetExtractPort()`` 
        
        :returns:  Extract port that represents the occurrence of
        the :py:class:`NXOpen.Routing.StockPort` in the work part.  
        :rtype: :py:class:`NXOpen.Routing.ExtractPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: StockPort = ...  # unknown typename


class SpaceReservationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.SpaceReservationBuilder`
    
    This builder takes one or more segments and creates space reservation stock on it.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateSpaceReservationBuilder`
    
    .. versionadded:: NX6.0.0
    """
    GridTopologyEligibilityFlag: bool = ...
    """
    Returns or sets  the grid topology eligibility flag.  
    
    When this flag is set, a non circular space reservation will produce bend faces in the bend regions instead of merged faces.
    This flag has no effect on space reservation. 
    
    <hr>
    
    Getter Method
    
    Signature ``GridTopologyEligibilityFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.3
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``GridTopologyEligibilityFlag`` 
    
    :param gridOptionEligible: 
    :type gridOptionEligible: bool 
    
    .. versionadded:: NX10.0.3
    
    License requirements: routing_base ("Routing Basic")
    """
    SegmentCollector: RouteObjectCollector = ...
    """
    Returns  the routing segment collector 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockSettings: PathStockBuilder = ...
    """
    Returns  the stock settings for creating space reservation stock 
    
    <hr>
    
    Getter Method
    
    Signature ``StockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: SpaceReservationBuilder = ...  # unknown typename


class StockOffsetPort(Port):
    """
    :py:class:`NXOpen.Routing.StockOffsetPort` class handles the relationship
    between a component part's port occurrence and the dumb offset port in
    the work part.  
    
    The dumb port offsets based on expressions that use
    the stock diameter. 
    Use :py:meth:`NXOpen.Routing.StockOffsetPortCollection.CreateStockOffsetPort` to create an instance of this class.
    
    .. versionadded:: NX7.5.4
    """
    
    def GetPortOccurrence(self) -> Port:
        """
        Returns the original port occurrence from which the dumb port was extracted.  
        
        Returns None if the occurrence is not available because it is not loaded, or not in the current reference set, etc.  
        
        Signature ``GetPortOccurrence()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOffsetPort(self) -> Port:
        """
        Returns the :py:class:`NXOpen.Routing.StockOffsetPort` in the work part that was created from the original port occurrence.  
        
        Signature ``GetOffsetPort()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetMaxPathStockDiameter(self) -> float:
        """
        Returns the diameter of all the stock on the path at this :py:class:`NXOpen.Routing.StockOffsetPort`.  
        
        NOTE: This value may change in the next update cycle.  
        
        Signature ``GetMaxPathStockDiameter()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX7.5.5
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: StockOffsetPort = ...  # unknown typename


class BendReportManagerXyzReport_Struct():
    """
    Used in the XYZ bend reports.  
    
    The first bend value is at one end point of the stock body
    and the last bend value is at the other end point of the stock body.  The other bend
    values are the location in work coordinates of the bend :py:class:`Routing.ControlPoint`s
    associated with each bend or the location of where the bend :py:class:`Routing.ControlPoint`s
    would be if they existed.
    .
    Constructor: 
    NXOpen.Routing.BendReportManager.XyzReport()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Xc: float = ...
    """
    X position of bend :py:class:`Routing.ControlPoint` in work coordinates.  
    
    <hr>
    
    Field Value
    Type:float
    """
    Yc: float = ...
    """
    Y position of bend :py:class:`Routing.ControlPoint` in work coordinates.  
    
    <hr>
    
    Field Value
    Type:float
    """
    Zc: float = ...
    """
    Z position of bend :py:class:`Routing.ControlPoint` in work coordinates.  
    
    <hr>
    
    Field Value
    Type:float
    """
    Radius: float = ...
    """
    Radius of the bend.  
    
    <hr>
    
    Field Value
    Type:float
    """


class CharacteristicListCharacteristicInformation_Struct():
    """
    Contains the type and name of a characteristic .  
    
    Constructor: 
    NXOpen.Routing.CharacteristicList.CharacteristicInformation()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Type: NXOpen.NXObjectAttributeType = ...
    """
    characteristic type  
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObjectAttributeType`
    """
    Name: str = ...
    """
    characteristic name 
    <hr>
    
    Field Value
    Type:str
    """


class RoutingAttributeIdentifierTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingAttributeIdentifierType():
    """
    Defines the attribute identifier types 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "String", "A simple string identifier"
       "Classification", "An identifier for a Teamcenter classification attribute"
    """
    String = 0  # RoutingAttributeIdentifierTypeMemberType
    Classification = 1  # RoutingAttributeIdentifierTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PortConnectionOverriddenValidityMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PortConnectionOverriddenValidity():
    """
    Overridden port connection validity 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "The port connection validity has not been overridden"
       "Valid", "The port connection validity has been overridden to be valid"
       "Invalid", "The port connection validity has been overridden to be invalid"
    """
    NotSet = 0  # PortConnectionOverriddenValidityMemberType
    Valid = 1  # PortConnectionOverriddenValidityMemberType
    Invalid = 2  # PortConnectionOverriddenValidityMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PortConnection(NXOpen.NXObject):
    """
    The Routing PortConnection object is used by Routing to position ports
    while placing parts.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.PortConnectionCollection.CreatePortConnection`
    
    .. versionadded:: NX4.0.0
    """
    
    class OverriddenValidity():
        """
        Overridden port connection validity 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "The port connection validity has not been overridden"
           "Valid", "The port connection validity has been overridden to be valid"
           "Invalid", "The port connection validity has been overridden to be invalid"
        """
        NotSet = 0  # PortConnectionOverriddenValidityMemberType
        Valid = 1  # PortConnectionOverriddenValidityMemberType
        Invalid = 2  # PortConnectionOverriddenValidityMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetPorts(self) -> tuple:
        """
        Returns the two ports connected by a Port Connection object.  
        
        Signature ``GetPorts()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (port1, port2). port1 is a :py:class:`NXOpen.Routing.Port`.   first Port connected by the                                                                   Port Connection object port2 is a :py:class:`NXOpen.Routing.Port`.   second Port connected by the                                                                   Port Connection object 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPorts(self, port1: Port, port2: Port) -> None:
        """
        Sets the link between the two ports connected by the Port Connection object.  
        
        Signature ``SetPorts(port1, port2)`` 
        
        :param port1:  first port to be connected by the Port Connection object  
        :type port1: :py:class:`NXOpen.Routing.Port` 
        :param port2:  second port to be connected by the Port Connection object  
        :type port2: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEngagement(self) -> float:
        """
        Returns the engagement distance between the two ports connected by a Port Connection object.  
        
        Signature ``GetEngagement()`` 
        
        :returns:  engagement distance between the ports connected by the
        Port Connection object  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEngagement(self, engagement: float) -> None:
        """
        Sets the engagement distance between the two ports connected by a Port Connection object.  
        
        Signature ``SetEngagement(engagement)`` 
        
        :param engagement:  engagement distance to be set between the ports                                            connected by the Port Connection object  
        :type engagement: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsValid(self) -> bool:
        """
        Returns whether the connection is valid.  
        
        Validity is initially determined by the alignment of the ports
        but can be overridden by OverrideValidity or ForceValid  
        
        Signature ``IsValid()`` 
        
        :returns:  validity of the current connection.  
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ArePortsAligned(self) -> bool:
        """
        Returns whether the ports in the port connection are aligned correctly.  
        
        Both direction and rotation are evaluated.  
        
        Signature ``ArePortsAligned()`` 
        
        :returns:  validity of the current connection.  
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def OverrideValidity(self, overriddenValidity: PortConnectionOverriddenValidity) -> None:
        """
        Overrides the validity of the port connection.  
        
        By default, the validity is determined by
        evaluating the alignment of the connected ports. 
        
        Signature ``OverrideValidity(overriddenValidity)`` 
        
        :param overriddenValidity:  overridden validity value.  
        :type overriddenValidity: :py:class:`NXOpen.Routing.PortConnectionOverriddenValidity` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOverrideReason(self) -> str:
        """
        Gets the reason why a port connection's validity was overridden.  
        
        Signature ``GetOverrideReason()`` 
        
        :returns:  The reason why this connection's validity was overridden.  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOverrideReason(self, reason: str) -> None:
        """
        Sets the reason why a port connection's validity was overridden.  
        
        Signature ``SetOverrideReason(reason)`` 
        
        :param reason:  The reason why this connection's validity was overridden.  
        :type reason: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOverriddenValidity(self) -> PortConnectionOverriddenValidity:
        """
        Returns the overridden validity value of the port connection.  
        
        Signature ``GetOverriddenValidity()`` 
        
        :returns:  overridden validity value.  
        :rtype: :py:class:`NXOpen.Routing.PortConnectionOverriddenValidity` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ForceValid(self, reason: str) -> None:
        """
        Force the connection to be valid regardless of the port alignment or the overridden value.  
        
        The user's login name and the date and time are recorded automatically along
        with the given reason. 
        
        Signature ``ForceValid(reason)`` 
        
        :param reason:  The reason why this connection was forced to be valid.  
        :type reason: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveForcedValidity(self) -> None:
        """
        Removes the forced validity setting on the connection.  
        
        Validity will now be determined based on the alignment or
        on the overridden validity setting. 
        
        Signature ``RemoveForcedValidity()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsForcedValid(self) -> bool:
        """
        Returns whether the connection is forced to be valid.  
        
        Signature ``IsForcedValid()`` 
        
        :returns:  validity of the current connection.  
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: PortConnection = ...  # unknown typename


class CornerTypeBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerTypeBuilderType():
    """
    Defines the type of bend available for bend creation.Type of bend available are None,Miter
    ,Bend , S-bend and S-Elbow.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Miter", " - "
       "Bend", " - "
       "SBend", " - "
       "SElbow", " - "
       "UBend", " - "
       "UElbow", " - "
       "Cope", " - "
       "MiteredBend", " - "
    """
    NotSet = 0  # CornerTypeBuilderTypeMemberType
    Miter = 1  # CornerTypeBuilderTypeMemberType
    Bend = 2  # CornerTypeBuilderTypeMemberType
    SBend = 3  # CornerTypeBuilderTypeMemberType
    SElbow = 4  # CornerTypeBuilderTypeMemberType
    UBend = 5  # CornerTypeBuilderTypeMemberType
    UElbow = 6  # CornerTypeBuilderTypeMemberType
    Cope = 7  # CornerTypeBuilderTypeMemberType
    MiteredBend = 8  # CornerTypeBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerTypeBuilderBendOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerTypeBuilderBendOptions():
    """
    Methods available for bend creation.   
    
    .. deprecated::  NX8.5.0
       Use :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Radius", "Radius method allows corner creation with the specified radius value"
       "RatioToDiameter", "Ratio to diameter method"
       "BendRadiusTable", "Bend table method creates bend from specified bend table"
    """
    Radius = 0  # CornerTypeBuilderBendOptionsMemberType
    RatioToDiameter = 1  # CornerTypeBuilderBendOptionsMemberType
    BendRadiusTable = 2  # CornerTypeBuilderBendOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerTypeBuilderBendMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerTypeBuilderBendMethods():
    """
    Methods available for bend creation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Radius", "Radius method allows corner creation with the specified radius value"
       "RatioToDiameter", "Ratio to diameter method"
       "BendRadiusTable", "Bend table method creates bend from specified bend table"
       "InnerRadius", "Inner Radius method allows corner creation with the specified inner radius value"
    """
    Radius = 0  # CornerTypeBuilderBendMethodsMemberType
    RatioToDiameter = 1  # CornerTypeBuilderBendMethodsMemberType
    BendRadiusTable = 2  # CornerTypeBuilderBendMethodsMemberType
    InnerRadius = 3  # CornerTypeBuilderBendMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerTypeBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Contains setting for corner creation.  
    
    Type of bend to be created and the method to
    create the corner. 
    
    .. versionadded:: NX6.0.0
    """
    
    class Type():
        """
        Defines the type of bend available for bend creation.Type of bend available are None,Miter
        ,Bend , S-bend and S-Elbow.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Miter", " - "
           "Bend", " - "
           "SBend", " - "
           "SElbow", " - "
           "UBend", " - "
           "UElbow", " - "
           "Cope", " - "
           "MiteredBend", " - "
        """
        NotSet = 0  # CornerTypeBuilderTypeMemberType
        Miter = 1  # CornerTypeBuilderTypeMemberType
        Bend = 2  # CornerTypeBuilderTypeMemberType
        SBend = 3  # CornerTypeBuilderTypeMemberType
        SElbow = 4  # CornerTypeBuilderTypeMemberType
        UBend = 5  # CornerTypeBuilderTypeMemberType
        UElbow = 6  # CornerTypeBuilderTypeMemberType
        Cope = 7  # CornerTypeBuilderTypeMemberType
        MiteredBend = 8  # CornerTypeBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BendOptions():
        """
        Methods available for bend creation.   
        
        .. deprecated::  NX8.5.0
           Use :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Radius", "Radius method allows corner creation with the specified radius value"
           "RatioToDiameter", "Ratio to diameter method"
           "BendRadiusTable", "Bend table method creates bend from specified bend table"
        """
        Radius = 0  # CornerTypeBuilderBendOptionsMemberType
        RatioToDiameter = 1  # CornerTypeBuilderBendOptionsMemberType
        BendRadiusTable = 2  # CornerTypeBuilderBendOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BendMethods():
        """
        Methods available for bend creation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Radius", "Radius method allows corner creation with the specified radius value"
           "RatioToDiameter", "Ratio to diameter method"
           "BendRadiusTable", "Bend table method creates bend from specified bend table"
           "InnerRadius", "Inner Radius method allows corner creation with the specified inner radius value"
        """
        Radius = 0  # CornerTypeBuilderBendMethodsMemberType
        RatioToDiameter = 1  # CornerTypeBuilderBendMethodsMemberType
        BendRadiusTable = 2  # CornerTypeBuilderBendMethodsMemberType
        InnerRadius = 3  # CornerTypeBuilderBendMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def RouteCornerSpecifyElbow(self) -> None:
        """
        Route specify elbow 
        
        Signature ``RouteCornerSpecifyElbow()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RouteCornerAlternateSolution(self) -> None:
        """
        Route alternate solution
        
        Signature ``RouteCornerAlternateSolution()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RouteCornerImportBendRadiusTable(self) -> None:
        """
        Import bend radius table 
        
        Signature ``RouteCornerImportBendRadiusTable()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RouteCornerBendRadiusInfo(self) -> None:
        """
        Bend corner info 
        
        Signature ``RouteCornerBendRadiusInfo()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetElbowPart(self) -> CharacteristicList:
        """
        Returns the created elbow part 
        
        Signature ``GetElbowPart()`` 
        
        :returns:  Characteristic list used to find the appropriate  
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetElbowPart(self, elbowPart: CharacteristicList) -> None:
        """
        Sets the elbow part to be used for elbow creation
        
        Signature ``SetElbowPart(elbowPart)`` 
        
        :param elbowPart:  Characteristic list used to find the appropriate  
        :type elbowPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetElbowAppliedCharx(self) -> CharacteristicList:
        """
        Returns the  applied charx of elbow part 
        
        Signature ``GetElbowAppliedCharx()`` 
        
        :returns:  Characteristic list used to find the appropriate  
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetElbowAppliedCharx(self, elbowPart: CharacteristicList) -> None:
        """
        Sets the applied charx for elbow creation
        
        Signature ``SetElbowAppliedCharx(elbowPart)`` 
        
        :param elbowPart:  Characteristic list used to find the appropriate  
        :type elbowPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportBendRadiusTable(self, bendTableFilename: str) -> None:
        """
        Imports bend radius table 
        
        Signature ``ImportBendRadiusTable(bendTableFilename)`` 
        
        :param bendTableFilename: 
        :type bendTableFilename: str 
        
        .. versionadded:: NX9.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    RouteCornerBendMethods: CornerTypeBuilderBendMethods = ...
    """
    Returns or sets  the route corner bend options 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerBendMethods`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RouteCornerBendMethods`` 
    
    :param routeCornerBendMethods: 
    :type routeCornerBendMethods: :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteCornerBendOptions: CornerTypeBuilderBendOptions = ...
    """
    Returns or sets  the route corner bend options 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerBendOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CornerTypeBuilderBendOptions` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`NXOpen.Routing.CornerTypeBuilder.RouteCornerBendMethods` instead.
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RouteCornerBendOptions`` 
    
    :param routeCornerBendOptions: 
    :type routeCornerBendOptions: :py:class:`NXOpen.Routing.CornerTypeBuilderBendOptions` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`NXOpen.Routing.CornerTypeBuilder.RouteCornerBendMethods` instead.
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteCornerBendTable: str = ...
    """
    Returns or sets  the name of bend radius table
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerBendTable`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RouteCornerBendTable`` 
    
    :param bendTableName: 
    :type bendTableName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteCornerNumberOfMiters: int = ...
    """
    Returns or sets  the number of miter in mitered bend corner
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerNumberOfMiters`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RouteCornerNumberOfMiters`` 
    
    :param routeCornerNumberOfMiter: 
    :type routeCornerNumberOfMiter: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteCornerRadius: NXOpen.Expression = ...
    """
    Returns  the route corner radius 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteCornerRatioToDiameter: NXOpen.Expression = ...
    """
    Returns  the route corner ratio to diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerRatioToDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteCornerRequireLinearSolution: bool = ...
    """
    Returns or sets  the route corner require linear solution 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerRequireLinearSolution`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RouteCornerRequireLinearSolution`` 
    
    :param routeCornerRequireLinearSolution: 
    :type routeCornerRequireLinearSolution: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteCornerTypeOptions: CornerTypeBuilderType = ...
    """
    Returns or sets  the route corner type options 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteCornerTypeOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CornerTypeBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RouteCornerTypeOptions`` 
    
    :param routeCornerTypeOptions: 
    :type routeCornerTypeOptions: :py:class:`NXOpen.Routing.CornerTypeBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: CornerTypeBuilder = ...  # unknown typename


class RouteObject(RootObject, ICharacteristic):
    """
    The Top level routing data model object.
    
    Provides each routing data model object with a unique identifier. 
    See NX Open Routing help for detailed information on the Connection data model.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: RouteObject = ...  # unknown typename


class InterfaceTerminalBase(RouteObject):
    """
    The :py:class:`NXOpen.Routing.InterfaceTerminalBase` corresponds to an abstract class for
    a prototype :py:class:`NXOpen.Routing.Port`.  
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    
    def GetPorts(self) -> 'list[Port]':
        """
        Get the physical :py:class:`NXOpen.Routing.Port`s associated with the terminal.  
        
        The physical :py:class:`NXOpen.Routing.Port` corresponds to a port occurrence.
        
        Signature ``GetPorts()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Port: Port = ...
    """
    Returns  a physical port representing a prototype :py:class:`NXOpen.Routing.Port` on
    a connector piece part or subassembly.  
    
    Depricated in NX5.
    
    <hr>
    
    Getter Method
    
    Signature ``Port`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Port` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: InterfaceTerminalBase = ...  # unknown typename


class InterfaceTerminalShadow(InterfaceTerminalBase):
    """
    Represents the defining data for a physical :py:class:`NXOpen.Routing.Port`.  
    
    :py:class:`NXOpen.Routing.InterfaceTerminalShadow` is an assembly shadow of :py:class:`NXOpen.Routing.InterfaceTerminalBase`.  
    Component assignment associates the physical NX :py:class:`NXOpen.Routing.Port` to the logical port defined by this
    :py:class:`NXOpen.Routing.InterfaceTerminalShadow`.
    
    :py:class:`NXOpen.Routing.InterfaceTerminalShadow` objects reside in the work part (in assembly context) and
    carries the same GUID as the source :py:class:`NXOpen.Routing.Port`.  It syncs with the source anytime necessary or possible.
    
    Shadow objects are like extracted objects and stand in for the source objects, when source parts are
    unavailable or unloaded.
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    Null: InterfaceTerminalShadow = ...  # unknown typename


class SBendCornerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.SBendCorner` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCornerBySegBendRadius(self, startRcp: ControlPoint, endRcp: ControlPoint, segment: SplineSegment, sbendType: int, bendRadius: float) -> SBendCorner:
        """
        Creates a S-Bend corner between the start rcp and end rcp using a 
        :py:class:`NXOpen.Routing.SplineSegment` and a bend radius.  
        
        Signature ``CreateCornerBySegBendRadius(startRcp, endRcp, segment, sbendType, bendRadius)`` 
        
        :param startRcp:  Start rcp must not be None.  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End rcp must not be None.  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segment:  Segment representing the path of the S-Bend.  
        :type segment: :py:class:`NXOpen.Routing.SplineSegment` 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE__[1-5].  
        :type sbendType: int 
        :param bendRadius:  S-Bend radius.  
        :type bendRadius: float 
        :returns:  The newly created S-Bend corner object.  
        :rtype: :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateCornerBySegBendRatio(self, startRcp: ControlPoint, endRcp: ControlPoint, segment: SplineSegment, sbendType: int, bendRatio: float) -> SBendCorner:
        """
        Creates a S-Bend corner between the start rcp and end rcp using a 
        :py:class:`NXOpen.Routing.SplineSegment` and a bend ratio.  
        
        Signature ``CreateCornerBySegBendRatio(startRcp, endRcp, segment, sbendType, bendRatio)`` 
        
        :param startRcp:  Start rcp must not be None.  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End rcp must not be None.  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segment:  Segment representing the path of the S-Bend.  
        :type segment: :py:class:`NXOpen.Routing.SplineSegment` 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE__[1-5].  
        :type sbendType: int 
        :param bendRatio:  S-Bend ratio.  
        :type bendRatio: float 
        :returns:  The newly created S-Bend corner object.  
        :rtype: :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateCornerByBendRatio(self, startRcp: ControlPoint, endRcp: ControlPoint, bendRatio: float, sbendType: int) -> SBendCorner:
        """
        Creates a S-Bend corner between the start rcp and end rcp using a 
        bend ratio.  
        
        Signature ``CreateCornerByBendRatio(startRcp, endRcp, bendRatio, sbendType)`` 
        
        :param startRcp:  Start rcp must not be None.  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End rcp must not be None.  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendRatio:  Bend ratio.  
        :type bendRatio: float 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE__[1-5].  
        :type sbendType: int 
        :returns:  The newly created S-Bend Corner  
        :rtype: :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateCornerByBendRadius(self, startRcp: ControlPoint, endRcp: ControlPoint, bendRadius: float, sbendType: int) -> SBendCorner:
        """
        Creates a S-Bend corner between the start rcp and end rcp using a 
        bend radius.  
        
        Signature ``CreateCornerByBendRadius(startRcp, endRcp, bendRadius, sbendType)`` 
        
        :param startRcp:  Start rcp must not be None.  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End rcp must not be None.  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendRadius:  Bend radius.  
        :type bendRadius: float 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE_[1-5].  
        :type sbendType: int 
        :returns:  The newly created S-Bend Corner  
        :rtype: :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsRcpAssociatedToSBend(self, rcp: ControlPoint) -> bool:
        """
        Determines if the rcp is associated to an S-Bend corner.  
        
        Signature ``IsRcpAssociatedToSBend(rcp)`` 
        
        :param rcp:  Control point to be interrogated.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  true - The control point is a rcp for
        a S-Bend corner.
        false - Otherwise  
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSBendAssociatedToSegment(self, segment: SplineSegment) -> SBendCorner:
        """
        Enquire the S-Bend Corner that this segment represents.  
        
        (None can be returned, indicating that this segment does not
        represent a S-Bend Corner.)  
        
        Signature ``GetSBendAssociatedToSegment(segment)`` 
        
        :param segment:  Segment being queried for the                                                    S-Bend Corner it represents.  
        :type segment: :py:class:`NXOpen.Routing.SplineSegment` 
        :returns:  S-Bend Corner that segment represents 
        (None can be returned,indicating that 
        segment does not represent a S-Bend Corner).  
        :rtype: :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSBendAssociatedToRcp(self, rcp: ControlPoint) -> 'list[SBendCorner]':
        """
        Given a control point, get S-Bend corners pointing to it  
        
        Signature ``GetSBendAssociatedToRcp(rcp)`` 
        
        :param rcp:  Input control point  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  Corner objects pointing to the rcp.  
        :rtype: list of :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRcpSBendRadius(self, rcp: ControlPoint) -> float:
        """
        Gets the S-Bend radius of a rcp associated S-Bend corner.  
        
        Signature ``GetRcpSBendRadius(rcp)`` 
        
        :param rcp:  The control point.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  The bend radius. 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentSBendRadius(self, segment: SplineSegment) -> float:
        """
        Gets the bend radius of a segment associated S-Bend corner.  
        
        Signature ``GetSegmentSBendRadius(segment)`` 
        
        :param segment:  The segment associated with the S-Bend corner  
        :type segment: :py:class:`NXOpen.Routing.SplineSegment` 
        :returns:  The bend radius.  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ComputeSBend(self, startPnt: NXOpen.Point3d, endPnt: NXOpen.Point3d, lineVec1: NXOpen.Vector3d, lineVec2: NXOpen.Vector3d, radius: float, sbendType: int) -> tuple:
        """
        Compute a S-Bend curve given input.  
        
        Signature ``ComputeSBend(startPnt, endPnt, lineVec1, lineVec2, radius, sbendType)`` 
        
        :param startPnt:  Start point of a S-Bend.  
        :type startPnt: :py:class:`NXOpen.Point3d` 
        :param endPnt:  end point of a S-Bend.  
        :type endPnt: :py:class:`NXOpen.Point3d` 
        :param lineVec1:  First S-Bend defining vector.  
        :type lineVec1: :py:class:`NXOpen.Vector3d` 
        :param lineVec2:  Second S-Bend defining vector.  
        :type lineVec2: :py:class:`NXOpen.Vector3d` 
        :param radius:  Radius to use for a S-Bend  
        :type radius: float 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE_[1-5].  
        :type sbendType: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (isSbend, bendCurve). isSbend is a bool.   TURE: if S-Bend is possible;                                                         FALSE: otherwise. bendCurve is a :py:class:`NXOpen.Spline`.   S-Bend spline when a valid solution exists;                                                         None otherwise. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ComputeSBendData(self, startPnt: NXOpen.Point3d, endPnt: NXOpen.Point3d, lineVec1: NXOpen.Vector3d, lineVec2: NXOpen.Vector3d, radius: float, sbendType: int) -> tuple:
        """
        Compute a S-Bend parameters given input.  
        
        Signature ``ComputeSBendData(startPnt, endPnt, lineVec1, lineVec2, radius, sbendType)`` 
        
        :param startPnt:  Start point of a S-Bend.  
        :type startPnt: :py:class:`NXOpen.Point3d` 
        :param endPnt:  end point of a S-Bend.  
        :type endPnt: :py:class:`NXOpen.Point3d` 
        :param lineVec1:  First S-Bend defining vector.  
        :type lineVec1: :py:class:`NXOpen.Vector3d` 
        :param lineVec2:  Second S-Bend defining vector.  
        :type lineVec2: :py:class:`NXOpen.Vector3d` 
        :param radius:  Radius to use for a S-Bend  
        :type radius: float 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE_[1-5].  
        :type sbendType: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (isSbend, extensionPt1, extensionPt2, arc1StartPt, arc1EndPt, arc2StartPt, arc2EndPt). isSbend is a bool.   TURE: if S-Bend is possible;                                                     FALSE: otherwise. extensionPt1 is a :py:class:`NXOpen.Point3d`.   Location of 1st extension point where                                                   bend fillets could be assigned. Value is                                                   not valid when no S-Bend is possible.extensionPt2 is a :py:class:`NXOpen.Point3d`.   Location of 2nd extension point where                                                   bend fillets could be assigned.arc1StartPt is a :py:class:`NXOpen.Point3d`.   Point where the first bend arc starts.                                                    Only computed if not None. arc1EndPt is a :py:class:`NXOpen.Point3d`.   Point where the first bend arc ends.                                                    Only computed if not None. arc2StartPt is a :py:class:`NXOpen.Point3d`.   Point where the second bend arc starts.                                                                Only computed if not None. arc2EndPt is a :py:class:`NXOpen.Point3d`.   Point where the second bend arc ends.                                                    Only computed if not None. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def EditCornerByBendRadius(self, startRcp: ControlPoint, endRcp: ControlPoint, bendRadius: float, sbendType: int, sbend: SBendCorner) -> None:
        """
        Edits a selected S-Bend corner between the start rcp and end rcp using a 
        bend radius.  
        
        Signature ``EditCornerByBendRadius(startRcp, endRcp, bendRadius, sbendType, sbend)`` 
        
        :param startRcp:  Start rcp must not be None.  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End rcp must not be None.  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendRadius:  Bend radius.  
        :type bendRadius: float 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE_[1-5].  
        :type sbendType: int 
        :param sbend:  S-Bend Corner to be edited.  
        :type sbend: :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def EditCornerByBendRatio(self, startRcp: ControlPoint, endRcp: ControlPoint, bendRatio: float, sbendType: int, sbend: SBendCorner) -> None:
        """
        Edits a S-Bend corner between the start rcp and end rcp using a 
        bend ratio.  
        
        Signature ``EditCornerByBendRatio(startRcp, endRcp, bendRatio, sbendType, sbend)`` 
        
        :param startRcp:  Start rcp must not be None.  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End rcp must not be None.  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendRatio:  Bend ratio.  
        :type bendRatio: float 
        :param sbendType:  Valid values: ROUTE_SBEND_TYPE__[1-5].  
        :type sbendType: int 
        :param sbend:  S-Bend Corner to be edited.  
        :type sbend: :py:class:`NXOpen.Routing.SBendCorner` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class TangencyGroupBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.TangencyGroupBuilder`
    Assign tangency for segments connected with current editing spline.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.AssignTangencyBuilder.CreateTangencyGroupBuilder`
    
    .. versionadded:: NX12.0.0
    """
    SegmentList: NXOpen.SelectNXObjectList = ...
    """
    Returns  the segment current editing.  
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: TangencyGroupBuilder = ...  # unknown typename


class ArcSegment(NXOpen.Arc, ISegment):
    """
    Represents a arc segment.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.SegmentManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetGuid(self) -> str:
        """
        Returns the Globally Unique Identifier (GUID) for this segment.  
        
        Signature ``GetGuid()`` 
        
        :returns:  The GUID for this segment.  
        :rtype: str 
        
        .. versionadded:: NX8.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCorner(self) -> Corner:
        """
        Returns the corner that controls this arc segment, if any.  
        
        Returns None if this segment was created as a connected curve rather than
        from a corner.
        
        Signature ``GetCorner()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Corner` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndRcps(self) -> tuple:
        """
        Return of segment end control points.  
        
        The :py:class:`NXOpen.Routing.ControlPoint` defines an end of a segment 
        
        Signature ``GetEndRcps()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startRcp, endRcp). startRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining start of segment endRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining end of segment 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndRcps(self, startRcp: ControlPoint, endRcp: ControlPoint) -> None:
        """
        Signature ``SetEndRcps(startRcp, endRcp)`` 
        
        :param startRcp:  RCP defining start of segment  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  RCP defining end of segment  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndPoints(self) -> tuple:
        """
        Get the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``GetEndPoints()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startPoint, endPoint). startPoint is a :py:class:`NXOpen.Point3d`.   Location of end 0 in ABS coordinates endPoint is a :py:class:`NXOpen.Point3d`.   Location of end 1 in ABS coordinates 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndPoints(self, startPoint: NXOpen.Point3d, endPoint: NXOpen.Point3d) -> None:
        """
        Set the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``SetEndPoints(startPoint, endPoint)`` 
        
        :param startPoint:  New location of end 0 in ABS coordinates  
        :type startPoint: :py:class:`NXOpen.Point3d` 
        :param endPoint:  New location of end 1 in ABS coordinates  
        :type endPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsTerminalSegment(self) -> Terminal:
        """
        Is given segment a terminal segment?  
        
        Signature ``GetIsTerminalSegment()`` 
        
        :returns:  Is segment a terminal segment?  
        :rtype: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIsTerminalSegment(self, isTerminal: Terminal) -> None:
        """
        Set given segment to be a terminal segment? 
        
        Signature ``SetIsTerminalSegment(isTerminal)`` 
        
        :param isTerminal:  Set as terminal segment?  
        :type isTerminal: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsSegmentInterior(self) -> Interior:
        """
        Query if a segment is interior to any part  
        
        Signature ``GetIsSegmentInterior()`` 
        
        :returns:  Is segment interior?  
        :rtype: :py:class:`NXOpen.Routing.Interior` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSegmentInteriorPart(self, interiorPart: NXOpen.Assemblies.Component) -> None:
        """
        Set a segment to be interior to supplied part 
        
        Signature ``SetSegmentInteriorPart(interiorPart)`` 
        
        :param interiorPart:  Part segment interior?  
        :type interiorPart: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentStock(self) -> 'list[Stock]':
        """
        Returns all stocks that directly reference this segment as part of the path defining the stock.  
        
        Signature ``GetSegmentStock()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentAllStocks(self) -> 'list[Stock]':
        """
        Returns :py:class:`NXOpen.Routing.Stock` as well as :py:class:`NXOpen.Routing.Overstock`
        objects from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetSegmentAllStocks()`` 
        
        :returns:  Array of stocks/overstocks.  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCablewaysLayoutViews(self) -> 'list[NXOpen.Routing.Electrical.CablewaysLayoutView]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` objects
        from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCablewaysLayoutViews()`` 
        
        :returns:  Array of cableways layout views.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCableDevices(self) -> 'list[NXOpen.Routing.Electrical.CableDevice]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CableDevice` objects
        from :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCableDevices()`` 
        
        :returns:  Array of cable devices.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CableDevice` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsEccentricSegment(self) -> Eccentric:
        """
        Is given segment a eccentric segment?  
        
        Signature ``GetIsEccentricSegment()`` 
        
        :returns:  Is segment a eccentric segment?  
        :rtype: :py:class:`NXOpen.Routing.Eccentric` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertLinearToEccentricLinear(self) -> ConvertLinearToEccentricLinear:
        """
        Is line segment converted to eccentric line segment?  
        
        Signature ``ConvertLinearToEccentricLinear()`` 
        
        :returns:  Is line segment converted to eccentric line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertLinearToEccentricLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertEccentricLinearToLinear(self) -> ConvertEccentricLinearToLinear:
        """
        Is line segment eccentric converted to line segment?  
        
        Signature ``ConvertEccentricLinearToLinear()`` 
        
        :returns:  Is line segment eccentric converted to line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertEccentricLinearToLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    FollowCurve: NXOpen.Curve = ...
    """
    Returns   the segment follow curve.  
    
    NULL object indicates segment has no follow curve 
    
    <hr>
    
    Getter Method
    
    Signature ``FollowCurve`` 
    
    :returns:  Follow curve of segment  
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Length: float = ...
    """
    Returns   the length of the segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: ArcSegment = ...  # unknown typename


class RunItemsBuilder(NXOpen.Builder):
    """
    The builder for creating the list item of RunItems   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.DefineRunBuilder.CreateRunItemsBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def SetSelectedItemData(self, scopedObject: NXOpen.TaggedObject, referenceId: str, portName: str, availablePorts: 'list[NXOpen.TaggedObject]') -> None:
        """
        The selected items data of the run 
        
        Signature ``SetSelectedItemData(scopedObject, referenceId, portName, availablePorts)`` 
        
        :param scopedObject: 
        :type scopedObject: :py:class:`NXOpen.TaggedObject` 
        :param referenceId: 
        :type referenceId: str 
        :param portName: 
        :type portName: str 
        :param availablePorts: 
        :type availablePorts: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetVirtualStubItem(self, virtualReferenceId: str) -> NXOpen.TaggedObject:
        """
        A virtual stub item to be used as From/To item.  
        
        Signature ``GetVirtualStubItem(virtualReferenceId)`` 
        
        :param virtualReferenceId: 
        :type virtualReferenceId: str 
        :returns: 
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    CurrentSelectedPort: NXOpen.TaggedObject = ...
    """
    Returns or sets  the ports of FROM/TO item of the run.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentSelectedPort`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentSelectedPort`` 
    
    :param selectedPort: 
    :type selectedPort: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RunItems: NXOpen.SelectNXObjectList = ...
    """
    Returns  the list item of run From/To item 
    
    <hr>
    
    Getter Method
    
    Signature ``RunItems`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    VirtualReferenceId: str = ...
    """
    Returns or sets  the virtual reference Id for FROM/TO items of a run.  
    
    <hr>
    
    Getter Method
    
    Signature ``VirtualReferenceId`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``VirtualReferenceId`` 
    
    :param virtualRefIdFrom:  ReferenceId to create a stub item as FROM/TO item of a run.  
    :type virtualRefIdFrom: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: RunItemsBuilder = ...  # unknown typename


class TypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Type():
    """
    Describes the type of overstock. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", " - "
       "FixedCrossSection", " - "
       "Wrapped", " - "
       "Sleeved", " - "
       "Flagged", " - "
    """
    Unknown = -1  # TypeMemberType
    FixedCrossSection = 0  # TypeMemberType
    Wrapped = 1  # TypeMemberType
    Sleeved = 2  # TypeMemberType
    Flagged = 3  # TypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OverstockApplication(NXOpen.NXObject):
    """
    Represents a collection of :py:class:`NXOpen.Routing.OverstockApplication` objects.  
    
    .. versionadded:: NX4.0.0
    """
    
    def GetSegments(self) -> 'list[ISegment]':
        """
        Returns the set of segments over which the overstock is applied.  
        
        Signature ``GetSegments()`` 
        
        :returns:  the contiguous set of segments this overstock
        application is covering.   
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetCrossSections(self) -> 'list[NXOpen.Curve]':
        """
        Gets the cross sections controlled by this object.  
        
        These
        * cross sections could be used for a custom bundling algorithm.   
        
        Signature ``GetCrossSections()`` 
        
        :returns:  Cross sections.   
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetCoveredStocks(self) -> 'list[Stock]':
        """
        Gets the :py:class:`NXOpen.Routing.Stock` and
        * :py:class:`NXOpen.Routing.OverstockApplication` that this
        * :py:class:`NXOpen.Routing.OverstockApplication` covers.  
        
        Signature ``GetCoveredStocks()`` 
        
        :returns:  Covered stocks.   
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def SetCoveredStocks(self, coveredStocks: 'list[Stock]') -> None:
        """
        Sets the :py:class:`NXOpen.Routing.Stock` and
        * :py:class:`NXOpen.Routing.OverstockApplication` that this
        * :py:class:`NXOpen.Routing.OverstockApplication` covers.  
        
        Signature ``SetCoveredStocks(coveredStocks)`` 
        
        :param coveredStocks:  Stocks to cover  
        :type coveredStocks: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetOverstocks(self) -> 'list[Overstock]':
        """
        Returns :py:class:`NXOpen.Routing.Overstock` objects covering this :py:class:`NXOpen.Routing.OverstockApplication`.  
        
        Signature ``GetOverstocks()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Overstock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    Definition: Method = ...
    """
    Returns   the method used to define the overstock application.  
    
    <hr>
    
    Getter Method
    
    Signature ``Definition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Method` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    EndPointOfOverstock: NXOpen.Point = ...
    """
    Returns   the end point of overstock on the path.  
    
    Used in the Point to Point definition method. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPointOfOverstock`` 
    
    :returns:  the end point for the overstock  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    MidPointOfOverstock: NXOpen.Point = ...
    """
    Returns   the mid point of overstock on the path.  
    
    Used in Point and Length definition
    method. 
    
    <hr>
    
    Getter Method
    
    Signature ``MidPointOfOverstock`` 
    
    :returns:  the mid point of the overstock  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    StartOfPath: ControlPoint = ...
    """
    Returns   the start control point of the path over which the overstock is applied.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartOfPath`` 
    
    :returns:  the control point at the start of the set of contiguous set of
    segments.  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    StartPointOfOverstock: NXOpen.Point = ...
    """
    Returns   the start point of overstock on the path.  
    
    Used in
    Interval, Point to Point, and Point and Length definition
    methods. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPointOfOverstock`` 
    
    :returns:  the start point for the overstock  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    Null: OverstockApplication = ...  # unknown typename


class DesignRule(NXOpen.NXObject):
    """
    Represents :py:class:`NXOpen.Routing.DesignRule` object   
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    
    .. deprecated::  NX12.0.0
       Use :py:class:`NXOpen.Routing.CustomManager.DesignRule` instead.
    """
    
    def GetViolations(self) -> 'list[DesignRuleViolation]':
        """
        Returns any violations recorded against this design rule.  
        
        Signature ``GetViolations()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddViolations(self, violations: 'list[DesignRuleViolation]') -> None:
        """
        Adds violations to this design rule.  
        
        Signature ``AddViolations(violations)`` 
        
        :param violations: 
        :type violations: list of :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX4.0.2
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`Routing.DesignRule.CreateViolation` instead.
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateViolation(self, shortDescription: str, longDescription: str, objects: 'list[NXOpen.NXObject]') -> DesignRuleViolation:
        """
        Creates a new violation for this design rule.  
        
        Signature ``CreateViolation(shortDescription, longDescription, objects)`` 
        
        :param shortDescription: 
        :type shortDescription: str 
        :param longDescription: 
        :type longDescription: str 
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ClearViolationOnObject(self, objectToCheck: NXOpen.NXObject) -> None:
        """
        Finds the violation of this rule attached to the given object and deletes it.  
        
        Useful when the given object no longer violates this rule.
        Call :py:meth:`NXOpen.Update.DoUpdate` after clearing violations. 
        
        Signature ``ClearViolationOnObject(objectToCheck)`` 
        
        :param objectToCheck: 
        :type objectToCheck: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Application: str = ...
    """
    Returns  the application to which this design rule belongs.  
    
    <hr>
    
    Getter Method
    
    Signature ``Application`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Description: str = ...
    """
    Returns  the description of this design rule.  
    
    <hr>
    
    Getter Method
    
    Signature ``Description`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Drname: str = ...
    """
    Returns  the name of this design rule.  
    
    <hr>
    
    Getter Method
    
    Signature ``Drname`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DesignRule = ...  # unknown typename


class EditLineSegmentBuilder(NXOpen.Builder):
    """
    Builder for the "Edit Line Segment" operation.  
    
    Sets (and locks or unlocks)
    the length of :py:class:`NXOpen.Routing.LineSegment` objects.  Also moves geometry
    attached to the line segment to ensure that the attached geometry has the correct
    shape after an edit. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateEditLineSegmentBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetOrientation(self) -> tuple:
        """
        Determines the orientation information for the line selected by the user.  
        
        Returns
        false if there is no line currently stored in the builder.   
        
        Signature ``GetOrientation()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (isValid, startPoint, direction). isValid is a bool.   True if there                                                                                    is a line                                                                                     associated with                                                                                    this builder. startPoint is a :py:class:`NXOpen.Point3d`.   The start                                                                                 of the line. direction is a :py:class:`NXOpen.Vector3d`.   The direction                                                                                 of the line                                                                                 (unit vector).
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def InitializeFromLine(self, line: LineSegment) -> None:
        """
        Initializes (or resets) the builder based off of the input line segment.  
        
        Signature ``InitializeFromLine(line)`` 
        
        :param line:  Line object, may be None 
        :type line: :py:class:`NXOpen.Routing.LineSegment` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DragLineLength(self) -> None:
        """
        Updates the line length based on the expression stored in this builder.  
        
        The line is
        not fully updated only partially updated (i.e. solid bodies build on the line do not
        update).    This method assumes the difference between the new length value and the
        previous length value is very small (e.g. a drag operation). 
        
        Signature ``DragLineLength()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ModifiedLineLength(self) -> None:
        """
        Updates the line length based on the expression stored in this builder.  
        
        The line is
        not fully updated only partially updated (i.e. solid bodies build on the line do not
        update).   This method doesn't assume anything about the new value.  This method
        updates the line incrementally from the original length to the new length
        as this usually results in better looking geometry. 
        
        Signature ``ModifiedLineLength()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def StopDrag(self) -> None:
        """
        Stop the drag operation if it has begun.  
        
        This will commit the drag and update the assembly.
        This will not remove the segment from the builder and dragging can be restarted by calling
        :py:meth:`NXOpen.Routing.EditLineSegmentBuilder.RestartDrag`. 
        
        Signature ``StopDrag()`` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RestartDrag(self) -> None:
        """
        Restart a line drag operation.  
        
        This routine should only be called if 
        :py:meth:`NXOpen.Routing.EditLineSegmentBuilder.StopDrag`. was previously
        called to stop a line drag operation. 
        
        Signature ``RestartDrag()`` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetActiveRcpPositon(self) -> NXOpen.Point3d:
        """
        Determines the active RCP for the line selected by the user.  
        
        This is end RCP other than the start point of line segment.
        This RCP could be dragged along the segment. 
        
        Signature ``GetActiveRcpPositon()`` 
        
        :returns:  End point other
        than the start point 
        of line segment.  
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DetachActiveRcp(self) -> None:
        """
        Detaches the line segment, stored in builder, at its active end RCP.  
        
        By reversing the direction of line segment, user could make other end RCP as active 
        RCP. 
        
        Signature ``DetachActiveRcp()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddLineToSetOfAllEditedSegments(self) -> None:
        """
        Adds the current line segment to the set of all line segments that have been edited
        by the user.  
        
        Signature ``AddLineToSetOfAllEditedSegments()`` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ConvertEccentricSegment: bool = ...
    """
    Returns or sets  the conversion flag.  
    
    Forces the commit method to convert line segment to eccentric line segment if set to true.  Otherwise 
    convert it to vice versa 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertEccentricSegment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertEccentricSegment`` 
    
    :param convertEccentricSegment: 
    :type convertEccentricSegment: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length expression.  
    
    This data from this expression is copied to (or from)
    the distance constraint applied to the ends of the line segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    LineSelection: SelectLineSegment = ...
    """
    Returns  the line selection.  
    
    Stores the line segment selected by the user. 
    
    <hr>
    
    Getter Method
    
    Signature ``LineSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SelectLineSegment` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    LockLength: bool = ...
    """
    Returns or sets  the lock length flag.  
    
    Forces the commit method to lock the length to the 
    specified value if set to true.  Otherwise the length of the line segment 
    is unconstrained after the commit method is invoked. 
    
    <hr>
    
    Getter Method
    
    Signature ``LockLength`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``LockLength`` 
    
    :param lockLength: 
    :type lockLength: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the reverse direction flag.  
    
    Flips the direction that the extends towards (or
    shrinks along).  This flips the origin of the line as well as the direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: EditLineSegmentBuilder = ...  # unknown typename


class PortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.Port` objects.  
    
    Iterating this collection only returns live uncondemned objects contained in the owning part
    of the collection. Note that :py:class:`NXOpen.Routing.Port` is a smart object and many smart objects are condemned as they
    only exist to support other objects and are not displayed.
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateExtractPort(self, port: Port) -> ExtractPort:
        """
        Creates a :py:class:`NXOpen.Routing.ExtractPort`.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateExtractPort(port)`` 
        
        :param port:  Port to extract from  
        :type port: :py:class:`NXOpen.Routing.Port` 
        :returns:  Extracted Port  
        :rtype: :py:class:`NXOpen.Routing.ExtractPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateExtractPort(self, port: Port, allowMultipleConnections: bool) -> ExtractPort:
        """
        Creates a :py:class:`NXOpen.Routing.ExtractPort`.   
        
        Signature ``CreateExtractPort(port, allowMultipleConnections)`` 
        
        :param port:  Port to extract from  
        :type port: :py:class:`NXOpen.Routing.Port` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns:  Extracted Port  
        :rtype: :py:class:`NXOpen.Routing.ExtractPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertToFeatures(self) -> None:
        """
        Cycles through all the :py:class:`NXOpen.Routing.Port` objects and creates
        a :py:class:`NXOpen.Routing.FeaturePort` object for :py:class:`NXOpen.Routing.FittingPort` object,
        :py:class:`NXOpen.Routing.FixturePort` object, :py:class:`NXOpen.Routing.MultiPort` object, and
        :py:class:`NXOpen.Routing.TerminalPort` object.  
        
        Signature ``ConvertToFeatures()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponentPorts(self, component: NXOpen.Assemblies.Component) -> 'list[Port]':
        """
        Given a component, returns the port occurrences that belong to it.  
        
        Returns None otherwise.  
        
        Signature ``GetComponentPorts(component)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.Assemblies.Component` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetObjectPorts(self, entity: NXOpen.NXObject) -> 'list[Port]':
        """
        Given any :py:class:`NXObject`, returns any port occurrences that
        belong to it. Returns None otherwise.
        
        The type of ports returned depends on the type of object given.
        
        If given a :py:class:`NXOpen.Routing.ISegment`, if there is stock on the segment,
        returns the ports from stock.  
        
        If there is no stock, returns any fitting ports at the segment ends.
        
        If given a :py:class:`NXOpen.Routing.Stock`, returns the ports at ends of stock.
        
        If given a :py:class:`NXOpen.Routing.Port`, returns itself.
        
        if given a :py:class:`NXOpen.Routing.ControlPoint`, returns any fitting ports at the Control Point.
        
        If given a part, returns any ports in the part.
        
        Signature ``GetObjectPorts(entity)`` 
        
        :param entity: 
        :type entity: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class RunCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.Run` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateRun(self, runId: str, runType: str, from_: 'list[NXOpen.NXObject]', to: 'list[NXOpen.NXObject]', member: 'list[NXOpen.NXObject]') -> Run:
        """
        Creates a fully defined :py:class:`NXOpen.Routing.Run` object whose "From" item(s),
        "To" item(s), and "Member" item(s) are assigned to components in the assembly.  
        
        Signature ``CreateRun(runId, runType, from, to, member)`` 
        
        :param runId:  Unique identifier of the Run  
        :type runId: str 
        :param runType:  Type of the Run  
        :type runType: str 
        :param from:  Array of "From" items. Must be :py:class:`NXOpen.Routing.Port`,                                             :py:class:`NXOpen.Routing.Run` or :py:class:`NXOpen.Routing.ControlPoint`  
        :type from: list of :py:class:`NXOpen.NXObject` 
        :param to:  Array of "To" items. Must be :py:class:`NXOpen.Routing.Port`,                                             :py:class:`NXOpen.Routing.Run` or :py:class:`NXOpen.Routing.ControlPoint`  
        :type to: list of :py:class:`NXOpen.NXObject` 
        :param member:  Array of "Member" items. Must be :py:class:`NXOpen.Assemblies.Component`,                                             :py:class:`NXOpen.Routing.ISegment` or Routing.Stock  
        :type member: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateRun(self, runId: str, runType: str, attributes: CharacteristicList, fromItems: 'list[RunItem]', toItems: 'list[RunItem]', memberItems: 'list[RunItem]') -> Run:
        """
        Creates a :py:class:`NXOpen.Routing.Run` with items that are not assigned to components in the assembly.  
        
        Signature ``CreateRun(runId, runType, attributes, fromItems, toItems, memberItems)`` 
        
        :param runId:  Unique identifier of the Run  
        :type runId: str 
        :param runType:  Type of the Run  
        :type runType: str 
        :param attributes:  Run attributes  
        :type attributes: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param fromItems:  Array of "From" items.  
        :type fromItems: list of :py:class:`NXOpen.Routing.RunItem` 
        :param toItems:  Array of "To" items.  
        :type toItems: list of :py:class:`NXOpen.Routing.RunItem` 
        :param memberItems:  Array of "Member" items.  
        :type memberItems: list of :py:class:`NXOpen.Routing.RunItem` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateRun(self, runId: str, runType: str, attributes: CharacteristicList) -> Run:
        """
        Creates an empty :py:class:`NXOpen.Routing.Run` using just a unique Run identifier and a type.  
        
        Signature ``CreateRun(runId, runType, attributes)`` 
        
        :param runId:  Unique identifier of the Run  
        :type runId: str 
        :param runType:  Type of the Run  
        :type runType: str 
        :param attributes:  Run attributes  
        :type attributes: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def FindPath(self, source: 'list[NXOpen.NXObject]', target: 'list[NXOpen.NXObject]') -> 'list[NXOpen.NXObject]':
        """
        Find a run path connecting all input From items to the To items.  
        
        Signature ``FindPath(source, target)`` 
        
        :param source:  Array of from items. Must be :py:class:`NXOpen.Routing.Port`,                                                :py:class:`NXOpen.Routing.Run` or :py:class:`NXOpen.Routing.ControlPoint`  
        :type source: list of :py:class:`NXOpen.NXObject` 
        :param target:  Array of to items. Must be :py:class:`NXOpen.Routing.Port`,                                                :py:class:`NXOpen.Routing.Run` or :py:class:`NXOpen.Routing.ControlPoint`  
        :type target: list of :py:class:`NXOpen.NXObject` 
        :returns:  Array of member items. Must be :py:class:`NXOpen.Assemblies.Component`,
        :py:class:`NXOpen.Routing.ISegment` or Routing.Stock  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class ObjectRelationship(RootObject):
    """
    Represents a relationship between Routing objects.
    
    ObjectRelationship is the abstract base class for :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase`
    and :py:class:`NXOpen.Routing.DeviceRelationship`.  This class is reserved for future use.
    
    No creator is available in KF because this is an abstract class.
    
    .. versionadded:: NX4.0.2
    """
    Null: ObjectRelationship = ...  # unknown typename


class DeviceRelationshipRelationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DeviceRelationshipRelationType():
    """
    Specifies the nature of the relationship between the related and relating objects.
    
    .. versionadded:: NX4.0.2
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AssociatedEquipment", "the related single devices are attached to the relating single device"
    """
    AssociatedEquipment = 0  # DeviceRelationshipRelationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DeviceRelationship(ObjectRelationship):
    """
    Represents a relationship between :py:class:`NXOpen.Routing.SingleDevice` objects.
    
    ObjectRelationship is the abstract base class for :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase`
    and :py:class:`NXOpen.Routing.DeviceRelationship`.
    
    No creator is available in KF because this is an abstract class.
    
    .. versionadded:: NX4.0.2
    """
    
    class RelationType():
        """
        Specifies the nature of the relationship between the related and relating objects.
        
        .. versionadded:: NX4.0.2
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AssociatedEquipment", "the related single devices are attached to the relating single device"
        """
        AssociatedEquipment = 0  # DeviceRelationshipRelationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetRelatingSingleDevice(self) -> SingleDevice:
        """
        Returns the one :py:class:`NXOpen.Routing.SingleDevice` to which the other :py:class:`NXOpen.Routing.SingleDevice` objects are related.  
        
        Signature ``GetRelatingSingleDevice()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRelatingSingleDevice(self, relatingDevice: SingleDevice) -> None:
        """
        Sets the one Relating :py:class:`NXOpen.Routing.SingleDevice`.  
        
        Signature ``SetRelatingSingleDevice(relatingDevice)`` 
        
        :param relatingDevice:  The new Relating device  
        :type relatingDevice: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRelatedSingleDevices(self) -> 'list[SingleDevice]':
        """
        Returns the list of related :py:class:`NXOpen.Routing.SingleDevice` objects.  
        
        The objects in the list are related to the relating :py:class:`NXOpen.Routing.SingleDevice` object.  
        
        Signature ``GetRelatedSingleDevices()`` 
        
        :returns:  Set of :py:class:`NXOpen.Routing.SingleDevice` objects that are related to the Relating SingleDevice  
        :rtype: list of :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddRelatedSingleDevice(self, relatedDevice: SingleDevice) -> None:
        """
        Adds a :py:class:`NXOpen.Routing.SingleDevice` to the collection of related :py:class:`NXOpen.Routing.SingleDevice` objects.  
        
        Signature ``AddRelatedSingleDevice(relatedDevice)`` 
        
        :param relatedDevice:  The :py:class:`NXOpen.Routing.SingleDevice` to add to the set of related objects  
        :type relatedDevice: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveRelatedSingleDevice(self, relatedDevice: SingleDevice) -> None:
        """
        Removes a :py:class:`NXOpen.Routing.SingleDevice` from the collection of related :py:class:`NXOpen.Routing.SingleDevice` objects.  
        
        Signature ``RemoveRelatedSingleDevice(relatedDevice)`` 
        
        :param relatedDevice:  The :py:class:`NXOpen.Routing.SingleDevice` that is removed from the set of related objects  
        :type relatedDevice: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReplaceRelatedSingleDevices(self, relatedDevices: 'list[SingleDevice]') -> None:
        """
        Replaces the collection of related :py:class:`NXOpen.Routing.SingleDevice` objects.  
        
        Signature ``ReplaceRelatedSingleDevices(relatedDevices)`` 
        
        :param relatedDevices:  A set of :py:class:`NXOpen.Routing.SingleDevice` objects that replaces the current set of related objects  
        :type relatedDevices: list of :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    RelationshipType: DeviceRelationshipRelationType = ...
    """
    Returns or sets   the type of the relationship.  
    
    <hr>
    
    Getter Method
    
    Signature ``RelationshipType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DeviceRelationshipRelationType` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RelationshipType`` 
    
    :param relationshipType:  The new type of the relationship  
    :type relationshipType: :py:class:`NXOpen.Routing.DeviceRelationshipRelationType` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DeviceRelationship = ...  # unknown typename


class CornerTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerType():
    """
    Various Corner subtypes. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bend", "Bend corner"
       "Miter", "Miter corner."
       "Cope", "Cope corner."
       "Discontinuity", "Discontinuity corner."
       "NotSet", "No corner."
    """
    Bend = 0  # CornerTypeMemberType
    Miter = 1  # CornerTypeMemberType
    Cope = 2  # CornerTypeMemberType
    Discontinuity = 3  # CornerTypeMemberType
    NotSet = 4  # CornerTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Corner(NXOpen.NXObject):
    """
    The Routing Corner is the abstract parent class of all other corner objects.  
    
    The
    corner object defines some behavior associated with segments and stocks that
    are connected at a single routing control point.
    
    Corners are abstract objects.
    
    .. versionadded:: NX4.0.0
    """
    
    class Type():
        """
        Various Corner subtypes. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bend", "Bend corner"
           "Miter", "Miter corner."
           "Cope", "Cope corner."
           "Discontinuity", "Discontinuity corner."
           "NotSet", "No corner."
        """
        Bend = 0  # CornerTypeMemberType
        Miter = 1  # CornerTypeMemberType
        Cope = 2  # CornerTypeMemberType
        Discontinuity = 3  # CornerTypeMemberType
        NotSet = 4  # CornerTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetStocks(self) -> 'list[Stock]':
        """
        Returns the stocks that are assigned to segments affected by
        * this corner object.  
        
        Signature ``GetStocks()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Rcp: ControlPoint = ...
    """
    Returns or sets  the corner ControlPoint referenced by the Corner object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rcp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Rcp`` 
    
    :param rcp: 
    :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: Corner = ...  # unknown typename


class DiscontinuityCorner(Corner):
    """
    A discontinuity corner is a corner that forces :py:class:`Routing.Stock` objects
    to split as they cover the segments attached to the discontinuity corner.  
    
    The discontinuity specifies over which two segments (at a junction of 2 or more segments)
    that the break should occur.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.DiscontinuityCornerCollection.Create`
    
    .. versionadded:: NX4.0.0
    """
    
    def Remove(self) -> None:
        """
        Removes (deletes) the input discontinuity corner.  
        
        Signature ``Remove()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    FirstSegment: ISegment = ...
    """
    Returns or sets  the first segment of a discontinuity corner, segment must be
    attached to the :py:class:`Routing.ControlPoint` that
    defines this corner.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstSegment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ISegment` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstSegment`` 
    
    :param segment: 
    :type segment: :py:class:`NXOpen.Routing.ISegment` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SecondSegment: ISegment = ...
    """
    Returns or sets  the second segment of a discontinuity corner, segment must be
    attached to the :py:class:`Routing.ControlPoint` that
    defines this corner.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondSegment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ISegment` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondSegment`` 
    
    :param segment: 
    :type segment: :py:class:`NXOpen.Routing.ISegment` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DiscontinuityCorner = ...  # unknown typename


class ConnectPathBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.ConnectPathBuilder`.  
    
    Routing.ConnectPathBuilderis used to control the connecting of 
    Routing.ControlPoints within the distance tolerance specified.
    This eliminates duplicate Routing.ControlPoints such that only one 
    Routing.ControlPoint remains.  The Routing.Segments that were defined 
    by the duplicate Routing.ControlPoints are now defined by the remaining 
    Routing.ControlPoint.  Routing.ConnectPath is the reverse operation to 
    Routing.DiscontinuityCorner. 
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateConnectPathBuilder`
    
    Default values.
    
    ==========  =============================================
    Property    Value
    ==========  =============================================
    Tolerance   0.01 (millimeters part), 0.001 (inches part) 
    ==========  =============================================
    
    .. versionadded:: NX7.5.0
    """
    Selection: NXOpen.SelectNXObjectList = ...
    """
    Returns  the Routing.  
    
    ControlPoints that are selected. 
    
    <hr>
    
    Getter Method
    
    Signature ``Selection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Tolerance: float = ...
    """
    Returns or sets  the 3D distance within which Routing.  
    
    ControlPoints will be considered duplicates 
    and some will be merged away so that only one Routing.ControlPoint remains. 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ConnectPathBuilder = ...  # unknown typename


class UnifyPathBuilder(NXOpen.Builder):
    """
    Builder to unify :py:class:`Routing.Stock` and :py:class:`Assemblies.Component`
    based on specified characteristic values.  
    
    The builder takes a set of objects and replaces them with new objects that matches
    the given characterstics.
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateUnifyPathBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetUnifyCharacteristics(self) -> CharacteristicList:
        """
        Returns :py:class:`Routing.CharacteristicList` to be used to find
        matching :py:class:`Routing.Stock` and :py:class:`Assemblies.Component`
        to replace.  
        
        Signature ``GetUnifyCharacteristics()`` 
        
        :returns: The characteristics to use in finding a replacement for the given object. 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetUnifyCharacteristics(self, charxType: NXOpen.NXObjectAttributeType, charxName: str, charxValue: str) -> None:
        """
        Sets the characteristics to be applied
        
        Signature ``SetUnifyCharacteristics(charxType, charxName, charxValue)`` 
        
        :param charxType: 
        :type charxType: :py:class:`NXOpen.NXObjectAttributeType` 
        :param charxName: 
        :type charxName: str 
        :param charxValue: The characteristics to use in finding a replacement for the given object. 
        :type charxValue: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    ReferenceObject: NXOpen.SelectNXObject = ...
    """
    Returns  the reference object used to extract characteristics to unify.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RouteObjectCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector to select objects to unify.  
    
    <hr>
    
    Getter Method
    
    Signature ``RouteObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: UnifyPathBuilder = ...  # unknown typename


class CopeCornerBuilder(NXOpen.Builder):
    """
    Builder class for Cope Corner object  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateCopeCornerBuilder`
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       Use :py:class:`NXOpen.Routing.AssignCornerBuilder` instead.
    """
    
    def SetStockList(self, objects: 'list[Stock]') -> None:
        """
        Set the :py:class:`NXOpen.Routing.Stock` object list when list box
        is updated.  
        
        Signature ``SetStockList(objects)`` 
        
        :param objects:  Routing Stocks for cope creation 
        :type objects: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    SelectControlPoint: NXOpen.SelectNXObject = ...
    """
    Returns  the user selected :py:class:`NXOpen.Routing.ControlPoint`
    for cope corner creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectControlPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced")
    """
    SelectCopeStock: NXOpen.SelectNXObjectList = ...
    """
    Returns  the user selected correct object where correct object is
    :py:class:`NXOpen.Routing.Stock` and :py:class:`NXOpen.Routing.ISegment`.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCopeStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced")
    """
    Null: CopeCornerBuilder = ...  # unknown typename


class TransformPathBuilderTransformOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransformPathBuilderTransformOption():
    """
    Tranform operation to perform. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MoveOriginal", "Move the selected entities."
       "CopyOriginal", "Copy the selected entities."
    """
    MoveOriginal = 0  # TransformPathBuilderTransformOptionMemberType
    CopyOriginal = 1  # TransformPathBuilderTransformOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransformPathBuilderCopyAttributesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransformPathBuilderCopyAttributes():
    """
    Specifies what attributes to copy during Transform Path 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Defaults", "Copy Attributes as per defaults."
       "UserSpecified", "Copy Attributes as per user defined."
    """
    Defaults = 0  # TransformPathBuilderCopyAttributesMemberType
    UserSpecified = 1  # TransformPathBuilderCopyAttributesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransformPathBuilder(NXOpen.Builder):
    """
    Builder for the "Transform Path" operation.  
    
    Allows the user to perform
    either a "Transform" or "Copy" of Routing objects.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateTransformPathBuilder`
    
    Default values.
    
    ========================  =====================
    Property                  Value
    ========================  =====================
    Transform.DeltaEnum       ReferenceWcsWorkPart 
    ------------------------  ---------------------
    Transform.DeltaXc.Value   0.0 
    ------------------------  ---------------------
    Transform.DeltaYc.Value   0.0 
    ------------------------  ---------------------
    Transform.DeltaZc.Value   0.0 
    ========================  =====================
    
    .. versionadded:: NX6.0.0
    """
    
    class TransformOption():
        """
        Tranform operation to perform. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MoveOriginal", "Move the selected entities."
           "CopyOriginal", "Copy the selected entities."
        """
        MoveOriginal = 0  # TransformPathBuilderTransformOptionMemberType
        CopyOriginal = 1  # TransformPathBuilderTransformOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CopyAttributes():
        """
        Specifies what attributes to copy during Transform Path 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Defaults", "Copy Attributes as per defaults."
           "UserSpecified", "Copy Attributes as per user defined."
        """
        Defaults = 0  # TransformPathBuilderCopyAttributesMemberType
        UserSpecified = 1  # TransformPathBuilderCopyAttributesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def StartDrag(self) -> None:
        """
        Begin a drag operation.  
        
        Signature ``StartDrag()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DragByTransform(self, translation: NXOpen.Vector3d, rotation: NXOpen.Matrix3x3) -> None:
        """
        Drag the selected objects by the given translation and rotation.  
        
        Only
        call after invoking the :py:meth:`Routing.TransformPathBuilder.StartDrag`
        method.  After finished dragging, call
        :py:meth:`Routing.TransformPathBuilder.StopDrag`.
        
        Signature ``DragByTransform(translation, rotation)`` 
        
        :param translation:  The translation to be applied. 
        :type translation: :py:class:`NXOpen.Vector3d` 
        :param rotation:  The rotation to be applied  
        :type rotation: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def StopDrag(self) -> None:
        """
        End a drag operation.  
        
        Signature ``StopDrag()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DestroyAllPreviewObjects(self) -> None:
        """
        Destroys all preview objects associated with this operation.  
        
        Caller must
        call update to complete the deletion of the preview objects. 
        
        Signature ``DestroyAllPreviewObjects()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCopyTransform(self, translation: NXOpen.Vector3d, rotation: NXOpen.Matrix3x3) -> None:
        """
        Sets the transform to use for the copy operation.  
        
        Signature ``SetCopyTransform(translation, rotation)`` 
        
        :param translation:  The translation to be applied. 
        :type translation: :py:class:`NXOpen.Vector3d` 
        :param rotation:  The rotation to be applied  
        :type rotation: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIthSetOfObjects(self, ith: int) -> 'list[NXOpen.NXObject]':
        """
        Gets the set of objects created for the "ith" copy during the
        commit method.  
        
        The 0th element is the original set of objects
        to copy.  
        
        Signature ``GetIthSetOfObjects(ith)`` 
        
        :param ith:  Which set of copy objects                                                                    to retrieve, must be in                                                                    the range 0 to the number                                                                    of copies minus 1.  
        :type ith: int 
        :returns:  Copied objects.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DetachSelectedPath(self) -> None:
        """
        Detaches the selected path ends from the connected routing segments.  
        
        The detached path can be attached back to the previously connected routing
        segments by using :py:meth:`Routing.TransformPathBuilder.AttachSelectedPath`
        
        Signature ``DetachSelectedPath()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AttachSelectedPath(self) -> None:
        """
        Attaches the selected path back to the path it was originally
        attached to before the call to :py:meth:`Routing.TransformPathBuilder.DetachSelectedPath`
        
        Signature ``AttachSelectedPath()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveConnectedPartsInBuilder(self) -> None:
        """
        Remove object from transform object list of builder as per list updated by
        :py:meth:`Routing.TransformPathBuilder.UpdateConnectedPartList`
        
        Signature ``RemoveConnectedPartsInBuilder()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddConnectedPartsInBuilder(self) -> None:
        """
        Add object in transform object list of builder as per list updated by
        :py:meth:`Routing.TransformPathBuilder.UpdateConnectedPartList`
        
        Signature ``AddConnectedPartsInBuilder()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateConnectedPartList(self, selectedObject: 'list[NXOpen.NXObject]', deselectedObject: 'list[NXOpen.NXObject]') -> None:
        """
        Update connected part list in builder as per selection or deselection of object 
        
        Signature ``UpdateConnectedPartList(selectedObject, deselectedObject)`` 
        
        :param selectedObject:  Routing objects (segments, control                                                                               points, components, etc.) to transform  
        :type selectedObject: list of :py:class:`NXOpen.NXObject` 
        :param deselectedObject:  Routing objects (segments, control                                                                               points, components, etc.) to transform  
        :type deselectedObject: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateSelObjectsVector(self) -> None:
        """
        Adds selected objects into vector during selection 
        
        Signature ``UpdateSelObjectsVector()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCollisionObject(self, object: NXOpen.NXObject) -> None:
        """
        Sets collision object during the preview 
        
        Signature ``SetCollisionObject(object)`` 
        
        :param object:  Routing object  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCopiedAttributes(self) -> CharacteristicList:
        """
        Get attributes to be copied.  
        
        Signature ``GetCopiedAttributes()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCopiedAttributes(self, charxData: CharacteristicList) -> None:
        """
        Set attributes to be copied.  
        
        Signature ``SetCopiedAttributes(charxData)`` 
        
        :param charxData: 
        :type charxData: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOmittedAttributes(self) -> CharacteristicList:
        """
        Get attributes to be omitted.  
        
        Signature ``GetOmittedAttributes()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOmittedAttributes(self, charxData: CharacteristicList) -> None:
        """
        Set attributes to be omitted.  
        
        Signature ``SetOmittedAttributes(charxData)`` 
        
        :param charxData: 
        :type charxData: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    AcrossAssemblies: bool = ...
    """
    Returns or sets  the flag that indicates whether or not to transform.  
    
    across the assemblies 
    
    <hr>
    
    Getter Method
    
    Signature ``AcrossAssemblies`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AcrossAssemblies`` 
    
    :param acrossAssemblies: 
    :type acrossAssemblies: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    AttributeReferenceSelection: RouteObjectCollector = ...
    """
    Returns  the selection which is used to choose the object from which source object attributes
    should be copied when copying attributes during a Transform Path operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeReferenceSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CheckForDuplicates: bool = ...
    """
    Returns or sets  the flag that indicates whether or not to check for duplicate segments after the copy or transform.  
    
    It applies only to segments and not to control points. 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckForDuplicates`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CheckForDuplicates`` 
    
    :param checkForDups: 
    :type checkForDups: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CopyConnectedParts: bool = ...
    """
    Returns or sets  the method indicates whether connected parts get copied or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyConnectedParts`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CopyConnectedParts`` 
    
    :param copyConnectedParts: 
    :type copyConnectedParts: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    MoveOrCopyOption: TransformPathBuilderTransformOption = ...
    """
    Returns or sets  the operation to perform during the commit method.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoveOrCopyOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.TransformPathBuilderTransformOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``MoveOrCopyOption`` 
    
    :param moveOption: 
    :type moveOption: :py:class:`NXOpen.Routing.TransformPathBuilderTransformOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    MoveWithExtensionSegments: bool = ...
    """
    Returns or sets  a message stating whether or not to move the selected segments with extension segments.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoveWithExtensionSegments`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``MoveWithExtensionSegments`` 
    
    :param moveWithExtSeg: 
    :type moveWithExtSeg: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    NumberOfCopies: int = ...
    """
    Returns or sets  the number of copies to create in the commit method for the option
    :py:class:`Routing.TransformPathBuilderTransformOption.CopyOriginal <Routing.TransformPathBuilderTransformOption>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfCopies`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfCopies`` 
    
    :param numberOfCopies: 
    :type numberOfCopies: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    PathSelection: RouteObjectCollector = ...
    """
    Returns  the path selection.  
    
    Stores the objects to be transformed or copied. 
    
    <hr>
    
    Getter Method
    
    Signature ``PathSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Transform: NXOpen.GeometricUtilities.ModlMotion = ...
    """
    Returns  the motion or transform.  
    
    The transformation to apply to the selected or
    copied objects. 
    
    <hr>
    
    Getter Method
    
    Signature ``Transform`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlMotion` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: TransformPathBuilder = ...  # unknown typename


class SegmentPairBuilder(NXOpen.Builder):
    """
    The builder for creating the list item of SegmentPairs   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.AssignDiscontinuityBuilder.SegmentPairBuilder`
    
    .. versionadded:: NX7.5.0
    """
    PairSegment: NXOpen.SelectNXObjectList = ...
    """
    Returns  the list item of Segment Pairs 
    
    <hr>
    
    Getter Method
    
    Signature ``PairSegment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: SegmentPairBuilder = ...  # unknown typename


class DuctSizeCalculatorBuilderDuctShapeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DuctSizeCalculatorBuilderDuctShapeType():
    """
    This enum represents the shape of the duct 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", " - "
       "Circular", " - "
       "FlatOval", " - "
    """
    Rectangular = 0  # DuctSizeCalculatorBuilderDuctShapeTypeMemberType
    Circular = 1  # DuctSizeCalculatorBuilderDuctShapeTypeMemberType
    FlatOval = 2  # DuctSizeCalculatorBuilderDuctShapeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DuctSizeCalculatorBuilder(NXOpen.Builder):
    """
    Builder to perform calculations of the duct which is to be used in the HVAC applications.  
    
    The duct has some flow attributes and has dimentions.
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDuctSizeCalculatorBuilder`
    
    Default values.
    
    ================================  ======================================
    Property                          Value
    ================================  ======================================
    DuctAreaExp.Value                 0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    DuctAspectRatioExp.Value          0 
    --------------------------------  --------------------------------------
    DuctDiameterExp.Value             0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    DuctEqvalentDiameterExp.Value     0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    DuctHeightExp.Value               0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    DuctShape                         Rectangular 
    --------------------------------  --------------------------------------
    DuctWidthExp.Value                0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    IsCreateSpaceReservationEnabled   0 
    --------------------------------  --------------------------------------
    IsDisplayFlowParamsEnabled        0 
    --------------------------------  --------------------------------------
    VelocityExp.Value                 0 (millimeters part), 0 (inches part) 
    --------------------------------  --------------------------------------
    VolumeFlowRateExp.Value           0 (millimeters part), 0 (inches part) 
    ================================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class DuctShapeType():
        """
        This enum represents the shape of the duct 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", " - "
           "Circular", " - "
           "FlatOval", " - "
        """
        Rectangular = 0  # DuctSizeCalculatorBuilderDuctShapeTypeMemberType
        Circular = 1  # DuctSizeCalculatorBuilderDuctShapeTypeMemberType
        FlatOval = 2  # DuctSizeCalculatorBuilderDuctShapeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DuctAreaExp: NXOpen.Expression = ...
    """
    Returns  the duct area 
    
    <hr>
    
    Getter Method
    
    Signature ``DuctAreaExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    DuctAspectRatioExp: NXOpen.Expression = ...
    """
    Returns  the Aspect ratio of the duct dimentions 
    
    <hr>
    
    Getter Method
    
    Signature ``DuctAspectRatioExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    DuctDiameterExp: NXOpen.Expression = ...
    """
    Returns  the duct diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``DuctDiameterExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    DuctEqvalentDiameterExp: NXOpen.Expression = ...
    """
    Returns  the duct equivalent diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``DuctEqvalentDiameterExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    DuctHeightExp: NXOpen.Expression = ...
    """
    Returns  the duct height 
    
    <hr>
    
    Getter Method
    
    Signature ``DuctHeightExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    DuctShape: DuctSizeCalculatorBuilderDuctShapeType = ...
    """
    Returns or sets  the shape of the duct 
    
    <hr>
    
    Getter Method
    
    Signature ``DuctShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DuctSizeCalculatorBuilderDuctShapeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``DuctShape`` 
    
    :param ductShape: 
    :type ductShape: :py:class:`NXOpen.Routing.DuctSizeCalculatorBuilderDuctShapeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    DuctWidthExp: NXOpen.Expression = ...
    """
    Returns  the duct width 
    
    <hr>
    
    Getter Method
    
    Signature ``DuctWidthExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    IsCreateSpaceReservationEnabled: bool = ...
    """
    Returns or sets  the status of the create space reservation toggle; whether the toggle is on  or off.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsCreateSpaceReservationEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``IsCreateSpaceReservationEnabled`` 
    
    :param isCreateSpaceReservation: 
    :type isCreateSpaceReservation: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    IsDisplayFlowParamsEnabled: bool = ...
    """
    Returns or sets  the ON or OFF status of the Display flow parameters over Segments toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``IsDisplayFlowParamsEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``IsDisplayFlowParamsEnabled`` 
    
    :param isDispFlowParams: 
    :type isDispFlowParams: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    RouteObjectCollector: RouteObjectCollector = ...
    """
    Returns  the route object collector  Stores the routing segments for which calculations are to be done 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    VelocityExp: NXOpen.Expression = ...
    """
    Returns  the velocity component Flow parameter for the duct.  
    
    <hr>
    
    Getter Method
    
    Signature ``VelocityExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    VolumeFlowRateExp: NXOpen.Expression = ...
    """
    Returns  the volume flow rate associated with the duct.  
    
    This is a flow parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``VolumeFlowRateExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Null: DuctSizeCalculatorBuilder = ...  # unknown typename


class RoutingSystem(NXOpen.NXObject):
    """
    Routing object is a collection of :py:class:`NXOpen.Routing.Run` objects.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.RoutingSystem`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetId(self) -> str:
        """
        Returns name of routing.  
        
        Signature ``GetId()`` 
        
        :returns:  Name of given routing  
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetId(self, name: str) -> None:
        """
        Sets name of routing.  
        
        Signature ``SetId(name)`` 
        
        :param name:  Name given to routing  
        :type name: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRuns(self) -> 'list[Run]':
        """
        Retrieves all :py:class:`NXOpen.Routing.Run` objects in RoutingSystem  
        
        Signature ``GetRuns()`` 
        
        :returns:  Runs belonging to the RoutingSytem  
        :rtype: list of :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddRuns(self, runs: 'list[Run]') -> None:
        """
        Adds :py:class:`NXOpen.Routing.Run` objects to a RoutingSystem 
        
        Signature ``AddRuns(runs)`` 
        
        :param runs:  Runs to add to the RoutingSytem  
        :type runs: list of :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveRuns(self, runs: 'list[Run]') -> None:
        """
        Removes :py:class:`NXOpen.Routing.Run` objects from a RoutingSystem.  
        
        Only removes
        Run from the RoutingSystem, does not remove the Run definition 
        
        Signature ``RemoveRuns(runs)`` 
        
        :param runs:  Runs to remove from the RoutingSytem  
        :type runs: list of :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Null: RoutingSystem = ...  # unknown typename


class FittingOverstockCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.FittingOverstock` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class Overstock(Stock):
    """
    Represents an :py:class:`NXOpen.Routing.Overstock` object.  
    
    Creator not available in KF.
    
    .. versionadded:: NX5.0.0
    """
    
    def GetOverstockSegments(self) -> 'list[NXOpen.Curve]':
        """
        Returns the segments over which this :py:class:`NXOpen.Routing.Overstock` is applied.  
        
        Signature ``GetOverstockSegments()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetOverstockType(self) -> Type:
        """
        Returns the type of overstock.  
        
        Possible types are wrapped, sleeved, flagged and
        an overstock with fixed cross section.  
        
        Signature ``GetOverstockType()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Type` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetOverstockCreationMethod(self) -> CreationMethod:
        """
        Returns the creation method of this :py:class:`NXOpen.Routing.Overstock`.  
        
        Signature ``GetOverstockCreationMethod()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CreationMethod` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetNumberOfWraps(self) -> NXOpen.Scalar:
        """
        Returns the number of wraps for this :py:class:`NXOpen.Routing.Overstock`.  
        
        Signature ``GetNumberOfWraps()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Scalar` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetPercentageOverlap(self) -> NXOpen.Scalar:
        """
        Get the overlap percentage of this :py:class:`NXOpen.Routing.Overstock`.  
        
        Signature ``GetPercentageOverlap()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Scalar` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetGapDistance(self) -> NXOpen.Scalar:
        """
        Get the gap distance for this :py:class:`NXOpen.Routing.Overstock`.  
        
        Signature ``GetGapDistance()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Scalar` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetWidth(self) -> NXOpen.Scalar:
        """
        Get the width of this :py:class:`NXOpen.Routing.Overstock`.  
        
        Signature ``GetWidth()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Scalar` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetThickness(self) -> NXOpen.Scalar:
        """
        Get the thickness of this :py:class:`NXOpen.Routing.Overstock`.  
        
        Signature ``GetThickness()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Scalar` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetCoveredStocks(self) -> 'list[Stock]':
        """
        Get the stocks covering this :py:class:`NXOpen.Routing.Overstock`.  
        
        Signature ``GetCoveredStocks()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    Null: Overstock = ...  # unknown typename


class DefineRunBuilder(NXOpen.Builder):
    """
    Builder Class for DefineRun Object   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDefineRunBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def UnifyPath(self) -> None:
        """
        UnifyPath of the run.  
        
        Signature ``UnifyPath()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateRunItemsBuilder(self) -> RunItemsBuilder:
        """
        Creates a RunItems  used to create list item for DefineRun  
        
        Signature ``CreateRunItemsBuilder()`` 
        
        :returns:   runItems builder 
        :rtype: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddMemberItems(self, memberItem: NXOpen.TaggedObject) -> None:
        """
        Append a member item  to the list in the builder for DefineRun 
        
        Signature ``AddMemberItems(memberItem)`` 
        
        :param memberItem:   run member item  
        :type memberItem: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveMemberItems(self, memberItems: 'list[NXOpen.TaggedObject]') -> None:
        """
        Remove a member item  from the list in the builder for DefineRun 
        
        Signature ``RemoveMemberItems(memberItems)`` 
        
        :param memberItems:  member items to be removed from the run.  
        :type memberItems: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    FromItemsList: RunItemsBuilderList = ...
    """
    Returns  the FROM items list of the run.  
    
    The list consists of :py:class:`NXOpen.Routing.DefineRunBuilder` objects. 
    
    <hr>
    
    Getter Method
    
    Signature ``FromItemsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RunItemsBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    MemberItems: RouteObjectCollector = ...
    """
    Returns   the MEMBER items of the run.  
    
    <hr>
    
    Getter Method
    
    Signature ``MemberItems`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RunIdentifier: str = ...
    """
    Returns or sets  the run identifier 
    
    <hr>
    
    Getter Method
    
    Signature ``RunIdentifier`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RunIdentifier`` 
    
    :param runIdentifier: 
    :type runIdentifier: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RunType: str = ...
    """
    Returns or sets  the run type 
    
    <hr>
    
    Getter Method
    
    Signature ``RunType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RunType`` 
    
    :param runType: 
    :type runType: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SpecificationOption: str = ...
    """
    Returns or sets  the specification of the run.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpecificationOption`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SpecificationOption`` 
    
    :param specificationOption: 
    :type specificationOption: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    ToItemsList: RunItemsBuilderList = ...
    """
    Returns  the TO items list of the run .  
    
    The list consists of :py:class:`NXOpen.Routing.DefineRunBuilder` objects. 
    
    <hr>
    
    Getter Method
    
    Signature ``ToItemsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RunItemsBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DefineRunBuilder = ...  # unknown typename


class ChoosePartPluginData(NXOpen.TaggedObject):
    """
    Data object created by Routing for use by the Choose Part plugin called by the Place Part command.  
    
    Routing sends this object to any registered Choose Part plugin.
    
    It is the Choose Part plugin's responsibility to prompt the user to choose a part and then
    fill in the information about the part by calling the methods on this object.
    
    For more information, see :py:class:`Routing.CustomManager` and the
    :py:meth:`Routing.CustomManager.SetChoosePartPlugin`
    
    An instance of this object will be sent to the Choose Part plugin used by Place Part.
    
    .. versionadded:: NX12.0.0
    """
    
    def SetPartName(self, partName: str) -> None:
        """
        Sets the Part Name of the part choosen by the user.  
        
        The Part Name is the key Routing uses to find the .prt file in native mode on disk or
        to find the proper item ID in Teamcenter. The Part Name must exactly match the .prt
        file name or the Item ID in order for Routing to place the part.
        
        Signature ``SetPartName(partName)`` 
        
        :param partName: 
        :type partName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPartNumber(self, partNumber: str) -> None:
        """
        Sets the Part Number of the part choosen by the user.  
        
        The Part Number is an attribute that Routing displays in the Reuse Library.
        Part Number does not have to match the .prt file name or the Item ID in Teamcenter,
        but it often does. Part Name and Part Number are often the same.
        
        Signature ``SetPartNumber(partNumber)`` 
        
        :param partNumber: 
        :type partNumber: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetMemberName(self, memberName: str) -> None:
        """
        Sets the Member Name of the part choosen by the user.  
        
        The unique name of each member in a part family. Routing uses Part Name and Member Name
        together to find the correct .prt file or Teamcenter Item ID in a part family.
        
        Signature ``SetMemberName(memberName)`` 
        
        :param memberName: 
        :type memberName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, characteristics: CharacteristicList) -> None:
        """
        Sets the characteristics of the part choosen by the user.  
        
        Signature ``SetCharacteristics(characteristics)`` 
        
        :param characteristics: 
        :type characteristics: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: ChoosePartPluginData = ...  # unknown typename


class ItemDefinition(RouteObject):
    """
    :py:class:`NXOpen.Routing.ItemDefinition` object corresponds to DDID in AP212 and to a piece
    part or routing stock in NX.  
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    DefiningNxObject: NXOpen.Part = ...
    """
    Returns  the NX object associated with the item definition object.  
    
    NX part object defining the item definition can be a piece part, a group of displayable
    entities or a routing stock.
    
    <hr>
    
    Getter Method
    
    Signature ``DefiningNxObject`` 
    
    :returns:     
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ItemDefinition = ...  # unknown typename


class StockDefinition(ItemDefinition):
    """
    Represents Routing StockDefinition object   
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    OuterDiameter: float = ...
    """
    Returns or sets  the outer diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterDiameter`` 
    
    :returns:      
    :rtype: float 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``OuterDiameter`` 
    
    :param diameter:      
    :type diameter: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: StockDefinition = ...  # unknown typename


class SplinePathBuilderDefiningTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplinePathBuilderDefiningTypes():
    """
    Specifies how the spline points define the shape of the spline. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unsupported", "The defining type is unsupported."
       "Interpolation", "The defining type represents a C1-continuous, interpolation spline."
       "Parametric", "The defining type represents a G1-continuous, parametric curve."
       "Bezier", "The defining type represents a G1-continuous, piecewise cubic Bezier."
       "BezierSlack", "The defining type represents a G1-continuous, piecewise cubic Bezier with pseudo gravity slack."
       "BezierMaxCurvature", "The defining type represents a G1-continuous, piecewise cubic Bezier with bounded maximum curvature."
    """
    Unsupported = 0  # SplinePathBuilderDefiningTypesMemberType
    Interpolation = 1  # SplinePathBuilderDefiningTypesMemberType
    Parametric = 2  # SplinePathBuilderDefiningTypesMemberType
    Bezier = 3  # SplinePathBuilderDefiningTypesMemberType
    BezierSlack = 4  # SplinePathBuilderDefiningTypesMemberType
    BezierMaxCurvature = 5  # SplinePathBuilderDefiningTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplinePathBuilderDefiningPointMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplinePathBuilderDefiningPointMethod():
    """
    Specifies if a new point should be created when adding a point to the spline. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreatePoint", " - "
       "UseExisting", " - "
    """
    CreatePoint = 0  # SplinePathBuilderDefiningPointMethodMemberType
    UseExisting = 1  # SplinePathBuilderDefiningPointMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplinePathBuilderDragModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplinePathBuilderDragMode():
    """
    Specifies if drag network is active when updating the position of a defining point. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Active", "The drag network is active"
       "Inactive", "The drag network is inactive"
    """
    Active = 0  # SplinePathBuilderDragModeMemberType
    Inactive = 1  # SplinePathBuilderDragModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplinePathBuilderSplinePathSlackTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplinePathBuilderSplinePathSlackType():
    """
    Describes the type of slack to be applied to the spline. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PercentLength", "The length of the spline is increased by a percentage of the spline length."
       "AdditionalLength", "The length of the spline is increased by an additional length."
       "LockLength", "The length of the spline is slacking to a specified and locked length."
       "Undefined", "Slack length is undefined."
    """
    PercentLength = 0  # SplinePathBuilderSplinePathSlackTypeMemberType
    AdditionalLength = 1  # SplinePathBuilderSplinePathSlackTypeMemberType
    LockLength = 2  # SplinePathBuilderSplinePathSlackTypeMemberType
    Undefined = 3  # SplinePathBuilderSplinePathSlackTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplinePathBuilderSplinePathAttributeOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplinePathBuilderSplinePathAttributeOptions():
    """
    Describes user attribute methods options.
    These value are used to set minimum checking method.
    If checking method is ratio to diameter than allowable radius will be computed by
    ratioToDiameter x Stock Diameter.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Radius", "A radius method option for spline user attribute"
       "RatioToDiameter", "A ratio to diameter method option for spline user attribute."
    """
    Radius = 0  # SplinePathBuilderSplinePathAttributeOptionsMemberType
    RatioToDiameter = 1  # SplinePathBuilderSplinePathAttributeOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplinePathBuilderSplinePathRadiusSourceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplinePathBuilderSplinePathRadiusSource():
    """
    Describes the method for the constrained curvature spline to be defined as.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", "Specify radius by value."
       "RatioToDiameter", "Specify radius by ratio to stock."
       "Attribute", "Specify radius by attribute."
    """
    Expression = 0  # SplinePathBuilderSplinePathRadiusSourceMemberType
    RatioToDiameter = 1  # SplinePathBuilderSplinePathRadiusSourceMemberType
    Attribute = 2  # SplinePathBuilderSplinePathRadiusSourceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplinePathBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.SplinePathBuilder` object.  
    
    The builder allows for creating and editing D-Cubed constrained splines, adding extensions,
    adding stock offset points, adding stock, locking length, adding slack, and locking to other
    D-Cubed constrained objects.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateSplinePathBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class DefiningTypes():
        """
        Specifies how the spline points define the shape of the spline. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unsupported", "The defining type is unsupported."
           "Interpolation", "The defining type represents a C1-continuous, interpolation spline."
           "Parametric", "The defining type represents a G1-continuous, parametric curve."
           "Bezier", "The defining type represents a G1-continuous, piecewise cubic Bezier."
           "BezierSlack", "The defining type represents a G1-continuous, piecewise cubic Bezier with pseudo gravity slack."
           "BezierMaxCurvature", "The defining type represents a G1-continuous, piecewise cubic Bezier with bounded maximum curvature."
        """
        Unsupported = 0  # SplinePathBuilderDefiningTypesMemberType
        Interpolation = 1  # SplinePathBuilderDefiningTypesMemberType
        Parametric = 2  # SplinePathBuilderDefiningTypesMemberType
        Bezier = 3  # SplinePathBuilderDefiningTypesMemberType
        BezierSlack = 4  # SplinePathBuilderDefiningTypesMemberType
        BezierMaxCurvature = 5  # SplinePathBuilderDefiningTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DefiningPointMethod():
        """
        Specifies if a new point should be created when adding a point to the spline. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreatePoint", " - "
           "UseExisting", " - "
        """
        CreatePoint = 0  # SplinePathBuilderDefiningPointMethodMemberType
        UseExisting = 1  # SplinePathBuilderDefiningPointMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DragMode():
        """
        Specifies if drag network is active when updating the position of a defining point. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Active", "The drag network is active"
           "Inactive", "The drag network is inactive"
        """
        Active = 0  # SplinePathBuilderDragModeMemberType
        Inactive = 1  # SplinePathBuilderDragModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplinePathSlackType():
        """
        Describes the type of slack to be applied to the spline. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PercentLength", "The length of the spline is increased by a percentage of the spline length."
           "AdditionalLength", "The length of the spline is increased by an additional length."
           "LockLength", "The length of the spline is slacking to a specified and locked length."
           "Undefined", "Slack length is undefined."
        """
        PercentLength = 0  # SplinePathBuilderSplinePathSlackTypeMemberType
        AdditionalLength = 1  # SplinePathBuilderSplinePathSlackTypeMemberType
        LockLength = 2  # SplinePathBuilderSplinePathSlackTypeMemberType
        Undefined = 3  # SplinePathBuilderSplinePathSlackTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplinePathAttributeOptions():
        """
        Describes user attribute methods options.
        These value are used to set minimum checking method.
        If checking method is ratio to diameter than allowable radius will be computed by
        ratioToDiameter x Stock Diameter.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Radius", "A radius method option for spline user attribute"
           "RatioToDiameter", "A ratio to diameter method option for spline user attribute."
        """
        Radius = 0  # SplinePathBuilderSplinePathAttributeOptionsMemberType
        RatioToDiameter = 1  # SplinePathBuilderSplinePathAttributeOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplinePathRadiusSource():
        """
        Describes the method for the constrained curvature spline to be defined as.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", "Specify radius by value."
           "RatioToDiameter", "Specify radius by ratio to stock."
           "Attribute", "Specify radius by attribute."
        """
        Expression = 0  # SplinePathBuilderSplinePathRadiusSourceMemberType
        RatioToDiameter = 1  # SplinePathBuilderSplinePathRadiusSourceMemberType
        Attribute = 2  # SplinePathBuilderSplinePathRadiusSourceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddDefiningPointToSpline(self, point: NXOpen.Point, createNewPoint: bool) -> int:
        """
        Adds a defining point to the current spline or creates the first point of the new
        spline.  
        
        Signature ``AddDefiningPointToSpline(point, createNewPoint)`` 
        
        :param point:  Point to add.  
        :type point: :py:class:`NXOpen.Point` 
        :param createNewPoint:  Should the builder create a new point based on the one provided?  
        :type createNewPoint: bool 
        :returns:  Returns the index the point was added along the spline.
        For example, if 3 points exist on the spline and the new point
        was added between points 0 and 1 this variable would be set to 1.
        
        :rtype: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddDefiningPointAtAbsoluteCoords(self, point: NXOpen.Point3d) -> None:
        """
        Adds a point to the spline.  
        
        The point will be the new endpoint of the spline.
        
        Signature ``AddDefiningPointAtAbsoluteCoords(point)`` 
        
        :param point:  The Point to add.  
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateDefiningPointPositionAtIndex(self, index: int, point: NXOpen.Point, inDrag: bool) -> None:
        """
        Updates the position of a point on the spline.  
        
        Signature ``UpdateDefiningPointPositionAtIndex(index, point, inDrag)`` 
        
        :param index:  The index of the point to update position..  
        :type index: int 
        :param point:  The point representing the new position.  
        :type point: :py:class:`NXOpen.Point` 
        :param inDrag:  Is the point currently being dragged?  
        :type inDrag: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateDefiningPoint(self, index: int, point: NXOpen.Point, inDrag: bool, translation: NXOpen.Vector3d) -> None:
        """
        Updates the position of a point on the spline.  
        
        Signature ``UpdateDefiningPoint(index, point, inDrag, translation)`` 
        
        :param index:  The index of the point to update position..  
        :type index: int 
        :param point:  The point representing the new position.  
        :type point: :py:class:`NXOpen.Point` 
        :param inDrag:  Is the point currently being dragged?  
        :type inDrag: bool 
        :param translation:  Translation to redefine the point.  
        :type translation: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteDefiningPointAtIndex(self, index: int) -> None:
        """
        Deletes a defining point from the spline.  
        
        Signature ``DeleteDefiningPointAtIndex(index)`` 
        
        :param index:  Index of the point to delete.  
        :type index: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSplineMethod(self, splineMethod: NXOpen.Positioning.ConstraintSplineType) -> None:
        """
        Sets the defining method of the spline.  
        
        Signature ``SetSplineMethod(splineMethod)`` 
        
        :param splineMethod:  the defining method of the spline.  
        :type splineMethod: :py:class:`NXOpen.Positioning.ConstraintSplineType` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX11.0.2
           Use :py:meth:`Routing.SplinePathBuilder.DefiningTypes` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetLockToSelectedFlag(self, lockSelected: bool) -> None:
        """
        Sets whether the spline will attempt to lock points to selected object.  
        
        This flag is only checked when adding a point to a spline by passing in a smart point to
        derive a new dumb spline point from.
        If the smart point is derived from a Port, ControlPoint, or other Routing Object, the
        new spline defining point will lock to that object.
        This flag is also checked during commit, where endpoint associativity is applied.
        
        Signature ``SetLockToSelectedFlag(lockSelected)`` 
        
        :param lockSelected:  True to lock to selected objects.  
        :type lockSelected: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAddPointsOnSubdivideFlag(self, addPoints: bool) -> None:
        """
        Sets whether or not additional points will be added to a spline which is created as the
        result of a subdivide.  
        
        If true, new points will be added to maintain a shape similar to the original curve.
        
        Signature ``SetAddPointsOnSubdivideFlag(addPoints)`` 
        
        :param addPoints:  True to add points to subdivided splines.  
        :type addPoints: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCreateTangencyFlag(self, createTangency: bool) -> None:
        """
        Sets whether or not additional the newly created spline will be made tangent to
        connecting splines.  
        
        Signature ``SetCreateTangencyFlag(createTangency)`` 
        
        :param createTangency:  True to add tangency.  
        :type createTangency: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSplineLength(self) -> float:
        """
        Gets the current length of the spline.  
        
        Signature ``GetSplineLength()`` 
        
        :returns:  The length of the current spline.  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSplineLengthNoShaping(self) -> float:
        """
        Gets the current length of the spline without shaping applied.  
        
        Signature ``GetSplineLengthNoShaping()`` 
        
        :returns:  The length of the current spline without shaping.  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LockSplineLengthWithShaping(self, length: NXOpen.Expression, slackDirection: NXOpen.Direction) -> None:
        """
        Locks the length of the current spline.  
        
        Signature ``LockSplineLengthWithShaping(length, slackDirection)`` 
        
        :param length:  The length to lock the spline.  
        :type length: :py:class:`NXOpen.Expression` 
        :param slackDirection:  The direction to apply slack. 
        :type slackDirection: :py:class:`NXOpen.Direction` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LockSplineLengthNoShaping(self, length: NXOpen.Expression) -> None:
        """
        Locks the length of the current spline.  
        
        Signature ``LockSplineLengthNoShaping(length)`` 
        
        :param length:  The length to lock the spline.  
        :type length: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAllShaping(self) -> None:
        """
        Removes all shaping applied to the spline (Lock length, slacking).  
        
        Signature ``RemoveAllShaping()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsLengthLocked(self) -> tuple:
        """
        Is the spline length locked? 
        
        Signature ``IsLengthLocked()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (length, isLocked, slackDirection). length is a :py:class:`NXOpen.Expression`.   The locked length of the spline. isLocked is a bool.   Is the spline length locked? slackDirection is a :py:class:`NXOpen.Direction`.   The direction to apply slack. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddSlackToSpline(self, slackType: SplinePathBuilderSplinePathSlackType, slackValue: NXOpen.Expression, slackDirection: NXOpen.Direction) -> None:
        """
        Signature ``AddSlackToSpline(slackType, slackValue, slackDirection)`` 
        
        :param slackType:  The type of slack to add.  
        :type slackType: :py:class:`NXOpen.Routing.SplinePathBuilderSplinePathSlackType` 
        :param slackValue:  The amount of slack to add.  
        :type slackValue: :py:class:`NXOpen.Expression` 
        :param slackDirection:  The direction to apply slack. 
        :type slackDirection: :py:class:`NXOpen.Direction` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsSplineSlacked(self) -> tuple:
        """
        Signature ``IsSplineSlacked()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (slacked, slackType, slackValue, downDir). slacked is a bool.   Is slack applied to the spline? slackType is a :py:class:`NXOpen.Routing.SplinePathBuilderSplinePathSlackType`.   The type of slack. slackValue is a :py:class:`NXOpen.Expression`.   The added amount of slack. downDir is a :py:class:`NXOpen.Direction`.   The slack direction. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def InitializeDrag(self, index: int) -> None:
        """
        Initialize the D-Cubed dragging functionality for the point at index.  
        
        Signature ``InitializeDrag(index)`` 
        
        :param index:  Index of the point to drag.  
        :type index: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CommitDrag(self, definingPoint: NXOpen.Point) -> None:
        """
        Clears the current drag network.  
        
        Signature ``CommitDrag(definingPoint)`` 
        
        :param definingPoint:  Optional UI point defining the position of the spline point.  
        :type definingPoint: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def AssignExtension(self, pointIndex: int, direction: NXOpen.Direction, forwardLength: NXOpen.Expression, backwardLength: NXOpen.Expression) -> None:
        """
        Assigns an extension to the point at pointIndex. 
        
        Signature ``AssignExtension(pointIndex, direction, forwardLength, backwardLength)`` 
        
        :param pointIndex:  Index of the point to assing extension.  
        :type pointIndex: int 
        :param direction:  Direction of the extension.  
        :type direction: :py:class:`NXOpen.Direction` 
        :param forwardLength:  Forward Length of the extension.  
        :type forwardLength: :py:class:`NXOpen.Expression` 
        :param backwardLength:  Backward Length of the extension.  
        :type backwardLength: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def AssignExtension(self, pointIndex: int, direction: NXOpen.Direction, forwardLength: NXOpen.Expression, backwardLength: NXOpen.Expression, forceDeleteOnZeroExpression: bool) -> None:
        """
        Assigns an extension to the point at pointIndex. 
        
        Signature ``AssignExtension(pointIndex, direction, forwardLength, backwardLength, forceDeleteOnZeroExpression)`` 
        
        :param pointIndex:  Index of the point to assign extension.  
        :type pointIndex: int 
        :param direction:  Direction of extension.  
        :type direction: :py:class:`NXOpen.Direction` 
        :param forwardLength:  Forward length of extension.  
        :type forwardLength: :py:class:`NXOpen.Expression` 
        :param backwardLength:  Backward length of extension.  
        :type backwardLength: :py:class:`NXOpen.Expression` 
        :param forceDeleteOnZeroExpression: 
        :type forceDeleteOnZeroExpression: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AssignHealPathExtension(self, pointIndex: int, direction: NXOpen.Direction, forwardLength: NXOpen.Expression, backwardLength: NXOpen.Expression) -> None:
        """
        Assigns an extension to the point at pointIndex for Heal Path.  
        
        Signature ``AssignHealPathExtension(pointIndex, direction, forwardLength, backwardLength)`` 
        
        :param pointIndex:  Index of the point to assing extension.  
        :type pointIndex: int 
        :param direction:  Direction of the extension.  
        :type direction: :py:class:`NXOpen.Direction` 
        :param forwardLength:  Length of the forward extension.  
        :type forwardLength: :py:class:`NXOpen.Expression` 
        :param backwardLength:  Length of the backward extension.  
        :type backwardLength: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX6.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AskDefiningData(self) -> 'list[NXOpen.Point]':
        """
        When a spline is selected for editing, the builder will analyze the spline
        and gather all of the defining data.  
        
        The dialog will use this function
        to retrieve the defining data from the builder to populate its fields.
        
        Signature ``AskDefiningData()`` 
        
        :returns:  Defining points of the spline.  
        :rtype: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetExtensionDataForPointAtIndex(self, index: int) -> tuple:
        """
        Get the extension expressions at the given index.  
        
        Signature ``GetExtensionDataForPointAtIndex(index)`` 
        
        :param index:  Index of the defining point to query.  
        :type index: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (forwardLength, backwardLength, extDirection). forwardLength is a :py:class:`NXOpen.Expression`.   Forward extension length. backwardLength is a :py:class:`NXOpen.Expression`.   Backward extension length. extDirection is a :py:class:`NXOpen.Vector3d`.   Extension direction. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDefiningPointPositions(self) -> 'list[float]':
        """
        Gets the positions of the defining points as an array of doubles.  
        
        Each point's XYZ coordinates are represented by three doubles.
        X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, ...   
        
        Signature ``GetDefiningPointPositions()`` 
        
        :returns:  array of doubles representing the defining points.  
        :rtype: list of float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDefiningPointPositionsAsPoints(self) -> 'list[NXOpen.Point3d]':
        """
        Gets the positions of the defining points as an array of Point3d coordinates.  
        
        Signature ``GetDefiningPointPositionsAsPoints()`` 
        
        :returns:  array of points representing the defining points.  
        :rtype: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRouteSegment(self) -> NXOpen.Curve:
        """
        Gets the routing segment managed by the builder, if it exists.  
        
        Signature ``GetRouteSegment()`` 
        
        :returns:  Visible Routing BCurve Segment.  
        :rtype: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStartAndEndRcp(self) -> tuple:
        """
        Gets the RCPs managed by the builder, if they exist.  
        
        Signature ``GetStartAndEndRcp()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (endRcp, startRcp). endRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   The target ControlPoint. startRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   The source ControlPoint. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DetachPoint(self, index: int) -> None:
        """
        Detaches the point at the selected index from all objects its attached to using a Touch
        constraint.  
        
        Signature ``DetachPoint(index)`` 
        
        :param index:  Index of point to detach.  
        :type index: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOffsetData(self, index: int) -> tuple:
        """
        Returns the Stock Offset data associated with a given point.  
        
        Output can be NULL if the
        associated point is not a stock offset point. 
        
        Signature ``GetOffsetData(index)`` 
        
        :param index:  Index of point to detach.  
        :type index: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (method, basePoint, offDir, exp). method is a int.   The type of offset object.                                                                                         0 = Not Offset,                                                                                         1 = Stock Offset Point,                                                                                         2 = Stock Offset Surface. basePoint is a :py:class:`NXOpen.Point`.   The base point frim the offset object. offDir is a :py:class:`NXOpen.Direction`.   The offset direction. exp is a str.   The expression defining the offset distance. 
        
        .. versionadded:: NX6.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLargestDiameterStock(self) -> Stock:
        """
        Returns the stock with the largest on the current segment.  
        
        Signature ``GetLargestDiameterStock()`` 
        
        :returns:  The stock with the largest diameter.  
        :rtype: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def BlankStockAndGetLargestDia(self) -> Stock:
        """
        Blanks all the stocks on the current segment and returns the stock with the largest
        diameter.  
        
        Signature ``BlankStockAndGetLargestDia()`` 
        
        :returns:  The stock with the largest diameter.  
        :rtype: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX7.5.1
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`Routing.SplinePathBuilder.GetLargestDiameterStock` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnblankStocks(self) -> None:
        """
        Unblanks stocks which were blanked by calling BlankStockAndGetLargestDia
        
        Signature ``UnblankStocks()`` 
        
        .. versionadded:: NX7.5.1
        
        .. deprecated::  NX12.0.0
           There is no need for this method.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLockedSplineMinimumLength(self) -> float:
        """
        Returns the minimum length of the spline.  
        
        The minimum length is the straight line
        distance between all defining points, including extensions.  
        
        Signature ``GetLockedSplineMinimumLength()`` 
        
        :returns:  The minimum length of the spline.  
        :rtype: float 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateExtensionDirectionForPointAtIndex(self, index: int, deltaTrans: NXOpen.Vector3d, orientation: NXOpen.Matrix3x3, inDrag: bool) -> None:
        """
        Update the extension orientation at the point index.  
        
        Signature ``UpdateExtensionDirectionForPointAtIndex(index, deltaTrans, orientation, inDrag)`` 
        
        :param index:  Index of the point to analyze.  
        :type index: int 
        :param deltaTrans:  Translation to transform.  
        :type deltaTrans: :py:class:`NXOpen.Vector3d` 
        :param orientation:  Delta rotation transform.  
        :type orientation: :py:class:`NXOpen.Matrix3x3` 
        :param inDrag:  the geometry is currently being dragged?  
        :type inDrag: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateExtensionDirectionAtIndex(self, index: int, direction: NXOpen.Vector3d) -> None:
        """
        Update the extension orientation at the point index.  
        
        Signature ``UpdateExtensionDirectionAtIndex(index, direction)`` 
        
        :param index:  Index of the point to analyze.  
        :type index: int 
        :param direction:  Direction to assign the extension.  
        :type direction: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AssignTangentExtensionForPointAtIndex(self, index: int, forwardLength: NXOpen.Expression, backwardLength: NXOpen.Expression) -> tuple:
        """
        Assigns the extension direction and expressions tangent to the spline path at the given
        point index.  
        
        Signature ``AssignTangentExtensionForPointAtIndex(index, forwardLength, backwardLength)`` 
        
        :param index:  Index of the point to use.  
        :type index: int 
        :param forwardLength:  Length of the forward extension.  
        :type forwardLength: :py:class:`NXOpen.Expression` 
        :param backwardLength:  Length of the backward extension.  
        :type backwardLength: :py:class:`NXOpen.Expression` 
        :returns: a tuple 
        :rtype: A tuple consisting of (tangent, normal, extensionDir). tangent is a :py:class:`NXOpen.Vector3d`.   Extension direction. normal is a :py:class:`NXOpen.Vector3d`.   Curve normal. extensionDir is a :py:class:`NXOpen.Direction`.   Direction object. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateAssignTangencyBuilder(self) -> AssignTangencyBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.AssignTangencyBuilder` object.  
        
        Signature ``CreateAssignTangencyBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AssignTangencyBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAssignTangencyBuilder(self) -> AssignTangencyBuilder:
        """
        Get a :py:class:`NXOpen.Routing.AssignTangencyBuilder` object.  
        
        Signature ``GetAssignTangencyBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AssignTangencyBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStockBoundedDiameter(self, value: float) -> None:
        """
        Sets the driving diameter of the current stock for the ratio-to-diameter bounded curvature.  
        
        Signature ``SetStockBoundedDiameter(value)`` 
        
        :param value: 
        :type value: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def SetDefaultPortExtensionLength(self, value: float) -> None:
        """
        Sets the default port extension length to be used when creating or editing points at port
        locations that do not already have an extension .  
        
        Signature ``SetDefaultPortExtensionLength(value)`` 
        
        :param value: 
        :type value: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    BoundedCurvature: bool = ...
    """
    Returns or sets  whether the spline maximum bounded radius value should be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundedCurvature`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced")
    
    <hr>
    
    Setter Method
    
    Signature ``BoundedCurvature`` 
    
    :param useBoundedCurvature: 
    :type useBoundedCurvature: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced")
    """
    BoundedCurvatureRadius: NXOpen.Expression = ...
    """
    Returns  the minimum radius allowed for this spline.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundedCurvatureRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced")
    """
    BoundedCurvatureRatio: NXOpen.Expression = ...
    """
    Returns  the minimum radius allowed for this spline as a ratio to diameter.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundedCurvatureRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced")
    """
    DefiningType: SplinePathBuilderDefiningTypes = ...
    """
    Returns or sets  the type which specifies the shape of the spline.  
    
    See :py:class:`NXOpen.Routing.SplinePathBuilderDefiningTypes` for valid options 
    
    <hr>
    
    Getter Method
    
    Signature ``DefiningType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SplinePathBuilderDefiningTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DefiningType`` 
    
    :param definingType: 
    :type definingType: :py:class:`NXOpen.Routing.SplinePathBuilderDefiningTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    MinimumCheckingAllowableRatio: NXOpen.Expression = ...
    """
    Returns  the minimum ratio allowed for this spline
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumCheckingAllowableRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    MinimumCheckingAllowableValue: NXOpen.Expression = ...
    """
    Returns  the minimum radius allowed for this spline.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumCheckingAllowableValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    MinimumCheckingMethod: SplinePathBuilderSplinePathAttributeOptions = ...
    """
    Returns or sets  the minimum checking method for this spline.  
    
    See :py:class:`NXOpen.Routing.SplinePathBuilderSplinePathAttributeOptions` for valid
    options 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumCheckingMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SplinePathBuilderSplinePathAttributeOptions` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumCheckingMethod`` 
    
    :param routeCheckingMethod: 
    :type routeCheckingMethod: :py:class:`NXOpen.Routing.SplinePathBuilderSplinePathAttributeOptions` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    RadiusSource: SplinePathBuilderSplinePathRadiusSource = ...
    """
    Returns or sets  the driving expression, value, or attribute of the bounded radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusSource`` 
    
    :returns:  The type of bounded curvature.  
    :rtype: :py:class:`NXOpen.Routing.SplinePathBuilderSplinePathRadiusSource` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced")
    
    <hr>
    
    Setter Method
    
    Signature ``RadiusSource`` 
    
    :param source:  The type of bounded curvature.  
    :type source: :py:class:`NXOpen.Routing.SplinePathBuilderSplinePathRadiusSource` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced")
    """
    ShowSplineMinimumRadius: bool = ...
    """
    Returns or sets  whether the spline minimum radius value should be displayed or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSplineMinimumRadius`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSplineMinimumRadius`` 
    
    :param allowDisplay: 
    :type allowDisplay: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    UseMinimumCheckingValue: bool = ...
    """
    Returns or sets  whether the spline minimum radius value should be checked or not on this spline.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseMinimumCheckingValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``UseMinimumCheckingValue`` 
    
    :param useMinRadius: 
    :type useMinRadius: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: SplinePathBuilder = ...  # unknown typename


class LineSegmentCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.LineSegment` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.SegmentManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class DeleteFontsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.DeleteFontsBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDeleteFontsBuilder`
    
    .. versionadded:: NX8.5.0
    """
    ObjectCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: DeleteFontsBuilder = ...  # unknown typename


class SelectControlPoint(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPoint) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPoint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPoint, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ControlPoint` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: ControlPoint, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: ControlPoint, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Routing.ControlPoint` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Routing.ControlPoint` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPoint, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ControlPoint` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> ControlPoint:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: ControlPoint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Routing.ControlPoint`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Routing.ControlPoint`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Routing.ControlPoint`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Routing.ControlPoint`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: ControlPoint = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectControlPoint = ...  # unknown typename


class GapArcSegment(NXOpen.Arc, ISegment):
    """
    Represents a gap arc segment.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.SegmentManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def GetEndRcps(self) -> tuple:
        """
        Return of segment end control points.  
        
        The :py:class:`NXOpen.Routing.ControlPoint` defines an end of a segment 
        
        Signature ``GetEndRcps()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startRcp, endRcp). startRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining start of segment endRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining end of segment 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndRcps(self, startRcp: ControlPoint, endRcp: ControlPoint) -> None:
        """
        Signature ``SetEndRcps(startRcp, endRcp)`` 
        
        :param startRcp:  RCP defining start of segment  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  RCP defining end of segment  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndPoints(self) -> tuple:
        """
        Get the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``GetEndPoints()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startPoint, endPoint). startPoint is a :py:class:`NXOpen.Point3d`.   Location of end 0 in ABS coordinates endPoint is a :py:class:`NXOpen.Point3d`.   Location of end 1 in ABS coordinates 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndPoints(self, startPoint: NXOpen.Point3d, endPoint: NXOpen.Point3d) -> None:
        """
        Set the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``SetEndPoints(startPoint, endPoint)`` 
        
        :param startPoint:  New location of end 0 in ABS coordinates  
        :type startPoint: :py:class:`NXOpen.Point3d` 
        :param endPoint:  New location of end 1 in ABS coordinates  
        :type endPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsTerminalSegment(self) -> Terminal:
        """
        Is given segment a terminal segment?  
        
        Signature ``GetIsTerminalSegment()`` 
        
        :returns:  Is segment a terminal segment?  
        :rtype: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIsTerminalSegment(self, isTerminal: Terminal) -> None:
        """
        Set given segment to be a terminal segment? 
        
        Signature ``SetIsTerminalSegment(isTerminal)`` 
        
        :param isTerminal:  Set as terminal segment?  
        :type isTerminal: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsSegmentInterior(self) -> Interior:
        """
        Query if a segment is interior to any part  
        
        Signature ``GetIsSegmentInterior()`` 
        
        :returns:  Is segment interior?  
        :rtype: :py:class:`NXOpen.Routing.Interior` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSegmentInteriorPart(self, interiorPart: NXOpen.Assemblies.Component) -> None:
        """
        Set a segment to be interior to supplied part 
        
        Signature ``SetSegmentInteriorPart(interiorPart)`` 
        
        :param interiorPart:  Part segment interior?  
        :type interiorPart: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentStock(self) -> 'list[Stock]':
        """
        Returns all stocks that directly reference this segment as part of the path defining the stock.  
        
        Signature ``GetSegmentStock()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentAllStocks(self) -> 'list[Stock]':
        """
        Returns :py:class:`NXOpen.Routing.Stock` as well as :py:class:`NXOpen.Routing.Overstock`
        objects from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetSegmentAllStocks()`` 
        
        :returns:  Array of stocks/overstocks.  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCablewaysLayoutViews(self) -> 'list[NXOpen.Routing.Electrical.CablewaysLayoutView]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` objects
        from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCablewaysLayoutViews()`` 
        
        :returns:  Array of cableways layout views.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCableDevices(self) -> 'list[NXOpen.Routing.Electrical.CableDevice]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CableDevice` objects
        from :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCableDevices()`` 
        
        :returns:  Array of cable devices.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CableDevice` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsEccentricSegment(self) -> Eccentric:
        """
        Is given segment a eccentric segment?  
        
        Signature ``GetIsEccentricSegment()`` 
        
        :returns:  Is segment a eccentric segment?  
        :rtype: :py:class:`NXOpen.Routing.Eccentric` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertLinearToEccentricLinear(self) -> ConvertLinearToEccentricLinear:
        """
        Is line segment converted to eccentric line segment?  
        
        Signature ``ConvertLinearToEccentricLinear()`` 
        
        :returns:  Is line segment converted to eccentric line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertLinearToEccentricLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertEccentricLinearToLinear(self) -> ConvertEccentricLinearToLinear:
        """
        Is line segment eccentric converted to line segment?  
        
        Signature ``ConvertEccentricLinearToLinear()`` 
        
        :returns:  Is line segment eccentric converted to line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertEccentricLinearToLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    IsArcOpensDown: bool = ...
    """
    Returns or sets  the arc orientation.  
    
    If true, arc opens downwards false, arc opens upwards 
    
    <hr>
    
    Getter Method
    
    Signature ``IsArcOpensDown`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``IsArcOpensDown`` 
    
    :param arcOpensDown: 
    :type arcOpensDown: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    FollowCurve: NXOpen.Curve = ...
    """
    Returns   the segment follow curve.  
    
    NULL object indicates segment has no follow curve 
    
    <hr>
    
    Getter Method
    
    Signature ``FollowCurve`` 
    
    :returns:  Follow curve of segment  
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Length: float = ...
    """
    Returns   the length of the segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: GapArcSegment = ...  # unknown typename


class RouteSegmentFont(NXOpen.NXObject):
    """
    Represents a route segment font.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.RouteSegmentFont`
    
    .. versionadded:: NX8.5.0
    """
    Segment: NXOpen.Line = ...
    """
    Returns or sets  
    
    <hr>
    
    Getter Method
    
    Signature ``Segment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Line` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Segment`` 
    
    :param segTag: 
    :type segTag: :py:class:`NXOpen.Line` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: RouteSegmentFont = ...  # unknown typename


class DiscontinuityCornerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.DiscontinuityCorner` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def Create(self, rcp: ControlPoint, firstSegment: ISegment, secondSegment: ISegment) -> DiscontinuityCorner:
        """
        Creates a discontinuity corner object at the given 
        :py:class:`NXOpen.Routing.ControlPoint`.  
        
        There must be two input 
        :py:class:`NXOpen.Routing.ISegment` objects, and they both must
        reference the input :py:class:`NXOpen.Routing.ControlPoint` object.
        
        Signature ``Create(rcp, firstSegment, secondSegment)`` 
        
        :param rcp: 
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param firstSegment:  first segment to form discontinuity on,                                             must be attached to the input RCP.  
        :type firstSegment: :py:class:`NXOpen.Routing.ISegment` 
        :param secondSegment:  second segment to form discontinuity on,                                             must be attached to the input RCP.  
        :type secondSegment: :py:class:`NXOpen.Routing.ISegment` 
        :returns:  The new disc corner object.  
        :rtype: :py:class:`NXOpen.Routing.DiscontinuityCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDiscontinuityCorners(self, rcp: ControlPoint) -> 'list[DiscontinuityCorner]':
        """
        Return the discontinuity corners assigned to the input control point.  
        
        There
        may be more than one discontinuity corner assigned to input control point.
        This may occur for example when four segments form a cross, the control
        point at the center may have two discontinuity corners assigned.  One corner
        will force stock to split when crossing the horizontal segments, the 
        other will cause stock to split when crossing the vertical segments.  
        
        Signature ``GetDiscontinuityCorners(rcp)`` 
        
        :param rcp:  The control point  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  Corner objects pointing to the rcp.  
        :rtype: list of :py:class:`NXOpen.Routing.DiscontinuityCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AreSegmentsDisconnected(self, segment1: SplineSegment, segment2: SplineSegment, rcp: ControlPoint) -> bool:
        """
        Checks whether segment1 and segment2 are disconnected at a control point
        due to a discontinuity corner.  
        
        Signature ``AreSegmentsDisconnected(segment1, segment2, rcp)`` 
        
        :param segment1:  First segment associated with the corner.  
        :type segment1: :py:class:`NXOpen.Routing.SplineSegment` 
        :param segment2:  The 2nd segment associated with the corner.  
        :type segment2: :py:class:`NXOpen.Routing.SplineSegment` 
        :param rcp:  Control point.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  TRUE: If the two segments are disconnected. 
        FALSE: Otherwise .  
        :rtype: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class StockDataCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.StockData` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateStockData(self, values: CharacteristicList) -> StockData:
        """
        Creates (or finds an existing :py:class:`NXOpen.Routing.StockData`) object in the work
        part that has the characteristics specified by the input list of characteristic values.  Creates
        the stock by copying the stock defined in the qualified part to the work part. The qualified stock
        part is specified by the PART_NAME or MEMBER_NAME in the list.  If there is no PART_NAME or MEMBER_NAME
        a stock data, the OD or WIDTH/HEIGHT values are used to generate either a circular or rectangular
        stock data.  
        
        Use this routine to create stock data's in the work part in order to create stocks.  Use
        :py:meth:`Routing.RouteManager.PartTypeFlag` to create a qualified
        stock data part.  
        
        Example Use:
        
        values = theSession.Preferences.RoutingApplicationView.PartPreferences.PartLibrary.CreateCriteria ( );
        values.SetCharacteristic ( "OD", 10.0 );
        stock_data = workPart.RouteManager.StockDataCollection.CreateStockData ( values );
        stocks = workPart.RouteManager.StockCollection.CreateStock ( stock_data, anchor, cross_section, segments );
        workPart.RouteManager.SetPartTypeFlag( Routing.RouteManager.PartType.Stock );
        
        Signature ``CreateStockData(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateStockData(self) -> StockData:
        """
        Creates a new stock data in the work part.  The new stock data contains all of the 
        :py:class:`NXOpen.Routing.CrossSection` and :py:class:`NXOpen.Routing.Anchor` objects
        in the work part.  After calling this routine call :py:meth:`Routing.RouteManager.PartTypeFlag`
        to :py:class:`NXOpen.Routing.RouteManagerPartType.Stock <NXOpen.Routing.RouteManagerPartType>`, 
        :py:class:`NXOpen.Routing.RouteManagerPartType.Overstock <NXOpen.Routing.RouteManagerPartType>`, or
        :py:class:`NXOpen.Routing.RouteManagerPartType.Filler <NXOpen.Routing.RouteManagerPartType>` to properly qualify this
        as a stock definition part.
        
        Signature ``CreateStockData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveUnusedStockData(self) -> None:
        """
        Logs for deletion any :py:class:`NXOpen.Routing.StockData` objects in the
        input part not referenced by any :py:class:`NXOpen.Routing.Stock`, 
        :py:class:`NXOpen.Routing.Wire` and :py:class:`NXOpen.Routing.CrossSection`
        not referenced by any :py:class:`NXOpen.Routing.StockData`.  
        
        Signature ``RemoveUnusedStockData()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class SegmentManagerSubdivideSpacingMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SegmentManagerSubdivideSpacing():
    """
    Specifies spacing option for subdivide segment. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ScreenPoint", "Screen Point"
       "EqualArcLength", "Equal Arc Length"
       "EqualParameter", "Equal Parameter"
       "IncrementalArcLength", "Incremental Arc Length"
       "GeometricRatio", "Geometric Progression Ratio"
       "ChordalTolerance", "Chordal Tolerance"
       "NumberOfOptions", "Number of Options"
    """
    ScreenPoint = 0  # SegmentManagerSubdivideSpacingMemberType
    EqualArcLength = 1  # SegmentManagerSubdivideSpacingMemberType
    EqualParameter = 2  # SegmentManagerSubdivideSpacingMemberType
    IncrementalArcLength = 3  # SegmentManagerSubdivideSpacingMemberType
    GeometricRatio = 4  # SegmentManagerSubdivideSpacingMemberType
    ChordalTolerance = 5  # SegmentManagerSubdivideSpacingMemberType
    NumberOfOptions = 6  # SegmentManagerSubdivideSpacingMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SegmentManagerSubdivideOption_Struct():
    """
    Contains subdivide segment method information.  
    
    This structure is used by
    :py:meth:`NXOpen.Routing.SegmentManager.Subdivide`. .
    Constructor: 
    NXOpen.Routing.SegmentManager.SubdivideOption()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    SpacingOption: SegmentManagerSubdivideSpacing = ...
    """
    Spacing Option 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Routing.SegmentManagerSubdivideSpacing`
    """
    StartPercent: float = ...
    """
    Start Percentage; 0 <= Start percent < End percent 
    <hr>
    
    Field Value
    Type:float
    """
    EndPercent: float = ...
    """
    End Percentage; start_percent < end_percent <= 100.  
    
    0 
    <hr>
    
    Field Value
    Type:float
    """
    ScreenPointPercentage: float = ...
    """
    Screen Point Percentage
    <hr>
    
    Field Value
    Type:float
    """
    Direction: int = ...
    """
    Direction; If direction = 1, normal curve direction
    else if direction = -1, reverse the sense of curve direction 
    <hr>
    
    Field Value
    Type:int
    """
    NumberOfSegments: int = ...
    """
    Number of Segments 
    <hr>
    
    Field Value
    Type:int
    """
    GeometricRatio: float = ...
    """
    Geometric Progression Ratio 
    <hr>
    
    Field Value
    Type:float
    """
    IncrementalArcLength: float = ...
    """
    Incremental Arc Length 
    <hr>
    
    Field Value
    Type:float
    """
    ChordalTolerance: float = ...
    """
    Chordal Tolerance 
    <hr>
    
    Field Value
    Type:float
    """
    Dcm3CreateTangency: bool = ...
    """
    Create Tangency at subdivision point when subdividing splines 
    <hr>
    
    Field Value
    Type:bool
    """
    Dcm3AddPoints: bool = ...
    """
    Add Points to subdivided splines to maintain shape 
    <hr>
    
    Field Value
    Type:bool
    """
    Dcm3AddFixConstraint: bool = ...
    """
    Field Value
    Type:bool
    """


class SegmentManager():
    """
    Contains the type of the routing part as well as the Collection objects for creating/iterating
    over routing objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX4.0.0
    """
    
    class SubdivideSpacing():
        """
        Specifies spacing option for subdivide segment. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ScreenPoint", "Screen Point"
           "EqualArcLength", "Equal Arc Length"
           "EqualParameter", "Equal Parameter"
           "IncrementalArcLength", "Incremental Arc Length"
           "GeometricRatio", "Geometric Progression Ratio"
           "ChordalTolerance", "Chordal Tolerance"
           "NumberOfOptions", "Number of Options"
        """
        ScreenPoint = 0  # SegmentManagerSubdivideSpacingMemberType
        EqualArcLength = 1  # SegmentManagerSubdivideSpacingMemberType
        EqualParameter = 2  # SegmentManagerSubdivideSpacingMemberType
        IncrementalArcLength = 3  # SegmentManagerSubdivideSpacingMemberType
        GeometricRatio = 4  # SegmentManagerSubdivideSpacingMemberType
        ChordalTolerance = 5  # SegmentManagerSubdivideSpacingMemberType
        NumberOfOptions = 6  # SegmentManagerSubdivideSpacingMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SubdivideOption():
        """
        Contains subdivide segment method information.  
        
        This structure is used by
        :py:meth:`NXOpen.Routing.SegmentManager.Subdivide`. .
        Constructor: 
        NXOpen.Routing.SegmentManager.SubdivideOption()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        SpacingOption: SegmentManagerSubdivideSpacing = ...
        """
        Spacing Option 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Routing.SegmentManagerSubdivideSpacing`
        """
        StartPercent: float = ...
        """
        Start Percentage; 0 <= Start percent < End percent 
        <hr>
        
        Field Value
        Type:float
        """
        EndPercent: float = ...
        """
        End Percentage; start_percent < end_percent <= 100.  
        
        0 
        <hr>
        
        Field Value
        Type:float
        """
        ScreenPointPercentage: float = ...
        """
        Screen Point Percentage
        <hr>
        
        Field Value
        Type:float
        """
        Direction: int = ...
        """
        Direction; If direction = 1, normal curve direction
        else if direction = -1, reverse the sense of curve direction 
        <hr>
        
        Field Value
        Type:int
        """
        NumberOfSegments: int = ...
        """
        Number of Segments 
        <hr>
        
        Field Value
        Type:int
        """
        GeometricRatio: float = ...
        """
        Geometric Progression Ratio 
        <hr>
        
        Field Value
        Type:float
        """
        IncrementalArcLength: float = ...
        """
        Incremental Arc Length 
        <hr>
        
        Field Value
        Type:float
        """
        ChordalTolerance: float = ...
        """
        Chordal Tolerance 
        <hr>
        
        Field Value
        Type:float
        """
        Dcm3CreateTangency: bool = ...
        """
        Create Tangency at subdivision point when subdividing splines 
        <hr>
        
        Field Value
        Type:bool
        """
        Dcm3AddPoints: bool = ...
        """
        Add Points to subdivided splines to maintain shape 
        <hr>
        
        Field Value
        Type:bool
        """
        Dcm3AddFixConstraint: bool = ...
        """
        Field Value
        Type:bool
        """
    
    
    @typing.overload
    def CreateSegment(self, followCurve: NXOpen.Curve, startRcp: ControlPoint, endRcp: ControlPoint, userDefined: UserDefined) -> ISegment:
        """
        Creates a :py:class:`NXOpen.Routing.ISegment` object following a curve.  
        
        Signature ``CreateSegment(followCurve, startRcp, endRcp, userDefined)`` 
        
        :param followCurve:  Curve to follow  
        :type followCurve: :py:class:`NXOpen.Curve` 
        :param startRcp:  Start :py:class:`NXOpen.Routing.ControlPoint` of the segment  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End :py:class:`NXOpen.Routing.ControlPoint` of the segment  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param userDefined:  Is segment user defined?  
        :type userDefined: :py:class:`NXOpen.Routing.UserDefined` 
        :returns:  Created segment  
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateSegment(self, startRcp: ControlPoint, endRcp: ControlPoint) -> ISegment:
        """
        Creates a line :py:class:`NXOpen.Routing.ISegment` object with input
        :py:class:`NXOpen.Routing.ControlPoint` as ends.  
        
        Signature ``CreateSegment(startRcp, endRcp)`` 
        
        :param startRcp:  Start :py:class:`NXOpen.Routing.ControlPoint` of the segment  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End :py:class:`NXOpen.Routing.ControlPoint` of the segment  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  Created segment  
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFollowCurve(self, segment: ISegment, followCurve: NXOpen.Curve) -> ISegment:
        """
        Set segment follow curve.  
        
        Segment can change type to mirror the type of the follow curve being set.  
        
        Signature ``SetFollowCurve(segment, followCurve)`` 
        
        :param segment:  Segment to set follow curve on  
        :type segment: :py:class:`NXOpen.Routing.ISegment` 
        :param followCurve:  Follow curve of segment  
        :type followCurve: :py:class:`NXOpen.Curve` 
        :returns:  Segment can possibly change types.
        Use the returned segment object pointer instead
        of any older pointers after calling this function.
        For example: A LineSegment can become a SplineSegment after
        calling this function if new follow curve is a spline.  
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SimplifySegments(self, segments: 'list[ISegment]', doUpdate: bool) -> 'list[ISegment]':
        """
        Combine segments that are collinear and whose intermediate RCPs do not branch 
        
        Signature ``SimplifySegments(segments, doUpdate)`` 
        
        :param segments:  segments to combine  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param doUpdate: Fires update if True  
        :type doUpdate: bool 
        :returns:  resulting segments  
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def Subdivide(self, segment: ISegment, subdivideOption: SegmentManagerSubdivideOption_Struct) -> 'list[ISegment]':
        """
        Subdivide a routing path segment 
        
        Signature ``Subdivide(segment, subdivideOption)`` 
        
        :param segment:  Segment to subdivide  
        :type segment: :py:class:`NXOpen.Routing.ISegment` 
        :param subdivideOption: 
        :type subdivideOption: :py:class:`NXOpen.Routing.SegmentManagerSubdivideOption_Struct` 
        :returns:  resulting segments  
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateConstrainedSegment(self, startRcp: ControlPoint, endRcp: ControlPoint) -> ISegment:
        """
        Creates a constrained line :py:class:`NXOpen.Routing.ISegment` object
        with input :py:class:`NXOpen.Routing.ControlPoint` as ends.  
        
        Only use this method when building segments in a part that
        use :py:class:`NXOpen.Positioning.Constraint` objects to constraint components
        and geometry.  This is a new method for creating segments in NX5 and
        should be used instead of :py:meth:`NXOpen.Routing.SegmentManager.CreateSegment`
        for all line segments.
        
        Signature ``CreateConstrainedSegment(startRcp, endRcp)`` 
        
        :param startRcp:  Start :py:class:`NXOpen.Routing.ControlPoint` of the segment  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  End :py:class:`NXOpen.Routing.ControlPoint` of the segment  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  Created segment  
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateHealSpline(self, startObject: NXOpen.DisplayableObject, endObject: NXOpen.DisplayableObject, healPath: HealPath) -> ISegment:
        """
        Creates a spline :py:class:`NXOpen.Routing.ISegment` object
        with input :py:class:`NXOpen.Routing.ControlPoint` as ends.  
        
        Signature ``CreateHealSpline(startObject, endObject, healPath)`` 
        
        :param startObject:  Start :py:class:`NXOpen.DisplayableObject` of the segment, ideally it should be :py:class:`NXOpen.Routing.Port`  
        :type startObject: :py:class:`NXOpen.DisplayableObject` 
        :param endObject:  End :py:class:`NXOpen.DisplayableObject` of the segment, ideally it should be :py:class:`NXOpen.Routing.Port`  
        :type endObject: :py:class:`NXOpen.DisplayableObject` 
        :param healPath: 
        :type healPath: :py:class:`NXOpen.Routing.HealPath` 
        :returns:  Created segment  
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateHealPath(self) -> HealPath:
        """
        Creates a new empty :py:class:`NXOpen.Routing.HealPath` object that can be
        used as an input to :py:meth:`NXOpen.Routing.SegmentManager.CreateHealSpline`.  
        
        Signature ``CreateHealPath()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.HealPath` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ModelTerminals(self, multiPort: Port, cutBackLength: float, extensionString: str, overrideCharx: bool, terminalPorts: 'list[Port]') -> None:
        """
        Models spline paths to to specified terminals.  
        
        Updates connection list to reflect
        changes to wire lengths of referencing connections. 
        
        Signature ``ModelTerminals(multiPort, cutBackLength, extensionString, overrideCharx, terminalPorts)`` 
        
        :param multiPort:  MultiPort whose terminals are modeled  
        :type multiPort: :py:class:`NXOpen.Routing.Port` 
        :param cutBackLength:  Length of cut back path connected to multiport.  
        :type cutBackLength: float 
        :param extensionString:  Length of terminal segments which extends parallel to terminal ports  
        :type extensionString: str 
        :param overrideCharx:  if TRUE: extension_string determines all terminal extensions  
        :type overrideCharx: bool 
        :param terminalPorts:  Terminal ports from which terminals are modeled  
        :type terminalPorts: list of :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnmodelTerminals(self, multiPort: Port, terminalPorts: 'list[Port]') -> None:
        """
        Un-model terminals and update connection list routes for specified terminal ports.  
        
        Signature ``UnmodelTerminals(multiPort, terminalPorts)`` 
        
        :param multiPort:  MultiPort whose terminals being un-modeled  
        :type multiPort: :py:class:`NXOpen.Routing.Port` 
        :param terminalPorts:  Terminal ports being modeled  
        :type terminalPorts: list of :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ProcessBuiltInPaths(self, partOcc: NXOpen.Assemblies.Component) -> None:
        """
        Create segments of :py:class:`NXOpen.Routing.BuiltInPath` objects present in this
        :py:class:`NXOpen.Assemblies.Component` object.  
        
        Signature ``ProcessBuiltInPaths(partOcc)`` 
        
        :param partOcc: 
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetShortestPathBetweenControlPoints(self, controlPoint1: ControlPoint, controlPoint2: ControlPoint) -> 'list[ISegment]':
        """
        Returns the shortest connected segments (i.  
        
        e. the path) linking the two :py:class:`NXOpen.Routing.ControlPoint`s, if any.  
        
        Signature ``GetShortestPathBetweenControlPoints(controlPoint1, controlPoint2)`` 
        
        :param controlPoint1: 
        :type controlPoint1: :py:class:`NXOpen.Routing.ControlPoint` 
        :param controlPoint2: 
        :type controlPoint2: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Segments: ISegmentCollection = ...
    """
    All Segment types collection 
    
    Signature ``Segments`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ISegmentCollection`
    """
    LineSegments: LineSegmentCollection = ...
    """
    Line Segment collection 
    
    Signature ``LineSegments`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.LineSegmentCollection`
    """
    ArcSegments: ArcSegmentCollection = ...
    """
    Arc Segment collection 
    
    Signature ``ArcSegments`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ArcSegmentCollection`
    """
    SplineSegments: SplineSegmentCollection = ...
    """
    Spline Segment collection 
    
    Signature ``SplineSegments`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SplineSegmentCollection`
    """


class ControlPointDefinedStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlPointDefinedStatus():
    """
    User defined status for a :py:class:`NXOpen.Routing.ControlPoint`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "System", "Created automatically by the application."
       "User", "Created by the user."
    """
    System = 0  # ControlPointDefinedStatusMemberType
    User = 1  # ControlPointDefinedStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlPoint(NXOpen.SmartObject, IRoutePosition):
    """
    Routing Control Points define a position in space, and are used to determine connections
    from segments to segments, and segments to ports.  
    
    To create an instace of this object use :py:meth:`Routing.ControlPointCollection.CreateControlPoint`
    
    .. versionadded:: NX4.0.0
    """
    
    class DefinedStatus():
        """
        User defined status for a :py:class:`NXOpen.Routing.ControlPoint`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "System", "Created automatically by the application."
           "User", "Created by the user."
        """
        System = 0  # ControlPointDefinedStatusMemberType
        User = 1  # ControlPointDefinedStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetIsUserDefined(self) -> ControlPointDefinedStatus:
        """
        Returns whether this object is defined by a user or 
        automatically by the Routing Application.  
        
        Signature ``GetIsUserDefined()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ControlPointDefinedStatus` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRcpSegments(self) -> 'list[ISegment]':
        """
        Returns all segments whose start or end Control Point is this Control Point.  
        
        Signature ``GetRcpSegments()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveCorner(self) -> None:
        """
        Remove the assigned corner.  
        
        Signature ``RemoveCorner()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AssignDefaultElbow(self) -> NXOpen.Assemblies.Component:
        """
        Places the default elbow at this object.  
        
        Finds the default elbow by searching through the default elbow part
        table (see :py:class:`NXOpen.Preferences.RoutingPart` using the destination
        characteristics assigned to the stock on this object.
        
        Uses the ALLOW_DEFAULT_ELBOW_PLACEMENT plugin to determine if an elbow can be 
        placed at this object.
        
        Signature ``AssignDefaultElbow()`` 
        
        :returns:  the placed elbow component, None if
        placement fails.  
        :rtype: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def LockToObject(self, object: NXOpen.NXObject) -> NXOpen.Positioning.Constraint:
        """
        Ensures that a touch constraint exists between this 
        control point and the input object.  
        
        Creates a constraint if one 
        doesn't exist already.
        
        This control point must not be an occurrence, the input object may
        be an occurrence.
        
        See :py:class:`NXOpen.Positioning.Constraint` for a description of 
        touch constraints.
        
        Do not attempt to lock control points to :py:class:`NXOpen.Routing.ISegment`
        or :py:class:`NXOpen.Routing.Stock` objects, this will result in 
        upredictable behavior.
        
        Signature ``LockToObject(object)`` 
        
        :param object:  Object to constraint to control point.  
        :type object: :py:class:`NXOpen.NXObject` 
        :returns:  The new or existing touch constraint.  
        :rtype: :py:class:`NXOpen.Positioning.Constraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def UnlockFromObject(self, object: NXOpen.NXObject) -> None:
        """
        Removes the touch constraint that exists between the 
        control point and the input object.  
        
        This control point must not be 
        an occurrence, the input object may be an occurrence.
        
        Call :py:meth:`NXOpen.Update.DoUpdate` afterwards to ensure that
        the constraint is fully deleted.
        
        Signature ``UnlockFromObject(object)`` 
        
        :param object:  Object constrained to control point.  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def IsLockedToObject(self, object: NXOpen.NXObject) -> bool:
        """
        Returns whether or not a touch constraint exists between the 
        control point and the input object.  
        
        This control point must not be an occurrence, the input object may
        be an occurrence.
        
        Signature ``IsLockedToObject(object)`` 
        
        :param object:  Object constrained to control point.  
        :type object: :py:class:`NXOpen.NXObject` 
        :returns:  Whether or not the 
        control point is 
        constained to the object.  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDefiningObject(self) -> NXOpen.NXObject:
        """
        Returns defining object for this :py:class:`NXOpen.Routing.ControlPoint`.  
        
        Signature ``GetDefiningObject()`` 
        
        :returns:  Object defining control point.  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Position: NXOpen.Point3d = ...
    """
    Returns or sets   the current location of the object in ABS coordinates.  
    
    This value is
    overridden by the coordinates of the point associated with this object. 
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns:  Location of object in ABS coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position:  New location of object in ABS coordinates  
    :type position: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the :py:class:`NXOpen.Point` that specifies the location of the
    :py:class:`NXOpen.Routing.IRoutePosition` object.  
    
    A NULL object indicates that this
    object is not associated to any point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns:  New location of object in ABS coordinates  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point:  New location of object in ABS coordinates  
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ControlPoint = ...  # unknown typename


class SBendCorner(NXOpen.NXObject):
    """
    The Routing SBendCorner defines a S-Bend.  
    
    There are 5 possible S-bend types. 
    
    The UI input is two work part line segment-ending RCPs, each of which
    implicitly provides a 3D point and vector.  An S-bend heals the
    separation between the two segments with a C1 continuous spline segment.
    
    To disambiguate among 5 S-bend types (see below), the user may need to
    further indicate whether the S-bend starts bending immediately at the
    end of one or both of the 2 input segments.  Some arrangements of 2
    segments do not require further user input to disambiguate among the
    possible S-bend types.
    
    The direction vectors of the 2 input segments must either be 
    perpendicular (types 1,2,3) or parallel (types 4,5).
    
    The closest distance between the (infinite) lines containing the input
    segments must be less that twice the bend radius.  If this condition
    does not hold, then 2 right angle bends could connect the 2 input
    segments, i.e., an S-bend is unnecessary.
    
    Every S-bend has two bends, whose radii are always equal.  Except for
    type 2 and 3, the bend angles are equal and in the range
    [ Pi/4, Pi/2 ].
    
    S-bends never cause a cutback of an input segment, although type 1,2,4
    S-bends may add a straight line extension to one of the segment ends
    before the bending starts.  Type 1 S-bends may add a straight line
    extension to both segment ends.
    
    INPUT
    
      *  R bend radius, which the user supplies, e.g., from a bend table.
      *  P1 Work part X,Y,Z of segment 1's end.
      *  Vec1 Tangent at P1, pointing toward the open end of the segment.
      *  P2, Vec2 Similar to segment 1 above...
    
    For computation solving purposes, the above input becomes a bend
    radius, height, width, and possibly a depth.
    
    OUTPUT bend angle(s):
    
      *  a (alpha)   (all S-bend types)
      *  g (gamma)   (Type 3 only)
      *  Extension lengths, if any.
    
    Bend angles are computed at the centers of the bend arcs
    
    S-bends fall into two categories:
    
      * End tangents are perpendicular.
    Three types are possible.  In the 3D diagrams below:
    
    The constructor line, AB, is the perpendicular distance
    between the lines that the segments define.
    
        * Height (H):  length of A-B
        * Depth  (D):  length of A-P1
        * Width  (W):  length of B-P2
    
    The A-B, A-P1, B-P2 vectors are mutually perpendicular.
    
        * Features.SewBuilder.Type 1:  does not have a middle straight line portion.
    
    /
    / seg1
    P1  /
    *
    /
    /
    /
    
    / /
    /  :
    A /    :
    |     :
    |      ,
    |       ,  <---- bends meet (no straight segment)
    |        :
    |         :
    |          `-,
    |             ``-,_
    +------------------`-*------------
    B                      P2   seg2
    
    The bend from segment 2 lies in the plane A,B,P2.  The bend
    from segment 1 is always 90 degrees, and thus terminates
    somewhere in the plane A,B,P2.  The bend from segment 1 always
    starts on an extension of segment 1 that is a distance R from
    A.
    
    Segment 2 may also have to extend toward B before its bend
    starts.
    
    Geometrically, the height is the sum of the vertical
    components of bend 1 and bend 2.
    
        * 
    Type 2:  middle straight line portion
    
    /
    / seg1
    P1  /
    *
    /
    /
    /
    
    / /
    /  :
    A /    :
    |     :
    |      \
    |       \ <---- straight segment
    |        \
    |         \ <----- bend ends
    |          `-,
    |             ``-,_
    +------------------`-*------------
    B                      P2   seg2
    
    Similar to Type 1:
    
    The bend from segment 2 lies in the plane A,B,P2.
    
    The bend from segment 1 is always 90 degrees, and thus
    terminates somewhere in the plane A,B,P2.
    
    The bend from segment 1 always starts on an extension of
    segment 1 that is a distance R from A.
    
    Unlike Type 1:
    
    Segment 2's bend always starts at P2, i.e., segment 2
    never has an extension.
    
        * 
    Type 3:  middle straight line portion.  user chooses between Type 2-3.
    
    /
    / seg1
    P1  /
    *
    
    / '
    /  '
    /   : <---- segment 1's bend ends
    /     |
    /       |
    A /         |
    |          | <--- straight segment
    |          |
    |          |
    |          |
    |          |
    |           \ <---- segment 2's bend ends
    |            `-,_
    +----------------`-*------------
    B                    P2   seg2
    
    The bend radius isn't big enough to span the height so a
    middle straight line segment is necessary.
    
    Neither segment can have an extension, i.e., the bends start
    at P1 and P2.  Unlike in Type 2, segment 2's bend does not lie
    in the plane A,B,P2, i.e., both bends immediately start
    bending toward each other.
    
      * 
    
    End tangents are parallel, i.e., bend lies entirely within a
    plane.  This category falls into two types.
    
        * 
    Type 4:  no middle straight line portion
    
    seg1       P1
    ------------*-.
    `.
    :  <--- where bends meet
    `,
    `-*---------*--------
    A          E2        P2   seg2
    
    The height, H, is length (A-P1), where A is the projection of
    P1 onto the line that seg2 defines.
    
    Because both bend angles are the same, the bends meet at half
    the height H/2.
    
        * 
    Type 5:  middle straight line portion
    
    seg1       P1
    ------------*-.
    `.
    \
    \ <--- middle straight line segment
    \
    `.
    `-*------------
    A          P2      seg2
    
    The height, H, is length (A-P1), where A is the projection of
    P1 onto the line that seg2 defines.  The width, W, is the A-P2
    length.
    
    Support Information:
    
    ===============================
    
    o  An extension as described above is the distance leading up to the 
    bend arc. 
    
    Use the :py:class:`NXOpen.Routing.SBendCornerCollection` to obtain an instance.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetSegment(self) -> SplineSegment:
        """
        Gets the segment being used to represent the S-Bend.  
        
        Signature ``GetSegment()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SplineSegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSBendRadius(self) -> float:
        """
        Gets the S-Bend radius of a S-Bend corner.  
        
        Signature ``GetSBendRadius()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSBendStocks(self) -> 'list[Stock]':
        """
        Returns an array of stocks for the S-Bend object  
        
        Signature ``GetSBendStocks()`` 
        
        :returns:  Stock objects of the S-Bend corner.  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSBendData(self) -> tuple:
        """
        Returns the data for the S-Bend object  
        
        Signature ``GetSBendData()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (useBendRatio, sbendType, startRcp, endRcp, segment, radiusOrRatio). useBendRatio is a bool.   TRUE:  if bend ratio is used;                                                         FALSE: otherwise. sbendType is a int.   S-Bend type startRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   S-Bend start Control point endRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   S-Bend end Control point segment is a :py:class:`NXOpen.Routing.SplineSegment`.   S-Bend segmentradiusOrRatio is a float.   Bend radius or bend_ratio. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSBendData(self, sbendType: int, startRcp: ControlPoint, endRcp: ControlPoint, segment: SplineSegment, radiusOrRatio: float, useBendRatio: bool) -> None:
        """
        Set the data for the S-Bend object 
        
        Signature ``SetSBendData(sbendType, startRcp, endRcp, segment, radiusOrRatio, useBendRatio)`` 
        
        :param sbendType:  S-Bend type  
        :type sbendType: int 
        :param startRcp:  The start Control point for the S-Bend.  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  The end Control point for the S-Bend.  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segment:  S-Bend segment 
        :type segment: :py:class:`NXOpen.Routing.SplineSegment` 
        :param radiusOrRatio:  S-Bend radius or bend_ratio.  
        :type radiusOrRatio: float 
        :param useBendRatio:  TRUE:  if bend ratio is used;                                                        FALSE: otherwise.  
        :type useBendRatio: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: SBendCorner = ...  # unknown typename


class RoutePartDescriptorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.RoutePartDescriptor` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePartDescriptor(self, descriptorSourceType: RoutePartDescriptorSourceType, descriptorCharxType: RoutePartDescriptorCharxType, title: str, expression: str) -> RoutePartDescriptor:
        """
        Creates a :py:class:`NXOpen.Routing.RoutePartDescriptor` object.  
        
        Signature ``CreatePartDescriptor(descriptorSourceType, descriptorCharxType, title, expression)`` 
        
        :param descriptorSourceType: 
        :type descriptorSourceType: :py:class:`NXOpen.Routing.RoutePartDescriptorSourceType` 
        :param descriptorCharxType: 
        :type descriptorCharxType: :py:class:`NXOpen.Routing.RoutePartDescriptorCharxType` 
        :param title: 
        :type title: str 
        :param expression: 
        :type expression: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.RoutePartDescriptor` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class BuiltInPathCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.BuiltInPath` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuiltInPath(self, curves: 'list[NXOpen.Curve]') -> BuiltInPath:
        """
        Creates a :py:class:`NXOpen.Routing.BuiltInPath` object.  
        
        Signature ``CreateBuiltInPath(curves)`` 
        
        :param curves:  the array of Curves to be referenced by the Built-In-Path  
        :type curves: list of :py:class:`NXOpen.Curve` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.BuiltInPath` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class SplitDuctBuilderFlowTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplitDuctBuilderFlowTypes():
    """
    The type of flow, whether Absolute or Relative, to be displayed in the %Flow
    column in the list.  This also controls the type of flow based on which
    divisions can be created or edited
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AbsoluteFlow", "Absolute flow"
       "RelativeFlow", "Relative flow"
    """
    AbsoluteFlow = 0  # SplitDuctBuilderFlowTypesMemberType
    RelativeFlow = 1  # SplitDuctBuilderFlowTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplitDuctBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.SplitDuctBuilder`
    
    Builder for creating/editing splits at an end of a duct.  
    
    Takes an end face of a rectangular stock and splits it into a pair of
    divisions based on the specified absolute flow percentage for each division.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateSplitDuctBuilder`
    
    Default values.
    
    =========  =============
    Property   Value
    =========  =============
    FlowType   AbsoluteFlow 
    =========  =============
    
    .. versionadded:: NX7.5.0
    """
    
    class FlowTypes():
        """
        The type of flow, whether Absolute or Relative, to be displayed in the %Flow
        column in the list.  This also controls the type of flow based on which
        divisions can be created or edited
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AbsoluteFlow", "Absolute flow"
           "RelativeFlow", "Relative flow"
        """
        AbsoluteFlow = 0  # SplitDuctBuilderFlowTypesMemberType
        RelativeFlow = 1  # SplitDuctBuilderFlowTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateNewDivisionsListItem(self, selectedPort: Port, isAbsoluteFlow: bool) -> DivisionsBuilder:
        """
        Creates a new item for the divisions list in Split Duct dialog  
        
        Signature ``CreateNewDivisionsListItem(selectedPort, isAbsoluteFlow)`` 
        
        :param selectedPort:  Selected port  
        :type selectedPort: :py:class:`NXOpen.Routing.Port` 
        :param isAbsoluteFlow:  if TRUE: displays absolute flow percentage for each division,                                                                                 else displays relative flow percentage  
        :type isAbsoluteFlow: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DivisionsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def AddDivisionsBuilderToList(self, selectedPort: Port) -> None:
        """
        Creates divisions builders for all the divisions, if any, associated with
        the cross-section to which the input port belongs and adds them to the list
        of divisions.  
        
        Signature ``AddDivisionsBuilderToList(selectedPort)`` 
        
        :param selectedPort:  Selected port  
        :type selectedPort: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    DivisionsList: NXOpen.TaggedObjectList = ...
    """
    Returns  the divisions list 
    
    <hr>
    
    Getter Method
    
    Signature ``DivisionsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    FlowType: SplitDuctBuilderFlowTypes = ...
    """
    Returns or sets  the type of flow to be displayed in the list flow column 
    
    <hr>
    
    Getter Method
    
    Signature ``FlowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SplitDuctBuilderFlowTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``FlowType`` 
    
    :param flowType: 
    :type flowType: :py:class:`NXOpen.Routing.SplitDuctBuilderFlowTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Null: SplitDuctBuilder = ...  # unknown typename


class OperationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Operation():
    """
    Available operations to perform for Overstock Applications 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Create overstock"
       "Edit", "Edit existing overstock"
    """
    Create = 0  # OperationMemberType
    Edit = 1  # OperationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.Corner` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def GetRcpCornerInfo(self, rcp: ControlPoint) -> tuple:
        """
        Gets the corner information given a :py:class:`NXOpen.Routing.ControlPoint`.  
        
        Signature ``GetRcpCornerInfo(rcp)`` 
        
        :param rcp:  Object to interrogate  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns: a tuple 
        :rtype: A tuple consisting of (corner, cornerType). corner is a :py:class:`NXOpen.Routing.Corner`.   :py:class:`NXOpen.Routing.Corner` associated                                                         with this RCP cornerType is a :py:class:`NXOpen.Routing.CornerType`.   Type of corner.
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class FeaturePort(NXOpen.Features.Feature):
    """
    :py:class:`NXOpen.Routing.FeaturePort` is a :py:class:`NXOpen.Features.Feature` associated
    with :py:class:`NXOpen.Routing.Port`.  
    
    Creator not available
    
    .. versionadded:: NX6.0.0
    """
    Null: FeaturePort = ...  # unknown typename


class SplineSegmentCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.SplineSegment` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.SegmentManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class Anchor(NXOpen.SmartObject, IRoutePosition):
    """
    A Routing Anchor defines a position in a Qualified Routing component part.  
    
    In a fitting part, the anchor provides an placement point used by Place 
    Part to position the component into an assembly. In a stock profile part, 
    anchors provide an alternate position at which the cross section may be
    located with respect to the segment it is swept along.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.AnchorCollection.CreateAnchor`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetStock(self) -> 'list[Stock]':
        """
        Returns the stock(s) to which an Anchor belongs.  
        
        Signature ``GetStock()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockData(self) -> StockData:
        """
        Returns the stock data to which an Anchor belongs.  
        
        Signature ``GetStockData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Position: NXOpen.Point3d = ...
    """
    Returns or sets   the current location of the object in ABS coordinates.  
    
    This value is
    overridden by the coordinates of the point associated with this object. 
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns:  Location of object in ABS coordinates  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position:  New location of object in ABS coordinates  
    :type position: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the :py:class:`NXOpen.Point` that specifies the location of the
    :py:class:`NXOpen.Routing.IRoutePosition` object.  
    
    A NULL object indicates that this
    object is not associated to any point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns:  New location of object in ABS coordinates  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point:  New location of object in ABS coordinates  
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: Anchor = ...  # unknown typename


class WrapApplicationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WrapApplicationType():
    """
    Available application methods for wrapped overstock 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "Unknown wrap application"
       "Spot", "Spot wrap application, i.e., 100% overlap"
       "Overlapped", "Overlapping spiral wrap application, e.g., [0-100)% overlap"
       "Gapped", "Barber pole spiral wrap application, e.g., no overlap"
    """
    Unknown = 0  # WrapApplicationTypeMemberType
    Spot = 1  # WrapApplicationTypeMemberType
    Overlapped = 2  # WrapApplicationTypeMemberType
    Gapped = 3  # WrapApplicationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManagerCallbackReasonMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomManagerCallbackReason():
    """
    The reason for registering a callback indicates which Routing commands will use
    the callback.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "Used only for validation."
       "PlacePart", "Called after the Place Part command."
       "MovePart", "Called after the Move Part command."
       "RemovePart", "Called after the Remove Part command."
       "MovePath", "Called after the Move Path command."
       "CopyPath", "Called after the Copy Path command."
       "DeletePath", "Called after the Delete Path command."
       "TransformPath", "Called after the Transform Path command."
       "OffsetPath", "Called after the Offset Path command."
       "AssignStock", "Called after the Assign Stock command."
       "WireRouteManual", "Called after the Manual Route command."
       "WireRouteAuto", "Called after the AutoRoute command."
       "WireCompManual", "Called after the Manual Assign command."
       "WireCompAuto", "Called after the AutoAssign command."
       "WireUnroute", "Called after the Unroute command."
       "WireUncomp", "Called after the Unassign Component command."
       "WireTerminals", "Called after the Model Terminals command."
       "ChoosePart", "Called after the Choose Part command."
       "CreateConnection", "Called after the Create Connection command."
       "EditConnection", "Called after the Edit Connection command."
       "UnassignStock", "Called after the Remove Stock command."
       "CreateRun", "Called after the Create Run command."
       "RunPreDelete", "Called before deleting a run."
       "ReplaceStock", "Called after the Replace Stock command."
       "CreatePortConnection", "Called after the creating a connection between two ports."
       "WireCompProxy", "Called after the Assign Proxy command."
       "ReplacePart", "Called after the Replace Part command."
       "BrokenConnection", "Called after a port-to-port connection is broken."
       "EditReplacePart", "Unused."
       "AttrDiscrepancy", "Called after the Place Part and Replace Part commands."
       "AttributeCopyReplacePart", "Called after the Replace Part command."
       "Count", "The number of callback reasons."
    """
    Unknown = -1  # CustomManagerCallbackReasonMemberType
    PlacePart = 0  # CustomManagerCallbackReasonMemberType
    MovePart = 1  # CustomManagerCallbackReasonMemberType
    RemovePart = 2  # CustomManagerCallbackReasonMemberType
    MovePath = 3  # CustomManagerCallbackReasonMemberType
    CopyPath = 4  # CustomManagerCallbackReasonMemberType
    DeletePath = 5  # CustomManagerCallbackReasonMemberType
    TransformPath = 6  # CustomManagerCallbackReasonMemberType
    OffsetPath = 7  # CustomManagerCallbackReasonMemberType
    AssignStock = 8  # CustomManagerCallbackReasonMemberType
    WireRouteManual = 9  # CustomManagerCallbackReasonMemberType
    WireRouteAuto = 10  # CustomManagerCallbackReasonMemberType
    WireCompManual = 11  # CustomManagerCallbackReasonMemberType
    WireCompAuto = 12  # CustomManagerCallbackReasonMemberType
    WireUnroute = 13  # CustomManagerCallbackReasonMemberType
    WireUncomp = 14  # CustomManagerCallbackReasonMemberType
    WireTerminals = 15  # CustomManagerCallbackReasonMemberType
    ChoosePart = 16  # CustomManagerCallbackReasonMemberType
    CreateConnection = 17  # CustomManagerCallbackReasonMemberType
    EditConnection = 18  # CustomManagerCallbackReasonMemberType
    UnassignStock = 19  # CustomManagerCallbackReasonMemberType
    CreateRun = 20  # CustomManagerCallbackReasonMemberType
    RunPreDelete = 21  # CustomManagerCallbackReasonMemberType
    ReplaceStock = 22  # CustomManagerCallbackReasonMemberType
    CreatePortConnection = 23  # CustomManagerCallbackReasonMemberType
    WireCompProxy = 24  # CustomManagerCallbackReasonMemberType
    ReplacePart = 25  # CustomManagerCallbackReasonMemberType
    BrokenConnection = 26  # CustomManagerCallbackReasonMemberType
    EditReplacePart = 27  # CustomManagerCallbackReasonMemberType
    AttrDiscrepancy = 28  # CustomManagerCallbackReasonMemberType
    AttributeCopyReplacePart = 29  # CustomManagerCallbackReasonMemberType
    Count = 30  # CustomManagerCallbackReasonMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManagerDesignRuleReasonMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomManagerDesignRuleReason():
    """
    The reason for registering a design rule indicates which Routing commands will use the design rule.
    NOTE: The Interactive Check command calls all design rules regardless of the reason for
    which you registered a design rule.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "Used only for validation."
       "CreatePath", "Called after the Create Path command."
       "HealPath", "Called after the Heal Path command."
       "AssignCorner", "Called after the Assign Corner command."
       "AssignStock", "Called after the Assign Stock command."
       "RemoveStock", "Called after the Remove Stockcommand."
       "StockStyle", "Called after the Stock Style command."
       "PlacePart", "Called after the Place Part command."
       "CreateFabrication", "Called after the Create Fabrication command."
       "QualifyPart", "Called after the Qualify Part command."
       "MovePath", "Called after the Move Path command."
       "CopyPath", "Called after the Copy Path command."
       "DeletePath", "Called after the Delete Path command."
       "SubdivideSegment", "Called after the Subdivide Segment command."
       "SimplifyPath", "Called after the Simplify Path command."
       "RemovePart", "Called after the Remove Part command."
       "MovePart", "Called after the Move Part command."
       "EditCharacteristic", "Called after the Edit Characteristics command."
       "Interactive", "The design rule is called for an interactive check instead of after a particular command."
       "Batch", "Unused"
       "OrientStock", "Called after the Orient Stock command."
       "UnifyPath", "Called after the Unify Path command."
       "TransformPath", "Called after the Transform Path command."
       "OffsetPath", "Called after the Offset Path command."
       "AutoRoutePinLevel", "Called after the AutoRoute command using pin level routing."
       "ManualRoutePinLevel", "Called after the Manual Route command using pin level routing."
       "AutoRouteComponentLevel", "Called after the AutoRoute command using component level routing."
       "ManualRouteComponentLevel", "Called after the Manual Route command using component level routing."
       "Import", "Called after the Import command from the Routing Electrical application's navigators."
       "SpaceReservation", "Called after the Space Reservation command."
       "PartialAutoRoute", "Called after the Partial AutoRoute command."
       "PartialManualRoute", "Called after the Partial Manual Route command."
       "WindCatcher", "Called after the Wind Catcher command."
       "CreatePlatform", "Called after the Create Platform command."
       "EditPlacePart", "Called after the Edit Place Part command."
       "Count", "The number of design rule reasons."
    """
    Unknown = -1  # CustomManagerDesignRuleReasonMemberType
    CreatePath = 0  # CustomManagerDesignRuleReasonMemberType
    HealPath = 1  # CustomManagerDesignRuleReasonMemberType
    AssignCorner = 2  # CustomManagerDesignRuleReasonMemberType
    AssignStock = 3  # CustomManagerDesignRuleReasonMemberType
    RemoveStock = 4  # CustomManagerDesignRuleReasonMemberType
    StockStyle = 5  # CustomManagerDesignRuleReasonMemberType
    PlacePart = 6  # CustomManagerDesignRuleReasonMemberType
    CreateFabrication = 7  # CustomManagerDesignRuleReasonMemberType
    QualifyPart = 8  # CustomManagerDesignRuleReasonMemberType
    MovePath = 9  # CustomManagerDesignRuleReasonMemberType
    CopyPath = 10  # CustomManagerDesignRuleReasonMemberType
    DeletePath = 11  # CustomManagerDesignRuleReasonMemberType
    SubdivideSegment = 12  # CustomManagerDesignRuleReasonMemberType
    SimplifyPath = 13  # CustomManagerDesignRuleReasonMemberType
    RemovePart = 14  # CustomManagerDesignRuleReasonMemberType
    MovePart = 15  # CustomManagerDesignRuleReasonMemberType
    EditCharacteristic = 16  # CustomManagerDesignRuleReasonMemberType
    Interactive = 17  # CustomManagerDesignRuleReasonMemberType
    Batch = 18  # CustomManagerDesignRuleReasonMemberType
    OrientStock = 19  # CustomManagerDesignRuleReasonMemberType
    UnifyPath = 20  # CustomManagerDesignRuleReasonMemberType
    TransformPath = 21  # CustomManagerDesignRuleReasonMemberType
    OffsetPath = 22  # CustomManagerDesignRuleReasonMemberType
    AutoRoutePinLevel = 23  # CustomManagerDesignRuleReasonMemberType
    ManualRoutePinLevel = 24  # CustomManagerDesignRuleReasonMemberType
    AutoRouteComponentLevel = 25  # CustomManagerDesignRuleReasonMemberType
    ManualRouteComponentLevel = 26  # CustomManagerDesignRuleReasonMemberType
    Import = 27  # CustomManagerDesignRuleReasonMemberType
    SpaceReservation = 28  # CustomManagerDesignRuleReasonMemberType
    PartialAutoRoute = 29  # CustomManagerDesignRuleReasonMemberType
    PartialManualRoute = 30  # CustomManagerDesignRuleReasonMemberType
    WindCatcher = 31  # CustomManagerDesignRuleReasonMemberType
    CreatePlatform = 32  # CustomManagerDesignRuleReasonMemberType
    EditPlacePart = 33  # CustomManagerDesignRuleReasonMemberType
    Count = 34  # CustomManagerDesignRuleReasonMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManagerNavigatorTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomManagerNavigatorType():
    """
    Used by the navigator object selected plugin to indicate in which navigator the
    objects were selected.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Component", "The objects were selected in the component navigator."
       "Connection", "The objects were selected in the connection navigator."
    """
    Component = 0  # CustomManagerNavigatorTypeMemberType
    Connection = 1  # CustomManagerNavigatorTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManagerSelectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomManagerSelectionType():
    """
    Used by the navigator object selected plugin to indicate whether the objects are
    selected or deselected.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Deselected", "The objects were deselected."
       "Selected", "The objects were selected."
    """
    Deselected = 0  # CustomManagerSelectionTypeMemberType
    Selected = 1  # CustomManagerSelectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManagerPipingComponentFileOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomManagerPipingComponentFileOptions():
    """
    Used by the piping component file plugin to indicate if it should overwrite an existing file or not. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AskToOverwriteFile", "Prompt the user of the plugin if it is OK to overwrite the piping component file."
       "NeverOverwriteFile", "Never overwrite any existing piping component file. Throw an error if the file exists."
       "AlwaysOverwriteFile", "Always overwrite any existing piping component file."
    """
    AskToOverwriteFile = 0  # CustomManagerPipingComponentFileOptionsMemberType
    NeverOverwriteFile = 1  # CustomManagerPipingComponentFileOptionsMemberType
    AlwaysOverwriteFile = 2  # CustomManagerPipingComponentFileOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManagerDuctSizeCalculatorDuctShapeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomManagerDuctSizeCalculatorDuctShape():
    """
    Used by the Duct Size Calculator's create stock plugin to indicate what shape stock to create. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", " - "
       "Circular", " - "
       "FlatOval", " - "
    """
    Rectangular = 0  # CustomManagerDuctSizeCalculatorDuctShapeMemberType
    Circular = 1  # CustomManagerDuctSizeCalculatorDuctShapeMemberType
    FlatOval = 2  # CustomManagerDuctSizeCalculatorDuctShapeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManagerDuctSizeCalculatorDisplayNoteFlagMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomManagerDuctSizeCalculatorDisplayNoteFlag():
    """
    Used by the Duct Size Calculator's display note plugin to indicate whether to add or remove the note. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddNote", " - "
       "RemoveNote", " - "
    """
    AddNote = 0  # CustomManagerDuctSizeCalculatorDisplayNoteFlagMemberType
    RemoveNote = 1  # CustomManagerDuctSizeCalculatorDisplayNoteFlagMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomManager():
    """
    The Routing Custom Manager allows you to customize Routing by setting session wide Routing
    preferences and by adding plugins, callbacks, and design rules.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Session`
    
    .. versionadded:: NX12.0.0
    """
    
    class CallbackReason():
        """
        The reason for registering a callback indicates which Routing commands will use
        the callback.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "Used only for validation."
           "PlacePart", "Called after the Place Part command."
           "MovePart", "Called after the Move Part command."
           "RemovePart", "Called after the Remove Part command."
           "MovePath", "Called after the Move Path command."
           "CopyPath", "Called after the Copy Path command."
           "DeletePath", "Called after the Delete Path command."
           "TransformPath", "Called after the Transform Path command."
           "OffsetPath", "Called after the Offset Path command."
           "AssignStock", "Called after the Assign Stock command."
           "WireRouteManual", "Called after the Manual Route command."
           "WireRouteAuto", "Called after the AutoRoute command."
           "WireCompManual", "Called after the Manual Assign command."
           "WireCompAuto", "Called after the AutoAssign command."
           "WireUnroute", "Called after the Unroute command."
           "WireUncomp", "Called after the Unassign Component command."
           "WireTerminals", "Called after the Model Terminals command."
           "ChoosePart", "Called after the Choose Part command."
           "CreateConnection", "Called after the Create Connection command."
           "EditConnection", "Called after the Edit Connection command."
           "UnassignStock", "Called after the Remove Stock command."
           "CreateRun", "Called after the Create Run command."
           "RunPreDelete", "Called before deleting a run."
           "ReplaceStock", "Called after the Replace Stock command."
           "CreatePortConnection", "Called after the creating a connection between two ports."
           "WireCompProxy", "Called after the Assign Proxy command."
           "ReplacePart", "Called after the Replace Part command."
           "BrokenConnection", "Called after a port-to-port connection is broken."
           "EditReplacePart", "Unused."
           "AttrDiscrepancy", "Called after the Place Part and Replace Part commands."
           "AttributeCopyReplacePart", "Called after the Replace Part command."
           "Count", "The number of callback reasons."
        """
        Unknown = -1  # CustomManagerCallbackReasonMemberType
        PlacePart = 0  # CustomManagerCallbackReasonMemberType
        MovePart = 1  # CustomManagerCallbackReasonMemberType
        RemovePart = 2  # CustomManagerCallbackReasonMemberType
        MovePath = 3  # CustomManagerCallbackReasonMemberType
        CopyPath = 4  # CustomManagerCallbackReasonMemberType
        DeletePath = 5  # CustomManagerCallbackReasonMemberType
        TransformPath = 6  # CustomManagerCallbackReasonMemberType
        OffsetPath = 7  # CustomManagerCallbackReasonMemberType
        AssignStock = 8  # CustomManagerCallbackReasonMemberType
        WireRouteManual = 9  # CustomManagerCallbackReasonMemberType
        WireRouteAuto = 10  # CustomManagerCallbackReasonMemberType
        WireCompManual = 11  # CustomManagerCallbackReasonMemberType
        WireCompAuto = 12  # CustomManagerCallbackReasonMemberType
        WireUnroute = 13  # CustomManagerCallbackReasonMemberType
        WireUncomp = 14  # CustomManagerCallbackReasonMemberType
        WireTerminals = 15  # CustomManagerCallbackReasonMemberType
        ChoosePart = 16  # CustomManagerCallbackReasonMemberType
        CreateConnection = 17  # CustomManagerCallbackReasonMemberType
        EditConnection = 18  # CustomManagerCallbackReasonMemberType
        UnassignStock = 19  # CustomManagerCallbackReasonMemberType
        CreateRun = 20  # CustomManagerCallbackReasonMemberType
        RunPreDelete = 21  # CustomManagerCallbackReasonMemberType
        ReplaceStock = 22  # CustomManagerCallbackReasonMemberType
        CreatePortConnection = 23  # CustomManagerCallbackReasonMemberType
        WireCompProxy = 24  # CustomManagerCallbackReasonMemberType
        ReplacePart = 25  # CustomManagerCallbackReasonMemberType
        BrokenConnection = 26  # CustomManagerCallbackReasonMemberType
        EditReplacePart = 27  # CustomManagerCallbackReasonMemberType
        AttrDiscrepancy = 28  # CustomManagerCallbackReasonMemberType
        AttributeCopyReplacePart = 29  # CustomManagerCallbackReasonMemberType
        Count = 30  # CustomManagerCallbackReasonMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DesignRuleReason():
        """
        The reason for registering a design rule indicates which Routing commands will use the design rule.
        NOTE: The Interactive Check command calls all design rules regardless of the reason for
        which you registered a design rule.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "Used only for validation."
           "CreatePath", "Called after the Create Path command."
           "HealPath", "Called after the Heal Path command."
           "AssignCorner", "Called after the Assign Corner command."
           "AssignStock", "Called after the Assign Stock command."
           "RemoveStock", "Called after the Remove Stockcommand."
           "StockStyle", "Called after the Stock Style command."
           "PlacePart", "Called after the Place Part command."
           "CreateFabrication", "Called after the Create Fabrication command."
           "QualifyPart", "Called after the Qualify Part command."
           "MovePath", "Called after the Move Path command."
           "CopyPath", "Called after the Copy Path command."
           "DeletePath", "Called after the Delete Path command."
           "SubdivideSegment", "Called after the Subdivide Segment command."
           "SimplifyPath", "Called after the Simplify Path command."
           "RemovePart", "Called after the Remove Part command."
           "MovePart", "Called after the Move Part command."
           "EditCharacteristic", "Called after the Edit Characteristics command."
           "Interactive", "The design rule is called for an interactive check instead of after a particular command."
           "Batch", "Unused"
           "OrientStock", "Called after the Orient Stock command."
           "UnifyPath", "Called after the Unify Path command."
           "TransformPath", "Called after the Transform Path command."
           "OffsetPath", "Called after the Offset Path command."
           "AutoRoutePinLevel", "Called after the AutoRoute command using pin level routing."
           "ManualRoutePinLevel", "Called after the Manual Route command using pin level routing."
           "AutoRouteComponentLevel", "Called after the AutoRoute command using component level routing."
           "ManualRouteComponentLevel", "Called after the Manual Route command using component level routing."
           "Import", "Called after the Import command from the Routing Electrical application's navigators."
           "SpaceReservation", "Called after the Space Reservation command."
           "PartialAutoRoute", "Called after the Partial AutoRoute command."
           "PartialManualRoute", "Called after the Partial Manual Route command."
           "WindCatcher", "Called after the Wind Catcher command."
           "CreatePlatform", "Called after the Create Platform command."
           "EditPlacePart", "Called after the Edit Place Part command."
           "Count", "The number of design rule reasons."
        """
        Unknown = -1  # CustomManagerDesignRuleReasonMemberType
        CreatePath = 0  # CustomManagerDesignRuleReasonMemberType
        HealPath = 1  # CustomManagerDesignRuleReasonMemberType
        AssignCorner = 2  # CustomManagerDesignRuleReasonMemberType
        AssignStock = 3  # CustomManagerDesignRuleReasonMemberType
        RemoveStock = 4  # CustomManagerDesignRuleReasonMemberType
        StockStyle = 5  # CustomManagerDesignRuleReasonMemberType
        PlacePart = 6  # CustomManagerDesignRuleReasonMemberType
        CreateFabrication = 7  # CustomManagerDesignRuleReasonMemberType
        QualifyPart = 8  # CustomManagerDesignRuleReasonMemberType
        MovePath = 9  # CustomManagerDesignRuleReasonMemberType
        CopyPath = 10  # CustomManagerDesignRuleReasonMemberType
        DeletePath = 11  # CustomManagerDesignRuleReasonMemberType
        SubdivideSegment = 12  # CustomManagerDesignRuleReasonMemberType
        SimplifyPath = 13  # CustomManagerDesignRuleReasonMemberType
        RemovePart = 14  # CustomManagerDesignRuleReasonMemberType
        MovePart = 15  # CustomManagerDesignRuleReasonMemberType
        EditCharacteristic = 16  # CustomManagerDesignRuleReasonMemberType
        Interactive = 17  # CustomManagerDesignRuleReasonMemberType
        Batch = 18  # CustomManagerDesignRuleReasonMemberType
        OrientStock = 19  # CustomManagerDesignRuleReasonMemberType
        UnifyPath = 20  # CustomManagerDesignRuleReasonMemberType
        TransformPath = 21  # CustomManagerDesignRuleReasonMemberType
        OffsetPath = 22  # CustomManagerDesignRuleReasonMemberType
        AutoRoutePinLevel = 23  # CustomManagerDesignRuleReasonMemberType
        ManualRoutePinLevel = 24  # CustomManagerDesignRuleReasonMemberType
        AutoRouteComponentLevel = 25  # CustomManagerDesignRuleReasonMemberType
        ManualRouteComponentLevel = 26  # CustomManagerDesignRuleReasonMemberType
        Import = 27  # CustomManagerDesignRuleReasonMemberType
        SpaceReservation = 28  # CustomManagerDesignRuleReasonMemberType
        PartialAutoRoute = 29  # CustomManagerDesignRuleReasonMemberType
        PartialManualRoute = 30  # CustomManagerDesignRuleReasonMemberType
        WindCatcher = 31  # CustomManagerDesignRuleReasonMemberType
        CreatePlatform = 32  # CustomManagerDesignRuleReasonMemberType
        EditPlacePart = 33  # CustomManagerDesignRuleReasonMemberType
        Count = 34  # CustomManagerDesignRuleReasonMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NavigatorType():
        """
        Used by the navigator object selected plugin to indicate in which navigator the
        objects were selected.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Component", "The objects were selected in the component navigator."
           "Connection", "The objects were selected in the connection navigator."
        """
        Component = 0  # CustomManagerNavigatorTypeMemberType
        Connection = 1  # CustomManagerNavigatorTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SelectionType():
        """
        Used by the navigator object selected plugin to indicate whether the objects are
        selected or deselected.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Deselected", "The objects were deselected."
           "Selected", "The objects were selected."
        """
        Deselected = 0  # CustomManagerSelectionTypeMemberType
        Selected = 1  # CustomManagerSelectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PipingComponentFileOptions():
        """
        Used by the piping component file plugin to indicate if it should overwrite an existing file or not. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AskToOverwriteFile", "Prompt the user of the plugin if it is OK to overwrite the piping component file."
           "NeverOverwriteFile", "Never overwrite any existing piping component file. Throw an error if the file exists."
           "AlwaysOverwriteFile", "Always overwrite any existing piping component file."
        """
        AskToOverwriteFile = 0  # CustomManagerPipingComponentFileOptionsMemberType
        NeverOverwriteFile = 1  # CustomManagerPipingComponentFileOptionsMemberType
        AlwaysOverwriteFile = 2  # CustomManagerPipingComponentFileOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DuctSizeCalculatorDuctShape():
        """
        Used by the Duct Size Calculator's create stock plugin to indicate what shape stock to create. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", " - "
           "Circular", " - "
           "FlatOval", " - "
        """
        Rectangular = 0  # CustomManagerDuctSizeCalculatorDuctShapeMemberType
        Circular = 1  # CustomManagerDuctSizeCalculatorDuctShapeMemberType
        FlatOval = 2  # CustomManagerDuctSizeCalculatorDuctShapeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DuctSizeCalculatorDisplayNoteFlag():
        """
        Used by the Duct Size Calculator's display note plugin to indicate whether to add or remove the note. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddNote", " - "
           "RemoveNote", " - "
        """
        AddNote = 0  # CustomManagerDuctSizeCalculatorDisplayNoteFlagMemberType
        RemoveNote = 1  # CustomManagerDuctSizeCalculatorDisplayNoteFlagMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddCallback(self, reason: CustomManagerCallbackReason, callbackMethod: typing.Callable) -> int:
        """
        Adds the callback with the given reason.  
        
        NOTE: You can register more than one callback with the same reason.  
        
        Signature ``AddCallback(reason, callbackMethod)`` 
        
        :param reason:  The reason for which you want this callback called.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerCallbackReason` 
        :param callbackMethod:  The method you want to be called.  
        :type callbackMethod: CallableObject 
        :returns:  A unique identifier for your callback.  
        :rtype: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveCallback(self, callbackMethodId: int) -> None:
        """
        Removes the registered callback.  
        
        Signature ``RemoveCallback(callbackMethodId)`` 
        
        :param callbackMethodId:  The callback identifier indicating which callback to remove.  
        :type callbackMethodId: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAllCallbacksForReason(self, reason: CustomManagerCallbackReason) -> None:
        """
        Removes all the callbacks registered for a particular reason.  
        
        Signature ``RemoveAllCallbacksForReason(reason)`` 
        
        :param reason:  The reason for which you want to remove all the callbacks.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerCallbackReason` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAllCallbacks(self) -> None:
        """
        Removes all the registered callbacks, except those configured in the Application View (APV) file.  
        
        Signature ``RemoveAllCallbacks()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCallbacksRegisteredForReason(self, reason: CustomManagerCallbackReason) -> 'list[int]':
        """
        Returns the callbacks, if any, registered for the given reason.  
        
        Signature ``GetCallbacksRegisteredForReason(reason)`` 
        
        :param reason:  The reason for which you want a list of callbacks.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerCallbackReason` 
        :returns:  The callback indentifiers, if any, registered with this reason.  
        :rtype: list of int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddDesignRule(self, reason: CustomManagerDesignRuleReason, name: str, description: str, designRuleMethod: typing.Callable) -> int:
        """
        Adds the design rule with the given reason.  
        
        NOTE: You can register more than one design rule with the same reason.  
        
        Signature ``AddDesignRule(reason, name, description, designRuleMethod)`` 
        
        :param reason:  The reason for which you want this design rule called.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerDesignRuleReason` 
        :param name:  A descriptive name for this design rule.  
        :type name: str 
        :param description:  A detailed description of what this design rule checks.  
        :type description: str 
        :param designRuleMethod:  The method you want to be called.  
        :type designRuleMethod: CallableObject 
        :returns:  A unique identifier for your design rule.  
        :rtype: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveDesignRule(self, designRuleMethodId: int) -> None:
        """
        Removes the registered design rule.  
        
        Signature ``RemoveDesignRule(designRuleMethodId)`` 
        
        :param designRuleMethodId:  The design rule identifier indicating which design rule to remove.  
        :type designRuleMethodId: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAllDesignRulesForReason(self, reason: CustomManagerDesignRuleReason) -> None:
        """
        Removes all the design rules registered for a particular reason.  
        
        Signature ``RemoveAllDesignRulesForReason(reason)`` 
        
        :param reason:  The reason for which you want to remove all the design rules.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerDesignRuleReason` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAllDesignRules(self) -> None:
        """
        Removes all the registered design rules, except those configured in the Application View (APV) file.  
        
        Signature ``RemoveAllDesignRules()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDesignRulesRegisteredForReason(self, reason: CustomManagerDesignRuleReason) -> 'list[int]':
        """
        Returns the design rules, if any, registered for the given reason.  
        
        Signature ``GetDesignRulesRegisteredForReason(reason)`` 
        
        :param reason:  The reason for which you want a list of design rules.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerDesignRuleReason` 
        :returns:  The design rule indentifiers, if any, registered with this reason.  
        :rtype: list of int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetViolationsForReason(self, reason: CustomManagerDesignRuleReason) -> 'list[DesignRuleViolation]':
        """
        Returns any violations recorded against a design rule reason.  
        
        Signature ``GetViolationsForReason(reason)`` 
        
        :param reason:  The reason for which you want a list of violations.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerDesignRuleReason` 
        :returns:  The violations for this reason.  
        :rtype: list of :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetViolationsOfRule(self, designRuleName: str) -> 'list[DesignRuleViolation]':
        """
        Returns any violations recorded against a design rule.  
        
        Signature ``GetViolationsOfRule(designRuleName)`` 
        
        :param designRuleName:  The Design Rule for which you want a list of violations.  
        :type designRuleName: str 
        :returns:  The violations for this reason.  
        :rtype: list of :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateViolationForReason(self, designRuleName: str, reason: CustomManagerDesignRuleReason, shortDescription: str, longDescription: str, objects: 'list[NXOpen.NXObject]') -> DesignRuleViolation:
        """
        Creates a new violation for a design rule reason.  
        
        Signature ``CreateViolationForReason(designRuleName, reason, shortDescription, longDescription, objects)`` 
        
        :param designRuleName:  The Design Rule for which you want to create a new violation.  
        :type designRuleName: str 
        :param reason:  The reason for which you want to create a new violation.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerDesignRuleReason` 
        :param shortDescription:  A short description of the violation displayed as the message on the Design Rule Violation dialog.  
        :type shortDescription: str 
        :param longDescription:  A more detailed description of the violation displayed by the Full Violation Text button on the Design Rule Violation dialog.  
        :type longDescription: str 
        :param objects:  The objects in violation.  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns:  The newly created violation object.  
        :rtype: :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteViolationsOnObjectForReason(self, reason: CustomManagerDesignRuleReason, nxObject: NXOpen.NXObject) -> None:
        """
        Finds the violation of a design rule reason attached to the given object and deletes it.  
        
        Useful when the given object no longer violates this rule.
        This method calls update after deleting the violations. 
        
        Signature ``DeleteViolationsOnObjectForReason(reason, nxObject)`` 
        
        :param reason:  The reason for which you want to delete a violation.  
        :type reason: :py:class:`NXOpen.Routing.CustomManagerDesignRuleReason` 
        :param nxObject:  The object on which to delete the violation.  
        :type nxObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteViolationsOfRuleOnObject(self, designRuleName: str, nxObject: NXOpen.NXObject) -> None:
        """
        Finds the violation of a design rule attached to the given object and deletes it.  
        
        Useful when the given object no longer violates this rule.
        This method calls update after deleting the violations. 
        
        Signature ``DeleteViolationsOfRuleOnObject(designRuleName, nxObject)`` 
        
        :param designRuleName:  The Design Rule for which you want to delete a violation.  
        :type designRuleName: str 
        :param nxObject:  The object on which to delete the violation.  
        :type nxObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAllPlugins(self) -> None:
        """
        Removes all the registered plugins, except those configured in the Application View (APV) file.  
        
        Signature ``RemoveAllPlugins()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetHrnPreImportPlugin(self, hrnPreImportPlugin: typing.Callable) -> None:
        """
        Sets the plugin called before importing an HRN file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetHrnPreImportPlugin(hrnPreImportPlugin)`` 
        
        :param hrnPreImportPlugin:  The method you want Routing to call before importing an HRN file.  
        :type hrnPreImportPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveHrnPreImportPlugin(self) -> None:
        """
        Removes any registered pre-import HRN plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveHrnPreImportPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetHrnPostExportPlugin(self, hrnPostExportPlugin: typing.Callable) -> None:
        """
        Sets the plugin called just after Routing exports an HRN file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetHrnPostExportPlugin(hrnPostExportPlugin)`` 
        
        :param hrnPostExportPlugin:  The method you want Routing to call after exporting an HRN file.  
        :type hrnPostExportPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveHrnPostExportPlugin(self) -> None:
        """
        Removes any registered post-export HRN plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveHrnPostExportPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCmpPreImportPlugin(self, cmpPreImportPlugin: typing.Callable) -> None:
        """
        Sets the plugin called before importing an CMP file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetCmpPreImportPlugin(cmpPreImportPlugin)`` 
        
        :param cmpPreImportPlugin:  The method you want Routing to call before importing an CMP file.  
        :type cmpPreImportPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveCmpPreImportPlugin(self) -> None:
        """
        Removes any registered pre-import CMP plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveCmpPreImportPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCmpPostExportPlugin(self, cmpPostExportPlugin: typing.Callable) -> None:
        """
        Sets the plugin called just after Routing exports an CMP file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetCmpPostExportPlugin(cmpPostExportPlugin)`` 
        
        :param cmpPostExportPlugin:  The method you want Routing to call after exporting an CMP file.  
        :type cmpPostExportPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveCmpPostExportPlugin(self) -> None:
        """
        Removes any registered post-export CMP plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveCmpPostExportPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPlmXmlPreImportPlugin(self, plmXmlPreImportPlugin: typing.Callable) -> None:
        """
        Sets the plugin called before importing an PLMXML file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetPlmXmlPreImportPlugin(plmXmlPreImportPlugin)`` 
        
        :param plmXmlPreImportPlugin:  The method you want Routing to call before importing an PLMXML file.  
        :type plmXmlPreImportPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemovePlmXmlPreImportPlugin(self) -> None:
        """
        Removes any registered pre-import PLMXML plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemovePlmXmlPreImportPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPlmXmlPostExportPlugin(self, plmXmlPostExportPlugin: typing.Callable) -> None:
        """
        Sets the plugin called just after Routing exports an PLMXML file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetPlmXmlPostExportPlugin(plmXmlPostExportPlugin)`` 
        
        :param plmXmlPostExportPlugin:  The method you want Routing to call after exporting an PLMXML file.  
        :type plmXmlPostExportPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemovePlmXmlPostExportPlugin(self) -> None:
        """
        Removes any registered post-export PLMXML plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemovePlmXmlPostExportPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPlmXmlRouteNodeNamePlugin(self, plmXmlRouteNodeNamePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will call to get the name of the next Route Node for the PLMXML file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetPlmXmlRouteNodeNamePlugin(plmXmlRouteNodeNamePlugin)`` 
        
        :param plmXmlRouteNodeNamePlugin:  The method you want Routing to call to get the name of the next Route Node.  
        :type plmXmlRouteNodeNamePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemovePlmXmlRouteNodeNamePlugin(self) -> None:
        """
        Removes any registered Route Node name plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemovePlmXmlRouteNodeNamePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPlmXmlRouteSectionNamePlugin(self, plmXmlRouteSectionNamePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will call to get the name of the next Route Section for the PLMXML file.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetPlmXmlRouteSectionNamePlugin(plmXmlRouteSectionNamePlugin)`` 
        
        :param plmXmlRouteSectionNamePlugin:  The method you want Routing to call to get the name of the next Route Section.  
        :type plmXmlRouteSectionNamePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemovePlmXmlRouteSectionNamePlugin(self) -> None:
        """
        Removes any registered Route Section name plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemovePlmXmlRouteSectionNamePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetWrappedOverstockLengthCalculationPlugin(self, lengthCalculationPlugin: typing.Callable) -> None:
        """
        Sets the plugin called by Routing to calculate the length of a wrapped overstock.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetWrappedOverstockLengthCalculationPlugin(lengthCalculationPlugin)`` 
        
        :param lengthCalculationPlugin:  The method you want Routing to call to calculate the length of a wrapped overstock.  
        :type lengthCalculationPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveWrappedOverstockLengthCalculationPlugin(self) -> None:
        """
        Removes any registered wrapped overstock length calculation plugin,
        except one configured in the Application View (APV) file.  
        
        Signature ``RemoveWrappedOverstockLengthCalculationPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFilterBlankingPlugin(self, filterBlankingPlugin: typing.Callable) -> None:
        """
        Sets the plugin called by Routing to determine if a segment or component needs to be blanked.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetFilterBlankingPlugin(filterBlankingPlugin)`` 
        
        :param filterBlankingPlugin:  The method you want Routing to call to determine if a segment or component should be blanked.  
        :type filterBlankingPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveFilterBlankingPlugin(self) -> None:
        """
        Removes any registered filter blanking plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveFilterBlankingPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBomPlugin(self, bomPlugin: typing.Callable) -> None:
        """
        Sets the plugin called just after Routing creates a bill of materials.  
        
        The intent is that the plugin can then add stocks to Teamcenter's Product Structure.
        
        Will throw an error if one is already registered.
        
        Signature ``SetBomPlugin(bomPlugin)`` 
        
        :param bomPlugin:  The method you want Routing to call after creating a bill of materials.  
        :type bomPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveBomPlugin(self) -> None:
        """
        Removes any registered bill of materials plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveBomPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAutoRoutePlugin(self, autoRoutePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will instead of the internal automatic routing of
        connections along a path.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetAutoRoutePlugin(autoRoutePlugin)`` 
        
        :param autoRoutePlugin:  The method you want Routing to use instead of Routing's internal autoroute method.  
        :type autoRoutePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAutoRoutePlugin(self) -> None:
        """
        Removes any registered autoroute plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveAutoRoutePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetManualRoutePlugin(self, manualRoutePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will instead of the internal manual routing of
        connections along a path.  
        
        This uses the same plugin prototype as the autoroute plugin.
        Will throw an error if one is already registered.
        
        Signature ``SetManualRoutePlugin(manualRoutePlugin)`` 
        
        :param manualRoutePlugin:  The method you want Routing to use instead of Routing's internal manual route method.  
        :type manualRoutePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveManualRoutePlugin(self) -> None:
        """
        Removes any registered manual route plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveManualRoutePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetUnroutePlugin(self, unroutePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will instead of the internal unroute method.  
        
        This uses the same plugin prototype as the autoroute plugin.
        Will throw an error if one is already registered.
        
        Signature ``SetUnroutePlugin(unroutePlugin)`` 
        
        :param unroutePlugin:  The method you want Routing to use instead of Routing's internal unroute method.  
        :type unroutePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveUnroutePlugin(self) -> None:
        """
        Removes any registered unroute plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveUnroutePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSortConnectionsPlugin(self, sortConnectionsPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will call to sort the connections about to be routed.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetSortConnectionsPlugin(sortConnectionsPlugin)`` 
        
        :param sortConnectionsPlugin:  The method you want Routing to use to sort the connections.  
        :type sortConnectionsPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveSortConnectionsPlugin(self) -> None:
        """
        Removes any registered sort connections plugin.  
        
        Signature ``RemoveSortConnectionsPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetNavigatorObjectSelectedPlugin(self, navigatorObjectSelectedPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will call whenever an object on the Component or
        Connection Navigator is selected or deselected.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetNavigatorObjectSelectedPlugin(navigatorObjectSelectedPlugin)`` 
        
        :param navigatorObjectSelectedPlugin:  The method you want Routing to use instead of Routing's internal manual route method.  
        :type navigatorObjectSelectedPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveNavigatorObjectSelectedPlugin(self) -> None:
        """
        Removes any registered navigator object selected plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveNavigatorObjectSelectedPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBundlePlugin(self, bundlePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will call to determine the bundle diameter for each
        bundle in a harness.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetBundlePlugin(bundlePlugin)`` 
        
        :param bundlePlugin:  The method you want Routing to call to determine the bundle diameters.  
        :type bundlePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveBundlePlugin(self) -> None:
        """
        Removes any registered bundle plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveBundlePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetValidateFormboardPlugin(self, validateFormboardPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will call to validate the harnesses on a formboard.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetValidateFormboardPlugin(validateFormboardPlugin)`` 
        
        :param validateFormboardPlugin:  The method you want Routing to call to validate the formboard harnesses.  
        :type validateFormboardPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def RemoveValidateFormboardPlugin(self) -> None:
        """
        Removes any registered validate formboard plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveValidateFormboardPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def SetStockComponentLockedPlugin(self, stockComponentLockedPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will call to see if a stock component is modifiable.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetStockComponentLockedPlugin(stockComponentLockedPlugin)`` 
        
        :param stockComponentLockedPlugin:  The method you want Routing to call to see if a stock component is modifiable.  
        :type stockComponentLockedPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveStockComponentLockedPlugin(self) -> None:
        """
        Removes any registered stock component locked plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveStockComponentLockedPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetUnifyPathPlugin(self, unifyPathPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will use for the Unify Path command.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetUnifyPathPlugin(unifyPathPlugin)`` 
        
        :param unifyPathPlugin:  The method you want Routing to use for the Unify Path command.  
        :type unifyPathPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveUnifyPathPlugin(self) -> None:
        """
        Removes any registered unify path plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveUnifyPathPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPipingComponentFilePlugin(self, pipingComponentFilePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will use for the Unify Path command.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetPipingComponentFilePlugin(pipingComponentFilePlugin)`` 
        
        :param pipingComponentFilePlugin:  The method you want Routing to use for the piping component file plugin.  
        :type pipingComponentFilePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_pipetube ("Routing Piping and Tubing")
        """
        ...
    
    
    def RemovePipingComponentFilePlugin(self) -> None:
        """
        Removes any registered piping component file plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemovePipingComponentFilePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_pipetube ("Routing Piping and Tubing")
        """
        ...
    
    
    def SetDuctSizeCalculatorCreateStockPlugin(self, createStockPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will use to create stock for the Duct Size Calculator command.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetDuctSizeCalculatorCreateStockPlugin(createStockPlugin)`` 
        
        :param createStockPlugin:  The method you want Routing to use for the create stock plugin.  
        :type createStockPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def RemoveDuctSizeCalculatorCreateStockPlugin(self) -> None:
        """
        Removes any registered create stock plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveDuctSizeCalculatorCreateStockPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def SetDuctSizeCalculatorDisplayNotePlugin(self, displayNotePlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will use to display a note on the segments selected in the Duct Size Calculator.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetDuctSizeCalculatorDisplayNotePlugin(displayNotePlugin)`` 
        
        :param displayNotePlugin:  The method you want Routing to use to display the note.  
        :type displayNotePlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def RemoveDuctSizeCalculatorDisplayNotePlugin(self) -> None:
        """
        Removes any registered display note plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveDuctSizeCalculatorDisplayNotePlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def SetDisciplineChangedPlugin(self, disciplineChangedPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will use to display a note on the segments selected in the Duct Size Calculator.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetDisciplineChangedPlugin(disciplineChangedPlugin)`` 
        
        :param disciplineChangedPlugin:  The method you want Routing to call when the user changes the discipline.  
        :type disciplineChangedPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def RemoveDisciplineChangedPlugin(self) -> None:
        """
        Removes any registered discpline changed plugin.  
        
        Signature ``RemoveDisciplineChangedPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def SetSpecificationChangedPlugin(self, specificationChangedPlugin: typing.Callable) -> None:
        """
        Sets the plugin Routing will use to display a note on the segments selected in the Duct Size Calculator.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetSpecificationChangedPlugin(specificationChangedPlugin)`` 
        
        :param specificationChangedPlugin:  The method you want Routing to call when the user changes the specification.  
        :type specificationChangedPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def RemoveSpecificationChangedPlugin(self) -> None:
        """
        Removes any registered discpline changed plugin.  
        
        Signature ``RemoveSpecificationChangedPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def SetChoosePartPlugin(self, choosePartPlugin: typing.Callable) -> None:
        """
        Sets the choose part plugin.  
        
        Will throw an error if one is already registered.
        
        Signature ``SetChoosePartPlugin(choosePartPlugin)`` 
        
        :param choosePartPlugin:  The method you want Routing to use to choose a part to be placed.  
        :type choosePartPlugin: CallableObject 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveChoosePartPlugin(self) -> None:
        """
        Removes any registered choose part plugin, except one configured in the Application View (APV) file.  
        
        Signature ``RemoveChoosePartPlugin()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class DivisionSplitDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DivisionSplitDirectionType():
    """
    The direction in which the cross-section is to be split 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SplitVertically", "Creates a vertical split"
       "SplitHorizontally", "Creates a horizontal split"
    """
    SplitVertically = 0  # DivisionSplitDirectionTypeMemberType
    SplitHorizontally = 1  # DivisionSplitDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Division(NXOpen.NXObject):
    """
    Represents :py:class:`NXOpen.Routing.Division`   
    
    Creator not available in KF because transient objects are not supported.
    
    .. versionadded:: NX7.5.0
    """
    
    class SplitDirectionType():
        """
        The direction in which the cross-section is to be split 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SplitVertically", "Creates a vertical split"
           "SplitHorizontally", "Creates a horizontal split"
        """
        SplitVertically = 0  # DivisionSplitDirectionTypeMemberType
        SplitHorizontally = 1  # DivisionSplitDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateSplitterCurve(self) -> None:
        """
        Creates splitting Curve.  
        
        Signature ``CreateSplitterCurve()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def UpdateFlow(self, leftChildFlow: float, rightChildFlow: float, isAbsoluteFlow: bool) -> None:
        """
        Update the Flow.  
        
        Signature ``UpdateFlow(leftChildFlow, rightChildFlow, isAbsoluteFlow)`` 
        
        :param leftChildFlow:  percentage absolute or relative flow in the left child division  
        :type leftChildFlow: float 
        :param rightChildFlow:  percentage absolute or relative flow in the right child division  
        :type rightChildFlow: float 
        :param isAbsoluteFlow:  if TRUE: displays absolute flow percentage for each                                                                        division, else displays relative flow percentage  
        :type isAbsoluteFlow: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def DeleteAllChildren(self) -> None:
        """
        Deletes all children divisions of the input division and the splitter curves
        that were used to create the children divisions.  
        
        In case the input division
        is the root division or the immediate child of the root division then the
        root division and the boundary curves are also deleted. 
        
        Signature ``DeleteAllChildren()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    SplitDirection: DivisionSplitDirectionType = ...
    """
    Returns or sets  the direction of split, either vertical or horizontal 
    
    <hr>
    
    Getter Method
    
    Signature ``SplitDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DivisionSplitDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``SplitDirection`` 
    
    :param splitDirection: 
    :type splitDirection: :py:class:`NXOpen.Routing.DivisionSplitDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Null: Division = ...  # unknown typename


class MiterCorner(Corner):
    """
    This class defines a mitered corner.  
    
    That is a corner where the stock is extended and
    trimmed to form a flush connection at an angle.  When stock is updated, the stock solid
    body is extended and then trimmed to the miter plain.  The miter plane is defined as
    the plane that is perpendicular to the plane formed by the two linear segments
    that meet at the corner, and bisecting the angle between the two linear segments.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.MiterCornerCollection.AssignCorner`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetSegments(self) -> 'list[ISegment]':
        """
        Gets the segments of the miter corner object.  
        
        Signature ``GetSegments()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    Null: MiterCorner = ...  # unknown typename


class AssignCornerBuilder(NXOpen.Builder):
    """
    Builder class for Assign Corner which creates corner  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateAssignCornerBuilder`
    
    Default values.
    
    ==============================================================  ======================================
    Property                                                        Value
    ==============================================================  ======================================
    RouteAssignCornerCornerBlock.RouteCornerBendMethods             Radius 
    --------------------------------------------------------------  --------------------------------------
    RouteAssignCornerCornerBlock.RouteCornerBendOptions             Radius 
    --------------------------------------------------------------  --------------------------------------
    RouteAssignCornerCornerBlock.RouteCornerRadius.Value            0 (millimeters part), 0 (inches part) 
    --------------------------------------------------------------  --------------------------------------
    RouteAssignCornerCornerBlock.RouteCornerRatioToDiameter.Value   0 (millimeters part), 0 (inches part) 
    --------------------------------------------------------------  --------------------------------------
    RouteAssignCornerCornerBlock.RouteCornerRequireLinearSolution   0 
    --------------------------------------------------------------  --------------------------------------
    RouteAssignCornerCornerBlock.RouteCornerTypeOptions             None 
    ==============================================================  ======================================
    
    .. versionadded:: NX6.0.0
    """
    
    def SetStockList(self, stockObjects: 'list[Stock]') -> None:
        """
        Set the :py:class:`NXOpen.Routing.Stock` object list when list box
        is updated.  
        
        Signature ``SetStockList(stockObjects)`` 
        
        :param stockObjects:  Routing Stocks for cope creation 
        :type stockObjects: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendCornerAttributes(self) -> CharacteristicList:
        """
        Corner Attributes  
        
        Signature ``GetBendCornerAttributes()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBendCornerAttributes(self, selectedRowAttributesCharxList: CharacteristicList) -> None:
        """
        Corner Attributes 
        
        Signature ``SetBendCornerAttributes(selectedRowAttributesCharxList)`` 
        
        :param selectedRowAttributesCharxList: 
        :type selectedRowAttributesCharxList: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAttributeHolder(self) -> NXOpen.NXObject:
        """
        Gets Attribute holder in builder, which is user for template attribute assignment.  
        
        Signature ``GetAttributeHolder()`` 
        
        :returns:  Object to hold template attributes  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    RadiusFromBendTable: float = ...
    """
    Returns or sets  the radius determined using the stock and the bend radius table.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusFromBendTable`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.1
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RadiusFromBendTable`` 
    
    :param radius: 
    :type radius: float 
    
    .. versionadded:: NX12.0.1
    
    License requirements: routing_base ("Routing Basic")
    """
    ReverseValue: int = ...
    """
    Returns or sets  the value to store whether reverse order (for bend creation) or not
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseValue`` 
    
    :param num: 
    :type num: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteAssignCornerCornerBlock: CornerTypeBuilder = ...
    """
    Returns  the route assign corner corner block 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteAssignCornerCornerBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CornerTypeBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteAssignCornerEndObject: NXOpen.SelectNXObject = ...
    """
    Returns  the route assign corner end objects.  
    
    Valid start objects objects are :py:class:`NXOpen.Routing.ControlPoint`
    and :py:class:`NXOpen.Routing.ISegment`
    
    <hr>
    
    Getter Method
    
    Signature ``RouteAssignCornerEndObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteAssignCornerRouteSelection: RouteObjectCollector = ...
    """
    Returns  the routing object colletor 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteAssignCornerRouteSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteAssignCornerStartObject: NXOpen.SelectNXObject = ...
    """
    Returns  the route assign corner start objects.  
    
    Valid start objects are :py:class:`NXOpen.Routing.ControlPoint`
    and :py:class:`NXOpen.Routing.ISegment`
    
    <hr>
    
    Getter Method
    
    Signature ``RouteAssignCornerStartObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SelectCopeStock: NXOpen.SelectNXObjectList = ...
    """
    Returns  the user selected correct object where correct object is
    :py:class:`NXOpen.Routing.Stock` and :py:class:`NXOpen.Routing.ISegment`.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCopeStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    UBendSelection: RouteObjectCollector = ...
    """
    Returns  the routing object collector for ubend
    
    <hr>
    
    Getter Method
    
    Signature ``UBendSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: AssignCornerBuilder = ...  # unknown typename


class ClockPartBuilder(NXOpen.Builder):
    """
    Builder class for clock part object   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateClockPartBuilder`
    
    Default values.
    
    ====================  =====
    Property              Value
    ====================  =====
    RotationAngle.Value   0 
    ====================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    def StartDrag(self) -> None:
        """
        Begin a drag operation.  
        
        Signature ``StartDrag()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DragByTransform(self, translation: NXOpen.Vector3d, rotation: NXOpen.Matrix3x3) -> None:
        """
        Drag the selected objects by the given translation and rotation.  
        
        Only
        call after invoking the :py:meth:`Routing.ClockPartBuilder.StartDrag`
        method.  After finished dragging, call 
        :py:meth:`Routing.ClockPartBuilder.StopDrag`.
        
        Signature ``DragByTransform(translation, rotation)`` 
        
        :param translation:  The translation to be applied. 
        :type translation: :py:class:`NXOpen.Vector3d` 
        :param rotation:  The rotation to be applied  
        :type rotation: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def StopDrag(self) -> None:
        """
        End a drag operation.  
        
        Signature ``StopDrag()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SuppressPortConstraint(self, portTag: Port, suppress: bool) -> None:
        """
        Suppress the constraind applied to the selected :py:class:`NXOpen.Routing.Port` 
        
        Signature ``SuppressPortConstraint(portTag, suppress)`` 
        
        :param portTag:  Routing Port whose                                                                     constraint is to be suppressed  
        :type portTag: :py:class:`NXOpen.Routing.Port` 
        :param suppress:  true to suppress , false to unsuppress  
        :type suppress: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateRotationAngle(self, angle: float) -> None:
        """
        Suppress the constraind applied to the selected :py:class:`NXOpen.Routing.Port` 
        
        Signature ``UpdateRotationAngle(angle)`` 
        
        :param angle:  true to suppress , false to unsuppress  
        :type angle: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def InitializeFromPort(self, port: Port) -> None:
        """
        Initializes (or resets) the builder based off of the input line segment.  
        
        Signature ``InitializeFromPort(port)`` 
        
        :param port:  port object, may be None 
        :type port: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetLockRotation(self, lockRotation: bool) -> None:
        """
        Set RotationLock of builder attribute
        
        Signature ``SetLockRotation(lockRotation)`` 
        
        :param lockRotation:  Lock Rotation 
        :type lockRotation: bool 
        
        .. versionadded:: NX7.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetLockEngagement(self, lockEngagement: bool) -> None:
        """
        Set EngagementLock of builder attribute
        
        Signature ``SetLockEngagement(lockEngagement)`` 
        
        :param lockEngagement:  Lock Engagement 
        :type lockEngagement: bool 
        
        .. versionadded:: NX7.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    PortSelection: NXOpen.SelectNXObject = ...
    """
    Returns  the user selected :py:class:`NXOpen.Routing.Port` for rotation of compoent 
    
    <hr>
    
    Getter Method
    
    Signature ``PortSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RotationAngle: NXOpen.Expression = ...
    """
    Returns  the rotation angle applied to the component for rotation 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ClockPartBuilder = ...  # unknown typename


class RoutePartDescriptorSourceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutePartDescriptorSourceType():
    """
    Descriptor Type for a :py:class:`NXOpen.Routing.RoutePartDescriptor`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Null", " - "
       "PartAttribute", " - "
       "Expression", " - "
       "DumbCopy", " - "
    """
    Null = 0  # RoutePartDescriptorSourceTypeMemberType
    PartAttribute = 1  # RoutePartDescriptorSourceTypeMemberType
    Expression = 2  # RoutePartDescriptorSourceTypeMemberType
    DumbCopy = 3  # RoutePartDescriptorSourceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutePartDescriptorCharxTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutePartDescriptorCharxType():
    """
    Charx Type for a :py:class:`NXOpen.Routing.RoutePartDescriptor`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Int", " - "
       "Real", " - "
       "Sting", " - "
       "Any", " - "
       "Ref", " - "
       "AnyRef", " - "
    """
    Int = 0  # RoutePartDescriptorCharxTypeMemberType
    Real = 1  # RoutePartDescriptorCharxTypeMemberType
    Sting = 4  # RoutePartDescriptorCharxTypeMemberType
    Any = 6  # RoutePartDescriptorCharxTypeMemberType
    Ref = 10  # RoutePartDescriptorCharxTypeMemberType
    AnyRef = 12  # RoutePartDescriptorCharxTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoutePartDescriptor(NXOpen.TaggedObject):
    """
    Represents a part descriptor chrx.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RoutePartDescriptorCollection.CreatePartDescriptor`
    
    .. versionadded:: NX4.0.0
    """
    
    class SourceType():
        """
        Descriptor Type for a :py:class:`NXOpen.Routing.RoutePartDescriptor`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Null", " - "
           "PartAttribute", " - "
           "Expression", " - "
           "DumbCopy", " - "
        """
        Null = 0  # RoutePartDescriptorSourceTypeMemberType
        PartAttribute = 1  # RoutePartDescriptorSourceTypeMemberType
        Expression = 2  # RoutePartDescriptorSourceTypeMemberType
        DumbCopy = 3  # RoutePartDescriptorSourceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CharxType():
        """
        Charx Type for a :py:class:`NXOpen.Routing.RoutePartDescriptor`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Int", " - "
           "Real", " - "
           "Sting", " - "
           "Any", " - "
           "Ref", " - "
           "AnyRef", " - "
        """
        Int = 0  # RoutePartDescriptorCharxTypeMemberType
        Real = 1  # RoutePartDescriptorCharxTypeMemberType
        Sting = 4  # RoutePartDescriptorCharxTypeMemberType
        Any = 6  # RoutePartDescriptorCharxTypeMemberType
        Ref = 10  # RoutePartDescriptorCharxTypeMemberType
        AnyRef = 12  # RoutePartDescriptorCharxTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DescriptorCharxType: RoutePartDescriptorCharxType = ...
    """
    Returns or sets  the charx type for the part descriptor used by Routing.  
    
    <hr>
    
    Getter Method
    
    Signature ``DescriptorCharxType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RoutePartDescriptorCharxType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DescriptorCharxType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Routing.RoutePartDescriptorCharxType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    DescriptorSourceType: RoutePartDescriptorSourceType = ...
    """
    Returns or sets  the descriptor type for the part descriptor used by Routing.  
    
    <hr>
    
    Getter Method
    
    Signature ``DescriptorSourceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RoutePartDescriptorSourceType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DescriptorSourceType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Routing.RoutePartDescriptorSourceType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Expression: str = ...
    """
    Returns or sets  the expression for the part descriptor used by Routing.  
    
    <hr>
    
    Getter Method
    
    Signature ``Expression`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Expression`` 
    
    :param expression: 
    :type expression: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Title: str = ...
    """
    Returns or sets  the title for the part descriptor used by Routing.  
    
    <hr>
    
    Getter Method
    
    Signature ``Title`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Title`` 
    
    :param title: 
    :type title: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: RoutePartDescriptor = ...  # unknown typename


class TerminalMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Terminal():
    """
    Option to query if an existing :py:class:`NXOpen.Routing.ISegment`
    is a terminal segment. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotTerminalSeg", "Is not a terminal segment"
       "TerminalSeg", "Is a terminal segment"
    """
    NotTerminalSeg = 0  # TerminalMemberType
    TerminalSeg = 1  # TerminalMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PartDefinitionShadow(ItemDefinition):
    """
    :py:class:`NXOpen.Routing.PartDefinitionShadow` contains the defining data for a
    logical part, such as an connector.  
    
    :py:class:`NXOpen.Routing.PartDefinitionShadow`s contains a list of
    :py:class:`NXOpen.Routing.InterfaceTerminalShadow`s.  Component assignment
    associates the physical NX component to the logical component defined by this
    :py:class:`NXOpen.Routing.PartDefinitionShadow`.
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    
    def GetInterfaceTerminalShadows(self) -> 'list[InterfaceTerminalShadow]':
        """
        Returns the
        :py:class:`NXOpen.Routing.PartDefinitionShadow`'s associated
        :py:class:`NXOpen.Routing.InterfaceTerminalShadow`s.  
        
        Signature ``GetInterfaceTerminalShadows()`` 
        
        :returns:  The :py:class:`NXOpen.Routing.InterfaceTerminalShadow`s
        for this :py:class:`NXOpen.Routing.PartDefinitionShadow`  
        :rtype: list of :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Null: PartDefinitionShadow = ...  # unknown typename


class ConnectivityDefinition(RouteObject):
    """
    The base class for various connection objects.
    
    Reference subclasses for more information.  
    See NX Open Routing help for detailed information on the Connection data model.
    This is an abstract class.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    ImplementedBy: RouteObject = ...
    """
    Returns  the :py:class:`NXOpen.Routing.RouteObject` implementing a connection.  
    
    Is typically a :py:class:`NXOpen.Routing.Electrical.WireDevice`, :py:class:`NXOpen.Routing.Electrical.CableDevice`,
    :py:class:`NXOpen.Routing.Electrical.ShieldDevice`
    
    <hr>
    
    Getter Method
    
    Signature ``ImplementedBy`` 
    
    :returns:  Route Object implementing connection  
    :rtype: :py:class:`NXOpen.Routing.RouteObject` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ConnectivityDefinition = ...  # unknown typename


class OverstockFacesBuilder(NXOpen.Builder):
    """
    Builder for qualifying faces for overstock application over fittings.  
    
    These faces will be used to apply overstock automatically without explicit
    face selection during overstock application over fittings. 
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateOverstockFacesBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Faces: NXOpen.SelectFaceList = ...
    """
    Returns  the faces qualified for overstock application.  
    
    <hr>
    
    Getter Method
    
    Signature ``Faces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: OverstockFacesBuilder = ...  # unknown typename


class RoutingBulkReplacementBuilderLibrarySelectSourceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoutingBulkReplacementBuilderLibrarySelectSourceType():
    """
    Defines the library select source. Unspecified, classification and specific part 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unspecified", "Library select source is not specified"
       "Classification", "Library select source is a classification object"
       "SpecificPart", "Library select source is a specific part"
    """
    Unspecified = 0  # RoutingBulkReplacementBuilderLibrarySelectSourceTypeMemberType
    Classification = 1  # RoutingBulkReplacementBuilderLibrarySelectSourceTypeMemberType
    SpecificPart = 2  # RoutingBulkReplacementBuilderLibrarySelectSourceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockTransitionBuilder(NXOpen.Builder):
    """
    Builder for creating/editing stockTransition.  
    
    Create StockTransition: Takes a set of segments and assign characteristics of the selected stock
    to the segments.
    
    Edit Stock: Takes in the selected stockTransition to edit as input and redefines
    the stockTransition with the new settings.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockTransitionBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def SetStockTransitionProperties(self) -> None:
        """
        Signature ``SetStockTransitionProperties()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    EndProfileOriginCurve: NXOpen.SelectCurve = ...
    """
    Returns  the origin curve of end profile 
    
    <hr>
    
    Getter Method
    
    Signature ``EndProfileOriginCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    EndProfileOriginCurveDirection: bool = ...
    """
    Returns or sets  the direction of origin curve of end profile 
    
    <hr>
    
    Getter Method
    
    Signature ``EndProfileOriginCurveDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EndProfileOriginCurveDirection`` 
    
    :param endProfileOriginCurveDirection: 
    :type endProfileOriginCurveDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SegmentCollector: RouteObjectCollector = ...
    """
    Returns  the segment collector 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    StartProfileOriginCurve: NXOpen.SelectCurve = ...
    """
    Returns  the origin curve of start profile 
    
    <hr>
    
    Getter Method
    
    Signature ``StartProfileOriginCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    StartProfileOriginCurveDirection: bool = ...
    """
    Returns or sets  the direction of origin curve of start profile 
    
    <hr>
    
    Getter Method
    
    Signature ``StartProfileOriginCurveDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StartProfileOriginCurveDirection`` 
    
    :param startProfileOriginCurveDirection: 
    :type startProfileOriginCurveDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    StockSettings: PathStockBuilder = ...
    """
    Returns or sets  the stock settings for stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockSettings`` 
    
    :param pathStockBuilder: 
    :type pathStockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: StockTransitionBuilder = ...  # unknown typename


class CopeCornerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.CopeCorner` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def AssignCopeCorner(self, rcp: ControlPoint, copeStocks: 'list[Stock]') -> CopeCorner:
        """
        Assigns a cope corner to the given control point.  
        
        The input stocks must
        cover segments that are attached at the input control point.  There
        must be at least two input stocks.  
        
        Signature ``AssignCopeCorner(rcp, copeStocks)`` 
        
        :param rcp:  Route control point to cope.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param copeStocks:  Stocks to cope  
        :type copeStocks: list of :py:class:`NXOpen.Routing.Stock` 
        :returns:  The newly created Cope Corner  
        :rtype: :py:class:`NXOpen.Routing.CopeCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    


class BendReportManagerYbcReport_Struct():
    """
    Used in the YBC bend reports.  
    
    The last bend value isn't actually a bend.
    The only valid value is the Y value, which is the length after the last bend.
    All values are relative, meaning they are calculated from the previous bend.
    So if bend1 has B value of 90 degrees and bend2 has a B value of 90 degrees,
    then the pipe has rotated 180 degrees about the Y axis.
    .
    Constructor: 
    NXOpen.Routing.BendReportManager.YbcReport()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Y: float = ...
    """
    The length along the stock before the bend.  
    
    <hr>
    
    Field Value
    Type:float
    """
    B: float = ...
    """
    The rotation angle in degrees about the Y axis of the stock.  
    
    <hr>
    
    Field Value
    Type:float
    """
    C: float = ...
    """
    The rotation angle in degrees about the Z axis of the stock.  
    
    <hr>
    
    Field Value
    Type:float
    """
    Radius: float = ...
    """
    Radius of the bend.  
    
    <hr>
    
    Field Value
    Type:float
    """


class BendReportManagerMil98Report_Struct():
    """
    Used in the MIL-D-9898 C specification reports.  
    
    All values are absolute and cumulative.
    See MIL-D-9898C for more information.
    .
    Constructor: 
    NXOpen.Routing.BendReportManager.Mil98Report()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    C: float = ...
    """
    The distance before the bend, from the start of the cable
    to the beginning point of the bend.  
    
    <hr>
    
    Field Value
    Type:float
    """
    F: float = ...
    """
    The radius of the bend.  
    
    <hr>
    
    Field Value
    Type:float
    """
    E: float = ...
    """
    The turn angle, this is the angle about the Y axis, relative
    to initial position (cumulation of the B value in YBC).  
    
    <hr>
    
    Field Value
    Type:float
    """
    G: float = ...
    """
    The bend angle.  
    
    (The C value in YBC). 
    <hr>
    
    Field Value
    Type:float
    """
    Y: float = ...
    """
    The Y value from the YBC format.  
    
    <hr>
    
    Field Value
    Type:float
    """


class BendReportManager():
    """
    The Routing Bend Report Manager allows you to get a variety of bend reports.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    """
    
    class SegmentInformation():
        """
        Used by all the reports to hold the information of the segments under port,
        solid body, segment, stock, stock component, or feature representing the piece of stock.  
        
        Generated by calling :py:meth:`Routing.BendReportManager.GetSegmentInformation`.
        .
        Constructor: 
        NXOpen.Routing.BendReportManager.SegmentInformation()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Stock: Stock = ...
        """
        :py:class:`Routing.Stock` 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Routing.Stock`
        """
        Segment: NXOpen.Curve = ...
        """
        The segment itself.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Curve`
        """
        IsStraight: bool = ...
        """
        True if the :py:class:`Routing.ISegment` is straight.  
        
        <hr>
        
        Field Value
        Type:bool
        """
        Length: float = ...
        """
        Length of :py:class:`Routing.ISegment` 
        <hr>
        
        Field Value
        Type:float
        """
        StartControlPoint: ControlPoint = ...
        """
        Start :py:class:`Routing.ControlPoint`.  
        
        Do not use for S-Bends and bends greater than or
        equal to 180 degrees. 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Routing.ControlPoint`
        """
        EndControlPoint: ControlPoint = ...
        """
        End :py:class:`Routing.ControlPoint`.  
        
        Do not use for S-Bends and bends greater than or
        equal to 180 degrees. 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Routing.ControlPoint`
        """
        BendCorner: BendCorner = ...
        """
        :py:class:`Routing.BendCorner` 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Routing.BendCorner`
        """
        BendRadius: float = ...
        """
        Radius of the bend 
        <hr>
        
        Field Value
        Type:float
        """
        BendPosition: NXOpen.Point3d = ...
        """
        Position of the bend rcp 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Point3d`
        """
        StartNormal: NXOpen.Vector3d = ...
        """
        Normal of curve at start points 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Vector3d`
        """
        EndNormal: NXOpen.Vector3d = ...
        """
        Normal of curve at end points 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Vector3d`
        """
        StartControlPointPosition: NXOpen.Point3d = ...
        """
        Location of start :py:class:`Routing.ControlPoint`
        in ABS coordinates, use this instead of the start
        :py:class:`Routing.ControlPoint` for S-Bends
        and bends greater than or equal to 180 degrees.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Point3d`
        """
        EndControlPointPosition: NXOpen.Point3d = ...
        """
        Location of end :py:class:`Routing.ControlPoint`
        in ABS coordinates, use this instead of the end
        :py:class:`Routing.ControlPoint` for S-Bends
        and bends greater than or equal to 180 degrees.  
        
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Point3d`
        """
    
    
    class XyzReport():
        """
        Used in the XYZ bend reports.  
        
        The first bend value is at one end point of the stock body
        and the last bend value is at the other end point of the stock body.  The other bend
        values are the location in work coordinates of the bend :py:class:`Routing.ControlPoint`s
        associated with each bend or the location of where the bend :py:class:`Routing.ControlPoint`s
        would be if they existed.
        .
        Constructor: 
        NXOpen.Routing.BendReportManager.XyzReport()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Xc: float = ...
        """
        X position of bend :py:class:`Routing.ControlPoint` in work coordinates.  
        
        <hr>
        
        Field Value
        Type:float
        """
        Yc: float = ...
        """
        Y position of bend :py:class:`Routing.ControlPoint` in work coordinates.  
        
        <hr>
        
        Field Value
        Type:float
        """
        Zc: float = ...
        """
        Z position of bend :py:class:`Routing.ControlPoint` in work coordinates.  
        
        <hr>
        
        Field Value
        Type:float
        """
        Radius: float = ...
        """
        Radius of the bend.  
        
        <hr>
        
        Field Value
        Type:float
        """
    
    
    class YbcReport():
        """
        Used in the YBC bend reports.  
        
        The last bend value isn't actually a bend.
        The only valid value is the Y value, which is the length after the last bend.
        All values are relative, meaning they are calculated from the previous bend.
        So if bend1 has B value of 90 degrees and bend2 has a B value of 90 degrees,
        then the pipe has rotated 180 degrees about the Y axis.
        .
        Constructor: 
        NXOpen.Routing.BendReportManager.YbcReport()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Y: float = ...
        """
        The length along the stock before the bend.  
        
        <hr>
        
        Field Value
        Type:float
        """
        B: float = ...
        """
        The rotation angle in degrees about the Y axis of the stock.  
        
        <hr>
        
        Field Value
        Type:float
        """
        C: float = ...
        """
        The rotation angle in degrees about the Z axis of the stock.  
        
        <hr>
        
        Field Value
        Type:float
        """
        Radius: float = ...
        """
        Radius of the bend.  
        
        <hr>
        
        Field Value
        Type:float
        """
    
    
    class Mil98Report():
        """
        Used in the MIL-D-9898 C specification reports.  
        
        All values are absolute and cumulative.
        See MIL-D-9898C for more information.
        .
        Constructor: 
        NXOpen.Routing.BendReportManager.Mil98Report()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        C: float = ...
        """
        The distance before the bend, from the start of the cable
        to the beginning point of the bend.  
        
        <hr>
        
        Field Value
        Type:float
        """
        F: float = ...
        """
        The radius of the bend.  
        
        <hr>
        
        Field Value
        Type:float
        """
        E: float = ...
        """
        The turn angle, this is the angle about the Y axis, relative
        to initial position (cumulation of the B value in YBC).  
        
        <hr>
        
        Field Value
        Type:float
        """
        G: float = ...
        """
        The bend angle.  
        
        (The C value in YBC). 
        <hr>
        
        Field Value
        Type:float
        """
        Y: float = ...
        """
        The Y value from the YBC format.  
        
        <hr>
        
        Field Value
        Type:float
        """
    
    
    def GetSegmentInformation(self, stock: NXOpen.TaggedObject) -> 'list[BendReportManagerSegmentInformation_Struct]':
        """
        Builds up the segment information from the given ports, solid bodies, segments, stock, stock components, or features.  
        
        Call this first to get the segment information to end to the report methods.
        
        Signature ``GetSegmentInformation(stock)`` 
        
        :param stock:  The port, solid body, segment, stock, stock component, or feature representing the piece of stock from which to generate the bend report.   
        :type stock: :py:class:`NXOpen.TaggedObject` 
        :returns:  Information on each segment. Send to one of the generate report methods to get a report.  
        :rtype: list of :py:class:`NXOpen.Routing.BendReportManagerSegmentInformation_Struct` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ReverseDirection(self, segmentInformation: 'list[BendReportManagerSegmentInformation_Struct]') -> 'list[BendReportManagerSegmentInformation_Struct]':
        """
        Reverses the order of the segment information.  
        
        Since some of the information in the YBC and MIL98 reports are relative angles,
        reversing the order of the segments can have a significant impact on the report.
        
        Signature ``ReverseDirection(segmentInformation)`` 
        
        :param segmentInformation:  The original segment order.  
        :type segmentInformation: list of :py:class:`NXOpen.Routing.BendReportManagerSegmentInformation_Struct` 
        :returns:  The reversed segment order.  
        :rtype: list of :py:class:`NXOpen.Routing.BendReportManagerSegmentInformation_Struct` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GenerateXyzReport(self, segmentInformation: 'list[BendReportManagerSegmentInformation_Struct]') -> tuple:
        """
        Generates the bend report in XYZ format.  
        
        Signature ``GenerateXyzReport(segmentInformation)`` 
        
        :param segmentInformation:  The information about the segments to include in the report. Generated by calling :py:meth:`Routing.BendReportManager.GetSegmentInformation`.  
        :type segmentInformation: list of :py:class:`NXOpen.Routing.BendReportManagerSegmentInformation_Struct` 
        :returns: a tuple 
        :rtype: A tuple consisting of (bends, totalLength). bends is a list of :py:class:`NXOpen.Routing.BendReportManagerXyzReport_Struct`.   The XYZ report information. totalLength is a float.   Total length of the entire path of segments. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GenerateYbcReport(self, segmentInformation: 'list[BendReportManagerSegmentInformation_Struct]') -> tuple:
        """
        Generates the bend report in YBC format.  
        
        Signature ``GenerateYbcReport(segmentInformation)`` 
        
        :param segmentInformation:  The information about the segments to include in the report. Generated by calling :py:meth:`Routing.BendReportManager.GetSegmentInformation`.  
        :type segmentInformation: list of :py:class:`NXOpen.Routing.BendReportManagerSegmentInformation_Struct` 
        :returns: a tuple 
        :rtype: A tuple consisting of (bends, totalLength). bends is a list of :py:class:`NXOpen.Routing.BendReportManagerYbcReport_Struct`.   The XYZ report information. totalLength is a float.   Total length of the entire path of segments. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GenerateMil98Report(self, segmentInformation: 'list[BendReportManagerSegmentInformation_Struct]') -> tuple:
        """
        Generates the bend report in MIL-D-9898C specification format.  
        
        Signature ``GenerateMil98Report(segmentInformation)`` 
        
        :param segmentInformation:  The information about the segments to include in the report. Generated by calling :py:meth:`Routing.BendReportManager.GetSegmentInformation`.  
        :type segmentInformation: list of :py:class:`NXOpen.Routing.BendReportManagerSegmentInformation_Struct` 
        :returns: a tuple 
        :rtype: A tuple consisting of (bends, totalLength). bends is a list of :py:class:`NXOpen.Routing.BendReportManagerMil98Report_Struct`.   The XYZ report information. totalLength is a float.   Total length of the entire path of segments. 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class StockTransition(Stock):
    """
    Represents :py:class:`NXOpen.Routing.StockTransition` object.  
    
    :py:class:`NXOpen.Routing.StockTransition` covers C1 continuous :py:class:`NXOpen.Routing.ISegment` 
    in between two stocks. It acts as transition from :py:class:`NXOpen.Routing.CrossSection` of one :py:class:`NXOpen.Routing.Stock` to another. 
    When two different :py:class:`NXOpen.Routing.Stock` are connected with set of segments, then a stockTransition can be used to cover
    it in such a way that :py:class:`NXOpen.Routing.CrossSection` at each end of this segments matches with the stock at that location.
    These segments can be a routing path, or just a collection of segments.
    :py:class:`NXOpen.Routing.Stock` covers segments, and :py:class:`NXOpen.Routing.StockTransition` inherits
    that behavior.  However, :py:class:`NXOpen.Routing.StockTransition` refers to two end :py:class:`NXOpen.Routing.Stock` and the :py:class:`NXOpen.Routing.CrossSection`
    of :py:class:`NXOpen.Routing.StockTransition` object varies from one end to another.   
    Creator not available in KF because transient objects are not supported.
    
    .. versionadded:: NX7.5.0
    """
    Null: StockTransition = ...  # unknown typename


class RouteSweptFoldBuilder(NXOpen.Builder):
    """
    Represents a Rout Swept Fold Builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateRouteSweptFoldBuilder`
    
    .. versionadded:: NX7.0.0
    """
    
    def SetStock(self, stock: Stock) -> None:
        """
        Sets the value of stock, stock width and stock thickness to the builder.  
        
        This will set the stock only if it has rectangular cross section. 
        After setting the stock it will create and set the spline for the builder. It will also set the spline curves for the builder
        if the stock has more than one segments. 
        
        Signature ``SetStock(stock)`` 
        
        :param stock:  Selected Stock  
        :type stock: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    BendAngle: NXOpen.Expression = ...
    """
    Returns  the bend angle 
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    BendRadius: NXOpen.Expression = ...
    """
    Returns  the bend radius 
    
    <hr>
    
    Getter Method
    
    Signature ``BendRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    FoldLocation: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the fold location 
    
    <hr>
    
    Getter Method
    
    Signature ``FoldLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    FoldRotationAngle: NXOpen.Expression = ...
    """
    Returns  the fold rotation angle 
    
    <hr>
    
    Getter Method
    
    Signature ``FoldRotationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    FoldStartRotationAngle: NXOpen.Expression = ...
    """
    Returns  the fold start rotation angle 
    
    <hr>
    
    Getter Method
    
    Signature ``FoldStartRotationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    LengthAdjustment: NXOpen.Expression = ...
    """
    Returns  the length adjustment 
    
    <hr>
    
    Getter Method
    
    Signature ``LengthAdjustment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    ReverseBendAngle: bool = ...
    """
    Returns or sets  the reverse bend angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseBendAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseBendAngle`` 
    
    :param reverseBendAngle: 
    :type reverseBendAngle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    ReverseFixedSegment: bool = ...
    """
    Returns or sets  the reverse fixed segment 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseFixedSegment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseFixedSegment`` 
    
    :param reverseFixedSegment: 
    :type reverseFixedSegment: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    ReverseFoldRotationAngle: bool = ...
    """
    Returns or sets  the reverse fold rotation angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseFoldRotationAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseFoldRotationAngle`` 
    
    :param reverseFoldRotationAngle: 
    :type reverseFoldRotationAngle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Spline: NXOpen.Curve = ...
    """
    Returns  the spline stored in the builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``Spline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    StockSelection: NXOpen.SelectBody = ...
    """
    Returns  the stock selection.  
    
    This will be the solid body
    
    <hr>
    
    Getter Method
    
    Signature ``StockSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: RouteSweptFoldBuilder = ...  # unknown typename


class ConnectedCurvesBuilder(NXOpen.Builder):
    """
    Builder for creating automatically creating segments on end-to-end connected
    curves.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateConnectedCurvesBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    AllowArcs      1 
    -------------  -----
    AllowLines     1 
    -------------  -----
    AllowOccs      1 
    -------------  -----
    AllowSplines   1 
    =============  =====
    
    .. versionadded:: NX6.0.0
    """
    
    def ChainSelectedCurves(self) -> 'list[NXOpen.Curve]':
        """
        Finds all curves attached end-to-end with the current list of selected
        curves.  
        
        The returned list of curves includes the selected curves.  
        
        Signature ``ChainSelectedCurves()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    AllowArcs: bool = ...
    """
    Returns or sets  the flag that allows traversal of arcs when finding connected
    curves.  
    
    If False, the traversal will stop when it hits an arc curve.  In addition
    the curve selection list will not allow arcs to be added to the list.
    
    <hr>
    
    Getter Method
    
    Signature ``AllowArcs`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AllowArcs`` 
    
    :param allowArcs: 
    :type allowArcs: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    AllowLines: bool = ...
    """
    Returns or sets  the flag that allows traversal of lines when finding connected
    curves.  
    
    If False, the traversal will stop when it hits a line curve.  In addition
    the curve selection list will not allow lines to be added to the list.
    
    <hr>
    
    Getter Method
    
    Signature ``AllowLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AllowLines`` 
    
    :param allowLines: 
    :type allowLines: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    AllowOccs: bool = ...
    """
    Returns or sets  the flag that allows traversal of curve occurrences when finding connected
    curves.  
    
    If False, the traversal will stop when it hits a curve occurrence.  In 
    addition the curve selection list will not allow curve occurrences to be added 
    to the list.
    
    <hr>
    
    Getter Method
    
    Signature ``AllowOccs`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AllowOccs`` 
    
    :param allowOccs: 
    :type allowOccs: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    AllowSplines: bool = ...
    """
    Returns or sets  the flag that allows traversal of splines when finding connected
    curves.  
    
    If False, the traversal will stop when it hits an spline curve.  In addition
    the curve selection list will not allow splines to be added to the list.
    
    <hr>
    
    Getter Method
    
    Signature ``AllowSplines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AllowSplines`` 
    
    :param allowSplines: 
    :type allowSplines: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CurveSelection: NXOpen.SelectCurveList = ...
    """
    Returns  the list of selected curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ConnectedCurvesBuilder = ...  # unknown typename


class FillerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.Stock` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateStock(self, stockData: StockData, anchor: Anchor, crossSection: CrossSection, segments: 'list[ISegment]') -> 'list[Stock]':
        """
        Creates a :py:class:`NXOpen.Routing.Filler` stock object.  
        
        Signature ``CreateStock(stockData, anchor, crossSection, segments)`` 
        
        :param stockData:  The :py:class:`NXOpen.Routing.StockData` that defines the stock  
        :type stockData: :py:class:`NXOpen.Routing.StockData` 
        :param anchor:  The :py:class:`NXOpen.Routing.Anchor` from the input                                            :py:class:`NXOpen.Routing.StockData` to use, None is allowed for                                           no anchor.  
        :type anchor: :py:class:`NXOpen.Routing.Anchor` 
        :param crossSection:  The :py:class:`NXOpen.Routing.CrossSection` from the input                                            :py:class:`NXOpen.Routing.StockData` to use, None is not allowed.  
        :type crossSection: :py:class:`NXOpen.Routing.CrossSection` 
        :param segments:  The array of :py:class:`NXOpen.Routing.ISegment` curves that                                                the stock must cover.  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :returns:  The resulting array of newly created :py:class:`NXOpen.Routing.Stock`
        objects.  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    


class RouteSegmentFontElement(NXOpen.NXObject):
    """
    Represents a route segment font element.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.RouteSegmentFontElement`
    
    .. versionadded:: NX8.5.0
    """
    Null: RouteSegmentFontElement = ...  # unknown typename


class QuickPathBuilder(NXOpen.Builder):
    """
    Builder for creating a path between user selected points.  
    
    After invoking the commit method, invoke the 
    :py:meth:`NXOpen.Routing.QuickPathBuilder.PathErrors` method to find
    out which sections between points contained errors.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateQuickPathBuilder`
    
    Default values.
    
    ==================================  =====
    Property                            Value
    ==================================  =====
    PathSettings.LockToSelectedObject   True 
    ==================================  =====
    
    .. versionadded:: NX6.0.0
    """
    
    def SetListOfPointsToDraw(self, index: int, point: NXOpen.Point3d) -> None:
        """
        Save a point or extension point to the list of all points to draw on the screen.  
        
        Signature ``SetListOfPointsToDraw(index, point)`` 
        
        :param index:  The index in the list of points to draw.  
        :type index: int 
        :param point:  Point representing the position.  
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetListOfPointsToDrawCount(self, count: int) -> None:
        """
        Set the number of elements in the list of all points to draw on the screen.  
        
        Signature ``SetListOfPointsToDrawCount(count)`` 
        
        :param count:  The number of points in list.  
        :type count: int 
        
        .. versionadded:: NX10.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    PathErrors: NXOpen.ErrorList = ...
    """
    Returns  the errors associated with this path.  
    
    The list will be None if the
    commit method has not been invoked yet. 
    
    <hr>
    
    Getter Method
    
    Signature ``PathErrors`` 
    
    :returns:  The list of errors.  
    :rtype: :py:class:`NXOpen.ErrorList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    PathSettings: LinearPathSettings = ...
    """
    Returns  the linear path settings for this path.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.LinearPathSettings` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    PointList: NXOpen.PointList = ...
    """
    Returns  the list of path points.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.PointList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RouteSegment: NXOpen.Curve = ...
    """
    Returns  the routing segment managed by the builder, if it exists.  
    
    <hr>
    
    Getter Method
    
    Signature ``RouteSegment`` 
    
    :returns:  Visible Routing BCurve Segment  
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockSettings: PathStockBuilder = ...
    """
    Returns  the stock settings for this path.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: QuickPathBuilder = ...  # unknown typename


class FixturePort(Port, IAxisPort):
    """
    :py:class:`NXOpen.Routing.FixturePort` objects are objects that
    * segments are routed through when creating a routing path.  
    
    To obtain an instace of this class use :py:meth:`Routing.FixturePortCollection.CreateFixturePort`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetAlignVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the align vector of Port 
        
        Signature ``SetAlignVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the rotation vector of Port 
        
        Signature ``SetRotationVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationObject(self, rotationObject: NXOpen.DisplayableObject) -> None:
        """
        Sets the object used to derive the rotation vector of Port 
        
        Signature ``SetRotationObject(rotationObject)`` 
        
        :param rotationObject:  Object used to derive the rotation vector  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetForwardExtension(self, forwardExtension: float) -> None:
        """
        Sets the forward extension value of a port, i.  
        
        e. the minimum length that
        a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
        
        Signature ``SetForwardExtension(forwardExtension)`` 
        
        :param forwardExtension:  Port extension  
        :type forwardExtension: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEngagement(self, engagement: float) -> None:
        """
        The engagment distance of a :py:class:`NXOpen.Routing.IAxisPort`, i.  
        
        e. the distance 
        behind the port that another fitting or stock may engage
        
        Signature ``SetEngagement(engagement)`` 
        
        :param engagement:  Engagement distance  
        :type engagement: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCutbackLength(self, cutbackLength: float) -> None:
        """
        Sets the cutback length of a port, i.  
        
        e. the length along the wire from
        the port where individual wires leave a bundle to attach to pins
        
        Signature ``SetCutbackLength(cutbackLength)`` 
        
        :param cutbackLength:  Cutback Length  
        :type cutbackLength: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ForwardExtensionObject: NXOpen.Expression = ...
    """
    Returns or sets  the forward extension object of a port, i.  
    
    e. an expression representing the minimum
    length that a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :returns:  Forward Extension Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :param forwardExtension:  Forward Extension Expression  
    :type forwardExtension: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    EngagementObject: NXOpen.Expression = ...
    """
    Returns or sets  the engagement object of a port, i.  
    
    e. an expression representing the
    distance behind the port that another fitting or stock may engage
    
    <hr>
    
    Getter Method
    
    Signature ``EngagementObject`` 
    
    :returns:  Engagement Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EngagementObject`` 
    
    :param engagement:  Engagement Expression  
    :type engagement: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CutbackLengthObject: NXOpen.Expression = ...
    """
    Returns or sets  the cutback length object of a port, i.  
    
    e. an expression representing the length
    along the wire from the port where individual wires leave a bundle to attach to pins
    
    <hr>
    
    Getter Method
    
    Signature ``CutbackLengthObject`` 
    
    :returns:  Cutback Length Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CutbackLengthObject`` 
    
    :param cutbackLength:  Cutback Length Expression  
    :type cutbackLength: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Axis: NXOpen.Axis = ...
    """
    Returns or sets   the axis that defines the port
    
    <hr>
    
    Getter Method
    
    Signature ``Axis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Axis`` 
    
    :param axis: 
    :type axis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: FixturePort = ...  # unknown typename


class IPath(NXOpen.INXObject):
    """
    The Routing IPath object is a list of segments in a route.  
    
    It also
    contains the beginning and ending control point for the path.
    
    .. versionadded:: NX4.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class BendCorner(Corner):
    """
    Computes a fillet curve between two linear segments to form a smooth
    bend transition from one segment to another.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.BendCornerCollection.CreateCorner`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetSegment(self) -> ISegment:
        """
        The bend segment following the fillet curve created for the bend.  
        
        Signature ``GetSegment()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FindSideSegments(self) -> 'list[NXOpen.Curve]':
        """
        Returns the straight line segments attached to the fillet curve
        of this bend corner.  
        
        Signature ``FindSideSegments()`` 
        
        :returns:  the side segments. There will be from 0 to 2 
        total side segments.  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    BendMethod: CornerTypeBuilderBendMethods = ...
    """
    Returns or sets the bend method 
    
    <hr>
    
    Getter Method
    
    Signature ``BendMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BendMethod`` 
    
    :param bendMethod: 
    :type bendMethod: :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    BendRadius: float = ...
    """
    Returns or sets  the bend radius of the corner.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BendRadius`` 
    
    :param bendRadius:  the the bend radius.  
    :type bendRadius: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    BendRatio: float = ...
    """
    Returns or sets  the bend ratio to apply when computing the bend radius 
    
    <hr>
    
    Getter Method
    
    Signature ``BendRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BendRatio`` 
    
    :param bendRatio:  the bend ratio.  
    :type bendRatio: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    UseBendRatio: bool = ...
    """
    Returns or sets  whether or not to compute the bend radius as a ratio of the stock diameter.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseBendRatio`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`Routing.BendCorner.BendMethod` instead.
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``UseBendRatio`` 
    
    :param useBendRatio:  the use bend ratio.  
    :type useBendRatio: bool 
    
    .. versionadded:: NX4.0.0
    
    .. deprecated::  NX8.5.0
       Use :py:meth:`Routing.BendCorner.BendMethod` instead.
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: BendCorner = ...  # unknown typename


class RouteLogicalAssociation(NXOpen.NXObject):
    """
    RouteLogicalAssociation object associates non-electrical components to 
    electrical components.  
    
    Logical Associations have control objects and 
    target objects.  Meeting control object's condition applies actions to 
    target objects. Example: Control object is a :py:class:`NXOpen.Routing.ISegment`
    and the target object is a clip or clamp which supports the harness. When
    the segment is routed (i.e. condition on control object is satisfied), 
    the action is to suppress the target (clip or clamp) 
    To obtain an instance of this class use :py:class:`NXOpen.Routing.RouteLogicalAssociationCollection`
    
    .. versionadded:: NX4.0.0
    """
    
    def Perform(self) -> None:
        """
        Performs the specified action (suppress or unsuppress) on the 
        RouteLogicalAssociation Object 
        
        Signature ``Perform()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def Remove(self) -> None:
        """
        Removes the RouteLogicalAssociation object 
        
        Signature ``Remove()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def GetControl(self) -> NXOpen.NXObject:
        """
        Retrieves the control for LogicalAssocition  
        
        Signature ``GetControl()`` 
        
        :returns:  Control  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def SetControl(self, control: NXOpen.NXObject) -> None:
        """
        Sets the control for LogicalAssocition 
        
        Signature ``SetControl(control)`` 
        
        :param control:  Control  
        :type control: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def GetTargets(self) -> 'list[NXOpen.NXObject]':
        """
        Get all the targets LogicalAssocition  
        
        Signature ``GetTargets()`` 
        
        :returns:  Targets of current logical association   
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def AddTarget(self, target: NXOpen.NXObject) -> None:
        """
        Adds target to Logical Assocition 
        
        Signature ``AddTarget(target)`` 
        
        :param target:  Target to add  
        :type target: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def RemoveTarget(self, target: NXOpen.NXObject) -> None:
        """
        Removes the target from Logical Assocition 
        
        Signature ``RemoveTarget(target)`` 
        
        :param target:  Target to remove  
        :type target: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def GetRoutedCondition(self) -> bool:
        """
        Get the routed condition of a logical association object.  
        
        * The routed condition evaluates the state of the control object.
        * True if condition is ROUTED, False if UNROUTED 
        
        Signature ``GetRoutedCondition()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def SetRoutedCondition(self, condition: bool) -> None:
        """
        Set the routed condition of a logical association object 
        * The routed condition evaluates the state of the control object.  
        
        * True if condition is ROUTED, False if UNROUTED 
        
        Signature ``SetRoutedCondition(condition)`` 
        
        :param condition: 
        :type condition: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def EnableLogicalAssociation(self, enable: bool) -> None:
        """
        Set Logical Association to enabled state or disabled state.  
        
        * True sets LAO to enabled state, False sets LAO to disabled state.
        
        Signature ``EnableLogicalAssociation(enable)`` 
        
        :param enable:  True or False  
        :type enable: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    Null: RouteLogicalAssociation = ...  # unknown typename


class InterfaceTerminalRelationshipBaseRelationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InterfaceTerminalRelationshipBaseRelationType():
    """
    Type of interface terminal relationships as per STEP 212 Standards.
    Currently, only decomposition is implemented, other types will be added
    in future releases as required.
    
    .. versionadded:: NX4.0.2
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Decomposition", " - "
    """
    Decomposition = 0  # InterfaceTerminalRelationshipBaseRelationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InterfaceTerminalRelationshipBase(ObjectRelationship):
    """
    The abstract class :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase` relates many
    :py:class:`NXOpen.Routing.Port`s to one :py:class:`NXOpen.Routing.Port`.  
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    
    class RelationType():
        """
        Type of interface terminal relationships as per STEP 212 Standards.
        Currently, only decomposition is implemented, other types will be added
        in future releases as required.
        
        .. versionadded:: NX4.0.2
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Decomposition", " - "
        """
        Decomposition = 0  # InterfaceTerminalRelationshipBaseRelationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetRelatingInterfaceTerminal(self) -> InterfaceTerminalShadow:
        """
        Gets the :py:class:`NXOpen.Routing.Port` in the :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase`
        with a relationship of relating.  
        
        A :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase` object can have only one relating :py:class:`NXOpen.Routing.Port`
        associated with one or more related :py:class:`NXOpen.Routing.Port`s.
        
        Signature ``GetRelatingInterfaceTerminal()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRelatingInterfaceTerminal(self, relatingInterfaceTerminal: InterfaceTerminalShadow) -> None:
        """
        Signature ``SetRelatingInterfaceTerminal(relatingInterfaceTerminal)`` 
        
        :param relatingInterfaceTerminal: 
        :type relatingInterfaceTerminal: :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRelatedInterfaceTerminals(self) -> 'list[InterfaceTerminalShadow]':
        """
        Gets the list of :py:class:`NXOpen.Routing.Port`s in the :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase`
        object with a relationship of related.  
        
        A :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase` object can have one or more related :py:class:`NXOpen.Routing.Port`s
        associated with a single relating :py:class:`NXOpen.Routing.Port`.
        
        Signature ``GetRelatedInterfaceTerminals()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddRelatedInterfaceTerminal(self, relatedInterfaceTerminal: InterfaceTerminalShadow) -> None:
        """
        Adds a :py:class:`NXOpen.Routing.Port` to the :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase` object
        with a relationship of related.  
        
        Signature ``AddRelatedInterfaceTerminal(relatedInterfaceTerminal)`` 
        
        :param relatedInterfaceTerminal: 
        :type relatedInterfaceTerminal: :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveRelatedInterfaceTerminal(self, relatedInterfaceTerminal: InterfaceTerminalShadow) -> None:
        """
        Removes a related :py:class:`NXOpen.Routing.Port` from the list of related terminals in the
        :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase` object.  
        
        Signature ``RemoveRelatedInterfaceTerminal(relatedInterfaceTerminal)`` 
        
        :param relatedInterfaceTerminal: 
        :type relatedInterfaceTerminal: :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReplaceRelatedInterfaceTerminals(self, relatedInterfaceTerminals: 'list[InterfaceTerminalShadow]') -> None:
        """
        Replaces the existing related :py:class:`NXOpen.Routing.Port`s in the :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase`
        object with input ones.  
        
        Removes all the related :py:class:`NXOpen.Routing.Port`s in a relationship and replaces them with the set
        of input :py:class:`NXOpen.Routing.Port`s.
        
        Signature ``ReplaceRelatedInterfaceTerminals(relatedInterfaceTerminals)`` 
        
        :param relatedInterfaceTerminals: 
        :type relatedInterfaceTerminals: list of :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    RelationshipType: InterfaceTerminalRelationshipBaseRelationType = ...
    """
    Returns or sets  the type of the :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase` object.  
    
    Interface Terminal Relationship can be of following types:
    :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBaseRelationType.Decomposition <NXOpen.Routing.InterfaceTerminalRelationshipBaseRelationType>`
    
    <hr>
    
    Getter Method
    
    Signature ``RelationshipType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBaseRelationType` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RelationshipType`` 
    
    :param relationshipType: 
    :type relationshipType: :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBaseRelationType` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: InterfaceTerminalRelationshipBase = ...  # unknown typename


class InterfaceTerminalRelationshipShadow(InterfaceTerminalRelationshipBase):
    """
    Represents an assembly shadow of
    :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase`.  
    
    Shadow objects stand in for the source objects when source parts are unavailable or unloaded.
    
    :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` carries the same GUID as the
    source :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipBase` and syncs with the source
    anytime necessary or possible.
    
    See NX Routing help for the Connectivity data model documentation.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.InterfaceTerminalRelationshipCollection.CreateElectricalInterfaceTerminalRelationship`
    
    .. versionadded:: NX4.0.2
    """
    Null: InterfaceTerminalRelationshipShadow = ...  # unknown typename


class ComponentNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ComponentName():
    """
    Describes whether or not a component associated with a Stock as Compoents Stock has
    been renamed by the user with a permanent name using the ???
    method. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Temporary", "Component name is temporary, it has not been renamed."
       "Permanent", "Component has been renamed by the user."
    """
    Temporary = 0  # ComponentNameMemberType
    Permanent = 1  # ComponentNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FittingOverstockBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FittingOverstockBuilderTypes():
    """
    Overstock application method. This defines the way in which to apply
    the overstock on faces of the routing parts.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EntirePart", "Entire Part"
       "EntireFace", "Entire Face"
       "PartialFace", "Partial Face"
    """
    EntirePart = 0  # FittingOverstockBuilderTypesMemberType
    EntireFace = 1  # FittingOverstockBuilderTypesMemberType
    PartialFace = 2  # FittingOverstockBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FittingOverstockBuilderTrimMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FittingOverstockBuilderTrimMethod():
    """
    Trimming option. This defines the way the selected faces are to be trimmed
    for :py:class:`NXOpen.Routing.FittingOverstockBuilderTypes.PartialFace <NXOpen.Routing.FittingOverstockBuilderTypes>`
    method. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TrimPlane", "Single Trim Plane"
       "BetweenPlanes", "Double Trim Planes"
    """
    TrimPlane = 0  # FittingOverstockBuilderTrimMethodMemberType
    BetweenPlanes = 1  # FittingOverstockBuilderTrimMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FittingOverstockBuilder(NXOpen.Builder):
    """
    Builder for creating or editing :py:class:`NXOpen.Routing.FittingOverstock` objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateFittingOverstockBuilder`
    
    Default values.
    
    ===============  ==========
    Property         Value
    ===============  ==========
    FaceTrimMethod   TrimPlane 
    ===============  ==========
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Overstock application method. This defines the way in which to apply
        the overstock on faces of the routing parts.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EntirePart", "Entire Part"
           "EntireFace", "Entire Face"
           "PartialFace", "Partial Face"
        """
        EntirePart = 0  # FittingOverstockBuilderTypesMemberType
        EntireFace = 1  # FittingOverstockBuilderTypesMemberType
        PartialFace = 2  # FittingOverstockBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimMethod():
        """
        Trimming option. This defines the way the selected faces are to be trimmed
        for :py:class:`NXOpen.Routing.FittingOverstockBuilderTypes.PartialFace <NXOpen.Routing.FittingOverstockBuilderTypes>`
        method. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TrimPlane", "Single Trim Plane"
           "BetweenPlanes", "Double Trim Planes"
        """
        TrimPlane = 0  # FittingOverstockBuilderTrimMethodMemberType
        BetweenPlanes = 1  # FittingOverstockBuilderTrimMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FaceTrimMethod: FittingOverstockBuilderTrimMethod = ...
    """
    Returns or sets  the :py:class:`NXOpen.Routing.FittingOverstockBuilderTrimMethod`
    
    <hr>
    
    Getter Method
    
    Signature ``FaceTrimMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.FittingOverstockBuilderTrimMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceTrimMethod`` 
    
    :param faceTrimMethod: 
    :type faceTrimMethod: :py:class:`NXOpen.Routing.FittingOverstockBuilderTrimMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Faces: NXOpen.SelectFaceList = ...
    """
    Returns  the faces to apply overstock to.  
    
    <hr>
    
    Getter Method
    
    Signature ``Faces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FirstPlane: NXOpen.Plane = ...
    """
    Returns or sets  the first trimming plane 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstPlane`` 
    
    :param firstPlane: 
    :type firstPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    OverstockSettings: PathStockBuilder = ...
    """
    Returns or sets  the stock settings for overstock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``OverstockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``OverstockSettings`` 
    
    :param stockBuilder: 
    :type stockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RoutingParts: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the qualifed routing parts to apply overstock to.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoutingParts`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SecondPlane: NXOpen.Plane = ...
    """
    Returns or sets  the second trimming plane 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondPlane`` 
    
    :param secondPlane: 
    :type secondPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Type: FittingOverstockBuilderTypes = ...
    """
    Returns or sets  the type
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.FittingOverstockBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Routing.FittingOverstockBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: FittingOverstockBuilder = ...  # unknown typename


class ProxyPortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.ProxyPort` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float) -> ProxyPort:
        """
        Creates a ProxyPort with a rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateProxyPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the proxy port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d) -> ProxyPort:
        """
        Creates a ProxyPort with no rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateProxyPort(origin, alignmentVector)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point) -> ProxyPort:
        """
        Creates a ProxyPort with a rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateProxyPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the proxy port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Proxy Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point) -> ProxyPort:
        """
        Creates a ProxyPort with no rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateProxyPort(origin, alignmentVector, point)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Proxy Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis) -> ProxyPort:
        """
        Creates a ProxyPort with a rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateProxyPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the proxy port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Proxy Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis) -> ProxyPort:
        """
        Creates a ProxyPort with no rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateProxyPort(origin, alignmentVector, derivationObject)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Proxy Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> ProxyPort:
        """
        Creates a ProxyPort with a rotation vector at an absolute location  
        
        Signature ``CreateProxyPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, allowMultipleConnections)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the proxy port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, allowMultipleConnections: bool) -> ProxyPort:
        """
        Creates a ProxyPort with no rotation vector at an absolute location  
        
        Signature ``CreateProxyPort(origin, alignmentVector, allowMultipleConnections)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point, allowMultipleConnections: bool) -> ProxyPort:
        """
        Creates a ProxyPort with a rotation vector at a point  
        
        Signature ``CreateProxyPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the proxy port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Proxy Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point, allowMultipleConnections: bool) -> ProxyPort:
        """
        Creates a ProxyPort with no rotation vector at a point  
        
        Signature ``CreateProxyPort(origin, alignmentVector, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Proxy Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis, allowMultipleConnections: bool) -> ProxyPort:
        """
        Creates a ProxyPort with a rotation vector on an axis  
        
        Signature ``CreateProxyPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis, allowMultipleConnections)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the proxy port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Proxy Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateProxyPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis, allowMultipleConnections: bool) -> ProxyPort:
        """
        Creates a ProxyPort with no rotation vector on an axis  
        
        Signature ``CreateProxyPort(origin, alignmentVector, derivationObject, allowMultipleConnections)`` 
        
        :param origin:  Origin of the proxy port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the proxy port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Proxy Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ProxyPort` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class EditCharacteristicsBuilder(NXOpen.Builder):
    """
    Builder to edit required and optional characteristics of :py:class:`Routing.Stock`
    or :py:class:`Assemblies.Component` as defined in the application view file.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateEditCharacteristicsBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def ResetValues(self) -> None:
        """
        Reset the characteristic values of the selected objects.  
        
        Signature ``ResetValues()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ClearValues(self) -> None:
        """
        Clear the characteristic values of the selected objects.  
        
        Signature ``ClearValues()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ApplyReferenceObjectCharx(self, refObject: NXOpen.NXObject) -> None:
        """
        Apply characteristics of the reference object to the selected objects.  
        
        Signature ``ApplyReferenceObjectCharx(refObject)`` 
        
        :param refObject: 
        :type refObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRequiredCharacteristicsToEdit(self) -> CharacteristicList:
        """
        Returns the editable :py:class:`Routing.CharacteristicList` 
        that contains required characteristics common to all the selected objects.  
        
        Signature ``GetRequiredCharacteristicsToEdit()`` 
        
        :returns: The characteristics to edit. 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOptionalCharacteristicsToEdit(self) -> CharacteristicList:
        """
        Returns the editable :py:class:`Routing.CharacteristicList` 
        that contains optional characteristics common to all the selected objects.  
        
        Signature ``GetOptionalCharacteristicsToEdit()`` 
        
        :returns: The characteristics to edit. 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ReferenceObject: NXOpen.SelectNXObject = ...
    """
    Returns  the reference object to obtain the characteristic values 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RouteObjectCollector: RouteObjectCollector = ...
    """
    Returns  the routing objects to edit characteristics.  
    
    The objects should be either 
    :py:class:`Routing.Stock` or :py:class:`Assemblies.Component` 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RoutingLevel: str = ...
    """
    Returns or sets  the Routing Level associated with selected objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoutingLevel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RoutingLevel`` 
    
    :param routeLevel: 
    :type routeLevel: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: EditCharacteristicsBuilder = ...  # unknown typename


class HealMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HealMethod():
    """
    Different heal path creation methods. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Direct", " - "
       "Intersect", " - "
       "Xyz", " - "
       "Xzy", " - "
       "Yxz", " - "
       "Yzx", " - "
       "Zxy", " - "
       "Zyx", " - "
       "Max", " - "
    """
    Direct = 0  # HealMethodMemberType
    Intersect = 1  # HealMethodMemberType
    Xyz = 2  # HealMethodMemberType
    Xzy = 3  # HealMethodMemberType
    Yxz = 4  # HealMethodMemberType
    Yzx = 5  # HealMethodMemberType
    Zxy = 6  # HealMethodMemberType
    Zyx = 7  # HealMethodMemberType
    Max = 8  # HealMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EditPlacePartBuilder(NXOpen.Builder):
    """
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateEditPlacePartBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    def FinalizePlacementForScrewSeat(self, startPointId: NXOpen.TaggedObject, endPointId: NXOpen.TaggedObject, alignStartPoint: NXOpen.Point3d, alignEndPoint: NXOpen.Point3d, length: NXOpen.Expression, angle: NXOpen.Expression, alignVector: NXOpen.Vector3d, screwSeatInstance: NXOpen.TaggedObject, target: NXOpen.TaggedObject) -> None:
        """
        Places a screw measurement holder seat part onto a target object by locating and constraining by the given parameters.  
        
        Signature ``FinalizePlacementForScrewSeat(startPointId, endPointId, alignStartPoint, alignEndPoint, length, angle, alignVector, screwSeatInstance, target)`` 
        
        :param startPointId:  The starting input point  
        :type startPointId: :py:class:`NXOpen.TaggedObject` 
        :param endPointId:  The end input point  
        :type endPointId: :py:class:`NXOpen.TaggedObject` 
        :param alignStartPoint:  The starting point to align screw seat fixture port at  
        :type alignStartPoint: :py:class:`NXOpen.Point3d` 
        :param alignEndPoint:  The ending point to align screw seat fixture port at  
        :type alignEndPoint: :py:class:`NXOpen.Point3d` 
        :param length:  The length along target to place screw seat  
        :type length: :py:class:`NXOpen.Expression` 
        :param angle:  The angle along target to place screw seat  
        :type angle: :py:class:`NXOpen.Expression` 
        :param alignVector:  The align vector along which to position screw seat  
        :type alignVector: :py:class:`NXOpen.Vector3d` 
        :param screwSeatInstance:  The screw seat instance to constrain to  
        :type screwSeatInstance: :py:class:`NXOpen.TaggedObject` 
        :param target:  The target object to constrain to  
        :type target: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetScrewSeatLength(self) -> NXOpen.Expression:
        """
        Gets the length expression to be used for screw seat placement along a placed object.  
        
        Signature ``GetScrewSeatLength()`` 
        
        :returns:  The length used for screw seat placement on placed routing object.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetScrewSeatAngle(self) -> NXOpen.Expression:
        """
        Gets the angle expression to be used for screw seat placement along a placed object.  
        
        Signature ``GetScrewSeatAngle()`` 
        
        :returns:  The angle used for screw seat placement on placed routing object.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    SelectedPart: NXOpen.SelectTaggedObjectList = ...
    """
    Returns  the target body to edit part placement 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: EditPlacePartBuilder = ...  # unknown typename


class Wire(NXOpen.NXObject, IPath):
    """
    The Routing Wire object is the set of information needed to define
    * a ROUTE_wire.  
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetStock(self) -> 'list[Stock]':
        """
        Returns the stocks for the wire.  
        
        Signature ``GetStock()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegments(self) -> 'list[ISegment]':
        """
        Returns the segments for the wire.  
        
        Signature ``GetSegments()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentList(self) -> 'list[ISegment]':
        """
        Returns the list of all of the segments contained in the IPath  
        
        Signature ``GetSegmentList()`` 
        
        :returns:  list of all of the segments in this IPath object  
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddSegmentsToList(self, objs: 'list[ISegment]') -> None:
        """
        Adds segment(s) to an IPath object.  
        
        Signature ``AddSegmentsToList(objs)`` 
        
        :param objs:  list of segments that are to be added  
        :type objs: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DelSegmentsFromList(self, objs: 'list[ISegment]') -> None:
        """
        Removes segment(s) from the IPath object.  
        
        Signature ``DelSegmentsFromList(objs)`` 
        
        :param objs:  list of segments that are to be deleted  
        :type objs: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ControlPointStart: ControlPoint = ...
    """
    Returns or sets  the start ControlPoint for an IPath object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPointStart`` 
    
    :returns:  start ControlPoint for the IPath object  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPointStart`` 
    
    :param start:  start ControlPoint for the IPath object  
    :type start: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    ControlPointEnd: ControlPoint = ...
    """
    Returns or sets  the end ControlPoint for an IPath object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPointEnd`` 
    
    :returns:  end ControlPoint for the IPath object  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPointEnd`` 
    
    :param end:  end ControlPoint for the IPath object  
    :type end: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: Wire = ...  # unknown typename


class CrossSection(NXOpen.NXObject, ICharacteristic):
    """
    A :py:class:`NXOpen.Routing.CrossSection` defines a profile to sweep for :py:class:`NXOpen.Routing.Stock` objects.  
    
    The profile is a set of curves centered around the origin, and in the XY plane.  An offset may be
    specified that forms a second profile that consists of curves offset by the specified offset from
    the profile curves (which forms a hollow stock body, such as a pipe).  
    
    To obtain an instance of this class use
    :py:meth:`Routing.CrossSectionCollection.CreateCrossSection`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetCrossCurves(self) -> 'list[NXOpen.Curve]':
        """
        Returns the curves that define the profile for the :py:class:`NXOpen.Routing.CrossSection` object.  
        
        Signature ``GetCrossCurves()`` 
        
        :returns:  The curves that define the profile.  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCrossCurves(self, curves: 'list[NXOpen.Curve]') -> None:
        """
        Sets the curves that define the profile for the :py:class:`NXOpen.Routing.CrossSection` object.  
        
        The
        curves must form a single closed loop.  
        
        Signature ``SetCrossCurves(curves)`` 
        
        :param curves:  The curves that define the profile.  
        :type curves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockData(self) -> StockData:
        """
        Returns the :py:class:`NXOpen.Routing.StockData` that owns this :py:class:`NXOpen.Routing.CrossSection`.  
        
        Signature ``GetStockData()`` 
        
        :returns:  The :py:class:`NXOpen.Routing.StockData` that owns the 
        :py:class:`NXOpen.Routing.CrossSection` object.  
        :rtype: :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetMaximumRadius(self) -> float:
        """
        Returns the maximum radius of the profile.  
        
        Signature ``GetMaximumRadius()`` 
        
        :returns:  The radius of the circle that encircles all profile curves in
        the :py:class:`NXOpen.Routing.CrossSection`  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Offset: NXOpen.Expression = ...
    """
    Returns or sets  the offset expression applied to the profile when generating a Sweep.  
    
    This forms
    a second set of profile curves that are offset outwards (for positive offsets, inwards for negative
    offsets) from the profile curves of the :py:class:`NXOpen.Routing.CrossSection`.  A value of
    0.0 or a None expression indicates no offset. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns:  The offset expression, positive values for outward offset,
    negative values for inward offset, 0.0 or None for no offset.  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param expression: 
    :type expression: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SecondOffset: NXOpen.Expression = ...
    """
    Returns or sets  the offset expression applied to the profile when generating a Sweep.  
    
    This forms
    a second set of profile curves that are offset outwards (for positive offsets, inwards for negative
    offsets) from the profile curves of the :py:class:`NXOpen.Routing.CrossSection`.  A value of
    0.0 or a None expression indicates no offset. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondOffset`` 
    
    :returns:  The offset expression, positive values for outward offset,
    negative values for inward offset, 0.0 or None for no offset.  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondOffset`` 
    
    :param secondOffset: 
    :type secondOffset: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Style: StockStyle = ...
    """
    Returns or sets  the style of the profile.  
    
    See :py:class:`NXOpen.Routing.StockData` for information on styles 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns:  The stock profile style that this object represents, 
    :py:class:`NXOpen.Routing.StockStyle.None <NXOpen.Routing.StockStyle>` is not a valid
    value for a :py:class:`NXOpen.Routing.CrossSection` object.  
    :rtype: :py:class:`NXOpen.Routing.StockStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Style`` 
    
    :param style: 
    :type style: :py:class:`NXOpen.Routing.StockStyle` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: CrossSection = ...  # unknown typename


class SelectISegment(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: ISegment) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ISegment) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ISegment, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ISegment` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: ISegment, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: ISegment, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Routing.ISegment` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Routing.ISegment` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ISegment, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ISegment` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> ISegment:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: ISegment) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Routing.ISegment`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Routing.ISegment`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Routing.ISegment`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Routing.ISegment`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: ISegment = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Routing.ISegment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Routing.ISegment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectISegment = ...  # unknown typename


class FittingPortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.FittingPort` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float) -> FittingPort:
        """
        Creates a FittingPort with a rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFittingPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fitting port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d) -> FittingPort:
        """
        Creates a FittingPort with no rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFittingPort(origin, alignmentVector)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point) -> FittingPort:
        """
        Creates a FittingPort with a rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFittingPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fitting port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Fitting Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point) -> FittingPort:
        """
        Creates a FittingPort with no rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFittingPort(origin, alignmentVector, point)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Fitting Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis) -> FittingPort:
        """
        Creates a FittingPort with a rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFittingPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fitting port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Fitting Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis) -> FittingPort:
        """
        Creates a FittingPort with no rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFittingPort(origin, alignmentVector, derivationObject)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Fitting Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> FittingPort:
        """
        Creates a FittingPort with a rotation vector at an absolute location  
        
        Signature ``CreateFittingPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fitting port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, allowMultipleConnections: bool) -> FittingPort:
        """
        Creates a FittingPort with no rotation vector at an absolute location  
        
        Signature ``CreateFittingPort(origin, alignmentVector, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point, allowMultipleConnections: bool) -> FittingPort:
        """
        Creates a FittingPort with a rotation vector at a point  
        
        Signature ``CreateFittingPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fitting port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Fitting Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point, allowMultipleConnections: bool) -> FittingPort:
        """
        Creates a FittingPort with no rotation vector at a point  
        
        Signature ``CreateFittingPort(origin, alignmentVector, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Fitting Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis, allowMultipleConnections: bool) -> FittingPort:
        """
        Creates a FittingPort with a rotation vector on an axis  
        
        Signature ``CreateFittingPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fitting port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Fitting Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFittingPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis, allowMultipleConnections: bool) -> FittingPort:
        """
        Creates a FittingPort with no rotation vector on an axis  
        
        Signature ``CreateFittingPort(origin, alignmentVector, derivationObject, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fitting port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fitting port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Fitting Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFromAxis(self, axis: NXOpen.Axis) -> FittingPort:
        """
        Creates a fitting port based on an existing axis.  
        
        Signature ``CreateFromAxis(axis)`` 
        
        :param axis:  The new Fitting Port will be derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFromCsys(self, csys: NXOpen.CartesianCoordinateSystem, createRotationVector: PortCreateRotationVector) -> FittingPort:
        """
        Creates a fitting port based on an existing Cartesian Coordinate System.  
        
        The port aligns with the Z axis of the Coordinate System. The port's rotation vector, if any,
        aligns with the Y direction of the Coordinate System.
        
        Signature ``CreateFromCsys(csys, createRotationVector)`` 
        
        :param csys:  The new Fitting Port will be derived from this Cartesian Coordinate System  
        :type csys: :py:class:`NXOpen.CartesianCoordinateSystem` 
        :param createRotationVector:  Should the rotation vector be created?  
        :type createRotationVector: :py:class:`NXOpen.Routing.PortCreateRotationVector` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingPort` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class RunStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RunStatus():
    """
    Represents the status of a run 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Valid", "Run is valid. All items are connected and all segments have stocks assigned on them"
       "Broken", "Run is broken. All items are not connected end to end"
       "Incomplete", "Run is incomplete. Some segments do not have stock assigned on them"
    """
    Valid = 0  # RunStatusMemberType
    Broken = 1  # RunStatusMemberType
    Incomplete = 2  # RunStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RunCompareStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RunCompareStatus():
    """
    Represents discrepancies in the run compared to another run 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Run has no compare status. Compare operation is not invoked yet"
       "Ok", "No missing, extra or discrepancy items"
       "MissingRun", "Entire run is missing"
       "ExtraRun", "Entire run is extra"
       "MissingItem", "Item or items are missing from the run"
       "ExtraItem", "Extra item or items present in the run"
       "Discrepancy", "Items have characteristics discrepancies"
    """
    NotSet = 0  # RunCompareStatusMemberType
    Ok = 1  # RunCompareStatusMemberType
    MissingRun = 2  # RunCompareStatusMemberType
    ExtraRun = 3  # RunCompareStatusMemberType
    MissingItem = 4  # RunCompareStatusMemberType
    ExtraItem = 5  # RunCompareStatusMemberType
    Discrepancy = 6  # RunCompareStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RunFlipStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RunFlipStatus():
    """
    Represents result of flip component 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Success", "Component is flipped."
       "NotTwoPorts", "Given component ports are not equal to two ports."
       "UnequalConstraints", "Each ports has different number of constraints."
       "PortPositionMismatch", "Ports are not collinear and opposite or perpendicular."
       "FlowTypeMismatch", "Ports are defined with ambiguous flow types."
       "FollowsFlow", "Ports correctly aligned with flow. No flipping done."
       "RunFlowNotDefined", "Flow is not defined on Run. Component can't be flipped."
       "CannotFlip", "Run is deleted or there are no segments attached to component. Component cannot be flipped."
    """
    Success = 0  # RunFlipStatusMemberType
    NotTwoPorts = 1  # RunFlipStatusMemberType
    UnequalConstraints = 2  # RunFlipStatusMemberType
    PortPositionMismatch = 3  # RunFlipStatusMemberType
    FlowTypeMismatch = 4  # RunFlipStatusMemberType
    FollowsFlow = 5  # RunFlipStatusMemberType
    RunFlowNotDefined = 6  # RunFlipStatusMemberType
    CannotFlip = 7  # RunFlipStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Run(NXOpen.NXObject):
    """
    Routing Run object references components and stocks which comprise a piping run.  
    
    To create an instance of this class us :py:meth:`Routing.RunCollection.CreateRun`
    
    .. versionadded:: NX4.0.0
    """
    
    class Status():
        """
        Represents the status of a run 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Valid", "Run is valid. All items are connected and all segments have stocks assigned on them"
           "Broken", "Run is broken. All items are not connected end to end"
           "Incomplete", "Run is incomplete. Some segments do not have stock assigned on them"
        """
        Valid = 0  # RunStatusMemberType
        Broken = 1  # RunStatusMemberType
        Incomplete = 2  # RunStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CompareStatus():
        """
        Represents discrepancies in the run compared to another run 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Run has no compare status. Compare operation is not invoked yet"
           "Ok", "No missing, extra or discrepancy items"
           "MissingRun", "Entire run is missing"
           "ExtraRun", "Entire run is extra"
           "MissingItem", "Item or items are missing from the run"
           "ExtraItem", "Extra item or items present in the run"
           "Discrepancy", "Items have characteristics discrepancies"
        """
        NotSet = 0  # RunCompareStatusMemberType
        Ok = 1  # RunCompareStatusMemberType
        MissingRun = 2  # RunCompareStatusMemberType
        ExtraRun = 3  # RunCompareStatusMemberType
        MissingItem = 4  # RunCompareStatusMemberType
        ExtraItem = 5  # RunCompareStatusMemberType
        Discrepancy = 6  # RunCompareStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FlipStatus():
        """
        Represents result of flip component 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Success", "Component is flipped."
           "NotTwoPorts", "Given component ports are not equal to two ports."
           "UnequalConstraints", "Each ports has different number of constraints."
           "PortPositionMismatch", "Ports are not collinear and opposite or perpendicular."
           "FlowTypeMismatch", "Ports are defined with ambiguous flow types."
           "FollowsFlow", "Ports correctly aligned with flow. No flipping done."
           "RunFlowNotDefined", "Flow is not defined on Run. Component can't be flipped."
           "CannotFlip", "Run is deleted or there are no segments attached to component. Component cannot be flipped."
        """
        Success = 0  # RunFlipStatusMemberType
        NotTwoPorts = 1  # RunFlipStatusMemberType
        UnequalConstraints = 2  # RunFlipStatusMemberType
        PortPositionMismatch = 3  # RunFlipStatusMemberType
        FlowTypeMismatch = 4  # RunFlipStatusMemberType
        FollowsFlow = 5  # RunFlipStatusMemberType
        RunFlowNotDefined = 6  # RunFlipStatusMemberType
        CannotFlip = 7  # RunFlipStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetRunId(self) -> str:
        """
        Retrieves the run_id of run  
        
        Signature ``GetRunId()`` 
        
        :returns:  Run id of run  
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRunType(self) -> str:
        """
        Retrieves the run type of run  
        
        Signature ``GetRunType()`` 
        
        :returns:  Run type of run  
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFromItems(self) -> 'list[NXOpen.NXObject]':
        """
        Retrieves the from items of a run.  
        
        From items are extracted ports or run  
        
        Signature ``GetFromItems()`` 
        
        :returns:  All from items of the run  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFromItemData(self) -> 'list[RunItem]':
        """
        Retrieves the data of the "From" items of a run  
        
        Signature ``GetFromItemData()`` 
        
        :returns:  Array of data for the "From" items.  
        :rtype: list of :py:class:`NXOpen.Routing.RunItem` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetToItems(self) -> 'list[NXOpen.NXObject]':
        """
        Retrieves the to items of a run.  
        
        To items are extracted ports or run 
        
        Signature ``GetToItems()`` 
        
        :returns:  All to items of the run  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetToItemData(self) -> 'list[RunItem]':
        """
        Retrieves the data of the "To" items of a run  
        
        Signature ``GetToItemData()`` 
        
        :returns:  Array of data for the "To" items.  
        :rtype: list of :py:class:`NXOpen.Routing.RunItem` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetMemberItemData(self) -> 'list[RunItem]':
        """
        Retrieves the data of the "Member" items of a run  
        
        Signature ``GetMemberItemData()`` 
        
        :returns:  Array of data for the "Member" items.  
        :rtype: list of :py:class:`NXOpen.Routing.RunItem` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def Edit(self, runId: str, runType: str, from_: 'list[NXOpen.NXObject]', to: 'list[NXOpen.NXObject]', member: 'list[NXOpen.NXObject]') -> RunStatus:
        """
        Edits an existing run with new items. NOTE: Removes any existing items in the run and adds these new items  
        
        Signature ``Edit(runId, runType, from, to, member)`` 
        
        :param runId:  Unique identifier of the Run  
        :type runId: str 
        :param runType:  Type of the Run  
        :type runType: str 
        :param from:  Array of to items. Must be :py:class:`NXOpen.Routing.Port`,                                             :py:class:`NXOpen.Routing.Run` or :py:class:`NXOpen.Routing.ControlPoint`  
        :type from: list of :py:class:`NXOpen.NXObject` 
        :param to:  Array of to items. Must be :py:class:`NXOpen.Routing.Port`,                                            :py:class:`NXOpen.Routing.Run` or :py:class:`NXOpen.Routing.ControlPoint`  
        :type to: list of :py:class:`NXOpen.NXObject` 
        :param member:  Array of member items. Must be :py:class:`NXOpen.Assemblies.Component`,                                             :py:class:`NXOpen.Routing.ISegment` or Routing.Stock  
        :type member: list of :py:class:`NXOpen.NXObject` 
        :returns:  Valid, broken or incomplete run  
        :rtype: :py:class:`NXOpen.Routing.RunStatus` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def Edit(self, runId: str, runType: str, fromItems: 'list[RunItem]', toItems: 'list[RunItem]', memberItems: 'list[RunItem]') -> None:
        """
        Edits an existing run with new run item data. NOTE: Removes any existing items in the run and adds these new items. 
        
        Signature ``Edit(runId, runType, fromItems, toItems, memberItems)`` 
        
        :param runId:  Unique identifier of the Run  
        :type runId: str 
        :param runType:  Type of the Run  
        :type runType: str 
        :param fromItems:  Array of "From" item data.  
        :type fromItems: list of :py:class:`NXOpen.Routing.RunItem` 
        :param toItems:  Array of "To" item data.  
        :type toItems: list of :py:class:`NXOpen.Routing.RunItem` 
        :param memberItems:  Array of "Member" item data.  
        :type memberItems: list of :py:class:`NXOpen.Routing.RunItem` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRunStatus(self) -> RunStatus:
        """
        Ask the status of run  
        
        Signature ``GetRunStatus()`` 
        
        :returns:  Valid, broken or incomplete run  
        :rtype: :py:class:`NXOpen.Routing.RunStatus` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRoutingSystem(self) -> RoutingSystem:
        """
        Ask the :py:class:`NXOpen.Routing.RoutingSystem` run belongs to  
        
        Signature ``GetRoutingSystem()`` 
        
        :returns:  RoutingSystem run belongs to  
        :rtype: :py:class:`NXOpen.Routing.RoutingSystem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRunCompareStatus(self) -> RunCompareStatus:
        """
        Ask the compare status of run  
        
        Signature ``GetRunCompareStatus()`` 
        
        :returns:  Run compare status  
        :rtype: :py:class:`NXOpen.Routing.RunCompareStatus` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RunSegmentGetFlowDirection(self, segment: ISegment) -> int:
        """
        Get flow direction of a run segment  
        
        Signature ``RunSegmentGetFlowDirection(segment)`` 
        
        :param segment: 
        :type segment: :py:class:`NXOpen.Routing.ISegment` 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RunSegmentSetFlowDirection(self, segment: ISegment, flowState: int) -> None:
        """
        Set flow direction of a run segment 
        
        Signature ``RunSegmentSetFlowDirection(segment, flowState)`` 
        
        :param segment: 
        :type segment: :py:class:`NXOpen.Routing.ISegment` 
        :param flowState: 
        :type flowState: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RunSegmentReverseFlowDirection(self, segment: ISegment) -> None:
        """
        Reverse flow direction of a run segment 
        
        Signature ``RunSegmentReverseFlowDirection(segment)`` 
        
        :param segment: 
        :type segment: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def DetectRunSpools(self) -> 'list[NXOpen.ObjectList]':
        """
        This will detect spools in a run  
        
        Signature ``DetectRunSpools()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.ObjectList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteRunPath(self) -> None:
        """
        This will delete the Run path and member items in a run 
        
        Signature ``DeleteRunPath()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def FlipComponent(self, component: NXOpen.Assemblies.Component) -> RunFlipStatus:
        """
        Flips a component that is part of a run by rotating the component so that it's input and output ports reverse.  
        
        Signature ``FlipComponent(component)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.Assemblies.Component` 
        :returns:  Flip Component status  
        :rtype: :py:class:`NXOpen.Routing.RunFlipStatus` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def MakeActive(self) -> None:
        """
        Set a Run as Active.  
        
        All the newly created segments and parts through Linear Path, Spline Path,
        Heal Path and parts placed through Place Part will be added as members to the Active Run.
        The specification of the Run will be set as Active Specification.
        The previous active run will be made Inactive. Use :py:meth:`NXOpen.Routing.Run.MakeInactive` to make a Run as Inactive.
        
        Signature ``MakeActive()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def MakeInactive(self) -> None:
        """
        Set a Run as Inactive and the Active Specification will be changed to Default Specification of the
        discipline, if no discipline is being used then the Active Specification will be set to None.  
        
        Use :py:meth:`NXOpen.Routing.Run.MakeActive` to make a Run as Active. 
        
        Signature ``MakeInactive()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetActiveStatus(self) -> bool:
        """
        Get status of Run, Active or Inactive  
        
        Signature ``GetActiveStatus()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetMembers(self) -> 'list[NXOpen.NXObject]':
        """
        Retrieves the member items of a run.  
        
        Member items are part occurrence of ports, stocks,
        or segments.  
        
        Signature ``GetMembers()`` 
        
        :returns:  All member items of the run  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristicsWithId(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object, including RunId.  
        
        Signature ``GetCharacteristicsWithId()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: Run = ...  # unknown typename


class RoutingSystemCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.RoutingSystem` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRouting(self, name: str) -> RoutingSystem:
        """
        Creates a :py:class:`NXOpen.Routing.RoutingSystem` object.  
        
        Signature ``CreateRouting(name)`` 
        
        :param name:  Name of RoutingSystem  
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.RoutingSystem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class OverstockBuilderApplicationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OverstockBuilderApplicationType():
    """
    The overstock application type. This defines the way in which to 
    create piggyback segment for overstock. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EntireSegments", "Entire Segments"
       "Interval", "Interval"
       "PointToPoint", "Point To Point"
       "PointAndLength", "Point And Length"
    """
    EntireSegments = 0  # OverstockBuilderApplicationTypeMemberType
    Interval = 1  # OverstockBuilderApplicationTypeMemberType
    PointToPoint = 2  # OverstockBuilderApplicationTypeMemberType
    PointAndLength = 3  # OverstockBuilderApplicationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OverstockBuilderPointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OverstockBuilderPointType():
    """
    The defining point location. This defines direction to go for 
    the POINT and LENGTH method.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", "Start"
       "Middle", "Middle"
       "End", "End"
    """
    Start = 0  # OverstockBuilderPointTypeMemberType
    Middle = 1  # OverstockBuilderPointTypeMemberType
    End = 2  # OverstockBuilderPointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OverstockBuilderWrapTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OverstockBuilderWrapType():
    """
    The application type for wrapped overstock 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OverlapSpiral", "Overlap Spiral"
       "Spot", "Spot"
       "StripedSpiral", "Striped Spiral"
       "Unknown", " - "
    """
    OverlapSpiral = 0  # OverstockBuilderWrapTypeMemberType
    Spot = 1  # OverstockBuilderWrapTypeMemberType
    StripedSpiral = 2  # OverstockBuilderWrapTypeMemberType
    Unknown = 3  # OverstockBuilderWrapTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OverstockBuilder(NXOpen.Builder):
    """
    Builder for creating/editing overstocks.  
    
    Create Overstock: This builder takes a set of segments and overstock and assign the 
    the overstock on the segments depending on the applicatio method and parameters
    chosen by the user.
    Edit Overstock: This builder takes in the selected overstock to edit as input and 
    redefines the overstock with the modified(by the user) parameters.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateOverstockBuilder`
    
    Default values.
    
    ==========================  ========================================
    Property                    Value
    ==========================  ========================================
    ApplicationMethod           Interval 
    --------------------------  ----------------------------------------
    Distance.Value              0 (millimeters part), 0 (inches part) 
    --------------------------  ----------------------------------------
    DistanceLock                0 
    --------------------------  ----------------------------------------
    EndOffsetLock               0 
    --------------------------  ----------------------------------------
    FlipStock                   0 
    --------------------------  ----------------------------------------
    Gap.Value                   0 (millimeters part), 0 (inches part) 
    --------------------------  ----------------------------------------
    GapDistance.Value           1 (millimeters part), 1 (inches part) 
    --------------------------  ----------------------------------------
    GapLock                     0 
    --------------------------  ----------------------------------------
    IntervalPieceLength.Value   0 (millimeters part), 0 (inches part) 
    --------------------------  ----------------------------------------
    NumberOfPieces.Value        1 (millimeters part), 1 (inches part) 
    --------------------------  ----------------------------------------
    NumberOfPiecesLock          0 
    --------------------------  ----------------------------------------
    NumberOfWraps.Value         2 (millimeters part), 2 (inches part) 
    --------------------------  ----------------------------------------
    OverlapPercentage.Value     50 (millimeters part), 50 (inches part) 
    --------------------------  ----------------------------------------
    PieceLength.Value           0 (millimeters part), 0 (inches part) 
    --------------------------  ----------------------------------------
    PieceLengthLock             0 
    --------------------------  ----------------------------------------
    PointDefines                Start 
    --------------------------  ----------------------------------------
    RotationValue.Value         0 
    --------------------------  ----------------------------------------
    StartOffsetLock             0 
    --------------------------  ----------------------------------------
    SwapProfile                 0 
    --------------------------  ----------------------------------------
    WrapMethod                  OverlapSpiral 
    ==========================  ========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class ApplicationType():
        """
        The overstock application type. This defines the way in which to 
        create piggyback segment for overstock. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EntireSegments", "Entire Segments"
           "Interval", "Interval"
           "PointToPoint", "Point To Point"
           "PointAndLength", "Point And Length"
        """
        EntireSegments = 0  # OverstockBuilderApplicationTypeMemberType
        Interval = 1  # OverstockBuilderApplicationTypeMemberType
        PointToPoint = 2  # OverstockBuilderApplicationTypeMemberType
        PointAndLength = 3  # OverstockBuilderApplicationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PointType():
        """
        The defining point location. This defines direction to go for 
        the POINT and LENGTH method.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Start", "Start"
           "Middle", "Middle"
           "End", "End"
        """
        Start = 0  # OverstockBuilderPointTypeMemberType
        Middle = 1  # OverstockBuilderPointTypeMemberType
        End = 2  # OverstockBuilderPointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WrapType():
        """
        The application type for wrapped overstock 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OverlapSpiral", "Overlap Spiral"
           "Spot", "Spot"
           "StripedSpiral", "Striped Spiral"
           "Unknown", " - "
        """
        OverlapSpiral = 0  # OverstockBuilderWrapTypeMemberType
        Spot = 1  # OverstockBuilderWrapTypeMemberType
        StripedSpiral = 2  # OverstockBuilderWrapTypeMemberType
        Unknown = 3  # OverstockBuilderWrapTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdatePathCurve(self) -> None:
        """
        Update the path curve that is used to specify overstock defining points
        when any segment is selected or deselected.  
        
        Signature ``UpdatePathCurve()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetCoveredStocks(self) -> 'list[Stock]':
        """
        Returns the stocks to be covered by the overstock.  
        
        Signature ``GetCoveredStocks()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def SetCoveredStocks(self, stocks: 'list[Stock]') -> None:
        """
        Sets the stocks to be covered by the overstock.  
        
        Signature ``SetCoveredStocks(stocks)`` 
        
        :param stocks: 
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def GetNumberOfLayers(self) -> NXOpen.Expression:
        """
        Returns the number of layers in case of wrapped overstock.  
        
        Signature ``GetNumberOfLayers()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def SetNumberOfLayers(self, numberOfLayers: NXOpen.Expression) -> None:
        """
        Sets the number of layers in case of wrapped overstock.  
        
        Signature ``SetNumberOfLayers(numberOfLayers)`` 
        
        :param numberOfLayers: 
        :type numberOfLayers: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def IsOverlapDefinedByNumberOfLayers(self) -> bool:
        """
        Returns if wrapped overstock is defined by number of layers   
        
        Signature ``IsOverlapDefinedByNumberOfLayers()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def SetOverlapDefinedByNumberOfLayers(self, isOverlapDefinedByNumberOfLayers: bool) -> None:
        """
        Sets wrapped overstock is to be defined by number of layers
        
        Signature ``SetOverlapDefinedByNumberOfLayers(isOverlapDefinedByNumberOfLayers)`` 
        
        :param isOverlapDefinedByNumberOfLayers: 
        :type isOverlapDefinedByNumberOfLayers: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    ApplicationMethod: OverstockBuilderApplicationType = ...
    """
    Returns or sets  the application method for overstock assignment.  
    
    It defines the way in 
    which to create piggyback segment for overstock. 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplicationMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.OverstockBuilderApplicationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``ApplicationMethod`` 
    
    :param applicationMethod: 
    :type applicationMethod: :py:class:`NXOpen.Routing.OverstockBuilderApplicationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    DefiningPoint: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the defining point for :py:class:` NXOpen.Routing.OverstockBuilderApplicationType.PointAndLength  < NXOpen.Routing.OverstockBuilderApplicationType>` method.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefiningPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    Distance: NXOpen.Expression = ...
    """
    Returns  the distance over which the pieces of overstock can possibly range for
    :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.Interval <NXOpen.Routing.OverstockBuilderApplicationType>`
    method.  
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    DistanceLock: bool = ...
    """
    Returns or sets  the distance lock state.  
    
    If TRUE, changing the parameters will change other
    unlocked parameters to fit overstock along the selected path. 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceLock`` 
    
    :param distanceLock: 
    :type distanceLock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    EndOffset: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the end offset value for :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.Interval <NXOpen.Routing.OverstockBuilderApplicationType>`
    method.  
    
    It defins the MINIMUM distance from the end of the path to place 
    the last piece of overstock. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    EndOffsetLock: bool = ...
    """
    Returns or sets  the end offset lock state.  
    
    If TRUE, changing the parameters will change other
    unlocked parameters to fit overstock along the selected path. 
    
    <hr>
    
    Getter Method
    
    Signature ``EndOffsetLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``EndOffsetLock`` 
    
    :param endOffsetLock: 
    :type endOffsetLock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    EndPoint: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the end point that defines the end of the overstock for 
    :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.PointToPoint <NXOpen.Routing.OverstockBuilderApplicationType>`
    method.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    FlipStock: bool = ...
    """
    Returns or sets  the stock flip flag 
    
    <hr>
    
    Getter Method
    
    Signature ``FlipStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.1
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``FlipStock`` 
    
    :param flipStock: 
    :type flipStock: bool 
    
    .. versionadded:: NX6.0.1
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    Gap: NXOpen.Expression = ...
    """
    Returns  the gap from the end of one piece of overstock to the start of the next piece
    of overstock for :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.Interval <NXOpen.Routing.OverstockBuilderApplicationType>` method.  
    
    <hr>
    
    Getter Method
    
    Signature ``Gap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    GapDistance: NXOpen.Expression = ...
    """
    Returns  the gap distance if the :py:class:`NXOpen.Routing.OverstockBuilderWrapType`
    is :py:class:`NXOpen.Routing.OverstockBuilderWrapType.StripedSpiral <NXOpen.Routing.OverstockBuilderWrapType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``GapDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    GapLock: bool = ...
    """
    Returns or sets  the gap lock state.  
    
    If TRUE, changing the parameters will change other
    unlocked parameters to fit overstock along the selected path. 
    
    <hr>
    
    Getter Method
    
    Signature ``GapLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``GapLock`` 
    
    :param gapLock: 
    :type gapLock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    IntervalPieceLength: NXOpen.Expression = ...
    """
    Returns  the length of the overstock pieces for :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.Interval <NXOpen.Routing.OverstockBuilderApplicationType>`
    method.  
    
    If the overstock type is Wrapped, and the wrap method is set to Spot,
    the Piece Length is always the width of the overstock and is locked. 
    
    <hr>
    
    Getter Method
    
    Signature ``IntervalPieceLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    NumberOfPieces: NXOpen.Expression = ...
    """
    Returns  the number of pieces of overstock to place along the path for 
    :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.Interval <NXOpen.Routing.OverstockBuilderApplicationType>`
    method.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfPieces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    NumberOfPiecesLock: bool = ...
    """
    Returns or sets  the number of pieces lock state.  
    
    If TRUE, changing the parameters will change other
    unlocked parameters to fit overstock along the selected path. 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfPiecesLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfPiecesLock`` 
    
    :param numberOfPiecesLock: 
    :type numberOfPiecesLock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    NumberOfWraps: NXOpen.Expression = ...
    """
    Returns  the number of wraps if the :py:class:`NXOpen.Routing.OverstockBuilderWrapType`
    is :py:class:`NXOpen.Routing.OverstockBuilderWrapType.Spot <NXOpen.Routing.OverstockBuilderWrapType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfWraps`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    OverlapPercentage: NXOpen.Expression = ...
    """
    Returns  the percentage overlap if the :py:class:`NXOpen.Routing.OverstockBuilderWrapType`
    is :py:class:`NXOpen.Routing.OverstockBuilderWrapType.OverlapSpiral <NXOpen.Routing.OverstockBuilderWrapType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``OverlapPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    PathCurve: NXOpen.Curve = ...
    """
    Returns  the path curve that is used to specify overstock defining points.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    PieceLength: NXOpen.Expression = ...
    """
    Returns  the length over which overstock piece to be assigned for 
    :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.PointAndLength <NXOpen.Routing.OverstockBuilderApplicationType>` method.  
    
    <hr>
    
    Getter Method
    
    Signature ``PieceLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    PieceLengthLock: bool = ...
    """
    Returns or sets  the piece length lock state.  
    
    If TRUE, changing the parameters will change other
    unlocked parameters to fit overstock along the selected path. 
    
    <hr>
    
    Getter Method
    
    Signature ``PieceLengthLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``PieceLengthLock`` 
    
    :param pieceLengthLock: 
    :type pieceLengthLock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    PointDefines: OverstockBuilderPointType = ...
    """
    Returns or sets  the defining point location which can be any of :py:class:`NXOpen.Routing.OverstockBuilderPointType`
    for :py:class:` NXOpen.Routing.OverstockBuilderApplicationType.PointAndLength  < NXOpen.Routing.OverstockBuilderApplicationType>` method.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointDefines`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.OverstockBuilderPointType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``PointDefines`` 
    
    :param pointDefines: 
    :type pointDefines: :py:class:`NXOpen.Routing.OverstockBuilderPointType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    RotationValue: NXOpen.Expression = ...
    """
    Returns  the rotation value.  
    
    Determines the rotation angle of the overstock. 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    SegmentCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector to collect the segments to assign overstock to.  
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    StartOffset: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the start offset value for :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.Interval <NXOpen.Routing.OverstockBuilderApplicationType>`
    method.  
    
    It defines the distance from the beginning of the path to place the 
    first piece of overstock. 
    
    <hr>
    
    Getter Method
    
    Signature ``StartOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    StartOffsetLock: bool = ...
    """
    Returns or sets  the start offset lock state.  
    
    If TRUE, changing the parameters will change other
    unlocked parameters to fit overstock along the selected path 
    
    <hr>
    
    Getter Method
    
    Signature ``StartOffsetLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``StartOffsetLock`` 
    
    :param startOffsetLock: 
    :type startOffsetLock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    StartPoint: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the start point that defines the start of the overstock for 
    :py:class:`NXOpen.Routing.OverstockBuilderApplicationType.PointToPoint <NXOpen.Routing.OverstockBuilderApplicationType>`
    method.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    StockAnchor: str = ...
    """
    Returns or sets  the :py:class:`NXOpen.Routing.Anchor` name associated with the overstock.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockAnchor`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.1
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``StockAnchor`` 
    
    :param anchorName: 
    :type anchorName: str 
    
    .. versionadded:: NX6.0.1
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    StockSettings: PathStockBuilder = ...
    """
    Returns or sets  the stock settings for overstock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``StockSettings`` 
    
    :param stockBuilder: 
    :type stockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    SwapProfile: bool = ...
    """
    Returns or sets  the profile swap flag.  
    
    Determines whether the profile should be
    at the path start or end.
    
    <hr>
    
    Getter Method
    
    Signature ``SwapProfile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.1
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``SwapProfile`` 
    
    :param swapProfile: 
    :type swapProfile: bool 
    
    .. versionadded:: NX6.0.1
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    SwitchStartEnd: bool = ...
    """
    Returns or sets  the path direction that defines the start of overstock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``SwitchStartEnd`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``SwitchStartEnd`` 
    
    :param switchStartEnd: 
    :type switchStartEnd: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    WrapMethod: OverstockBuilderWrapType = ...
    """
    Returns or sets  the :py:class:`NXOpen.Routing.OverstockBuilderWrapType` for Wrapped overstock.  
    
    <hr>
    
    Getter Method
    
    Signature ``WrapMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.OverstockBuilderWrapType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    
    <hr>
    
    Setter Method
    
    Signature ``WrapMethod`` 
    
    :param wrapMethod: 
    :type wrapMethod: :py:class:`NXOpen.Routing.OverstockBuilderWrapType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
    """
    Null: OverstockBuilder = ...  # unknown typename


class TerminalPortBuilder(NXOpen.Builder):
    """
    Builder for creating the Terminal List Item for the ModelTerminals   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.TerminalPortBuilder`
    
    .. versionadded:: NX7.5.0
    """
    IndividualCutBack: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the Cutback Lenth for the Terminal
    
    <hr>
    
    Getter Method
    
    Signature ``IndividualCutBack`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    IndividualExtenstion: NXOpen.Expression = ...
    """
    Returns   the Extenstion Value for the Terminal
    
    <hr>
    
    Getter Method
    
    Signature ``IndividualExtenstion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Modeled: bool = ...
    """
    Returns or sets  the flag for the terminal that says if it is Modeled or not 
    
    <hr>
    
    Getter Method
    
    Signature ``Modeled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``Modeled`` 
    
    :param modeled: 
    :type modeled: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    TerminalPort: NXOpen.NXObject = ...
    """
    Returns or sets  the TerminalPort 
    
    <hr>
    
    Getter Method
    
    Signature ``TerminalPort`` 
    
    :returns:  Routing Port  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``TerminalPort`` 
    
    :param port:  Routing Port  
    :type port: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: TerminalPortBuilder = ...  # unknown typename


class DesignRuleViolationLocationCollectionDeleteOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DesignRuleViolationLocationCollectionDeleteOption():
    """
    Design Rule Violation Location object delete option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DoDelete", " - "
       "DontDelete", "Set this option only if you do not want to delete violation location objects"
    """
    DoDelete = 0  # DesignRuleViolationLocationCollectionDeleteOptionMemberType
    DontDelete = 1  # DesignRuleViolationLocationCollectionDeleteOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolationLocationCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.DesignRuleViolationLocation` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX6.0.0
    """
    
    class DeleteOption():
        """
        Design Rule Violation Location object delete option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DoDelete", " - "
           "DontDelete", "Set this option only if you do not want to delete violation location objects"
        """
        DoDelete = 0  # DesignRuleViolationLocationCollectionDeleteOptionMemberType
        DontDelete = 1  # DesignRuleViolationLocationCollectionDeleteOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDesignRuleViolationLocation(self, deleteLocationObjects: DesignRuleViolationLocationCollectionDeleteOption, locationObjects: 'list[NXOpen.NXObject]') -> DesignRuleViolationLocation:
        """
        Creates a :py:class:`NXOpen.Routing.DesignRuleViolationLocation` object.  
        
        Signature ``CreateDesignRuleViolationLocation(deleteLocationObjects, locationObjects)`` 
        
        :param deleteLocationObjects: 
        :type deleteLocationObjects: :py:class:`NXOpen.Routing.DesignRuleViolationLocationCollectionDeleteOption` 
        :param locationObjects: 
        :type locationObjects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationLocation` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class SplitRunBuilder(NXOpen.Builder):
    """
    Builder Class for Split Run Object   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.SplitRunBuilder`
    
    Default values.
    
    ===========  =====
    Property     Value
    ===========  =====
    NameToFrom   0 
    ===========  =====
    
    .. versionadded:: NX8.0.0
    """
    
    def GetAttributeHolder(self) -> NXOpen.NXObject:
        """
        Gets Attribute holder in builder.  
        
        Signature ``GetAttributeHolder()`` 
        
        :returns:  Object to hold template attributes  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    NameToFrom: bool = ...
    """
    Returns or sets  the new run name to From section or not
    
    <hr>
    
    Getter Method
    
    Signature ``NameToFrom`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``NameToFrom`` 
    
    :param nameToFrom: 
    :type nameToFrom: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RunName: str = ...
    """
    Returns or sets  the user mentioned run name after split
    
    <hr>
    
    Getter Method
    
    Signature ``RunName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RunName`` 
    
    :param runName: 
    :type runName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RunObject: SelectRun = ...
    """
    Returns  the user selected Run for Split 
    
    <hr>
    
    Getter Method
    
    Signature ``RunObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SelectRun` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SplitObject: RouteObjectCollector = ...
    """
    Returns  the user selected split object 
    
    <hr>
    
    Getter Method
    
    Signature ``SplitObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: SplitRunBuilder = ...  # unknown typename


class LogicalConnection(ConnectivityDefinition):
    """
    Represents a connection between mutiple From and To :py:class:`Routing.LogicalTerminal`.
    
    Use :py:class:`Routing.Electrical.Connection` to constrain 
    a connection to one From and To :py:class:`Routing.LogicalTerminal`
    This is an abstract class and is for future use.
    See NX Open Routing help for detailed information on the Connection data model
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    
    def GetFromTerminals(self) -> 'list[LogicalTerminal]':
        """
        Get all From Terminals from the logical connection  
        
        Signature ``GetFromTerminals()`` 
        
        :returns:  Collection of :py:class:`Routing.LogicalTerminal` 
        :rtype: list of :py:class:`NXOpen.Routing.LogicalTerminal` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetToTerminals(self) -> 'list[LogicalTerminal]':
        """
        Get all To Terminals from the logical connection 
        
        Signature ``GetToTerminals()`` 
        
        :returns:  Collection of :py:class:`Routing.LogicalTerminal` 
        :rtype: list of :py:class:`NXOpen.Routing.LogicalTerminal` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReplaceFromTerminals(self, fromTerminals: 'list[LogicalTerminal]') -> None:
        """
        Replace the existing From Terminals for the logical connection with
        collection of :py:class:`Routing.LogicalTerminal` terminals 
        
        Signature ``ReplaceFromTerminals(fromTerminals)`` 
        
        :param fromTerminals:  Collection of :py:class:`Routing.LogicalTerminal`None empties From Terminal array  
        :type fromTerminals: list of :py:class:`NXOpen.Routing.LogicalTerminal` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReplaceToTerminals(self, toTerminals: 'list[LogicalTerminal]') -> None:
        """
        Replace the existing To Terminals for the logical connection with
        collection of :py:class:`Routing.LogicalTerminal` terminals 
        
        Signature ``ReplaceToTerminals(toTerminals)`` 
        
        :param toTerminals:  Collection of :py:class:`Routing.LogicalTerminal`None empties To Terminal array 
        :type toTerminals: list of :py:class:`NXOpen.Routing.LogicalTerminal` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddFromTerminal(self, fromTerminal: LogicalTerminal) -> bool:
        """
        Add :py:class:`Routing.LogicalTerminal` to the From Terminals collection.  
        
        Ordering is not important within variable length array.  
        
        Signature ``AddFromTerminal(fromTerminal)`` 
        
        :param fromTerminal:  Cannot be None  
        :type fromTerminal: :py:class:`NXOpen.Routing.LogicalTerminal` 
        :returns:  Successfully added :py:class:`Routing.LogicalTerminal`? 
        :rtype: bool 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveFromTerminal(self, fromTerminal: LogicalTerminal) -> bool:
        """
        Remove a :py:class:`Routing.LogicalTerminal` from the From Terminals collection.  
        
        Ordering is not important within the variable length array.  
        
        Signature ``RemoveFromTerminal(fromTerminal)`` 
        
        :param fromTerminal:  May be None  
        :type fromTerminal: :py:class:`NXOpen.Routing.LogicalTerminal` 
        :returns:  Successful removal of :py:class:`Routing.LogicalTerminal`? 
        :rtype: bool 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddToTerminal(self, toTerminal: LogicalTerminal) -> bool:
        """
        Add :py:class:`Routing.LogicalTerminal` to end of the To Terminals collection.  
        
        Ordering is not important within variable length array.  
        
        Signature ``AddToTerminal(toTerminal)`` 
        
        :param toTerminal:  A :py:class:`Routing.LogicalTerminal` Cannot be None  
        :type toTerminal: :py:class:`NXOpen.Routing.LogicalTerminal` 
        :returns:  Successful addition of :py:class:`Routing.LogicalTerminal`?.  
        :rtype: bool 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveToTerminal(self, toTerminal: LogicalTerminal) -> bool:
        """
        Remove a :py:class:`Routing.LogicalTerminal` from the To Terminals collection.  
        
        Ordering is not important within the variable length array.  
        
        Signature ``RemoveToTerminal(toTerminal)`` 
        
        :param toTerminal:  May be None  
        :type toTerminal: :py:class:`NXOpen.Routing.LogicalTerminal` 
        :returns:  Successful removal of :py:class:`Routing.LogicalTerminal`?  
        :rtype: bool 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Null: LogicalConnection = ...  # unknown typename


class StockStyleBuilderStockStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockStyleBuilderStockStyle():
    """
    Enum to define the stock style  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Centerline", " - "
       "SimpleSolid", " - "
       "DetailedSolid", " - "
    """
    Centerline = 0  # StockStyleBuilderStockStyleMemberType
    SimpleSolid = 1  # StockStyleBuilderStockStyleMemberType
    DetailedSolid = 2  # StockStyleBuilderStockStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockStyleBuilder(NXOpen.Builder):
    """
    Builder class to assigns style to the selected stock .  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockStyleBuilder`
    
    Default values.
    
    ===============  ============
    Property         Value
    ===============  ============
    EnumStockStyle   SimpleSolid 
    ===============  ============
    
    .. versionadded:: NX6.0.0
    """
    
    class StockStyle():
        """
        Enum to define the stock style  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Centerline", " - "
           "SimpleSolid", " - "
           "DetailedSolid", " - "
        """
        Centerline = 0  # StockStyleBuilderStockStyleMemberType
        SimpleSolid = 1  # StockStyleBuilderStockStyleMemberType
        DetailedSolid = 2  # StockStyleBuilderStockStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    EnumStockStyle: StockStyleBuilderStockStyle = ...
    """
    Returns or sets  the enum for setting stock style 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumStockStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockStyleBuilderStockStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EnumStockStyle`` 
    
    :param enumStockStyle: 
    :type enumStockStyle: :py:class:`NXOpen.Routing.StockStyleBuilderStockStyle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RouteSelectionStock: RouteObjectCollector = ...
    """
    Returns  the route selection stock for selecting routing objects
    
    <hr>
    
    Getter Method
    
    Signature ``RouteSelectionStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: StockStyleBuilder = ...  # unknown typename


class StockPartConverterBuilderPartOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockPartConverterBuilderPartOption():
    """
    Represents the option to indicate the scope of stock part coversion  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WorkPart", "Upgrades stocks from the work part only"
       "WorkPartWithLoadedChildren", "Upgraded stocks from work part as well loaded children parts"
    """
    WorkPart = 0  # StockPartConverterBuilderPartOptionMemberType
    WorkPartWithLoadedChildren = 1  # StockPartConverterBuilderPartOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockPartConverterBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.StockPartConverterBuilder`
    Builder for Part Conversion of the stocks.  
    
    This also provides an option to Recreate stock components during part conversion.
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockPartConverterBuilder`
    
    Default values.
    
    ==============================  =====
    Property                        Value
    ==============================  =====
    RecreateStockComponentsOption   0 
    ==============================  =====
    
    .. versionadded:: NX10.0.0
    """
    
    class PartOption():
        """
        Represents the option to indicate the scope of stock part coversion  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WorkPart", "Upgrades stocks from the work part only"
           "WorkPartWithLoadedChildren", "Upgraded stocks from work part as well loaded children parts"
        """
        WorkPart = 0  # StockPartConverterBuilderPartOptionMemberType
        WorkPartWithLoadedChildren = 1  # StockPartConverterBuilderPartOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ConvertWorkPartAndLoadedChildrenOption: StockPartConverterBuilderPartOption = ...
    """
    Returns or sets  the convert workpart and loaded children option.  
    
    Returns if the stocks from only the work part or from the work part and loaded children have to be converted during part conversion.
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertWorkPartAndLoadedChildrenOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockPartConverterBuilderPartOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertWorkPartAndLoadedChildrenOption`` 
    
    :param conversionOption: 
    :type conversionOption: :py:class:`NXOpen.Routing.StockPartConverterBuilderPartOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RecreateStockComponentsOption: bool = ...
    """
    Returns or sets  the recreate StockComponents option.  
    
    Returns true if the stock components have to be recreated during part conversion.
    
    <hr>
    
    Getter Method
    
    Signature ``RecreateStockComponentsOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RecreateStockComponentsOption`` 
    
    :param recreateStockComponentsOption: 
    :type recreateStockComponentsOption: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: StockPartConverterBuilder = ...  # unknown typename


class FillerStockBuilder(NXOpen.Builder):
    """
    Creates Filler stock on selected Segments.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateFillerStockBuilder`
    
    Default values.
    
    ================================  ===============
    Property                          Value
    ================================  ===============
    RemoveExistingStock               0 
    --------------------------------  ---------------
    StockSettings.AssignStockMethod   SpecifiedStock 
    ================================  ===============
    
    .. versionadded:: NX6.0.0
    """
    RemoveExistingStock: bool = ...
    """
    Returns or sets  the remove existing stock flag.  
    
    If set to TRUE the existing stock
    on the path will be removed when assigning new stock.
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveExistingStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveExistingStock`` 
    
    :param removeStock: 
    :type removeStock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    RouteSelection: RouteObjectCollector = ...
    """
    Returns  the route selection which allows selection of routing objects
    
    <hr>
    
    Getter Method
    
    Signature ``RouteSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    StockSettings: PathStockBuilder = ...
    """
    Returns or sets  the stock settings for creating filler stock.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``StockSettings`` 
    
    :param stockBuilder: 
    :type stockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: FillerStockBuilder = ...  # unknown typename


class AssignDiscontinuityBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssignDiscontinuityBuilderTypes():
    """
    the Enum for the types Block 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", " - "
       "Complex", " - "
    """
    Simple = 0  # AssignDiscontinuityBuilderTypesMemberType
    Complex = 1  # AssignDiscontinuityBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssignDiscontinuityBuilder(NXOpen.Builder):
    """
    the Builder to Assign Discontinuity for the stocks   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateAssignDiscontinuityBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        the Enum for the types Block 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", " - "
           "Complex", " - "
        """
        Simple = 0  # AssignDiscontinuityBuilderTypesMemberType
        Complex = 1  # AssignDiscontinuityBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SegmentPairBuilder(self) -> SegmentPairBuilder:
        """
        Creates a SegmentPairBuilder  used to create list item for AssignDiscontinuity  
        
        Signature ``SegmentPairBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SegmentPairBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    ComplexPoint: NXOpen.SelectNXObject = ...
    """
    Returns  the Rcp type of the selected object  
    
    <hr>
    
    Getter Method
    
    Signature ``ComplexPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SegPairList: NXOpen.TaggedObjectList = ...
    """
    Returns  the list of selected segments pairs
    
    <hr>
    
    Getter Method
    
    Signature ``SegPairList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SegmentPair: NXOpen.SelectNXObjectList = ...
    """
    Returns  the segment pairs selected for the assigning Discontinuity 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentPair`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SimplePoint: RouteObjectCollector = ...
    """
    Returns  the Rcp type of the selected object  
    
    <hr>
    
    Getter Method
    
    Signature ``SimplePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Type: AssignDiscontinuityBuilderTypes = ...
    """
    Returns or sets  the type of Block
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.AssignDiscontinuityBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Routing.AssignDiscontinuityBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: AssignDiscontinuityBuilder = ...  # unknown typename


class AssemblyDefinition(ItemDefinition):
    """
    Represents a collection of :py:class:`NXOpen.Routing.SingleDevice` objects that are used in an assembled product.
    
    This class is abstract.
    
    No creator is available in KF because this is an abstract class.
    
    .. versionadded:: NX4.0.2
    """
    
    def GetSingleDeviceChildren(self) -> 'list[SingleDevice]':
        """
        Gets the list of :py:class:`NXOpen.Routing.SingleDevice` objects contained in the assembly.  
        
        The returned list is empty if the assembly does not contain any objects.  
        
        Signature ``GetSingleDeviceChildren()`` 
        
        :returns:  list of objects in the assembly  
        :rtype: list of :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReplaceSingleDeviceChildren(self, replacementChildren: 'list[SingleDevice]') -> None:
        """
        Replaces the list of :py:class:`NXOpen.Routing.SingleDevice` objects contained in the assembly.  
        
        Using None for replacementChildren is not allowed. 
        
        Signature ``ReplaceSingleDeviceChildren(replacementChildren)`` 
        
        :param replacementChildren:  :py:class:`NXOpen.Routing.SingleDevice` children to use in replacing the children of this Assembly Definition.  
        :type replacementChildren: list of :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddSingleDeviceChild(self, device: SingleDevice) -> None:
        """
        Adds a :py:class:`NXOpen.Routing.SingleDevice` object to the list of objects contained in the assembly.  
        
        Signature ``AddSingleDeviceChild(device)`` 
        
        :param device:  object to add  
        :type device: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveSingleDeviceChild(self, device: SingleDevice) -> None:
        """
        Removes a :py:class:`NXOpen.Routing.SingleDevice` from the list of objects contained in the assembly.  
        
        Signature ``RemoveSingleDeviceChild(device)`` 
        
        :param device:  object to remove  
        :type device: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def IsSingleDeviceChild(self, device: SingleDevice) -> bool:
        """
        Determines if a :py:class:`NXOpen.Routing.SingleDevice` object is contained in the assembly  
        
        Signature ``IsSingleDeviceChild(device)`` 
        
        :param device:  object to test  
        :type device: :py:class:`NXOpen.Routing.SingleDevice` 
        :returns:  TRUE if the object is in the AssemblyDefinition  
        :rtype: bool 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetReferencingDevice(self) -> SingleDevice:
        """
        Gets the :py:class:`NXOpen.Routing.SingleDevice` object that has this AssemblyDefinition object as its definition.  
        
        Signature ``GetReferencingDevice()`` 
        
        :returns:  instance of the AssemblyDefinion  
        :rtype: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Null: AssemblyDefinition = ...  # unknown typename


class DivisionsBuilderSplitDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DivisionsBuilderSplitDirectionType():
    """
    The direction in which the cross-section is to be split 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SplitVertically", "Creates a vertical split"
       "SplitHorizontally", "Creates a horizontal split"
    """
    SplitVertically = 0  # DivisionsBuilderSplitDirectionTypeMemberType
    SplitHorizontally = 1  # DivisionsBuilderSplitDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DivisionsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.DivisionsBuilder`
    
    Builder for creating/editing splits at an end of a duct.  
    
    Takes an end face of a rectangular stock and splits it into a pair of
    divisions based on the specified absolute flow percentage for each division.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDivisionsBuilder`
    
    Default values.
    
    =====================  ================
    Property               Value
    =====================  ================
    LeftChildFlow.Value    50 
    ---------------------  ----------------
    RightChildFlow.Value   50 
    ---------------------  ----------------
    SplitDirection         SplitVertically 
    =====================  ================
    
    .. versionadded:: NX7.5.0
    """
    
    class SplitDirectionType():
        """
        The direction in which the cross-section is to be split 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SplitVertically", "Creates a vertical split"
           "SplitHorizontally", "Creates a horizontal split"
        """
        SplitVertically = 0  # DivisionsBuilderSplitDirectionTypeMemberType
        SplitHorizontally = 1  # DivisionsBuilderSplitDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateDivisions(self) -> Division:
        """
        Creates two new divisions by splitting the parent division.  
        
        Signature ``CreateDivisions()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Division` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def GetDivision(self) -> Division:
        """
        Gets the division object, if any, associated with the division builder  
        
        Signature ``GetDivision()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Division` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    LeftChildFlow: NXOpen.Expression = ...
    """
    Returns  the value of percent absolute or relative flow in left (first) child division 
    
    <hr>
    
    Getter Method
    
    Signature ``LeftChildFlow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    RightChildFlow: NXOpen.Expression = ...
    """
    Returns  the value of percent absolute or relative flow in right (second) child division 
    
    <hr>
    
    Getter Method
    
    Signature ``RightChildFlow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    SelectedPort: NXOpen.SelectNXObject = ...
    """
    Returns  the :py:class:`NXOpen.Routing.Port` to identify the cross-section that is to be split 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedPort`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    SplitDirection: DivisionsBuilderSplitDirectionType = ...
    """
    Returns or sets  the direction of split, either vertical or horizontal 
    
    <hr>
    
    Getter Method
    
    Signature ``SplitDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DivisionsBuilderSplitDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``SplitDirection`` 
    
    :param splitDirection: 
    :type splitDirection: :py:class:`NXOpen.Routing.DivisionsBuilderSplitDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Null: DivisionsBuilder = ...  # unknown typename


class PlaceElbowsBuilder(NXOpen.Builder):
    """
    Class PlaceElbowsBuilder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateRoutingPlaceElbowsBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def SetAttributeHolder(self, attributeHolder: AttributeHolder) -> None:
        """
        Set the Attribute Holder 
        
        Signature ``SetAttributeHolder(attributeHolder)`` 
        
        :param attributeHolder:  Object to hold template attributes  
        :type attributeHolder: :py:class:`NXOpen.Routing.AttributeHolder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_pipetube ("Routing Piping and Tubing")
        """
        ...
    
    
    def PlaceMultipleElbows(self, jaCharx: CharacteristicList, refSet: str, layer: int, layerOption: int, overstockFlag: bool, optionalCharx: CharacteristicList, requiredCharx: CharacteristicList) -> None:
        """
        Place Multiple Elbows 
        
        Signature ``PlaceMultipleElbows(jaCharx, refSet, layer, layerOption, overstockFlag, optionalCharx, requiredCharx)`` 
        
        :param jaCharx: 
        :type jaCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param refSet: 
        :type refSet: str 
        :param layer: 
        :type layer: int 
        :param layerOption: 
        :type layerOption: int 
        :param overstockFlag: 
        :type overstockFlag: bool 
        :param optionalCharx:  Optional Charx to apply.  
        :type optionalCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param requiredCharx:  Required Charx to apply.  
        :type requiredCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_pipetube ("Routing Piping and Tubing")
        """
        ...
    
    AttributeHolder: AttributeHolder = ...
    """
    Returns  the attribute holder for elbow placement 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeHolder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.AttributeHolder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_pipetube ("Routing Piping and Tubing")
    """
    SelectRoutingObjects: RouteObjectCollector = ...
    """
    Returns  the route object collector builder for placing elbows 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectRoutingObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_pipetube ("Routing Piping and Tubing")
    """
    Null: PlaceElbowsBuilder = ...  # unknown typename


class SplineOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplineOptions():
    """
    Different spline creation options. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ByPoints", " - "
       "ByPoles", " - "
    """
    ByPoints = 0  # SplineOptionsMemberType
    ByPoles = 1  # SplineOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PathStockBuilderAssignMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PathStockBuilderAssignMethod():
    """
    Determines how to choose which stock to assign. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No Stock."
       "DefaultStock", "Default Stock."
       "FromStartObject", "Finds a stock based off of the default stock and the object selected by the user."
       "DiameterValue", "User specified diameter, creates round space reservation stock."
       "Rectangular", "User specified values, creates rectangular space reservation stock."
       "FlatOval", "User specified values, creates flat_oval space reservation stock."
       "SpecifiedStock", "Stock selected from Specify Item dialog"
       "FromParts", "Find stocks from the part table of parts selected by the user."
    """
    NotSet = 0  # PathStockBuilderAssignMethodMemberType
    DefaultStock = 1  # PathStockBuilderAssignMethodMemberType
    FromStartObject = 2  # PathStockBuilderAssignMethodMemberType
    DiameterValue = 3  # PathStockBuilderAssignMethodMemberType
    Rectangular = 4  # PathStockBuilderAssignMethodMemberType
    FlatOval = 5  # PathStockBuilderAssignMethodMemberType
    SpecifiedStock = 6  # PathStockBuilderAssignMethodMemberType
    FromParts = 7  # PathStockBuilderAssignMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PathStockBuilderAssignStockTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PathStockBuilderAssignStockType():
    """
    Determines the type of stock being assigned. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Stock", "Default stock type."
       "Overstock", "Overstock stock type."
       "Filler", "Filler stock type."
       "SpaceReservation", "Space Reservation stock type."
    """
    Stock = 0  # PathStockBuilderAssignStockTypeMemberType
    Overstock = 1  # PathStockBuilderAssignStockTypeMemberType
    Filler = 2  # PathStockBuilderAssignStockTypeMemberType
    SpaceReservation = 3  # PathStockBuilderAssignStockTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PathStockBuilder(NXOpen.Builder):
    """
    Assigns stocks to segments based of users critiera and the current
    default stock.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreatePathStockBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class AssignMethod():
        """
        Determines how to choose which stock to assign. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No Stock."
           "DefaultStock", "Default Stock."
           "FromStartObject", "Finds a stock based off of the default stock and the object selected by the user."
           "DiameterValue", "User specified diameter, creates round space reservation stock."
           "Rectangular", "User specified values, creates rectangular space reservation stock."
           "FlatOval", "User specified values, creates flat_oval space reservation stock."
           "SpecifiedStock", "Stock selected from Specify Item dialog"
           "FromParts", "Find stocks from the part table of parts selected by the user."
        """
        NotSet = 0  # PathStockBuilderAssignMethodMemberType
        DefaultStock = 1  # PathStockBuilderAssignMethodMemberType
        FromStartObject = 2  # PathStockBuilderAssignMethodMemberType
        DiameterValue = 3  # PathStockBuilderAssignMethodMemberType
        Rectangular = 4  # PathStockBuilderAssignMethodMemberType
        FlatOval = 5  # PathStockBuilderAssignMethodMemberType
        SpecifiedStock = 6  # PathStockBuilderAssignMethodMemberType
        FromParts = 7  # PathStockBuilderAssignMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AssignStockType():
        """
        Determines the type of stock being assigned. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Stock", "Default stock type."
           "Overstock", "Overstock stock type."
           "Filler", "Filler stock type."
           "SpaceReservation", "Space Reservation stock type."
        """
        Stock = 0  # PathStockBuilderAssignStockTypeMemberType
        Overstock = 1  # PathStockBuilderAssignStockTypeMemberType
        Filler = 2  # PathStockBuilderAssignStockTypeMemberType
        SpaceReservation = 3  # PathStockBuilderAssignStockTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AssignStock(self, segments: 'list[ISegment]') -> None:
        """
        Assigns stock using the method defined by this stock builder object.  
        
        Signature ``AssignStock(segments)`` 
        
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateExistingStock(self, existingStock: Stock) -> None:
        """
        Updates an existing routing stock with settings stored in the builder.  
        
        Signature ``UpdateExistingStock(existingStock)`` 
        
        :param existingStock:  Existing Stock  
        :type existingStock: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSpecifiedStockWithAppliedCharx(self) -> tuple:
        """
        Returns the specified stock and applied characteristics to use for the 
        :py:class:`Routing.PathStockBuilderAssignMethod.SpecifiedStock <Routing.PathStockBuilderAssignMethod>` 
        method of stock assignment.  
        
        Signature ``GetSpecifiedStockWithAppliedCharx()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (stockPart, appliedCharx). stockPart is a :py:class:`NXOpen.Routing.CharacteristicList`.   Characteristic list used to find the appropriate                                                                 :py:class:`Routing.StockData` for building the stock.                                                                  See :py:meth:`Routing.StockDataCollection.CreateStockData`. appliedCharx is a :py:class:`NXOpen.Routing.CharacteristicList`.   Applied characteristics for the specified stock. 
        
        .. versionadded:: NX6.0.4
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSpecifiedStock(self) -> CharacteristicList:
        """
        Returns the specified stock to use for the 
        :py:class:`Routing.PathStockBuilderAssignMethod.SpecifiedStock <Routing.PathStockBuilderAssignMethod>` 
        method of stock assignment.  
        
        Signature ``GetSpecifiedStock()`` 
        
        :returns:  Characteristic list used to find the appropriate 
        :py:class:`Routing.StockData` for building the stock.  
        See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetSpecifiedStock(self, stockPart: CharacteristicList) -> None:
        """
        Sets the specified stock to use for the 
        :py:class:`Routing.PathStockBuilderAssignMethod.SpecifiedStock <Routing.PathStockBuilderAssignMethod>` 
        method of stock assignment. 
        
        Signature ``SetSpecifiedStock(stockPart)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate                                                                 :py:class:`Routing.StockData` for building the stock.                                                                See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetSpecifiedStock(self, stockPart: CharacteristicList, appliedCharx: CharacteristicList) -> None:
        """
        Sets the specified stock and applied characteristics to use for the 
        :py:class:`Routing.PathStockBuilderAssignMethod.SpecifiedStock <Routing.PathStockBuilderAssignMethod>` 
        method of stock assignment. 
        
        Signature ``SetSpecifiedStock(stockPart, appliedCharx)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate                                                                 :py:class:`Routing.StockData` for building the stock.                                                                See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param appliedCharx:  Applied characteristics for the specified stock.  
        :type appliedCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX6.0.4
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetParts(self) -> 'list[NXOpen.Assemblies.Component]':
        """
        Get the parts to use for the  :py:class:`
        Routing.PathStockBuilderAssignMethod.FromParts <
        Routing.PathStockBuilderAssignMethod>` 
        method of stock assignment  
        
        Signature ``GetParts()`` 
        
        :returns:  Part table parts to get
        stock characteristics.  
        
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetParts(self, parts: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Set the parts to use for the  :py:class:`
        Routing.PathStockBuilderAssignMethod.FromParts <
        Routing.PathStockBuilderAssignMethod>` 
        method of stock assignment 
        
        Signature ``SetParts(parts)`` 
        
        :param parts:  Part table parts to get                                                                                                   stock characteristics.  
        
        :type parts: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SettingsChanged(self) -> None:
        """
        Notify the builder that the Routing preferred stock has been modified.  
        
        This updates
        the builder so that it now uses the new preferred stock do determine which stock to
        assign.  
        
        Signature ``SettingsChanged()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRectangularDimensions(self) -> tuple:
        """
        Get the rectangular height and width value to use for the rectangular space reservation assignment 
        
        Signature ``GetRectangularDimensions()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (height, width). height is a float. width is a float. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRectangularDimensions(self, height: float, width: float) -> None:
        """
        Set the rectangular height and width value for the rectangular space reservation assignment 
        
        Signature ``SetRectangularDimensions(height, width)`` 
        
        :param height: 
        :type height: float 
        :param width: 
        :type width: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetFlatOvalDimensions(self) -> tuple:
        """
        Get the FlatOval height and width value to use for the FlatOval space reservation assignment 
        
        Signature ``GetFlatOvalDimensions()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (height, width). height is a float. width is a float. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFlatOvalDimensions(self, height: float, width: float) -> None:
        """
        Set the FlatOval height and width value for the FlatOval space reservation assignment 
        
        Signature ``SetFlatOvalDimensions(height, width)`` 
        
        :param height: 
        :type height: float 
        :param width: 
        :type width: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSelectedStock(self, stock: Stock) -> None:
        """
        Set the selected stock 
        
        Signature ``SetSelectedStock(stock)`` 
        
        :param stock:  Selected Stock  
        :type stock: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsRotationOverriden(self) -> bool:
        """
        Get the rotation value overwritten flag  
        
        Signature ``IsRotationOverriden()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def OverrideRotation(self, overrideRotation: bool) -> None:
        """
        Set the rotation value overwritten flag 
        
        Signature ``OverrideRotation(overrideRotation)`` 
        
        :param overrideRotation: 
        :type overrideRotation: bool 
        
        .. versionadded:: NX9.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DefaultOrientationAlignmentEnabled(self) -> bool:
        """
        Get the flag if non-circular stock default alignment is enabled  
        
        Signature ``DefaultOrientationAlignmentEnabled()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def EnableDefaultOrientationAlignment(self, suggestRotationAngle: bool) -> None:
        """
        Set the flag if it is to enable non-circular stock default alignment or not 
        
        Signature ``EnableDefaultOrientationAlignment(suggestRotationAngle)`` 
        
        :param suggestRotationAngle: 
        :type suggestRotationAngle: bool 
        
        .. versionadded:: NX9.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    AssignStockMethod: PathStockBuilderAssignMethod = ...
    """
    Returns or sets  the method to determine which stock to assign.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssignStockMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilderAssignMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AssignStockMethod`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Routing.PathStockBuilderAssignMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    DiameterValue: float = ...
    """
    Returns or sets  the diameter value to use for the 
    :py:class:`Routing.PathStockBuilderAssignMethod.DiameterValue <Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``DiameterValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DiameterValue`` 
    
    :param val: 
    :type val: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    FlatOvalHeight: NXOpen.Expression = ...
    """
    Returns  the height value to use for the  :py:class:`
    Routing.PathStockBuilderAssignMethod.FlatOval <
    Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlatOvalHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    FlatOvalRotation: NXOpen.Expression = ...
    """
    Returns  the Width value to use for the  :py:class:`
    Routing.PathStockBuilderAssignMethod.FlatOval <
    Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment    
    
    <hr>
    
    Getter Method
    
    Signature ``FlatOvalRotation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    FlatOvalWidth: NXOpen.Expression = ...
    """
    Returns  the Width value to use for the  :py:class:`
    Routing.PathStockBuilderAssignMethod.FlatOval <
    Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment    
    
    <hr>
    
    Getter Method
    
    Signature ``FlatOvalWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RectangularHeight: NXOpen.Expression = ...
    """
    Returns  the height value to use for the  :py:class:`
    Routing.PathStockBuilderAssignMethod.Rectangular <
    Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RectangularRotation: NXOpen.Expression = ...
    """
    Returns  the Width value to use for the  :py:class:`
    Routing.PathStockBuilderAssignMethod.Rectangular <
    Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment    
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularRotation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RectangularWidth: NXOpen.Expression = ...
    """
    Returns  the Width value to use for the  :py:class:`
    Routing.PathStockBuilderAssignMethod.Rectangular <
    Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment    
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StartObject: NXOpen.NXObject = ...
    """
    Returns or sets  the start object to use for the 
    :py:class:`Routing.PathStockBuilderAssignMethod.FromStartObject <Routing.PathStockBuilderAssignMethod>` 
    method of stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StartObject`` 
    
    :param startObject: 
    :type startObject: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockType: PathStockBuilderAssignStockType = ...
    """
    Returns or sets  the type of stock being assigned.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilderAssignStockType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockType`` 
    
    :param stockType: 
    :type stockType: :py:class:`NXOpen.Routing.PathStockBuilderAssignStockType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: PathStockBuilder = ...  # unknown typename


class StockOffsetPointBuilderPointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockOffsetPointBuilderPointType():
    """
    Point Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "Normal smart point."
       "StockOffset", "Routing stock offset point."
    """
    Normal = 0  # StockOffsetPointBuilderPointTypeMemberType
    StockOffset = 1  # StockOffsetPointBuilderPointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockOffsetPointBuilder(NXOpen.Builder):
    """
    Applies Assemblies Constraints to a selected :py:class:`NXOpen.Point` or 
    :py:class:`NXOpen.Routing.ControlPoint` to mimic the update/move behavior of
    the input smart :py:class:`NXOpen.Point`.  
    
    The smart point may be a Routing
    stock offset point (see :py:meth:`NXOpen.PointCollection.CreateStockOffsetPoint`) or
    any of the points created using the :py:class:`NXOpen.PointCollection` class.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockOffsetPointBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class PointType():
        """
        Point Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "Normal smart point."
           "StockOffset", "Routing stock offset point."
        """
        Normal = 0  # StockOffsetPointBuilderPointTypeMemberType
        StockOffset = 1  # StockOffsetPointBuilderPointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetPointData(self) -> tuple:
        """
        Gets the stock offset data from the currently selected point or routing
        control point.  
        
        Signature ``GetPointData()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (pointType, basePoint, offsetDir, offsetExpression). pointType is a :py:class:`NXOpen.Routing.StockOffsetPointBuilderPointType`.   Type of point currently defined. basePoint is a :py:class:`NXOpen.Point`.   Base point for stock offset points, None for:py:class:`Routing.StockOffsetPointBuilderPointType.Normal <Routing.StockOffsetPointBuilderPointType>` points. offsetDir is a :py:class:`NXOpen.Direction`.   Offset direction for stock offset points, None for:py:class:`Routing.StockOffsetPointBuilderPointType.Normal <Routing.StockOffsetPointBuilderPointType>` points. offsetExpression is a str.   Offset expression for stock offset points, None for:py:class:`Routing.StockOffsetPointBuilderPointType.Normal <Routing.StockOffsetPointBuilderPointType>` points. 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStockOffsetPointObject(self) -> NXOpen.TaggedObject:
        """
        Gets the object on which a Stock Offset Point was based.  
        
        Returns None if the point is not a Stock Offset Point or if the 
        Stock Offset Point was not offset from another object.  
        
        Signature ``GetStockOffsetPointObject()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    ConstraintPoint: NXOpen.Point = ...
    """
    Returns or sets  the point that defines the location of the selected point.  
    
    On commit, this
    point is used for determining the set of Assemblies Constraints to apply to the
    selected point (or Routing control point).  The input point itself is not used
    after the commit method.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ConstraintPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    PointSelection: NXOpen.SelectNXObject = ...
    """
    Returns  the point selection.  
    
    Stores the point or Routing control point selected by the user. 
    
    <hr>
    
    Getter Method
    
    Signature ``PointSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: StockOffsetPointBuilder = ...  # unknown typename


class StockBuilderStockStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockBuilderStockStyleType():
    """
    The stock display style
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Centerline", "Centreline"
       "SimpleSolid", "Simple Solid"
       "DetailedSolid", "Detailed Solid"
    """
    Centerline = 0  # StockBuilderStockStyleTypeMemberType
    SimpleSolid = 1  # StockBuilderStockStyleTypeMemberType
    DetailedSolid = 2  # StockBuilderStockStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockBuilder(NXOpen.Builder):
    """
    Builder for creating/editing stocks.  
    
    Create Stock: Takes a set of segments and assign the selected the stock
    to the segments. The stock style and orientation settings are optional.
    Edit Stock: Takes in the selected stock to edit as input and redefines
    the stock with the new settings.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockBuilder`
    
    Default values.
    
    ====================  ============
    Property              Value
    ====================  ============
    FlipStock             0 
    --------------------  ------------
    RemoveExistingStock   1 
    --------------------  ------------
    RotationValue.Value   0 
    --------------------  ------------
    StockStyle            SimpleSolid 
    --------------------  ------------
    SwapProfile           0 
    ====================  ============
    
    .. versionadded:: NX6.0.0
    """
    
    class StockStyleType():
        """
        The stock display style
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Centerline", "Centreline"
           "SimpleSolid", "Simple Solid"
           "DetailedSolid", "Detailed Solid"
        """
        Centerline = 0  # StockBuilderStockStyleTypeMemberType
        SimpleSolid = 1  # StockBuilderStockStyleTypeMemberType
        DetailedSolid = 2  # StockBuilderStockStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FlipStock: bool = ...
    """
    Returns or sets  the stock flip flag 
    
    <hr>
    
    Getter Method
    
    Signature ``FlipStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FlipStock`` 
    
    :param flipStock: 
    :type flipStock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    GridTopologyEligibilityFlag: bool = ...
    """
    Returns or sets  the grid topology eligibility flag.  
    
    When this flag is set, a non circular stock will produce bend faces in the bend regions instead of merged faces.
    This flag has no effect on circular stock. 
    
    <hr>
    
    Getter Method
    
    Signature ``GridTopologyEligibilityFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``GridTopologyEligibilityFlag`` 
    
    :param gridOptionEligible: 
    :type gridOptionEligible: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RemoveExistingStock: bool = ...
    """
    Returns or sets  the remove existing stock flag.  
    
    If set to TRUE the existing stock
    on the path will be removed when assigning new stock.
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveExistingStock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveExistingStock`` 
    
    :param removeStock: 
    :type removeStock: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    RotationValue: NXOpen.Expression = ...
    """
    Returns  the rotation value.  
    
    Determines the rotation angle of the stock. 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SegmentCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector that collects segments to assign stock to.  
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockAnchor: str = ...
    """
    Returns or sets  the :py:class:`NXOpen.Routing.Anchor` name associated with the stock.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockAnchor`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockAnchor`` 
    
    :param anchorName: 
    :type anchorName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockSettings: PathStockBuilder = ...
    """
    Returns or sets  the stock settings for stock assignment.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockSettings`` 
    
    :param stockBuilder: 
    :type stockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    StockStyle: StockBuilderStockStyleType = ...
    """
    Returns or sets  the stock style of the stock to assign 
    
    <hr>
    
    Getter Method
    
    Signature ``StockStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockBuilderStockStyleType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockStyle`` 
    
    :param stockStyle: 
    :type stockStyle: :py:class:`NXOpen.Routing.StockBuilderStockStyleType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SwapProfile: bool = ...
    """
    Returns or sets  the profile swap flag.  
    
    Determines whether the profile should be
    at the path start or end.
    
    <hr>
    
    Getter Method
    
    Signature ``SwapProfile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SwapProfile`` 
    
    :param swapProfile: 
    :type swapProfile: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: StockBuilder = ...  # unknown typename


class DesignRuleManager():
    """
    Represents :py:class:`NXOpen.Routing.DesignRuleManager` object   
    
    Creator not available in KF.
    
    .. versionadded:: NX5.0.0
    """
    
    def LogConcurrent(self, objectToLog: NXOpen.NXObject) -> None:
        """
        Add an object to be checked during the next concurrent design rule check 
        
        Signature ``LogConcurrent(objectToLog)`` 
        
        :param objectToLog: 
        :type objectToLog: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def UnlogConcurrent(self, objectToUnlog: NXOpen.NXObject) -> None:
        """
        Remove an object from the list of objects to be checked at the next design rule check.  
        
        Signature ``UnlogConcurrent(objectToUnlog)`` 
        
        :param objectToUnlog: 
        :type objectToUnlog: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetConcurrentObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Inquire the list of objects to be checked at the next concurrent check.  
        
        Signature ``GetConcurrentObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ExpandConcurrent(self) -> None:
        """
        Expand the current list of objects on the concurrent check list to include 'dependents' 
        
        Signature ``ExpandConcurrent()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ClearConcurrent(self) -> None:
        """
        Remove all objects from the concurrent check list 
        
        Signature ``ClearConcurrent()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class PortConnectionCollectionPortsStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PortConnectionCollectionPortsStatus():
    """
    Option to check if two ports can be connected by creating
    a :py:class:`NXOpen.Routing.PortConnection` object. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CanConnect", "The Ports can be connected using Port Connection object."
       "CannotConnect", "The Ports cannot be connected using Port Connection object."
    """
    CanConnect = 0  # PortConnectionCollectionPortsStatusMemberType
    CannotConnect = 1  # PortConnectionCollectionPortsStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PortConnectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.PortConnection` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    class PortsStatus():
        """
        Option to check if two ports can be connected by creating
        a :py:class:`NXOpen.Routing.PortConnection` object. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CanConnect", "The Ports can be connected using Port Connection object."
           "CannotConnect", "The Ports cannot be connected using Port Connection object."
        """
        CanConnect = 0  # PortConnectionCollectionPortsStatusMemberType
        CannotConnect = 1  # PortConnectionCollectionPortsStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePortConnection(self, port1: Port, port2: Port) -> PortConnection:
        """
        Creates a :py:class:`NXOpen.Routing.PortConnection` object.  
        
        Signature ``CreatePortConnection(port1, port2)`` 
        
        :param port1:  first Port to be connected by the Port Connection object  
        :type port1: :py:class:`NXOpen.Routing.Port` 
        :param port2:  second Port to be connected by the Port Connection object  
        :type port2: :py:class:`NXOpen.Routing.Port` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PortConnection` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CanPortsConnect(self, port1: Port, port2: Port) -> PortConnectionCollectionPortsStatus:
        """
        Determines if the two ports can be connected using a :py:class:`NXOpen.Routing.PortConnection` object.  
        
        Signature ``CanPortsConnect(port1, port2)`` 
        
        :param port1:  first Port to be connected by the Port Connection object  
        :type port1: :py:class:`NXOpen.Routing.Port` 
        :param port2:  second Port to be connected by the Port Connection object  
        :type port2: :py:class:`NXOpen.Routing.Port` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PortConnectionCollectionPortsStatus` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetConnectionFromPort(self, port: Port) -> PortConnection:
        """
        Returns the :py:class:`NXOpen.Routing.PortConnection` the given part participates in, if any.  
        
        Signature ``GetConnectionFromPort(port)`` 
        
        :param port: 
        :type port: :py:class:`NXOpen.Routing.Port` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PortConnection` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class InfoObjectsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.InfoObjectsBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateInfoObjectsBuilder`
    
    .. versionadded:: NX6.0.0
    """
    ObjectCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: InfoObjectsBuilder = ...  # unknown typename


class EccentricMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Eccentric():
    """
    Option to query if an existing :py:class:`NXOpen.Routing.ISegment`
    is a eccentric segment. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotEccentricSeg", "Is not a eccentric segment"
       "EccentricSeg", "Is a eccentric segment"
    """
    NotEccentricSeg = 0  # EccentricMemberType
    EccentricSeg = 1  # EccentricMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockStyle():
    """
    Available styles of :py:class:`NXOpen.Routing.CrossSection` for a given 
    :py:class:`NXOpen.Routing.StockData`.  A  :py:class:`NXOpen.Routing.StockData` may
    have at most one :py:class:`NXOpen.Routing.CrossSection` of each type.  
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No profile."
       "Simple", "Simple profile."
       "Detailed", "Detailed profile."
    """
    NotSet = 0  # StockStyleMemberType
    Simple = 1  # StockStyleMemberType
    Detailed = 2  # StockStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ISegmentCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`Routing.ISegment` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.SegmentManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class StockDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockDataType():
    """
    Whether the :py:class:`NXOpen.Routing.StockData` was generated by the
    bundling algorithm used for routing wires. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotBundled", "Not generated (or used ) by bundling."
       "Bundled", "Generated (or used ) by bundling."
    """
    NotBundled = 0  # StockDataTypeMemberType
    Bundled = 1  # StockDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CreateFabricationBuilder(NXOpen.Builder):
    """
    Builder class to fabricate subassembly from standard parts, path segments, stock, and other routing objects within the current routing assembly   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateFabricationBuilder`
    
    .. versionadded:: NX8.0.0
    """
    RouteSelectionStock: RouteObjectCollector = ...
    """
    Returns  the route selection stock for selecting routing objects
    
    <hr>
    
    Getter Method
    
    Signature ``RouteSelectionStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: CreateFabricationBuilder = ...  # unknown typename


class ElbowSnapSettings(NXOpen.Builder):
    """
    Helper object used the by :py:class:`NXOpen.Routing.LinearPathBuilder` builder.  
    
    Determines whether or not elbow snapping should occur in the "Create Linear Path"
    UI, and if so, what the angle tolerance should be.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateElbowSnapSettings`
    
    Default values.
    
    ==================  =====
    Property            Value
    ==================  =====
    AngleTolerance      5.0 
    ------------------  -----
    SnapToElbowAngles   True 
    ==================  =====
    
    .. versionadded:: NX5.0.0
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the tolerance within which to search for elbow angles.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SnapToElbowAngles: bool = ...
    """
    Returns or sets  whether or not to snap control points to the nearest valid elbow angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``SnapToElbowAngles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SnapToElbowAngles`` 
    
    :param doSnap: 
    :type doSnap: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: ElbowSnapSettings = ...  # unknown typename


class MiteredBendCornerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.MiteredBendCorner` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX9.0.2
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCorner(self, rcp: ControlPoint, bendRadius: float, numberOfMiters: int) -> MiteredBendCorner:
        """
        Create a mitered bend corner object at a Control Point.  
        
        Signature ``CreateCorner(rcp, bendRadius, numberOfMiters)`` 
        
        :param rcp: 
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendRadius:  Radius of bend corner arc,                                                                    Must be greater than zero.  
        :type bendRadius: float 
        :param numberOfMiters: 
        :type numberOfMiters: int 
        :returns:  The new mitered bend corner.  
        :rtype: :py:class:`NXOpen.Routing.MiteredBendCorner` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendAssociatedToSegment(self, segment: ISegment) -> BendCorner:
        """
        Enquire the Mitered Bend Corner that this segment represents.  
        
        (None can be returned, indicating that this segment does not
        represent a Bend Corner.)  
        
        Signature ``GetBendAssociatedToSegment(segment)`` 
        
        :param segment:  Segment being queried for the                                           Bend Corner it represents.  
        :type segment: :py:class:`NXOpen.Routing.ISegment` 
        :returns:  Bend Corner that segment represents 
        (None can be returned,indicating that 
        segment does not represent a Bend Corner).  
        :rtype: :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class MultiPortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.MultiPort` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float) -> MultiPort:
        """
        Creates a MultiPort with a rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateMultiPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the multi port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d) -> MultiPort:
        """
        Creates a MultiPort with no rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateMultiPort(origin, alignmentVector)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point) -> MultiPort:
        """
        Creates a MultiPort with a rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateMultiPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the multi port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Multi Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point) -> MultiPort:
        """
        Creates a MultiPort with no rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateMultiPort(origin, alignmentVector, point)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Multi Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis) -> MultiPort:
        """
        Creates a MultiPort with a rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateMultiPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the multi port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Multi Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis) -> MultiPort:
        """
        Creates a MultiPort with no rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateMultiPort(origin, alignmentVector, derivationObject)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Multi Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> MultiPort:
        """
        Creates a MultiPort with a rotation vector at an absolute location  
        
        Signature ``CreateMultiPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, allowMultipleConnections)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the multi port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, allowMultipleConnections: bool) -> MultiPort:
        """
        Creates a MultiPort with no rotation vector at an absolute location  
        
        Signature ``CreateMultiPort(origin, alignmentVector, allowMultipleConnections)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point, allowMultipleConnections: bool) -> MultiPort:
        """
        Creates a MultiPort with a rotation vector at a point  
        
        Signature ``CreateMultiPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the multi port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Multi Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point, allowMultipleConnections: bool) -> MultiPort:
        """
        Creates a MultiPort with no rotation vector at a point  
        
        Signature ``CreateMultiPort(origin, alignmentVector, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Multi Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis, allowMultipleConnections: bool) -> MultiPort:
        """
        Creates a MultiPort with a rotation vector on an axis  
        
        Signature ``CreateMultiPort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis, allowMultipleConnections)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the multi port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Multi Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMultiPort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis, allowMultipleConnections: bool) -> MultiPort:
        """
        Creates a MultiPort with no rotation vector on an axis  
        
        Signature ``CreateMultiPort(origin, alignmentVector, derivationObject, allowMultipleConnections)`` 
        
        :param origin:  Origin of the multi port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the multi port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Multi Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fitting port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MultiPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class DesignRuleOverride(NXOpen.NXObject):
    """
    Represents Routing DesignRuleOverride object   
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    Reason: str = ...
    """
    Returns or sets  the reason of the design rule override is returned 
    
    <hr>
    
    Getter Method
    
    Signature ``Reason`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Reason`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    TimeStamp: int = ...
    """
    Returns or sets  the time stamp of the design rule override is returned 
    
    <hr>
    
    Getter Method
    
    Signature ``TimeStamp`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``TimeStamp`` 
    
    :param timeStamp: 
    :type timeStamp: int 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    User: str = ...
    """
    Returns or sets  the user of the design rule override is returned 
    
    <hr>
    
    Getter Method
    
    Signature ``User`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``User`` 
    
    :param user: 
    :type user: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DesignRuleOverride = ...  # unknown typename


class RouteSweptTwistBuilder(NXOpen.Builder):
    """
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateRouteSweptTwistBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def CreateSpinePoint(self) -> NXOpen.GeometricUtilities.OnPathDimWithValueBuilder:
        """
        Creates a new spine point  
        
        Signature ``CreateSpinePoint()`` 
        
        :returns:  OnPathDimWithValueBuilder Object  
        :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimWithValueBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def CreateSpine(self) -> None:
        """
        Creates a new spine 
        
        Signature ``CreateSpine()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def AskExistingTwistData(self) -> tuple:
        """
        The twist data i.  
        
        e locations and angles 
        
        Signature ``AskExistingTwistData()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (locations, angles). locations is a list of float.   Number of locations angles is a list of float.   Number of angles 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    Spine: NXOpen.Curve = ...
    """
    Returns  the spine 
    
    <hr>
    
    Getter Method
    
    Signature ``Spine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Stock: NXOpen.SelectNXObject = ...
    """
    Returns  the stock 
    
    <hr>
    
    Getter Method
    
    Signature ``Stock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    TwistPoint: NXOpen.Point = ...
    """
    Returns or sets  the twist point 
    
    <hr>
    
    Getter Method
    
    Signature ``TwistPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``TwistPoint`` 
    
    :param twistPoint: 
    :type twistPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    TwistPointList: NXOpen.TaggedObjectList = ...
    """
    Returns  the twist point list 
    
    <hr>
    
    Getter Method
    
    Signature ``TwistPointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: RouteSweptTwistBuilder = ...  # unknown typename


class CopeCorner(Corner):
    """
    The cope corner is a corner that trims stocks at a junction.  
    
    Each stock in the cope 
    trims in successive order to all of the previous stocks.  The first stock in the
    cope is not trimmed. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.CopeCornerCollection.AssignCopeCorner`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetFeatures(self) -> 'list[NXOpen.Features.Feature]':
        """
        Returns the list of ROUTE_COPE features created to trim stocks.  
        
        Signature ``GetFeatures()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def GetStockCopeFeature(self, stock: Stock) -> NXOpen.Features.Feature:
        """
        Get ROUTE_COPE feature applied the given stock at the cope corner  
        
        Signature ``GetStockCopeFeature(stock)`` 
        
        :param stock: 
        :type stock: :py:class:`NXOpen.Routing.Stock` 
        :returns:  Cope feature at the given stock.  
        :rtype: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def SetCopeStocks(self, copeStocks: 'list[Stock]') -> None:
        """
        Set the ordered list of stocks to cope.  
        
        The stocks must follow
        segments which are attached the control point of this cope.  
        
        Signature ``SetCopeStocks(copeStocks)`` 
        
        :param copeStocks: 
        :type copeStocks: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def GetCopeStocks(self) -> 'list[Stock]':
        """
        Returns the ordered list of stocks coped at this corner.  
        
        Signature ``GetCopeStocks()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    Null: CopeCorner = ...  # unknown typename


class RunItemsBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[RunItemsBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: RunItemsBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: RunItemsBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> RunItemsBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: RunItemsBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: RunItemsBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[RunItemsBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[RunItemsBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: RunItemsBuilder, object2: RunItemsBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: RunItemsBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Routing.RunItemsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: RunItemsBuilderList = ...  # unknown typename


class OverstockApplicationCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.OverstockApplication` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', overstockPart: CharacteristicList, stockWrapType: WrapApplicationType, wrapValue: NXOpen.Expression) -> OverstockApplication:
        """
        Creates the :py:class:`RoutingMethod.EntireSegments <RoutingMethod>`
        overstock. Specify the type of overstock to create (for example fixed cross section,
        wrapped, sleeved, or flagged) in the overstock part characteristic list using
        the "OVERSTOCK_TYPE" characteristic. Spot wrapping is not allowed for entire segments.  
        
        Signature ``CreateOverstockApplication(startControlPoint, segments, stocks, overstockPart, stockWrapType, wrapValue)`` 
        
        :param startControlPoint:  Control Point at the                                                                                                                       start of the set of                                                                                                                       segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover with                                                                                                                   overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param stockWrapType: 
        :type stockWrapType: :py:class:`NXOpen.Routing.WrapApplicationType` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    @typing.overload
    def CreateOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', startOffset: NXOpen.Expression, endOffset: NXOpen.Expression, pieceLength: NXOpen.Expression, gap: NXOpen.Expression, numberOfPieces: NXOpen.Expression, startPoint: NXOpen.Point, overstockPart: CharacteristicList, stockWrapType: WrapApplicationType, wrapValue: NXOpen.Expression) -> OverstockApplication:
        """
        Creates an :py:class:`NXOpen.Routing.OverstockApplication` using the Interval method of application.
        Specify the type of overstock to create (for example fixed cross section,
        wrapped, sleeved, or flagged) in the overstock part characteristic list using
        the "OVERSTOCK_TYPE" characteristic.  
        
        Signature ``CreateOverstockApplication(startControlPoint, segments, stocks, startOffset, endOffset, pieceLength, gap, numberOfPieces, startPoint, overstockPart, stockWrapType, wrapValue)`` 
        
        :param startControlPoint:  Control Point at the start                                                                                                                      of the set of segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover with overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param startOffset: 
        :type startOffset: :py:class:`NXOpen.Expression` 
        :param endOffset: 
        :type endOffset: :py:class:`NXOpen.Expression` 
        :param pieceLength: 
        :type pieceLength: :py:class:`NXOpen.Expression` 
        :param gap: 
        :type gap: :py:class:`NXOpen.Expression` 
        :param numberOfPieces: 
        :type numberOfPieces: :py:class:`NXOpen.Expression` 
        :param startPoint:  Point at the start offset                                                                                                                    location along the set of                                                                                                                    segments  
        :type startPoint: :py:class:`NXOpen.Point` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param stockWrapType: 
        :type stockWrapType: :py:class:`NXOpen.Routing.WrapApplicationType` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    @typing.overload
    def CreateOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', startPoint: NXOpen.Point, endPoint: NXOpen.Point, overstockPart: CharacteristicList, stockType: WrapApplicationType, wrapValue: NXOpen.Expression) -> OverstockApplication:
        """
        Creates an :py:class:`NXOpen.Routing.OverstockApplication` using the
        Point to Point method of application. Specify the type of overstock to create (for example fixed cross section,
        wrapped, sleeved, or flagged) in the overstock part characteristic list using
        the "OVERSTOCK_TYPE" characteristic.   
        
        Signature ``CreateOverstockApplication(startControlPoint, segments, stocks, startPoint, endPoint, overstockPart, stockType, wrapValue)`` 
        
        :param startControlPoint:  Control Point at the                                                                                                           start of the set                                                                                                           of segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover                                                                                                        with overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param startPoint:  point at the start of the piece                                                                                             of overstock  
        :type startPoint: :py:class:`NXOpen.Point` 
        :param endPoint:  point at the end of the piece                                                                                             of overstock  
        :type endPoint: :py:class:`NXOpen.Point` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param stockType: 
        :type stockType: :py:class:`NXOpen.Routing.WrapApplicationType` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    @typing.overload
    def CreateOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', definingPoint: NXOpen.Point, definingDirection: PointDefinition, pieceLength: NXOpen.Expression, overstockPart: CharacteristicList, stockWrapType: WrapApplicationType, wrapValue: NXOpen.Expression) -> OverstockApplication:
        """
        Creates the :py:class:`RoutingMethod.PointAndLength <RoutingMethod>`
        overstock by the Point and Length method. Specify the type of overstock to create (for example fixed cross section,
        wrapped, sleeved, or flagged) in the overstock part characteristic list using
        the "OVERSTOCK_TYPE" characteristic.  
        
        Signature ``CreateOverstockApplication(startControlPoint, segments, stocks, definingPoint, definingDirection, pieceLength, overstockPart, stockWrapType, wrapValue)`` 
        
        :param startControlPoint:  Control Point                                                                                                                       at the start of                                                                                                                       the set of                                                                                                                       segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover                                                                                                                   with overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param definingPoint: 
        :type definingPoint: :py:class:`NXOpen.Point` 
        :param definingDirection:  location of the defining point.  
        :type definingDirection: :py:class:`NXOpen.Routing.PointDefinition` 
        :param pieceLength: 
        :type pieceLength: :py:class:`NXOpen.Expression` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param stockWrapType: 
        :type stockWrapType: :py:class:`NXOpen.Routing.WrapApplicationType` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    @typing.overload
    def ConvertOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', overstockPart: CharacteristicList, reqOptCharxList: CharacteristicList, wrapValue: NXOpen.Expression, overstocks: 'list[Overstock]') -> OverstockApplication:
        """
        Converts an existing :py:class:`NXOpen.Routing.Overstock` to
        :py:class:`RoutingMethod.EntireSegments <RoutingMethod>` overstock.
        
        Signature ``ConvertOverstockApplication(startControlPoint, segments, stocks, overstockPart, reqOptCharxList, wrapValue, overstocks)`` 
        
        :param startControlPoint:  Control Point at the                                                                                                             start of the set of                                                                                                             segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover with                                                                                                         overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param reqOptCharxList:  List of optional and required characteristics to be                                                                                                                     applied on the overstock.  
        :type reqOptCharxList: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :param overstocks: 
        :type overstocks: list of :py:class:`NXOpen.Routing.Overstock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    @typing.overload
    def ConvertOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', startOffset: NXOpen.Expression, endOffset: NXOpen.Expression, pieceLength: NXOpen.Expression, gap: NXOpen.Expression, numberOfPieces: NXOpen.Expression, startPoint: NXOpen.Point, overstockPart: CharacteristicList, reqOptCharxList: CharacteristicList, wrapValue: NXOpen.Expression, overstocks: 'list[Overstock]') -> OverstockApplication:
        """
        Converts an existing :py:class:`NXOpen.Routing.Overstock` to
        :py:class:`RoutingMethod.Interval <RoutingMethod>` overstock.
        
        Signature ``ConvertOverstockApplication(startControlPoint, segments, stocks, startOffset, endOffset, pieceLength, gap, numberOfPieces, startPoint, overstockPart, reqOptCharxList, wrapValue, overstocks)`` 
        
        :param startControlPoint:  Control Point at the start                                                                                                            of the set of segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover with overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param startOffset: 
        :type startOffset: :py:class:`NXOpen.Expression` 
        :param endOffset: 
        :type endOffset: :py:class:`NXOpen.Expression` 
        :param pieceLength: 
        :type pieceLength: :py:class:`NXOpen.Expression` 
        :param gap: 
        :type gap: :py:class:`NXOpen.Expression` 
        :param numberOfPieces: 
        :type numberOfPieces: :py:class:`NXOpen.Expression` 
        :param startPoint:  Point at the start offset                                                                                                          location along the set of                                                                                                          segments  
        :type startPoint: :py:class:`NXOpen.Point` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param reqOptCharxList:  List of optional and required characteristics to be                                                                                                                     applied on the overstock.  
        :type reqOptCharxList: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :param overstocks: 
        :type overstocks: list of :py:class:`NXOpen.Routing.Overstock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    @typing.overload
    def ConvertOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', startPoint: NXOpen.Point, endPoint: NXOpen.Point, overstockPart: CharacteristicList, reqOptCharxList: CharacteristicList, wrapValue: NXOpen.Expression, overstocks: 'list[Overstock]') -> OverstockApplication:
        """
        Converts an existing :py:class:`NXOpen.Routing.Overstock` to
        :py:class:`RoutingMethod.PointToPoint <RoutingMethod>` overstock. 
        
        Signature ``ConvertOverstockApplication(startControlPoint, segments, stocks, startPoint, endPoint, overstockPart, reqOptCharxList, wrapValue, overstocks)`` 
        
        :param startControlPoint:  Control Point at the                                                                                                           start of the set                                                                                                           of segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover                                                                                                        with overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param startPoint:  point at the start of the piece                                                                                             of overstock  
        :type startPoint: :py:class:`NXOpen.Point` 
        :param endPoint:  point at the end of the piece                                                                                             of overstock  
        :type endPoint: :py:class:`NXOpen.Point` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param reqOptCharxList:  List of optional and required characteristics to be                                                                                                                    applied on the overstock.  
        :type reqOptCharxList: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :param overstocks: 
        :type overstocks: list of :py:class:`NXOpen.Routing.Overstock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    @typing.overload
    def ConvertOverstockApplication(self, startControlPoint: ControlPoint, segments: 'list[ISegment]', stocks: 'list[Stock]', definingPoint: NXOpen.Point, definingDirection: PointDefinition, pieceLength: NXOpen.Expression, overstockPart: CharacteristicList, reqOptCharxList: CharacteristicList, wrapValue: NXOpen.Expression, overstocks: 'list[Overstock]') -> OverstockApplication:
        """
        Converts an existing :py:class:`NXOpen.Routing.Overstock` to
        :py:class:`RoutingMethod.PointAndLength <RoutingMethod>` overstock. 
        
        Signature ``ConvertOverstockApplication(startControlPoint, segments, stocks, definingPoint, definingDirection, pieceLength, overstockPart, reqOptCharxList, wrapValue, overstocks)`` 
        
        :param startControlPoint:  Control Point                                                                                                                   at the start of                                                                                                                   the set of                                                                                                                   segments  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  Segments to cover                                                                                                               with overstock  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stocks:  Stocks to cover with overstock  
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param definingPoint: 
        :type definingPoint: :py:class:`NXOpen.Point` 
        :param definingDirection:  location of the defining point.  
        :type definingDirection: :py:class:`NXOpen.Routing.PointDefinition` 
        :param pieceLength: 
        :type pieceLength: :py:class:`NXOpen.Expression` 
        :param overstockPart: 
        :type overstockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param reqOptCharxList:  List of optional and required characteristics to be                                                                                                                           applied on the overstock.  
        :type reqOptCharxList: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param wrapValue: 
        :type wrapValue: :py:class:`NXOpen.Expression` 
        :param overstocks: 
        :type overstocks: list of :py:class:`NXOpen.Routing.Overstock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockApplication` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID")
        """
        ...
    
    
    def ReplaceOverstockApplication(self, charxMap: CharacteristicList, overstock: Overstock) -> None:
        """
        Replace current selected overstock :py:class:`NXOpen.Routing.Overstock` with 
        the chosen overstock.  
        
        It is only used by UI. 
        
        Signature ``ReplaceOverstockApplication(charxMap, overstock)`` 
        
        :param charxMap: 
        :type charxMap: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param overstock: 
        :type overstock: :py:class:`NXOpen.Routing.Overstock` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic") OR routing_advanced ("Routing Advanced")
        """
        ...
    


class DesignRuleCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.DesignRule` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class DuctReinforcementBuilderReinforcementTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DuctReinforcementBuilderReinforcementTypes():
    """
    Specifies the type of duct reinforcements. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Inside", " - "
       "Outside", " - "
    """
    NotSet = 0  # DuctReinforcementBuilderReinforcementTypesMemberType
    Inside = 1  # DuctReinforcementBuilderReinforcementTypesMemberType
    Outside = 2  # DuctReinforcementBuilderReinforcementTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DuctReinforcementBuilder(NXOpen.Builder):
    """
    Builder for creating/editing duct reinforcements.  
    
    Rules can be defined based on which the type of
    reinforcement to be placed on the input duct will be determined.
    See :py:class:`NXOpen.Routing.DuctReinforcement` for Duct Reinforcement
    class documentation.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDuctReinforcementBuilder`
    
    Default values.
    
    =========================  ========================================
    Property                   Value
    =========================  ========================================
    IntervalExpression.Value   100 (millimeters part), 4 (inches part) 
    -------------------------  ----------------------------------------
    NumberOfPairs              1 
    -------------------------  ----------------------------------------
    ReinforcementType          None 
    -------------------------  ----------------------------------------
    SpacingExpression.Value    50 (millimeters part), 2 (inches part) 
    =========================  ========================================
    
    .. versionadded:: NX8.5.2
    """
    
    class ReinforcementTypes():
        """
        Specifies the type of duct reinforcements. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Inside", " - "
           "Outside", " - "
        """
        NotSet = 0  # DuctReinforcementBuilderReinforcementTypesMemberType
        Inside = 1  # DuctReinforcementBuilderReinforcementTypesMemberType
        Outside = 2  # DuctReinforcementBuilderReinforcementTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdatePathCurve(self) -> None:
        """
        The path curve that is used to specify perpendicular reinforcement defining points.  
        
        Signature ``UpdatePathCurve()`` 
        
        .. versionadded:: NX8.5.2
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    IntervalExpression: NXOpen.Expression = ...
    """
    Returns  the distance between each set of reinforcement stocks going perpendicular to axis of the duct 
    
    <hr>
    
    Getter Method
    
    Signature ``IntervalExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    MinimumClearance: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the minimum clearance value for duct reinforcement
    It defines the minimum distance from the beginning and end of the path to place the 
    first and last piece of reinforcement stock.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    NumberOfPairs: int = ...
    """
    Returns or sets  the number of pairs of outside reinforcements going parallel to axis of the duct 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfPairs`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfPairs`` 
    
    :param numberOfPairs: 
    :type numberOfPairs: int 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    ParallelReinforcement: PathStockBuilder = ...
    """
    Returns or sets  the stock settings for parallel reinforcements 
    
    <hr>
    
    Getter Method
    
    Signature ``ParallelReinforcement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``ParallelReinforcement`` 
    
    :param parallelStockBuilder: 
    :type parallelStockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    ParentDuct: SelectStock = ...
    """
    Returns  the duct that is to be reinforced.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentDuct`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SelectStock` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    PathCurve: NXOpen.Curve = ...
    """
    Returns  the path curve that is used to specify perpendicular reinforcement defining points.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    PerpendicularReinforcement: PathStockBuilder = ...
    """
    Returns or sets  the stock settings for perpendicular reinforcements 
    
    <hr>
    
    Getter Method
    
    Signature ``PerpendicularReinforcement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``PerpendicularReinforcement`` 
    
    :param perpendicularStockBuilder: 
    :type perpendicularStockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    ReinforcementType: DuctReinforcementBuilderReinforcementTypes = ...
    """
    Returns or sets  the type of reinforcement 
    
    <hr>
    
    Getter Method
    
    Signature ``ReinforcementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DuctReinforcementBuilderReinforcementTypes` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``ReinforcementType`` 
    
    :param reinforcementType: 
    :type reinforcementType: :py:class:`NXOpen.Routing.DuctReinforcementBuilderReinforcementTypes` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    SpacingExpression: NXOpen.Expression = ...
    """
    Returns  the distance between each pair of reinforcement 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.2
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Null: DuctReinforcementBuilder = ...  # unknown typename


class AssignPathBuilder(NXOpen.Builder):
    """
    Assigns path to a broken routing run   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateAssignPathBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def AddToScopedObjectSet(self, object: NXOpen.NXObject, runItemType: RunItemType) -> None:
        """
        Add the given object to the scoped object set
        
        Signature ``AddToScopedObjectSet(object, runItemType)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.NXObject` 
        :param runItemType: 
        :type runItemType: :py:class:`NXOpen.Routing.RunItemType` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    RouteObjectCollector: RouteObjectCollector = ...
    """
    Returns  the route object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: AssignPathBuilder = ...  # unknown typename


class FormboardFrameRectangle(FormboardFrame):
    """
    Represents a Formboard Frame Rectangle.  
    
    .. versionadded:: NX5.0.0
    """
    Null: FormboardFrameRectangle = ...  # unknown typename


class MiterCornerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.MiterCorner` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def AssignCorner(self, rcp: ControlPoint) -> MiterCorner:
        """
        Assigns a new miter corner to the given control point.  
        
        Signature ``AssignCorner(rcp)`` 
        
        :param rcp:  Route control point to miter.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  The newly created Miter Corner  
        :rtype: :py:class:`NXOpen.Routing.MiterCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def GetMitersAssociatedToStock(self, stock: Stock) -> 'list[MiterCorner]':
        """
        Return miter corners referenced by the given :py:class:`NXOpen.Routing.Stock`.  
        
        Signature ``GetMitersAssociatedToStock(stock)`` 
        
        :param stock: 
        :type stock: :py:class:`NXOpen.Routing.Stock` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.MiterCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    


class SimplifyPathBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.SimplifyPathBuilder` for Simplify Path operation.  
    
    Merges collinear segments (with no follow curves) together.  Also merges segments that 
    share a follow curve.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateSimplifyPathBuilder`
    
    .. versionadded:: NX6.0.0
    """
    SegmentCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector that collects the segments to simplify.  
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: SimplifyPathBuilder = ...  # unknown typename


class AttributeMembersBuilder(NXOpen.Builder):
    """
    Creates attibutemembers builder object to add to the search criteria list used by FindByAttributesBuilder  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.FindByAttributesBuilder.AttributeMembersBuilder`
    
    .. versionadded:: NX8.5.0
    """
    AttributeName: str = ...
    """
    Returns or sets the string containing attribute title to search for
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeName`` 
    
    :param attributeName: 
    :type attributeName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    AttributeValue: str = ...
    """
    Returns or sets the string containing attribute value to search for
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeValue`` 
    
    :param attributeValue: 
    :type attributeValue: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: AttributeMembersBuilder = ...  # unknown typename


class SingleDeviceDeleteObjectResultMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SingleDeviceDeleteObjectResult():
    """
    Deletion result 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ok", "Single Device deleted successfully."
       "StillRouted", "Routed connections will not be deleted. Unroute before deleting."
       "StillAssigned", "Assigned components will not be deleted. Unassign before deleting."
       "CantDeleteUnknown", "Unknown error occurred while deleting. Please report this as an Incident Report."
    """
    Ok = 0  # SingleDeviceDeleteObjectResultMemberType
    StillRouted = 1  # SingleDeviceDeleteObjectResultMemberType
    StillAssigned = 2  # SingleDeviceDeleteObjectResultMemberType
    CantDeleteUnknown = 3  # SingleDeviceDeleteObjectResultMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SingleDevice(RouteObject):
    """
    The Routing SingleDevice corresponds to an abstract instance of :py:class:`NXOpen.Routing.ItemDefinition`.  
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    
    class DeleteObjectResult():
        """
        Deletion result 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ok", "Single Device deleted successfully."
           "StillRouted", "Routed connections will not be deleted. Unroute before deleting."
           "StillAssigned", "Assigned components will not be deleted. Unassign before deleting."
           "CantDeleteUnknown", "Unknown error occurred while deleting. Please report this as an Incident Report."
        """
        Ok = 0  # SingleDeviceDeleteObjectResultMemberType
        StillRouted = 1  # SingleDeviceDeleteObjectResultMemberType
        StillAssigned = 2  # SingleDeviceDeleteObjectResultMemberType
        CantDeleteUnknown = 3  # SingleDeviceDeleteObjectResultMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetReferencingDeviceRelshps(self) -> 'list[DeviceRelationship]':
        """
        Gets referencing device relationships.  
        
        Signature ``GetReferencingDeviceRelshps()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.DeviceRelationship` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRelatedSingleDevices(self) -> 'list[SingleDevice]':
        """
        Assuming this single device to be the relating single device in a
        :py:class:`NXOpen.Routing.DeviceRelationship`, get associated related single devices.  
        
        Signature ``GetRelatedSingleDevices()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRelatingSingleDevice(self) -> SingleDevice:
        """
        Assuming this single device to be the related single device in a
        :py:class:`NXOpen.Routing.DeviceRelationship`, get associated relating single device.  
        
        Signature ``GetRelatingSingleDevice()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetImplementedConnections(self) -> 'list[LogicalConnection]':
        """
        Gets connections implemented on single device.  
        
        Signature ``GetImplementedConnections()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.LogicalConnection` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ManuallyDelete(self) -> SingleDeviceDeleteObjectResult:
        """
        Deletes the single device.  
        
        Signature ``ManuallyDelete()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SingleDeviceDeleteObjectResult` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetItemDefinition(self) -> ItemDefinition:
        """
        Get item definition.  
        
        Signature ``GetItemDefinition()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ItemDefinition` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    NxEquivalent: NXOpen.NXObject = ...
    """
    Returns or sets  the NX equivalent object.  
    
    <hr>
    
    Getter Method
    
    Signature ``NxEquivalent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``NxEquivalent`` 
    
    :param routeNxEquivalent: 
    :type routeNxEquivalent: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    PartName: str = ...
    """
    Returns or sets  the part name 
    
    <hr>
    
    Getter Method
    
    Signature ``PartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``PartName`` 
    
    :param routePartName: 
    :type routePartName: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    PartNumber: str = ...
    """
    Returns or sets  the part number 
    
    <hr>
    
    Getter Method
    
    Signature ``PartNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``PartNumber`` 
    
    :param routePartNumber: 
    :type routePartNumber: str 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: SingleDevice = ...  # unknown typename


class SelectRun(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Run) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Run) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Run, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Run` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Run, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Run, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Routing.Run` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Routing.Run` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Run, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Run` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Run:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Run) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Routing.Run`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Routing.Run`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Routing.Run`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Routing.Run`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Run = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Routing.Run` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Routing.Run` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectRun = ...  # unknown typename


class AttributeHolder(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Routing.AttributeHolder`
    
    Use :py:meth:`Routing.RouteManager.CreateAttributeHolder` to get the instance of this class.
    
    .. versionadded:: NX8.5.0
    """
    
    def SetAttributes(self) -> None:
        """
        Sets the Template Attributes to this object 
        
        Signature ``SetAttributes()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CopyAttributesToObject(self, object: NXOpen.NXObject) -> None:
        """
        Copies the Template Attributes of this object to a Routing Object 
        
        Signature ``CopyAttributesToObject(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetFunctionType(self, functionType: str) -> None:
        """
        Sets the function type for which Template Attributes to be applied 
        
        Signature ``SetFunctionType(functionType)`` 
        
        :param functionType:  function for which attribute holder is created Example: PlacePart  
        :type functionType: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: AttributeHolder = ...  # unknown typename


class FittingPort(Port, IAxisPort):
    """
    Represents a Routing Fitting Port Object:py:class:`NXOpen.Routing.FittingPort`.  
    
    These objects are ones to which segments are routed to or from when
    creating a routing path.
    
    To create an instance of this class use :py:class:`NXOpen.Routing.FittingPortCollection`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetAlignVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the align vector of Port 
        
        Signature ``SetAlignVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the rotation vector of Port 
        
        Signature ``SetRotationVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationObject(self, rotationObject: NXOpen.DisplayableObject) -> None:
        """
        Sets the object used to derive the rotation vector of Port 
        
        Signature ``SetRotationObject(rotationObject)`` 
        
        :param rotationObject:  Object used to derive the rotation vector  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetForwardExtension(self, forwardExtension: float) -> None:
        """
        Sets the forward extension value of a port, i.  
        
        e. the minimum length that
        a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
        
        Signature ``SetForwardExtension(forwardExtension)`` 
        
        :param forwardExtension:  Port extension  
        :type forwardExtension: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEngagement(self, engagement: float) -> None:
        """
        The engagment distance of a :py:class:`NXOpen.Routing.IAxisPort`, i.  
        
        e. the distance 
        behind the port that another fitting or stock may engage
        
        Signature ``SetEngagement(engagement)`` 
        
        :param engagement:  Engagement distance  
        :type engagement: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCutbackLength(self, cutbackLength: float) -> None:
        """
        Sets the cutback length of a port, i.  
        
        e. the length along the wire from
        the port where individual wires leave a bundle to attach to pins
        
        Signature ``SetCutbackLength(cutbackLength)`` 
        
        :param cutbackLength:  Cutback Length  
        :type cutbackLength: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ForwardExtensionObject: NXOpen.Expression = ...
    """
    Returns or sets  the forward extension object of a port, i.  
    
    e. an expression representing the minimum
    length that a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :returns:  Forward Extension Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :param forwardExtension:  Forward Extension Expression  
    :type forwardExtension: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    EngagementObject: NXOpen.Expression = ...
    """
    Returns or sets  the engagement object of a port, i.  
    
    e. an expression representing the
    distance behind the port that another fitting or stock may engage
    
    <hr>
    
    Getter Method
    
    Signature ``EngagementObject`` 
    
    :returns:  Engagement Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EngagementObject`` 
    
    :param engagement:  Engagement Expression  
    :type engagement: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CutbackLengthObject: NXOpen.Expression = ...
    """
    Returns or sets  the cutback length object of a port, i.  
    
    e. an expression representing the length
    along the wire from the port where individual wires leave a bundle to attach to pins
    
    <hr>
    
    Getter Method
    
    Signature ``CutbackLengthObject`` 
    
    :returns:  Cutback Length Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CutbackLengthObject`` 
    
    :param cutbackLength:  Cutback Length Expression  
    :type cutbackLength: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Axis: NXOpen.Axis = ...
    """
    Returns or sets   the axis that defines the port
    
    <hr>
    
    Getter Method
    
    Signature ``Axis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Axis`` 
    
    :param axis: 
    :type axis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: FittingPort = ...  # unknown typename


class StockUseMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockUse():
    """
    Describes how the stock is used. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LegacyStock", "Normal Legacy Stock."
       "Bundled", "Legacy Stock that was generated by the bundling algorithm"
       "StockAsComponent", "Stock as Component stock in the work part."
       "StockInComponent", "Stock as Component stock in the component part. User should not modify this stock."
       "Deformed", "Stock has been deformed using the "Deform Component" functionality. User should not modify this stock."
    """
    LegacyStock = 0  # StockUseMemberType
    Bundled = 1  # StockUseMemberType
    StockAsComponent = 2  # StockUseMemberType
    StockInComponent = 3  # StockUseMemberType
    Deformed = 4  # StockUseMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolationViewerFilterOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DesignRuleViolationViewerFilterOption():
    """
    Enumerations to show options for filter. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AllViolations", "will show all violations"
       "SkipOverrides", "will not show overridden violations"
       "OverridesOnly", "will show only overridden violations"
    """
    AllViolations = 0  # DesignRuleViolationViewerFilterOptionMemberType
    SkipOverrides = 1  # DesignRuleViolationViewerFilterOptionMemberType
    OverridesOnly = 2  # DesignRuleViolationViewerFilterOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolationViewerOverrideOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DesignRuleViolationViewerOverrideOption():
    """
    Enumerations to show options for override 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "this shows that current violation is overridden violations"
       "No", "this shows that current violation is not overridden."
    """
    Yes = 0  # DesignRuleViolationViewerOverrideOptionMemberType
    No = 1  # DesignRuleViolationViewerOverrideOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolationViewer(NXOpen.Builder):
    """
    This class can be used to set the violation id, update text for overridding the violation and 
    update the user name used to override the violation.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDesignRuleViolationViewer`
    
    Default values.
    
    ================================  ==============
    Property                          Value
    ================================  ==============
    DialogViolationId                 0 
    --------------------------------  --------------
    FilterOptionValue                 AllViolations 
    --------------------------------  --------------
    NavigateViolationLocationOption   true 
    --------------------------------  --------------
    OverrideOptionValue               No 
    ================================  ==============
    
    .. versionadded:: NX6.0.0
    """
    
    class FilterOption():
        """
        Enumerations to show options for filter. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AllViolations", "will show all violations"
           "SkipOverrides", "will not show overridden violations"
           "OverridesOnly", "will show only overridden violations"
        """
        AllViolations = 0  # DesignRuleViolationViewerFilterOptionMemberType
        SkipOverrides = 1  # DesignRuleViolationViewerFilterOptionMemberType
        OverridesOnly = 2  # DesignRuleViolationViewerFilterOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OverrideOption():
        """
        Enumerations to show options for override 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "this shows that current violation is overridden violations"
           "No", "this shows that current violation is not overridden."
        """
        Yes = 0  # DesignRuleViolationViewerOverrideOptionMemberType
        No = 1  # DesignRuleViolationViewerOverrideOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetOverrideText(self) -> 'list[str]':
        """
        Returns the text written as a reason for overriding the violation  
        
        Signature ``GetOverrideText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOverrideText(self, overrideText: 'list[str]') -> None:
        """
        Sets the text for reason of overriding the violation 
        
        Signature ``SetOverrideText(overrideText)`` 
        
        :param overrideText: 
        :type overrideText: list of str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    DialogViolationId: int = ...
    """
    Returns or sets  the dialog design rule violation Id 
    
    <hr>
    
    Getter Method
    
    Signature ``DialogViolationId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DialogViolationId`` 
    
    :param dialogViolationID: 
    :type dialogViolationID: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FilterOptionValue: DesignRuleViolationViewerFilterOption = ...
    """
    Returns or sets  the value for filter option of route Design Rule Violation  
    
    <hr>
    
    Getter Method
    
    Signature ``FilterOptionValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationViewerFilterOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FilterOptionValue`` 
    
    :param filterOptionValue: 
    :type filterOptionValue: :py:class:`NXOpen.Routing.DesignRuleViolationViewerFilterOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    NavigateViolationLocationOption: bool = ...
    """
    Returns or sets  the state of Violation Location toggle option, 
    if true: Navigate Violation Locations of current violation
    if false: Navigate Violations.  
    
    <hr>
    
    Getter Method
    
    Signature ``NavigateViolationLocationOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``NavigateViolationLocationOption`` 
    
    :param navigateViolationLocationOption: 
    :type navigateViolationLocationOption: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    OverrideOptionValue: DesignRuleViolationViewerOverrideOption = ...
    """
    Returns or sets  the value for design Rule Violation override option
    if Yes: violation is overridden
    if No:  violation is not overridden 
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideOptionValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationViewerOverrideOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideOptionValue`` 
    
    :param overrideOptionValue: 
    :type overrideOptionValue: :py:class:`NXOpen.Routing.DesignRuleViolationViewerOverrideOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Username: str = ...
    """
    Returns or sets  the username who has overridden design Rule violation 
    
    <hr>
    
    Getter Method
    
    Signature ``Username`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Username`` 
    
    :param username: 
    :type username: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DesignRuleViolationViewer = ...  # unknown typename


class HealPath(NXOpen.TransientObject):
    """
    Represents a :py:class:`NXOpen.Routing.HealPath` object which holds the data used in the creation of the heal path spline.  
    
    .. versionadded:: NX5.0.0
    """
    
    def GetStartPoint(self) -> NXOpen.Point3d:
        """
        Get the start point.  
        
        Queries from start object if input is origin.  
        
        Signature ``GetStartPoint()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStartPoint(self, startPoint: NXOpen.Point3d) -> None:
        """
        Set the start point.  
        
        Signature ``SetStartPoint(startPoint)`` 
        
        :param startPoint: 
        :type startPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndPoint(self) -> NXOpen.Point3d:
        """
        Get the end point.  
        
        Queries from end object if input is origin.  
        
        Signature ``GetEndPoint()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndPoint(self, endPoint: NXOpen.Point3d) -> None:
        """
        Set the end point.  
        
        Signature ``SetEndPoint(endPoint)`` 
        
        :param endPoint: 
        :type endPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStartVector(self) -> NXOpen.Vector3d:
        """
        Get the start vector.  
        
        Queries from start object if input is zero vector.  
        
        Signature ``GetStartVector()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStartVector(self, startVector: NXOpen.Vector3d) -> None:
        """
        Set the start vector.  
        
        Signature ``SetStartVector(startVector)`` 
        
        :param startVector: 
        :type startVector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndVector(self) -> NXOpen.Vector3d:
        """
        Get the end vector.  
        
        Queries from end object if input is zero vector.  
        
        Signature ``GetEndVector()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndVector(self, endVector: NXOpen.Vector3d) -> None:
        """
        Set the end vector.  
        
        Signature ``SetEndVector(endVector)`` 
        
        :param endVector: 
        :type endVector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStartParms(self) -> float:
        """
        Get start parameters.  
        
        Signature ``GetStartParms()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStartParms(self, startParms: float) -> None:
        """
        Set start parameters.  
        
        Signature ``SetStartParms(startParms)`` 
        
        :param startParms: 
        :type startParms: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndParms(self) -> float:
        """
        Get end parameters.  
        
        Signature ``GetEndParms()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndParms(self, endParms: float) -> None:
        """
        Set end parameters.  
        
        Signature ``SetEndParms(endParms)`` 
        
        :param endParms: 
        :type endParms: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStartExtension(self) -> float:
        """
        Get start extension.  
        
        Signature ``GetStartExtension()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetStartExtension(self, startExtension: float) -> None:
        """
        Set start extension.  
        
        Signature ``SetStartExtension(startExtension)`` 
        
        :param startExtension: 
        :type startExtension: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndExtension(self) -> float:
        """
        Get end extension.  
        
        Signature ``GetEndExtension()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndExtension(self, endExtension: float) -> None:
        """
        Set end extension.  
        
        Signature ``SetEndExtension(endExtension)`` 
        
        :param endExtension: 
        :type endExtension: float 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReverseStart(self, reverse: bool) -> None:
        """
        Sets the reverse start end.  
        
        Reverse the direction that the start of the heal path
        takes when the path is healed. 
        
        Signature ``SetReverseStart(reverse)`` 
        
        :param reverse: 
        :type reverse: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReverseEnd(self, reverse: bool) -> None:
        """
        Sets the reverse end end.  
        
        Reverse the direction tha tthe end of the heal path takes
        when the path is healed. 
        
        Signature ``SetReverseEnd(reverse)`` 
        
        :param reverse: 
        :type reverse: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetHealMethod(self) -> HealMethod:
        """
        Get heal method.  
        
        Signature ``GetHealMethod()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.HealMethod` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetHealMethod(self, healMethod: HealMethod) -> None:
        """
        Set heal method.  
        
        Signature ``SetHealMethod(healMethod)`` 
        
        :param healMethod: 
        :type healMethod: :py:class:`NXOpen.Routing.HealMethod` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSplineOptions(self) -> SplineOptions:
        """
        Get spline options (by pole/by points).  
        
        Signature ``GetSplineOptions()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SplineOptions` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSplineOptions(self, splineOptions: SplineOptions) -> None:
        """
        Set spline options.  
        
        Signature ``SetSplineOptions(splineOptions)`` 
        
        :param splineOptions: 
        :type splineOptions: :py:class:`NXOpen.Routing.SplineOptions` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAllData(self) -> tuple:
        """
        Get all the data associated with the heal path creation.  
        
        Signature ``GetAllData()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startPoint, endPoint, startVector, endVector, startParms, endParms, startExtension, endExtension, reverseStart, reverseEnd, healMethod, splineOptions). startPoint is a :py:class:`NXOpen.Point3d`. endPoint is a :py:class:`NXOpen.Point3d`. startVector is a :py:class:`NXOpen.Vector3d`. endVector is a :py:class:`NXOpen.Vector3d`. startParms is a float. endParms is a float. startExtension is a float. endExtension is a float. reverseStart is a bool. reverseEnd is a bool. healMethod is a :py:class:`NXOpen.Routing.HealMethod`. splineOptions is a :py:class:`NXOpen.Routing.SplineOptions`. 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAllData(self, startPoint: NXOpen.Point3d, endPoint: NXOpen.Point3d, startVector: NXOpen.Vector3d, endVector: NXOpen.Vector3d, startParm: float, endParm: float, startExtension: float, endExtension: float, reverseStart: bool, reverseEnd: bool, healMethod: HealMethod, splineOptions: SplineOptions) -> None:
        """
        Set all the data associated with the heal path creation.  
        
        Signature ``SetAllData(startPoint, endPoint, startVector, endVector, startParm, endParm, startExtension, endExtension, reverseStart, reverseEnd, healMethod, splineOptions)`` 
        
        :param startPoint: 
        :type startPoint: :py:class:`NXOpen.Point3d` 
        :param endPoint: 
        :type endPoint: :py:class:`NXOpen.Point3d` 
        :param startVector: 
        :type startVector: :py:class:`NXOpen.Vector3d` 
        :param endVector: 
        :type endVector: :py:class:`NXOpen.Vector3d` 
        :param startParm: 
        :type startParm: float 
        :param endParm: 
        :type endParm: float 
        :param startExtension: 
        :type startExtension: float 
        :param endExtension: 
        :type endExtension: float 
        :param reverseStart: 
        :type reverseStart: bool 
        :param reverseEnd: 
        :type reverseEnd: bool 
        :param healMethod: 
        :type healMethod: :py:class:`NXOpen.Routing.HealMethod` 
        :param splineOptions: 
        :type splineOptions: :py:class:`NXOpen.Routing.SplineOptions` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    ReverseEnd: bool = ...
    """
    Returns  the reverse end end.  
    
    Reverse the direction tha tthe end of the heal path takes
    when the path is healed. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseEnd`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    ReverseStart: bool = ...
    """
    Returns  the reverse start end.  
    
    Reverse the direction that the start of the heal path
    takes when the path is healed. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseStart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """


class TerminalPort(Port, IAxisPort):
    """
    A :py:class:`NXOpen.Routing.TerminalPort` models the pins on an electrical
    connector.  
    
    :py:class:`NXOpen.Routing.TerminalPort`s are a
    :py:class:`NXOpen.Routing.MultiPort`'s children.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetAlignVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the align vector of Port 
        
        Signature ``SetAlignVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the rotation vector of Port 
        
        Signature ``SetRotationVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationObject(self, rotationObject: NXOpen.DisplayableObject) -> None:
        """
        Sets the object used to derive the rotation vector of Port 
        
        Signature ``SetRotationObject(rotationObject)`` 
        
        :param rotationObject:  Object used to derive the rotation vector  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetForwardExtension(self, forwardExtension: float) -> None:
        """
        Sets the forward extension value of a port, i.  
        
        e. the minimum length that
        a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
        
        Signature ``SetForwardExtension(forwardExtension)`` 
        
        :param forwardExtension:  Port extension  
        :type forwardExtension: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEngagement(self, engagement: float) -> None:
        """
        The engagment distance of a :py:class:`NXOpen.Routing.IAxisPort`, i.  
        
        e. the distance 
        behind the port that another fitting or stock may engage
        
        Signature ``SetEngagement(engagement)`` 
        
        :param engagement:  Engagement distance  
        :type engagement: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCutbackLength(self, cutbackLength: float) -> None:
        """
        Sets the cutback length of a port, i.  
        
        e. the length along the wire from
        the port where individual wires leave a bundle to attach to pins
        
        Signature ``SetCutbackLength(cutbackLength)`` 
        
        :param cutbackLength:  Cutback Length  
        :type cutbackLength: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    MultiPort: MultiPort = ...
    """
    Returns  the parent :py:class:`NXOpen.Routing.MultiPort` of the
    :py:class:`NXOpen.Routing.TerminalPort`
    
    <hr>
    
    Getter Method
    
    Signature ``MultiPort`` 
    
    :returns:  parent :py:class:`NXOpen.Routing.MultiPort`  
    :rtype: :py:class:`NXOpen.Routing.MultiPort` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    PinIdentifier: str = ...
    """
    Returns or sets  the pin identifier (name) of the :py:class:`NXOpen.Routing.TerminalPort` 
    
    <hr>
    
    Getter Method
    
    Signature ``PinIdentifier`` 
    
    :returns:  pin identifier  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``PinIdentifier`` 
    
    :param pinIdentifier:  pin identifier  
    :type pinIdentifier: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    ForwardExtensionObject: NXOpen.Expression = ...
    """
    Returns or sets  the forward extension object of a port, i.  
    
    e. an expression representing the minimum
    length that a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :returns:  Forward Extension Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :param forwardExtension:  Forward Extension Expression  
    :type forwardExtension: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    EngagementObject: NXOpen.Expression = ...
    """
    Returns or sets  the engagement object of a port, i.  
    
    e. an expression representing the
    distance behind the port that another fitting or stock may engage
    
    <hr>
    
    Getter Method
    
    Signature ``EngagementObject`` 
    
    :returns:  Engagement Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EngagementObject`` 
    
    :param engagement:  Engagement Expression  
    :type engagement: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CutbackLengthObject: NXOpen.Expression = ...
    """
    Returns or sets  the cutback length object of a port, i.  
    
    e. an expression representing the length
    along the wire from the port where individual wires leave a bundle to attach to pins
    
    <hr>
    
    Getter Method
    
    Signature ``CutbackLengthObject`` 
    
    :returns:  Cutback Length Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CutbackLengthObject`` 
    
    :param cutbackLength:  Cutback Length Expression  
    :type cutbackLength: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Axis: NXOpen.Axis = ...
    """
    Returns or sets   the axis that defines the port
    
    <hr>
    
    Getter Method
    
    Signature ``Axis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Axis`` 
    
    :param axis: 
    :type axis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: TerminalPort = ...  # unknown typename


class RemoveDiscontinuityBuilder(NXOpen.Builder):
    """
    Builder class for remove discontinuity object   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateRemoveDiscontinuityBuilder`
    
    .. versionadded:: NX7.5.0
    """
    DiscontinuityCorner: RouteObjectCollector = ...
    """
    Returns  the selected :py:class:`NXOpen.Routing.RouteObjectCollector` which contains
    discontinuity corner 
    
    <hr>
    
    Getter Method
    
    Signature ``DiscontinuityCorner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: RemoveDiscontinuityBuilder = ...  # unknown typename


class Path(NXOpen.NXObject, IPath):
    """
    The Routing Path object is the set of ordered continuous segments.  
    
    Creator not available in KF.
    
    .. versionadded:: NX7.5.0
    """
    
    def GetLength(self) -> float:
        """
        Returns the combined length of all the segments in this path.  
        
        Signature ``GetLength()`` 
        
        :returns:  The combined length of all the segments in this path.  
        :rtype: float 
        
        .. versionadded:: NX8.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentList(self) -> 'list[ISegment]':
        """
        Returns the list of all of the segments contained in the IPath  
        
        Signature ``GetSegmentList()`` 
        
        :returns:  list of all of the segments in this IPath object  
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddSegmentsToList(self, objs: 'list[ISegment]') -> None:
        """
        Adds segment(s) to an IPath object.  
        
        Signature ``AddSegmentsToList(objs)`` 
        
        :param objs:  list of segments that are to be added  
        :type objs: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DelSegmentsFromList(self, objs: 'list[ISegment]') -> None:
        """
        Removes segment(s) from the IPath object.  
        
        Signature ``DelSegmentsFromList(objs)`` 
        
        :param objs:  list of segments that are to be deleted  
        :type objs: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ControlPointStart: ControlPoint = ...
    """
    Returns or sets  the start ControlPoint for an IPath object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPointStart`` 
    
    :returns:  start ControlPoint for the IPath object  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPointStart`` 
    
    :param start:  start ControlPoint for the IPath object  
    :type start: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    ControlPointEnd: ControlPoint = ...
    """
    Returns or sets  the end ControlPoint for an IPath object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPointEnd`` 
    
    :returns:  end ControlPoint for the IPath object  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPointEnd`` 
    
    :param end:  end ControlPoint for the IPath object  
    :type end: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: Path = ...  # unknown typename


class ControlPointCollectionCheckExistingMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlPointCollectionCheckExisting():
    """
    Option for searching for an existing :py:class:`NXOpen.Routing.ControlPoint` 
    when attempting to create an new :py:class:`NXOpen.Routing.ControlPoint`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DontSearch", "Don't search for an exising object, always create a new object."
       "Search", "Search for an existing object, don't create a new object if one exists at the correct location."
    """
    DontSearch = 0  # ControlPointCollectionCheckExistingMemberType
    Search = 1  # ControlPointCollectionCheckExistingMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlPointCollectionFoundExistingMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlPointCollectionFoundExisting():
    """
    Whether :py:class:`NXOpen.Routing.ControlPoint` returned from the creator 
    methods was an existing :py:class:`NXOpen.Routing.ControlPoint` or a new
    :py:class:`NXOpen.Routing.ControlPoint`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BrandNew", "Object is a new object."
       "Existing", "Object existed already."
    """
    BrandNew = 0  # ControlPointCollectionFoundExistingMemberType
    Existing = 1  # ControlPointCollectionFoundExistingMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlPointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.ControlPoint` objects.  
    
    Iterating this collection only returns live uncondemned objects contained in the owning part
    of the collection. Note that :py:class:`NXOpen.Routing.ControlPoint` is a smart object and many smart objects are condemned as they 
    only exist to support other objects and are not displayed.
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    class CheckExisting():
        """
        Option for searching for an existing :py:class:`NXOpen.Routing.ControlPoint` 
        when attempting to create an new :py:class:`NXOpen.Routing.ControlPoint`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DontSearch", "Don't search for an exising object, always create a new object."
           "Search", "Search for an existing object, don't create a new object if one exists at the correct location."
        """
        DontSearch = 0  # ControlPointCollectionCheckExistingMemberType
        Search = 1  # ControlPointCollectionCheckExistingMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FoundExisting():
        """
        Whether :py:class:`NXOpen.Routing.ControlPoint` returned from the creator 
        methods was an existing :py:class:`NXOpen.Routing.ControlPoint` or a new
        :py:class:`NXOpen.Routing.ControlPoint`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BrandNew", "Object is a new object."
           "Existing", "Object existed already."
        """
        BrandNew = 0  # ControlPointCollectionFoundExistingMemberType
        Existing = 1  # ControlPointCollectionFoundExistingMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindControlPoint(self, position: NXOpen.Point3d, tolerance: float) -> ControlPoint:
        """
        Finds an existing :py:class:`NXOpen.Routing.ControlPoint` at the given ABS coordinates within
        the given tolerance.  
        
        Signature ``FindControlPoint(position, tolerance)`` 
        
        :param position:  ABS coordinates  
        :type position: :py:class:`NXOpen.Point3d` 
        :param tolerance:  Distance tolerance, smallest useful tolerance                                                        is returned from                                                         :py:meth:`NXOpen.Routing.RouteManager.GetLengthTolerance`.  
        :type tolerance: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def CreateControlPoint(self, position: NXOpen.Point3d, checkExisting: ControlPointCollectionCheckExisting) -> tuple:
        """
        Creates a dumb :py:class:`NXOpen.Routing.ControlPoint` object.  The :py:class:`NXOpen.Routing.ControlPoint`'s 
        position is not associative to any other object.   
        
        Signature ``CreateControlPoint(position, checkExisting)`` 
        
        :param position:  ABS coordinates 
        :type position: :py:class:`NXOpen.Point3d` 
        :param checkExisting:  Return an existing :py:class:`NXOpen.Routing.ControlPoint`                                                        object if one exists at the same location as the                                                        position.  
        :type checkExisting: :py:class:`NXOpen.Routing.ControlPointCollectionCheckExisting` 
        :returns: a tuple 
        :rtype: A tuple consisting of (controlpoint, foundExisting). controlpoint is a :py:class:`NXOpen.Routing.ControlPoint`. foundExisting is a :py:class:`NXOpen.Routing.ControlPointCollectionFoundExisting`.   Returned :py:class:`NXOpen.Routing.ControlPoint` is                                                        an existing control point. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateControlPoint(self, port: Port, checkExisting: ControlPointCollectionCheckExisting) -> tuple:
        """
        Creates a smart :py:class:`NXOpen.Routing.ControlPoint` object.  The :py:class:`NXOpen.Routing.ControlPoint`'s 
        position is associative to the input :py:class:`NXOpen.Routing.Port`.   
        
        Signature ``CreateControlPoint(port, checkExisting)`` 
        
        :param port: 
        :type port: :py:class:`NXOpen.Routing.Port` 
        :param checkExisting:  Return an existing :py:class:`NXOpen.Routing.ControlPoint`                                                        object if one exists at the same location as the                                                        position.  
        :type checkExisting: :py:class:`NXOpen.Routing.ControlPointCollectionCheckExisting` 
        :returns: a tuple 
        :rtype: A tuple consisting of (controlpoint, foundExisting). controlpoint is a :py:class:`NXOpen.Routing.ControlPoint`. foundExisting is a :py:class:`NXOpen.Routing.ControlPointCollectionFoundExisting`.   Returned :py:class:`NXOpen.Routing.ControlPoint` is                                                        an existing control point. 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateControlPoint(self, object: NXOpen.TaggedObject, objectParm: float, checkExisting: ControlPointCollectionCheckExisting) -> tuple:
        """
        Creates a :py:class:`NXOpen.Routing.ControlPoint` at the given object and normalized parameter.
        Supports curves [includes segments], ports and circular edges.   
        
        Signature ``CreateControlPoint(object, objectParm, checkExisting)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.TaggedObject` 
        :param objectParm: 
        :type objectParm: float 
        :param checkExisting:  Return an existing :py:class:`NXOpen.Routing.ControlPoint`                                                        object if one exists at the same location as the                                                        position.  
        :type checkExisting: :py:class:`NXOpen.Routing.ControlPointCollectionCheckExisting` 
        :returns: a tuple 
        :rtype: A tuple consisting of (controlpoint, foundExisting). controlpoint is a :py:class:`NXOpen.Routing.ControlPoint`. foundExisting is a :py:class:`NXOpen.Routing.ControlPointCollectionFoundExisting`.   Returned :py:class:`NXOpen.Routing.ControlPoint` is                                                        an existing control point. 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateControlPoint(self, point: NXOpen.Point, checkExisting: ControlPointCollectionCheckExisting) -> tuple:
        """
        Creates a smart :py:class:`NXOpen.Routing.ControlPoint` object.  The :py:class:`NXOpen.Routing.ControlPoint`'s 
        position is associative to the input :py:class:`NXOpen.Point`.   
        
        Signature ``CreateControlPoint(point, checkExisting)`` 
        
        :param point: 
        :type point: :py:class:`NXOpen.Point` 
        :param checkExisting:  Return an existing :py:class:`NXOpen.Routing.ControlPoint`                                                        object if one exists at the same location as the                                                        position.  
        :type checkExisting: :py:class:`NXOpen.Routing.ControlPointCollectionCheckExisting` 
        :returns: a tuple 
        :rtype: A tuple consisting of (controlpoint, foundExisting). controlpoint is a :py:class:`NXOpen.Routing.ControlPoint`. foundExisting is a :py:class:`NXOpen.Routing.ControlPointCollectionFoundExisting`.   Returned :py:class:`NXOpen.Routing.ControlPoint` is                                                        an existing control point. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateControlPoint(self, conic: NXOpen.IBaseCurve, checkExisting: ControlPointCollectionCheckExisting) -> tuple:
        """
        Creates a smart :py:class:`NXOpen.Routing.ControlPoint` object.  The :py:class:`NXOpen.Routing.ControlPoint`'s 
        position is associative to a :py:class:`NXOpen.Point` that is defined at the center
        of a :py:class:`NXOpen.IBaseCurve` object.   
        
        Signature ``CreateControlPoint(conic, checkExisting)`` 
        
        :param conic: 
        :type conic: :py:class:`NXOpen.IBaseCurve` 
        :param checkExisting:  Return an existing :py:class:`NXOpen.Routing.ControlPoint`                                                        object if one exists at the same location as the                                                        position.  
        :type checkExisting: :py:class:`NXOpen.Routing.ControlPointCollectionCheckExisting` 
        :returns: a tuple 
        :rtype: A tuple consisting of (controlpoint, foundExisting). controlpoint is a :py:class:`NXOpen.Routing.ControlPoint`. foundExisting is a :py:class:`NXOpen.Routing.ControlPointCollectionFoundExisting`.   Returned :py:class:`NXOpen.Routing.ControlPoint` is                                                        an existing control point. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateControlPoint(self, startObject: IRoutePosition, offset: NXOpen.Vector3d, checkExisting: ControlPointCollectionCheckExisting) -> tuple:
        """
        Creates a dumb :py:class:`NXOpen.Routing.ControlPoint` object.  The :py:class:`NXOpen.Routing.ControlPoint`'s 
        position is not associative to any other object.  The position of the object is located at
        the XC, YC, ZC offset (using the work coordinate system) from the input 
        :py:class:`NXOpen.Routing.IRoutePosition`  object.   
        
        Signature ``CreateControlPoint(startObject, offset, checkExisting)`` 
        
        :param startObject:  Starting position.  
        :type startObject: :py:class:`NXOpen.Routing.IRoutePosition` 
        :param offset:  Offset values.  
        :type offset: :py:class:`NXOpen.Vector3d` 
        :param checkExisting:  Return an existing :py:class:`NXOpen.Routing.ControlPoint`                                                        object if one exists at the same location as the                                                        position.  
        :type checkExisting: :py:class:`NXOpen.Routing.ControlPointCollectionCheckExisting` 
        :returns: a tuple 
        :rtype: A tuple consisting of (controlpoint, foundExisting). controlpoint is a :py:class:`NXOpen.Routing.ControlPoint`. foundExisting is a :py:class:`NXOpen.Routing.ControlPointCollectionFoundExisting`.   Returned :py:class:`NXOpen.Routing.ControlPoint` is                                                        an existing control point. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateControlPoint(self, cpOcc: ControlPoint, checkExisting: ControlPointCollectionCheckExisting) -> tuple:
        """
        Creates a smart :py:class:`NXOpen.Routing.ControlPoint` object.  The :py:class:`NXOpen.Routing.ControlPoint`'s 
        position is smart point that is associative to a :py:class:`NXOpen.Point` that is associative
        to a :py:class:`NXOpen.Routing.ControlPoint` occurrence.  
        
        Signature ``CreateControlPoint(cpOcc, checkExisting)`` 
        
        :param cpOcc:  Occurrence of a                                                                             :py:class:`NXOpen.Routing.ControlPoint` object. 
        :type cpOcc: :py:class:`NXOpen.Routing.ControlPoint` 
        :param checkExisting:  Return an existing :py:class:`NXOpen.Routing.ControlPoint`                                                        object if one exists at the same location as the                                                        position.  
        :type checkExisting: :py:class:`NXOpen.Routing.ControlPointCollectionCheckExisting` 
        :returns: a tuple 
        :rtype: A tuple consisting of (controlpoint, foundExisting). controlpoint is a :py:class:`NXOpen.Routing.ControlPoint`. foundExisting is a :py:class:`NXOpen.Routing.ControlPointCollectionFoundExisting`.   Returned :py:class:`NXOpen.Routing.ControlPoint` is                                                        an existing control point. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class LogicalTerminal(RouteObject):
    """
    Assembly instance of a :py:class:`NXOpen.Routing.InterfaceTerminalBase`.  
    
    :py:class:`NXOpen.Routing.LogicalTerminal` corresponds to NX
    occurrences of :py:class:`NXOpen.Routing.MultiPort`s,
    :py:class:`NXOpen.Routing.TerminalPort`s or
    :py:class:`NXOpen.Routing.FittingPort`s.  Multiple ports can be
    associated to a single
    :py:class:`NXOpen.Routing.LogicalTerminal`.
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX5.0.0
    """
    
    def GetPorts(self) -> 'list[Port]':
        """
        Get the physical :py:class:`NXOpen.Routing.Port`s associated with the terminal.  
        
        The physical :py:class:`NXOpen.Routing.Port` corresponds to a port occurrence.
        
        Depricated in NX4.
        
        Signature ``GetPorts()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddPort(self, port: Port) -> None:
        """
        Add a physical :py:class:`NXOpen.Routing.Port` to the
        terminal.  
        
        If None, nothing is added.
        
        The physical :py:class:`NXOpen.Routing.Port` corresponds to a port occurrence.
        
        Signature ``AddPort(port)`` 
        
        :param port:  Port to add to the terminal  
        :type port: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemovePort(self, port: Port) -> None:
        """
        Remove a physical :py:class:`NXOpen.Routing.Port` from the
        terminal.  
        
        If the :py:class:`NXOpen.Routing.Port` is not
        associated to the :py:class:`NXOpen.Routing.LogicalTerminal`
        or is None, nothing is done.
        
        The physical :py:class:`NXOpen.Routing.Port` corresponds to a port occurrence.
        
        Signature ``RemovePort(port)`` 
        
        :param port:  Port to remove from the terminal  
        :type port: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ClearAllPorts(self) -> None:
        """
        Clears the :py:class:`NXOpen.Routing.Port` of all
        :py:class:`NXOpen.Routing.Port`s.  
        
        Signature ``ClearAllPorts()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetParentConnector(self) -> SingleDevice:
        """
        The physical connector associated with the :py:class:`NXOpen.Routing.Port`.  
        
        Assumes that a :py:class:`NXOpen.Routing.Port` cannot be associated to more than one physical connector at any time.
        
        Signature ``GetParentConnector()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SingleDevice` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    InterfaceTerminalShadow: InterfaceTerminalShadow = ...
    """
    Returns  the :py:class:`NXOpen.Routing.InterfaceTerminalShadow` corresponding to :py:class:`NXOpen.Routing.Port` in piece part.  
    
    <hr>
    
    Getter Method
    
    Signature ``InterfaceTerminalShadow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalShadow` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Port: Port = ...
    """
    Returns  the physical :py:class:`NXOpen.Routing.Port` associated with the terminal.  
    
    The physical :py:class:`NXOpen.Routing.Port` corresponds to a port occurrence.
    
    <hr>
    
    Getter Method
    
    Signature ``Port`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Port` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: LogicalTerminal = ...  # unknown typename


class RoutingMeasureDistanceBuilder(NXOpen.MeasureDistanceBuilder):
    """
    Represents a :py:class:`NXOpen.Routing.RoutingMeasureDistanceBuilder`   
    
    Creator not available in KF because transient objects are not supported.
    
    .. versionadded:: NX6.0.0
    """
    
    def GetRoutingObjects(self) -> 'list[NXOpen.NXObject]':
        """
        The routing objects used for path length  
        
        Signature ``GetRoutingObjects()`` 
        
        :returns:  the routing objects used for path length  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRoutingObjects(self, routingObjects: 'list[NXOpen.NXObject]') -> None:
        """
        The routing objects used for path length 
        
        Signature ``SetRoutingObjects(routingObjects)`` 
        
        :param routingObjects:  the routing objects to set for path length  
        :type routingObjects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    RoutingSelection: RouteObjectCollector = ...
    """
    Returns or sets  the :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    <hr>
    
    Getter Method
    
    Signature ``RoutingSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoutingSelection`` 
    
    :param selectionBuilder: 
    :type selectionBuilder: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: RoutingMeasureDistanceBuilder = ...  # unknown typename


class AssignTangencyBuilderTangencySideMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssignTangencyBuilderTangencySide():
    """
    Describes which side of the spline to assign tangency. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Undefined", "The tangency side is undefined."
       "Source", "Assign tangency at source ControlPoint."
       "Target", "Assign tangency at target ControlPoint."
    """
    Undefined = 0  # AssignTangencyBuilderTangencySideMemberType
    Source = 1  # AssignTangencyBuilderTangencySideMemberType
    Target = 2  # AssignTangencyBuilderTangencySideMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssignTangencyBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.AssignTangencyBuilder` object.  
    
    Provides support for :py:class:`NXOpen.Routing.SplinePathBuilder` when assigning
    tangency constraints between adjacent splines.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.SplinePathBuilder.CreateAssignTangencyBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class TangencySide():
        """
        Describes which side of the spline to assign tangency. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Undefined", "The tangency side is undefined."
           "Source", "Assign tangency at source ControlPoint."
           "Target", "Assign tangency at target ControlPoint."
        """
        Undefined = 0  # AssignTangencyBuilderTangencySideMemberType
        Source = 1  # AssignTangencyBuilderTangencySideMemberType
        Target = 2  # AssignTangencyBuilderTangencySideMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AssignTangency(self, segments: 'list[NXOpen.Curve]', tangencySide: AssignTangencyBuilderTangencySide) -> None:
        """
        Assign tangency at specified side of the spline.  
        
        See :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` for valid
        options.
        
        Signature ``AssignTangency(segments, tangencySide)`` 
        
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Curve` 
        :param tangencySide: 
        :type tangencySide: :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AssignTangencyAtPort(self, tangencySide: AssignTangencyBuilderTangencySide) -> None:
        """
        Assign tangency at attached port.  
        
        See :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` for valid
        options.
        
        Signature ``AssignTangencyAtPort(tangencySide)`` 
        
        :param tangencySide: 
        :type tangencySide: :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveTangency(self, tangencySide: AssignTangencyBuilderTangencySide) -> None:
        """
        Remove tangency at specified side of the spline.  
        
        See :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` for valid
        options.
        
        Signature ``RemoveTangency(tangencySide)`` 
        
        :param tangencySide: 
        :type tangencySide: :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateTangencyGroupBuilder(self) -> TangencyGroupBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.TangencyGroupBuilder` object.  
        
        Signature ``CreateTangencyGroupBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.TangencyGroupBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    AssignTangencySide: AssignTangencyBuilderTangencySide = ...
    """
    Returns or sets  the tangency side :py:class:`NXOpen.Routing.AssignTangencyBuilder.TangencySide` to assign tangency
    
    <hr>
    
    Getter Method
    
    Signature ``AssignTangencySide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``AssignTangencySide`` 
    
    :param tangencySide: 
    :type tangencySide: :py:class:`NXOpen.Routing.AssignTangencyBuilderTangencySide` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SelectedTangencyGroup: TangencyGroupBuilder = ...
    """
    Returns or sets  the selected :py:class:`NXOpen.Routing.TangencyGroupBuilder` to assign tangency
    at specified side of the spline.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedTangencyGroup`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.TangencyGroupBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedTangencyGroup`` 
    
    :param selectedTangencyGroup: 
    :type selectedTangencyGroup: :py:class:`NXOpen.Routing.TangencyGroupBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: AssignTangencyBuilder = ...  # unknown typename


class StockData(NXOpen.NXObject, ICharacteristic):
    """
    A :py:class:`NXOpen.Routing.StockData` contains the various profiles, characteristic information, 
    :py:class:`NXOpen.Routing.Anchor` and other attributes that define :py:class:`NXOpen.Routing.Stock` 
    objects.  
    
    Each :py:class:`NXOpen.Routing.Stock` has exactly one :py:class:`NXOpen.Routing.StockData`
    associated with it.  All :py:class:`NXOpen.Routing.CrossSection` and :py:class:`NXOpen.Routing.Anchor`
    objects used in a :py:class:`NXOpen.Routing.Stock` object must come from the 
    :py:class:`NXOpen.Routing.StockData` associated with that :py:class:`NXOpen.Routing.Stock` object.
    
    Creator not available in KF because transient objects are not supported.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetCrossSections(self) -> 'list[CrossSection]':
        """
        Gets the list of :py:class:`NXOpen.Routing.CrossSection` objects associated with this
        :py:class:`NXOpen.Routing.StockData`.  
        
        There should be no more than one 
        :py:class:`NXOpen.Routing.CrossSection` of any particular :py:class:`NXOpen.Routing.StockStyle` 
        (and no :py:class:`NXOpen.Routing.CrossSection` with a style of 
        :py:class:`NXOpen.Routing.StockStyle.None <NXOpen.Routing.StockStyle>`).  
        
        Signature ``GetCrossSections()`` 
        
        :returns:  The list of :py:class:`NXOpen.Routing.CrossSection` objects.    
        :rtype: list of :py:class:`NXOpen.Routing.CrossSection` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCrossSections(self, crossSections: 'list[CrossSection]') -> None:
        """
        Sets the list of :py:class:`NXOpen.Routing.CrossSection` objects associated with this
        :py:class:`NXOpen.Routing.StockData`.  
        
        There should be no more than one :py:class:`NXOpen.Routing.CrossSection`
        of any particular :py:class:`NXOpen.Routing.StockStyle` (and no :py:class:`NXOpen.Routing.CrossSection` 
        with a style of :py:class:`NXOpen.Routing.StockStyle.None <NXOpen.Routing.StockStyle>`). 
        
        Signature ``SetCrossSections(crossSections)`` 
        
        :param crossSections:  The list of :py:class:`NXOpen.Routing.CrossSection` objects. 
        :type crossSections: list of :py:class:`NXOpen.Routing.CrossSection` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAnchors(self) -> 'list[Anchor]':
        """
        Gets the list of :py:class:`NXOpen.Routing.Anchor` objects associated with this
        :py:class:`NXOpen.Routing.StockData`.  
        
        There should be no more than one :py:class:`NXOpen.Routing.Anchor`
        with the same name.  
        
        Signature ``GetAnchors()`` 
        
        :returns:  The list of :py:class:`NXOpen.Routing.Anchor` objects.    
        :rtype: list of :py:class:`NXOpen.Routing.Anchor` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAnchors(self, anchors: 'list[Anchor]') -> None:
        """
        Sets the list of :py:class:`NXOpen.Routing.Anchor` objects associated with this
        :py:class:`NXOpen.Routing.StockData`.  
        
        There should be no more than one :py:class:`NXOpen.Routing.Anchor`
        with the same name. 
        
        Signature ``SetAnchors(anchors)`` 
        
        :param anchors:  The list of :py:class:`NXOpen.Routing.Anchor` objects.    
        :type anchors: list of :py:class:`NXOpen.Routing.Anchor` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsBundled(self) -> StockDataType:
        """
        Returns whether or not the :py:class:`NXOpen.Routing.StockData` is used in
        the bundling of wires or not.  
        
        Signature ``GetIsBundled()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockDataType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStocks(self) -> 'list[Stock]':
        """
        Returns all of the :py:class:`NXOpen.Routing.Stock` objects that use this 
        :py:class:`NXOpen.Routing.StockData` object.  
        
        Signature ``GetStocks()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBundledStockDatas(self) -> 'list[StockData]':
        """
        Returns all of the :py:class:`NXOpen.Routing.StockData` that were used to build this object 
        by the bundling algorithm.  
        
        Only returns valid output if 
        :py:meth:`NXOpen.Routing.StockData.GetIsBundled` returns 
        :py:class:`RoutingStockDataType.Bundled <RoutingStockDataType>`.
        
        Signature ``GetBundledStockDatas()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetNamedAnchor(self, anchorName: str) -> Anchor:
        """
        Returns the :py:class:`NXOpen.Routing.Anchor` which is part of the :py:class:`Routing.StockData`, given the anchors name.  
        
        Signature ``GetNamedAnchor(anchorName)`` 
        
        :param anchorName: 
        :type anchorName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Anchor` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStyledCross(self, stockStyle: StockStyle) -> CrossSection:
        """
        Returns the :py:class:`NXOpen.Routing.CrossSection` which is part of the :py:class:`Routing.StockData`, given the cross section style.  
        
        Signature ``GetStyledCross(stockStyle)`` 
        
        :param stockStyle: 
        :type stockStyle: :py:class:`NXOpen.Routing.StockStyle` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CrossSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: StockData = ...  # unknown typename


class CharacteristicList(NXOpen.TransientObject):
    """
    Contains a list of characteristics.  
    
    A characteristics is a name-value pair where the value can be an integer, real or string.
    
    .. versionadded:: NX4.0.0
    """
    
    class CharacteristicInformation():
        """
        Contains the type and name of a characteristic .  
        
        Constructor: 
        NXOpen.Routing.CharacteristicList.CharacteristicInformation()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Type: NXOpen.NXObjectAttributeType = ...
        """
        characteristic type  
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObjectAttributeType`
        """
        Name: str = ...
        """
        characteristic name 
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def Dispose(self) -> None:
        """
        Frees the memory associated with this object.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Gets the value of an integer characteristic.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name:  The name of the characteristic.  
        :type name: str 
        :returns:  The integer value of the characteristic.  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Sets the value of an integer characteristic associated with the input name.
        The method adds a new characteristic to the list if one does not exist already or converts
        the type of an existing characteristic to integer if necessary. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name:  The name of the characteristic  
        :type name: str 
        :param value:  The integer value of the characteristic  
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Sets the value of an real characteristic associated with the input name.
        The method adds a new characteristic to the list if one doesn't exist already or converts
        the type of an existing characteristic to real if necessary. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name:  The name of the characteristic  
        :type name: str 
        :param value:  The real value of the characteristic  
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Sets the value of an string characteristic.
        The method adds a new characteristic to the list if one does not exist already or converts
        the type of an existing characteristic to string if necessary. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name:  The name of the characteristic  
        :type name: str 
        :param value:  The string value of the characteristic  
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str, type: NXOpen.NXObjectAttributeType) -> None:
        """
        Sets the value of a string or reference characteristic.
        The method adds a new characteristic to the list if one does not exist already or converts
        the type of an existing characteristic to string or reference if necessary. 
        
        Signature ``SetCharacteristic(name, value, type)`` 
        
        :param name:  The name of the characteristic  
        :type name: str 
        :param value:  The string value of the characteristic  
        :type value: str 
        :param type:  The type of the characteristic, either string or reference type.:py:class:`NXOpen.NXObjectAttributeType.Any <NXOpen.NXObjectAttributeType>` is not valid.                                                            See :py:class:`NXOpen.NXObjectAttributeType` for more information.  
        :type type: :py:class:`NXOpen.NXObjectAttributeType` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Gets the value of a real characteristic.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name:  The name of the characteristic  
        :type name: str 
        :returns:  The real value of the characteristic  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Gets the value of a string characteristic  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name:  The name of the characteristic  
        :type name: str 
        :returns:  The string value of the characteristic  
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristicTitlesByType(self, type: NXOpen.NXObjectAttributeType) -> 'list[CharacteristicListCharacteristicInformation_Struct]':
        """
        Returns the titles of all characteristics that have the specified type.  
        
        Signature ``GetCharacteristicTitlesByType(type)`` 
        
        :param type:  The characteristic type.Specifying :py:class:`NXOpen.NXObjectAttributeType.Any <NXOpen.NXObjectAttributeType>`                                                                                     returns the titles of all characteristics in the list.                                                                                    See :py:class:`NXOpen.NXObjectAttributeType` for more information.  
        :type type: :py:class:`NXOpen.NXObjectAttributeType` 
        :returns:  The list of characteristic names.  
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicListCharacteristicInformation_Struct` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacteristic(self, name: str, type: NXOpen.NXObjectAttributeType) -> None:
        """
        Removes a characteristic from the characteristic list.  
        
        Signature ``DeleteCharacteristic(name, type)`` 
        
        :param name:  The name of the characteristic  
        :type name: str 
        :param type:  The type of the characteristic.:py:class:`NXOpen.NXObjectAttributeType.Any <NXOpen.NXObjectAttributeType>` is not valid.                                                            See :py:class:`NXOpen.NXObjectAttributeType` for more information.  
        :type type: :py:class:`NXOpen.NXObjectAttributeType` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class IntegrateRunsBuilderEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IntegrateRunsBuilderEnum():
    """
    RunAttributes from which Run 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstRun", " - "
       "SecondRun", " - "
    """
    FirstRun = 0  # IntegrateRunsBuilderEnumMemberType
    SecondRun = 1  # IntegrateRunsBuilderEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IntegrateRunsBuilderButtonMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IntegrateRunsBuilderButton():
    """
    Enums to distinguish callback's for from/to/member Item buttons
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromItems", "Set as FromItem for selected node in tree list"
       "ToItems", "Set as ToItem for selected node in tree list"
       "MemberItems", "Set as MemberItem for selected node in tree list"
       "Unknown", "unknown button ID"
    """
    FromItems = 0  # IntegrateRunsBuilderButtonMemberType
    ToItems = 1  # IntegrateRunsBuilderButtonMemberType
    MemberItems = 2  # IntegrateRunsBuilderButtonMemberType
    Unknown = -1  # IntegrateRunsBuilderButtonMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IntegrateRunsBuilder(NXOpen.Builder):
    """
    Builder Class for Integrate Runs Object   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.IntegrateRunsBuilder`
    
    Default values.
    
    ==============  =========
    Property        Value
    ==============  =========
    RunAttributes   FirstRun 
    ==============  =========
    
    .. versionadded:: NX8.0.0
    """
    
    class Enum():
        """
        RunAttributes from which Run 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstRun", " - "
           "SecondRun", " - "
        """
        FirstRun = 0  # IntegrateRunsBuilderEnumMemberType
        SecondRun = 1  # IntegrateRunsBuilderEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Button():
        """
        Enums to distinguish callback's for from/to/member Item buttons
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromItems", "Set as FromItem for selected node in tree list"
           "ToItems", "Set as ToItem for selected node in tree list"
           "MemberItems", "Set as MemberItem for selected node in tree list"
           "Unknown", "unknown button ID"
        """
        FromItems = 0  # IntegrateRunsBuilderButtonMemberType
        ToItems = 1  # IntegrateRunsBuilderButtonMemberType
        MemberItems = 2  # IntegrateRunsBuilderButtonMemberType
        Unknown = -1  # IntegrateRunsBuilderButtonMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ModifyItemsButton(self, objects: 'list[NXOpen.NXObject]', buttonType: IntegrateRunsBuilderButton) -> None:
        """
        Updates the selected nodes in Specify From/To item tree list to From/To/Member item based on buttonType 
        
        Signature ``ModifyItemsButton(objects, buttonType)`` 
        
        :param objects:  object of From/To/Member Items of a Run  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :param buttonType:  Modify the selected nodes to  From,To,Member Items 
        :type buttonType: :py:class:`NXOpen.Routing.IntegrateRunsBuilderButton` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    FirstRun: NXOpen.SelectNXObject = ...
    """
    Returns  the first run 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstRun`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RunAttributes: IntegrateRunsBuilderEnum = ...
    """
    Returns or sets  the run attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``RunAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.IntegrateRunsBuilderEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RunAttributes`` 
    
    :param runAttributes: 
    :type runAttributes: :py:class:`NXOpen.Routing.IntegrateRunsBuilderEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RunName: str = ...
    """
    Returns or sets  the user mentioned run name for Integrated Run
    
    <hr>
    
    Getter Method
    
    Signature ``RunName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``RunName`` 
    
    :param runName: 
    :type runName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    SecondRun: NXOpen.SelectNXObject = ...
    """
    Returns  the second run 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondRun`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: IntegrateRunsBuilder = ...  # unknown typename


class WireCollection(NXOpen.TaggedObjectCollection):
    """
    The Routing Wire object is a list of segments in a route and some
    stock.  
    
    It also contains the beginning and ending control point
    for the path.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateWire(self, startControlPoint: ControlPoint, endControlPoint: ControlPoint, segments: 'list[ISegment]', stockData: StockData, stocks: 'list[Stock]', lengthOfWire: float) -> Wire:
        """
        Creates a wire object.  
        
        Signature ``CreateWire(startControlPoint, endControlPoint, segments, stockData, stocks, lengthOfWire)`` 
        
        :param startControlPoint:  start of the path  
        :type startControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endControlPoint:  end of the path  
        :type endControlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        :param segments:  The list of segments this wire is following.  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param stockData: 
        :type stockData: :py:class:`NXOpen.Routing.StockData` 
        :param stocks:  Stock bodies that cover the segments.                                                                          Can be none and the system will generate them. 
        :type stocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param lengthOfWire: 
        :type lengthOfWire: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Wire` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class WindCatcherBuilderWindCatcherTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WindCatcherBuilderWindCatcherType():
    """
    Specifies the type of Wind Catcher. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Arc", " - "
       "Triangle", " - "
    """
    Arc = 0  # WindCatcherBuilderWindCatcherTypeMemberType
    Triangle = 1  # WindCatcherBuilderWindCatcherTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WindCatcherBuilder(NXOpen.Builder):
    """
    Builder class for Wind Catcher feature.  
    
    See :py:class:`NXOpen.Routing.WindCatcher`
    for the Wind Catcher class documentation.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateWindCatcherBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class WindCatcherType():
        """
        Specifies the type of Wind Catcher. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Arc", " - "
           "Triangle", " - "
        """
        Arc = 0  # WindCatcherBuilderWindCatcherTypeMemberType
        Triangle = 1  # WindCatcherBuilderWindCatcherTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetClosestParentDuctSegment(self) -> LineSegment:
        """
        Returns the linear segment under the Parent Duct that is closest to the Wind Catcher.  
        
        Signature ``GetClosestParentDuctSegment()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.LineSegment` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    EndAngleExpression: NXOpen.Expression = ...
    """
    Returns  the angle in degrees between the wind direction vector and the open face of the Wind Catcher.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    ParentDuct: Stock = ...
    """
    Returns or sets  the duct from which the Wind Catcher derives the wind direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentDuct`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Stock` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``ParentDuct`` 
    
    :param parentDuct: 
    :type parentDuct: :py:class:`NXOpen.Routing.Stock` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    ReverseWindDirection: bool = ...
    """
    Returns or sets  the flag that indicates whether the wind direction is reversed from its normal direction.  
    
    **  The normal direction for the wind either matches the flow direction, if the parent stock
    **  is part of a Run, or matches the parent stock's segment direction from the start control point
    **  to the end control point.
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseWindDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseWindDirection`` 
    
    :param windDirection: 
    :type windDirection: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    TrimToParentDuct: bool = ...
    """
    Returns or sets  the flag that indicates whether the Wind Catcher's duct should be trimmed back to the top of the parent duct.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimToParentDuct`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimToParentDuct`` 
    
    :param trim: 
    :type trim: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Type: WindCatcherBuilderWindCatcherType = ...
    """
    Returns or sets  the type of Wind Catcher.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.WindCatcherBuilderWindCatcherType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param windCatcherType: 
    :type windCatcherType: :py:class:`NXOpen.Routing.WindCatcherBuilderWindCatcherType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    WindCatcherDuct: Stock = ...
    """
    Returns or sets  the duct on which the Wind Catcher attaches.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindCatcherDuct`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Stock` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``WindCatcherDuct`` 
    
    :param windCatcherDuct: 
    :type windCatcherDuct: :py:class:`NXOpen.Routing.Stock` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Null: WindCatcherBuilder = ...  # unknown typename


class CrossSectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.CrossSection` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCrossSection(self, crossCurves: 'list[NXOpen.Curve]', offset: NXOpen.Expression, secondOffset: NXOpen.Expression, style: StockStyle) -> CrossSection:
        """
        Creates a new :py:class:`NXOpen.Routing.CrossSection` object.  
        
        This object
        defines a profile for sweeping :py:class:`NXOpen.Routing.Stock` objects. In
        order to build stocks using this cross section, the cross section must be
        contained in a :py:class:`NXOpen.Routing.StockData` object.
        
        Signature ``CreateCrossSection(crossCurves, offset, secondOffset, style)`` 
        
        :param crossCurves: 
        :type crossCurves: list of :py:class:`NXOpen.Curve` 
        :param offset:  First Offset value, may be None  
        :type offset: :py:class:`NXOpen.Expression` 
        :param secondOffset:  Second Offset value, may be None  
        :type secondOffset: :py:class:`NXOpen.Expression` 
        :param style: 
        :type style: :py:class:`NXOpen.Routing.StockStyle` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CrossSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class PlacementSolutionsBuilder(NXOpen.Builder):
    """
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreatePlacementSolutionsBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def InitializePlacementData(self, part: NXOpen.TaggedObject, placementPos: NXOpen.Point3d, partToPlace: NXOpen.TaggedObject) -> None:
        """
        Initialize Placement Data
        
        Signature ``InitializePlacementData(part, placementPos, partToPlace)`` 
        
        :param part:  The part which the new part was dropped on.  
        :type part: :py:class:`NXOpen.TaggedObject` 
        :param placementPos:  Location the part was placed  
        :type placementPos: :py:class:`NXOpen.Point3d` 
        :param partToPlace:  The part being placed.  
        :type partToPlace: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetNumberOfSolutions(self) -> int:
        """
        Returns the total number of solutions based on the placement object.  
        
        Signature ``GetNumberOfSolutions()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSolutionIndex(self) -> int:
        """
        Returns the current index of the solution.  
        
        For example, index 1 of 10 solutions.  
        
        Signature ``GetSolutionIndex()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def NextSolution(self) -> None:
        """
        Cycle to the next solution.  
        
        Signature ``NextSolution()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FirstSolution(self) -> None:
        """
        Cycle to the first solution.  
        
        Signature ``FirstSolution()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def PreviousSolution(self) -> None:
        """
        Cycle to the previous solution 
        
        Signature ``PreviousSolution()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def ApplyConstraintsAndClear(self) -> None:
        """
        Commit the solution and apply constraints if needed.  
        
        Signature ``ApplyConstraintsAndClear()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def ApplyConstraintsAndClear(self, lockEngagement: bool, lockRotation: bool) -> None:
        """
        Commit the solution and apply constraints if needed.  
        
        Signature ``ApplyConstraintsAndClear(lockEngagement, lockRotation)`` 
        
        :param lockEngagement:  Lock engagement if applicable.  
        :type lockEngagement: bool 
        :param lockRotation:   Lock Rotation if applicable.  
        :type lockRotation: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def ApplyConstraintsAndClear(self, lockEngagement: bool, lockRotation: bool, fixPart: bool) -> None:
        """
        Commit the solution and apply constraints if needed.  
        
        Signature ``ApplyConstraintsAndClear(lockEngagement, lockRotation, fixPart)`` 
        
        :param lockEngagement:  Lock engagement if applicable.  
        :type lockEngagement: bool 
        :param lockRotation:  Lock Rotation if applicable.  
        :type lockRotation: bool 
        :param fixPart:  Fix Part if applicable.  
        :type fixPart: bool 
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ApplyPortRotation(self, angle: float) -> None:
        """
        Applies a rotation to the component about the axis of the port being used for placement.  
        
        Signature ``ApplyPortRotation(angle)`` 
        
        :param angle:  Angle to apply.  
        :type angle: float 
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetConsiderPorts(self) -> bool:
        """
        Returns false if the first placement solution maintains the origin and orientation of the original component.  
        
        Signature ``GetConsiderPorts()`` 
        
        :returns:  Are ports to be considered when finding the first placement solution?  
        :rtype: bool 
        
        .. versionadded:: NX10.3.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetConsiderPorts(self, considerPorts: bool) -> None:
        """
        Set to false to include a placement solution maintaining the origin and orientation of the component being replaced.  
        
        This solution, where ports are not considered in the calculation, will be the first solution. 
        
        Signature ``SetConsiderPorts(considerPorts)`` 
        
        :param considerPorts:  Are ports to be considered when finding the first placement solution?  
        :type considerPorts: bool 
        
        .. versionadded:: NX10.3.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOnlyPrimaryPlacementSolutions(self) -> bool:
        """
        Is Place Part only considering the primary placement solutions?  
        
        Signature ``GetOnlyPrimaryPlacementSolutions()`` 
        
        :returns:  Are only the primary placement solutions to be found?  
        :rtype: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOnlyPrimaryPlacementSolutions(self, onlyPrimaryPlacementSolutions: bool) -> None:
        """
        True tells Place Part to only consider the primary placement solutions.  
        
        Signature ``SetOnlyPrimaryPlacementSolutions(onlyPrimaryPlacementSolutions)`` 
        
        :param onlyPrimaryPlacementSolutions:  Are only the primary placement solutions to be found?  
        :type onlyPrimaryPlacementSolutions: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLookForAdditionalPlacementSolutions(self) -> bool:
        """
        Is Place Part looking for additional placement solutions? Used for Maintain Origin and Orientation replacement.  
        
        Signature ``GetLookForAdditionalPlacementSolutions()`` 
        
        :returns:  Are additional placement solutions to be found?  
        :rtype: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetLookForAdditionalPlacementSolutions(self, lookForAdditionalPlacementSolutions: bool) -> None:
        """
        Set to true to look for additional placement solutions.  
        
        Used for Maintain Origin and Orientation replacement. 
        
        Signature ``SetLookForAdditionalPlacementSolutions(lookForAdditionalPlacementSolutions)`` 
        
        :param lookForAdditionalPlacementSolutions:  Are additional placement solutions to be found?  
        :type lookForAdditionalPlacementSolutions: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: PlacementSolutionsBuilder = ...  # unknown typename


class HandrailBuilderPostTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HandrailBuilderPostTypes():
    """
    The post type: Start, Intermediate, None, End.
    Start implies closing rails must be closed to the start post.
    Intermediate implies that the post is neither a start nor an end post but in the middle.
    None implies the post is intermediate with rails but without a post.
    End implies the post is the last of the posts.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", " - "
       "Intermediate", " - "
       "NotSet", " - "
       "End", " - "
    """
    Start = 0  # HandrailBuilderPostTypesMemberType
    Intermediate = 1  # HandrailBuilderPostTypesMemberType
    NotSet = 2  # HandrailBuilderPostTypesMemberType
    End = 3  # HandrailBuilderPostTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HandrailBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.HandrailBuilder`
    Creates a handrail from a selected point.  
    
    The handrail is created by
    optionally placing a post depending on the post type followed by placing
    the rails across the route control points corresponding to the posts.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateHandrailBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class PostTypes():
        """
        The post type: Start, Intermediate, None, End.
        Start implies closing rails must be closed to the start post.
        Intermediate implies that the post is neither a start nor an end post but in the middle.
        None implies the post is intermediate with rails but without a post.
        End implies the post is the last of the posts.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Start", " - "
           "Intermediate", " - "
           "NotSet", " - "
           "End", " - "
        """
        Start = 0  # HandrailBuilderPostTypesMemberType
        Intermediate = 1  # HandrailBuilderPostTypesMemberType
        NotSet = 2  # HandrailBuilderPostTypesMemberType
        End = 3  # HandrailBuilderPostTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetHandrailPartCharx(self, partCharx: CharacteristicList) -> None:
        """
        Sets the handrail part characteristics 
        
        Signature ``SetHandrailPartCharx(partCharx)`` 
        
        :param partCharx:  The characteristics to use for the handrail posts  
        :type partCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def PlaceHandrail(self, postLocation: NXOpen.Point3d) -> None:
        """
        Creates a handrail post, horizontal railings assembly components and places them in the appropriate orientation.  
        
        Signature ``PlaceHandrail(postLocation)`` 
        
        :param postLocation:  The point where the handrail is to be placed  
        :type postLocation: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def ReverseLastPost(self) -> None:
        """
        Reverses the orientation of the last placed post 
        
        Signature ``ReverseLastPost()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    AutoCloseOption: bool = ...
    """
    Returns or sets  an option to automatically close the handrail 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoCloseOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``AutoCloseOption`` 
    
    :param autoClose: 
    :type autoClose: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    HasHorizontalRails: bool = ...
    """
    Returns or sets  an option to create horizontal rail stock 
    
    <hr>
    
    Getter Method
    
    Signature ``HasHorizontalRails`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``HasHorizontalRails`` 
    
    :param railOption: 
    :type railOption: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    PostType: HandrailBuilderPostTypes = ...
    """
    Returns or sets  the type of post: Start, Intermediate, None, End 
    
    <hr>
    
    Getter Method
    
    Signature ``PostType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.HandrailBuilderPostTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    
    <hr>
    
    Setter Method
    
    Signature ``PostType`` 
    
    :param postType: 
    :type postType: :py:class:`NXOpen.Routing.HandrailBuilderPostTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_platform ("Routing Platform")
    """
    Null: HandrailBuilder = ...  # unknown typename


class SelectLineSegment(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: LineSegment) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.LineSegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: LineSegment) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.LineSegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: LineSegment, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.LineSegment` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: LineSegment, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: LineSegment, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Routing.LineSegment` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Routing.LineSegment` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: LineSegment, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.LineSegment` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> LineSegment:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Routing.LineSegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: LineSegment) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.LineSegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Routing.LineSegment`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Routing.LineSegment`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Routing.LineSegment`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Routing.LineSegment`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: LineSegment = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Routing.LineSegment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Routing.LineSegment` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectLineSegment = ...  # unknown typename


class InteriorMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Interior():
    """
    Option to query if an existing :py:class:`NXOpen.Routing.ISegment`
    is interior to any :py:class:`NXOpen.Part`. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotInteriorToPart", "Is not interior to any part"
       "InteriorToPart", "Is interior to some part"
    """
    NotInteriorToPart = 0  # InteriorMemberType
    InteriorToPart = 1  # InteriorMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FormboardFramePattern(FormboardFrame):
    """
    Represents a Formboard Frame Pattern.  
    
    .. versionadded:: NX5.0.0
    """
    Null: FormboardFramePattern = ...  # unknown typename


class DeleteGapsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.DeleteGapsBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDeleteGapsBuilder`
    
    .. versionadded:: NX8.5.0
    """
    ObjectCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: DeleteGapsBuilder = ...  # unknown typename


class FormboardFrameCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.FormboardFrame` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFormboardFrameByRectangle(self, point: NXOpen.Point, height: NXOpen.Scalar, width: NXOpen.Scalar) -> FormboardFrame:
        """
        Creates a :py:class:`NXOpen.Routing.FormboardFrame` object
        using a rectangle defined by a :py:class:`NXOpen.Point` object and
        two :py:class:`NXOpen.Scalar` objects that represent the height and width.  
        
        Signature ``CreateFormboardFrameByRectangle(point, height, width)`` 
        
        :param point:  Lower left corner  
        :type point: :py:class:`NXOpen.Point` 
        :param height: 
        :type height: :py:class:`NXOpen.Scalar` 
        :param width: 
        :type width: :py:class:`NXOpen.Scalar` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FormboardFrame` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def ImportPattern(self, filename: str, type: int, frameName: str) -> tuple:
        """
        Creates a :py:class:`NXOpen.Routing.FormboardFrame` object by
        importing formboard frame pattern   
        
        Signature ``ImportPattern(filename, type, frameName)`` 
        
        :param filename:  Filename of the file to be imported 
        :type filename: str 
        :param type:  Type of file imported 
        :type type: int 
        :param frameName:  new name of frame  
        :type frameName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (newFrame, group).  
        
        newFrame is a :py:class:`NXOpen.Routing.FormboardFrame`.   returning new frame group is a :py:class:`NXOpen.DisplayableObject`.   returning the geometry of imported file
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    


class PointDefinitionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PointDefinition():
    """
    Available definitions for the point location for the Point and Length application method 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", "The point defines the start of the overstock application."
       "Middle", "The point defines the middle of the overstock application."
       "End", "The point defines the end of the overstock application."
    """
    Start = 0  # PointDefinitionMemberType
    Middle = 1  # PointDefinitionMemberType
    End = 2  # PointDefinitionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BulkReplacementBuilder(NXOpen.Builder):
    """
    Builder class for Bulk Replacement which manages replacement operations on Routing objects   
    
    Not support KF.
    
    .. versionadded:: NX12.0.0
    """
    
    def SetReplacementMethodForObject(self, objectTag: NXOpen.NXObject, method: RoutingBulkReplacementBuilderReplacementMethodType) -> None:
        """
        The replacement method setter 
        
        Signature ``SetReplacementMethodForObject(objectTag, method)`` 
        
        :param objectTag:  The object for which to set the replacement method  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param method:  The replacement method to use for replacement of this object  
        :type method: :py:class:`NXOpen.Routing.RoutingBulkReplacementBuilderReplacementMethodType` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReplacementMethodForAllObjects(self, method: RoutingBulkReplacementBuilderReplacementMethodType) -> None:
        """
        The replacement method setter for all objects 
        
        Signature ``SetReplacementMethodForAllObjects(method)`` 
        
        :param method:  The replacement method to set for all objects  
        :type method: :py:class:`NXOpen.Routing.RoutingBulkReplacementBuilderReplacementMethodType` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetReplacementMethodForObject(self, objectTag: NXOpen.NXObject) -> RoutingBulkReplacementBuilderReplacementMethodType:
        """
        The replacement method getter  
        
        Signature ``GetReplacementMethodForObject(objectTag)`` 
        
        :param objectTag:  The object for which to get the replacement method  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :returns:  The replacement method currently set for this object  
        :rtype: :py:class:`NXOpen.Routing.RoutingBulkReplacementBuilderReplacementMethodType` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRetainReasonForObject(self, objectTag: NXOpen.NXObject) -> RoutingBulkReplacementBuilderRetainReasonType:
        """
        The retain reason getter  
        
        Signature ``GetRetainReasonForObject(objectTag)`` 
        
        :param objectTag:  The object for which to get the retain reason  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :returns:  The retain reason currently set for this object  
        :rtype: :py:class:`NXOpen.Routing.RoutingBulkReplacementBuilderRetainReasonType` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReplacementObjectIdentifierForObject(self, objectTag: NXOpen.NXObject, objectIdentifier: str) -> None:
        """
        The replacement object identifier method setter 
        
        Signature ``SetReplacementObjectIdentifierForObject(objectTag, objectIdentifier)`` 
        
        :param objectTag:  The object for which to set the replacement object  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param objectIdentifier:  The object identifier for which to set as the replacement object  
        :type objectIdentifier: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReplacementClassificationObjectForObject(self, objectTag: NXOpen.NXObject, classificationClassId: str, classificationInstanceId: str) -> None:
        """
        The replacement object method setter 
        
        Signature ``SetReplacementClassificationObjectForObject(objectTag, classificationClassId, classificationInstanceId)`` 
        
        :param objectTag:  The object for which to set the replacement object  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param classificationClassId:  The classification object class id of the object to to set as the replacement object  
        :type classificationClassId: str 
        :param classificationInstanceId:  The classification object instance id of the object to to set as the replacement object  
        :type classificationInstanceId: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReplacementPartSpecificationForObject(self, objectTag: NXOpen.NXObject, partSpecification: str) -> None:
        """
        The replacement part specification method setter 
        
        Signature ``SetReplacementPartSpecificationForObject(objectTag, partSpecification)`` 
        
        :param objectTag:  The object for which to set the replacement object  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param partSpecification:  The full part specification of the part to use for replacement  
        :type partSpecification: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetReplacementObjectIdentifierForObject(self, objectTag: NXOpen.NXObject) -> str:
        """
        The replacement object identifier getter  
        
        Signature ``GetReplacementObjectIdentifierForObject(objectTag)`` 
        
        :param objectTag:  The object for which to get the replacement object  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :returns:  The object identifier for which is currently set as the replacement object  
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetReplacementObjectIdentifiersFromSearchResultsForObject(self, objectTag: NXOpen.NXObject) -> 'list[str]':
        """
        The possible replacement object identifiers method getter  
        
        Signature ``GetReplacementObjectIdentifiersFromSearchResultsForObject(objectTag)`` 
        
        :param objectTag:  The object for which to get the possible replacement object identifiers  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :returns:  array of object identifiers which are possible replacement objects  
        :rtype: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAttributeForObject(self, objectTag: NXOpen.NXObject, attributeIdType: RoutingAttributeIdentifierType, attributeId: str, value: str) -> None:
        """
        The object attribute value method setter 
        
        Signature ``SetAttributeForObject(objectTag, attributeIdType, attributeId, value)`` 
        
        :param objectTag:  The object for which to set the attribute value  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attributeIdType:  The type of attribute being set  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute being set  
        :type attributeId: str 
        :param value:  The new value for the attribute  
        :type value: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAttributeForAllObjects(self, attributeIdType: RoutingAttributeIdentifierType, attributeId: str, value: str) -> None:
        """
        The attribute value setter for all objects 
        
        Signature ``SetAttributeForAllObjects(attributeIdType, attributeId, value)`` 
        
        :param attributeIdType:  The type of attribute value being set  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute value being set  
        :type attributeId: str 
        :param value:  The new value for the attribute  
        :type value: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAttributeForObject(self, objectTag: NXOpen.NXObject, attributeIdType: RoutingAttributeIdentifierType, attributeId: str) -> str:
        """
        The object attribute value method getter  
        
        Signature ``GetAttributeForObject(objectTag, attributeIdType, attributeId)`` 
        
        :param objectTag:  The object for which to get the attribute value  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attributeIdType:  The type of attribute being retrieved  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute value being retrieved  
        :type attributeId: str 
        :returns:  The value of the attribute  
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ClearAttributeForObject(self, objectTag: NXOpen.NXObject, attributeIdType: RoutingAttributeIdentifierType, attributeId: str) -> None:
        """
        The object attribute value clear method 
        
        Signature ``ClearAttributeForObject(objectTag, attributeIdType, attributeId)`` 
        
        :param objectTag:  The object for which to clear the attribute value  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attributeIdType:  The type of attribute being cleared  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute value being cleared  
        :type attributeId: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ClearAttributeForAllObjects(self, attributeIdType: RoutingAttributeIdentifierType, attributeId: str) -> None:
        """
        The attribute value clear method for all objects 
        
        Signature ``ClearAttributeForAllObjects(attributeIdType, attributeId)`` 
        
        :param attributeIdType:  The type of attribute being cleared  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute value being cleared  
        :type attributeId: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSelectedObjectValuesForAttribute(self, attributeIdType: RoutingAttributeIdentifierType, attributeId: str) -> 'list[str]':
        """
        The method that retrieves all the values for a given attribute from all the objects  
        
        Signature ``GetSelectedObjectValuesForAttribute(attributeIdType, attributeId)`` 
        
        :param attributeIdType:  The type of attribute for which to get all the values  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute for which to get all the values  
        :type attributeId: str 
        :returns:  The values retrieved from all the objects for the attribute  
        :rtype: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPartLibraryValuesForAttributeForObject(self, objectTag: NXOpen.NXObject, attributeIdType: RoutingAttributeIdentifierType, attributeId: str) -> 'list[str]':
        """
        The method gets the part libray values for a given attribute for the specified object  
        
        Signature ``GetPartLibraryValuesForAttributeForObject(objectTag, attributeIdType, attributeId)`` 
        
        :param objectTag:  The object for which to get the part library values  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attributeIdType:  The type of attribute for which to get the values  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute for which to get the values  
        :type attributeId: str 
        :returns:  The values retrieved from all the part library for the attribute  
        :rtype: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SearchForReplacementForObject(self, objectTag: NXOpen.NXObject) -> None:
        """
        The method that initiates a search for the replacement object 
        
        Signature ``SearchForReplacementForObject(objectTag)`` 
        
        :param objectTag:  The object for which to initiate the search  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SearchForReplacementForObjectOnAttributes(self, objectTag: NXOpen.NXObject, attributeIdTypes: 'list[RoutingAttributeIdentifierType]', attributeIds: 'list[str]') -> None:
        """
        The method that initiates a search for the replacement object using on the passed in attributes as criteria 
        
        Signature ``SearchForReplacementForObjectOnAttributes(objectTag, attributeIdTypes, attributeIds)`` 
        
        :param objectTag:  The object for which to initiate the search  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attributeIdTypes:  The array of attribute types to limit the search  
        :type attributeIdTypes: list of :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeIds:  The array of attribute identifiers to limit the search  
        :type attributeIds: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CopySearchResultsToObject(self, fromObjectTag: NXOpen.NXObject, toObjectTag: NXOpen.NXObject) -> None:
        """
        The method that copies the search results from one object to another 
        
        Signature ``CopySearchResultsToObject(fromObjectTag, toObjectTag)`` 
        
        :param fromObjectTag:  The object from which you want to copy the search results  
        :type fromObjectTag: :py:class:`NXOpen.NXObject` 
        :param toObjectTag:  The object to which you want to copy the search results  
        :type toObjectTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetValueForAttributeFromReferenceObject(self, attributeIdType: RoutingAttributeIdentifierType, attributeId: str) -> str:
        """
        The method that returns the value of an attribute from the reference object  
        
        Signature ``GetValueForAttributeFromReferenceObject(attributeIdType, attributeId)`` 
        
        :param attributeIdType:  The type of attribute for which to get the value  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute for which to get all the values  
        :type attributeId: str 
        :returns:  The value of the attribute from the reference object  
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAttributeValueForObjectFromReferenceObject(self, objectTag: NXOpen.NXObject, attributeIdType: RoutingAttributeIdentifierType, attributeId: str) -> None:
        """
        The method that sets the attribute value from the reference object on the specifiec object 
        
        Signature ``SetAttributeValueForObjectFromReferenceObject(objectTag, attributeIdType, attributeId)`` 
        
        :param objectTag:  The object for which to set the attribute value from the reference object  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attributeIdType:  The type of attribute for which to set the value from the reference object  
        :type attributeIdType: :py:class:`NXOpen.Routing.RoutingAttributeIdentifierType` 
        :param attributeId:  The identifier of the attribute for which to set the value from the reference object  
        :type attributeId: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPartReferenceSet(self, referenceSetName: str) -> None:
        """
        The method that sets the reference set used for newly replaced objects 
        
        Signature ``SetPartReferenceSet(referenceSetName)`` 
        
        :param referenceSetName:  The name of the reference set  
        :type referenceSetName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPartReferenceSet(self) -> str:
        """
        The method that gets the reference set used for newly replaced objects  
        
        Signature ``GetPartReferenceSet()`` 
        
        :returns:  The name of the reference set  
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPartLayer(self, layer: int) -> None:
        """
        The method that sets the layer used for newly replaced objects 
        
        Signature ``SetPartLayer(layer)`` 
        
        :param layer:  The number of the layer  
        :type layer: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPartLayer(self) -> int:
        """
        The method that gets the layer used for newly replaced objects  
        
        Signature ``GetPartLayer()`` 
        
        :returns:  The number of the layer  
        :rtype: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSequenceOfObjectReplacement(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        The method that sets the sequence of object replacement 
        
        Signature ``SetSequenceOfObjectReplacement(objects)`` 
        
        :param objects:  The objects in the order of them to be replaced  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    ReferenceObject: NXOpen.SelectNXObject = ...
    """
    Returns  the reference object used to extract characteristics for Bulk Replacement 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    RouteObjectCollector: RouteObjectCollector = ...
    """
    Returns  the Routing object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``RouteObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: BulkReplacementBuilder = ...  # unknown typename


class OffsetPath(NXOpen.NXObject, IPath):
    """
    The Routing OffsetPath object is the set of information needed to define an offset route.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.OffsetPathCollection`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetOffsetPathSegments(self) -> 'list[ISegment]':
        """
        The path segments for an offset object.  
        
        Signature ``GetOffsetPathSegments()`` 
        
        :returns:  segment list for the offset object  
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOffsetPathSegments(self, segments: 'list[ISegment]') -> None:
        """
        The path segments for an offset object.  
        
        Signature ``SetOffsetPathSegments(segments)`` 
        
        :param segments:  segment list for the offset object  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOffsetReferenceAxes(self) -> tuple:
        """
        The reference axes for an offset object.  
        
        Signature ``GetOffsetReferenceAxes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (orgin, xVector, yVector). orgin is a :py:class:`NXOpen.Point3d`.   origin for the offset object           xVector is a :py:class:`NXOpen.Vector3d`.   X reference axes for the offset object yVector is a :py:class:`NXOpen.Vector3d`.   Y reference axes for the offset object 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOffsetReferenceAxes(self, orgin: NXOpen.Point3d, xVector: NXOpen.Vector3d, yVector: NXOpen.Vector3d) -> None:
        """
        The reference axes for an offset object.  
        
        Signature ``SetOffsetReferenceAxes(orgin, xVector, yVector)`` 
        
        :param orgin:  origin for the offset object            
        :type orgin: :py:class:`NXOpen.Point3d` 
        :param xVector:  X reference axes for the offset object  
        :type xVector: :py:class:`NXOpen.Vector3d` 
        :param yVector:  Y reference axes for the offset object  
        :type yVector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOffsetPaths(self) -> 'list[IPath]':
        """
        Returns the list of all of the offset paths for a master path  
        
        Signature ``GetOffsetPaths()`` 
        
        :returns:  list of all of the offset paths in this master object  
        :rtype: list of :py:class:`NXOpen.Routing.IPath` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetMasterPath(self) -> IPath:
        """
        The master path object for this offset object.  
        
        Signature ``GetMasterPath()`` 
        
        :returns:  master path for this offset object  
        :rtype: :py:class:`NXOpen.Routing.IPath` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetMasterPath(self, masterPath: IPath) -> None:
        """
        The master path object for this offset object.  
        
        Signature ``SetMasterPath(masterPath)`` 
        
        :param masterPath:  master path for this offset object  
        :type masterPath: :py:class:`NXOpen.Routing.IPath` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemovePathAssociativityToImmediateChildren(self) -> None:
        """
        Breaks the associativity of a parent ( master ) path to 
        its immediate children ( slave ) paths.  
        
        Signature ``RemovePathAssociativityToImmediateChildren()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemovePathAssociativityFromParent(self) -> None:
        """
        Breaks the associativity of a child ( slave ) path to its parent ( master ) path.  
        
        Signature ``RemovePathAssociativityFromParent()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentList(self) -> 'list[ISegment]':
        """
        Returns the list of all of the segments contained in the IPath  
        
        Signature ``GetSegmentList()`` 
        
        :returns:  list of all of the segments in this IPath object  
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddSegmentsToList(self, objs: 'list[ISegment]') -> None:
        """
        Adds segment(s) to an IPath object.  
        
        Signature ``AddSegmentsToList(objs)`` 
        
        :param objs:  list of segments that are to be added  
        :type objs: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DelSegmentsFromList(self, objs: 'list[ISegment]') -> None:
        """
        Removes segment(s) from the IPath object.  
        
        Signature ``DelSegmentsFromList(objs)`` 
        
        :param objs:  list of segments that are to be deleted  
        :type objs: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    BendRadius: float = ...
    """
    Returns or sets  the bend radius for an offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BendRadius`` 
    
    :param radius: 
    :type radius: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    BendRatio: float = ...
    """
    Returns or sets  the bend ratio for an offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendRatio`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BendRatio`` 
    
    :param ratio: 
    :type ratio: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    CopyCornerFlag: bool = ...
    """
    Returns or sets  the copy corner flag for an offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyCornerFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CopyCornerFlag`` 
    
    :param copyCorner: 
    :type copyCorner: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    IsMaster: bool = ...
    """
    Returns or sets  the isMaster state for this offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsMaster`` 
    
    :returns:  the state of the offset path object  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``IsMaster`` 
    
    :param masterState:  the state of the offset path object  
    :type masterState: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    IsSlave: bool = ...
    """
    Returns or sets  the isSlave state for this offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsSlave`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``IsSlave`` 
    
    :param masterState:  the state of the offset path object  
    :type masterState: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    MaintainStockFlag: bool = ...
    """
    Returns or sets  the use maintain stock flag for an offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaintainStockFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``MaintainStockFlag`` 
    
    :param maintainStock: 
    :type maintainStock: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    OffsetVector: NXOpen.Vector3d = ...
    """
    Returns or sets  the vector for an offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetVector`` 
    
    :returns:  vector for the offset object  
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetVector`` 
    
    :param vector:  vector for the offset object  
    :type vector: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    UseBendRatio: bool = ...
    """
    Returns or sets  the use bend ratio flag for an offset object.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseBendRatio`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``UseBendRatio`` 
    
    :param ratioState: 
    :type ratioState: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    ControlPointStart: ControlPoint = ...
    """
    Returns or sets  the start ControlPoint for an IPath object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPointStart`` 
    
    :returns:  start ControlPoint for the IPath object  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPointStart`` 
    
    :param start:  start ControlPoint for the IPath object  
    :type start: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    ControlPointEnd: ControlPoint = ...
    """
    Returns or sets  the end ControlPoint for an IPath object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPointEnd`` 
    
    :returns:  end ControlPoint for the IPath object  
    :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPointEnd`` 
    
    :param end:  end ControlPoint for the IPath object  
    :type end: :py:class:`NXOpen.Routing.ControlPoint` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: OffsetPath = ...  # unknown typename


class BendCornerCollectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendCornerCollectionType():
    """
    Option for creating a bend using a bend table or using radius or ratio 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RadiusRatio", "Using radius or ratio to create a bend corner."
       "Table", "Using a bend table to create a bend corner."
    """
    RadiusRatio = 0  # BendCornerCollectionTypeMemberType
    Table = 1  # BendCornerCollectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendCornerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.BendCorner` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    class Type():
        """
        Option for creating a bend using a bend table or using radius or ratio 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RadiusRatio", "Using radius or ratio to create a bend corner."
           "Table", "Using a bend table to create a bend corner."
        """
        RadiusRatio = 0  # BendCornerCollectionTypeMemberType
        Table = 1  # BendCornerCollectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCorner(self, rcp: ControlPoint, bendMethod: CornerTypeBuilderBendMethods, bendRatio: float, bendRadius: float) -> BendCorner:
        """
        Create a bend corner object at a Control Point.  
        
        Signature ``CreateCorner(rcp, bendMethod, bendRatio, bendRadius)`` 
        
        :param rcp:  Route control point to bend.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendMethod:  Enumerated bend method.  
        :type bendMethod: :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods` 
        :param bendRatio:  Bend ratio is used only if bend method is set to                                                                    :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods.RatioToDiameter <NXOpen.Routing.CornerTypeBuilderBendMethods>`.                                                                    Must be greater than 0.5.  
        :type bendRatio: float 
        :param bendRadius:  Radius of bend corner arc, used only if bend method is set to                                                                    :py:class:`NXOpen.Routing.CornerTypeBuilderBendMethods.Radius <NXOpen.Routing.CornerTypeBuilderBendMethods>`.                                                                    Must be greater than 0.  
        :type bendRadius: float 
        :returns:  The new bend corner.  
        :rtype: :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def Create(self, rcp: ControlPoint, useBendRatio: bool, bendRatio: float, bendRadius: float) -> BendCorner:
        """
        Create a bend corner object at a Control Point.  
        
        Signature ``Create(rcp, useBendRatio, bendRatio, bendRadius)`` 
        
        :param rcp:  Route control point to bend.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param useBendRatio:  TRUE: use bend ratio calculation,                                       FALSE: use given radius  
        :type useBendRatio: bool 
        :param bendRatio:  Bend ratio only used if use_bend_ratio is                                       TRUE. Must be greater than 0.5.  
        :type bendRatio: float 
        :param bendRadius:  Radius of bend corner arc, only used if                                       use_bend_ratio is FALSE. Must be greater than                                       0.  
        :type bendRadius: float 
        :returns:  The new bend corner.  
        :rtype: :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`Routing.BendCornerCollection.CreateCorner` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AssignCornerByBendTable(self, rcp: ControlPoint, bendTable: str) -> BendCorner:
        """
        This routine assigns a bend corner to the given input RCP object using
        a bend table entry.  
        
        This "assignment" can involve the removal of an existing
        corner at this location and the creation of a new corner.  The
        application view must be loaded before attempting to assign a
        bend corner of this type.   
        
        Signature ``AssignCornerByBendTable(rcp, bendTable)`` 
        
        :param rcp:  Control point to assign corner to.                                          None not allowed.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendTable:  The bend table entry that                                          is used to create bend corner  
        :type bendTable: str 
        :returns:  The newly created Bend Corner  
        :rtype: :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AssignCornerByBendRatio(self, bendCrn: ControlPoint, bendRatio: float) -> BendCorner:
        """
        This routine assigns a new bend corner to the given input bend corner object using
        bend ratio.  
        
        This "assignment" can involve the removal of an existing
        corner at this location and the creation of a new corner.  
        
        Signature ``AssignCornerByBendRatio(bendCrn, bendRatio)`` 
        
        :param bendCrn:  Input bend corner.   
        :type bendCrn: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendRatio:  Bend ratio must be greater than 0.5.  
        :type bendRatio: float 
        :returns:  The newly created Bend Corner  
        :rtype: :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AssignCornerByBendRadius(self, bendCrn: ControlPoint, bendRadius: float) -> BendCorner:
        """
        This routine assigns a new bend corner to the given input bend corner object using
        bend radius.  
        
        This "assignment" can involve the removal of an existing
        corner at this location and the creation of a new corner.  
        
        Signature ``AssignCornerByBendRadius(bendCrn, bendRadius)`` 
        
        :param bendCrn:  Input bend corner.  
        :type bendCrn: :py:class:`NXOpen.Routing.ControlPoint` 
        :param bendRadius:  Radius of bend corner arc.  
        :type bendRadius: float 
        :returns:  The newly created Bend Corner  
        :rtype: :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendAssociatedToSegment(self, segment: ISegment) -> BendCorner:
        """
        Enquire the Bend Corner that this segment represents.  
        
        (None can be returned, indicating that this segment does not
        represent a Bend Corner.)  
        
        Signature ``GetBendAssociatedToSegment(segment)`` 
        
        :param segment:  Segment being queried for the                                      Bend Corner it represents.  
        :type segment: :py:class:`NXOpen.Routing.ISegment` 
        :returns:  Bend Corner that segment represents
        (None can be returned,indicating that
        segment does not represent a Bend Corner).  
        :rtype: :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetBendCornersFromObjects(self, objects: 'list[NXOpen.NXObject]') -> 'list[BendCorner]':
        """
        Returns all the corners connected to the given objects, if any.  
        
        Can find corners from :py:class:`NXOpen.Routing.ControlPoint`s,
        :py:class:`NXOpen.Routing.ISegment`s, or :py:class:`NXOpen.Routing.Stock`. 
        
        Signature ``GetBendCornersFromObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.BendCorner` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class DesignRuleViolationCollectionModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DesignRuleViolationCollectionMode():
    """
    Design Rule Mode 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Concurrent", "Executes design rules on all concurrently logged objects. Use LogConcurrent method on :py:class:`NXOpen.Routing.RouteManager` to concurrently logged objects and GetConcurrent method to get all the concurrent objects"
       "Interactive", "Execute design rules during next interactive check"
       "Batch", "Executes design rules in a batch process"
    """
    Concurrent = 0  # DesignRuleViolationCollectionModeMemberType
    Interactive = 1  # DesignRuleViolationCollectionModeMemberType
    Batch = 2  # DesignRuleViolationCollectionModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolationCollectionReasonMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DesignRuleViolationCollectionReason():
    """
    Design Rule reason 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", " - "
       "CreatePath", " - "
       "HealPath", " - "
       "AssignCorner", " - "
       "AssignStock", " - "
       "RemoveStock", " - "
       "StockStyle", " - "
       "PlacePart", " - "
       "CreateFab", " - "
       "QualifyPart", " - "
       "MovePath", " - "
       "CopyPath", " - "
       "DeletePath", " - "
       "SubdivideSeg", " - "
       "SimplifyPath", " - "
       "RemovePart", " - "
       "MovePart", " - "
       "EditCharx", " - "
       "Interactive", " - "
       "Batch", " - "
       "OrientStock", " - "
       "UnifyPath", " - "
       "TransformPath", " - "
       "OffsetPath", " - "
       "AutoRoutePin", " - "
       "ManualRoutePin", " - "
       "AutoRouteComp", " - "
       "ManualRouteComp", " - "
       "Import", " - "
       "PartialAutoRouteComp", " - "
       "EditPlacePart", " - "
       "BulkReplacement", " - "
    """
    Unknown = 0  # DesignRuleViolationCollectionReasonMemberType
    CreatePath = 1  # DesignRuleViolationCollectionReasonMemberType
    HealPath = 2  # DesignRuleViolationCollectionReasonMemberType
    AssignCorner = 3  # DesignRuleViolationCollectionReasonMemberType
    AssignStock = 4  # DesignRuleViolationCollectionReasonMemberType
    RemoveStock = 5  # DesignRuleViolationCollectionReasonMemberType
    StockStyle = 6  # DesignRuleViolationCollectionReasonMemberType
    PlacePart = 7  # DesignRuleViolationCollectionReasonMemberType
    CreateFab = 8  # DesignRuleViolationCollectionReasonMemberType
    QualifyPart = 9  # DesignRuleViolationCollectionReasonMemberType
    MovePath = 10  # DesignRuleViolationCollectionReasonMemberType
    CopyPath = 11  # DesignRuleViolationCollectionReasonMemberType
    DeletePath = 12  # DesignRuleViolationCollectionReasonMemberType
    SubdivideSeg = 13  # DesignRuleViolationCollectionReasonMemberType
    SimplifyPath = 14  # DesignRuleViolationCollectionReasonMemberType
    RemovePart = 15  # DesignRuleViolationCollectionReasonMemberType
    MovePart = 16  # DesignRuleViolationCollectionReasonMemberType
    EditCharx = 17  # DesignRuleViolationCollectionReasonMemberType
    Interactive = 18  # DesignRuleViolationCollectionReasonMemberType
    Batch = 19  # DesignRuleViolationCollectionReasonMemberType
    OrientStock = 20  # DesignRuleViolationCollectionReasonMemberType
    UnifyPath = 21  # DesignRuleViolationCollectionReasonMemberType
    TransformPath = 22  # DesignRuleViolationCollectionReasonMemberType
    OffsetPath = 23  # DesignRuleViolationCollectionReasonMemberType
    AutoRoutePin = 24  # DesignRuleViolationCollectionReasonMemberType
    ManualRoutePin = 25  # DesignRuleViolationCollectionReasonMemberType
    AutoRouteComp = 26  # DesignRuleViolationCollectionReasonMemberType
    ManualRouteComp = 27  # DesignRuleViolationCollectionReasonMemberType
    Import = 28  # DesignRuleViolationCollectionReasonMemberType
    PartialAutoRouteComp = 29  # DesignRuleViolationCollectionReasonMemberType
    EditPlacePart = 30  # DesignRuleViolationCollectionReasonMemberType
    BulkReplacement = 31  # DesignRuleViolationCollectionReasonMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolationCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.DesignRuleViolation` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    class Mode():
        """
        Design Rule Mode 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Concurrent", "Executes design rules on all concurrently logged objects. Use LogConcurrent method on :py:class:`NXOpen.Routing.RouteManager` to concurrently logged objects and GetConcurrent method to get all the concurrent objects"
           "Interactive", "Execute design rules during next interactive check"
           "Batch", "Executes design rules in a batch process"
        """
        Concurrent = 0  # DesignRuleViolationCollectionModeMemberType
        Interactive = 1  # DesignRuleViolationCollectionModeMemberType
        Batch = 2  # DesignRuleViolationCollectionModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Reason():
        """
        Design Rule reason 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", " - "
           "CreatePath", " - "
           "HealPath", " - "
           "AssignCorner", " - "
           "AssignStock", " - "
           "RemoveStock", " - "
           "StockStyle", " - "
           "PlacePart", " - "
           "CreateFab", " - "
           "QualifyPart", " - "
           "MovePath", " - "
           "CopyPath", " - "
           "DeletePath", " - "
           "SubdivideSeg", " - "
           "SimplifyPath", " - "
           "RemovePart", " - "
           "MovePart", " - "
           "EditCharx", " - "
           "Interactive", " - "
           "Batch", " - "
           "OrientStock", " - "
           "UnifyPath", " - "
           "TransformPath", " - "
           "OffsetPath", " - "
           "AutoRoutePin", " - "
           "ManualRoutePin", " - "
           "AutoRouteComp", " - "
           "ManualRouteComp", " - "
           "Import", " - "
           "PartialAutoRouteComp", " - "
           "EditPlacePart", " - "
           "BulkReplacement", " - "
        """
        Unknown = 0  # DesignRuleViolationCollectionReasonMemberType
        CreatePath = 1  # DesignRuleViolationCollectionReasonMemberType
        HealPath = 2  # DesignRuleViolationCollectionReasonMemberType
        AssignCorner = 3  # DesignRuleViolationCollectionReasonMemberType
        AssignStock = 4  # DesignRuleViolationCollectionReasonMemberType
        RemoveStock = 5  # DesignRuleViolationCollectionReasonMemberType
        StockStyle = 6  # DesignRuleViolationCollectionReasonMemberType
        PlacePart = 7  # DesignRuleViolationCollectionReasonMemberType
        CreateFab = 8  # DesignRuleViolationCollectionReasonMemberType
        QualifyPart = 9  # DesignRuleViolationCollectionReasonMemberType
        MovePath = 10  # DesignRuleViolationCollectionReasonMemberType
        CopyPath = 11  # DesignRuleViolationCollectionReasonMemberType
        DeletePath = 12  # DesignRuleViolationCollectionReasonMemberType
        SubdivideSeg = 13  # DesignRuleViolationCollectionReasonMemberType
        SimplifyPath = 14  # DesignRuleViolationCollectionReasonMemberType
        RemovePart = 15  # DesignRuleViolationCollectionReasonMemberType
        MovePart = 16  # DesignRuleViolationCollectionReasonMemberType
        EditCharx = 17  # DesignRuleViolationCollectionReasonMemberType
        Interactive = 18  # DesignRuleViolationCollectionReasonMemberType
        Batch = 19  # DesignRuleViolationCollectionReasonMemberType
        OrientStock = 20  # DesignRuleViolationCollectionReasonMemberType
        UnifyPath = 21  # DesignRuleViolationCollectionReasonMemberType
        TransformPath = 22  # DesignRuleViolationCollectionReasonMemberType
        OffsetPath = 23  # DesignRuleViolationCollectionReasonMemberType
        AutoRoutePin = 24  # DesignRuleViolationCollectionReasonMemberType
        ManualRoutePin = 25  # DesignRuleViolationCollectionReasonMemberType
        AutoRouteComp = 26  # DesignRuleViolationCollectionReasonMemberType
        ManualRouteComp = 27  # DesignRuleViolationCollectionReasonMemberType
        Import = 28  # DesignRuleViolationCollectionReasonMemberType
        PartialAutoRouteComp = 29  # DesignRuleViolationCollectionReasonMemberType
        EditPlacePart = 30  # DesignRuleViolationCollectionReasonMemberType
        BulkReplacement = 31  # DesignRuleViolationCollectionReasonMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDesignRuleViolation(self, shortDescription: str, longDescription: str, objects: 'list[NXOpen.NXObject]') -> DesignRuleViolation:
        """
        Creates a :py:class:`NXOpen.Routing.DesignRuleViolation` object.  
        
        Once created, you must add the violation to a rule using :py:meth:`NXOpen.Routing.DesignRule.AddViolations`. 
        
        Signature ``CreateDesignRuleViolation(shortDescription, longDescription, objects)`` 
        
        :param shortDescription: 
        :type shortDescription: str 
        :param longDescription: 
        :type longDescription: str 
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX4.0.2
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`Routing.DesignRule.CreateViolation` instead.
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReasonExecuteRule(self, mode: DesignRuleViolationCollectionMode, reason: DesignRuleViolationCollectionReason, objs: 'list[NXOpen.NXObject]') -> 'list[DesignRuleViolation]':
        """
        Executes design rules and returns all the violations of the rule  
        
        Signature ``ReasonExecuteRule(mode, reason, objs)`` 
        
        :param mode:  Design Rule Mode  
        :type mode: :py:class:`NXOpen.Routing.DesignRuleViolationCollectionMode` 
        :param reason:  Design Rule Reason  
        :type reason: :py:class:`NXOpen.Routing.DesignRuleViolationCollectionReason` 
        :param objs: Objects to check the design rule violation against 
        :type objs: list of :py:class:`NXOpen.NXObject` 
        :returns:  Violations  
        :rtype: list of :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class SubdivideSegmentBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubdivideSegmentBuilderTypes():
    """
    Spacing method to use for subdivision. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AtPoint", "At Point"
       "EqualSegments", "Equal Segments"
       "ArcLengthSegments", "Arc Length Segments"
    """
    AtPoint = 0  # SubdivideSegmentBuilderTypesMemberType
    EqualSegments = 1  # SubdivideSegmentBuilderTypesMemberType
    ArcLengthSegments = 2  # SubdivideSegmentBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubdivideSegmentBuilderEqualSegmentsMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubdivideSegmentBuilderEqualSegmentsMethod():
    """
    Options for subdivision with Equal Segments spacing method.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EqualArcLength", "Equal Arc Length"
       "EqualParameter", "Equal Parameter"
    """
    EqualArcLength = 0  # SubdivideSegmentBuilderEqualSegmentsMethodMemberType
    EqualParameter = 1  # SubdivideSegmentBuilderEqualSegmentsMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubdivideSegmentBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.SubdivideSegmentBuilder`.  
    
    This is used 
    to subidivide a given segment into two or more segments based on one of the three
    spacing methods.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateSubdivideSegmentBuilder`
    
    Default values.
    
    =====================  ===============
    Property               Value
    =====================  ===============
    EqualSegmentsOption    EqualArcLength 
    ---------------------  ---------------
    SubdivideNumSegments   2 
    =====================  ===============
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Spacing method to use for subdivision. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AtPoint", "At Point"
           "EqualSegments", "Equal Segments"
           "ArcLengthSegments", "Arc Length Segments"
        """
        AtPoint = 0  # SubdivideSegmentBuilderTypesMemberType
        EqualSegments = 1  # SubdivideSegmentBuilderTypesMemberType
        ArcLengthSegments = 2  # SubdivideSegmentBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EqualSegmentsMethod():
        """
        Options for subdivision with Equal Segments spacing method.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EqualArcLength", "Equal Arc Length"
           "EqualParameter", "Equal Parameter"
        """
        EqualArcLength = 0  # SubdivideSegmentBuilderEqualSegmentsMethodMemberType
        EqualParameter = 1  # SubdivideSegmentBuilderEqualSegmentsMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    @typing.overload
    def SetSplineSettings(self, createTangency: bool, addPoints: bool) -> None:
        """
        Sets options for subdividing splines.
        
        Signature ``SetSplineSettings(createTangency, addPoints)`` 
        
        :param createTangency:  Creates tangency at the point where the spline is subdivided by adding parallel extensions. 
        :type createTangency: bool 
        :param addPoints:  Add points to the new segments to maintain shape after subdivision. 
        :type addPoints: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetSplineSettings(self, createTangency: bool, addPoints: bool, addFixConstraint: bool) -> None:
        """
        Sets options for subdividing splines.
        
        Signature ``SetSplineSettings(createTangency, addPoints, addFixConstraint)`` 
        
        :param createTangency:  Creates tangency at the point where the spline is subdivided by adding parallel extensions. 
        :type createTangency: bool 
        :param addPoints:  Add points to the new segments to maintain shape after subdivision. 
        :type addPoints: bool 
        :param addFixConstraint:  Adds a fix constraint at newly created subdivision locations 
        :type addFixConstraint: bool 
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSplineSettingValues(self) -> tuple:
        """
        Gets the current subdivide spline settings.  
        
        Signature ``GetSplineSettingValues()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (createTangency, createPoints, addFixConstraint). createTangency is a bool.   Creates tangency at the point where the spline is subdivided by adding parallel extensions.createPoints is a bool.   Add points to the new segments to maintain shape after subdivision.addFixConstraint is a bool.   Adds a fix constraint at newly created subdivision locations
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSplineSettings(self) -> tuple:
        """
        Gets the current subdivide spline settings.  
        
        Signature ``GetSplineSettings()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (createTangency, createPoints). createTangency is a bool.   Creates tangency at the point where the spline is subdivided by adding parallel extensions.createPoints is a bool.   Add points to the new segments to maintain shape after subdivision.
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    EqualSegmentsOption: SubdivideSegmentBuilderEqualSegmentsMethod = ...
    """
    Returns or sets  the equal segments option as :py:class:`NXOpen.Routing.SubdivideSegmentBuilderEqualSegmentsMethod`
    
    <hr>
    
    Getter Method
    
    Signature ``EqualSegmentsOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SubdivideSegmentBuilderEqualSegmentsMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EqualSegmentsOption`` 
    
    :param equalSegmentsOption: 
    :type equalSegmentsOption: :py:class:`NXOpen.Routing.SubdivideSegmentBuilderEqualSegmentsMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    ReverseSubdividePoint: bool = ...
    """
    Returns or sets  the direction of the start of segment to subdivide.  
    
    The distance of the subdivision 
    point on the segment is measured from this end.
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSubdividePoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSubdividePoint`` 
    
    :param reverseSubdividePoint: 
    :type reverseSubdividePoint: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Segment: SelectISegment = ...
    """
    Returns  the segment to subdivide 
    
    <hr>
    
    Getter Method
    
    Signature ``Segment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SelectISegment` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SubdivideArcLength: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the arc length of each resulting segment from subdivision, if :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` is 
    :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.ArcLengthSegments <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    
    <hr>
    
    Getter Method
    
    Signature ``SubdivideArcLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SubdivideEndPercentage: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the end location of subdivision on the segment as percentage, if
    :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` is :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.EqualSegments <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    or :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.ArcLengthSegments <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    
    <hr>
    
    Getter Method
    
    Signature ``SubdivideEndPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SubdivideNumSegments: int = ...
    """
    Returns or sets  the number of subdivisions to do on the given segment, if :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` 
    is :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.EqualSegments <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    or :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.ArcLengthSegments <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    
    <hr>
    
    Getter Method
    
    Signature ``SubdivideNumSegments`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``SubdivideNumSegments`` 
    
    :param subdivideNumSegments: 
    :type subdivideNumSegments: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SubdividePoint: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the location of the subdivision point on segment as arclength or %arclength or point, if
    :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` is :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.AtPoint <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    
    <hr>
    
    Getter Method
    
    Signature ``SubdividePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    SubdivideStartPercentage: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the start location of subdivision on the segment as percentage, if
    :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` is :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.EqualSegments <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    or :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes.ArcLengthSegments <NXOpen.Routing.SubdivideSegmentBuilderTypes>`
    
    <hr>
    
    Getter Method
    
    Signature ``SubdivideStartPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Type: SubdivideSegmentBuilderTypes = ...
    """
    Returns or sets  the spacing method as :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Routing.SubdivideSegmentBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: SubdivideSegmentBuilder = ...  # unknown typename


class ModelTerminalsBuilderCutBackLocationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ModelTerminalsBuilderCutBackLocationOption():
    """
    The Enum for selecting the CutBack Option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromCharacteristic", "FromCharacteristic"
       "UniformValue", "UniformValue"
       "IndividualCutbacks", "IndividualValue"
    """
    FromCharacteristic = 0  # ModelTerminalsBuilderCutBackLocationOptionMemberType
    UniformValue = 1  # ModelTerminalsBuilderCutBackLocationOptionMemberType
    IndividualCutbacks = 2  # ModelTerminalsBuilderCutBackLocationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ModelTerminalsBuilderExtensionValueOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ModelTerminalsBuilderExtensionValueOption():
    """
    The Enum for selecting the ExtensionValue Option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromCharacteristic", "FromCharacteristic"
       "UniformValue", "UniformValue"
       "IndividualExtensions", "IndividualValue"
    """
    FromCharacteristic = 0  # ModelTerminalsBuilderExtensionValueOptionMemberType
    UniformValue = 1  # ModelTerminalsBuilderExtensionValueOptionMemberType
    IndividualExtensions = 2  # ModelTerminalsBuilderExtensionValueOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ModelTerminalsBuilder(NXOpen.Builder):
    """
    The Builder to Model/UnModel the Terminals   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.ModelTerminalsBuilder`
    
    Default values.
    
    ================  ===================
    Property          Value
    ================  ===================
    CutbackOption     FromCharacteristic 
    ----------------  -------------------
    ExtensionOption   FromCharacteristic 
    ----------------  -------------------
    PreviewToggle     0 
    ================  ===================
    
    .. versionadded:: NX7.5.0
    """
    
    class CutBackLocationOption():
        """
        The Enum for selecting the CutBack Option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromCharacteristic", "FromCharacteristic"
           "UniformValue", "UniformValue"
           "IndividualCutbacks", "IndividualValue"
        """
        FromCharacteristic = 0  # ModelTerminalsBuilderCutBackLocationOptionMemberType
        UniformValue = 1  # ModelTerminalsBuilderCutBackLocationOptionMemberType
        IndividualCutbacks = 2  # ModelTerminalsBuilderCutBackLocationOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ExtensionValueOption():
        """
        The Enum for selecting the ExtensionValue Option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromCharacteristic", "FromCharacteristic"
           "UniformValue", "UniformValue"
           "IndividualExtensions", "IndividualValue"
        """
        FromCharacteristic = 0  # ModelTerminalsBuilderExtensionValueOptionMemberType
        UniformValue = 1  # ModelTerminalsBuilderExtensionValueOptionMemberType
        IndividualExtensions = 2  # ModelTerminalsBuilderExtensionValueOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Model(self) -> None:
        """
        The Model the selected Terminals  
        
        Signature ``Model()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def UnModel(self) -> None:
        """
        The UnModel the selected terminals 
        
        Signature ``UnModel()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def ModelAll(self) -> None:
        """
        The Model all the terminals 
        
        Signature ``ModelAll()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def UnModelAll(self) -> None:
        """
        Unmodel all of the terminals 
        
        Signature ``UnModelAll()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    CutbackOption: ModelTerminalsBuilderCutBackLocationOption = ...
    """
    Returns or sets  the cutback option 
    
    <hr>
    
    Getter Method
    
    Signature ``CutbackOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ModelTerminalsBuilderCutBackLocationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``CutbackOption`` 
    
    :param cutbackOption: 
    :type cutbackOption: :py:class:`NXOpen.Routing.ModelTerminalsBuilderCutBackLocationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    ExtensionOption: ModelTerminalsBuilderExtensionValueOption = ...
    """
    Returns or sets  the extension option 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ModelTerminalsBuilderExtensionValueOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionOption`` 
    
    :param extensionOption: 
    :type extensionOption: :py:class:`NXOpen.Routing.ModelTerminalsBuilderExtensionValueOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    List: NXOpen.TaggedObjectList = ...
    """
    Returns  the List Containing the Terminals and their properties.  
    
    <hr>
    
    Getter Method
    
    Signature ``List`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.TaggedObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    MultiPort: NXOpen.NXObject = ...
    """
    Returns or sets  the MultiPort of the selected object
    
    <hr>
    
    Getter Method
    
    Signature ``MultiPort`` 
    
    :returns:  Routing Port  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``MultiPort`` 
    
    :param port:  Routing Port  
    :type port: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    PortSelection: SelectPort = ...
    """
    Returns  the port selection 
    
    <hr>
    
    Getter Method
    
    Signature ``PortSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SelectPort` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    PreviewToggle: bool = ...
    """
    Returns or sets  the preview 
    
    <hr>
    
    Getter Method
    
    Signature ``PreviewToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    
    <hr>
    
    Setter Method
    
    Signature ``PreviewToggle`` 
    
    :param preview: 
    :type preview: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: routing_harness ("Routing Harness")
    """
    Null: ModelTerminalsBuilder = ...  # unknown typename


class PartDefinitionBase(ItemDefinition):
    """
    The abstract class :py:class:`NXOpen.Routing.PartDefinitionBase` contains
    information defining a logical part.  
    
    See NX Routing help for the Connectivity data model documentation.
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    Null: PartDefinitionBase = ...  # unknown typename


class GapDisplayBuilder(NXOpen.Builder):
    """
    Builder for creating a gap arc object on a line segment.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateGapDisplayBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def CreateBuilder(self, selLine: NXOpen.Line, crossLine: NXOpen.Line, gapWidth: float, gapStartPoint: NXOpen.Point3d, gapEndPoint: NXOpen.Point3d, bridgeOverGap: bool, arcOrientation: bool) -> None:
        """
        Takes selected line, gap start and end points, and gap 
        type settings in to initialise builder data.  
        
        Signature ``CreateBuilder(selLine, crossLine, gapWidth, gapStartPoint, gapEndPoint, bridgeOverGap, arcOrientation)`` 
        
        :param selLine: 
        :type selLine: :py:class:`NXOpen.Line` 
        :param crossLine: 
        :type crossLine: :py:class:`NXOpen.Line` 
        :param gapWidth: 
        :type gapWidth: float 
        :param gapStartPoint: 
        :type gapStartPoint: :py:class:`NXOpen.Point3d` 
        :param gapEndPoint: 
        :type gapEndPoint: :py:class:`NXOpen.Point3d` 
        :param bridgeOverGap: 
        :type bridgeOverGap: bool 
        :param arcOrientation: 
        :type arcOrientation: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetBuilderData(self, selLine: NXOpen.Line, crossLine: NXOpen.Line, gapWidth: float, gapStartPoint: NXOpen.Point3d, gapEndPoint: NXOpen.Point3d, bridgeOverGap: bool, arcOrientation: bool) -> None:
        """
        Takes selected line, gap start and end points, and gap 
        type settings in to set builder data.  
        
        Signature ``SetBuilderData(selLine, crossLine, gapWidth, gapStartPoint, gapEndPoint, bridgeOverGap, arcOrientation)`` 
        
        :param selLine: 
        :type selLine: :py:class:`NXOpen.Line` 
        :param crossLine: 
        :type crossLine: :py:class:`NXOpen.Line` 
        :param gapWidth: 
        :type gapWidth: float 
        :param gapStartPoint: 
        :type gapStartPoint: :py:class:`NXOpen.Point3d` 
        :param gapEndPoint: 
        :type gapEndPoint: :py:class:`NXOpen.Point3d` 
        :param bridgeOverGap: 
        :type bridgeOverGap: bool 
        :param arcOrientation: 
        :type arcOrientation: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: GapDisplayBuilder = ...  # unknown typename


class WatertightFittingsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.WatertightFittingsBuilder`    
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateWatertightFittingsBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def GetRequiredAttributes(self) -> CharacteristicList:
        """
        Get required attributes for Watertight Fittings.  
        
        Signature ``GetRequiredAttributes()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRequiredAttributes(self, charxData: CharacteristicList) -> None:
        """
        Set required attributes for Watertight Fittings.  
        
        Signature ``SetRequiredAttributes(charxData)`` 
        
        :param charxData: 
        :type charxData: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetOptionalAttributes(self) -> CharacteristicList:
        """
        Get optional attributes for Watertight Fittings.  
        
        Signature ``GetOptionalAttributes()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetOptionalAttributes(self, charxData: CharacteristicList) -> None:
        """
        Set optional attributes for Watertight Fittings.  
        
        Signature ``SetOptionalAttributes(charxData)`` 
        
        :param charxData: 
        :type charxData: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    Filename: str = ...
    """
    Returns or sets  the name of new part file containing watertight fittings assembly which includes the full path.  
    
    <hr>
    
    Getter Method
    
    Signature ``Filename`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Filename`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FittingMembers: RouteObjectCollector = ...
    """
    Returns  the Routing Object Collector builder that stores selected routing members   
    
    <hr>
    
    Getter Method
    
    Signature ``FittingMembers`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FlangeDirection: bool = ...
    """
    Returns or sets  the direction of flange thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FlangeDirection`` 
    
    :param flangeDirection: 
    :type flangeDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FlangeOffset: NXOpen.Expression = ...
    """
    Returns  the offset value for flange creation 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FlangeSketch: NXOpen.Section = ...
    """
    Returns  the section used for creating penetration extrude.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    FlangeThickness: NXOpen.Expression = ...
    """
    Returns  the thickness value for flange creation 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: WatertightFittingsBuilder = ...  # unknown typename


class OffsetPathCollectionBendTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OffsetPathCollectionBendType():
    """
    Bend types for offset path creation 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MaintainRadius", "Maintain Radius"
       "MaintainCenter", "Maintain Center"
       "MaximumBendTypes", " - "
    """
    MaintainRadius = 0  # OffsetPathCollectionBendTypeMemberType
    MaintainCenter = 1  # OffsetPathCollectionBendTypeMemberType
    MaximumBendTypes = 2  # OffsetPathCollectionBendTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OffsetPathCollection(NXOpen.TaggedObjectCollection):
    """
    The Routing OffsetPath object is a list of segments in a route.  
    
    It also
    contains the beginning and ending control point for the path.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    class BendType():
        """
        Bend types for offset path creation 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MaintainRadius", "Maintain Radius"
           "MaintainCenter", "Maintain Center"
           "MaximumBendTypes", " - "
        """
        MaintainRadius = 0  # OffsetPathCollectionBendTypeMemberType
        MaintainCenter = 1  # OffsetPathCollectionBendTypeMemberType
        MaximumBendTypes = 2  # OffsetPathCollectionBendTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCircularOffsetPath(self, segments: 'list[ISegment]', allStock: bool, specStocks: 'list[Stock]', maintainStock: bool, copyBendCorners: bool, maintain: OffsetPathCollectionBendType, useMinimumBendRatio: bool, minimumBendRatio: float, minimumBendRadius: float, deleteAllDuplicates: bool, createAssociativePaths: bool, patternXVector: NXOpen.Vector3d, patternYVector: NXOpen.Vector3d, patternAxisEndPoint: NXOpen.Point3d, patternStartAngle: float, radialOffset: float, nPaths: int, totalAngle: float) -> tuple:
        """
        Creates a circular offset path.  
        
        Signature ``CreateCircularOffsetPath(segments, allStock, specStocks, maintainStock, copyBendCorners, maintain, useMinimumBendRatio, minimumBendRatio, minimumBendRadius, deleteAllDuplicates, createAssociativePaths, patternXVector, patternYVector, patternAxisEndPoint, patternStartAngle, radialOffset, nPaths, totalAngle)`` 
        
        :param segments:  The list of segments to be associated with the offset path  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param allStock: 
        :type allStock: bool 
        :param specStocks: 
        :type specStocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param maintainStock:  if TRUE: Maintain stock on paths  
        :type maintainStock: bool 
        :param copyBendCorners:  if TRUE: Copy the bend corners 
        :type copyBendCorners: bool 
        :param maintain:  Maintain radius or center   
        :type maintain: :py:class:`NXOpen.Routing.OffsetPathCollectionBendType` 
        :param useMinimumBendRatio:  if TRUE: Use Ratio to Stock Diameter 
        :type useMinimumBendRatio: bool 
        :param minimumBendRatio:  Minimum Bend Ratio  
        :type minimumBendRatio: float 
        :param minimumBendRadius:  Minimum Bend Radius 
        :type minimumBendRadius: float 
        :param deleteAllDuplicates:  if TRUE: Delete all duplicate paths  
        :type deleteAllDuplicates: bool 
        :param createAssociativePaths:  if TRUE: Create associative paths  
        :type createAssociativePaths: bool 
        :param patternXVector:  X vector to set the pattern reference axis  
        :type patternXVector: :py:class:`NXOpen.Vector3d` 
        :param patternYVector:  Y vector to set the pattern reference axis   
        :type patternYVector: :py:class:`NXOpen.Vector3d` 
        :param patternAxisEndPoint:  Point to set the pattern reference axis direction                                                                if NULL: Computes reference axis using heuristics 
        :type patternAxisEndPoint: :py:class:`NXOpen.Point3d` 
        :param patternStartAngle:  Start angle of the point  
        :type patternStartAngle: float 
        :param radialOffset:  Offset distance  
        :type radialOffset: float 
        :param nPaths:  Number of paths  
        :type nPaths: int 
        :param totalAngle:  Total angle  
        :type totalAngle: float 
        :returns: a tuple 
        :rtype: A tuple consisting of (masterOffsetPath, slavePathsCreated). masterOffsetPath is a :py:class:`NXOpen.Routing.OffsetPath`.   The created master offset path slavePathsCreated is a list of :py:class:`NXOpen.Routing.OffsetPath`.   The created slave offset paths 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateRectangularOffsetPath(self, segments: 'list[ISegment]', allStock: bool, specStocks: 'list[Stock]', maintainStock: bool, copyBendCorners: bool, maintain: OffsetPathCollectionBendType, useMinimumBendRatio: bool, minimumBendRatio: float, minimumBendRadius: float, deleteAllDuplicates: bool, createAssociativePaths: bool, patternXVector: NXOpen.Vector3d, patternYVector: NXOpen.Vector3d, patternAxisEndPoint: NXOpen.Point3d, patternStartAngle: float, rowOffset: float, columnOffset: float, nRows: int, nColumns: int, masterRow: int, masterColumn: int) -> tuple:
        """
        Creates a rectangular offset path.  
        
        Signature ``CreateRectangularOffsetPath(segments, allStock, specStocks, maintainStock, copyBendCorners, maintain, useMinimumBendRatio, minimumBendRatio, minimumBendRadius, deleteAllDuplicates, createAssociativePaths, patternXVector, patternYVector, patternAxisEndPoint, patternStartAngle, rowOffset, columnOffset, nRows, nColumns, masterRow, masterColumn)`` 
        
        :param segments:  The list of segments to be associated with the offset path  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param allStock: 
        :type allStock: bool 
        :param specStocks: 
        :type specStocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param maintainStock:  if TRUE: Maintain stock on paths  
        :type maintainStock: bool 
        :param copyBendCorners:  if TRUE: Copy the bend corners 
        :type copyBendCorners: bool 
        :param maintain:  Maintain radius or center   
        :type maintain: :py:class:`NXOpen.Routing.OffsetPathCollectionBendType` 
        :param useMinimumBendRatio:  if TRUE: Use Ratio to Stock Diameter 
        :type useMinimumBendRatio: bool 
        :param minimumBendRatio:  Minimum Bend Ratio  
        :type minimumBendRatio: float 
        :param minimumBendRadius:  Minimum Bend Radius 
        :type minimumBendRadius: float 
        :param deleteAllDuplicates:  if TRUE: Delete all duplicate paths  
        :type deleteAllDuplicates: bool 
        :param createAssociativePaths:  if TRUE: Create associative paths  
        :type createAssociativePaths: bool 
        :param patternXVector:  X vector to set the pattern reference axis  
        :type patternXVector: :py:class:`NXOpen.Vector3d` 
        :param patternYVector:  Y vector to set the pattern reference axis   
        :type patternYVector: :py:class:`NXOpen.Vector3d` 
        :param patternAxisEndPoint:  Point to set the pattern reference axis direction                                                                if NULL: Computes reference axis using heuristics 
        :type patternAxisEndPoint: :py:class:`NXOpen.Point3d` 
        :param patternStartAngle:  Start angle of the pattern  
        :type patternStartAngle: float 
        :param rowOffset:  Offset distance along the row  
        :type rowOffset: float 
        :param columnOffset:  Offset distance along the column 
        :type columnOffset: float 
        :param nRows:  Number of rows  
        :type nRows: int 
        :param nColumns:  Number of columns  
        :type nColumns: int 
        :param masterRow:  Row of the master path  
        :type masterRow: int 
        :param masterColumn:  Column of the master path 
        :type masterColumn: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (masterOffsetPath, slavePathsCreated). masterOffsetPath is a :py:class:`NXOpen.Routing.OffsetPath`.   The created master offset path slavePathsCreated is a list of :py:class:`NXOpen.Routing.OffsetPath`.   The created slave offset paths 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertOffsetPaths(self, masterOffsetPath: OffsetPath) -> None:
        """
        Converts an offset path into :py:class:`NXOpen.Positioning.Constraint` 
        objects applied to the copied routing objects.  
        
        Converts the input
        master offset path as well as all of the children offset paths of
        the input master offset path.
        
        The :py:class:`NXOpen.Routing.OffsetPath` is incompatible with segments 
        created using the :py:meth:`NXOpen.Routing.SegmentManager.CreateConstrainedSegment`
        or to any segments that have :py:class:`NXOpen.Positioning.Constraint` objects
        applied to them.  This routine makes the path parallel and associative to
        each other using constraints rather than the :py:class:`NXOpen.Routing.OffsetPath`
        objects.  The converted offset path objects are logged for delete, the next
        call to :py:meth:`NXOpen.Update.DoUpdate` will delete the offset path
        objects.
        
        Signature ``ConvertOffsetPaths(masterOffsetPath)`` 
        
        :param masterOffsetPath: 
        :type masterOffsetPath: :py:class:`NXOpen.Routing.OffsetPath` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class CreationMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CreationMethod():
    """
    Describes the overstock creation method. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", " - "
       "EntireSegments", " - "
       "Interval", " - "
       "PointToPoint", " - "
       "PointAndLength", " - "
    """
    Unknown = -1  # CreationMethodMemberType
    EntireSegments = 0  # CreationMethodMemberType
    Interval = 1  # CreationMethodMemberType
    PointToPoint = 2  # CreationMethodMemberType
    PointAndLength = 3  # CreationMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DesignRuleViolationLocation(NXOpen.NXObject):
    """
    Represents :py:class:`NXOpen.Routing.DesignRuleViolationLocation` object   
    
    Design Rule Violation Location object get created automatically during design rule check
    
    .. versionadded:: NX6.0.0
    """
    
    def GetLocationObjects(self) -> 'list[NXOpen.NXObject]':
        """
        This function returns an array of all Objects at a violation location along with its count.  
        
        Signature ``GetLocationObjects()`` 
        
        :returns:  Location objects  array.   
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetLocationObjects(self, locationObjects: 'list[NXOpen.NXObject]') -> None:
        """
        Signature ``SetLocationObjects(locationObjects)`` 
        
        :param locationObjects:  Location objects  array.   
        :type locationObjects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    DeleteLocationObjects: DesignRuleViolationLocationCollectionDeleteOption = ...
    """
    Returns or sets  the function returns delete location objects, 
    which is an option for deletion of violation location objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteLocationObjects`` 
    
    :returns:  Option to delete object at violation location 
    :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationLocationCollectionDeleteOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteLocationObjects`` 
    
    :param deleteLocationObjects:  Option to delete object at violation location 
    :type deleteLocationObjects: :py:class:`NXOpen.Routing.DesignRuleViolationLocationCollectionDeleteOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: DesignRuleViolationLocation = ...  # unknown typename


class RouteManagerPartTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerPartType():
    """
    Collector types for Routing information 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Part", " - "
       "Stock", " - "
       "Fabrication", " - "
       "StockComponent", " - "
       "WireComponent", " - "
       "Overstock", " - "
       "Logical", " - "
       "TemplateAssy", " - "
       "Connector", " - "
       "Splice", " - "
       "Device", " - "
       "Filler", " - "
       "Unknown", " - "
    """
    Part = 0  # RouteManagerPartTypeMemberType
    Stock = 1  # RouteManagerPartTypeMemberType
    Fabrication = 2  # RouteManagerPartTypeMemberType
    StockComponent = 3  # RouteManagerPartTypeMemberType
    WireComponent = 4  # RouteManagerPartTypeMemberType
    Overstock = 5  # RouteManagerPartTypeMemberType
    Logical = 6  # RouteManagerPartTypeMemberType
    TemplateAssy = 7  # RouteManagerPartTypeMemberType
    Connector = 8  # RouteManagerPartTypeMemberType
    Splice = 9  # RouteManagerPartTypeMemberType
    Device = 10  # RouteManagerPartTypeMemberType
    Filler = 11  # RouteManagerPartTypeMemberType
    Unknown = -1  # RouteManagerPartTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerBomLevelMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerBomLevel():
    """
    Describes how fabrications are reported on the Bill of Material (BOM). 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Summery", " - "
       "Itemized", " - "
    """
    Summery = 0  # RouteManagerBomLevelMemberType
    Itemized = 1  # RouteManagerBomLevelMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerBomStockLengthMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerBomStockLength():
    """
    Describes how system reports the lengths of the stock. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleSum", " - "
       "ListEach", " - "
    """
    SingleSum = 0  # RouteManagerBomStockLengthMemberType
    ListEach = 1  # RouteManagerBomStockLengthMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerBomFabricationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerBomFabrication():
    """
    Is the fabrication numbering option on or off? 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", " - "
       "On", " - "
    """
    Off = 0  # RouteManagerBomFabricationMemberType
    On = 1  # RouteManagerBomFabricationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerBomBlankLinesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerBomBlankLines():
    """
    Controls how line items are reported in the Parts List. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", " - "
       "On", " - "
    """
    Off = 0  # RouteManagerBomBlankLinesMemberType
    On = 1  # RouteManagerBomBlankLinesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerFixPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerFixPosition():
    """
    Allows the position of new component to be fixed during the replacement operation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", " - "
       "On", " - "
    """
    Off = 0  # RouteManagerFixPositionMemberType
    On = 1  # RouteManagerFixPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerImportModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerImportMode():
    """
    Route List import modes
    
    The following tables describes the effects of the various modes
    depending on the type (XML, HRN, CMP) of import.
    
    ++--------------+---------------+-----------------+
    +------------+------------++ Deletes      | Replaces data | Preserves       |
    |            | Import     || unmatched    | in matching   | existing        |
    | ImportMode | File Type  || elements     | elements      | connectors      |
    +============+============++==============+===============+=================+
    | Update     | XML        || Yes          | Yes           | No              |
    |            | Legacy CMP || No           | Yes           | Yes             |
    |            | Legacy HRN || Yes(1)       | Yes(2)        | Yes             |
    +------------+------------++--------------+---------------+-----------------+
    | Merge      | XML        || No           | Yes           | Yes             |
    |            | Legacy CMP || No           | Yes           | Yes             |
    |            | Legacy HRN || No           | Yes(2)        | Yes             |
    +------------+------------++--------------+---------------+-----------------+
    | Append     | XML        || No           | No            | Yes             |
    |            | Legacy CMP || No           | No            | Yes             |
    |            | Legacy HRN || No           | No            | Yes             |
    +------------+------------++--------------+---------------+-----------------+
    
    ++--------------+---------------+-----------------+------------------+
    +------------+------------++ May add new  | May add new   | May create      | May create       |
    |            | Import     || connectors   | connections   | duplicate       | duplicate        |
    | ImportMode | File Type  ||              |               | connector names | connection names |
    +============+============++==============+===============+=================+==================+
    | Update     | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
    |            | Legacy CMP || Yes          | No            | No              | No               |
    |            | Legacy HRN || Yes          | Yes           | No              | No               |
    +------------+------------++--------------+---------------+-----------------+------------------+
    | Merge      | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
    |            | Legacy CMP || Yes          | No            | No              | No               |
    |            | Legacy HRN || Yes          | Yes           | No              | No               |
    +------------+------------++--------------+---------------+-----------------+------------------+
    | Append     | XML        || Yes          | Yes           | Yes             | Yes              |
    |            | Legacy CMP || Yes          | No            | Yes             | No               |
    |            | Legacy HRN || Yes          | Yes           | No              | Yes              |
    +------------+------------++--------------+---------------+-----------------+------------------+
    
    ++--------------+---------------+-----------------+
    || Maintains    | Maintains     | Elements        |
    || assignment   | routing       | matching        |
    +------------+------------++ information  | information   | criterion       |
    |            | Import     || for matching | for matching  |                 |
    | ImportMode | File Type  || connectors   | connections   |                 |
    +============+============++==============+===============+=================+
    | Update     | XML        || Yes          | Yes           | GUID            |
    |            | Legacy CMP || Yes          | Yes           | Names(4)        |
    |            | Legacy HRN || Yes          | Yes           | Names(4)        |
    +------------+------------++--------------+---------------+-----------------+
    | Merge      | XML        || Yes          | Yes           | GUID            |
    |            | Legacy CMP || Yes          | Yes           | Names(4)        |
    |            | Legacy HRN || Yes          | Yes           | Names(4)        |
    +------------+------------++--------------+---------------+-----------------+
    | Append     | XML        || No           | No            | N/A             |
    |            | Legacy CMP || No           | No            | N/A             |
    |            | Legacy HRN || No           | No            | N/A             |
    +------------+------------++--------------+---------------+-----------------+
    
      #.  Connection list data only (no connectors)
      #.  Connector data is not updated
      #.  Since matches are made using GUIDs only, no attempt is made to prevent duplicate names
      #.  Technically, legacy import does check GUIDs as well but using GUID is not practical with legacy import
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Update", "Update existing objects with data from the imported objects."
       "Merge", "Update existing objects with data from the imported objects."
       "Append", "Create the imported objects as new objects."
    """
    Update = 700  # RouteManagerImportModeMemberType
    Merge = 701  # RouteManagerImportModeMemberType
    Append = 702  # RouteManagerImportModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerRootTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerRootType():
    """
    Type of root nodes. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "Top of entire part table."
       "Stock", "Top node for selecting stocks."
       "Wire", "Top node for selecting wires."
       "Part", "Top node for selecting parts."
    """
    Top = 0  # RouteManagerRootTypeMemberType
    Stock = 1  # RouteManagerRootTypeMemberType
    Wire = 2  # RouteManagerRootTypeMemberType
    Part = 3  # RouteManagerRootTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerColumnStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerColumnStatus():
    """
    Hidden status of a column. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotHidden", "Column is displayed in Specify Item."
       "Hidden", "Column is not displayed in Specify Item."
    """
    NotHidden = 0  # RouteManagerColumnStatusMemberType
    Hidden = 1  # RouteManagerColumnStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerFindObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RouteManagerFindObjectType():
    """
    The types of objects for which FindRoutingObject will search. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Harness", " - "
       "Cable", " - "
       "Shield", " - "
       "Connector", " - "
       "Device", " - "
       "Connection", " - "
       "Wire", " - "
       "Unknown", " - "
    """
    Harness = 0  # RouteManagerFindObjectTypeMemberType
    Cable = 1  # RouteManagerFindObjectTypeMemberType
    Shield = 2  # RouteManagerFindObjectTypeMemberType
    Connector = 3  # RouteManagerFindObjectTypeMemberType
    Device = 4  # RouteManagerFindObjectTypeMemberType
    Connection = 5  # RouteManagerFindObjectTypeMemberType
    Wire = 6  # RouteManagerFindObjectTypeMemberType
    Unknown = -1  # RouteManagerFindObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RouteManagerSearchCriteria_Struct():
    """
    Fill in this information with as much as you know about the object you want to find.  
    
    .
    Constructor: 
    NXOpen.Routing.RouteManager.SearchCriteria()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    ObjectType: RouteManagerFindObjectType = ...
    """
    Required.  
    
    The type of object to find. 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Routing.RouteManagerFindObjectType`
    """
    OwningHarness: NXOpen.Routing.Electrical.HarnessDevice = ...
    """
    Optional.  
    
    The harness that owns the object. Not required, but it does speed up the process of finding the object. 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Routing.Electrical.HarnessDevice`
    """
    ApplicationName: str = ...
    """
    Optional.  
    
    The name of the application name that created a application reference with the unique ID. 
    <hr>
    
    Field Value
    Type:str
    """
    UniqueID: str = ...
    """
    Optional.  
    
    The unique ID either created by NX (if applicationName is blank) or by another application. 
    <hr>
    
    Field Value
    Type:str
    """


class RouteManager():
    """
    Manages various Routing collections and methods for use in the current work part.  
    
    See the NX Routing help for detailed information on the Connection data model.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX4.0.0
    """
    
    class PartType():
        """
        Collector types for Routing information 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Part", " - "
           "Stock", " - "
           "Fabrication", " - "
           "StockComponent", " - "
           "WireComponent", " - "
           "Overstock", " - "
           "Logical", " - "
           "TemplateAssy", " - "
           "Connector", " - "
           "Splice", " - "
           "Device", " - "
           "Filler", " - "
           "Unknown", " - "
        """
        Part = 0  # RouteManagerPartTypeMemberType
        Stock = 1  # RouteManagerPartTypeMemberType
        Fabrication = 2  # RouteManagerPartTypeMemberType
        StockComponent = 3  # RouteManagerPartTypeMemberType
        WireComponent = 4  # RouteManagerPartTypeMemberType
        Overstock = 5  # RouteManagerPartTypeMemberType
        Logical = 6  # RouteManagerPartTypeMemberType
        TemplateAssy = 7  # RouteManagerPartTypeMemberType
        Connector = 8  # RouteManagerPartTypeMemberType
        Splice = 9  # RouteManagerPartTypeMemberType
        Device = 10  # RouteManagerPartTypeMemberType
        Filler = 11  # RouteManagerPartTypeMemberType
        Unknown = -1  # RouteManagerPartTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BomLevel():
        """
        Describes how fabrications are reported on the Bill of Material (BOM). 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Summery", " - "
           "Itemized", " - "
        """
        Summery = 0  # RouteManagerBomLevelMemberType
        Itemized = 1  # RouteManagerBomLevelMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BomStockLength():
        """
        Describes how system reports the lengths of the stock. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SingleSum", " - "
           "ListEach", " - "
        """
        SingleSum = 0  # RouteManagerBomStockLengthMemberType
        ListEach = 1  # RouteManagerBomStockLengthMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BomFabrication():
        """
        Is the fabrication numbering option on or off? 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", " - "
           "On", " - "
        """
        Off = 0  # RouteManagerBomFabricationMemberType
        On = 1  # RouteManagerBomFabricationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BomBlankLines():
        """
        Controls how line items are reported in the Parts List. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", " - "
           "On", " - "
        """
        Off = 0  # RouteManagerBomBlankLinesMemberType
        On = 1  # RouteManagerBomBlankLinesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FixPosition():
        """
        Allows the position of new component to be fixed during the replacement operation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", " - "
           "On", " - "
        """
        Off = 0  # RouteManagerFixPositionMemberType
        On = 1  # RouteManagerFixPositionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ImportMode():
        """
        Route List import modes
        
        The following tables describes the effects of the various modes
        depending on the type (XML, HRN, CMP) of import.
        
        ++--------------+---------------+-----------------+
        +------------+------------++ Deletes      | Replaces data | Preserves       |
        |            | Import     || unmatched    | in matching   | existing        |
        | ImportMode | File Type  || elements     | elements      | connectors      |
        +============+============++==============+===============+=================+
        | Update     | XML        || Yes          | Yes           | No              |
        |            | Legacy CMP || No           | Yes           | Yes             |
        |            | Legacy HRN || Yes(1)       | Yes(2)        | Yes             |
        +------------+------------++--------------+---------------+-----------------+
        | Merge      | XML        || No           | Yes           | Yes             |
        |            | Legacy CMP || No           | Yes           | Yes             |
        |            | Legacy HRN || No           | Yes(2)        | Yes             |
        +------------+------------++--------------+---------------+-----------------+
        | Append     | XML        || No           | No            | Yes             |
        |            | Legacy CMP || No           | No            | Yes             |
        |            | Legacy HRN || No           | No            | Yes             |
        +------------+------------++--------------+---------------+-----------------+
        
        ++--------------+---------------+-----------------+------------------+
        +------------+------------++ May add new  | May add new   | May create      | May create       |
        |            | Import     || connectors   | connections   | duplicate       | duplicate        |
        | ImportMode | File Type  ||              |               | connector names | connection names |
        +============+============++==============+===============+=================+==================+
        | Update     | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
        |            | Legacy CMP || Yes          | No            | No              | No               |
        |            | Legacy HRN || Yes          | Yes           | No              | No               |
        +------------+------------++--------------+---------------+-----------------+------------------+
        | Merge      | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
        |            | Legacy CMP || Yes          | No            | No              | No               |
        |            | Legacy HRN || Yes          | Yes           | No              | No               |
        +------------+------------++--------------+---------------+-----------------+------------------+
        | Append     | XML        || Yes          | Yes           | Yes             | Yes              |
        |            | Legacy CMP || Yes          | No            | Yes             | No               |
        |            | Legacy HRN || Yes          | Yes           | No              | Yes              |
        +------------+------------++--------------+---------------+-----------------+------------------+
        
        ++--------------+---------------+-----------------+
        || Maintains    | Maintains     | Elements        |
        || assignment   | routing       | matching        |
        +------------+------------++ information  | information   | criterion       |
        |            | Import     || for matching | for matching  |                 |
        | ImportMode | File Type  || connectors   | connections   |                 |
        +============+============++==============+===============+=================+
        | Update     | XML        || Yes          | Yes           | GUID            |
        |            | Legacy CMP || Yes          | Yes           | Names(4)        |
        |            | Legacy HRN || Yes          | Yes           | Names(4)        |
        +------------+------------++--------------+---------------+-----------------+
        | Merge      | XML        || Yes          | Yes           | GUID            |
        |            | Legacy CMP || Yes          | Yes           | Names(4)        |
        |            | Legacy HRN || Yes          | Yes           | Names(4)        |
        +------------+------------++--------------+---------------+-----------------+
        | Append     | XML        || No           | No            | N/A             |
        |            | Legacy CMP || No           | No            | N/A             |
        |            | Legacy HRN || No           | No            | N/A             |
        +------------+------------++--------------+---------------+-----------------+
        
          #.  Connection list data only (no connectors)
          #.  Connector data is not updated
          #.  Since matches are made using GUIDs only, no attempt is made to prevent duplicate names
          #.  Technically, legacy import does check GUIDs as well but using GUID is not practical with legacy import
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Update", "Update existing objects with data from the imported objects."
           "Merge", "Update existing objects with data from the imported objects."
           "Append", "Create the imported objects as new objects."
        """
        Update = 700  # RouteManagerImportModeMemberType
        Merge = 701  # RouteManagerImportModeMemberType
        Append = 702  # RouteManagerImportModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RootType():
        """
        Type of root nodes. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "Top of entire part table."
           "Stock", "Top node for selecting stocks."
           "Wire", "Top node for selecting wires."
           "Part", "Top node for selecting parts."
        """
        Top = 0  # RouteManagerRootTypeMemberType
        Stock = 1  # RouteManagerRootTypeMemberType
        Wire = 2  # RouteManagerRootTypeMemberType
        Part = 3  # RouteManagerRootTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ColumnStatus():
        """
        Hidden status of a column. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotHidden", "Column is displayed in Specify Item."
           "Hidden", "Column is not displayed in Specify Item."
        """
        NotHidden = 0  # RouteManagerColumnStatusMemberType
        Hidden = 1  # RouteManagerColumnStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FindObjectType():
        """
        The types of objects for which FindRoutingObject will search. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Harness", " - "
           "Cable", " - "
           "Shield", " - "
           "Connector", " - "
           "Device", " - "
           "Connection", " - "
           "Wire", " - "
           "Unknown", " - "
        """
        Harness = 0  # RouteManagerFindObjectTypeMemberType
        Cable = 1  # RouteManagerFindObjectTypeMemberType
        Shield = 2  # RouteManagerFindObjectTypeMemberType
        Connector = 3  # RouteManagerFindObjectTypeMemberType
        Device = 4  # RouteManagerFindObjectTypeMemberType
        Connection = 5  # RouteManagerFindObjectTypeMemberType
        Wire = 6  # RouteManagerFindObjectTypeMemberType
        Unknown = -1  # RouteManagerFindObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SearchCriteria():
        """
        Fill in this information with as much as you know about the object you want to find.  
        
        .
        Constructor: 
        NXOpen.Routing.RouteManager.SearchCriteria()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        ObjectType: RouteManagerFindObjectType = ...
        """
        Required.  
        
        The type of object to find. 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Routing.RouteManagerFindObjectType`
        """
        OwningHarness: NXOpen.Routing.Electrical.HarnessDevice = ...
        """
        Optional.  
        
        The harness that owns the object. Not required, but it does speed up the process of finding the object. 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Routing.Electrical.HarnessDevice`
        """
        ApplicationName: str = ...
        """
        Optional.  
        
        The name of the application name that created a application reference with the unique ID. 
        <hr>
        
        Field Value
        Type:str
        """
        UniqueID: str = ...
        """
        Optional.  
        
        The unique ID either created by NX (if applicationName is blank) or by another application. 
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetLengthTolerance(self) -> float:
        """
        Returns the default length tolerance for the current root part.  
        
        Signature ``GetLengthTolerance()`` 
        
        :returns:  Length tolerance value used by Routing in units
        of the current root part.  
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def InsertIntoStock(self, component: NXOpen.Assemblies.Component) -> None:
        """
        Connects the input component to the stocks and other components in the work part.  
        
        Subdivides segments intersected by ports of the part
        and marked interior if the segment is "inside" of the part.  Segments are considered
        inside if all of the end :py:class:`NXOpen.Routing.ControlPoint` objects of the
        segments are inside the bounding box of the component.  Interior segments are
        not displayable.
        
        All stocks are split at the new interior segments.  The interior stocks are
        hidden and do not show up in the bill of materials.
        
        In addition this routine adds fixture ports of the input component to fixed
        length splines that are intersected by the ports.
        
        Signature ``InsertIntoStock(component)`` 
        
        :param component:  Must be in the same part as the :py:class:`NXOpen.Routing.RouteManager` object. 
        :type component: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LiftFromStock(self, component: NXOpen.Assemblies.Component) -> None:
        """
        Disconnects the input component from stocks and components in the work part.  
        
        This the opposite of :py:meth:`NXOpen.Routing.RouteManager.InsertIntoStock`.
        Interior segments are marked as non-interior, and any subdivisions performed by
        :py:meth:`NXOpen.Routing.RouteManager.InsertIntoStock` are reversed to
        the previous state.
        
        Interior stocks are marked as non-interior and merge with the existing stocks
        that were connected to the component.
        
        Signature ``LiftFromStock(component)`` 
        
        :param component:  Must be in the same part as the :py:class:`NXOpen.Routing.RouteManager` object. 
        :type component: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LoadPart(self, partEntry: CharacteristicList) -> NXOpen.Part:
        """
        Loads a part based on the input :py:class:`NXOpen.Routing.CharacteristicList`.  
        
        This object can be created on the fly, or returned from a search through the part library using
        the :py:meth:`Preferences.RoutingPartLibrary.MatchCriteria` or
        :py:meth:`Preferences.RoutingPartLibrary.MatchCriteriaWithFilter` methods.
        
        Signature ``LoadPart(partEntry)`` 
        
        :param partEntry:   Must contain a PART_NAME for a regular part, or a MEMBER_NAME and PART_NAME                     for part family parts.  
        :type partEntry: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def LogConcurrent(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Logs objects to be checked during the next concurrent design rule check.  
        
        Signature ``LogConcurrent(objects)`` 
        
        :param objects:  Must be in the same part as the :py:class:`NXOpen.Routing.RouteManager` object. 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetConcurrent(self) -> 'list[NXOpen.NXObject]':
        """
        Gets objects logged for concurrent design rule check.  
        
        Signature ``GetConcurrent()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ExportPlmxml(self, plmxmlFilename: str) -> None:
        """
        Exports all of the NX Routing electrical information from the currently open part
        to the given file.  
        
        Returns an error if
        
          * Unable to write to the file
          * There is no Routing electrical information in the part
          * There is no part file open
        
        Signature ``ExportPlmxml(plmxmlFilename)`` 
        
        :param plmxmlFilename:  The name of the file into which this method will write                    the NX Routing PLM XML data.  
        :type plmxmlFilename: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportPlmxml(self, plmxmlFilename: str, importOperation: RouteManagerImportMode) -> None:
        """
        Imports NX Routing electrical information from the given PLM XML file
        into the current work part.  
        
        Returns an error if
        
          * Unable to read the file
          * There is no part file open
        
        Signature ``ImportPlmxml(plmxmlFilename, importOperation)`` 
        
        :param plmxmlFilename:  The name of the file from which this method will read                    the NX Routing electrical information.  
        :type plmxmlFilename: str 
        :param importOperation:  The import mode: update, merge, or append.                    See :py:class:`NXOpen.Routing.RouteManagerImportMode` for more information.  
        :type importOperation: :py:class:`NXOpen.Routing.RouteManagerImportMode` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportLegacyComponentFile(self, importFilename: str, importOperation: RouteManagerImportMode, importFormatName: str) -> None:
        """
        Imports NX Routing electrical information from the given
        XML or legacy component file into the current work part.  
        
        Returns an error if
        
          * Unable to read the file
          * There is no part file open
        
        Signature ``ImportLegacyComponentFile(importFilename, importOperation, importFormatName)`` 
        
        :param importFilename:  The name of the file from which this method will read                    the NX Routing electrical information.  
        :type importFilename: str 
        :param importOperation:  The import mode: update, merge, or append.                    See :py:class:`NXOpen.Routing.RouteManagerImportMode` for more information.  
        :type importOperation: :py:class:`NXOpen.Routing.RouteManagerImportMode` 
        :param importFormatName:  The name of the format from the Routing List (RLIST) configuration file                    that describes the fields in the legacy file.                    For more information, see the RLIST Configuration File section of the                    Part Table File document in the Routing Systems Configuration Overview                    section of the Routing Quick Reference Guide.  
        :type importFormatName: str 
        
        .. versionadded:: NX4.0.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ExportLegacyComponentFile(self, exportFilename: str, exportFormatName: str) -> None:
        """
        Exports all of the NX Routing electrical information from the currently open part
        to the given XML or legacy component file.  
        
        Returns an error if
        
          * Unable to write to the file
          * There is no Routing electrical information in the part
          * There is no part file open
        
        Signature ``ExportLegacyComponentFile(exportFilename, exportFormatName)`` 
        
        :param exportFilename:  The name of the file into which this method will write                    the NX Routing electrical information.  
        :type exportFilename: str 
        :param exportFormatName:  The name of the format from the Routing List (RLIST) configuration file                    that defines the fields this method will create in the legacy file.                    For more information, see the RLIST Configuration File section of the                    Part Table File document in the Routing Systems Configuration Overview                    section of the Routing Quick Reference Guide.  
        :type exportFormatName: str 
        
        .. versionadded:: NX4.0.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportLegacyHarnessFile(self, importFilename: str, importOperation: RouteManagerImportMode, importFormatName: str) -> None:
        """
        Imports NX Routing electrical information from the given
        XML or legacy harness file into the current work part.  
        
        Returns an error if
        
          * Unable to read the file
          * There is no part file open
        
        Signature ``ImportLegacyHarnessFile(importFilename, importOperation, importFormatName)`` 
        
        :param importFilename:  The name of the file from which this method will read                    the NX Routing electrical information.  
        :type importFilename: str 
        :param importOperation:  The import mode: update, merge, or append.                    See :py:class:`NXOpen.Routing.RouteManagerImportMode` for more information.  
        :type importOperation: :py:class:`NXOpen.Routing.RouteManagerImportMode` 
        :param importFormatName:  The name of the format from the Routing List (RLIST) configuration file                    that describes the fields in the legacy file.                    For more information, see the RLIST Configuration File section of the                    Part Table File document in the Routing Systems Configuration Overview                    section of the Routing Quick Reference Guide.  
        :type importFormatName: str 
        
        .. versionadded:: NX4.0.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ExportLegacyHarnessFile(self, exportFilename: str, exportFormatName: str) -> None:
        """
        Exports all of the NX Routing electrical information from the currently open part
        to the given XML or legacy harness file.  
        
        Returns an error if
        
          * Unable to write to the file
          * There is no Routing electrical information in the part
          * There is no part file open
        
        Signature ``ExportLegacyHarnessFile(exportFilename, exportFormatName)`` 
        
        :param exportFilename:  The name of the file into which this method will write                    the NX Routing electrical information.  
        :type exportFilename: str 
        :param exportFormatName:  The name of the format that from the Routing List (RLIST) configuration file                    defines the fields this method will create in the legacy file.                    For more information, see the RLIST Configuration File section of the                    Part Table File document in the Routing Systems Configuration Overview                    section of the Routing Quick Reference Guide.  
        :type exportFormatName: str 
        
        .. versionadded:: NX4.0.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportXmlFile(self, importFilename: str, importOperation: RouteManagerImportMode) -> None:
        """
        Imports NX Routing electrical information from the given XML
        file into the current work part.  
        
        Returns an error if
        
          * Unable to read the file
          * There is no part file open
        
        Signature ``ImportXmlFile(importFilename, importOperation)`` 
        
        :param importFilename:  The name of the file from which this method will read                    the NX Routing electrical information.  
        :type importFilename: str 
        :param importOperation:  The import mode: update, merge, or append.                    See :py:class:`NXOpen.Routing.RouteManagerImportMode` for more information.  
        :type importOperation: :py:class:`NXOpen.Routing.RouteManagerImportMode` 
        
        .. versionadded:: NX4.0.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ExportXmlFile(self, exportFilename: str) -> None:
        """
        Exports all of the NX Routing electrical information from the currently open part
        to the given XML file.  
        
        Returns an error if
        
          * Unable to write to the file
          * There is no Routing electrical information in the part
          * There is no part file open
        
        Signature ``ExportXmlFile(exportFilename)`` 
        
        :param exportFilename:  The name of the file into which this method will write                    the NX Routing electrical information.  
        :type exportFilename: str 
        
        .. versionadded:: NX4.0.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ViewNetlistHistory(self) -> None:
        """
        Prints the Netlist content history to the Listing Window 
        
        Signature ``ViewNetlistHistory()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def EraseNetlistHistory(self) -> None:
        """
        Erases the Netlist content history from the work part 
        
        Signature ``EraseNetlistHistory()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CheckDesignRules(self, mode: DesignRuleViolationCollectionMode, reason: DesignRuleViolationCollectionReason, objects: 'list[NXOpen.NXObject]') -> 'list[DesignRuleViolation]':
        """
        Executes the Routing Design Rules against the work part 
        
        Signature ``CheckDesignRules(mode, reason, objects)`` 
        
        :param mode: 
        :type mode: :py:class:`NXOpen.Routing.DesignRuleViolationCollectionMode` 
        :param reason: 
        :type reason: :py:class:`NXOpen.Routing.DesignRuleViolationCollectionReason` 
        :param objects:  The objects to check.  May be empty.  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns:  The violations generated by the check.  May be empty.  
        :rtype: list of :py:class:`NXOpen.Routing.DesignRuleViolation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def PlaceCutElbow(self, loadCharx: CharacteristicList, applyCharx: CharacteristicList, rcp: ControlPoint) -> None:
        """
        Places a cut elbow at the given Routing Control Point (RCP).  
        
        Signature ``PlaceCutElbow(loadCharx, applyCharx, rcp)`` 
        
        :param loadCharx:  Characteristics used for searching the component to load.  
        :type loadCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param applyCharx:  Characteristics to apply to the component.  
        :type applyCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param rcp:  The Routing Control Point (RCP) at which to place the cut elbow.  
        :type rcp: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_pipetube ("Routing Piping and Tubing")
        """
        ...
    
    
    def DeletePath(self, objects: 'list[NXOpen.NXObject]') -> 'list[NXOpen.NXObject]':
        """
        Deletes the given Routing Control Points (RCP), segments, curves, and components.  
        
        Useful for deleting all of the objects along a path.
        
          #. Given a Routing Control Point (RCP):
        
            * Log input RCP to delete.
            * If a side bend RCP, log bend segments to update.
            * If a bend corner RCP, log bend corner, bend arc and bend segment RCPs to delete.
        
          #. Given a Segment
        
            * Log segment, associated bend corner, bend RCP and bend arc to delete.
        
          #. Given an Instances
        
            * Delete component instances from the assembly.
        
          #. Given any other objects
        
            * Log to delete.
        
        NOTE: Does not delete occurrence or segments with other dependencies.
        
        Signature ``DeletePath(objects)`` 
        
        :param objects:  The objects to delete.  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns:  Objects from the given list of objects that survived.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnifyPath(self, inputObject: NXOpen.TaggedObject, newCharxList: CharacteristicList) -> None:
        """
        Changes the given stock or component to a new object that matches the given characteristics.  
        
        Useful for unifying all of the stocks and components (e.g. elbows and tees) in
        a path to the same characteristics.
        
        Signature ``UnifyPath(inputObject, newCharxList)`` 
        
        :param inputObject:  The stock, elbow, or tee to change.  
        :type inputObject: :py:class:`NXOpen.TaggedObject` 
        :param newCharxList:  The characteristics to use in finding a replacement for the given object.  
        :type newCharxList: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RepositionPartOccurrence(self, partOcc: NXOpen.Assemblies.Component, position: NXOpen.Point3d, transform: NXOpen.Matrix3x3) -> None:
        """
        Repositions part component given position and transformation 
        
        Signature ``RepositionPartOccurrence(partOcc, position, transform)`` 
        
        :param partOcc: 
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param position:  part occurrence to move  
        :type position: :py:class:`NXOpen.Point3d` 
        :param transform:  new transform for the part occurrence  
        :type transform: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RouteReplacePart(self, oldOcc: NXOpen.Assemblies.Component, newPart: NXOpen.Part, compName: str, refset: str, occLayer: int) -> NXOpen.Assemblies.Component:
        """
        Replace part  
        
        Signature ``RouteReplacePart(oldOcc, newPart, compName, refset, occLayer)`` 
        
        :param oldOcc: 
        :type oldOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param newPart: 
        :type newPart: :py:class:`NXOpen.Part` 
        :param compName: 
        :type compName: str 
        :param refset: 
        :type refset: str 
        :param occLayer: 
        :type occLayer: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def ReplaceComponents(self, oldOcc: NXOpen.Assemblies.Component, newOcc: NXOpen.Assemblies.Component, refsetName: str) -> None:
        """
        Replaces old component with new component, and relinks ports if possible. Copies the characteristics on the old component
        onto the new component. 
        
        Signature ``ReplaceComponents(oldOcc, newOcc, refsetName)`` 
        
        :param oldOcc: 
        :type oldOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param newOcc: 
        :type newOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param refsetName: 
        :type refsetName: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def ReplaceComponents(self, oldOcc: NXOpen.Assemblies.Component, newOcc: NXOpen.Assemblies.Component, refsetName: str, fixPosition: RouteManagerFixPosition) -> None:
        """
        Replaces old component with new component, and relinks ports if possible. Copies the characteristics on the old component
        onto the new component. The parameter fixPosition can allow a fix constraint to be applied to the new component
        in order to prevent it from moving during the replace component operation. 
        
        Signature ``ReplaceComponents(oldOcc, newOcc, refsetName, fixPosition)`` 
        
        :param oldOcc:  The old part occurrence being replaced   
        :type oldOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param newOcc:  The new part occurrence replacement  
        :type newOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param refsetName:  The name of the reference set  
        :type refsetName: str 
        :param fixPosition:  Determines whether a temp constraint will be applied to the replacing component  
        :type fixPosition: :py:class:`NXOpen.Routing.RouteManagerFixPosition` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def TransformObjects(self, allStock: bool, specifiedStocks: 'list[Stock]', objects: 'list[NXOpen.NXObject]', position: NXOpen.Point3d, transform: NXOpen.Matrix3x3, copyOperation: bool) -> 'list[NXOpen.NXObject]':
        """
        Transforms routing objects.  
        
        The transformation can be a Move or a Copy.
        None objects should not be passed for transformation.   
        
        Signature ``TransformObjects(allStock, specifiedStocks, objects, position, transform, copyOperation)`` 
        
        :param allStock:  if TRUE: Copies all stock else Copies                                                                    specified stocks only 
        :type allStock: bool 
        :param specifiedStocks:  Specified stocks, not used                                                                                    if copying all stocks  
        :type specifiedStocks: list of :py:class:`NXOpen.Routing.Stock` 
        :param objects:  Routing objects (segments, control                                                                               points, components, etc.) to transform  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :param position:  Delta position, determines the translation.  
        :type position: :py:class:`NXOpen.Point3d` 
        :param transform:  Rotation matrix, specifies the rotation to apply.  
        :type transform: :py:class:`NXOpen.Matrix3x3` 
        :param copyOperation:  if true, copies the input tags and moves the copy.                                                                If false, just moves the input tags.   
        :type copyOperation: bool 
        :returns:  Objects surviving the operation (the
        copied objects for a copy, the moved objects
        for a move). Can contain None entries  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def MergeDuplicateRcps(self, tolerance: float, rcps: 'list[ControlPoint]') -> bool:
        """
        Finds the duplicate Routing Control Points (RCPs) within given tolerance and
        merges them.  
        
        Call :py:meth:`NXOpen.Update.DoUpdate` afterwards to ensure that
        the duplicates are deleted. 
        
        Signature ``MergeDuplicateRcps(tolerance, rcps)`` 
        
        :param tolerance:  Tolerance value to determine duplicate RCPs  
        :type tolerance: float 
        :param rcps:  The Routing Control Points (RCPs)  
        :type rcps: list of :py:class:`NXOpen.Routing.ControlPoint` 
        :returns:  If RCPs are merged returns TRUE else FALSE  
        :rtype: bool 
        
        .. versionadded:: NX7.5.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveComponents(self, components: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Removes the :py:class:`NXOpen.Assemblies.Component` objects from the assembly
        and updates the routing path data.  
        
        Signature ``RemoveComponents(components)`` 
        
        :param components:  Components to remove, this method will                                                    delete these objects.  
        :type components: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ConnectPartPorts(self, component: NXOpen.Assemblies.Component) -> None:
        """
        Connects ports present in this :py:class:`NXOpen.Assemblies.Component`.  
        
        Signature ``ConnectPartPorts(component)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def BuildFabrication(self, filename: str, objects: 'list[NXOpen.NXObject]', charxData: CharacteristicList) -> NXOpen.Part:
        """
        Creates a Routing fabrication, a sub-assembly made of
        :py:class:`NXOpen.Assemblies.Component`s and
        :py:class:`NXOpen.Routing.Stock` from the assembly in which
        the Routing Fabrication is created. 
        
        Signature ``BuildFabrication(filename, objects, charxData)`` 
        
        :param filename:  The name of the file where newly created fabrication component would be saved 
        :type filename: str 
        :param objects:  Routing objects to be fabricated  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :param charxData:  attributes to apply to the fabricated component.  
        :type charxData: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def BuildFabrication(self, filename: str, objects: 'list[NXOpen.NXObject]', optionalCharxData: CharacteristicList, requiredCharxData: CharacteristicList) -> NXOpen.Part:
        """
        Creates a Routing fabrication, a sub-assembly made of
        :py:class:`NXOpen.Assemblies.Component`s and
        :py:class:`NXOpen.Routing.Stock` from the assembly in which
        the Routing Fabrication is created. 
        
        Signature ``BuildFabrication(filename, objects, optionalCharxData, requiredCharxData)`` 
        
        :param filename:  The name of the file where newly created fabrication component would be saved 
        :type filename: str 
        :param objects:  Routing objects to be fabricated  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :param optionalCharxData:  Required attributes to apply to the fabricated component.  
        :type optionalCharxData: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param requiredCharxData:  Optional attributes to apply to the fabricated component. 
        :type requiredCharxData: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateBom(self, level: RouteManagerBomLevel, length: RouteManagerBomStockLength, fabNumbering: RouteManagerBomFabrication, blankLines: RouteManagerBomBlankLines, formatFilePart: NXOpen.Part) -> None:
        """
        Creates Bill of Material (BOM).  
        
        BOM generates a table with the relevant
        information regarding the existing routing objects present in the NX window.
        Various options are available on the BOM dialog to control the generated output.
        These options are the inputs to this function. 
        
        Signature ``CreateBom(level, length, fabNumbering, blankLines, formatFilePart)`` 
        
        :param level:  How fabrications are reported.  
        :type level: :py:class:`NXOpen.Routing.RouteManagerBomLevel` 
        :param length:  How stock length is reported.  
        :type length: :py:class:`NXOpen.Routing.RouteManagerBomStockLength` 
        :param fabNumbering:  Is fabrication numbering option on/off?  
        :type fabNumbering: :py:class:`NXOpen.Routing.RouteManagerBomFabrication` 
        :param blankLines:   Unused  
        :type blankLines: :py:class:`NXOpen.Routing.RouteManagerBomBlankLines` 
        :param formatFilePart:  Part List format file part.  
        :type formatFilePart: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportPartListFormatFile(self, fileName: str) -> NXOpen.Part:
        """
        Loads the part list format (template) file.  
        
        Part list is based on this
        format and using this Bill of Material (BOM) is generated.  
        
        Signature ``ImportPartListFormatFile(fileName)`` 
        
        :param fileName:  File name to load.  
        :type fileName: str 
        :returns:  Template part.  
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateLinearPathBuilder(self) -> LinearPathBuilder:
        """
        Creates a linear path builder for building a path consisting of
        lines, arcs (bends) and elbows.  
        
        Signature ``CreateLinearPathBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.LinearPathBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateElbowSnapSettings(self) -> ElbowSnapSettings:
        """
        Creates a snap elbow settings object, this object is only useful for
        :py:class:`NXOpen.Routing.LinearPathBuilder` object.  
        
        Signature ``CreateElbowSnapSettings()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ElbowSnapSettings` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreatePathStockBuilder(self) -> PathStockBuilder:
        """
        Creates a path stock builder.  
        
        This builder can be used for assigning stock
        to new path segments based off of the current default stock and the
        settings in this builder.  
        
        Signature ``CreatePathStockBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateLinearPathSettings(self) -> LinearPathSettings:
        """
        Creates a linear path settings object which stores preferences to
        apply when creating linear paths using a :py:class:`NXOpen.Routing.LinearPathBuilder`.  
        
        Signature ``CreateLinearPathSettings()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.LinearPathSettings` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateQuickPathBuilder(self) -> QuickPathBuilder:
        """
        Creates a Quick Path builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.QuickPathBuilder` class for a description of
        the builder.   
        
        Signature ``CreateQuickPathBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.QuickPathBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def CreateDesignRuleViolationViewer(self, violations: 'list[NXOpen.NXObject]') -> DesignRuleViolationViewer:
        """
        Creates a :py:class:`NXOpen.Routing.DesignRuleViolationViewer` to display the given violations
        in the Design Rule Violation Browser just like the Browse Violations command.
        
        Signature ``CreateDesignRuleViolationViewer(violations)`` 
        
        :param violations: 
        :type violations: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationViewer` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateDesignRuleViolationViewer(self) -> DesignRuleViolationViewer:
        """
        Runs all the registered Design Rules just like the Interactive Check command.
        Then creates a :py:class:`NXOpen.Routing.DesignRuleViolationViewer` to display any violations
        found in the Design Rule Violation Browser.
        
        Signature ``CreateDesignRuleViolationViewer()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationViewer` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateDeleteObjectsBuilder(self, objects: 'list[NXOpen.NXObject]') -> DeleteObjectsBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.DeleteObjectsBuilder` for deleting routing objects.  
        
        Signature ``CreateDeleteObjectsBuilder(objects)`` 
        
        :param objects:  Routing objects to delete  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DeleteObjectsBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateInfoObjectsBuilder(self, objects: 'list[NXOpen.NXObject]') -> InfoObjectsBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.InfoObjectsBuilder` for deleting routing objects.  
        
        Signature ``CreateInfoObjectsBuilder(objects)`` 
        
        :param objects:  Routing objects to delete  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.InfoObjectsBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateConnectedCurvesBuilder(self) -> ConnectedCurvesBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.ConnectedCurvesBuilder` for building segments
        on end-to-end connected curves.  
        
        Signature ``CreateConnectedCurvesBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ConnectedCurvesBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateSimplifyPathBuilder(self, segments: 'list[ISegment]') -> SimplifyPathBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.SimplifyPathBuilder` that combines the
        collinear segments by merging RCPs.  
        
        Signature ``CreateSimplifyPathBuilder(segments)`` 
        
        :param segments:  Routing segments to combine  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SimplifyPathBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateEditLineSegmentBuilder(self, line: LineSegment) -> EditLineSegmentBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.EditLineSegmentBuilder` for editing and locking
        the length of line segments.  
        
        Signature ``CreateEditLineSegmentBuilder(line)`` 
        
        :param line:  The segment                                                                                    to edit.  
        :type line: :py:class:`NXOpen.Routing.LineSegment` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.EditLineSegmentBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateSubdivideSegmentBuilder(self, segment: NXOpen.NXObject, pickPoint: NXOpen.Point3d) -> SubdivideSegmentBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.SubdivideSegmentBuilder` that can
        subdivide a segment into multiple segments
        
        Signature ``CreateSubdivideSegmentBuilder(segment, pickPoint)`` 
        
        :param segment:  Routing segment to be subdivided  
        :type segment: :py:class:`NXOpen.NXObject` 
        :param pickPoint:  Location on the segment picked by the user  
        :type pickPoint: :py:class:`NXOpen.Point3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SubdivideSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateSplinePathBuilder(self, spline: NXOpen.Curve) -> SplinePathBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.SplinePathBuilder` which creates
        D-Cubed constrainted splines.  
        
        Signature ``CreateSplinePathBuilder(spline)`` 
        
        :param spline:  The spline to edit.  
        :type spline: :py:class:`NXOpen.Curve` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SplinePathBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateStockOffsetPointBuilder(self, pointOrRcp: NXOpen.NXObject) -> StockOffsetPointBuilder:
        """
        Creates a builder than can create or edit stock offset points.  
        
        This builder
        can convert a normal dumb point to stock offset point as well as convert
        a stock offset point to a normal point.  
        
        Signature ``CreateStockOffsetPointBuilder(pointOrRcp)`` 
        
        :param pointOrRcp:  The point or Routing                                                                        control point to edit,                                                                        may be None.  
        :type pointOrRcp: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockOffsetPointBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateTransformPathBuilder(self, objs: 'list[NXOpen.NXObject]') -> TransformPathBuilder:
        """
        FIXME  
        
        Signature ``CreateTransformPathBuilder(objs)`` 
        
        :param objs:  Initial array of objects to transform .  
        :type objs: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.TransformPathBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def CreateAssignCornerBuilder(self) -> AssignCornerBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.AssignCornerBuilder` which creates corner 
        
        Signature ``CreateAssignCornerBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AssignCornerBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateAssignCornerBuilder(self, selectedObject: NXOpen.NXObject) -> AssignCornerBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.AssignCornerBuilder` which creates corner 
        
        Signature ``CreateAssignCornerBuilder(selectedObject)`` 
        
        :param selectedObject: 
        :type selectedObject: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AssignCornerBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateSpaceReservationBuilder(self, objects: 'list[NXOpen.NXObject]') -> SpaceReservationBuilder:
        """
        Creates a Space Reservation builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.SpaceReservationBuilder` class for a description of
        the builder.   
        
        Signature ``CreateSpaceReservationBuilder(objects)`` 
        
        :param objects:  Routing segments to create Space                                                                       Reservation stock on or Space                                                                       Reservation stock to be edited  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SpaceReservationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateOverstockBuilder(self, overstock: Overstock) -> OverstockBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.OverstockBuilder` that can
        create or edit overstock.  
        
        Signature ``CreateOverstockBuilder(overstock)`` 
        
        :param overstock:  Overstock to edit  
        :type overstock: :py:class:`NXOpen.Routing.Overstock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFillerStockBuilder(self, objects: 'list[NXOpen.NXObject]') -> FillerStockBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.FillerStockBuilder`  
        
        Signature ``CreateFillerStockBuilder(objects)`` 
        
        :param objects:  Routing segments to create Filler Stock                                                                       or filler stock to be edited  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FillerStockBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def CreateStockStyleBuilder(self, objects: 'list[NXOpen.NXObject]') -> StockStyleBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.StockStyleBuilder` which assigns style to stock 
        
        Signature ``CreateStockStyleBuilder(objects)`` 
        
        :param objects:  Routing stock (Routing.  
        
        Stock )to change                                                                       style or segment (Routing.ISegment) having stock with                                                                       style as centerline                                                                    
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockStyleBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateStockBuilder(self, objects: 'list[NXOpen.NXObject]') -> StockBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.StockBuilder` that can create or edit stock.  
        
        Signature ``CreateStockBuilder(objects)`` 
        
        :param objects:  Routing segments to assign                                                                       stock to or stock to be edited  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateStockBrowserBuilder(self) -> StockBrowserBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.StockBrowserBuilder` which finds and filters stock 
        
        Signature ``CreateStockBrowserBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockBrowserBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CopyOverstock(self) -> str:
        """
        Copy the overstock from subassembly to parent assembly.  
        
        This functionality, gets the segments which are wavelinked from the subassembly
        to the parent assembly. It finds the overstock alloted to these segments in subassembly
        and recreate them over wavelinked segment at the parent assembly level.  
        
        Signature ``CopyOverstock()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateRouteSweptTwistBuilder(self, objects: NXOpen.NXObject) -> RouteSweptTwistBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.RouteSweptTwistBuilder`  
        
        Signature ``CreateRouteSweptTwistBuilder(objects)`` 
        
        :param objects:  Routing Stocks to assign twist  
        :type objects: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.RouteSweptTwistBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def CreateRouteSweptFoldBuilder(self, selectedStock: NXOpen.NXObject, editFoldObj: NXOpen.NXObject) -> RouteSweptFoldBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.RouteSweptFoldBuilder`.  
        
        Signature ``CreateRouteSweptFoldBuilder(selectedStock, editFoldObj)`` 
        
        :param selectedStock:  Routing stock selected to insert fold into  
        :type selectedStock: :py:class:`NXOpen.NXObject` 
        :param editFoldObj:  Routing fold segment to edit.  
        :type editFoldObj: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.RouteSweptFoldBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def CreateStockColorBuilder(self) -> StockColorBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.StockColorBuilder` which assigns color to the face of stocks
        having rectangular cross sections
        
        Signature ``CreateStockColorBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockColorBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def CreateCopeCornerBuilder(self, selectedPoint: NXOpen.NXObject) -> CopeCornerBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.CopeCornerBuilder`.  
        
        Signature ``CreateCopeCornerBuilder(selectedPoint)`` 
        
        :param selectedPoint:  Routing Control Point  
        :type selectedPoint: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CopeCornerBuilder` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.0.0
           Use :py:meth:`NXOpen.Routing.RouteManager.CreateAssignCornerBuilder` and then set the corner type as cope with :py:meth:`NXOpen.Routing.CornerTypeBuilder`.
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def CreateRemoveDiscontinuityBuilder(self, objects: 'list[NXOpen.NXObject]') -> RemoveDiscontinuityBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.RemoveDiscontinuityBuilder` which removes
        selected discontinuity corners  
        
        Signature ``CreateRemoveDiscontinuityBuilder(objects)`` 
        
        :param objects:  Routing Control Point  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.RemoveDiscontinuityBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateUnifyPathBuilder(self, objects: 'list[NXOpen.NXObject]') -> UnifyPathBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.UnifyPathBuilder` which replaces given stocks
        and fittings based on the new :py:class:`NXOpen.Routing.CharacteristicList`.  
        
        Useful for unifying all of the stocks and components (e.g. elbows and tees) in
        a path to the same characteristics.  
        
        Signature ``CreateUnifyPathBuilder(objects)`` 
        
        :param objects:  Routing Stocks or Components to unify. 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.UnifyPathBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateClockPartBuilder(self, selectedPort: NXOpen.NXObject) -> ClockPartBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.ClockPartBuilder`.  
        
        for the rotation of
        component.  
        
        Signature ``CreateClockPartBuilder(selectedPort)`` 
        
        :param selectedPort:  Routing Port  
        :type selectedPort: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ClockPartBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateConnectPathBuilder(self) -> ConnectPathBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.ConnectPathBuilder` which connects path 
        
        Signature ``CreateConnectPathBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ConnectPathBuilder` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateOverstockFacesBuilder(self) -> OverstockFacesBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.OverstockFacesBuilder` to qualify faces
        of fittings for overstock application 
        
        Signature ``CreateOverstockFacesBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.OverstockFacesBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateCablewaysBuilder(self) -> NXOpen.Routing.Electrical.CablewaysBuilder:
        """
        Creates :py:class:`NXOpen.Routing.Electrical.CablewaysBuilder`.  
        
        Signature ``CreateCablewaysBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Electrical.CablewaysBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_cabling ("Routing Cabling")
        """
        ...
    
    
    def CreateCablewaysLayoutBuilder(self) -> NXOpen.Routing.Electrical.CablewaysLayoutBuilder:
        """
        Creates :py:class:`NXOpen.Routing.Electrical.CablewaysBuilder`.  
        
        Signature ``CreateCablewaysLayoutBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_cabling ("Routing Cabling")
        """
        ...
    
    
    def CreateEditCharacteristicsBuilder(self, objects: 'list[NXOpen.NXObject]') -> EditCharacteristicsBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.EditCharacteristicsBuilder` that edits
        the Required and Optional :py:class:`NXOpen.Routing.CharacteristicList`
        (UG attribute values) of :py:class:`NXOpen.Routing.Stock` or
        :py:class:`NXOpen.Assemblies.Component`.  
        
        Signature ``CreateEditCharacteristicsBuilder(objects)`` 
        
        :param objects:  Routing Stocks or Components to edit characteristics. 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.EditCharacteristicsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateRoutingPlacePartBuilder(self, partCharx: CharacteristicList, placementPos: NXOpen.Point3d, placementObj: NXOpen.TaggedObject) -> PlacePartBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.PlacePartBuilder` that is used to place
        a routing part into an assembly.  
        
        Signature ``CreateRoutingPlacePartBuilder(partCharx, placementPos, placementObj)`` 
        
        :param partCharx:  Part Characteristics.  
        :type partCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param placementPos:  The location in 3D space where the part was dropped.  
        :type placementPos: :py:class:`NXOpen.Point3d` 
        :param placementObj:  The object the part was dropped on. Can be None  
        :type placementObj: :py:class:`NXOpen.TaggedObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlacePartBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreatePlacePartBuilder(self, nodeIdentifier: str, filteredPtbRowIndex: int, placementPos: NXOpen.Point3d, placementObj: NXOpen.TaggedObject) -> PlacePartBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.PlacePartBuilder` that is used to place
        a routing part into an assembly.  
        
        Signature ``CreatePlacePartBuilder(nodeIdentifier, filteredPtbRowIndex, placementPos, placementObj)`` 
        
        :param nodeIdentifier:  The identifier of the reuse node that contains the part being placed.  
        :type nodeIdentifier: str 
        :param filteredPtbRowIndex:  The index of the row in the reuse node table to place.  
        :type filteredPtbRowIndex: int 
        :param placementPos:  The location in 3D space where the part was dropped.  
        :type placementPos: :py:class:`NXOpen.Point3d` 
        :param placementObj:  The object the part was dropped on. Can be None  
        :type placementObj: :py:class:`NXOpen.TaggedObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlacePartBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreatePlacePartBuilderFS(self, nodeIdentifier: str, fileSelectCharx: CharacteristicList, placementPos: NXOpen.Point3d, placementObj: NXOpen.TaggedObject, replacePartOp: bool) -> PlacePartBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.PlacePartBuilder` that is used to place
        a routing part into an assembly.  
        
        Signature ``CreatePlacePartBuilderFS(nodeIdentifier, fileSelectCharx, placementPos, placementObj, replacePartOp)`` 
        
        :param nodeIdentifier:  The identifier of the reuse node that contains the part being placed.  
        :type nodeIdentifier: str 
        :param fileSelectCharx:  The charx for the file select part.  
        :type fileSelectCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param placementPos:  The location in 3D space where the part was dropped.  
        :type placementPos: :py:class:`NXOpen.Point3d` 
        :param placementObj:  The object the part was dropped on. Can be None  
        :type placementObj: :py:class:`NXOpen.TaggedObject` 
        :param replacePartOp:  Are we replacing an existing part.  
        :type replacePartOp: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlacePartBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreatePlacePartBuilderPTS(self, ptsPart: NXOpen.TaggedObject, ptsInstance: NXOpen.TaggedObject, placementPos: NXOpen.Point3d, placementObj: NXOpen.TaggedObject) -> PlacePartBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.PlacePartBuilder` that is used to place
        a routing part into an assembly.  
        
        Signature ``CreatePlacePartBuilderPTS(ptsPart, ptsInstance, placementPos, placementObj)`` 
        
        :param ptsPart:  The PTS part being placed.  
        :type ptsPart: :py:class:`NXOpen.TaggedObject` 
        :param ptsInstance:  The instance of the placed PTS part.  
        :type ptsInstance: :py:class:`NXOpen.TaggedObject` 
        :param placementPos:  The location in 3D space where the part was dropped.  
        :type placementPos: :py:class:`NXOpen.Point3d` 
        :param placementObj:  The object the part was dropped on. Can be None  
        :type placementObj: :py:class:`NXOpen.TaggedObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlacePartBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateEditPlacePartBuilder(self, partOcc: NXOpen.Assemblies.Component) -> EditPlacePartBuilder:
        """
        Creates a :py:class:`Routing.EditPlacePartBuilder` that is used to edit the location of a previously placed
        routing part in an assembly.  
        
        Signature ``CreateEditPlacePartBuilder(partOcc)`` 
        
        :param partOcc:  The placed part occurrence to edit  
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.EditPlacePartBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreatePlacementSolutionsBuilder(self) -> PlacementSolutionsBuilder:
        """
        Creates a placement solutions builder used to position a part that has been placed in the assembly.  
        
        Signature ``CreatePlacementSolutionsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlacementSolutionsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateStockTransitionBuilder(self, objects: 'list[NXOpen.NXObject]') -> StockTransitionBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.StockTransitionBuilder` that can create or edit stockTransition.  
        
        Signature ``CreateStockTransitionBuilder(objects)`` 
        
        :param objects:  Routing segments to assign                                                                       stockTransition to or stockTransition to be edited  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockTransitionBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFittingOverstockBuilder(self, overstock: FittingOverstock) -> FittingOverstockBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.FittingOverstockBuilder` that applies
        or edits overstock on fittings.  
        
        Signature ``CreateFittingOverstockBuilder(overstock)`` 
        
        :param overstock:  Fitting Overstock to edit  
        :type overstock: :py:class:`NXOpen.Routing.FittingOverstock` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FittingOverstockBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ModelTerminalsBuilder(self) -> ModelTerminalsBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.ModelTerminalsBuilder` which Models Terminal 
        
        Signature ``ModelTerminalsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ModelTerminalsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def TerminalPortBuilder(self) -> TerminalPortBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.TerminalPortBuilder`  
        
        Signature ``TerminalPortBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.TerminalPortBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_harness ("Routing Harness")
        """
        ...
    
    
    def CreateAssignDiscontinuityBuilder(self, selectedPoint: NXOpen.NXObject) -> AssignDiscontinuityBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.AssignDiscontinuityBuilder`  
        
        Signature ``CreateAssignDiscontinuityBuilder(selectedPoint)`` 
        
        :param selectedPoint:  Routing Control Point  
        :type selectedPoint: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AssignDiscontinuityBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateManualRouteBuilder(self, routeLevel: NXOpen.Routing.Electrical.ElectricalStockDeviceRouteLevel, elecStockDevice: NXOpen.Routing.Electrical.ElectricalStockDevice) -> ManualRouteBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.ManualRouteBuilder` that can create or edit stockTransition.  
        
        Signature ``CreateManualRouteBuilder(routeLevel, elecStockDevice)`` 
        
        :param routeLevel:  Enum to define the routing level for manual route.  
        :type routeLevel: :py:class:`NXOpen.Routing.Electrical.ElectricalStockDeviceRouteLevel` 
        :param elecStockDevice: 
        :type elecStockDevice: :py:class:`NXOpen.Routing.Electrical.ElectricalStockDevice` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ManualRouteBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateSplitDuctBuilder(self) -> SplitDuctBuilder:
        """
        Creates a Split Duct builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.SplitDuctBuilder` class for a description of
        the builder.  
        
        Signature ``CreateSplitDuctBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SplitDuctBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def CreateHandrailBuilder(self) -> HandrailBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.HandrailBuilder` object.  
        
        Signature ``CreateHandrailBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.HandrailBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def CreateDivisionsBuilder(self, selectedPort: NXOpen.NXObject, isAbsoluteFlow: bool) -> DivisionsBuilder:
        """
        Creates a Divisions builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.DivisionsBuilder` class for a description of
        the builder.  
        
        Signature ``CreateDivisionsBuilder(selectedPort, isAbsoluteFlow)`` 
        
        :param selectedPort:  Routing Port  
        :type selectedPort: :py:class:`NXOpen.NXObject` 
        :param isAbsoluteFlow:  if TRUE: displays absolute flow percentage for each                                                                  division, else displays relative flow percentage  
        :type isAbsoluteFlow: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DivisionsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def CreateEditBendAngleBuilder(self, bendRcp: NXOpen.NXObject) -> EditBendAngleBuilder:
        """
        Creates an Edit Bend Angle builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.EditBendAngleBuilder` class for a description of
        the builder.  
        
        Signature ``CreateEditBendAngleBuilder(bendRcp)`` 
        
        :param bendRcp:  Routing Port  
        :type bendRcp: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.EditBendAngleBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GenerateCablewaysLayoutData(self, segment: NXOpen.Curve, xform: NXOpen.Xform, width: float, height: float, gridFactor: int) -> tuple:
        """
        Generates the cableways layout data (cable center points) using the
        default bin-packing algorithm.  
        
        Signature ``GenerateCablewaysLayoutData(segment, xform, width, height, gridFactor)`` 
        
        :param segment:  Cableways layout segment.  
        :type segment: :py:class:`NXOpen.Curve` 
        :param xform:  Coordinate system used for generating the data.  
        :type xform: :py:class:`NXOpen.Xform` 
        :param width:  Width of the cable tray or the rectangular space reservation.  
        :type width: float 
        :param height:  Height of the cable tray or the rectangular space reservation.  
        :type height: float 
        :param gridFactor:  Determines the spacing between the grid points used in the default bin-packing algorithm. Larger the grid factor, less will be the spacing.  
        :type gridFactor: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (points, cables). points is a list of :py:class:`NXOpen.Point`. cables is a list of :py:class:`NXOpen.Routing.Electrical.CableDevice`. 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAllBIPComponents(self) -> 'list[NXOpen.Assemblies.Component]':
        """
        Returns all of the Built-in path components in the current part 
        
        Signature ``GetAllBIPComponents()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX7.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ComponentHasBIPGeometry(self, bipComponent: NXOpen.Assemblies.Component) -> bool:
        """
        Determines whether or not a built-in path component has proper work part geometry.  
        
        Signature ``ComponentHasBIPGeometry(bipComponent)`` 
        
        :param bipComponent:  BIP Component  
        :type bipComponent: :py:class:`NXOpen.Assemblies.Component` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX7.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def PromoteBIPGeometry(self, bipComponent: NXOpen.Assemblies.Component) -> None:
        """
        Finds all bip components which do not have referencing built-in path updaters and creates them.  
        
        This may also involve creating the workpart geometry for the Built-in path if needed. 
        
        Signature ``PromoteBIPGeometry(bipComponent)`` 
        
        :param bipComponent: 
        :type bipComponent: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX7.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFabricationBuilder(self, objects: 'list[NXOpen.NXObject]') -> CreateFabricationBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.CreateFabricationBuilder` which fabricate subassembly from standard parts, path segments, stock, and other routing objects within the current routing assembly  
        
        Signature ``CreateFabricationBuilder(objects)`` 
        
        :param objects:  Routing objects to be fabricated  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CreateFabricationBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SplitRunBuilder(self, run: Run) -> SplitRunBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.SplitRunBuilder` that can
        split a run.  
        
        Signature ``SplitRunBuilder(run)`` 
        
        :param run:  Cableways layout segment.  
        :type run: :py:class:`NXOpen.Routing.Run` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.SplitRunBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateInstanceNameLookupBuilder(self) -> InstanceNameLookupBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.InstanceNameLookupBuilder` which is used to look up the
        matching part to place based on the criteria defined in the INSTANCE_NAME_LOOKUP node and the ship
        identifier specified in the customer defaults.  
        
        Signature ``CreateInstanceNameLookupBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.InstanceNameLookupBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_pipetube ("Routing Piping and Tubing")
        """
        ...
    
    
    def CreateWatertightFittingsBuilder(self) -> WatertightFittingsBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.WatertightFittingsBuilder` that
        creates Watertight Fittings.  
        
        Signature ``CreateWatertightFittingsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.WatertightFittingsBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def IntegrateRunsBuilder(self, firstRun: Run, secondRun: Run) -> IntegrateRunsBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.IntegrateRunsBuilder` that can
        Integrate two runs.  
        
        Signature ``IntegrateRunsBuilder(firstRun, secondRun)`` 
        
        :param firstRun:  Cableways layout segment.  
        :type firstRun: :py:class:`NXOpen.Routing.Run` 
        :param secondRun: 
        :type secondRun: :py:class:`NXOpen.Routing.Run` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.IntegrateRunsBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateDuctSizeCalculatorBuilder(self, objects: 'list[NXOpen.NXObject]') -> DuctSizeCalculatorBuilder:
        """
        Creates a Duct size calculator builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.DuctSizeCalculatorBuilder` for a description of the builder  
        
        Signature ``CreateDuctSizeCalculatorBuilder(objects)`` 
        
        :param objects:  Routing segments to assign Flow Attributes or stocks  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DuctSizeCalculatorBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def CreateAssignProxyBuilder(self, objects: 'list[NXOpen.NXObject]') -> NXOpen.Routing.Electrical.AssignProxyBuilder:
        """
        Creates a proxy port assigned to a connector.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.Electrical.AssignProxyBuilder` class for a description of
        the builder.  
        
        Signature ``CreateAssignProxyBuilder(objects)`` 
        
        :param objects:  Routing connectors 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Electrical.AssignProxyBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AssembleConnectionsImportedFromSubAssemblies(self) -> None:
        """
        Copies the connections, connectors and devices from the design elements of
        study to the part containing object_in_part and assembles them.  
        
        Signature ``AssembleConnectionsImportedFromSubAssemblies()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateRunItem(self, referenceID: str, itemType: RunItemType, attributes: CharacteristicList) -> RunItem:
        """
        Creates a new :py:class:`NXOpen.Routing.RunItem`.  
        
        Use :py:meth:`Routing.RunCollection.CreateRun` to create a new run with this new item.
        Use :py:meth:`NXOpen.Routing.Run.Edit` to add this new item to an existing run.  
        
        Signature ``CreateRunItem(referenceID, itemType, attributes)`` 
        
        :param referenceID:  Unique reference identifier of this Run Item  
        :type referenceID: str 
        :param itemType:  Run Item type  
        :type itemType: :py:class:`NXOpen.Routing.RunItemType` 
        :param attributes:  Run Item attributes  
        :type attributes: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.RunItem` 
        
        .. versionadded:: NX7.5.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFindByAttributesBuilder(self) -> FindByAttributesBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.FindByAttributesBuilder`  
        
        Signature ``CreateFindByAttributesBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FindByAttributesBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateDuctReinforcementBuilder(self, ductReinforcement: DuctReinforcement) -> DuctReinforcementBuilder:
        """
        Creates an HVAC Duct Reinforcement Builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.DuctReinforcementBuilder` class for a description of the builder.  
        
        Signature ``CreateDuctReinforcementBuilder(ductReinforcement)`` 
        
        :param ductReinforcement: 
        :type ductReinforcement: :py:class:`NXOpen.Routing.DuctReinforcement` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DuctReinforcementBuilder` 
        
        .. versionadded:: NX8.5.2
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def CreateWindCatcherBuilder(self, windCatcher: WindCatcher) -> WindCatcherBuilder:
        """
        Creates an HVAC Wind Catcher builder.  
        
        See the documentation in the
        :py:class:`NXOpen.Routing.WindCatcherBuilder` class for a description of the builder.  
        
        Signature ``CreateWindCatcherBuilder(windCatcher)`` 
        
        :param windCatcher:  :py:class:`NXOpen.Routing.WindCatcher` to be edited, if any. Can be None. 
        :type windCatcher: :py:class:`NXOpen.Routing.WindCatcher` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.WindCatcherBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    @typing.overload
    def CreatePlatformCreatorBuilder(self) -> PlatformCreatorBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.PlatformCreatorBuilder` which creates accessways platform  
        
        Signature ``CreatePlatformCreatorBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlatformCreatorBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    @typing.overload
    def CreatePlatformCreatorBuilder(self, platformFeature: PlatformFeature) -> PlatformCreatorBuilder:
        """
        Creates an Platform builder. See the documentation in the
        :py:class:`NXOpen.Routing.PlatformCreatorBuilder` class for a description of the builder.  
        
        Signature ``CreatePlatformCreatorBuilder(platformFeature)`` 
        
        :param platformFeature:  :py:class:`NXOpen.Routing.PlatformFeature` 
        :type platformFeature: :py:class:`NXOpen.Routing.PlatformFeature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlatformCreatorBuilder` 
        
        .. versionadded:: NX8.5.1
        
        License requirements: routing_platform ("Routing Platform")
        """
        ...
    
    
    def CreateAssignPathBuilder(self, run: Run) -> AssignPathBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.AssignPathBuilder`  
        
        Signature ``CreateAssignPathBuilder(run)`` 
        
        :param run:  :py:class:`NXOpen.Routing.Run`  
        :type run: :py:class:`NXOpen.Routing.Run` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AssignPathBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateAttributeHolder(self) -> AttributeHolder:
        """
        Creates a :py:class:`NXOpen.Routing.AttributeHolder` to set Template Attributes and
        then copying Template Attributes to Routing Objects.  
        
        Signature ``CreateAttributeHolder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AttributeHolder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateDefineRunBuilder(self, selectedRun: Run) -> DefineRunBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.DefineRunBuilder` that can
        create or edit a run.  
        
        Signature ``CreateDefineRunBuilder(selectedRun)`` 
        
        :param selectedRun: Routing.Run 
        :type selectedRun: :py:class:`NXOpen.Routing.Run` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DefineRunBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateGapDisplayBuilder(self) -> GapDisplayBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.GapDisplayBuilder` for creating gaps
        and bridges across line segments.  
        
        Signature ``CreateGapDisplayBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.GapDisplayBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateAddFontBuilder(self) -> AddFontBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.AddFontBuilder` for creating user-defined line fonts
        to use with line segments.  
        
        Signature ``CreateAddFontBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AddFontBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateDeleteFontsBuilder(self, objects: 'list[NXOpen.NXObject]') -> DeleteFontsBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.DeleteFontsBuilder` for deleting routing line fonts from segments.  
        
        Signature ``CreateDeleteFontsBuilder(objects)`` 
        
        :param objects:  Routing objects to delete  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DeleteFontsBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateDeleteGapsBuilder(self, objects: 'list[NXOpen.NXObject]') -> DeleteGapsBuilder:
        """
        Creates a  :py:class:`NXOpen.Routing.DeleteGapsBuilder` for deleting routing objects.  
        
        Signature ``CreateDeleteGapsBuilder(objects)`` 
        
        :param objects:  Routing objects to delete  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.DeleteGapsBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportRunsNative(self, path: str) -> None:
        """
        Builds runs from all Xmls contained in the provided folder path.  
        
        Signature ``ImportRunsNative(path)`` 
        
        :param path: 
        :type path: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ImportRunsManaged(self, itemPartNumber: str, itemRevision: str) -> None:
        """
        Builds runs from all Xmls defined on the provided Item Revision from Teamcenter.  
        
        Signature ``ImportRunsManaged(itemPartNumber, itemRevision)`` 
        
        :param itemPartNumber: 
        :type itemPartNumber: str 
        :param itemRevision: 
        :type itemRevision: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateCompareRunsBuilder(self, run: Run) -> CompareRunsBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.CompareRunsBuilder` to compare runs in the working part
        to another part or an xml definition.  
        
        Signature ``CreateCompareRunsBuilder(run)`` 
        
        :param run: Routing.Run 
        :type run: :py:class:`NXOpen.Routing.Run` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CompareRunsBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def HasAllReferencingStockComponentsLoaded(self, objectToValidate: NXOpen.TaggedObject) -> bool:
        """
        Checks whether all the stock components referenced by the given Routing object are loaded or not.  
        
        Signature ``HasAllReferencingStockComponentsLoaded(objectToValidate)`` 
        
        :param objectToValidate:  Routing object to validate for referencing unloaded stock components.  
        :type objectToValidate: :py:class:`NXOpen.TaggedObject` 
        :returns:  Are all the referencing stock components loaded or not.  
        :rtype: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateBranchPathNumberingBuilder(self) -> BranchPathNumberingBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.BranchPathNumberingBuilder` for labeling branches.  
        
        Signature ``CreateBranchPathNumberingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.BranchPathNumberingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def PlacePostPlacementParts(self, placedPart: NXOpen.Assemblies.Component, postPartCharx: CharacteristicList) -> 'list[NXOpen.Assemblies.Component]':
        """
        Places post placement parts based on the postPartCharx:py:class:`NXOpen.Routing.CharacteristicList` on the placedPart object.  
        
        The postPartCharx object can be created on the fly, or returned from a search through the part library using
        the :py:meth:`Preferences.RoutingPartLibrary.MatchCriteria` or
        :py:meth:`Preferences.RoutingPartLibrary.MatchCriteriaWithFilter` methods.
        The postPartCharx should be empty to search for post placement part using post placement rules
        of current specification. The first part from the search will be used for post placement if the
        search based on post placement rules returns more than one part.
        
        Signature ``PlacePostPlacementParts(placedPart, postPartCharx)`` 
        
        :param placedPart: 
        :type placedPart: :py:class:`NXOpen.Assemblies.Component` 
        :param postPartCharx: 
        :type postPartCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX8.5.1
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateMergeStocksBuilder(self) -> MergeStocksBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.MergeStocksBuilder` for merging Routing Stocks.  
        
        Stocks are mergeable if they are C1 continuous and have mergeable attributes. 
        
        Signature ``CreateMergeStocksBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.MergeStocksBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateStockDataRefreshBuilder(self) -> StockDataRefreshBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.StockDataRefreshBuilder` for refreshing Routing Stock Data definitions.  
        
        Signature ``CreateStockDataRefreshBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockDataRefreshBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateStockPartConverterBuilder(self) -> StockPartConverterBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.StockPartConverterBuilder`  
        
        Signature ``CreateStockPartConverterBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockPartConverterBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RecreateStockComponents(self) -> str:
        """
        Regenerates the stock components in the assembly.  
        
        This command will fully load the assembly and if any stock components
        are found to be missing, it will recreate those components. Since parts can get opened and deleted it invokes
        full update to restore sanity of the model.  
        
        Signature ``RecreateStockComponents()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertSplineSegments(self) -> tuple:
        """
        Converts all of the spline segments in this part from the pre-NX9 data model
        to the NX9 data model.  
        
        Signature ``ConvertSplineSegments()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (splineSegments, originalSplineLengths, newSplineLengths). splineSegments is a list of :py:class:`NXOpen.Routing.ISegment`.   The converted spline segments.originalSplineLengths is a list of float.   The length of each spline segment before converting.newSplineLengths is a list of float.   The new length of each spline segment after converting.
        
        .. versionadded:: NX9.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ModelConnectionPostPlacementGasket(self, placedPart: NXOpen.Assemblies.Component, connection: PortConnection, reportInBOM: ReuseLibraryReportInBom, gasketCharx: CharacteristicList) -> tuple:
        """
        Places a gasket part based on the gasketCharx :py:class:`NXOpen.Routing.CharacteristicList` .  
        
        The gasket is returned from a search through the reuse part library.
        
        Signature ``ModelConnectionPostPlacementGasket(placedPart, connection, reportInBOM, gasketCharx)`` 
        
        :param placedPart:  The newly placed flange which will be shifted to accommodate the gasket  
        :type placedPart: :py:class:`NXOpen.Assemblies.Component` 
        :param connection:  The original flange flange connection   
        :type connection: :py:class:`NXOpen.Routing.PortConnection` 
        :param reportInBOM:  Is the gasket to be reported in the bill of materials?  
        :type reportInBOM: :py:class:`NXOpen.Routing.ReuseLibraryReportInBom` 
        :param gasketCharx:  The characteristics used to find the gasket in the reuse library  
        :type gasketCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: a tuple 
        :rtype: A tuple consisting of (connectionOne, connectionTwo). connectionOne is a :py:class:`NXOpen.Routing.PortConnection`.   One of the new gasket flange connections connectionTwo is a :py:class:`NXOpen.Routing.PortConnection`.   The other new gasket flange connection 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ModelConnectionPostPlacementGasketBetweenFlanges(self, placedPart: NXOpen.Assemblies.Component, connection: PortConnection, reportInBOM: ReuseLibraryReportInBom, gasketCharx: CharacteristicList) -> tuple:
        """
        Places a gasket part based on the gasketCharx :py:class:`NXOpen.Routing.CharacteristicList` .  
        
        The gasket is returned from a search through the reuse part library.
        This overload allows the caller to recover the modeled gasket.
        
        Signature ``ModelConnectionPostPlacementGasketBetweenFlanges(placedPart, connection, reportInBOM, gasketCharx)`` 
        
        :param placedPart:  The newly placed flange which will be shifted to accommodate the gasket  
        :type placedPart: :py:class:`NXOpen.Assemblies.Component` 
        :param connection:  The original flange flange connection   
        :type connection: :py:class:`NXOpen.Routing.PortConnection` 
        :param reportInBOM:  Is the gasket to be reported in the bill of materials?  
        :type reportInBOM: :py:class:`NXOpen.Routing.ReuseLibraryReportInBom` 
        :param gasketCharx:  The characteristics used to find the gasket in the reuse library  
        :type gasketCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns: a tuple 
        :rtype: A tuple consisting of (connectionOne, connectionTwo, modeledGasket). connectionOne is a :py:class:`NXOpen.Routing.PortConnection`.   One of the new gasket flange connections connectionTwo is a :py:class:`NXOpen.Routing.PortConnection`.   The other new gasket flange connection modeledGasket is a :py:class:`NXOpen.Assemblies.Component`.   The gasket created 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ModelConnectionPostPlacementWeldGap(self, placedPart: NXOpen.Assemblies.Component, connection: PortConnection, gapValue: float) -> None:
        """
        Places a weld gap by adding a weld gap characteristic to one of the part occurrences connected.  
        
        Signature ``ModelConnectionPostPlacementWeldGap(placedPart, connection, gapValue)`` 
        
        :param placedPart:  The newly placed shift flange  
        :type placedPart: :py:class:`NXOpen.Assemblies.Component` 
        :param connection:  The original flange flange connection   
        :type connection: :py:class:`NXOpen.Routing.PortConnection` 
        :param gapValue:  The weld gap width given in the specification  
        :type gapValue: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateConnectionPostPlacementUdo(self, udoType: ReuseLibraryPartType, numberOfItems: int, reportInBOM: ReuseLibraryReportInBom, udoCharx: CharacteristicList, connectionsToLink: 'list[PortConnection]') -> None:
        """
        Creates a user defined object (UDO) linked to one or two connections.  
        
        This UDO is used in connection post placement to represent items of a given type on the bill of materials (BOM).
        
        Signature ``CreateConnectionPostPlacementUdo(udoType, numberOfItems, reportInBOM, udoCharx, connectionsToLink)`` 
        
        :param udoType:  Represents the connection post placement item type in the specification connection compatibility table  
        :type udoType: :py:class:`NXOpen.Routing.ReuseLibraryPartType` 
        :param numberOfItems:  The number of items to represent in the bill of materials  
        :type numberOfItems: int 
        :param reportInBOM:  Are the items to be reported in the bill of materials?  
        :type reportInBOM: :py:class:`NXOpen.Routing.ReuseLibraryReportInBom` 
        :param udoCharx:  Characteristics of the selected item to add to the UDO  
        :type udoCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param connectionsToLink:  Routing connections to link to the UDO  
        :type connectionsToLink: list of :py:class:`NXOpen.Routing.PortConnection` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetReferencingRuns(self, object: NXOpen.NXObject) -> 'list[Run]':
        """
        This function returns objects of type :py:class:`NXOpen.Routing.Run` referring to given input object.  
        
        Generally input object
        for this function may be :py:class:`NXOpen.Routing.ISegment`, :py:class:`NXOpen.Routing.Port`,
        :py:class:`NXOpen.Routing.ControlPoint`, :py:class:`NXOpen.Features.Feature`,  :py:class:`NXOpen.Body` and
        :py:class:`NXOpen.Assemblies.Component`. It will not give error if any other input is passed. In that case
        output array will be empty.
        
        Signature ``GetReferencingRuns(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Run` 
        
        .. versionadded:: NX8.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateAlignStockBuilder(self) -> AlignStockBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.AlignStockBuilder` for aligning Routing Stocks.  
        
        Provide a tool to align non-circular stocks to routing objects. 
        
        Signature ``CreateAlignStockBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.AlignStockBuilder` 
        
        .. versionadded:: NX9.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DesignateFormboardPlacementCSys(self, csys: NXOpen.CoordinateSystem) -> None:
        """
        Designates the passed in Coordinate System as a Formboard Placement Coordinate System for the part 
        
        Signature ``DesignateFormboardPlacementCSys(csys)`` 
        
        :param csys: 
        :type csys: :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX10.0.3
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveFormboardPlacementCSysDesignation(self) -> None:
        """
        Removes the designation of any Formboard Placement Coordinate System for the part 
        
        Signature ``RemoveFormboardPlacementCSysDesignation()`` 
        
        .. versionadded:: NX10.0.3
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def CreatePathArrangementBuilder(self) -> NXOpen.Routing.Electrical.PathArrangementBuilder:
        """
        Creates a :py:class:`Routing.Electrical.PathArrangementBuilder`  
        
        Signature ``CreatePathArrangementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Electrical.PathArrangementBuilder` 
        
        .. versionadded:: NX10.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def IsStockComponent(self, inputComponent: NXOpen.Assemblies.Component) -> bool:
        """
        Identifies if input component is Stock as Component or not.  
        
        This method returns true/false
        true  = The input component is Stock as Component
        false = The input component Fitting Component. 
        
        Signature ``IsStockComponent(inputComponent)`` 
        
        :param inputComponent: 
        :type inputComponent: :py:class:`NXOpen.Assemblies.Component` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def FindRoutingObject(self, searchCriteria: RouteManagerSearchCriteria_Struct) -> RootObject:
        """
        Returns the Routing object, if any, that matches the given search criteria.  
        
        Signature ``FindRoutingObject(searchCriteria)`` 
        
        :param searchCriteria: 
        :type searchCriteria: :py:class:`NXOpen.Routing.RouteManagerSearchCriteria_Struct` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.RootObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def FindRoutingSegments(self, guid: str) -> 'list[ISegment]':
        """
        Returns the :py:class:`Routing.ISegment`s, if any, that match the given globally unique identifier (GUID).  
        
        Signature ``FindRoutingSegments(guid)`` 
        
        :param guid: 
        :type guid: str 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def FindRoutingControlPoint(self, guid: str) -> ControlPoint:
        """
        Returns the :py:class:`Routing.ControlPoint`, if any, that matches the given globally unique identifier (GUID).  
        
        Signature ``FindRoutingControlPoint(guid)`` 
        
        :param guid: 
        :type guid: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def DeselectAllObjectsInNavigators(self) -> None:
        """
        Deselects all objects in both the Component and Connection Navigators.  
        
        Signature ``DeselectAllObjectsInNavigators()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def SelectObjectInNavigator(self, objectToSelect: RootObject) -> None:
        """
        Highlights the given object in the Component or Connection Navigator.  
        
        Once selected, all the other connected devices highlight, too. For example,
        selecting an assigned connector highlights the connector in the Component Navigator,
        the assemblies component if one is assigned, the connections that use it, etc.
        Selecting a connection highlights the connectors it uses and the path it takes, if routed.
        
        Throws an error if the Routing Electrical application or the navigator is
        not initialized. To initialize the navigators, you simply have to open them
        once.
        
        Signature ``SelectObjectInNavigator(objectToSelect)`` 
        
        :param objectToSelect: 
        :type objectToSelect: :py:class:`NXOpen.Routing.RootObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def SelectObjectsInNavigator(self, objectsToSelect: 'list[RootObject]') -> None:
        """
        Highlights the given objects in the Component or Connection Navigator.  
        
        Once selected, all the other connected devices highlight, too. For example,
        selecting an assigned connector highlights the connector in the Component Navigator,
        the assemblies component if one is assigned, the connections that use it, etc.
        Selecting a connection highlights the connectors it uses and the path it takes, if routed.
        
        Throws an error if the Routing Electrical application or the navigator is
        not initialized. To initialize the navigators, you simply have to open them
        once.
        
        Signature ``SelectObjectsInNavigator(objectsToSelect)`` 
        
        :param objectsToSelect: 
        :type objectsToSelect: list of :py:class:`NXOpen.Routing.RootObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def GetSelectedObjectsInNavigators(self) -> 'list[RootObject]':
        """
        Returns all of the objects selected in the Component and Connection Navigators.  
        
        Signature ``GetSelectedObjectsInNavigators()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.RootObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def GetStockFromBody(self, body: NXOpen.Body) -> Stock:
        """
        Returns the :py:class:`Routing.Stock`, if any, that was used to create the given solid body.  
        
        Signature ``GetStockFromBody(body)`` 
        
        :param body: 
        :type body: :py:class:`NXOpen.Body` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def IsConnectionNavigatorOpen(self) -> bool:
        """
        Is the Connection Navigator open?  
        
        Signature ``IsConnectionNavigatorOpen()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def OpenConnectionNavigator(self) -> None:
        """
        Opens the Connection Navigator.  
        
        Signature ``OpenConnectionNavigator()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def IsComponentNavigatorOpen(self) -> bool:
        """
        Is the Component Navigator open?  
        
        Signature ``IsComponentNavigatorOpen()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def OpenComponentNavigator(self) -> None:
        """
        Opens the Component Navigator.  
        
        Signature ``OpenComponentNavigator()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_advanced ("Routing Advanced")
        """
        ...
    
    
    def CreateRoutingPlaceElbowsBuilder(self) -> PlaceElbowsBuilder:
        """
        Creates a :py:class:`NXOpen.Routing.PlaceElbowsBuilder` that is used to place multiple elbows.  
        
        Signature ``CreateRoutingPlaceElbowsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.PlaceElbowsBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: routing_pipetube ("Routing Piping and Tubing")
        """
        ...
    
    DownDirection: NXOpen.Direction = ...
    """
    Returns or sets  the down direction for the part used by Routing.  
    
    <hr>
    
    Getter Method
    
    Signature ``DownDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``DownDirection`` 
    
    :param downDirection: 
    :type downDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    PartTypeFlag: RouteManagerPartType = ...
    """
    Returns or sets  the type for the part used by Routing.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartTypeFlag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteManagerPartType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``PartTypeFlag`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Routing.RouteManagerPartType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    BuiltInPaths: BuiltInPathCollection = ...
    """
    BuiltInPath collection 
    
    Signature ``BuiltInPaths`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.BuiltInPathCollection`
    """
    ControlPoints: ControlPointCollection = ...
    """
    ControlPoint collection 
    
    Signature ``ControlPoints`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ControlPointCollection`
    """
    Ports: PortCollection = ...
    """
    Port Collection 
    
    Signature ``Ports`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PortCollection`
    """
    PortConnections: PortConnectionCollection = ...
    """
    PortConnection Collection 
    
    Signature ``PortConnections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PortConnectionCollection`
    """
    FixturePorts: FixturePortCollection = ...
    """
    FixturePort Collection 
    
    Signature ``FixturePorts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.FixturePortCollection`
    """
    FittingPorts: FittingPortCollection = ...
    """
    FittingPort Collection 
    
    Signature ``FittingPorts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.FittingPortCollection`
    """
    MultiPorts: MultiPortCollection = ...
    """
    MultiPort Collection 
    
    Signature ``MultiPorts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.MultiPortCollection`
    """
    TerminalPorts: TerminalPortCollection = ...
    """
    TerminalPort Collection 
    
    Signature ``TerminalPorts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.TerminalPortCollection`
    """
    ProxyPorts: ProxyPortCollection = ...
    """
    ProxyPort Collection 
    
    Signature ``ProxyPorts`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ProxyPortCollection`
    """
    StockOffsetPorts: StockOffsetPortCollection = ...
    """
    Stock Offset Port Collection.  
    
    Signature ``StockOffsetPorts`` 
    
    .. versionadded:: NX8.0.2
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockOffsetPortCollection`
    """
    OffsetPaths: OffsetPathCollection = ...
    """
    OffsetPath Collection 
    
    Signature ``OffsetPaths`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.OffsetPathCollection`
    """
    Runs: RunCollection = ...
    """
    Run Collection 
    
    Signature ``Runs`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RunCollection`
    """
    RoutingSystems: RoutingSystemCollection = ...
    """
    RoutingSystem Collection 
    
    Signature ``RoutingSystems`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RoutingSystemCollection`
    """
    RouteLogicalAssociations: RouteLogicalAssociationCollection = ...
    """
    RouteLogicalAssociation Collection 
    
    Signature ``RouteLogicalAssociations`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteLogicalAssociationCollection`
    """
    Corners: CornerCollection = ...
    """
    Corner collection 
    
    Signature ``Corners`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CornerCollection`
    """
    BendCorners: BendCornerCollection = ...
    """
    BendCorner collection 
    
    Signature ``BendCorners`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.BendCornerCollection`
    """
    CopeCorners: CopeCornerCollection = ...
    """
    CopeCorner collection 
    
    Signature ``CopeCorners`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CopeCornerCollection`
    """
    DiscontinuityCorners: DiscontinuityCornerCollection = ...
    """
    DiscontinuityCorner collection 
    
    Signature ``DiscontinuityCorners`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DiscontinuityCornerCollection`
    """
    MiterCorners: MiterCornerCollection = ...
    """
    MiterCorner collection 
    
    Signature ``MiterCorners`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.MiterCornerCollection`
    """
    SBendCorners: SBendCornerCollection = ...
    """
    SBendCorner collection 
    
    Signature ``SBendCorners`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.SBendCornerCollection`
    """
    MiteredBendCorners: MiteredBendCornerCollection = ...
    """
    MiteredBendCorner collection 
    
    Signature ``MiteredBendCorners`` 
    
    .. versionadded:: NX9.0.2
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.MiteredBendCornerCollection`
    """
    RoutePartDescriptors: RoutePartDescriptorCollection = ...
    """
    RoutePartDescriptor collection 
    
    Signature ``RoutePartDescriptors`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RoutePartDescriptorCollection`
    """
    Anchors: AnchorCollection = ...
    """
    Anchor collection 
    
    Signature ``Anchors`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.AnchorCollection`
    """
    Stocks: StockCollection = ...
    """
    Stock collection 
    
    Signature ``Stocks`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockCollection`
    """
    StockDatas: StockDataCollection = ...
    """
    StockData collection 
    
    Signature ``StockDatas`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockDataCollection`
    """
    CrossSections: CrossSectionCollection = ...
    """
    CrossSection collection 
    
    Signature ``CrossSections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.CrossSectionCollection`
    """
    Wires: WireCollection = ...
    """
    Wire Collection 
    
    Signature ``Wires`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.WireCollection`
    """
    OverstockApplications: OverstockApplicationCollection = ...
    """
    OverstockApplication collection 
    
    Signature ``OverstockApplications`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.OverstockApplicationCollection`
    """
    Fillers: FillerCollection = ...
    """
    Filler stock Application collection 
    
    Signature ``Fillers`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.FillerCollection`
    """
    FormboardFrames: FormboardFrameCollection = ...
    """
    FormboardFrame collection 
    
    Signature ``FormboardFrames`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.FormboardFrameCollection`
    """
    CableConnections: NXOpen.Routing.Electrical.CableConnectionCollection = ...
    """
    CableConnection collection 
    
    Signature ``CableConnections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.CableConnectionCollection`
    """
    NonPathConnections: NXOpen.Routing.Electrical.NonPathConnectionCollection = ...
    """
    NonPathConnection collection 
    
    Signature ``NonPathConnections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.NonPathConnectionCollection`
    """
    ConnectorDevices: NXOpen.Routing.Electrical.ConnectorDeviceCollection = ...
    """
    ConnectorDevice collection 
    
    Signature ``ConnectorDevices`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.ConnectorDeviceCollection`
    """
    HarnessDevices: NXOpen.Routing.Electrical.HarnessDeviceCollection = ...
    """
    HarnessDevice collection 
    
    Signature ``HarnessDevices`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.HarnessDeviceCollection`
    """
    SystemDevices: NXOpen.Routing.Electrical.SystemDeviceCollection = ...
    """
    SystemDevice collection 
    
    Signature ``SystemDevices`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.SystemDeviceCollection`
    """
    ElectricalStockDevice: NXOpen.Routing.Electrical.ElectricalStockDeviceCollection = ...
    """
    ElectricalStockDevice collection 
    
    Signature ``ElectricalStockDevice`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.ElectricalStockDeviceCollection`
    """
    PathConnections: NXOpen.Routing.Electrical.PathConnectionCollection = ...
    """
    PathConnection collection 
    
    Signature ``PathConnections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.PathConnectionCollection`
    """
    InterfaceTerminalRelationships: InterfaceTerminalRelationshipCollection = ...
    """
    InterfaceTerminalRelationship collection 
    
    Signature ``InterfaceTerminalRelationships`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipCollection`
    """
    JumperConnections: NXOpen.Routing.Electrical.JumperConnectionCollection = ...
    """
    JumperConnection collection 
    
    Signature ``JumperConnections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.JumperConnectionCollection`
    """
    ElectricalDeviceRelationships: NXOpen.Routing.Electrical.ElectricalDeviceRelationshipCollection = ...
    """
    ElectricalDeviceRelationship Connection collection 
    
    Signature ``ElectricalDeviceRelationships`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.ElectricalDeviceRelationshipCollection`
    """
    DesignRules: DesignRuleCollection = ...
    """
    RoutingDesignRule collection 
    
    Signature ``DesignRules`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DesignRuleCollection`
    """
    DesignRulesViolation: DesignRuleViolationCollection = ...
    """
    RoutingDesignRuleViolation collection 
    
    Signature ``DesignRulesViolation`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationCollection`
    """
    DesignRuleViolationLocation: DesignRuleViolationLocationCollection = ...
    """
    RoutingDesignRuleViolationLocation collection 
    
    Signature ``DesignRuleViolationLocation`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.DesignRuleViolationLocationCollection`
    """
    ElectricalConnections: NXOpen.Routing.Electrical.ConnectionCollection = ...
    """
    Routing Electrical Connection collection 
    
    Signature ``ElectricalConnections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.ConnectionCollection`
    """
    ElectricalFormats: NXOpen.Routing.Electrical.ElectricalFormatCollection = ...
    """
    Routing Electrical Format collection 
    
    Signature ``ElectricalFormats`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.ElectricalFormatCollection`
    """
    ElectricalNavigatorFilters: NXOpen.Routing.Electrical.ElectricalNavigatorFilterCollection = ...
    """
    Routing Electrical Filter collection 
    
    Signature ``ElectricalNavigatorFilters`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.ElectricalNavigatorFilterCollection`
    """
    FormboardManager: NXOpen.Formboard.FormboardManager = ...
    """
    Collection for managing Formboard data.  
    
    Signature ``FormboardManager`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Formboard.FormboardManager`
    """
    CablewaysLayoutViews: NXOpen.Routing.Electrical.CablewaysLayoutViewCollection = ...
    """
    Collection for managing Cableways Layout Views.  
    
    Signature ``CablewaysLayoutViews`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutViewCollection`
    """
    FittingOverstock: FittingOverstockCollection = ...
    """
    Routing FittingOverstock collection 
    
    Signature ``FittingOverstock`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.FittingOverstockCollection`
    """
    ReuseLibrary: ReuseLibrary = ...
    """
    Returns the :py:class:`NXOpen.Routing.ReuseLibrary` object
    
    Signature ``ReuseLibrary`` 
    
    .. versionadded:: NX7.5.3
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ReuseLibrary`
    """
    BendReportManager: BendReportManager = ...
    """
    Bend Report Manager 
    
    Signature ``BendReportManager`` 
    
    .. versionadded:: NX11.0.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.BendReportManager`
    """


class StockTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockType():
    """
    Available overstock stock types for Overstock Applications for a given Overstock 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "Unknown overstock type"
       "FixedCrossSection", "Fixed cross section, e.g., conduit"
       "Wrapped", "Wrapped, e.g., electrical tape"
       "Sleeved", "Sleeved, e.g., woven nylon"
       "Flagged", "Flagged, e.g., paper flag"
    """
    Unknown = 0  # StockTypeMemberType
    FixedCrossSection = 1  # StockTypeMemberType
    Wrapped = 2  # StockTypeMemberType
    Sleeved = 3  # StockTypeMemberType
    Flagged = 4  # StockTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockBrowserBuilderTypeFilterMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockBrowserBuilderTypeFilter():
    """
    Filter type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "All Stocks"
       "Stock", "Stock"
       "OverStock", "Overstock"
       "FillerStock", "Filler Stock"
       "SpaceReservation", "Space Reservation"
       "FittingOverstock", " - "
    """
    All = 0  # StockBrowserBuilderTypeFilterMemberType
    Stock = 1  # StockBrowserBuilderTypeFilterMemberType
    OverStock = 2  # StockBrowserBuilderTypeFilterMemberType
    FillerStock = 3  # StockBrowserBuilderTypeFilterMemberType
    SpaceReservation = 4  # StockBrowserBuilderTypeFilterMemberType
    FittingOverstock = 5  # StockBrowserBuilderTypeFilterMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockBrowserBuilder(NXOpen.Builder):
    """
    Builder class for stock browser .  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateStockBrowserBuilder`
    
    Default values.
    
    ===========  =====
    Property     Value
    ===========  =====
    FilterType   All 
    ===========  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class TypeFilter():
        """
        Filter type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", "All Stocks"
           "Stock", "Stock"
           "OverStock", "Overstock"
           "FillerStock", "Filler Stock"
           "SpaceReservation", "Space Reservation"
           "FittingOverstock", " - "
        """
        All = 0  # StockBrowserBuilderTypeFilterMemberType
        Stock = 1  # StockBrowserBuilderTypeFilterMemberType
        OverStock = 2  # StockBrowserBuilderTypeFilterMemberType
        FillerStock = 3  # StockBrowserBuilderTypeFilterMemberType
        SpaceReservation = 4  # StockBrowserBuilderTypeFilterMemberType
        FittingOverstock = 5  # StockBrowserBuilderTypeFilterMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetSortedList(self) -> 'list[NXOpen.NXObject]':
        """
        Get the filtered stock object list 
        
        Signature ``GetSortedList()`` 
        
        :returns:  Filtered Routing Stocks  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSortedList(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Set the filtered stock object list when filter type is changed.  
        
        Signature ``SetSortedList(objects)`` 
        
        :param objects:  Filtered Routing Stocks  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteStocks(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Deletes the given :py:class:`Routing.Stock` or :py:class:`Routing.FittingOverstock` 
        
        Signature ``DeleteStocks(objects)`` 
        
        :param objects:  Filtered Routing Stocks  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    FilterType: StockBrowserBuilderTypeFilter = ...
    """
    Returns or sets  the stock type filter which defines the type of stock
    
    <hr>
    
    Getter Method
    
    Signature ``FilterType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockBrowserBuilderTypeFilter` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``FilterType`` 
    
    :param stockTypeFilter: 
    :type stockTypeFilter: :py:class:`NXOpen.Routing.StockBrowserBuilderTypeFilter` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    NameFilter: str = ...
    """
    Returns or sets  the stock name filter which defines filter to name stock 
    
    <hr>
    
    Getter Method
    
    Signature ``NameFilter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``NameFilter`` 
    
    :param stockNameFilter: 
    :type stockNameFilter: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: StockBrowserBuilder = ...  # unknown typename


class MethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Method():
    """
    Available application methods for Overstock Applications for a given Overstock 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EntireSegments", "Cover all given segments"
       "Interval", "Cover the given segments intermittently"
       "PointToPoint", "Cover the given segments from one point to another"
       "PointAndLength", "Cover the given segments a point for a length"
    """
    EntireSegments = 0  # MethodMemberType
    Interval = 1  # MethodMemberType
    PointToPoint = 2  # MethodMemberType
    PointAndLength = 3  # MethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BuiltInPath(NXOpen.NXObject, ICharacteristic):
    """
    The Routing BuiltInPath object stores a set of curves.  
    
    Routing will attempt to create
    segments on top of these curves whenever an instance of the part containing the 
    BuiltInPath is added to the assembly.   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.BuiltInPathCollection.CreateBuiltInPath`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetCurves(self) -> 'list[NXOpen.Curve]':
        """
        Returns the array of curves referenced by the Built-In-Path object.  
        
        These curves
        are in the same part as the Built-In-Path object, and are the curves extracted into the
        Work Part for the :py:meth:`Routing.BuiltInPath.CreateSegments` method.  
        
        Signature ``GetCurves()`` 
        
        :returns:  the array of Curves referenced by the Built-In-Path  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCurves(self, curves: 'list[NXOpen.Curve]') -> None:
        """
        Sets the array of curves referenced by the Built-In-Path object.  
        
        These curves
        are in the same part as the Built-In-Path object, and are the curves extracted into the
        Work Part for the :py:meth:`Routing.BuiltInPath.CreateSegments` method. 
        
        Signature ``SetCurves(curves)`` 
        
        :param curves:  the array of Curves to be referenced by the Built-In-Path  
        :type curves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateSegments(self, partOcc: NXOpen.Assemblies.Component) -> 'list[NXOpen.Curve]':
        """
        Creates the segments in the work part to cover any curves referenced by the
        Routing.  
        
        BuiltInPath object in the component part file. 
        
        Finds the segments currently extracted from the part occurrence and
        creates a new segment overy every Routing.BuiltInPath curve occurrence that doesn't
        already have a segment.
        
        Signature ``CreateSegments(partOcc)`` 
        
        :param partOcc:  Component to extract segments from.  
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        :returns:  the array of Segments referenced by the BuiltInPath includes 
        previously created segments as well.  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: BuiltInPath = ...  # unknown typename


class PlacePartBuilder(NXOpen.Builder):
    """
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreatePlacePartBuilderPTS`
    
    .. versionadded:: NX7.5.0
    """
    
    @typing.overload
    def LoadPart(self, partNumber: str) -> None:
        """
        Load a part given the input part number. 
        
        Signature ``LoadPart(partNumber)`` 
        
        :param partNumber:  Part number  
        :type partNumber: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def LoadPart(self) -> None:
        """
        Load the specified part. 
        
        Signature ``LoadPart()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetActiveRefSet(self, refSet: str) -> None:
        """
        Set the reference set to use for the loaded part.  
        
        Signature ``SetActiveRefSet(refSet)`` 
        
        :param refSet:  Reference Set Name  
        :type refSet: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetActiveLayer(self, layerOption: int, layer: int) -> None:
        """
        Set the layer for the loaded part.  
        
        Signature ``SetActiveLayer(layerOption, layer)`` 
        
        :param layerOption:  Layer Option   
        :type layerOption: int 
        :param layer:  Layer Number  
        :type layer: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetScrewSeatPlacement(self, startLocation: NXOpen.TaggedObject, endLocation: NXOpen.TaggedObject, startPoint: NXOpen.Point3d, endPoint: NXOpen.Point3d, length: NXOpen.Expression, angle: NXOpen.Expression) -> None:
        """
        Sets the input parameters to be used for measurement holder screw seats.  
        
        Signature ``SetScrewSeatPlacement(startLocation, endLocation, startPoint, endPoint, length, angle)`` 
        
        :param startLocation:  The start port to determine screw seat placement.  
        :type startLocation: :py:class:`NXOpen.TaggedObject` 
        :param endLocation:  The end port to determine screw seat placement.  
        :type endLocation: :py:class:`NXOpen.TaggedObject` 
        :param startPoint:  The start position to determine screw seat placement.  
        :type startPoint: :py:class:`NXOpen.Point3d` 
        :param endPoint:  The end position to determine screw seat placement.  
        :type endPoint: :py:class:`NXOpen.Point3d` 
        :param length:  The length along the axis to place screw seat.  
        :type length: :py:class:`NXOpen.Expression` 
        :param angle:  The angle along the axis to place screw seat.  
        :type angle: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FinalizePlacement(self, optionalCharx: CharacteristicList, requiredCharx: CharacteristicList, name: str, layerOption: int, layer: int, dfaultOStock: bool) -> None:
        """
        Complete the placement operation.  
        
        Signature ``FinalizePlacement(optionalCharx, requiredCharx, name, layerOption, layer, dfaultOStock)`` 
        
        :param optionalCharx:  Optional Charx to apply.  
        :type optionalCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param requiredCharx:  Required Charx to apply.  
        :type requiredCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param name:  The component name to apply to the part.  
        :type name: str 
        :param layerOption:  The layer option.  
        :type layerOption: int 
        :param layer:  The layer to apply.  
        :type layer: int 
        :param dfaultOStock:  Assign overstock to a fitting when a default is defined. 
        :type dfaultOStock: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdatePlacementObj(self, placementObj: NXOpen.TaggedObject, placementPos: NXOpen.Point3d) -> None:
        """
        Update the loaded part with a new placement location and object.  
        
        Signature ``UpdatePlacementObj(placementObj, placementPos)`` 
        
        :param placementObj:  New object to attach to. Can bee NULL.  
        :type placementObj: :py:class:`NXOpen.TaggedObject` 
        :param placementPos:  The new location for the part.  
        :type placementPos: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UnloadPart(self) -> None:
        """
        Update the loaded part with a new placement location and object.  
        
        Signature ``UnloadPart()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLoadedPartInfo(self) -> tuple:
        """
        Get information about the parts being placed.  
        
        Signature ``GetLoadedPartInfo()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (loadedPart, loadedInst). loadedPart is a :py:class:`NXOpen.TaggedObject`.   The PART object of the loaded part. loadedInst is a :py:class:`NXOpen.TaggedObject`.   The Instance object of the loaded part. 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetLoadedPartInfo(self, loadedPart: NXOpen.TaggedObject, loadedInst: NXOpen.TaggedObject) -> None:
        """
        Get information about the parts being placed.  
        
        Signature ``SetLoadedPartInfo(loadedPart, loadedInst)`` 
        
        :param loadedPart:  The PART object of the loaded part.  
        :type loadedPart: :py:class:`NXOpen.TaggedObject` 
        :param loadedInst:  The Instance object of the loaded part.  
        :type loadedInst: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ReplaceLoadedInstance(self, partInst: NXOpen.TaggedObject) -> None:
        """
        Replace the builder's part instance with a new instance.  
        
        This is used when the assemblies absolute positioning method is used. It will create
        it's own part instance and we need make sure the builder has the new one. 
        
        Signature ``ReplaceLoadedInstance(partInst)`` 
        
        :param partInst:  The instance object of the loaded part.  
        :type partInst: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetPlacePartOperation(self, replacePart: bool) -> None:
        """
        Set a flag which tells the builder whether the part being placed is replacing
        an existing part in the assembly.  
        
        Signature ``SetPlacePartOperation(replacePart)`` 
        
        :param replacePart:  True if replace part operation.  
        :type replacePart: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetScrewSeatIntersectionPoint(self, intersectionPoint: NXOpen.Point3d) -> None:
        """
        Sets the final position of screw seat.  
        
        This is required in builder when doing
        finalize placement after (OK/Apply) . 
        
        Signature ``SetScrewSeatIntersectionPoint(intersectionPoint)`` 
        
        :param intersectionPoint:  The final position of screw seat placement.  
        :type intersectionPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetScrewSeatIntersectionPoint(self) -> NXOpen.Point3d:
        """
        Gets information about the final screw seat position.  
        
        Signature ``GetScrewSeatIntersectionPoint()`` 
        
        :returns:  The final position of screw seat placement.  
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetScrewSeatAlignmentVector(self, alignVector: NXOpen.Vector3d) -> None:
        """
        Sets the alignment vector, primary axis direction for a stock, reducer, elbow, etc.  
        
        along the part the screw seat is placed to align the screw seat. Optional, otherwise an arbitrary vector will be constructed. 
        
        Signature ``SetScrewSeatAlignmentVector(alignVector)`` 
        
        :param alignVector:  The alignment vector along the part on which screw seat is placed.  
        :type alignVector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetScrewSeatAlignmentVector(self) -> NXOpen.Vector3d:
        """
        Gets the alignment vector, primary axis direction for a stock, reducer, elbow, etc.  
        
        along the part the screw seat is placed to align the screw seat. Optional, otherwise an arbitrary vector will be constructed.  
        
        Signature ``GetScrewSeatAlignmentVector()`` 
        
        :returns:  The alignment vector along the part on which screw seat is placed.  
        :rtype: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetScrewSeatEnd(self, point: NXOpen.Point3d) -> None:
        """
        Sets a point in builder, which is required for final placement of screw seat.  
        
        This point is used for creating segments / constraints when finally placing the screw seat. 
        
        Signature ``SetScrewSeatEnd(point)`` 
        
        :param point:  This is the internal point used in determining final position of screw seat placement.  
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetScrewSeatEnd(self) -> NXOpen.Point3d:
        """
        Gets the point from builder, used in final placement of screw seat.  
        
        This point is used for creating 
        segemnts / constraints when finally placing the screw seat.  
        
        Signature ``GetScrewSeatEnd()`` 
        
        :returns:  This is the internal point used in determining final position of screw seat placement.   
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAttributeHolder(self, attributeHolder: AttributeHolder) -> None:
        """
        Sets Attribute holder in builder, which is user for template attribute assignment.  
        
        Signature ``SetAttributeHolder(attributeHolder)`` 
        
        :param attributeHolder:  Object to hold template attributes  
        :type attributeHolder: :py:class:`NXOpen.Routing.AttributeHolder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetAddPartToActiveRunFlag(self) -> bool:
        """
        Determines whether part being placed has to be added in active run or not.  
        
        Signature ``GetAddPartToActiveRunFlag()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAddPartToActiveRunFlag(self, addPartToActiveRun: bool) -> None:
        """
        Set a flag which tells the builder whether the part being placed will be added in active run or not.  
        
        Signature ``SetAddPartToActiveRunFlag(addPartToActiveRun)`` 
        
        :param addPartToActiveRun: 
        :type addPartToActiveRun: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetScrewSeatLength(self) -> NXOpen.Expression:
        """
        Gets the length expression to be used for screw seat placement along a placed object.  
        
        Signature ``GetScrewSeatLength()`` 
        
        :returns:  The length used for screw seat placement on placed routing object.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetScrewSeatAngle(self) -> NXOpen.Expression:
        """
        Gets the angle expression to be used for screw seat placement along a placed object.  
        
        Signature ``GetScrewSeatAngle()`` 
        
        :returns:  The angle used for screw seat placement on placed routing object.  
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetItemSelection(self, itemSelectionMethod: int, selectedPartOcc: NXOpen.TaggedObject) -> None:
        """
        Set a flag which tells the builder from where the part being placed was selected and the tag of the selected part.  
        
        Signature ``SetItemSelection(itemSelectionMethod, selectedPartOcc)`` 
        
        :param itemSelectionMethod:  The enum representing the way of selection of part to be placed.  
        :type itemSelectionMethod: int 
        :param selectedPartOcc:  The tag of the part occurrence selected from specify item dialog.  
        :type selectedPartOcc: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateRoutingTemplateAttributes(self) -> None:
        """
        Updates the Routing Template Attributes to AttributeHolder 
        
        Signature ``UpdateRoutingTemplateAttributes()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetConsiderPorts(self, considerPorts: bool) -> None:
        """
        Set a flag which will inform the placement solutions builder to consider ports when computing placement solutions during a replace part operation.  
        
        Setting this to false implies that the first placement solution computed is to maintain the origin and orientation of the part being replaced.
        Setting this to true  implies that the first placement solution computed is to maintain the location of the original part's ports. 
        
        Signature ``SetConsiderPorts(considerPorts)`` 
        
        :param considerPorts: 
        :type considerPorts: bool 
        
        .. versionadded:: NX11.0.1
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: PlacePartBuilder = ...  # unknown typename


class LinearPathBuilder(NXOpen.Builder):
    """
    Builder for creating routing linear paths.  
    
    These paths can include
    constrained line segments,  bend corners and elbows.  This fuctionality
    can only be used with the Assemblies Positioning functionality.  The
    work part must have been converted to use Assemblies Positioning
    using the Convert Mating Conditions tool.
    
    To create a control point (and it's associated segment) first create
    a preview control point, then define the control point using either
    a smart point (:py:meth:`Routing.LinearPathBuilder.SetControlPointDefiningPoint`), 
    or some other object 
    (:py:meth:`Routing.LinearPathBuilder.SetControlPointDefiningObject`).  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateLinearPathBuilder`
    
    Default values.
    
    ========================================  =====
    Property                                  Value
    ========================================  =====
    ElbowSnapSettings.AngleTolerance          5.0 
    ----------------------------------------  -----
    ElbowSnapSettings.SnapToElbowAngles       True 
    ----------------------------------------  -----
    LinearPathSettings.LockToSelectedObject   True 
    ========================================  =====
    
    .. versionadded:: NX5.0.0
    """
    
    def AddPreviewControlPoint(self, location: NXOpen.Point3d) -> ControlPoint:
        """
        Add a new control point to the path.  
        
        This control point is considered
        to be a preview control point to show what the path will look like
        interactively.   This control point will be deleted when the commit
        method is invoked unless the rcp has been fully defined.
        
        Signature ``AddPreviewControlPoint(location)`` 
        
        :param location: 
        :type location: :py:class:`NXOpen.Point3d` 
        :returns:  Preview control point, 
        will be None if there
        is already a control 
        point at the given location. 
        :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetControlPointDefiningPoint(self, previewRcp: ControlPoint, point: NXOpen.Point) -> None:
        """
        Fully defines a preview control point using the given point.  
        
        The control
        point is not made associative directly to the input point.  The control point
        is made associative (depending on the linear path settings) to the
        objects that the input point is associative to. 
        
        A control point may only be defined once.
        
        Signature ``SetControlPointDefiningPoint(previewRcp, point)`` 
        
        :param previewRcp:  Must be a control point                                                                    created by                     :py:meth:`Routing.LinearPathBuilder.AddPreviewControlPoint` 
        :type previewRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param point:  None not allowed.  
        :type point: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetControlPointDefiningObject(self, previewRcp: ControlPoint, position: NXOpen.Point3d, object: NXOpen.NXObject) -> None:
        """
        Fully defines a preview control point.  
        
        The preview control point's location is
        set to the given position, and the control point is constrained to the
        given object (depending on the linear path settings).  
        
        A control point may only be defined once.
        
        Signature ``SetControlPointDefiningObject(previewRcp, position, object)`` 
        
        :param previewRcp:  Must be a control point                                                                    created by                     :py:meth:`Routing.LinearPathBuilder.AddPreviewControlPoint` 
        :type previewRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        :param object:  None allowed.  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveLastNonPreviewControlPoint(self) -> None:
        """
        Removes the last fully-defined control point in the path.  
        
        Also removes any 
        preview control points. 
        
        Signature ``RemoveLastNonPreviewControlPoint()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SettingChanged(self) -> None:
        """
        Notifies the builder that some routing preferences have changed, and that the
        builder (and it's associated builders) must update their values to refelect those
        changes.  
        
        Signature ``SettingChanged()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetLastControlPoint(self) -> ControlPoint:
        """
        Returns the last control point in the path.  
        
        Signature ``GetLastControlPoint()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIsNewControlPointRequired(self, isNewControlPointRequired: bool) -> None:
        """
        Set the boolean value specifies that new control point required or not
        
        Signature ``SetIsNewControlPointRequired(isNewControlPointRequired)`` 
        
        :param isNewControlPointRequired: 
        :type isNewControlPointRequired: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIsEccentricModeSelected(self, isEccentricModeSelected: bool) -> None:
        """
        Set the boolean value specifies that Eccentric mode selected or not
        
        Signature ``SetIsEccentricModeSelected(isEccentricModeSelected)`` 
        
        :param isEccentricModeSelected: 
        :type isEccentricModeSelected: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetParentSegmentOfEccentricSegment(self) -> ISegment:
        """
        Parent segment 
        
        Signature ``GetParentSegmentOfEccentricSegment()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetParentSegmentOfEccentricSegment(self, parentSegment: ISegment) -> None:
        """
        Signature ``SetParentSegmentOfEccentricSegment(parentSegment)`` 
        
        :param parentSegment: 
        :type parentSegment: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ElbowSnapSettings: ElbowSnapSettings = ...
    """
    Returns or sets  the elbow snapping settings for determining location of control points
    as the user drags their mouse.  
    
    Only useful in the UI.  
    
    <hr>
    
    Getter Method
    
    Signature ``ElbowSnapSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.ElbowSnapSettings` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ElbowSnapSettings`` 
    
    :param snapSettings: 
    :type snapSettings: :py:class:`NXOpen.Routing.ElbowSnapSettings` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    LinearPathSettings: LinearPathSettings = ...
    """
    Returns or sets  the settings that determine what constraints to apply to the new path.  
    
    <hr>
    
    Getter Method
    
    Signature ``LinearPathSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.LinearPathSettings` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``LinearPathSettings`` 
    
    :param settingsBuilder: 
    :type settingsBuilder: :py:class:`NXOpen.Routing.LinearPathSettings` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    PathStockBuilder: PathStockBuilder = ...
    """
    Returns or sets  the builder for assigning stock to the new path.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathStockBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``PathStockBuilder`` 
    
    :param stockBuilder: 
    :type stockBuilder: :py:class:`NXOpen.Routing.PathStockBuilder` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: LinearPathBuilder = ...  # unknown typename


class UserDefinedMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UserDefined():
    """
    Option to indicate if an existing :py:class:`NXOpen.Routing.LineSegment`,
    :py:class:`NXOpen.Routing.ArcSegment` or
    :py:class:`NXOpen.Routing.SplineSegment` is user defined. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotUserDefined", "System generated segment. System manages simplification and some update behavior."
       "UserDefined", "User defined generated segment."
    """
    NotUserDefined = 0  # UserDefinedMemberType
    UserDefined = 1  # UserDefinedMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExtractPort(Port):
    """
    Routing ExtractPort object is an extract of Port class   
    
    To create an instance of this class use :py:meth:`Routing.PortCollection.CreateExtractPort`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetStockOffsetPoint(self) -> NXOpen.Point:
        """
        Retrieves the stock offset point.  
        
        Stock offset point exists only if
        ExtractPort is a stock offset port If the source of an extracted port
        is loaded, but other objects from the source part are not loaded -
        routine loads all objects of required classes from the source part. 
        
        Signature ``GetStockOffsetPoint()`` 
        
        :returns:  Stock offset Point if it exists  
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetPrototypePort(self) -> Port:
        """
        Retrieves the prototype of the extract port.  
        
        Signature ``GetPrototypePort()`` 
        
        :returns:  Prototype port from which the extract port was created. 
        :rtype: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: ExtractPort = ...  # unknown typename


class MiteredBendCorner(Corner):
    """
    Computes a fillet curve between two linear segments to form a smooth
    bend transition from one segment to another that represents a mitered bend.  
    
    A mitered bend is also known as "shrimp bend" or "corrugated bend".
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.MiteredBendCornerCollection.CreateCorner`
    
    .. versionadded:: NX9.0.2
    """
    
    def GetSegment(self) -> ISegment:
        """
        The bend segment following the fillet curve created for mitered bend.  
        
        Signature ``GetSegment()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def FindSideSegments(self) -> 'list[NXOpen.Curve]':
        """
        Returns the straight line segments attached to the fillet curve
        of this bend corner.  
        
        Signature ``FindSideSegments()`` 
        
        :returns:  the side segments. There will be from 0 to 2 
        total side segments.  
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    BendRadius: float = ...
    """
    Returns or sets  the bend radius of the corner.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.2
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``BendRadius`` 
    
    :param bendRadius: 
    :type bendRadius: float 
    
    .. versionadded:: NX9.0.2
    
    License requirements: routing_base ("Routing Basic")
    """
    NumberOfMiters: int = ...
    """
    Returns or sets  the number of miters in the corner.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfMiters`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.2
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfMiters`` 
    
    :param numberOfMiters: 
    :type numberOfMiters: int 
    
    .. versionadded:: NX9.0.2
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: MiteredBendCorner = ...  # unknown typename


class MultiPort(Port, IAxisPort):
    """
    Represents a :py:class:`NXOpen.Routing.MultiPort`.  
    
    These objects are ones to which segments are routed to or from when
    creating a routing path.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetTerminalPorts(self) -> 'list[TerminalPort]':
        """
        Gets the terminal ports that are associated with this :py:class:`NXOpen.Routing.MultiPort`  
        
        Signature ``GetTerminalPorts()`` 
        
        :returns:  Terminal Ports associated with this Multi Port  
        :rtype: list of :py:class:`NXOpen.Routing.TerminalPort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetVirtualPorts(self) -> 'list[str]':
        """
        Gets the virtual ports that are associated with this :py:class:`NXOpen.Routing.MultiPort`  
        
        Signature ``GetVirtualPorts()`` 
        
        :returns:  Virtual Port names associated with this Multi Port  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetVirtualPorts(self, virtualPorts: 'list[str]') -> None:
        """
        Sets the virtual ports that are associated with this :py:class:`NXOpen.Routing.MultiPort` 
        
        Signature ``SetVirtualPorts(virtualPorts)`` 
        
        :param virtualPorts:  Virtual Ports names associated with this                                                                                          Multi Port  
        :type virtualPorts: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveVirtualPorts(self, virtualPorts: 'list[str]') -> None:
        """
        Removes virtual ports from this :py:class:`NXOpen.Routing.MultiPort`.  
        
        Signature ``RemoveVirtualPorts(virtualPorts)`` 
        
        :param virtualPorts:   List of virtual port names to remove.                                                                                             Ignores any virtuals that are not                                                                                             already referenced by this object.  
        :type virtualPorts: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddVirtualPorts(self, virtualPorts: 'list[str]') -> None:
        """
        Adds new virtual ports to this :py:class:`NXOpen.Routing.MultiPort` 
        
        Signature ``AddVirtualPorts(virtualPorts)`` 
        
        :param virtualPorts:   List of virtual port names to add.  
        
        An error occurs if any of these                                                                                             names are already in use as a                                                                                             virtual or terminal port name on this                                                                                             multi port.   
        :type virtualPorts: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveTerminalPorts(self, terminalPorts: 'list[TerminalPort]') -> None:
        """
        Removes terminal ports from this :py:class:`NXOpen.Routing.MultiPort`.  
        
        Signature ``RemoveTerminalPorts(terminalPorts)`` 
        
        :param terminalPorts:   List of :py:class:`NXOpen.Routing.TerminalPort`s to remove.  
        :type terminalPorts: list of :py:class:`NXOpen.Routing.TerminalPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def AddTerminalPorts(self, terminalPorts: 'list[TerminalPort]') -> None:
        """
        Adds terminal ports to this :py:class:`NXOpen.Routing.MultiPort`.  
        
        Signature ``AddTerminalPorts(terminalPorts)`` 
        
        :param terminalPorts:   List of :py:class:`NXOpen.Routing.TerminalPort`s to add.  
        :type terminalPorts: list of :py:class:`NXOpen.Routing.TerminalPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAlignVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the align vector of Port 
        
        Signature ``SetAlignVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationVector(self, vector: NXOpen.Vector3d) -> None:
        """
        Sets the rotation vector of Port 
        
        Signature ``SetRotationVector(vector)`` 
        
        :param vector:  Vector direction in absolute co-ordinate system  
        :type vector: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetRotationObject(self, rotationObject: NXOpen.DisplayableObject) -> None:
        """
        Sets the object used to derive the rotation vector of Port 
        
        Signature ``SetRotationObject(rotationObject)`` 
        
        :param rotationObject:  Object used to derive the rotation vector  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetForwardExtension(self, forwardExtension: float) -> None:
        """
        Sets the forward extension value of a port, i.  
        
        e. the minimum length that
        a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
        
        Signature ``SetForwardExtension(forwardExtension)`` 
        
        :param forwardExtension:  Port extension  
        :type forwardExtension: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEngagement(self, engagement: float) -> None:
        """
        The engagment distance of a :py:class:`NXOpen.Routing.IAxisPort`, i.  
        
        e. the distance 
        behind the port that another fitting or stock may engage
        
        Signature ``SetEngagement(engagement)`` 
        
        :param engagement:  Engagement distance  
        :type engagement: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCutbackLength(self, cutbackLength: float) -> None:
        """
        Sets the cutback length of a port, i.  
        
        e. the length along the wire from
        the port where individual wires leave a bundle to attach to pins
        
        Signature ``SetCutbackLength(cutbackLength)`` 
        
        :param cutbackLength:  Cutback Length  
        :type cutbackLength: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    ForwardExtensionObject: NXOpen.Expression = ...
    """
    Returns or sets  the forward extension object of a port, i.  
    
    e. an expression representing the minimum
    length that a segment must remain straight coming out of a :py:class:`NXOpen.Routing.Port`
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :returns:  Forward Extension Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``ForwardExtensionObject`` 
    
    :param forwardExtension:  Forward Extension Expression  
    :type forwardExtension: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    EngagementObject: NXOpen.Expression = ...
    """
    Returns or sets  the engagement object of a port, i.  
    
    e. an expression representing the
    distance behind the port that another fitting or stock may engage
    
    <hr>
    
    Getter Method
    
    Signature ``EngagementObject`` 
    
    :returns:  Engagement Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``EngagementObject`` 
    
    :param engagement:  Engagement Expression  
    :type engagement: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    CutbackLengthObject: NXOpen.Expression = ...
    """
    Returns or sets  the cutback length object of a port, i.  
    
    e. an expression representing the length
    along the wire from the port where individual wires leave a bundle to attach to pins
    
    <hr>
    
    Getter Method
    
    Signature ``CutbackLengthObject`` 
    
    :returns:  Cutback Length Expression  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``CutbackLengthObject`` 
    
    :param cutbackLength:  Cutback Length Expression  
    :type cutbackLength: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Axis: NXOpen.Axis = ...
    """
    Returns or sets   the axis that defines the port
    
    <hr>
    
    Getter Method
    
    Signature ``Axis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``Axis`` 
    
    :param axis: 
    :type axis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: MultiPort = ...  # unknown typename


class ReuseLibraryPartTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReuseLibraryPartType():
    """
    Represents the part type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Gasket", "Gasket Post Placement Type"
       "Bolt", "Bolt Post Placement Type"
       "Stud", "Stud Post Placement Type"
       "Nut", "Nut Post Placement Type"
       "Washer", "Washer Post Placement Type"
       "Weldring", "Weld Ring Post Placement Type"
       "Ringjoint", "Ring Joint Post Placement Type"
       "Unknown", "Unknown Type"
    """
    Gasket = 0  # ReuseLibraryPartTypeMemberType
    Bolt = 1  # ReuseLibraryPartTypeMemberType
    Stud = 2  # ReuseLibraryPartTypeMemberType
    Nut = 3  # ReuseLibraryPartTypeMemberType
    Washer = 4  # ReuseLibraryPartTypeMemberType
    Weldring = 5  # ReuseLibraryPartTypeMemberType
    Ringjoint = 6  # ReuseLibraryPartTypeMemberType
    Unknown = -1  # ReuseLibraryPartTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReuseLibraryReportInBomMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReuseLibraryReportInBom():
    """
    Represents the report in BOM logical type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DoNotReport", "Do not report in the Bill of Materials"
       "Report", "Report in the Bill of Materials"
    """
    DoNotReport = 0  # ReuseLibraryReportInBomMemberType
    Report = 1  # ReuseLibraryReportInBomMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReuseLibrary():
    """
    Represents a :py:class:`NXOpen.Routing.ReuseLibrary`   
    
    No creator is available in KF.
    
    .. versionadded:: NX7.5.3
    """
    
    class PartType():
        """
        Represents the part type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Gasket", "Gasket Post Placement Type"
           "Bolt", "Bolt Post Placement Type"
           "Stud", "Stud Post Placement Type"
           "Nut", "Nut Post Placement Type"
           "Washer", "Washer Post Placement Type"
           "Weldring", "Weld Ring Post Placement Type"
           "Ringjoint", "Ring Joint Post Placement Type"
           "Unknown", "Unknown Type"
        """
        Gasket = 0  # ReuseLibraryPartTypeMemberType
        Bolt = 1  # ReuseLibraryPartTypeMemberType
        Stud = 2  # ReuseLibraryPartTypeMemberType
        Nut = 3  # ReuseLibraryPartTypeMemberType
        Washer = 4  # ReuseLibraryPartTypeMemberType
        Weldring = 5  # ReuseLibraryPartTypeMemberType
        Ringjoint = 6  # ReuseLibraryPartTypeMemberType
        Unknown = -1  # ReuseLibraryPartTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ReportInBom():
        """
        Represents the report in BOM logical type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DoNotReport", "Do not report in the Bill of Materials"
           "Report", "Report in the Bill of Materials"
        """
        DoNotReport = 0  # ReuseLibraryReportInBomMemberType
        Report = 1  # ReuseLibraryReportInBomMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Reload(self) -> None:
        """
        Reloads all of the nodes of the Routing Reuse Library based on the current discipline.  
        
        Signature ``Reload()`` 
        
        .. versionadded:: NX7.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def PartLibraryGetDisciplineRoots(self) -> tuple:
        """
        Returns the identifiers which represent the start nodes for the current discipline.  
        
        Signature ``PartLibraryGetDisciplineRoots()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (identifiers, names). identifiers is a list of str.   The discipline start node identifiers.names is a list of str.   The discipline start node identifiers.
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def PartLibraryGetChildNodes(self, nodeIdentifier: str) -> tuple:
        """
        Given an identifier, this routine returns it's child identifiers.  
        
        Signature ``PartLibraryGetChildNodes(nodeIdentifier)`` 
        
        :param nodeIdentifier:  A part library node identifier.  
        :type nodeIdentifier: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (childIdentifiers, names). childIdentifiers is a list of str.   The child node identifiers. names is a list of str.   The discipline start node identifiers.
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def PartLibraryGetPartsAtNode(self, nodeIdentifier: str) -> CharacteristicList:
        """
        Given a node identifier, this routine will return all parts associated with that node.  
        
        Signature ``PartLibraryGetPartsAtNode(nodeIdentifier)`` 
        
        :param nodeIdentifier:  A part library node identifier.  
        :type nodeIdentifier: str 
        :returns:  An array of parts.  
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetMatchingParts(self, startingIdentifier: str, searchCriteria: CharacteristicList) -> 'list[CharacteristicList]':
        """
        Query the reuse library for all parts that match the given search criteria.  
        
        The search will include
        the given node and all of its children.  
        
        Signature ``GetMatchingParts(startingIdentifier, searchCriteria)`` 
        
        :param startingIdentifier:  Node from which to begin the search.  
        :type startingIdentifier: str 
        :param searchCriteria:  Search Criteria  
        :type searchCriteria: :py:class:`NXOpen.Routing.CharacteristicList` 
        :returns:  Search Results  
        :rtype: list of :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.5.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetDisciplineSpecifications(self) -> 'list[str]':
        """
        Returns the names of all of the specifications that are defined for the current discipline.  
        
        Signature ``SpecificationsGetDisciplineSpecifications()`` 
        
        :returns:  Specification names.  
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetCurrent(self) -> str:
        """
        Returns the name of the current specification.  
        
        Signature ``SpecificationsGetCurrent()`` 
        
        :returns:  The name of the current specification.  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddNewSpecification(self, specName: str) -> None:
        """
        Adds a new empty specification to the library.  
        
        The input name can be used
        to configure the specification once it has been added. 
        
        Signature ``AddNewSpecification(specName)`` 
        
        :param specName:  The name of the new specification.  
        :type specName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsSetDescription(self, specName: str, description: str) -> None:
        """
        Sets the description text for a specification.  
        
        Signature ``SpecificationsSetDescription(specName, description)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :param description:  The description to add.  
        :type description: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetDescription(self, specName: str) -> str:
        """
        Gets the description of a specification.  
        
        Signature ``SpecificationsGetDescription(specName)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :returns:  Specification description.  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsSetAttributeRelationships(self, specName: str, nodeIdentifier: str, attributeFilter: CharacteristicList) -> None:
        """
        Sets the attribute relationships for a specification.  
        
        Signature ``SpecificationsSetAttributeRelationships(specName, nodeIdentifier, attributeFilter)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :param nodeIdentifier:  A part library node identifier.  
        :type nodeIdentifier: str 
        :param attributeFilter:  Attribute filters.  
        :type attributeFilter: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetAttributeRelationships(self, specName: str, nodeIdentifier: str) -> tuple:
        """
        Gets the attribute relationships at a given library node.  
        
        Signature ``SpecificationsGetAttributeRelationships(specName, nodeIdentifier)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :param nodeIdentifier:  A part library node identifier.  
        :type nodeIdentifier: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (attributeFilter, numFilters). attributeFilter is a :py:class:`NXOpen.Routing.CharacteristicList`.   Attribute filters. numFilters is a int. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetBranchTable(self, specName: str) -> tuple:
        """
        Gets the branch compatibilities for the input specification.  
        
        Compatibilities can be identified by indexing into
        the NPSValues and NPS_BRANCHValues arrays. Index 0 in each array is a compatibility and so on. 
        
        Signature ``SpecificationsGetBranchTable(specName)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (npsValues, npsBranchValues). npsValues is a list of float.   The NPS Values. npsBranchValues is a list of float.   The NPS_BRANCH values. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsSetBranchCompatibility(self, specName: str, nps: float, npsBranch: float) -> None:
        """
        Sets a branch compatibility.  
        
        Signature ``SpecificationsSetBranchCompatibility(specName, nps, npsBranch)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :param nps:  NPS Value  
        :type nps: float 
        :param npsBranch:  NPS_BRANCH Vale  
        :type npsBranch: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsRemoveBranchCompatibility(self, specName: str, nps: float, npsBranch: float) -> None:
        """
        Removes a branch compatibility 
        
        Signature ``SpecificationsRemoveBranchCompatibility(specName, nps, npsBranch)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :param nps:  NPS Value  
        :type nps: float 
        :param npsBranch:  NPS_BRANCH value  
        :type npsBranch: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsAddConnectionCompatibility(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str) -> None:
        """
        Adds a connection compatibility to the specification.  
        
        Signature ``SpecificationsAddConnectionCompatibility(specName, connectionTypeOne, connectionTypeTwo)`` 
        
        :param specName:  The name of the specification.  
        :type specName: str 
        :param connectionTypeOne:  Value of the first CONNECTION_TYPE attribute.  
        :type connectionTypeOne: str 
        :param connectionTypeTwo:  Value of the second CONNECTION_TYPE attribute. 
        :type connectionTypeTwo: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsRemoveConnectionCompatibility(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str) -> None:
        """
        Removes a connection compatibility from the specification.  
        
        Signature ``SpecificationsRemoveConnectionCompatibility(specName, connectionTypeOne, connectionTypeTwo)`` 
        
        :param specName:  Name of the specification.  
        :type specName: str 
        :param connectionTypeOne:  Value of the first CONNECTION_TYPE attribute.  
        :type connectionTypeOne: str 
        :param connectionTypeTwo:  Value of the second CONNECTION_TYPE attribute. 
        :type connectionTypeTwo: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetConnectionCompatibilities(self, specName: str) -> tuple:
        """
        Get the list of connection compatibilities from the specificaiton.  
        
        Signature ``SpecificationsGetConnectionCompatibilities(specName)`` 
        
        :param specName:  Specification name.  
        :type specName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (connectionTypesOne, connectionTypesTwo). connectionTypesOne is a list of str.   Values for the first CONNECTION_TYPE attribute. connectionTypesTwo is a list of str.   Values for the second CONNECTION_TYPE attribute. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsSetConnectionPostPlacement(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str, gasket: bool, bolt: bool, stud: bool, nut: bool, washers: bool, weldRing: bool, ringJoints: bool) -> None:
        """
        Set Connection post placement rules on a valid connection.  
        
        Signature ``SpecificationsSetConnectionPostPlacement(specName, connectionTypeOne, connectionTypeTwo, gasket, bolt, stud, nut, washers, weldRing, ringJoints)`` 
        
        :param specName:  Specification name.  
        :type specName: str 
        :param connectionTypeOne:  The first CONNECTION_TYPE value.  
        :type connectionTypeOne: str 
        :param connectionTypeTwo:  The second CONNECTION_TYPE value.   
        :type connectionTypeTwo: str 
        :param gasket:  Whether or not to place Gaskets for this connection.  
        :type gasket: bool 
        :param bolt:  Whether or not to place Bolts for this connection.  
        :type bolt: bool 
        :param stud:  Whether or not to place Studs for this connection.  
        :type stud: bool 
        :param nut:  Whether or not to place Nuts for this connection.  
        :type nut: bool 
        :param washers:  Whether or not to place Washers for this connection.  
        :type washers: bool 
        :param weldRing:  Whether or not to place Weld Rings for this connection.  
        :type weldRing: bool 
        :param ringJoints: 
        :type ringJoints: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetConnectionPostPlacement(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str) -> tuple:
        """
        Get post placement options for a given connection.  
        
        Signature ``SpecificationsGetConnectionPostPlacement(specName, connectionTypeOne, connectionTypeTwo)`` 
        
        :param specName:  Specification name.  
        :type specName: str 
        :param connectionTypeOne:  The first CONNECTION_TYPE value.  
        :type connectionTypeOne: str 
        :param connectionTypeTwo:  The second CONNECTION_TYPE value.  
        :type connectionTypeTwo: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (gasket, bolt, stud, nut, washers, weldRing, ringJoints). gasket is a bool.   Whether or not to place Gaskets for this connection. bolt is a bool.   Whether or not to place Bolts for this connection. stud is a bool.   Whether or not to place Studs for this connection. nut is a bool.   Whether or not to place Nuts for this connection. washers is a bool.   Whether or not to place Washers for this connection. weldRing is a bool.   Whether or not to place Weld Rings for this connection. ringJoints is a bool. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsDefinePostPlacementRules(self, specName: str, partType: ReuseLibraryPartType, startingIdentifier: str, searchAttributes: 'list[str]') -> None:
        """
        Defines Post Placement rules.  
        
        Signature ``SpecificationsDefinePostPlacementRules(specName, partType, startingIdentifier, searchAttributes)`` 
        
        :param specName:  Specification Name.  
        :type specName: str 
        :param partType:  Post Placement Type  
        :type partType: :py:class:`NXOpen.Routing.ReuseLibraryPartType` 
        :param startingIdentifier:  Library Node to search from.  
        :type startingIdentifier: str 
        :param searchAttributes:  Search Attribute Titles.  
        :type searchAttributes: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetPostPlacementRules(self, specName: str, partType: ReuseLibraryPartType) -> tuple:
        """
        Gets post placement rules.  
        
        Signature ``SpecificationsGetPostPlacementRules(specName, partType)`` 
        
        :param specName:  Specification name.  
        :type specName: str 
        :param partType:  Part Type.  
        :type partType: :py:class:`NXOpen.Routing.ReuseLibraryPartType` 
        :returns: a tuple 
        :rtype: A tuple consisting of (startingIdentifier, searchAttributes). startingIdentifier is a str.   Library node to begin searching from. searchAttributes is a list of str.   Search Attribute Titles. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsSetReportInBom(self, specName: str, gasket: bool, bolt: bool, stud: bool, nut: bool, washers: bool, weldRing: bool, ringJoints: bool, weldGap: bool) -> None:
        """
        Sets the report in BOM flags.  
        
        Signature ``SpecificationsSetReportInBom(specName, gasket, bolt, stud, nut, washers, weldRing, ringJoints, weldGap)`` 
        
        :param specName:  Spec Name  
        :type specName: str 
        :param gasket:  Report Gaskets  
        :type gasket: bool 
        :param bolt:  Report Bolts  
        :type bolt: bool 
        :param stud:  Report Studs  
        :type stud: bool 
        :param nut:  Report Nuts  
        :type nut: bool 
        :param washers:  Report Washers  
        :type washers: bool 
        :param weldRing:  Report Weld Rings  
        :type weldRing: bool 
        :param ringJoints:  Report Ring Joints  
        :type ringJoints: bool 
        :param weldGap: 
        :type weldGap: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetReportInBom(self, specName: str) -> tuple:
        """
        Gets the Report in BOM flags.  
        
        Signature ``SpecificationsGetReportInBom(specName)`` 
        
        :param specName:  Specification Name  
        :type specName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (gasket, bolt, stud, nut, washers, weldRing, ringJoints, weldGap). gasket is a bool.   Report Gaskets bolt is a bool.   Report Bolts stud is a bool.   Report Studsnut is a bool.   Report Nutswashers is a bool.   Report WashersweldRing is a bool.   Report Weld RingsringJoints is a bool.   Report Ring JointsweldGap is a bool. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsSetGeneralConnectionOptions(self, specName: str, modelGaskets: bool, modelWeldGaps: bool, additionalBoltLength: float, additionalStudLength: float, weldGapValue: float) -> None:
        """
        Sets the General Connection Options.  
        
        Signature ``SpecificationsSetGeneralConnectionOptions(specName, modelGaskets, modelWeldGaps, additionalBoltLength, additionalStudLength, weldGapValue)`` 
        
        :param specName:  Specification Name 
        :type specName: str 
        :param modelGaskets:  Whether or not to model Gaskets 
        :type modelGaskets: bool 
        :param modelWeldGaps:  Whether or not to model weld gaps.  
        :type modelWeldGaps: bool 
        :param additionalBoltLength:  Additional length to add to bolts  
        :type additionalBoltLength: float 
        :param additionalStudLength:  Additional length to add to studs 
        :type additionalStudLength: float 
        :param weldGapValue: 
        :type weldGapValue: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetGeneralConnectionOptions(self, specName: str) -> tuple:
        """
        Gets the general connection options.  
        
        Signature ``SpecificationsGetGeneralConnectionOptions(specName)`` 
        
        :param specName:  Specification Name  
        :type specName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (modelGaskets, modelWeldGaps, additionalBoltLength, additionalStudLength, weldGapValue). modelGaskets is a bool.   Whether or not to model Gaskets modelWeldGaps is a bool.   Whether or not to model Weld Gaps additionalBoltLength is a float.   Additional length for bolts. additionalStudLength is a float.   Additional length for studsweldGapValue is a float. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsAddGenericPostPlacement(self, specName: str, placedPartIdentifier: str, postPlacementIdentifier: str, searchAttributes: 'list[str]') -> None:
        """
        Add a generic post placmeent rule.  
        
        Signature ``SpecificationsAddGenericPostPlacement(specName, placedPartIdentifier, postPlacementIdentifier, searchAttributes)`` 
        
        :param specName:  Specification Name  
        :type specName: str 
        :param placedPartIdentifier:  The placed part node identifier.  
        :type placedPartIdentifier: str 
        :param postPlacementIdentifier:  The post placement part identifier.  
        :type postPlacementIdentifier: str 
        :param searchAttributes:  Attribute search titles.  
        :type searchAttributes: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsRemoveGenericPostPlacement(self, specName: str, placedPartIdentifier: str, postPlacementIdentifier: str) -> None:
        """
        Remove a generic post placement option.  
        
        Signature ``SpecificationsRemoveGenericPostPlacement(specName, placedPartIdentifier, postPlacementIdentifier)`` 
        
        :param specName:  Specification Name  
        :type specName: str 
        :param placedPartIdentifier:  Placed part node identifier.  
        :type placedPartIdentifier: str 
        :param postPlacementIdentifier: 
        :type postPlacementIdentifier: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetGenericPostPlacements(self, specName: str) -> tuple:
        """
        Gets the defined generic post placement rules.  
        
        Signature ``SpecificationsGetGenericPostPlacements(specName)`` 
        
        :param specName:  Specification Name.  
        :type specName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (placedPartIdentifier, postPlacementIdentifier). placedPartIdentifier is a list of str.   The list of placed part node identifiers postPlacementIdentifier is a list of str.   The list of post placement node identifiers. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SpecificationsGetGenericPostPlacementSearchAttributes(self, specName: str, placedPartIdentifier: str, postPlacementIdentifier: str) -> 'list[str]':
        """
        Get the generic post placement search attributes.  
        
        Signature ``SpecificationsGetGenericPostPlacementSearchAttributes(specName, placedPartIdentifier, postPlacementIdentifier)`` 
        
        :param specName:  Specification Name  
        :type specName: str 
        :param placedPartIdentifier:  Placed part node identifier.  
        :type placedPartIdentifier: str 
        :param postPlacementIdentifier:  Post placement node identifier  
        :type postPlacementIdentifier: str 
        :returns:  Attribute search titles.  
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReloadSpecifications(self, forceReload: bool) -> None:
        """
        Reload Specifications into the reuse library.  
        
        Signature ``ReloadSpecifications(forceReload)`` 
        
        :param forceReload:  Should the specifications be forced to reload?                                           Setting forceReload false will reload only if there are no                                           (non-legacy) specifications loaded in the reuse library.  
        :type forceReload: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ReloadSpecification(self, specName: str) -> None:
        """
        Reload a Specification into the reuse library.  
        
        Signature ``ReloadSpecification(specName)`` 
        
        :param specName:  Specification Name  
        :type specName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteSpecification(self, specName: str) -> None:
        """
        Delete a Specification from the reuse library.  
        
        Signature ``DeleteSpecification(specName)`` 
        
        :param specName:  Specification Name  
        :type specName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class ConvertEccentricLinearToLinearMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConvertEccentricLinearToLinear():
    """
    Option to query if an existing :py:class:`NXOpen.Routing.ISegment`
    is a eccentric segment. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotConverted", "Is not converted Eccentric linear to linear"
       "Converted", "Is converted Eccentric linear to linear"
    """
    NotConverted = 0  # ConvertEccentricLinearToLinearMemberType
    Converted = 1  # ConvertEccentricLinearToLinearMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FixturePortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.FixturePort` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float) -> FixturePort:
        """
        Creates a FixturePort with a rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFixturePort(origin, alignmentVector, rotationVector, rotationObject, clockAngle)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fixture port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d) -> FixturePort:
        """
        Creates a FixturePort with no rotation vector at an absolute location.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFixturePort(origin, alignmentVector)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point) -> FixturePort:
        """
        Creates a FixturePort with a rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFixturePort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fixture port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Fixture Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point) -> FixturePort:
        """
        Creates a FixturePort with no rotation vector at a point.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFixturePort(origin, alignmentVector, point)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Fixture Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis) -> FixturePort:
        """
        Creates a FixturePort with a rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFixturePort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fixture port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Fixture Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis) -> FixturePort:
        """
        Creates a FixturePort with no rotation vector on an axis.  Default
        allows multiple connections to this port.  
        
        Signature ``CreateFixturePort(origin, alignmentVector, derivationObject)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Fixture Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> FixturePort:
        """
        Creates a FixturePort with a rotation vector at an absolute location  
        
        Signature ``CreateFixturePort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fixture port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param allowMultipleConnections:  Does this fixture port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, allowMultipleConnections: bool) -> FixturePort:
        """
        Creates a FixturePort with no rotation vector at an absolute location  
        
        Signature ``CreateFixturePort(origin, alignmentVector, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param allowMultipleConnections:  Does this fixture port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, point: NXOpen.Point, allowMultipleConnections: bool) -> FixturePort:
        """
        Creates a FixturePort with a rotation vector at a point  
        
        Signature ``CreateFixturePort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fixture port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param point:  Fixture Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fixture port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, point: NXOpen.Point, allowMultipleConnections: bool) -> FixturePort:
        """
        Creates a FixturePort with no rotation vector at a point  
        
        Signature ``CreateFixturePort(origin, alignmentVector, point, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param point:  Fixture Port derived from this point  
        :type point: :py:class:`NXOpen.Point` 
        :param allowMultipleConnections:  Does this fixture port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, rotationVector: NXOpen.Vector3d, rotationObject: NXOpen.DisplayableObject, clockAngle: float, axis: NXOpen.Axis, allowMultipleConnections: bool) -> FixturePort:
        """
        Creates a FixturePort with a rotation vector on an axis  
        
        Signature ``CreateFixturePort(origin, alignmentVector, rotationVector, rotationObject, clockAngle, axis, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param rotationVector:  Rotation Vector of the fixture port  
        :type rotationVector: :py:class:`NXOpen.Vector3d` 
        :param rotationObject:  Rotation derivation object, may be NXOpen.DisplayableObject.NULL  
        :type rotationObject: :py:class:`NXOpen.DisplayableObject` 
        :param clockAngle:  Clock angle increment in degrees for the rotation vector  
        :type clockAngle: float 
        :param axis:  Fixture Port derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fixture port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateFixturePort(self, origin: NXOpen.Point3d, alignmentVector: NXOpen.Vector3d, derivationObject: NXOpen.Axis, allowMultipleConnections: bool) -> FixturePort:
        """
        Creates a FixturePort with no rotation vector on an axis  
        
        Signature ``CreateFixturePort(origin, alignmentVector, derivationObject, allowMultipleConnections)`` 
        
        :param origin:  Origin of the fixture port  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param alignmentVector:  Alignment vector of the fixture port  
        :type alignmentVector: :py:class:`NXOpen.Vector3d` 
        :param derivationObject:  Fixture Port derived from this axis  
        :type derivationObject: :py:class:`NXOpen.Axis` 
        :param allowMultipleConnections:  Does this fixture port allow multiple wires to be routed to it?  
        :type allowMultipleConnections: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFromAxis(self, axis: NXOpen.Axis) -> FixturePort:
        """
        Creates a fixture port based on an existing axis.  
        
        Signature ``CreateFromAxis(axis)`` 
        
        :param axis:  The new Fixture Port will be derived from this axis  
        :type axis: :py:class:`NXOpen.Axis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def CreateFromCsys(self, csys: NXOpen.CartesianCoordinateSystem, createRotationVector: PortCreateRotationVector) -> FixturePort:
        """
        Creates a fixture port based on an existing Cartesian Coordinate System.  
        
        The port aligns with the Z axis of the Coordinate System. The port's rotation vector, if any,
        aligns with the Y direction of the Coordinate System.
        
        Signature ``CreateFromCsys(csys, createRotationVector)`` 
        
        :param csys:  The new Fixture Port will be derived from this Cartesian Coordinate System  
        :type csys: :py:class:`NXOpen.CartesianCoordinateSystem` 
        :param createRotationVector:  Should the rotation vector be created?  
        :type createRotationVector: :py:class:`NXOpen.Routing.PortCreateRotationVector` 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.FixturePort` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


class SelectPort(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Port) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Port) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Port, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Port` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Port, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Port, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Routing.Port` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Routing.Port` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Port, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Port` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Port:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Port) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Port` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Routing.Port`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Routing.Port`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Routing.Port`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Routing.Port`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Port = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Routing.Port` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Routing.Port` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectPort = ...  # unknown typename


class RouteObjectCollector(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Routing.RouteObjectCollector` class
    to create objects for getting routing objects.  
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    RoutingObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected routing object list 
    
    <hr>
    
    Getter Method
    
    Signature ``RoutingObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: RouteObjectCollector = ...  # unknown typename


class DeleteObjectsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.DeleteObjectsBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateDeleteObjectsBuilder`
    
    .. versionadded:: NX6.0.0
    """
    ObjectCollector: RouteObjectCollector = ...
    """
    Returns  the routing object collector 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.RouteObjectCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: routing_base ("Routing Basic")
    """
    Null: DeleteObjectsBuilder = ...  # unknown typename


class FittingOverstock(NXOpen.NXObject, ICharacteristic):
    """
    The :py:class:`NXOpen.Routing.FittingOverstock` object represents overstock
    applied over the faces of the routing parts.  
    
    .. versionadded:: NX7.5.0
    """
    
    def GetStockData(self) -> StockData:
        """
        Gets the :py:class:`NXOpen.Routing.StockData`.  
        
        Signature ``GetStockData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.StockData` 
        
        .. versionadded:: NX7.5.5
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def RenameFittingOverstockComponent(self, partName: str) -> None:
        """
        Renames the FittingOverstock component part with given name
        
        Signature ``RenameFittingOverstockComponent(partName)`` 
        
        :param partName:  Part name to be set  
        :type partName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponent(self) -> NXOpen.Assemblies.Component:
        """
        Returns the :py:class:`NXOpen.Assemblies.Component` created and controlled by the fitting overstock for a
        fitting overstock as Components stock.  
        
        Only returns a component if the fitting overstock type is
        :py:class:`RoutingStockUse.StockAsComponent <RoutingStockUse>`.  
        
        Signature ``GetComponent()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    Null: FittingOverstock = ...  # unknown typename


class BranchPathNumberingBuilderSequenceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BranchPathNumberingBuilderSequence():
    """
    Specifies the sequence method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Numbers", "1, 2, 3, and so on"
       "UpperCase", "A, B, C, and so on"
       "LowerCase", "a, b, c, and so on"
    """
    Numbers = 0  # BranchPathNumberingBuilderSequenceMemberType
    UpperCase = 1  # BranchPathNumberingBuilderSequenceMemberType
    LowerCase = 2  # BranchPathNumberingBuilderSequenceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BranchPathNumberingBuilder(NXOpen.Builder):
    """
    Builder class for Branch Path Numbering.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateBranchPathNumberingBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class Sequence():
        """
        Specifies the sequence method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Numbers", "1, 2, 3, and so on"
           "UpperCase", "A, B, C, and so on"
           "LowerCase", "a, b, c, and so on"
        """
        Numbers = 0  # BranchPathNumberingBuilderSequenceMemberType
        UpperCase = 1  # BranchPathNumberingBuilderSequenceMemberType
        LowerCase = 2  # BranchPathNumberingBuilderSequenceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetControlPoint(self, controlPoint: ControlPoint) -> None:
        """
        Set the control point for the start of the labeling sequence 
        
        Signature ``SetControlPoint(controlPoint)`` 
        
        :param controlPoint: 
        :type controlPoint: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX8.5.1
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    
    def SetControlPointFromSegment(self, controlPoint: ISegment) -> None:
        """
        Set the control point for the start of the labeling sequence 
        
        Signature ``SetControlPointFromSegment(controlPoint)`` 
        
        :param controlPoint: 
        :type controlPoint: :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX8.5.1
        
        License requirements: routing_hvac ("Routing HVAC")
        """
        ...
    
    DisplayOnSegments: bool = ...
    """
    Returns or sets   the toggle specified in the UI on whether to display the labels 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayOnSegments`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayOnSegments`` 
    
    :param displayOnSegments: 
    :type displayOnSegments: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    FirstBranchID: str = ...
    """
    Returns or sets  the formula specified in the UI to compute the first branch ID for the labeling sequence
    in order to be valid, the formula must be blank OR contain the phrase "PARENT_BRANCH_ID" 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstBranchID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstBranchID`` 
    
    :param numberingFirstBranchID: 
    :type numberingFirstBranchID: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    NextBranchID: str = ...
    """
    Returns or sets   the formula specified in the UI to compute the next branch ID for the labeling sequence
    in order to be valid, the formula must be blank OR contain the phrase "PREVIOUS_BRANCH_ID" 
    
    <hr>
    
    Getter Method
    
    Signature ``NextBranchID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``NextBranchID`` 
    
    :param nextBranchID: 
    :type nextBranchID: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Prefix: str = ...
    """
    Returns or sets  the prefix specified in the UI for the labels 
    
    <hr>
    
    Getter Method
    
    Signature ``Prefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``Prefix`` 
    
    :param prefix: 
    :type prefix: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    ReassignOnSegments: bool = ...
    """
    Returns or sets  the toggle specified in the UI on whether to reassign the labels  
    
    <hr>
    
    Getter Method
    
    Signature ``ReassignOnSegments`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``ReassignOnSegments`` 
    
    :param reassignOnSegments: 
    :type reassignOnSegments: bool 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    SequenceMethod: BranchPathNumberingBuilderSequence = ...
    """
    Returns or sets  the sequence method specified in the UI for the labels      
    
    <hr>
    
    Getter Method
    
    Signature ``SequenceMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.BranchPathNumberingBuilderSequence` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``SequenceMethod`` 
    
    :param sequenceMethod: 
    :type sequenceMethod: :py:class:`NXOpen.Routing.BranchPathNumberingBuilderSequence` 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    StartValue: str = ...
    """
    Returns or sets   the start value specified in the UI for the labeling sequence 
    
    <hr>
    
    Getter Method
    
    Signature ``StartValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    .. deprecated::  NX8.5.2
       Use :py:meth:`Routing.BranchPathNumberingBuilder.StartValueForNumbers`, :py:meth:`Routing.BranchPathNumberingBuilder.StartValueForUpperCase`, or  :py:meth:`Routing.BranchPathNumberingBuilder.StartValueForLowerCase` instead.
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``StartValue`` 
    
    :param startValue: 
    :type startValue: str 
    
    .. versionadded:: NX8.5.1
    
    .. deprecated::  NX8.5.2
       Use :py:meth:`Routing.BranchPathNumberingBuilder.StartValueForNumbers`, :py:meth:`Routing.BranchPathNumberingBuilder.StartValueForUpperCase`, or  :py:meth:`Routing.BranchPathNumberingBuilder.StartValueForLowerCase` instead.
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    StartValueForLowerCase: str = ...
    """
    Returns or sets  the start value for lower case alphabet.  
    
    The default value is "a" if the customer does not call this method  
    
    <hr>
    
    Getter Method
    
    Signature ``StartValueForLowerCase`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``StartValueForLowerCase`` 
    
    :param startValueForLowerCase: 
    :type startValueForLowerCase: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    StartValueForNumbers: str = ...
    """
    Returns or sets  the start value for numbers.  
    
    The default value is "1" if the customer does not call this method  
    
    <hr>
    
    Getter Method
    
    Signature ``StartValueForNumbers`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``StartValueForNumbers`` 
    
    :param startValueForNumbers: 
    :type startValueForNumbers: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    StartValueForUpperCase: str = ...
    """
    Returns or sets  the start value for upper case alphabet.  
    
    The default value is "A" if the customer does not call this method  
    
    <hr>
    
    Getter Method
    
    Signature ``StartValueForUpperCase`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``StartValueForUpperCase`` 
    
    :param startValueForUpperCase: 
    :type startValueForUpperCase: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Suffix: str = ...
    """
    Returns or sets  the suffix specified in the UI for the labels  
    
    <hr>
    
    Getter Method
    
    Signature ``Suffix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    
    <hr>
    
    Setter Method
    
    Signature ``Suffix`` 
    
    :param suffix: 
    :type suffix: str 
    
    .. versionadded:: NX8.5.1
    
    License requirements: routing_hvac ("Routing HVAC")
    """
    Null: BranchPathNumberingBuilder = ...  # unknown typename


class InstanceNameLookupBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Routing.InstanceNameLookupBuilder`.  
    
    Routing.InstanceNameLookupBuilder is used to look up the matching part to place
    based on the criteria defined in the INSTANCE_NAME_LOOKUP node and the ship 
    identifier specified in the customer defaults.
    To create a new instance of this class, use :py:meth:`NXOpen.Routing.RouteManager.CreateInstanceNameLookupBuilder`
    
    .. versionadded:: NX8.0.0
    """
    InstanceNameCombo: str = ...
    """
    Returns or sets  the instance name 
    
    <hr>
    
    Getter Method
    
    Signature ``InstanceNameCombo`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_pipetube ("Routing Piping and Tubing")
    
    <hr>
    
    Setter Method
    
    Signature ``InstanceNameCombo`` 
    
    :param instanceNameCombo: 
    :type instanceNameCombo: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: routing_pipetube ("Routing Piping and Tubing")
    """
    Null: InstanceNameLookupBuilder = ...  # unknown typename


class SelectStock(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Stock) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Stock) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Stock, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Stock` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Stock, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Stock, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Routing.Stock` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Routing.Stock` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Stock, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Stock` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Stock:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Stock) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Routing.Stock`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Routing.Stock`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Routing.Stock`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Routing.Stock`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Stock = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Routing.Stock` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Routing.Stock` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectStock = ...  # unknown typename


class ProfileFromMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProfileFrom():
    """
    Describes whether the stock profile is located at the first segment in the
    path or the last segment.  
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", "Profile is at the start of the first segment."
       "End", "Profile is at the end of the last segment."
    """
    Start = 0  # ProfileFromMemberType
    End = 1  # ProfileFromMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ArcSegmentCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.ArcSegment` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.SegmentManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class ConvertLinearToEccentricLinearMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConvertLinearToEccentricLinear():
    """
    Option to query if an existing :py:class:`NXOpen.Routing.ISegment`
    is a eccentric segment. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotConverted", "Is not converted linear to Eccentric linear"
       "Converted", "Is converted linear to Eccentric linear"
    """
    NotConverted = 0  # ConvertLinearToEccentricLinearMemberType
    Converted = 1  # ConvertLinearToEccentricLinearMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplineSegment(NXOpen.Spline, ISegment):
    """
    Represents a spline segment.  
    
    To obtain an instance of this class use :py:class:`NXOpen.Routing.SplineSegmentCollection`
    
    .. versionadded:: NX4.0.0
    """
    
    def GetGuid(self) -> str:
        """
        Returns the Globally Unique Identifier (GUID) for this segment.  
        
        Signature ``GetGuid()`` 
        
        :returns:  The GUID for this segment.  
        :rtype: str 
        
        .. versionadded:: NX8.0.3
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndRcps(self) -> tuple:
        """
        Return of segment end control points.  
        
        The :py:class:`NXOpen.Routing.ControlPoint` defines an end of a segment 
        
        Signature ``GetEndRcps()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startRcp, endRcp). startRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining start of segment endRcp is a :py:class:`NXOpen.Routing.ControlPoint`.   RCP defining end of segment 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndRcps(self, startRcp: ControlPoint, endRcp: ControlPoint) -> None:
        """
        Signature ``SetEndRcps(startRcp, endRcp)`` 
        
        :param startRcp:  RCP defining start of segment  
        :type startRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        :param endRcp:  RCP defining end of segment  
        :type endRcp: :py:class:`NXOpen.Routing.ControlPoint` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetEndPoints(self) -> tuple:
        """
        Get the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``GetEndPoints()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (startPoint, endPoint). startPoint is a :py:class:`NXOpen.Point3d`.   Location of end 0 in ABS coordinates endPoint is a :py:class:`NXOpen.Point3d`.   Location of end 1 in ABS coordinates 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetEndPoints(self, startPoint: NXOpen.Point3d, endPoint: NXOpen.Point3d) -> None:
        """
        Set the current location of the segment ends in ABS coordinates.  
        
        This value is
        overridden by the coordinates of the end RCPs associated with this segment. 
        
        Signature ``SetEndPoints(startPoint, endPoint)`` 
        
        :param startPoint:  New location of end 0 in ABS coordinates  
        :type startPoint: :py:class:`NXOpen.Point3d` 
        :param endPoint:  New location of end 1 in ABS coordinates  
        :type endPoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsTerminalSegment(self) -> Terminal:
        """
        Is given segment a terminal segment?  
        
        Signature ``GetIsTerminalSegment()`` 
        
        :returns:  Is segment a terminal segment?  
        :rtype: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetIsTerminalSegment(self, isTerminal: Terminal) -> None:
        """
        Set given segment to be a terminal segment? 
        
        Signature ``SetIsTerminalSegment(isTerminal)`` 
        
        :param isTerminal:  Set as terminal segment?  
        :type isTerminal: :py:class:`NXOpen.Routing.Terminal` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsSegmentInterior(self) -> Interior:
        """
        Query if a segment is interior to any part  
        
        Signature ``GetIsSegmentInterior()`` 
        
        :returns:  Is segment interior?  
        :rtype: :py:class:`NXOpen.Routing.Interior` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetSegmentInteriorPart(self, interiorPart: NXOpen.Assemblies.Component) -> None:
        """
        Set a segment to be interior to supplied part 
        
        Signature ``SetSegmentInteriorPart(interiorPart)`` 
        
        :param interiorPart:  Part segment interior?  
        :type interiorPart: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentStock(self) -> 'list[Stock]':
        """
        Returns all stocks that directly reference this segment as part of the path defining the stock.  
        
        Signature ``GetSegmentStock()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetSegmentAllStocks(self) -> 'list[Stock]':
        """
        Returns :py:class:`NXOpen.Routing.Stock` as well as :py:class:`NXOpen.Routing.Overstock`
        objects from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetSegmentAllStocks()`` 
        
        :returns:  Array of stocks/overstocks.  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCablewaysLayoutViews(self) -> 'list[NXOpen.Routing.Electrical.CablewaysLayoutView]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` objects
        from the :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCablewaysLayoutViews()`` 
        
        :returns:  Array of cableways layout views.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CablewaysLayoutView` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCableDevices(self) -> 'list[NXOpen.Routing.Electrical.CableDevice]':
        """
        Returns :py:class:`NXOpen.Routing.Electrical.CableDevice` objects
        from :py:class:`NXOpen.Routing.ISegment`.  
        
        Signature ``GetCableDevices()`` 
        
        :returns:  Array of cable devices.  
        :rtype: list of :py:class:`NXOpen.Routing.Electrical.CableDevice` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIsEccentricSegment(self) -> Eccentric:
        """
        Is given segment a eccentric segment?  
        
        Signature ``GetIsEccentricSegment()`` 
        
        :returns:  Is segment a eccentric segment?  
        :rtype: :py:class:`NXOpen.Routing.Eccentric` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertLinearToEccentricLinear(self) -> ConvertLinearToEccentricLinear:
        """
        Is line segment converted to eccentric line segment?  
        
        Signature ``ConvertLinearToEccentricLinear()`` 
        
        :returns:  Is line segment converted to eccentric line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertLinearToEccentricLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertEccentricLinearToLinear(self) -> ConvertEccentricLinearToLinear:
        """
        Is line segment eccentric converted to line segment?  
        
        Signature ``ConvertEccentricLinearToLinear()`` 
        
        :returns:  Is line segment eccentric converted to line segment?  
        :rtype: :py:class:`NXOpen.Routing.ConvertEccentricLinearToLinear` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def GetCharacteristics(self) -> CharacteristicList:
        """
        Get all of the characteristics values on the this object.  
        
        Signature ``GetCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics(self, values: CharacteristicList) -> None:
        """
        Set all of the characteristics values on this object.  
        
        Signature ``SetCharacteristics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristics2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetIntegerCharacteristic(self, name: str) -> int:
        """
        Get the value of an integer characteristic associated with the input name.  
        
        Signature ``GetIntegerCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: int) -> None:
        """
        Set the value of an integer characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to integer if it's 
        type is not integer. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: float) -> None:
        """
        Set the value of an real characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to real if it's 
        type is not real. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic(self, name: str, value: str) -> None:
        """
        Set the value of an string characteristic associated with the input name,
        adds a new characteristic to the list if one doesn't exist already. Converts
        the type of an existing characteristic with the same name to string if it's 
        type is not string. 
        
        Signature ``SetCharacteristic(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`NXOpen.Routing.ICharacteristic.SetCharacteristic2` instead.
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetRealCharacteristic(self, name: str) -> float:
        """
        Get the value of a real characteristic associated with the input name.  
        
        Signature ``GetRealCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetStringCharacteristic(self, name: str) -> str:
        """
        Get the value of a string characteristic associated with the input name.  
        
        Signature ``GetStringCharacteristic(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def DeleteCharacterstics(self, values: CharacteristicList) -> None:
        """
        Removes the input list of characteristics from this object.  
        
        Signature ``DeleteCharacterstics(values)`` 
        
        :param values: 
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetDestinationCharacteristics(self) -> CharacteristicList:
        """
        Returns the destination characteristics from the input object.  
        
        Retrieves the description of which destination characteristics to read
        from the application view and then reads those destination 
        characteristics from the object
        
          * Ports: Reads characteristics from the port.
          * RCPs: Attempts to find a port at the RCP, reads characteristics from
        the port if it exists, otherwise reads from the
        stock associated with the rcp.
          * Segments: Reads characteristics from the stock associated with the segment.
          * Components: Reads characteristics directly from the component.
          * Stock: Reads characteristics from the stock or from the stock's data.
        
        Signature ``GetDestinationCharacteristics()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: int) -> None:
        """
        Sets or creates an integer type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: float) -> None:
        """
        Sets or creates a double type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def SetCharacteristic2(self, title: str, value: str) -> None:
        """
        Sets or creates a string type type attribute associated with the input title. 
        creating a new attribute if one doesn't exist already. 
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit a part attribute on the stock part. For legacy parts 
        where the attribute is on the stock component, the attribute will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit an attribute on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attribute will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create an attribute on the object itself. 
        
        Signature ``SetCharacteristic2(title, value)`` 
        
        :param title:  Unique title for the Attribute or Characteristic  
        :type title: str 
        :param value:  New Value to be set on the Attribute  
        :type value: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetCharacteristics2(self, values: CharacteristicList) -> None:
        """
        Sets all attributes associated with the titles from the input list, 
        creating new attributes for the ones that don't exist already.  
        
        If the method is called on a stock :py:class:`Assemblies.Component`, the 
        method will create or edit part attributes on the stock part. For legacy parts 
        where the attributes are on the stock component, the attributes will be moved 
        to the stock part. 
        
        If the method is called on a non-stock :py:class:`Assemblies.Component`, 
        the method will create or edit attributes on the corresponding instance. For 
        legacy parts where the attribute is on the component, the attributes will be moved 
        to the corresponding instance. 
        
        If the method is called on any non-component object, the method will 
        access or create attributes on the object itself. 
        
        Signature ``SetCharacteristics2(values)`` 
        
        :param values:  :py:class:`NXOpen.Routing.CharacteristicList` having the titles, types and values of Attributes to be set  
        :type values: :py:class:`NXOpen.Routing.CharacteristicList` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    IsFlexibleParametricSplineSegment: bool = ...
    """
    Returns  a boolean value that indicates whether the spline has been
    converted to the new flexible parametric spline in NX9.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsFlexibleParametricSplineSegment`` 
    
    :returns:  Is this a constrained spline?  
    :rtype: bool 
    
    .. versionadded:: NX9.0.3
    
    License requirements: routing_base ("Routing Basic")
    """
    FollowCurve: NXOpen.Curve = ...
    """
    Returns   the segment follow curve.  
    
    NULL object indicates segment has no follow curve 
    
    <hr>
    
    Getter Method
    
    Signature ``FollowCurve`` 
    
    :returns:  Follow curve of segment  
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Length: float = ...
    """
    Returns   the length of the segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: SplineSegment = ...  # unknown typename


class InterfaceTerminalRelationshipCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` objects.  
    
    See NX Routing help for the Connectivity data model documentation.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.2
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateElectricalInterfaceTerminalRelationship(self) -> InterfaceTerminalRelationshipShadow:
        """
        Creates and returns a :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` object
        under electrical data root object.
        
        Signature ``CreateElectricalInterfaceTerminalRelationship()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateElectricalInterfaceTerminalRelationship(self, guid: str) -> InterfaceTerminalRelationshipShadow:
        """
        Creates and returns a :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` object
        under electrical data root object.
        
        Signature ``CreateElectricalInterfaceTerminalRelationship(guid)`` 
        
        :param guid:  Unique Identifier, NX will generate guid, if the value is NULL  
        :type guid: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def CreateMechanicalInterfaceTerminalRelationship(self) -> InterfaceTerminalRelationshipShadow:
        """
        Creates and returns a :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` object
        under mechanical data root object.
        
        Signature ``CreateMechanicalInterfaceTerminalRelationship()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def CreateMechanicalInterfaceTerminalRelationship(self, guid: str) -> InterfaceTerminalRelationshipShadow:
        """
        Creates and returns a :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` object
        under mechanical data root object.
        
        Signature ``CreateMechanicalInterfaceTerminalRelationship(guid)`` 
        
        :param guid:  Unique Identifier, NX will generate guid, if the value is NULL  
        :type guid: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Routing.InterfaceTerminalRelationshipShadow` 
        
        .. versionadded:: NX4.0.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    


class StockDevice(SingleDevice):
    """
    The Routing StockDevice corresponds to a generic stock instance 
    of :py:class:`Routing.SingleDevice`.  
    
    Creator not available in KF.
    
    .. versionadded:: NX4.0.2
    """
    
    def LogStockDeviceWiresforConcurrency(self, partTag: NXOpen.Part) -> None:
        """
        Log stock device's wire and its segment for concurrency 
        
        Signature ``LogStockDeviceWiresforConcurrency(partTag)`` 
        
        :param partTag: 
        :type partTag: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX10.0.3
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    StockDefinition: StockDefinition = ...
    """
    Returns or sets  the stock definition.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Routing.StockDefinition` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockDefinition`` 
    
    :param routeStockDefinition: 
    :type routeStockDefinition: :py:class:`NXOpen.Routing.StockDefinition` 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    StockLength: float = ...
    """
    Returns or sets  the stock length.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    
    <hr>
    
    Setter Method
    
    Signature ``StockLength`` 
    
    :param stockLength: 
    :type stockLength: float 
    
    .. versionadded:: NX4.0.2
    
    License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
    """
    Null: StockDevice = ...  # unknown typename


class StockCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Routing.Stock` objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Routing.RouteManager`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateStock(self, stockData: StockData, anchor: Anchor, crossSection: CrossSection, segments: 'list[ISegment]') -> 'list[Stock]':
        """
        Creates a :py:class:`NXOpen.Routing.Stock` object.  
        
        Signature ``CreateStock(stockData, anchor, crossSection, segments)`` 
        
        :param stockData:  The :py:class:`NXOpen.Routing.StockData` that defines the stock  
        :type stockData: :py:class:`NXOpen.Routing.StockData` 
        :param anchor:  The :py:class:`NXOpen.Routing.Anchor` from the input                                           :py:class:`NXOpen.Routing.StockData` to use, None is allowed for                                           no anchor.  
        :type anchor: :py:class:`NXOpen.Routing.Anchor` 
        :param crossSection:  The :py:class:`NXOpen.Routing.CrossSection` from the input                                           :py:class:`NXOpen.Routing.StockData` to use, None is not allowed.  
        :type crossSection: :py:class:`NXOpen.Routing.CrossSection` 
        :param segments:  The array of :py:class:`NXOpen.Routing.ISegment` curves that                                                the stock must cover.  
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :returns:  The resulting array of newly created :py:class:`NXOpen.Routing.Stock`
        objects.  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def GetComponentStock(self, component: NXOpen.Assemblies.Component) -> Stock:
        """
        Returns the :py:class:`NXOpen.Routing.Stock` that controls the given component.  
        
        Only returns a :py:class:`NXOpen.Routing.Stock` if the input component is a component created
        by a Stock as Components stock object.  
        
        Signature ``GetComponentStock(component)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.Assemblies.Component` 
        :returns:  Returns None if the input component is not controlled
        by a :py:class:`NXOpen.Routing.Stock`  
        :rtype: :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def ConvertToStockAsComponents(self, convertSpaceReservartion: bool, nameType: ComponentName) -> None:
        """
        Converts a part file from Legacy Stock into Stock as Components.  
        
        Converts all stocks whose use is :py:class:`NXOpen.Routing.StockUse.LegacyStock <NXOpen.Routing.StockUse>` into :py:class:`NXOpen.Routing.StockUse.StockAsComponent <NXOpen.Routing.StockUse>`
        stocks by creating components for each stock.  After calling this routine, all new stocks in this part will have components associated with them.  
        
        Signature ``ConvertToStockAsComponents(convertSpaceReservartion, nameType)`` 
        
        :param convertSpaceReservartion:  If true, convert Space Reservation as Components  
        :type convertSpaceReservartion: bool 
        :param nameType:  Naming scheme to use for components.  Calls                                                                            ??? on                                                                            each new stock component if input is                                                                            :py:class:`RoutingComponentName.Permanent <RoutingComponentName>`.  
        :type nameType: :py:class:`NXOpen.Routing.ComponentName` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def AddStockRetStock(self, stockPart: CharacteristicList, dataCharx: CharacteristicList, segments: 'list[ISegment]', routeLevel: str) -> 'list[Stock]':
        """
        Creates stock :py:class:`NXOpen.Routing.Stock` on the given segments.  
        
        The segments do not need to be in order, and don't
        necessarily have to form a single path. Returns created stock and number of stock 
        
        Signature ``AddStockRetStock(stockPart, dataCharx, segments, routeLevel)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate                                                                                                      :py:class:`NXOpen.Routing.StockData` for building the stock.                                                                                                      See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param routeLevel:  Routing level.  
        :type routeLevel: str 
        :returns:  Array of stocks created  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    @typing.overload
    def AddStock(self, stockPart: CharacteristicList, dataCharx: CharacteristicList, segments: 'list[ISegment]', routeLevel: str) -> None:
        """
        Creates stock on the given segments. The segments do not need to be in order, and don't
        necessarily have to form a single path. 
        
        Signature ``AddStock(stockPart, dataCharx, segments, routeLevel)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate                                                                                                      :py:class:`NXOpen.Routing.StockData` for building the stock.                                                                                                      See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param routeLevel:  Routing level.  
        :type routeLevel: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def AddStock(self, stockPart: CharacteristicList, dataCharx: CharacteristicList, segments: 'list[ISegment]', routeLevel: str, isSpaceReservation: bool) -> 'list[Stock]':
        """
        Creates normal or space reservation stock on the given segments. The segments do not need to be in order,
        and don't necessarily have to form a single path.
        
        Signature ``AddStock(stockPart, dataCharx, segments, routeLevel, isSpaceReservation)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate                                                                                                           :py:class:`NXOpen.Routing.StockData` for building the stock.                                                                                                           See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param routeLevel:  Routing level.  
        :type routeLevel: str 
        :param isSpaceReservation:  TRUE to create Space Reservation stock, FALSE to create normal stock  
        :type isSpaceReservation: bool 
        :returns:  Array of stocks created  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    @typing.overload
    def AddStock(self, stockPart: CharacteristicList, dataCharx: CharacteristicList, segments: 'list[ISegment]', routeLevel: str, isSpaceReservation: bool, anchorName: str) -> 'list[Stock]':
        """
        Creates normal or space reservation stock on the given segments. The segments do not need to be in order,
        and don't necessarily have to form a single path.
        
        Signature ``AddStock(stockPart, dataCharx, segments, routeLevel, isSpaceReservation, anchorName)`` 
        
        :param stockPart:  Characteristic list used to find the appropriate                                                                                                           :py:class:`NXOpen.Routing.StockData` for building the stock.                                                                                                           See :py:meth:`Routing.StockDataCollection.CreateStockData`.  
        :type stockPart: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param dataCharx:  The list of optional and required characteristics to apply to the new stock.  
        :type dataCharx: :py:class:`NXOpen.Routing.CharacteristicList` 
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        :param routeLevel:  Routing level.  
        :type routeLevel: str 
        :param isSpaceReservation:  TRUE to create Space Reservation stock, FALSE to create normal stock  
        :type isSpaceReservation: bool 
        :param anchorName:  Name of the anchor to use.  
        :type anchorName: str 
        :returns:  Array of stocks created  
        :rtype: list of :py:class:`NXOpen.Routing.Stock` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveStock(self, segments: 'list[ISegment]') -> None:
        """
        Removes all stocks (excluding flexed stocks) from the input set of segments.  
        
        Signature ``RemoveStock(segments)`` 
        
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def RemoveAllFillerStocks(self, segments: 'list[ISegment]') -> None:
        """
        Removes all filler stocks from the input set of segments.  
        
        Signature ``RemoveAllFillerStocks(segments)`` 
        
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.4
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def UpdateBundleStockForFiller(self, segments: 'list[ISegment]') -> None:
        """
        Update the bundle stock if the :py:class:`NXOpen.Routing.Filler` stock is created underneath it.  
        
        Signature ``UpdateBundleStockForFiller(segments)`` 
        
        :param segments: 
        :type segments: list of :py:class:`NXOpen.Routing.ISegment` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_advanced ("Routing Advanced"), routing_base ("Routing Basic")
        """
        ...
    
    
    def SetAttachedStockLength(self, partOcc: NXOpen.Assemblies.Component) -> None:
        """
        Set the length of the :py:class:`NXOpen.Routing.Stock` to which a
        :py:class:`NXOpen.Assemblies.Component` object is attached.  
        
        Signature ``SetAttachedStockLength(partOcc)`` 
        
        :param partOcc: 
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def SetReferenceStockFromObject(self, object: NXOpen.NXObject) -> None:
        """
        Sets the reference :py:class:`NXOpen.Routing.Stock` information based
        on the :py:class:`NXOpen.Routing.Stock` associated with this object.  
        
        Signature ``SetReferenceStockFromObject(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    
    
    def ResetReferenceStock(self) -> None:
        """
        Resets the reference :py:class:`NXOpen.Routing.Stock` information to None.  
        
        The information
        attributes are rotation, twist, negate, flip, port and anchor. They determine the default
        creation options for the new stock. This information is used during path creation. 
        
        Signature ``ResetReferenceStock()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: routing_base ("Routing Basic")
        """
        ...
    


